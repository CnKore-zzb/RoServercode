// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SessionTeam.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SessionTeam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* MemberData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobTeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMemberHelpQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemberHelpQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMemberWantedQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemberWantedQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobTeamWanted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobTeamWanted_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobTeamApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobTeamApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamSealData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamSealData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamSummaryItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamSummaryItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamDataUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamDataUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMemberUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemberUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamApplyUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamApplyUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessTeamInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessTeamInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMemberApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemberApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessTeamApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessTeamApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberPosUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberPosUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberDataUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberDataUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* LockTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LockTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamSummon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamSummon_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearApplyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearApplyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuickEnter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickEnter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTeamOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTeamOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserTeamInfoTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserTeamInfoTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetMemberOptionTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetMemberOptionTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberWantedQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberWantedQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestWantedQuestTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestWantedQuestTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateWantedQuestTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateWantedQuestTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptHelpWantedTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptHelpWantedTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateHelpWantedTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateHelpWantedTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryHelpWantedTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryHelpWantedTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberCat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberCat_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryMemberCatTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryMemberCatTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberCatUpdateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberCatUpdateTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TeamParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETeamGlobal_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETeamJob_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMemberData_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAutoType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETeamData_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETeamInviteType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETeamApplyType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SessionTeam_2eproto() {
  protobuf_AddDesc_SessionTeam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SessionTeam.proto");
  GOOGLE_CHECK(file != NULL);
  MemberData_descriptor_ = file->message_type(0);
  static const int MemberData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberData, values_),
  };
  MemberData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberData_descriptor_,
      MemberData::default_instance_,
      MemberData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberData));
  TeamMember_descriptor_ = file->message_type(1);
  static const int TeamMember_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, accid_),
  };
  TeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMember_descriptor_,
      TeamMember::default_instance_,
      TeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMember));
  BlobTeamMember_descriptor_ = file->message_type(2);
  static const int BlobTeamMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTeamMember, members_),
  };
  BlobTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobTeamMember_descriptor_,
      BlobTeamMember::default_instance_,
      BlobTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobTeamMember));
  TeamMemberHelpQuest_descriptor_ = file->message_type(3);
  static const int TeamMemberHelpQuest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberHelpQuest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberHelpQuest, helpquest_),
  };
  TeamMemberHelpQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMemberHelpQuest_descriptor_,
      TeamMemberHelpQuest::default_instance_,
      TeamMemberHelpQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberHelpQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberHelpQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMemberHelpQuest));
  TeamMemberWantedQuest_descriptor_ = file->message_type(4);
  static const int TeamMemberWantedQuest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberWantedQuest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberWantedQuest, acceptquest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberWantedQuest, acceptstep_),
  };
  TeamMemberWantedQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMemberWantedQuest_descriptor_,
      TeamMemberWantedQuest::default_instance_,
      TeamMemberWantedQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberWantedQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberWantedQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMemberWantedQuest));
  BlobTeamWanted_descriptor_ = file->message_type(5);
  static const int BlobTeamWanted_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTeamWanted, memberquest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTeamWanted, memberhelp_),
  };
  BlobTeamWanted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobTeamWanted_descriptor_,
      BlobTeamWanted::default_instance_,
      BlobTeamWanted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTeamWanted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTeamWanted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobTeamWanted));
  TeamApply_descriptor_ = file->message_type(6);
  static const int TeamApply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApply, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApply, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApply, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApply, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApply, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApply, accid_),
  };
  TeamApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamApply_descriptor_,
      TeamApply::default_instance_,
      TeamApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamApply));
  BlobTeamApply_descriptor_ = file->message_type(7);
  static const int BlobTeamApply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTeamApply, applys_),
  };
  BlobTeamApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobTeamApply_descriptor_,
      BlobTeamApply::default_instance_,
      BlobTeamApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTeamApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTeamApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobTeamApply));
  TeamSealData_descriptor_ = file->message_type(8);
  static const int TeamSealData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSealData, seal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSealData, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSealData, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSealData, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSealData, lastonlinetime_),
  };
  TeamSealData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamSealData_descriptor_,
      TeamSealData::default_instance_,
      TeamSealData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSealData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSealData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamSealData));
  TeamSummaryItem_descriptor_ = file->message_type(9);
  static const int TeamSummaryItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSummaryItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSummaryItem, value_),
  };
  TeamSummaryItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamSummaryItem_descriptor_,
      TeamSummaryItem::default_instance_,
      TeamSummaryItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSummaryItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSummaryItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamSummaryItem));
  TeamData_descriptor_ = file->message_type(10);
  static const int TeamData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamData, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamData, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamData, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamData, applys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamData, seal_),
  };
  TeamData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamData_descriptor_,
      TeamData::default_instance_,
      TeamData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamData));
  TeamList_descriptor_ = file->message_type(11);
  static const int TeamList_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamList, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamList, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamList, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamList, list_),
  };
  TeamList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamList_descriptor_,
      TeamList::default_instance_,
      TeamList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamList));
  TeamDataUpdate_descriptor_ = file->message_type(12);
  static const int TeamDataUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataUpdate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataUpdate, datas_),
  };
  TeamDataUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamDataUpdate_descriptor_,
      TeamDataUpdate::default_instance_,
      TeamDataUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamDataUpdate));
  TeamMemberUpdate_descriptor_ = file->message_type(13);
  static const int TeamMemberUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberUpdate, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberUpdate, deletes_),
  };
  TeamMemberUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMemberUpdate_descriptor_,
      TeamMemberUpdate::default_instance_,
      TeamMemberUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMemberUpdate));
  TeamApplyUpdate_descriptor_ = file->message_type(14);
  static const int TeamApplyUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyUpdate, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyUpdate, deletes_),
  };
  TeamApplyUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamApplyUpdate_descriptor_,
      TeamApplyUpdate::default_instance_,
      TeamApplyUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamApplyUpdate));
  CreateTeam_descriptor_ = file->message_type(15);
  static const int CreateTeam_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeam, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeam, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeam, minlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeam, maxlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeam, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeam, autoaccept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeam, name_),
  };
  CreateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateTeam_descriptor_,
      CreateTeam::default_instance_,
      CreateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateTeam));
  InviteMember_descriptor_ = file->message_type(16);
  static const int InviteMember_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMember, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMember, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMember, userguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMember, catid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMember, teamname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMember, username_),
  };
  InviteMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteMember_descriptor_,
      InviteMember::default_instance_,
      InviteMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteMember));
  ProcessTeamInvite_descriptor_ = file->message_type(17);
  static const int ProcessTeamInvite_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTeamInvite, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTeamInvite, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTeamInvite, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTeamInvite, userguid_),
  };
  ProcessTeamInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessTeamInvite_descriptor_,
      ProcessTeamInvite::default_instance_,
      ProcessTeamInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTeamInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTeamInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessTeamInvite));
  TeamMemberApply_descriptor_ = file->message_type(18);
  static const int TeamMemberApply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberApply, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberApply, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberApply, guid_),
  };
  TeamMemberApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMemberApply_descriptor_,
      TeamMemberApply::default_instance_,
      TeamMemberApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMemberApply));
  ProcessTeamApply_descriptor_ = file->message_type(19);
  static const int ProcessTeamApply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTeamApply, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTeamApply, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTeamApply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTeamApply, userguid_),
  };
  ProcessTeamApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessTeamApply_descriptor_,
      ProcessTeamApply::default_instance_,
      ProcessTeamApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTeamApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTeamApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessTeamApply));
  KickMember_descriptor_ = file->message_type(20);
  static const int KickMember_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMember, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMember, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMember, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMember, catid_),
  };
  KickMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickMember_descriptor_,
      KickMember::default_instance_,
      KickMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickMember));
  ExchangeLeader_descriptor_ = file->message_type(21);
  static const int ExchangeLeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeLeader, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeLeader, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeLeader, userid_),
  };
  ExchangeLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeLeader_descriptor_,
      ExchangeLeader::default_instance_,
      ExchangeLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeLeader));
  ExitTeam_descriptor_ = file->message_type(22);
  static const int ExitTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTeam, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTeam, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTeam, teamid_),
  };
  ExitTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitTeam_descriptor_,
      ExitTeam::default_instance_,
      ExitTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitTeam));
  EnterTeam_descriptor_ = file->message_type(23);
  static const int EnterTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTeam, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTeam, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTeam, data_),
  };
  EnterTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterTeam_descriptor_,
      EnterTeam::default_instance_,
      EnterTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterTeam));
  MemberPosUpdate_descriptor_ = file->message_type(24);
  static const int MemberPosUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberPosUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberPosUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberPosUpdate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberPosUpdate, pos_),
  };
  MemberPosUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberPosUpdate_descriptor_,
      MemberPosUpdate::default_instance_,
      MemberPosUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberPosUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberPosUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberPosUpdate));
  MemberDataUpdate_descriptor_ = file->message_type(25);
  static const int MemberDataUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDataUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDataUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDataUpdate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDataUpdate, members_),
  };
  MemberDataUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberDataUpdate_descriptor_,
      MemberDataUpdate::default_instance_,
      MemberDataUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDataUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDataUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberDataUpdate));
  LockTarget_descriptor_ = file->message_type(26);
  static const int LockTarget_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockTarget, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockTarget, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockTarget, targetid_),
  };
  LockTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LockTarget_descriptor_,
      LockTarget::default_instance_,
      LockTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LockTarget));
  TeamSummon_descriptor_ = file->message_type(27);
  static const int TeamSummon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSummon, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSummon, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSummon, raidid_),
  };
  TeamSummon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamSummon_descriptor_,
      TeamSummon::default_instance_,
      TeamSummon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSummon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSummon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamSummon));
  ClearApplyList_descriptor_ = file->message_type(28);
  static const int ClearApplyList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearApplyList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearApplyList, param_),
  };
  ClearApplyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearApplyList_descriptor_,
      ClearApplyList::default_instance_,
      ClearApplyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearApplyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearApplyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearApplyList));
  QuickEnter_descriptor_ = file->message_type(29);
  static const int QuickEnter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickEnter, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickEnter, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickEnter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickEnter, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickEnter, set_),
  };
  QuickEnter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuickEnter_descriptor_,
      QuickEnter::default_instance_,
      QuickEnter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickEnter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickEnter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuickEnter));
  SetTeamOption_descriptor_ = file->message_type(30);
  static const int SetTeamOption_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamOption, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamOption, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamOption, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamOption, items_),
  };
  SetTeamOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTeamOption_descriptor_,
      SetTeamOption::default_instance_,
      SetTeamOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTeamOption));
  QueryUserTeamInfoTeamCmd_descriptor_ = file->message_type(31);
  static const int QueryUserTeamInfoTeamCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserTeamInfoTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserTeamInfoTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserTeamInfoTeamCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserTeamInfoTeamCmd, teamid_),
  };
  QueryUserTeamInfoTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryUserTeamInfoTeamCmd_descriptor_,
      QueryUserTeamInfoTeamCmd::default_instance_,
      QueryUserTeamInfoTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserTeamInfoTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserTeamInfoTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryUserTeamInfoTeamCmd));
  SetMemberOptionTeamCmd_descriptor_ = file->message_type(32);
  static const int SetMemberOptionTeamCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMemberOptionTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMemberOptionTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMemberOptionTeamCmd, autofollow_),
  };
  SetMemberOptionTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetMemberOptionTeamCmd_descriptor_,
      SetMemberOptionTeamCmd::default_instance_,
      SetMemberOptionTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMemberOptionTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMemberOptionTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetMemberOptionTeamCmd));
  MemberWantedQuest_descriptor_ = file->message_type(33);
  static const int MemberWantedQuest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberWantedQuest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberWantedQuest, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberWantedQuest, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberWantedQuest, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberWantedQuest, questdata_),
  };
  MemberWantedQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberWantedQuest_descriptor_,
      MemberWantedQuest::default_instance_,
      MemberWantedQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberWantedQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberWantedQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberWantedQuest));
  QuestWantedQuestTeamCmd_descriptor_ = file->message_type(34);
  static const int QuestWantedQuestTeamCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestWantedQuestTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestWantedQuestTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestWantedQuestTeamCmd, quests_),
  };
  QuestWantedQuestTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestWantedQuestTeamCmd_descriptor_,
      QuestWantedQuestTeamCmd::default_instance_,
      QuestWantedQuestTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestWantedQuestTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestWantedQuestTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestWantedQuestTeamCmd));
  UpdateWantedQuestTeamCmd_descriptor_ = file->message_type(35);
  static const int UpdateWantedQuestTeamCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWantedQuestTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWantedQuestTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWantedQuestTeamCmd, quest_),
  };
  UpdateWantedQuestTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateWantedQuestTeamCmd_descriptor_,
      UpdateWantedQuestTeamCmd::default_instance_,
      UpdateWantedQuestTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWantedQuestTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWantedQuestTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateWantedQuestTeamCmd));
  AcceptHelpWantedTeamCmd_descriptor_ = file->message_type(36);
  static const int AcceptHelpWantedTeamCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptHelpWantedTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptHelpWantedTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptHelpWantedTeamCmd, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptHelpWantedTeamCmd, isabandon_),
  };
  AcceptHelpWantedTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptHelpWantedTeamCmd_descriptor_,
      AcceptHelpWantedTeamCmd::default_instance_,
      AcceptHelpWantedTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptHelpWantedTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptHelpWantedTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptHelpWantedTeamCmd));
  UpdateHelpWantedTeamCmd_descriptor_ = file->message_type(37);
  static const int UpdateHelpWantedTeamCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateHelpWantedTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateHelpWantedTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateHelpWantedTeamCmd, addlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateHelpWantedTeamCmd, dellist_),
  };
  UpdateHelpWantedTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateHelpWantedTeamCmd_descriptor_,
      UpdateHelpWantedTeamCmd::default_instance_,
      UpdateHelpWantedTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateHelpWantedTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateHelpWantedTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateHelpWantedTeamCmd));
  QueryHelpWantedTeamCmd_descriptor_ = file->message_type(38);
  static const int QueryHelpWantedTeamCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHelpWantedTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHelpWantedTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHelpWantedTeamCmd, questids_),
  };
  QueryHelpWantedTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryHelpWantedTeamCmd_descriptor_,
      QueryHelpWantedTeamCmd::default_instance_,
      QueryHelpWantedTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHelpWantedTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHelpWantedTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryHelpWantedTeamCmd));
  MemberCat_descriptor_ = file->message_type(39);
  static const int MemberCat_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberCat, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberCat, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberCat, catid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberCat, relivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberCat, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberCat, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberCat, name_),
  };
  MemberCat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberCat_descriptor_,
      MemberCat::default_instance_,
      MemberCat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberCat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberCat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberCat));
  QueryMemberCatTeamCmd_descriptor_ = file->message_type(40);
  static const int QueryMemberCatTeamCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMemberCatTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMemberCatTeamCmd, param_),
  };
  QueryMemberCatTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryMemberCatTeamCmd_descriptor_,
      QueryMemberCatTeamCmd::default_instance_,
      QueryMemberCatTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMemberCatTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMemberCatTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryMemberCatTeamCmd));
  MemberCatUpdateTeam_descriptor_ = file->message_type(41);
  static const int MemberCatUpdateTeam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberCatUpdateTeam, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberCatUpdateTeam, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberCatUpdateTeam, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberCatUpdateTeam, dels_),
  };
  MemberCatUpdateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberCatUpdateTeam_descriptor_,
      MemberCatUpdateTeam::default_instance_,
      MemberCatUpdateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberCatUpdateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberCatUpdateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberCatUpdateTeam));
  TeamParam_descriptor_ = file->enum_type(0);
  ETeamGlobal_descriptor_ = file->enum_type(1);
  ETeamJob_descriptor_ = file->enum_type(2);
  EMemberData_descriptor_ = file->enum_type(3);
  EAutoType_descriptor_ = file->enum_type(4);
  ETeamData_descriptor_ = file->enum_type(5);
  ETeamInviteType_descriptor_ = file->enum_type(6);
  ETeamApplyType_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SessionTeam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberData_descriptor_, &MemberData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMember_descriptor_, &TeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobTeamMember_descriptor_, &BlobTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMemberHelpQuest_descriptor_, &TeamMemberHelpQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMemberWantedQuest_descriptor_, &TeamMemberWantedQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobTeamWanted_descriptor_, &BlobTeamWanted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamApply_descriptor_, &TeamApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobTeamApply_descriptor_, &BlobTeamApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamSealData_descriptor_, &TeamSealData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamSummaryItem_descriptor_, &TeamSummaryItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamData_descriptor_, &TeamData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamList_descriptor_, &TeamList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamDataUpdate_descriptor_, &TeamDataUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMemberUpdate_descriptor_, &TeamMemberUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamApplyUpdate_descriptor_, &TeamApplyUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateTeam_descriptor_, &CreateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteMember_descriptor_, &InviteMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessTeamInvite_descriptor_, &ProcessTeamInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMemberApply_descriptor_, &TeamMemberApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessTeamApply_descriptor_, &ProcessTeamApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickMember_descriptor_, &KickMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeLeader_descriptor_, &ExchangeLeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitTeam_descriptor_, &ExitTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterTeam_descriptor_, &EnterTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberPosUpdate_descriptor_, &MemberPosUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberDataUpdate_descriptor_, &MemberDataUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LockTarget_descriptor_, &LockTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamSummon_descriptor_, &TeamSummon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearApplyList_descriptor_, &ClearApplyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuickEnter_descriptor_, &QuickEnter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTeamOption_descriptor_, &SetTeamOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryUserTeamInfoTeamCmd_descriptor_, &QueryUserTeamInfoTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetMemberOptionTeamCmd_descriptor_, &SetMemberOptionTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberWantedQuest_descriptor_, &MemberWantedQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestWantedQuestTeamCmd_descriptor_, &QuestWantedQuestTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateWantedQuestTeamCmd_descriptor_, &UpdateWantedQuestTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptHelpWantedTeamCmd_descriptor_, &AcceptHelpWantedTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateHelpWantedTeamCmd_descriptor_, &UpdateHelpWantedTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryHelpWantedTeamCmd_descriptor_, &QueryHelpWantedTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberCat_descriptor_, &MemberCat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryMemberCatTeamCmd_descriptor_, &QueryMemberCatTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberCatUpdateTeam_descriptor_, &MemberCatUpdateTeam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SessionTeam_2eproto() {
  delete MemberData::default_instance_;
  delete MemberData_reflection_;
  delete TeamMember::default_instance_;
  delete TeamMember_reflection_;
  delete BlobTeamMember::default_instance_;
  delete BlobTeamMember_reflection_;
  delete TeamMemberHelpQuest::default_instance_;
  delete TeamMemberHelpQuest_reflection_;
  delete TeamMemberWantedQuest::default_instance_;
  delete TeamMemberWantedQuest_reflection_;
  delete BlobTeamWanted::default_instance_;
  delete BlobTeamWanted_reflection_;
  delete TeamApply::default_instance_;
  delete TeamApply_reflection_;
  delete BlobTeamApply::default_instance_;
  delete BlobTeamApply_reflection_;
  delete TeamSealData::default_instance_;
  delete TeamSealData_reflection_;
  delete TeamSummaryItem::default_instance_;
  delete TeamSummaryItem_reflection_;
  delete TeamData::default_instance_;
  delete TeamData_reflection_;
  delete TeamList::default_instance_;
  delete TeamList_reflection_;
  delete TeamDataUpdate::default_instance_;
  delete TeamDataUpdate_reflection_;
  delete TeamMemberUpdate::default_instance_;
  delete TeamMemberUpdate_reflection_;
  delete TeamApplyUpdate::default_instance_;
  delete TeamApplyUpdate_reflection_;
  delete CreateTeam::default_instance_;
  delete CreateTeam_reflection_;
  delete InviteMember::default_instance_;
  delete InviteMember_reflection_;
  delete ProcessTeamInvite::default_instance_;
  delete ProcessTeamInvite_reflection_;
  delete TeamMemberApply::default_instance_;
  delete TeamMemberApply_reflection_;
  delete ProcessTeamApply::default_instance_;
  delete ProcessTeamApply_reflection_;
  delete KickMember::default_instance_;
  delete KickMember_reflection_;
  delete ExchangeLeader::default_instance_;
  delete ExchangeLeader_reflection_;
  delete ExitTeam::default_instance_;
  delete ExitTeam_reflection_;
  delete EnterTeam::default_instance_;
  delete EnterTeam_reflection_;
  delete MemberPosUpdate::default_instance_;
  delete MemberPosUpdate_reflection_;
  delete MemberDataUpdate::default_instance_;
  delete MemberDataUpdate_reflection_;
  delete LockTarget::default_instance_;
  delete LockTarget_reflection_;
  delete TeamSummon::default_instance_;
  delete TeamSummon_reflection_;
  delete ClearApplyList::default_instance_;
  delete ClearApplyList_reflection_;
  delete QuickEnter::default_instance_;
  delete QuickEnter_reflection_;
  delete SetTeamOption::default_instance_;
  delete SetTeamOption_reflection_;
  delete QueryUserTeamInfoTeamCmd::default_instance_;
  delete QueryUserTeamInfoTeamCmd_reflection_;
  delete SetMemberOptionTeamCmd::default_instance_;
  delete SetMemberOptionTeamCmd_reflection_;
  delete MemberWantedQuest::default_instance_;
  delete MemberWantedQuest_reflection_;
  delete QuestWantedQuestTeamCmd::default_instance_;
  delete QuestWantedQuestTeamCmd_reflection_;
  delete UpdateWantedQuestTeamCmd::default_instance_;
  delete UpdateWantedQuestTeamCmd_reflection_;
  delete AcceptHelpWantedTeamCmd::default_instance_;
  delete AcceptHelpWantedTeamCmd_reflection_;
  delete UpdateHelpWantedTeamCmd::default_instance_;
  delete UpdateHelpWantedTeamCmd_reflection_;
  delete QueryHelpWantedTeamCmd::default_instance_;
  delete QueryHelpWantedTeamCmd_reflection_;
  delete MemberCat::default_instance_;
  delete MemberCat_reflection_;
  delete QueryMemberCatTeamCmd::default_instance_;
  delete QueryMemberCatTeamCmd_reflection_;
  delete MemberCatUpdateTeam::default_instance_;
  delete MemberCatUpdateTeam_reflection_;
}

void protobuf_AddDesc_SessionTeam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::Cmd::protobuf_AddDesc_SceneQuest_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021SessionTeam.proto\022\003Cmd\032\nxCmd.proto\032\021Pr"
    "otoCommon.proto\032\020SceneQuest.proto\"m\n\nMem"
    "berData\022/\n\004type\030\001 \001(\0162\020.Cmd.EMemberData:"
    "\017EMEMBERDATA_MIN\022\020\n\005value\030\002 \001(\004:\0010\022\014\n\004da"
    "ta\030\003 \001(\t\022\016\n\006values\030\004 \003(\004\"Z\n\nTeamMember\022\017"
    "\n\004guid\030\001 \001(\004:\0010\022\014\n\004name\030\002 \001(\t\022\036\n\005datas\030\003"
    " \003(\0132\017.Cmd.MemberData\022\r\n\005accid\030\004 \001(\r\"2\n\016"
    "BlobTeamMember\022 \n\007members\030\001 \003(\0132\017.Cmd.Te"
    "amMember\";\n\023TeamMemberHelpQuest\022\021\n\006chari"
    "d\030\001 \001(\004:\0010\022\021\n\thelpquest\030\002 \003(\r\"Y\n\025TeamMem"
    "berWantedQuest\022\021\n\006charid\030\001 \001(\004:\0010\022\026\n\013acc"
    "eptquest\030\002 \001(\r:\0010\022\025\n\nacceptstep\030\003 \001(\r:\0010"
    "\"o\n\016BlobTeamWanted\022/\n\013memberquest\030\001 \003(\0132"
    "\032.Cmd.TeamMemberWantedQuest\022,\n\nmemberhel"
    "p\030\002 \003(\0132\030.Cmd.TeamMemberHelpQuest\"}\n\tTea"
    "mApply\022\017\n\004guid\030\001 \001(\004:\0010\022\021\n\006zoneid\030\005 \001(\r:"
    "\0010\022\017\n\004time\030\002 \001(\r:\0010\022\014\n\004name\030\003 \001(\t\022\036\n\005dat"
    "as\030\004 \003(\0132\017.Cmd.MemberData\022\r\n\005accid\030\006 \001(\r"
    "\"/\n\rBlobTeamApply\022\036\n\006applys\030\001 \003(\0132\016.Cmd."
    "TeamApply\"|\n\014TeamSealData\022\017\n\004seal\030\001 \001(\r:"
    "\0010\022\021\n\006zoneid\030\003 \001(\r:\0010\022\032\n\003pos\030\002 \001(\0132\r.Cmd"
    ".ScenePos\022\021\n\006teamid\030\004 \001(\004:\0010\022\031\n\016lastonli"
    "netime\030\005 \001(\r:\0010\"P\n\017TeamSummaryItem\022+\n\004ty"
    "pe\030\001 \001(\0162\016.Cmd.ETeamData:\rETEAMDATA_MIN\022"
    "\020\n\005value\030\002 \001(\004:\0010\"\304\001\n\010TeamData\022\017\n\004guid\030\001"
    " \001(\004:\0010\022\021\n\006zoneid\030\010 \001(\r:\0010\022\014\n\004name\030\002 \001(\t"
    "\022#\n\005items\030\003 \003(\0132\024.Cmd.TeamSummaryItem\022 \n"
    "\007members\030\004 \003(\0132\017.Cmd.TeamMember\022\036\n\006apply"
    "s\030\005 \003(\0132\016.Cmd.TeamApply\022\037\n\004seal\030\006 \001(\0132\021."
    "Cmd.TeamSealData\"\302\001\n\010TeamList\0225\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\032SESSION_USER_TEAM_PROT"
    "OCMD\0221\n\005param\030\002 \001(\0162\016.Cmd.TeamParam:\022TEA"
    "MPARAM_TEAMLIST\022\017\n\004type\030\003 \001(\r:\0010\022\017\n\004page"
    "\030\004 \001(\r:\0010\022\r\n\002lv\030\005 \001(\r:\0010\022\033\n\004list\030\006 \003(\0132\r"
    ".Cmd.TeamData\"\257\001\n\016TeamDataUpdate\0225\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\032SESSION_USER_TEAM_P"
    "ROTOCMD\0223\n\005param\030\002 \001(\0162\016.Cmd.TeamParam:\024"
    "TEAMPARAM_DATAUPDATE\022\014\n\004name\030\003 \001(\t\022#\n\005da"
    "tas\030\004 \003(\0132\024.Cmd.TeamSummaryItem\"\263\001\n\020Team"
    "MemberUpdate\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\032SESSION_USER_TEAM_PROTOCMD\0225\n\005param\030\002 \001"
    "(\0162\016.Cmd.TeamParam:\026TEAMPARAM_MEMBERUPDA"
    "TE\022 \n\007updates\030\003 \003(\0132\017.Cmd.TeamMember\022\017\n\007"
    "deletes\030\004 \003(\004\"\260\001\n\017TeamApplyUpdate\0225\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\032SESSION_USER_TEAM_"
    "PROTOCMD\0224\n\005param\030\002 \001(\0162\016.Cmd.TeamParam:"
    "\025TEAMPARAM_APPLYUPDATE\022\037\n\007updates\030\003 \003(\0132"
    "\016.Cmd.TeamApply\022\017\n\007deletes\030\004 \003(\004\"\360\001\n\nCre"
    "ateTeam\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\032SESS"
    "ION_USER_TEAM_PROTOCMD\0223\n\005param\030\002 \001(\0162\016."
    "Cmd.TeamParam:\024TEAMPARAM_CREATETEAM\022\020\n\005m"
    "inlv\030\003 \001(\r:\0010\022\020\n\005maxlv\030\004 \001(\r:\0010\022\017\n\004type\030"
    "\005 \001(\r:\0010\0223\n\nautoaccept\030\006 \001(\0162\016.Cmd.EAuto"
    "Type:\017EAUTOTYPE_CLOSE\022\014\n\004name\030\007 \001(\t\"\307\001\n\014"
    "InviteMember\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\032SESSION_USER_TEAM_PROTOCMD\0225\n\005param\030\002 \001"
    "(\0162\016.Cmd.TeamParam:\026TEAMPARAM_INVITEMEMB"
    "ER\022\023\n\010userguid\030\003 \001(\004:\0010\022\020\n\005catid\030\004 \001(\r:\001"
    "0\022\020\n\010teamname\030\005 \001(\t\022\020\n\010username\030\006 \001(\t\"\320\001"
    "\n\021ProcessTeamInvite\0225\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\032SESSION_USER_TEAM_PROTOCMD\0226\n\005pa"
    "ram\030\002 \001(\0162\016.Cmd.TeamParam:\027TEAMPARAM_PRO"
    "CESSINVITE\0227\n\004type\030\003 \001(\0162\024.Cmd.ETeamInvi"
    "teType:\023ETEAMINVITETYPE_MIN\022\023\n\010userguid\030"
    "\004 \001(\004:\0010\"\217\001\n\017TeamMemberApply\0225\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\032SESSION_USER_TEAM_PROTO"
    "CMD\0224\n\005param\030\002 \001(\0162\016.Cmd.TeamParam:\025TEAM"
    "PARAM_MEMBERAPPLY\022\017\n\004guid\030\003 \001(\004:\0010\"\314\001\n\020P"
    "rocessTeamApply\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\032SESSION_USER_TEAM_PROTOCMD\0225\n\005param\030"
    "\002 \001(\0162\016.Cmd.TeamParam:\026TEAMPARAM_PROCESS"
    "APPLY\0225\n\004type\030\003 \001(\0162\023.Cmd.ETeamApplyType"
    ":\022ETEAMAPPLYTYPE_MIN\022\023\n\010userguid\030\004 \001(\004:\001"
    "0\"\235\001\n\nKickMember\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\032SESSION_USER_TEAM_PROTOCMD\0223\n\005param"
    "\030\002 \001(\0162\016.Cmd.TeamParam:\024TEAMPARAM_KICKME"
    "MBER\022\021\n\006userid\030\003 \001(\004:\0010\022\020\n\005catid\030\004 \001(\004:\001"
    "0\"\223\001\n\016ExchangeLeader\0225\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\032SESSION_USER_TEAM_PROTOCMD\0227\n\005p"
    "aram\030\002 \001(\0162\016.Cmd.TeamParam:\030TEAMPARAM_EX"
    "CHANGELEADER\022\021\n\006userid\030\004 \001(\004:\0010\"\207\001\n\010Exit"
    "Team\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\032SESSION"
    "_USER_TEAM_PROTOCMD\0221\n\005param\030\002 \001(\0162\016.Cmd"
    ".TeamParam:\022TEAMPARAM_EXITTEAM\022\021\n\006teamid"
    "\030\003 \001(\004:\0010\"\223\001\n\tEnterTeam\0225\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\032SESSION_USER_TEAM_PROTOCMD\0222"
    "\n\005param\030\002 \001(\0162\016.Cmd.TeamParam:\023TEAMPARAM"
    "_ENTERTEAM\022\033\n\004data\030\003 \001(\0132\r.Cmd.TeamData\""
    "\255\001\n\017MemberPosUpdate\0225\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\032SESSION_USER_TEAM_PROTOCMD\0228\n\005pa"
    "ram\030\002 \001(\0162\016.Cmd.TeamParam:\031TEAMPARAM_MEM"
    "BERPOSUPDATE\022\r\n\002id\030\003 \001(\004:\0010\022\032\n\003pos\030\004 \001(\013"
    "2\r.Cmd.ScenePos\"\265\001\n\020MemberDataUpdate\0225\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\032SESSION_USER_TE"
    "AM_PROTOCMD\0229\n\005param\030\002 \001(\0162\016.Cmd.TeamPar"
    "am:\032TEAMPARAM_MEMBERDATAUPDATE\022\r\n\002id\030\003 \001"
    "(\004:\0010\022 \n\007members\030\004 \003(\0132\017.Cmd.MemberData\""
    "\215\001\n\nLockTarget\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\032SESSION_USER_TEAM_PROTOCMD\0223\n\005param\030\002"
    " \001(\0162\016.Cmd.TeamParam:\024TEAMPARAM_LOCKTARG"
    "ET\022\023\n\010targetid\030\003 \001(\004:\0010\"\207\001\n\nTeamSummon\0225"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\032SESSION_USER_"
    "TEAM_PROTOCMD\022/\n\005param\030\002 \001(\0162\016.Cmd.TeamP"
    "aram:\020TEAMPARAM_SUMMON\022\021\n\006raidid\030\003 \001(\r:\001"
    "0\"\200\001\n\016ClearApplyList\0225\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\032SESSION_USER_TEAM_PROTOCMD\0227\n\005p"
    "aram\030\002 \001(\0162\016.Cmd.TeamParam:\030TEAMPARAM_CL"
    "EARAPPLYLIST\"\256\001\n\nQuickEnter\0225\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\032SESSION_USER_TEAM_PROTOC"
    "MD\0223\n\005param\030\002 \001(\0162\016.Cmd.TeamParam:\024TEAMP"
    "ARAM_QUICKENTER\022\017\n\004type\030\003 \001(\r:\0010\022\017\n\004time"
    "\030\004 \001(\r:\0010\022\022\n\003set\030\005 \001(\010:\005false\"\255\001\n\rSetTea"
    "mOption\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\032SESS"
    "ION_USER_TEAM_PROTOCMD\0222\n\005param\030\002 \001(\0162\016."
    "Cmd.TeamParam:\023TEAMPARAM_SETOPTION\022\014\n\004na"
    "me\030\003 \001(\t\022#\n\005items\030\004 \003(\0132\024.Cmd.TeamSummar"
    "yItem\"\263\001\n\030QueryUserTeamInfoTeamCmd\0225\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\032SESSION_USER_TEAM"
    "_PROTOCMD\022:\n\005param\030\002 \001(\0162\016.Cmd.TeamParam"
    ":\033TEAMPARAM_QUERYUSERTEAMINFO\022\021\n\006charid\030"
    "\003 \001(\004:\0010\022\021\n\006teamid\030\004 \001(\004:\0010\"\244\001\n\026SetMembe"
    "rOptionTeamCmd\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\032SESSION_USER_TEAM_PROTOCMD\0228\n\005param\030\002"
    " \001(\0162\016.Cmd.TeamParam:\031TEAMPARAM_SETMEMBE"
    "ROPTION\022\031\n\nautofollow\030\003 \001(\010:\005false\"\243\001\n\021M"
    "emberWantedQuest\022\021\n\006charid\030\001 \001(\004:\0010\022\022\n\007q"
    "uestid\030\002 \001(\r:\0010\0223\n\006action\030\003 \001(\0162\021.Cmd.EQ"
    "uestAction:\020EQUESTACTION_MIN\022\017\n\004step\030\004 \001"
    "(\r:\0010\022!\n\tquestdata\030\005 \001(\0132\016.Cmd.QuestStep"
    "\"\263\001\n\027QuestWantedQuestTeamCmd\0225\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\032SESSION_USER_TEAM_PROTO"
    "CMD\0229\n\005param\030\002 \001(\0162\016.Cmd.TeamParam:\032TEAM"
    "PARAM_QUERYWANTEDQUEST\022&\n\006quests\030\003 \003(\0132\026"
    ".Cmd.MemberWantedQuest\"\264\001\n\030UpdateWantedQ"
    "uestTeamCmd\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\032"
    "SESSION_USER_TEAM_PROTOCMD\022:\n\005param\030\002 \001("
    "\0162\016.Cmd.TeamParam:\033TEAMPARAM_UPDATEWANTE"
    "DQUEST\022%\n\005quest\030\003 \001(\0132\026.Cmd.MemberWanted"
    "Quest\"\271\001\n\027AcceptHelpWantedTeamCmd\0225\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\032SESSION_USER_TEAM_"
    "PROTOCMD\0229\n\005param\030\002 \001(\0162\016.Cmd.TeamParam:"
    "\032TEAMPARAM_ACCEPTHELPWANTED\022\022\n\007questid\030\003"
    " \001(\r:\0010\022\030\n\tisabandon\030\004 \001(\010:\005false\"\255\001\n\027Up"
    "dateHelpWantedTeamCmd\0225\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\032SESSION_USER_TEAM_PROTOCMD\0229\n\005"
    "param\030\002 \001(\0162\016.Cmd.TeamParam:\032TEAMPARAM_U"
    "PDATEHELPWANTED\022\017\n\007addlist\030\003 \003(\r\022\017\n\007dell"
    "ist\030\004 \003(\r\"\233\001\n\026QueryHelpWantedTeamCmd\0225\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\032SESSION_USER_TE"
    "AM_PROTOCMD\0228\n\005param\030\002 \001(\0162\016.Cmd.TeamPar"
    "am:\031TEAMPARAM_QUERYHELPWANTED\022\020\n\010questid"
    "s\030\003 \003(\r\"\213\001\n\tMemberCat\022\022\n\007ownerid\030\001 \001(\004:\001"
    "0\022\r\n\002id\030\002 \001(\004:\0010\022\020\n\005catid\030\003 \001(\r:\0010\022\025\n\nre"
    "livetime\030\004 \001(\r:\0010\022\r\n\002lv\030\005 \001(\r:\0010\022\025\n\nexpi"
    "retime\030\006 \001(\r:\0010\022\014\n\004name\030\007 \001(\t\"\207\001\n\025QueryM"
    "emberCatTeamCmd\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\032SESSION_USER_TEAM_PROTOCMD\0227\n\005param\030"
    "\002 \001(\0162\016.Cmd.TeamParam:\030TEAMPARAM_QUERYME"
    "MBERCAT\"\306\001\n\023MemberCatUpdateTeam\0225\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\032SESSION_USER_TEAM_PR"
    "OTOCMD\0229\n\005param\030\002 \001(\0162\016.Cmd.TeamParam:\032T"
    "EAMPARAM_MEMBERCAT_UPDATE\022\037\n\007updates\030\003 \003"
    "(\0132\016.Cmd.MemberCat\022\034\n\004dels\030\004 \003(\0132\016.Cmd.M"
    "emberCat*\305\006\n\tTeamParam\022\026\n\022TEAMPARAM_TEAM"
    "LIST\020\001\022\030\n\024TEAMPARAM_DATAUPDATE\020\002\022\032\n\026TEAM"
    "PARAM_MEMBERUPDATE\020\003\022\031\n\025TEAMPARAM_APPLYU"
    "PDATE\020\004\022\030\n\024TEAMPARAM_CREATETEAM\020\005\022\032\n\026TEA"
    "MPARAM_INVITEMEMBER\020\006\022\033\n\027TEAMPARAM_PROCE"
    "SSINVITE\020\007\022\031\n\025TEAMPARAM_MEMBERAPPLY\020\010\022\032\n"
    "\026TEAMPARAM_PROCESSAPPLY\020\t\022\030\n\024TEAMPARAM_K"
    "ICKMEMBER\020\n\022\034\n\030TEAMPARAM_EXCHANGELEADER\020"
    "\013\022\026\n\022TEAMPARAM_EXITTEAM\020\014\022\027\n\023TEAMPARAM_E"
    "NTERTEAM\020\r\022\035\n\031TEAMPARAM_MEMBERPOSUPDATE\020"
    "\016\022\036\n\032TEAMPARAM_MEMBERDATAUPDATE\020\017\022\030\n\024TEA"
    "MPARAM_LOCKTARGET\020\020\022\024\n\020TEAMPARAM_SUMMON\020"
    "\021\022\034\n\030TEAMPARAM_CLEARAPPLYLIST\020\022\022\030\n\024TEAMP"
    "ARAM_QUICKENTER\020\023\022\027\n\023TEAMPARAM_SETOPTION"
    "\020\024\022\037\n\033TEAMPARAM_QUERYUSERTEAMINFO\020\025\022\035\n\031T"
    "EAMPARAM_SETMEMBEROPTION\020\026\022\036\n\032TEAMPARAM_"
    "QUERYWANTEDQUEST\020\027\022\037\n\033TEAMPARAM_UPDATEWA"
    "NTEDQUEST\020\030\022\036\n\032TEAMPARAM_ACCEPTHELPWANTE"
    "D\020\031\022\036\n\032TEAMPARAM_UPDATEHELPWANTED\020\032\022\035\n\031T"
    "EAMPARAM_QUERYHELPWANTED\020\033\022\034\n\030TEAMPARAM_"
    "QUERYMEMBERCAT\020\034\022\036\n\032TEAMPARAM_MEMBERCAT_"
    "UPDATE\020\035*0\n\013ETeamGlobal\022!\n\035ETEAMGLOBAL_L"
    "ISTCOUNT_PERPAGE\020\024*\205\001\n\010ETeamJob\022\020\n\014ETEAM"
    "JOB_MIN\020\000\022\023\n\017ETEAMJOB_LEADER\020\001\022\023\n\017ETEAMJ"
    "OB_MEMBER\020\002\022\022\n\016ETEAMJOB_APPLY\020\003\022\027\n\023ETEAM"
    "JOB_TEMPLEADER\020\004\022\020\n\014ETEAMJOB_MAX\020\005*\223\010\n\013E"
    "MemberData\022\023\n\017EMEMBERDATA_MIN\020\000\022\031\n\025EMEMB"
    "ERDATA_BASELEVEL\020\001\022\032\n\026EMEMBERDATA_PROFES"
    "SION\020\002\022\025\n\021EMEMBERDATA_MAPID\020\003\022\030\n\024EMEMBER"
    "DATA_PORTRAIT\020\004\022\025\n\021EMEMBERDATA_FRAME\020\005\022\026"
    "\n\022EMEMBERDATA_RAIDID\020\006\022\027\n\023EMEMBERDATA_OF"
    "FLINE\020\007\022\022\n\016EMEMBERDATA_HP\020\010\022\025\n\021EMEMBERDA"
    "TA_MAXHP\020\t\022\022\n\016EMEMBERDATA_SP\020\n\022\025\n\021EMEMBE"
    "RDATA_MAXSP\020\013\022\023\n\017EMEMBERDATA_JOB\020\014\022\030\n\024EM"
    "EMBERDATA_TARGETID\020\r\022\032\n\026EMEMBERDATA_JOIN"
    "HANDID\020\016\022\024\n\020EMEMBERDATA_BODY\020\017\022\024\n\020EMEMBE"
    "RDATA_HEAD\020\020\022\024\n\020EMEMBERDATA_BACK\020\021\022\024\n\020EM"
    "EMBERDATA_FACE\020\022\022\024\n\020EMEMBERDATA_TAIL\020\023\022\024"
    "\n\020EMEMBERDATA_HAIR\020\024\022\031\n\025EMEMBERDATA_HAIR"
    "COLOR\020\025\022\032\n\026EMEMBERDATA_CLOTHCOLOR\020\026\022\030\n\024E"
    "MEMBERDATA_LEFTHAND\020\027\022\031\n\025EMEMBERDATA_RIG"
    "HTHAND\020\030\022\027\n\023EMEMBERDATA_GUILDID\020\031\022\031\n\025EME"
    "MBERDATA_GUILDNAME\020\032\022\026\n\022EMEMBERDATA_GEND"
    "ER\020\033\022\025\n\021EMEMBERDATA_BLINK\020\034\022\026\n\022EMEMBERDA"
    "TA_ZONEID\020\035\022\032\n\026EMEMBERDATA_AUTOFOLLOW\020\036\022"
    "\023\n\017EMEMBERDATA_EYE\020\037\022\024\n\020EMEMBERDATA_NAME"
    "\020 \022\025\n\021EMEMBERDATA_MOUTH\020!\022\023\n\017EMEMBERDATA"
    "_CAT\020\"\022\032\n\026EMEMBERDATA_RELIVETIME\020#\022\032\n\026EM"
    "EMBERDATA_EXPIRETIME\020$\022\031\n\025EMEMBERDATA_CA"
    "T_OWNER\020%\022\031\n\025EMEMBERDATA_ENTERTIME\020&\022\036\n\032"
    "EMEMBERDATA_GUILDRAIDINDEX\020\'\022\035\n\031EMEMBERD"
    "ATA_ENSEMBLESKILL\020(\022\023\n\017EMEMBERDATA_MAX\020)"
    "*a\n\tEAutoType\022\023\n\017EAUTOTYPE_CLOSE\020\000\022\021\n\rEA"
    "UTOTYPE_ALL\020\001\022\031\n\025EAUTOTYPE_GUILDFRIEND\020\002"
    "\022\021\n\rEAUTOTYPE_MAX\020\003*\207\002\n\tETeamData\022\021\n\rETE"
    "AMDATA_MIN\020\000\022\022\n\016ETEAMDATA_TYPE\020\001\022\023\n\017ETEA"
    "MDATA_MINLV\020\002\022\023\n\017ETEAMDATA_MAXLV\020\003\022\026\n\022ET"
    "EAMDATA_OVERTIME\020\004\022\030\n\024ETEAMDATA_AUTOACCE"
    "PT\020\005\022\031\n\025ETEAMDATA_MEMBERCOUNT\020\006\022\031\n\025ETEAM"
    "DATA_PICKUP_MODE\020\007\022\024\n\020ETEAMDATA_MEMBER\020\010"
    "\022\030\n\024ETEAMDATA_HELPWANTED\020\t\022\021\n\rETEAMDATA_"
    "MAX\020\n*|\n\017ETeamInviteType\022\027\n\023ETEAMINVITET"
    "YPE_MIN\020\000\022\031\n\025ETEAMINVITETYPE_AGREE\020\001\022\034\n\030"
    "ETEAMINVITETYPE_DISAGREE\020\002\022\027\n\023ETEAMINVIT"
    "ETYPE_MAX\020\003*w\n\016ETeamApplyType\022\026\n\022ETEAMAP"
    "PLYTYPE_MIN\020\000\022\030\n\024ETEAMAPPLYTYPE_AGREE\020\001\022"
    "\033\n\027ETEAMAPPLYTYPE_DISAGREE\020\002\022\026\n\022ETEAMAPP"
    "LYTYPE_MAX\020\003", 9212);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SessionTeam.proto", &protobuf_RegisterTypes);
  MemberData::default_instance_ = new MemberData();
  TeamMember::default_instance_ = new TeamMember();
  BlobTeamMember::default_instance_ = new BlobTeamMember();
  TeamMemberHelpQuest::default_instance_ = new TeamMemberHelpQuest();
  TeamMemberWantedQuest::default_instance_ = new TeamMemberWantedQuest();
  BlobTeamWanted::default_instance_ = new BlobTeamWanted();
  TeamApply::default_instance_ = new TeamApply();
  BlobTeamApply::default_instance_ = new BlobTeamApply();
  TeamSealData::default_instance_ = new TeamSealData();
  TeamSummaryItem::default_instance_ = new TeamSummaryItem();
  TeamData::default_instance_ = new TeamData();
  TeamList::default_instance_ = new TeamList();
  TeamDataUpdate::default_instance_ = new TeamDataUpdate();
  TeamMemberUpdate::default_instance_ = new TeamMemberUpdate();
  TeamApplyUpdate::default_instance_ = new TeamApplyUpdate();
  CreateTeam::default_instance_ = new CreateTeam();
  InviteMember::default_instance_ = new InviteMember();
  ProcessTeamInvite::default_instance_ = new ProcessTeamInvite();
  TeamMemberApply::default_instance_ = new TeamMemberApply();
  ProcessTeamApply::default_instance_ = new ProcessTeamApply();
  KickMember::default_instance_ = new KickMember();
  ExchangeLeader::default_instance_ = new ExchangeLeader();
  ExitTeam::default_instance_ = new ExitTeam();
  EnterTeam::default_instance_ = new EnterTeam();
  MemberPosUpdate::default_instance_ = new MemberPosUpdate();
  MemberDataUpdate::default_instance_ = new MemberDataUpdate();
  LockTarget::default_instance_ = new LockTarget();
  TeamSummon::default_instance_ = new TeamSummon();
  ClearApplyList::default_instance_ = new ClearApplyList();
  QuickEnter::default_instance_ = new QuickEnter();
  SetTeamOption::default_instance_ = new SetTeamOption();
  QueryUserTeamInfoTeamCmd::default_instance_ = new QueryUserTeamInfoTeamCmd();
  SetMemberOptionTeamCmd::default_instance_ = new SetMemberOptionTeamCmd();
  MemberWantedQuest::default_instance_ = new MemberWantedQuest();
  QuestWantedQuestTeamCmd::default_instance_ = new QuestWantedQuestTeamCmd();
  UpdateWantedQuestTeamCmd::default_instance_ = new UpdateWantedQuestTeamCmd();
  AcceptHelpWantedTeamCmd::default_instance_ = new AcceptHelpWantedTeamCmd();
  UpdateHelpWantedTeamCmd::default_instance_ = new UpdateHelpWantedTeamCmd();
  QueryHelpWantedTeamCmd::default_instance_ = new QueryHelpWantedTeamCmd();
  MemberCat::default_instance_ = new MemberCat();
  QueryMemberCatTeamCmd::default_instance_ = new QueryMemberCatTeamCmd();
  MemberCatUpdateTeam::default_instance_ = new MemberCatUpdateTeam();
  MemberData::default_instance_->InitAsDefaultInstance();
  TeamMember::default_instance_->InitAsDefaultInstance();
  BlobTeamMember::default_instance_->InitAsDefaultInstance();
  TeamMemberHelpQuest::default_instance_->InitAsDefaultInstance();
  TeamMemberWantedQuest::default_instance_->InitAsDefaultInstance();
  BlobTeamWanted::default_instance_->InitAsDefaultInstance();
  TeamApply::default_instance_->InitAsDefaultInstance();
  BlobTeamApply::default_instance_->InitAsDefaultInstance();
  TeamSealData::default_instance_->InitAsDefaultInstance();
  TeamSummaryItem::default_instance_->InitAsDefaultInstance();
  TeamData::default_instance_->InitAsDefaultInstance();
  TeamList::default_instance_->InitAsDefaultInstance();
  TeamDataUpdate::default_instance_->InitAsDefaultInstance();
  TeamMemberUpdate::default_instance_->InitAsDefaultInstance();
  TeamApplyUpdate::default_instance_->InitAsDefaultInstance();
  CreateTeam::default_instance_->InitAsDefaultInstance();
  InviteMember::default_instance_->InitAsDefaultInstance();
  ProcessTeamInvite::default_instance_->InitAsDefaultInstance();
  TeamMemberApply::default_instance_->InitAsDefaultInstance();
  ProcessTeamApply::default_instance_->InitAsDefaultInstance();
  KickMember::default_instance_->InitAsDefaultInstance();
  ExchangeLeader::default_instance_->InitAsDefaultInstance();
  ExitTeam::default_instance_->InitAsDefaultInstance();
  EnterTeam::default_instance_->InitAsDefaultInstance();
  MemberPosUpdate::default_instance_->InitAsDefaultInstance();
  MemberDataUpdate::default_instance_->InitAsDefaultInstance();
  LockTarget::default_instance_->InitAsDefaultInstance();
  TeamSummon::default_instance_->InitAsDefaultInstance();
  ClearApplyList::default_instance_->InitAsDefaultInstance();
  QuickEnter::default_instance_->InitAsDefaultInstance();
  SetTeamOption::default_instance_->InitAsDefaultInstance();
  QueryUserTeamInfoTeamCmd::default_instance_->InitAsDefaultInstance();
  SetMemberOptionTeamCmd::default_instance_->InitAsDefaultInstance();
  MemberWantedQuest::default_instance_->InitAsDefaultInstance();
  QuestWantedQuestTeamCmd::default_instance_->InitAsDefaultInstance();
  UpdateWantedQuestTeamCmd::default_instance_->InitAsDefaultInstance();
  AcceptHelpWantedTeamCmd::default_instance_->InitAsDefaultInstance();
  UpdateHelpWantedTeamCmd::default_instance_->InitAsDefaultInstance();
  QueryHelpWantedTeamCmd::default_instance_->InitAsDefaultInstance();
  MemberCat::default_instance_->InitAsDefaultInstance();
  QueryMemberCatTeamCmd::default_instance_->InitAsDefaultInstance();
  MemberCatUpdateTeam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SessionTeam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SessionTeam_2eproto {
  StaticDescriptorInitializer_SessionTeam_2eproto() {
    protobuf_AddDesc_SessionTeam_2eproto();
  }
} static_descriptor_initializer_SessionTeam_2eproto_;
const ::google::protobuf::EnumDescriptor* TeamParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamParam_descriptor_;
}
bool TeamParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETeamGlobal_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETeamGlobal_descriptor_;
}
bool ETeamGlobal_IsValid(int value) {
  switch(value) {
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETeamJob_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETeamJob_descriptor_;
}
bool ETeamJob_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMemberData_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMemberData_descriptor_;
}
bool EMemberData_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAutoType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAutoType_descriptor_;
}
bool EAutoType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETeamData_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETeamData_descriptor_;
}
bool ETeamData_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETeamInviteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETeamInviteType_descriptor_;
}
bool ETeamInviteType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETeamApplyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETeamApplyType_descriptor_;
}
bool ETeamApplyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MemberData::kTypeFieldNumber;
const int MemberData::kValueFieldNumber;
const int MemberData::kDataFieldNumber;
const int MemberData::kValuesFieldNumber;
#endif  // !_MSC_VER

MemberData::MemberData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MemberData)
}

void MemberData::InitAsDefaultInstance() {
}

MemberData::MemberData(const MemberData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MemberData)
}

void MemberData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberData::~MemberData() {
  // @@protoc_insertion_point(destructor:Cmd.MemberData)
  SharedDtor();
}

void MemberData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void MemberData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberData_descriptor_;
}

const MemberData& MemberData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

MemberData* MemberData::default_instance_ = NULL;

MemberData* MemberData::New() const {
  return new MemberData;
}

void MemberData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 0;
    value_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MemberData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EMemberData type = 1 [default = EMEMBERDATA_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EMemberData_IsValid(value)) {
            set_type(static_cast< ::Cmd::EMemberData >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint64 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_values;
        break;
      }

      // repeated uint64 values = 4;
      case 4: {
        if (tag == 32) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_values())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MemberData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MemberData)
  return false;
#undef DO_
}

void MemberData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MemberData)
  // optional .Cmd.EMemberData type = 1 [default = EMEMBERDATA_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  // repeated uint64 values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MemberData)
}

::google::protobuf::uint8* MemberData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MemberData)
  // optional .Cmd.EMemberData type = 1 [default = EMEMBERDATA_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  // repeated uint64 values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MemberData)
  return target;
}

int MemberData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EMemberData type = 1 [default = EMEMBERDATA_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  // repeated uint64 values = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberData::MergeFrom(const MemberData& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberData::CopyFrom(const MemberData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberData::IsInitialized() const {

  return true;
}

void MemberData::Swap(MemberData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(data_, other->data_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberData_descriptor_;
  metadata.reflection = MemberData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMember::kGuidFieldNumber;
const int TeamMember::kNameFieldNumber;
const int TeamMember::kDatasFieldNumber;
const int TeamMember::kAccidFieldNumber;
#endif  // !_MSC_VER

TeamMember::TeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamMember)
}

void TeamMember::InitAsDefaultInstance() {
}

TeamMember::TeamMember(const TeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamMember)
}

void TeamMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMember::~TeamMember() {
  // @@protoc_insertion_point(destructor:Cmd.TeamMember)
  SharedDtor();
}

void TeamMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMember_descriptor_;
}

const TeamMember& TeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

TeamMember* TeamMember::default_instance_ = NULL;

TeamMember* TeamMember::New() const {
  return new TeamMember;
}

void TeamMember::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    accid_ = 0u;
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        break;
      }

      // repeated .Cmd.MemberData datas = 3;
      case 3: {
        if (tag == 26) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        if (input->ExpectTag(32)) goto parse_accid;
        break;
      }

      // optional uint32 accid = 4;
      case 4: {
        if (tag == 32) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamMember)
  return false;
#undef DO_
}

void TeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamMember)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .Cmd.MemberData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datas(i), output);
  }

  // optional uint32 accid = 4;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->accid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamMember)
}

::google::protobuf::uint8* TeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamMember)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .Cmd.MemberData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datas(i), target);
  }

  // optional uint32 accid = 4;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->accid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamMember)
  return target;
}

int TeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 accid = 4;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accid());
    }

  }
  // repeated .Cmd.MemberData datas = 3;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMember::MergeFrom(const TeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMember::CopyFrom(const TeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMember::IsInitialized() const {

  return true;
}

void TeamMember::Swap(TeamMember* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    datas_.Swap(&other->datas_);
    std::swap(accid_, other->accid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMember_descriptor_;
  metadata.reflection = TeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobTeamMember::kMembersFieldNumber;
#endif  // !_MSC_VER

BlobTeamMember::BlobTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobTeamMember)
}

void BlobTeamMember::InitAsDefaultInstance() {
}

BlobTeamMember::BlobTeamMember(const BlobTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobTeamMember)
}

void BlobTeamMember::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobTeamMember::~BlobTeamMember() {
  // @@protoc_insertion_point(destructor:Cmd.BlobTeamMember)
  SharedDtor();
}

void BlobTeamMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobTeamMember_descriptor_;
}

const BlobTeamMember& BlobTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

BlobTeamMember* BlobTeamMember::default_instance_ = NULL;

BlobTeamMember* BlobTeamMember::New() const {
  return new BlobTeamMember;
}

void BlobTeamMember::Clear() {
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobTeamMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.TeamMember members = 1;
      case 1: {
        if (tag == 10) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_members;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobTeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobTeamMember)
  return false;
#undef DO_
}

void BlobTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobTeamMember)
  // repeated .Cmd.TeamMember members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobTeamMember)
}

::google::protobuf::uint8* BlobTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobTeamMember)
  // repeated .Cmd.TeamMember members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobTeamMember)
  return target;
}

int BlobTeamMember::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.TeamMember members = 1;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobTeamMember::MergeFrom(const BlobTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobTeamMember::CopyFrom(const BlobTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobTeamMember::IsInitialized() const {

  return true;
}

void BlobTeamMember::Swap(BlobTeamMember* other) {
  if (other != this) {
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobTeamMember_descriptor_;
  metadata.reflection = BlobTeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMemberHelpQuest::kCharidFieldNumber;
const int TeamMemberHelpQuest::kHelpquestFieldNumber;
#endif  // !_MSC_VER

TeamMemberHelpQuest::TeamMemberHelpQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamMemberHelpQuest)
}

void TeamMemberHelpQuest::InitAsDefaultInstance() {
}

TeamMemberHelpQuest::TeamMemberHelpQuest(const TeamMemberHelpQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamMemberHelpQuest)
}

void TeamMemberHelpQuest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemberHelpQuest::~TeamMemberHelpQuest() {
  // @@protoc_insertion_point(destructor:Cmd.TeamMemberHelpQuest)
  SharedDtor();
}

void TeamMemberHelpQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamMemberHelpQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemberHelpQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemberHelpQuest_descriptor_;
}

const TeamMemberHelpQuest& TeamMemberHelpQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

TeamMemberHelpQuest* TeamMemberHelpQuest::default_instance_ = NULL;

TeamMemberHelpQuest* TeamMemberHelpQuest::New() const {
  return new TeamMemberHelpQuest;
}

void TeamMemberHelpQuest::Clear() {
  charid_ = GOOGLE_ULONGLONG(0);
  helpquest_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMemberHelpQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamMemberHelpQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_helpquest;
        break;
      }

      // repeated uint32 helpquest = 2;
      case 2: {
        if (tag == 16) {
         parse_helpquest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_helpquest())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_helpquest())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_helpquest;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamMemberHelpQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamMemberHelpQuest)
  return false;
#undef DO_
}

void TeamMemberHelpQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamMemberHelpQuest)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // repeated uint32 helpquest = 2;
  for (int i = 0; i < this->helpquest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->helpquest(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamMemberHelpQuest)
}

::google::protobuf::uint8* TeamMemberHelpQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamMemberHelpQuest)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // repeated uint32 helpquest = 2;
  for (int i = 0; i < this->helpquest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->helpquest(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamMemberHelpQuest)
  return target;
}

int TeamMemberHelpQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated uint32 helpquest = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->helpquest_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->helpquest(i));
    }
    total_size += 1 * this->helpquest_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemberHelpQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMemberHelpQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMemberHelpQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMemberHelpQuest::MergeFrom(const TeamMemberHelpQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  helpquest_.MergeFrom(from.helpquest_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMemberHelpQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemberHelpQuest::CopyFrom(const TeamMemberHelpQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberHelpQuest::IsInitialized() const {

  return true;
}

void TeamMemberHelpQuest::Swap(TeamMemberHelpQuest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    helpquest_.Swap(&other->helpquest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMemberHelpQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemberHelpQuest_descriptor_;
  metadata.reflection = TeamMemberHelpQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMemberWantedQuest::kCharidFieldNumber;
const int TeamMemberWantedQuest::kAcceptquestFieldNumber;
const int TeamMemberWantedQuest::kAcceptstepFieldNumber;
#endif  // !_MSC_VER

TeamMemberWantedQuest::TeamMemberWantedQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamMemberWantedQuest)
}

void TeamMemberWantedQuest::InitAsDefaultInstance() {
}

TeamMemberWantedQuest::TeamMemberWantedQuest(const TeamMemberWantedQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamMemberWantedQuest)
}

void TeamMemberWantedQuest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  acceptquest_ = 0u;
  acceptstep_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemberWantedQuest::~TeamMemberWantedQuest() {
  // @@protoc_insertion_point(destructor:Cmd.TeamMemberWantedQuest)
  SharedDtor();
}

void TeamMemberWantedQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamMemberWantedQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemberWantedQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemberWantedQuest_descriptor_;
}

const TeamMemberWantedQuest& TeamMemberWantedQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

TeamMemberWantedQuest* TeamMemberWantedQuest::default_instance_ = NULL;

TeamMemberWantedQuest* TeamMemberWantedQuest::New() const {
  return new TeamMemberWantedQuest;
}

void TeamMemberWantedQuest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamMemberWantedQuest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(charid_, acceptstep_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMemberWantedQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamMemberWantedQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_acceptquest;
        break;
      }

      // optional uint32 acceptquest = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_acceptquest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acceptquest_)));
          set_has_acceptquest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_acceptstep;
        break;
      }

      // optional uint32 acceptstep = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_acceptstep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acceptstep_)));
          set_has_acceptstep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamMemberWantedQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamMemberWantedQuest)
  return false;
#undef DO_
}

void TeamMemberWantedQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamMemberWantedQuest)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 acceptquest = 2 [default = 0];
  if (has_acceptquest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->acceptquest(), output);
  }

  // optional uint32 acceptstep = 3 [default = 0];
  if (has_acceptstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->acceptstep(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamMemberWantedQuest)
}

::google::protobuf::uint8* TeamMemberWantedQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamMemberWantedQuest)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 acceptquest = 2 [default = 0];
  if (has_acceptquest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->acceptquest(), target);
  }

  // optional uint32 acceptstep = 3 [default = 0];
  if (has_acceptstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->acceptstep(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamMemberWantedQuest)
  return target;
}

int TeamMemberWantedQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 acceptquest = 2 [default = 0];
    if (has_acceptquest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acceptquest());
    }

    // optional uint32 acceptstep = 3 [default = 0];
    if (has_acceptstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acceptstep());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemberWantedQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMemberWantedQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMemberWantedQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMemberWantedQuest::MergeFrom(const TeamMemberWantedQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_acceptquest()) {
      set_acceptquest(from.acceptquest());
    }
    if (from.has_acceptstep()) {
      set_acceptstep(from.acceptstep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMemberWantedQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemberWantedQuest::CopyFrom(const TeamMemberWantedQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberWantedQuest::IsInitialized() const {

  return true;
}

void TeamMemberWantedQuest::Swap(TeamMemberWantedQuest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(acceptquest_, other->acceptquest_);
    std::swap(acceptstep_, other->acceptstep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMemberWantedQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemberWantedQuest_descriptor_;
  metadata.reflection = TeamMemberWantedQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobTeamWanted::kMemberquestFieldNumber;
const int BlobTeamWanted::kMemberhelpFieldNumber;
#endif  // !_MSC_VER

BlobTeamWanted::BlobTeamWanted()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobTeamWanted)
}

void BlobTeamWanted::InitAsDefaultInstance() {
}

BlobTeamWanted::BlobTeamWanted(const BlobTeamWanted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobTeamWanted)
}

void BlobTeamWanted::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobTeamWanted::~BlobTeamWanted() {
  // @@protoc_insertion_point(destructor:Cmd.BlobTeamWanted)
  SharedDtor();
}

void BlobTeamWanted::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobTeamWanted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobTeamWanted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobTeamWanted_descriptor_;
}

const BlobTeamWanted& BlobTeamWanted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

BlobTeamWanted* BlobTeamWanted::default_instance_ = NULL;

BlobTeamWanted* BlobTeamWanted::New() const {
  return new BlobTeamWanted;
}

void BlobTeamWanted::Clear() {
  memberquest_.Clear();
  memberhelp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobTeamWanted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobTeamWanted)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.TeamMemberWantedQuest memberquest = 1;
      case 1: {
        if (tag == 10) {
         parse_memberquest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberquest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_memberquest;
        if (input->ExpectTag(18)) goto parse_memberhelp;
        break;
      }

      // repeated .Cmd.TeamMemberHelpQuest memberhelp = 2;
      case 2: {
        if (tag == 18) {
         parse_memberhelp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberhelp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_memberhelp;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobTeamWanted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobTeamWanted)
  return false;
#undef DO_
}

void BlobTeamWanted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobTeamWanted)
  // repeated .Cmd.TeamMemberWantedQuest memberquest = 1;
  for (int i = 0; i < this->memberquest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->memberquest(i), output);
  }

  // repeated .Cmd.TeamMemberHelpQuest memberhelp = 2;
  for (int i = 0; i < this->memberhelp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->memberhelp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobTeamWanted)
}

::google::protobuf::uint8* BlobTeamWanted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobTeamWanted)
  // repeated .Cmd.TeamMemberWantedQuest memberquest = 1;
  for (int i = 0; i < this->memberquest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->memberquest(i), target);
  }

  // repeated .Cmd.TeamMemberHelpQuest memberhelp = 2;
  for (int i = 0; i < this->memberhelp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->memberhelp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobTeamWanted)
  return target;
}

int BlobTeamWanted::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.TeamMemberWantedQuest memberquest = 1;
  total_size += 1 * this->memberquest_size();
  for (int i = 0; i < this->memberquest_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberquest(i));
  }

  // repeated .Cmd.TeamMemberHelpQuest memberhelp = 2;
  total_size += 1 * this->memberhelp_size();
  for (int i = 0; i < this->memberhelp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberhelp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobTeamWanted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobTeamWanted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobTeamWanted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobTeamWanted::MergeFrom(const BlobTeamWanted& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberquest_.MergeFrom(from.memberquest_);
  memberhelp_.MergeFrom(from.memberhelp_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobTeamWanted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobTeamWanted::CopyFrom(const BlobTeamWanted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobTeamWanted::IsInitialized() const {

  return true;
}

void BlobTeamWanted::Swap(BlobTeamWanted* other) {
  if (other != this) {
    memberquest_.Swap(&other->memberquest_);
    memberhelp_.Swap(&other->memberhelp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobTeamWanted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobTeamWanted_descriptor_;
  metadata.reflection = BlobTeamWanted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamApply::kGuidFieldNumber;
const int TeamApply::kZoneidFieldNumber;
const int TeamApply::kTimeFieldNumber;
const int TeamApply::kNameFieldNumber;
const int TeamApply::kDatasFieldNumber;
const int TeamApply::kAccidFieldNumber;
#endif  // !_MSC_VER

TeamApply::TeamApply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamApply)
}

void TeamApply::InitAsDefaultInstance() {
}

TeamApply::TeamApply(const TeamApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamApply)
}

void TeamApply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  time_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamApply::~TeamApply() {
  // @@protoc_insertion_point(destructor:Cmd.TeamApply)
  SharedDtor();
}

void TeamApply::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TeamApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamApply_descriptor_;
}

const TeamApply& TeamApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

TeamApply* TeamApply::default_instance_ = NULL;

TeamApply* TeamApply::New() const {
  return new TeamApply;
}

void TeamApply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamApply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(guid_, time_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    accid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamApply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        break;
      }

      // repeated .Cmd.MemberData datas = 4;
      case 4: {
        if (tag == 34) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_accid;
        break;
      }

      // optional uint32 accid = 6;
      case 6: {
        if (tag == 48) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamApply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamApply)
  return false;
#undef DO_
}

void TeamApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamApply)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional uint32 time = 2 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .Cmd.MemberData datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->datas(i), output);
  }

  // optional uint32 zoneid = 5 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // optional uint32 accid = 6;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->accid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamApply)
}

::google::protobuf::uint8* TeamApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamApply)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional uint32 time = 2 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .Cmd.MemberData datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->datas(i), target);
  }

  // optional uint32 zoneid = 5 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // optional uint32 accid = 6;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->accid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamApply)
  return target;
}

int TeamApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 zoneid = 5 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 time = 2 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 accid = 6;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accid());
    }

  }
  // repeated .Cmd.MemberData datas = 4;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamApply::MergeFrom(const TeamApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamApply::CopyFrom(const TeamApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamApply::IsInitialized() const {

  return true;
}

void TeamApply::Swap(TeamApply* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    datas_.Swap(&other->datas_);
    std::swap(accid_, other->accid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamApply_descriptor_;
  metadata.reflection = TeamApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobTeamApply::kApplysFieldNumber;
#endif  // !_MSC_VER

BlobTeamApply::BlobTeamApply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobTeamApply)
}

void BlobTeamApply::InitAsDefaultInstance() {
}

BlobTeamApply::BlobTeamApply(const BlobTeamApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobTeamApply)
}

void BlobTeamApply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobTeamApply::~BlobTeamApply() {
  // @@protoc_insertion_point(destructor:Cmd.BlobTeamApply)
  SharedDtor();
}

void BlobTeamApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobTeamApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobTeamApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobTeamApply_descriptor_;
}

const BlobTeamApply& BlobTeamApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

BlobTeamApply* BlobTeamApply::default_instance_ = NULL;

BlobTeamApply* BlobTeamApply::New() const {
  return new BlobTeamApply;
}

void BlobTeamApply::Clear() {
  applys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobTeamApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobTeamApply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.TeamApply applys = 1;
      case 1: {
        if (tag == 10) {
         parse_applys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_applys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobTeamApply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobTeamApply)
  return false;
#undef DO_
}

void BlobTeamApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobTeamApply)
  // repeated .Cmd.TeamApply applys = 1;
  for (int i = 0; i < this->applys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobTeamApply)
}

::google::protobuf::uint8* BlobTeamApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobTeamApply)
  // repeated .Cmd.TeamApply applys = 1;
  for (int i = 0; i < this->applys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobTeamApply)
  return target;
}

int BlobTeamApply::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.TeamApply applys = 1;
  total_size += 1 * this->applys_size();
  for (int i = 0; i < this->applys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobTeamApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobTeamApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobTeamApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobTeamApply::MergeFrom(const BlobTeamApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  applys_.MergeFrom(from.applys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobTeamApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobTeamApply::CopyFrom(const BlobTeamApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobTeamApply::IsInitialized() const {

  return true;
}

void BlobTeamApply::Swap(BlobTeamApply* other) {
  if (other != this) {
    applys_.Swap(&other->applys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobTeamApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobTeamApply_descriptor_;
  metadata.reflection = BlobTeamApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamSealData::kSealFieldNumber;
const int TeamSealData::kZoneidFieldNumber;
const int TeamSealData::kPosFieldNumber;
const int TeamSealData::kTeamidFieldNumber;
const int TeamSealData::kLastonlinetimeFieldNumber;
#endif  // !_MSC_VER

TeamSealData::TeamSealData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamSealData)
}

void TeamSealData::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

TeamSealData::TeamSealData(const TeamSealData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamSealData)
}

void TeamSealData::SharedCtor() {
  _cached_size_ = 0;
  seal_ = 0u;
  zoneid_ = 0u;
  pos_ = NULL;
  teamid_ = GOOGLE_ULONGLONG(0);
  lastonlinetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamSealData::~TeamSealData() {
  // @@protoc_insertion_point(destructor:Cmd.TeamSealData)
  SharedDtor();
}

void TeamSealData::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void TeamSealData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamSealData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamSealData_descriptor_;
}

const TeamSealData& TeamSealData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

TeamSealData* TeamSealData::default_instance_ = NULL;

TeamSealData* TeamSealData::New() const {
  return new TeamSealData;
}

void TeamSealData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamSealData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(seal_, zoneid_);
    ZR_(teamid_, lastonlinetime_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamSealData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamSealData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seal = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seal_)));
          set_has_seal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lastonlinetime;
        break;
      }

      // optional uint32 lastonlinetime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_lastonlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastonlinetime_)));
          set_has_lastonlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamSealData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamSealData)
  return false;
#undef DO_
}

void TeamSealData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamSealData)
  // optional uint32 seal = 1 [default = 0];
  if (has_seal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seal(), output);
  }

  // optional .Cmd.ScenePos pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional uint32 zoneid = 3 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  // optional uint32 lastonlinetime = 5 [default = 0];
  if (has_lastonlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lastonlinetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamSealData)
}

::google::protobuf::uint8* TeamSealData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamSealData)
  // optional uint32 seal = 1 [default = 0];
  if (has_seal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seal(), target);
  }

  // optional .Cmd.ScenePos pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional uint32 zoneid = 3 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  // optional uint32 lastonlinetime = 5 [default = 0];
  if (has_lastonlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lastonlinetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamSealData)
  return target;
}

int TeamSealData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seal = 1 [default = 0];
    if (has_seal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seal());
    }

    // optional uint32 zoneid = 3 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional .Cmd.ScenePos pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint64 teamid = 4 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 lastonlinetime = 5 [default = 0];
    if (has_lastonlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastonlinetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamSealData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamSealData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamSealData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamSealData::MergeFrom(const TeamSealData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seal()) {
      set_seal(from.seal());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_lastonlinetime()) {
      set_lastonlinetime(from.lastonlinetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamSealData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamSealData::CopyFrom(const TeamSealData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamSealData::IsInitialized() const {

  return true;
}

void TeamSealData::Swap(TeamSealData* other) {
  if (other != this) {
    std::swap(seal_, other->seal_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(pos_, other->pos_);
    std::swap(teamid_, other->teamid_);
    std::swap(lastonlinetime_, other->lastonlinetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamSealData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamSealData_descriptor_;
  metadata.reflection = TeamSealData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamSummaryItem::kTypeFieldNumber;
const int TeamSummaryItem::kValueFieldNumber;
#endif  // !_MSC_VER

TeamSummaryItem::TeamSummaryItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamSummaryItem)
}

void TeamSummaryItem::InitAsDefaultInstance() {
}

TeamSummaryItem::TeamSummaryItem(const TeamSummaryItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamSummaryItem)
}

void TeamSummaryItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamSummaryItem::~TeamSummaryItem() {
  // @@protoc_insertion_point(destructor:Cmd.TeamSummaryItem)
  SharedDtor();
}

void TeamSummaryItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamSummaryItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamSummaryItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamSummaryItem_descriptor_;
}

const TeamSummaryItem& TeamSummaryItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

TeamSummaryItem* TeamSummaryItem::default_instance_ = NULL;

TeamSummaryItem* TeamSummaryItem::New() const {
  return new TeamSummaryItem;
}

void TeamSummaryItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamSummaryItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(value_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamSummaryItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamSummaryItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ETeamData type = 1 [default = ETEAMDATA_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETeamData_IsValid(value)) {
            set_type(static_cast< ::Cmd::ETeamData >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint64 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamSummaryItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamSummaryItem)
  return false;
#undef DO_
}

void TeamSummaryItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamSummaryItem)
  // optional .Cmd.ETeamData type = 1 [default = ETEAMDATA_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamSummaryItem)
}

::google::protobuf::uint8* TeamSummaryItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamSummaryItem)
  // optional .Cmd.ETeamData type = 1 [default = ETEAMDATA_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamSummaryItem)
  return target;
}

int TeamSummaryItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ETeamData type = 1 [default = ETEAMDATA_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamSummaryItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamSummaryItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamSummaryItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamSummaryItem::MergeFrom(const TeamSummaryItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamSummaryItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamSummaryItem::CopyFrom(const TeamSummaryItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamSummaryItem::IsInitialized() const {

  return true;
}

void TeamSummaryItem::Swap(TeamSummaryItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamSummaryItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamSummaryItem_descriptor_;
  metadata.reflection = TeamSummaryItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamData::kGuidFieldNumber;
const int TeamData::kZoneidFieldNumber;
const int TeamData::kNameFieldNumber;
const int TeamData::kItemsFieldNumber;
const int TeamData::kMembersFieldNumber;
const int TeamData::kApplysFieldNumber;
const int TeamData::kSealFieldNumber;
#endif  // !_MSC_VER

TeamData::TeamData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamData)
}

void TeamData::InitAsDefaultInstance() {
  seal_ = const_cast< ::Cmd::TeamSealData*>(&::Cmd::TeamSealData::default_instance());
}

TeamData::TeamData(const TeamData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamData)
}

void TeamData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seal_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamData::~TeamData() {
  // @@protoc_insertion_point(destructor:Cmd.TeamData)
  SharedDtor();
}

void TeamData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete seal_;
  }
}

void TeamData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamData_descriptor_;
}

const TeamData& TeamData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

TeamData* TeamData::default_instance_ = NULL;

TeamData* TeamData::New() const {
  return new TeamData;
}

void TeamData::Clear() {
  if (_has_bits_[0 / 32] & 71) {
    guid_ = GOOGLE_ULONGLONG(0);
    zoneid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_seal()) {
      if (seal_ != NULL) seal_->::Cmd::TeamSealData::Clear();
    }
  }
  items_.Clear();
  members_.Clear();
  applys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.TeamSummaryItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }

      // repeated .Cmd.TeamMember members = 4;
      case 4: {
        if (tag == 34) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        if (input->ExpectTag(42)) goto parse_applys;
        break;
      }

      // repeated .Cmd.TeamApply applys = 5;
      case 5: {
        if (tag == 42) {
         parse_applys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_applys;
        if (input->ExpectTag(50)) goto parse_seal;
        break;
      }

      // optional .Cmd.TeamSealData seal = 6;
      case 6: {
        if (tag == 50) {
         parse_seal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamData)
  return false;
#undef DO_
}

void TeamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamData)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .Cmd.TeamSummaryItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // repeated .Cmd.TeamMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  // repeated .Cmd.TeamApply applys = 5;
  for (int i = 0; i < this->applys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->applys(i), output);
  }

  // optional .Cmd.TeamSealData seal = 6;
  if (has_seal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->seal(), output);
  }

  // optional uint32 zoneid = 8 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamData)
}

::google::protobuf::uint8* TeamData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamData)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .Cmd.TeamSummaryItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // repeated .Cmd.TeamMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->members(i), target);
  }

  // repeated .Cmd.TeamApply applys = 5;
  for (int i = 0; i < this->applys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->applys(i), target);
  }

  // optional .Cmd.TeamSealData seal = 6;
  if (has_seal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->seal(), target);
  }

  // optional uint32 zoneid = 8 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamData)
  return target;
}

int TeamData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 zoneid = 8 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Cmd.TeamSealData seal = 6;
    if (has_seal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seal());
    }

  }
  // repeated .Cmd.TeamSummaryItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .Cmd.TeamMember members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated .Cmd.TeamApply applys = 5;
  total_size += 1 * this->applys_size();
  for (int i = 0; i < this->applys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamData::MergeFrom(const TeamData& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  members_.MergeFrom(from.members_);
  applys_.MergeFrom(from.applys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_seal()) {
      mutable_seal()->::Cmd::TeamSealData::MergeFrom(from.seal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamData::CopyFrom(const TeamData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamData::IsInitialized() const {

  return true;
}

void TeamData::Swap(TeamData* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(name_, other->name_);
    items_.Swap(&other->items_);
    members_.Swap(&other->members_);
    applys_.Swap(&other->applys_);
    std::swap(seal_, other->seal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamData_descriptor_;
  metadata.reflection = TeamData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamList::kCmdFieldNumber;
const int TeamList::kParamFieldNumber;
const int TeamList::kTypeFieldNumber;
const int TeamList::kPageFieldNumber;
const int TeamList::kLvFieldNumber;
const int TeamList::kListFieldNumber;
#endif  // !_MSC_VER

TeamList::TeamList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamList)
}

void TeamList::InitAsDefaultInstance() {
}

TeamList::TeamList(const TeamList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamList)
}

void TeamList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 1;
  type_ = 0u;
  page_ = 0u;
  lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamList::~TeamList() {
  // @@protoc_insertion_point(destructor:Cmd.TeamList)
  SharedDtor();
}

void TeamList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamList_descriptor_;
}

const TeamList& TeamList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

TeamList* TeamList::default_instance_ = NULL;

TeamList* TeamList::New() const {
  return new TeamList;
}

void TeamList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, page_);
    cmd_ = 51;
    param_ = 1;
    lv_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_TEAMLIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page;
        break;
      }

      // optional uint32 page = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_list;
        break;
      }

      // repeated .Cmd.TeamData list = 6;
      case 6: {
        if (tag == 50) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamList)
  return false;
#undef DO_
}

void TeamList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamList)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_TEAMLIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 type = 3 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 page = 4 [default = 0];
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->page(), output);
  }

  // optional uint32 lv = 5 [default = 0];
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }

  // repeated .Cmd.TeamData list = 6;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamList)
}

::google::protobuf::uint8* TeamList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamList)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_TEAMLIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 type = 3 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 page = 4 [default = 0];
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->page(), target);
  }

  // optional uint32 lv = 5 [default = 0];
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lv(), target);
  }

  // repeated .Cmd.TeamData list = 6;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamList)
  return target;
}

int TeamList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_TEAMLIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 type = 3 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 page = 4 [default = 0];
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

    // optional uint32 lv = 5 [default = 0];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  // repeated .Cmd.TeamData list = 6;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamList::MergeFrom(const TeamList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamList::CopyFrom(const TeamList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamList::IsInitialized() const {

  return true;
}

void TeamList::Swap(TeamList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(page_, other->page_);
    std::swap(lv_, other->lv_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamList_descriptor_;
  metadata.reflection = TeamList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamDataUpdate::kCmdFieldNumber;
const int TeamDataUpdate::kParamFieldNumber;
const int TeamDataUpdate::kNameFieldNumber;
const int TeamDataUpdate::kDatasFieldNumber;
#endif  // !_MSC_VER

TeamDataUpdate::TeamDataUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamDataUpdate)
}

void TeamDataUpdate::InitAsDefaultInstance() {
}

TeamDataUpdate::TeamDataUpdate(const TeamDataUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamDataUpdate)
}

void TeamDataUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 2;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamDataUpdate::~TeamDataUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.TeamDataUpdate)
  SharedDtor();
}

void TeamDataUpdate::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TeamDataUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamDataUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamDataUpdate_descriptor_;
}

const TeamDataUpdate& TeamDataUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

TeamDataUpdate* TeamDataUpdate::default_instance_ = NULL;

TeamDataUpdate* TeamDataUpdate::New() const {
  return new TeamDataUpdate;
}

void TeamDataUpdate::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 51;
    param_ = 2;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamDataUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamDataUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_DATAUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        break;
      }

      // repeated .Cmd.TeamSummaryItem datas = 4;
      case 4: {
        if (tag == 34) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamDataUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamDataUpdate)
  return false;
#undef DO_
}

void TeamDataUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamDataUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_DATAUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .Cmd.TeamSummaryItem datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamDataUpdate)
}

::google::protobuf::uint8* TeamDataUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamDataUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_DATAUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .Cmd.TeamSummaryItem datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamDataUpdate)
  return target;
}

int TeamDataUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_DATAUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Cmd.TeamSummaryItem datas = 4;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamDataUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamDataUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamDataUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamDataUpdate::MergeFrom(const TeamDataUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamDataUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamDataUpdate::CopyFrom(const TeamDataUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamDataUpdate::IsInitialized() const {

  return true;
}

void TeamDataUpdate::Swap(TeamDataUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(name_, other->name_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamDataUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamDataUpdate_descriptor_;
  metadata.reflection = TeamDataUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMemberUpdate::kCmdFieldNumber;
const int TeamMemberUpdate::kParamFieldNumber;
const int TeamMemberUpdate::kUpdatesFieldNumber;
const int TeamMemberUpdate::kDeletesFieldNumber;
#endif  // !_MSC_VER

TeamMemberUpdate::TeamMemberUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamMemberUpdate)
}

void TeamMemberUpdate::InitAsDefaultInstance() {
}

TeamMemberUpdate::TeamMemberUpdate(const TeamMemberUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamMemberUpdate)
}

void TeamMemberUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemberUpdate::~TeamMemberUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.TeamMemberUpdate)
  SharedDtor();
}

void TeamMemberUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamMemberUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemberUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemberUpdate_descriptor_;
}

const TeamMemberUpdate& TeamMemberUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

TeamMemberUpdate* TeamMemberUpdate::default_instance_ = NULL;

TeamMemberUpdate* TeamMemberUpdate::New() const {
  return new TeamMemberUpdate;
}

void TeamMemberUpdate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 51;
    param_ = 3;
  }
  updates_.Clear();
  deletes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMemberUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamMemberUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        break;
      }

      // repeated .Cmd.TeamMember updates = 3;
      case 3: {
        if (tag == 26) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        if (input->ExpectTag(32)) goto parse_deletes;
        break;
      }

      // repeated uint64 deletes = 4;
      case 4: {
        if (tag == 32) {
         parse_deletes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_deletes())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_deletes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_deletes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamMemberUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamMemberUpdate)
  return false;
#undef DO_
}

void TeamMemberUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamMemberUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.TeamMember updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updates(i), output);
  }

  // repeated uint64 deletes = 4;
  for (int i = 0; i < this->deletes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->deletes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamMemberUpdate)
}

::google::protobuf::uint8* TeamMemberUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamMemberUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.TeamMember updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updates(i), target);
  }

  // repeated uint64 deletes = 4;
  for (int i = 0; i < this->deletes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->deletes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamMemberUpdate)
  return target;
}

int TeamMemberUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.TeamMember updates = 3;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated uint64 deletes = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->deletes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->deletes(i));
    }
    total_size += 1 * this->deletes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemberUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMemberUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMemberUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMemberUpdate::MergeFrom(const TeamMemberUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  deletes_.MergeFrom(from.deletes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMemberUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemberUpdate::CopyFrom(const TeamMemberUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberUpdate::IsInitialized() const {

  return true;
}

void TeamMemberUpdate::Swap(TeamMemberUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    updates_.Swap(&other->updates_);
    deletes_.Swap(&other->deletes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMemberUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemberUpdate_descriptor_;
  metadata.reflection = TeamMemberUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamApplyUpdate::kCmdFieldNumber;
const int TeamApplyUpdate::kParamFieldNumber;
const int TeamApplyUpdate::kUpdatesFieldNumber;
const int TeamApplyUpdate::kDeletesFieldNumber;
#endif  // !_MSC_VER

TeamApplyUpdate::TeamApplyUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamApplyUpdate)
}

void TeamApplyUpdate::InitAsDefaultInstance() {
}

TeamApplyUpdate::TeamApplyUpdate(const TeamApplyUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamApplyUpdate)
}

void TeamApplyUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamApplyUpdate::~TeamApplyUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.TeamApplyUpdate)
  SharedDtor();
}

void TeamApplyUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamApplyUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamApplyUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamApplyUpdate_descriptor_;
}

const TeamApplyUpdate& TeamApplyUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

TeamApplyUpdate* TeamApplyUpdate::default_instance_ = NULL;

TeamApplyUpdate* TeamApplyUpdate::New() const {
  return new TeamApplyUpdate;
}

void TeamApplyUpdate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 51;
    param_ = 4;
  }
  updates_.Clear();
  deletes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamApplyUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamApplyUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_APPLYUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        break;
      }

      // repeated .Cmd.TeamApply updates = 3;
      case 3: {
        if (tag == 26) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        if (input->ExpectTag(32)) goto parse_deletes;
        break;
      }

      // repeated uint64 deletes = 4;
      case 4: {
        if (tag == 32) {
         parse_deletes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_deletes())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_deletes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_deletes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamApplyUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamApplyUpdate)
  return false;
#undef DO_
}

void TeamApplyUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamApplyUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_APPLYUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.TeamApply updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updates(i), output);
  }

  // repeated uint64 deletes = 4;
  for (int i = 0; i < this->deletes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->deletes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamApplyUpdate)
}

::google::protobuf::uint8* TeamApplyUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamApplyUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_APPLYUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.TeamApply updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updates(i), target);
  }

  // repeated uint64 deletes = 4;
  for (int i = 0; i < this->deletes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->deletes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamApplyUpdate)
  return target;
}

int TeamApplyUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_APPLYUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.TeamApply updates = 3;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated uint64 deletes = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->deletes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->deletes(i));
    }
    total_size += 1 * this->deletes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamApplyUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamApplyUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamApplyUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamApplyUpdate::MergeFrom(const TeamApplyUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  deletes_.MergeFrom(from.deletes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamApplyUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamApplyUpdate::CopyFrom(const TeamApplyUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamApplyUpdate::IsInitialized() const {

  return true;
}

void TeamApplyUpdate::Swap(TeamApplyUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    updates_.Swap(&other->updates_);
    deletes_.Swap(&other->deletes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamApplyUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamApplyUpdate_descriptor_;
  metadata.reflection = TeamApplyUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateTeam::kCmdFieldNumber;
const int CreateTeam::kParamFieldNumber;
const int CreateTeam::kMinlvFieldNumber;
const int CreateTeam::kMaxlvFieldNumber;
const int CreateTeam::kTypeFieldNumber;
const int CreateTeam::kAutoacceptFieldNumber;
const int CreateTeam::kNameFieldNumber;
#endif  // !_MSC_VER

CreateTeam::CreateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CreateTeam)
}

void CreateTeam::InitAsDefaultInstance() {
}

CreateTeam::CreateTeam(const CreateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CreateTeam)
}

void CreateTeam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 5;
  minlv_ = 0u;
  maxlv_ = 0u;
  type_ = 0u;
  autoaccept_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateTeam::~CreateTeam() {
  // @@protoc_insertion_point(destructor:Cmd.CreateTeam)
  SharedDtor();
}

void CreateTeam::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTeam_descriptor_;
}

const CreateTeam& CreateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

CreateTeam* CreateTeam::default_instance_ = NULL;

CreateTeam* CreateTeam::New() const {
  return new CreateTeam;
}

void CreateTeam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateTeam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(minlv_, autoaccept_);
    cmd_ = 51;
    param_ = 5;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CreateTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_CREATETEAM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_minlv;
        break;
      }

      // optional uint32 minlv = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_minlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minlv_)));
          set_has_minlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxlv;
        break;
      }

      // optional uint32 maxlv = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_maxlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlv_)));
          set_has_maxlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional uint32 type = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_autoaccept;
        break;
      }

      // optional .Cmd.EAutoType autoaccept = 6 [default = EAUTOTYPE_CLOSE];
      case 6: {
        if (tag == 48) {
         parse_autoaccept:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAutoType_IsValid(value)) {
            set_autoaccept(static_cast< ::Cmd::EAutoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CreateTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CreateTeam)
  return false;
#undef DO_
}

void CreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CreateTeam)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_CREATETEAM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 minlv = 3 [default = 0];
  if (has_minlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->minlv(), output);
  }

  // optional uint32 maxlv = 4 [default = 0];
  if (has_maxlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxlv(), output);
  }

  // optional uint32 type = 5 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // optional .Cmd.EAutoType autoaccept = 6 [default = EAUTOTYPE_CLOSE];
  if (has_autoaccept()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->autoaccept(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CreateTeam)
}

::google::protobuf::uint8* CreateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CreateTeam)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_CREATETEAM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 minlv = 3 [default = 0];
  if (has_minlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->minlv(), target);
  }

  // optional uint32 maxlv = 4 [default = 0];
  if (has_maxlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxlv(), target);
  }

  // optional uint32 type = 5 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // optional .Cmd.EAutoType autoaccept = 6 [default = EAUTOTYPE_CLOSE];
  if (has_autoaccept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->autoaccept(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CreateTeam)
  return target;
}

int CreateTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_CREATETEAM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 minlv = 3 [default = 0];
    if (has_minlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minlv());
    }

    // optional uint32 maxlv = 4 [default = 0];
    if (has_maxlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlv());
    }

    // optional uint32 type = 5 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .Cmd.EAutoType autoaccept = 6 [default = EAUTOTYPE_CLOSE];
    if (has_autoaccept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->autoaccept());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateTeam::MergeFrom(const CreateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_minlv()) {
      set_minlv(from.minlv());
    }
    if (from.has_maxlv()) {
      set_maxlv(from.maxlv());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_autoaccept()) {
      set_autoaccept(from.autoaccept());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTeam::CopyFrom(const CreateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTeam::IsInitialized() const {

  return true;
}

void CreateTeam::Swap(CreateTeam* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(minlv_, other->minlv_);
    std::swap(maxlv_, other->maxlv_);
    std::swap(type_, other->type_);
    std::swap(autoaccept_, other->autoaccept_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTeam_descriptor_;
  metadata.reflection = CreateTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteMember::kCmdFieldNumber;
const int InviteMember::kParamFieldNumber;
const int InviteMember::kUserguidFieldNumber;
const int InviteMember::kCatidFieldNumber;
const int InviteMember::kTeamnameFieldNumber;
const int InviteMember::kUsernameFieldNumber;
#endif  // !_MSC_VER

InviteMember::InviteMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InviteMember)
}

void InviteMember::InitAsDefaultInstance() {
}

InviteMember::InviteMember(const InviteMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InviteMember)
}

void InviteMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 6;
  userguid_ = GOOGLE_ULONGLONG(0);
  catid_ = 0u;
  teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteMember::~InviteMember() {
  // @@protoc_insertion_point(destructor:Cmd.InviteMember)
  SharedDtor();
}

void InviteMember::SharedDtor() {
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete teamname_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void InviteMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteMember_descriptor_;
}

const InviteMember& InviteMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

InviteMember* InviteMember::default_instance_ = NULL;

InviteMember* InviteMember::New() const {
  return new InviteMember;
}

void InviteMember::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    cmd_ = 51;
    param_ = 6;
    userguid_ = GOOGLE_ULONGLONG(0);
    catid_ = 0u;
    if (has_teamname()) {
      if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        teamname_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InviteMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_INVITEMEMBER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userguid;
        break;
      }

      // optional uint64 userguid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_userguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userguid_)));
          set_has_userguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_catid;
        break;
      }

      // optional uint32 catid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_catid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catid_)));
          set_has_catid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_teamname;
        break;
      }

      // optional string teamname = 5;
      case 5: {
        if (tag == 42) {
         parse_teamname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamname().data(), this->teamname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "teamname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_username;
        break;
      }

      // optional string username = 6;
      case 6: {
        if (tag == 50) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InviteMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InviteMember)
  return false;
#undef DO_
}

void InviteMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InviteMember)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_INVITEMEMBER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 userguid = 3 [default = 0];
  if (has_userguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userguid(), output);
  }

  // optional uint32 catid = 4 [default = 0];
  if (has_catid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->catid(), output);
  }

  // optional string teamname = 5;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->teamname(), output);
  }

  // optional string username = 6;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InviteMember)
}

::google::protobuf::uint8* InviteMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InviteMember)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_INVITEMEMBER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 userguid = 3 [default = 0];
  if (has_userguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userguid(), target);
  }

  // optional uint32 catid = 4 [default = 0];
  if (has_catid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->catid(), target);
  }

  // optional string teamname = 5;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->teamname(), target);
  }

  // optional string username = 6;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InviteMember)
  return target;
}

int InviteMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_INVITEMEMBER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 userguid = 3 [default = 0];
    if (has_userguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userguid());
    }

    // optional uint32 catid = 4 [default = 0];
    if (has_catid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->catid());
    }

    // optional string teamname = 5;
    if (has_teamname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamname());
    }

    // optional string username = 6;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteMember::MergeFrom(const InviteMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userguid()) {
      set_userguid(from.userguid());
    }
    if (from.has_catid()) {
      set_catid(from.catid());
    }
    if (from.has_teamname()) {
      set_teamname(from.teamname());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteMember::CopyFrom(const InviteMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteMember::IsInitialized() const {

  return true;
}

void InviteMember::Swap(InviteMember* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userguid_, other->userguid_);
    std::swap(catid_, other->catid_);
    std::swap(teamname_, other->teamname_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteMember_descriptor_;
  metadata.reflection = InviteMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessTeamInvite::kCmdFieldNumber;
const int ProcessTeamInvite::kParamFieldNumber;
const int ProcessTeamInvite::kTypeFieldNumber;
const int ProcessTeamInvite::kUserguidFieldNumber;
#endif  // !_MSC_VER

ProcessTeamInvite::ProcessTeamInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ProcessTeamInvite)
}

void ProcessTeamInvite::InitAsDefaultInstance() {
}

ProcessTeamInvite::ProcessTeamInvite(const ProcessTeamInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ProcessTeamInvite)
}

void ProcessTeamInvite::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 7;
  type_ = 0;
  userguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessTeamInvite::~ProcessTeamInvite() {
  // @@protoc_insertion_point(destructor:Cmd.ProcessTeamInvite)
  SharedDtor();
}

void ProcessTeamInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProcessTeamInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessTeamInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessTeamInvite_descriptor_;
}

const ProcessTeamInvite& ProcessTeamInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

ProcessTeamInvite* ProcessTeamInvite::default_instance_ = NULL;

ProcessTeamInvite* ProcessTeamInvite::New() const {
  return new ProcessTeamInvite;
}

void ProcessTeamInvite::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProcessTeamInvite*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(userguid_, type_);
    cmd_ = 51;
    param_ = 7;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessTeamInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ProcessTeamInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_PROCESSINVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.ETeamInviteType type = 3 [default = ETEAMINVITETYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETeamInviteType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ETeamInviteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userguid;
        break;
      }

      // optional uint64 userguid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_userguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userguid_)));
          set_has_userguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ProcessTeamInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ProcessTeamInvite)
  return false;
#undef DO_
}

void ProcessTeamInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ProcessTeamInvite)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_PROCESSINVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ETeamInviteType type = 3 [default = ETEAMINVITETYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 userguid = 4 [default = 0];
  if (has_userguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->userguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ProcessTeamInvite)
}

::google::protobuf::uint8* ProcessTeamInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ProcessTeamInvite)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_PROCESSINVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ETeamInviteType type = 3 [default = ETEAMINVITETYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint64 userguid = 4 [default = 0];
  if (has_userguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->userguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ProcessTeamInvite)
  return target;
}

int ProcessTeamInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_PROCESSINVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ETeamInviteType type = 3 [default = ETEAMINVITETYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 userguid = 4 [default = 0];
    if (has_userguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessTeamInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessTeamInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessTeamInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessTeamInvite::MergeFrom(const ProcessTeamInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_userguid()) {
      set_userguid(from.userguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessTeamInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessTeamInvite::CopyFrom(const ProcessTeamInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTeamInvite::IsInitialized() const {

  return true;
}

void ProcessTeamInvite::Swap(ProcessTeamInvite* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(userguid_, other->userguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessTeamInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessTeamInvite_descriptor_;
  metadata.reflection = ProcessTeamInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMemberApply::kCmdFieldNumber;
const int TeamMemberApply::kParamFieldNumber;
const int TeamMemberApply::kGuidFieldNumber;
#endif  // !_MSC_VER

TeamMemberApply::TeamMemberApply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamMemberApply)
}

void TeamMemberApply::InitAsDefaultInstance() {
}

TeamMemberApply::TeamMemberApply(const TeamMemberApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamMemberApply)
}

void TeamMemberApply::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 8;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemberApply::~TeamMemberApply() {
  // @@protoc_insertion_point(destructor:Cmd.TeamMemberApply)
  SharedDtor();
}

void TeamMemberApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamMemberApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemberApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemberApply_descriptor_;
}

const TeamMemberApply& TeamMemberApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

TeamMemberApply* TeamMemberApply::default_instance_ = NULL;

TeamMemberApply* TeamMemberApply::New() const {
  return new TeamMemberApply;
}

void TeamMemberApply::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 51;
    param_ = 8;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMemberApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamMemberApply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERAPPLY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamMemberApply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamMemberApply)
  return false;
#undef DO_
}

void TeamMemberApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamMemberApply)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERAPPLY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamMemberApply)
}

::google::protobuf::uint8* TeamMemberApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamMemberApply)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERAPPLY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamMemberApply)
  return target;
}

int TeamMemberApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERAPPLY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guid = 3 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemberApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMemberApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMemberApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMemberApply::MergeFrom(const TeamMemberApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMemberApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemberApply::CopyFrom(const TeamMemberApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberApply::IsInitialized() const {

  return true;
}

void TeamMemberApply::Swap(TeamMemberApply* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMemberApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemberApply_descriptor_;
  metadata.reflection = TeamMemberApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessTeamApply::kCmdFieldNumber;
const int ProcessTeamApply::kParamFieldNumber;
const int ProcessTeamApply::kTypeFieldNumber;
const int ProcessTeamApply::kUserguidFieldNumber;
#endif  // !_MSC_VER

ProcessTeamApply::ProcessTeamApply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ProcessTeamApply)
}

void ProcessTeamApply::InitAsDefaultInstance() {
}

ProcessTeamApply::ProcessTeamApply(const ProcessTeamApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ProcessTeamApply)
}

void ProcessTeamApply::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 9;
  type_ = 0;
  userguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessTeamApply::~ProcessTeamApply() {
  // @@protoc_insertion_point(destructor:Cmd.ProcessTeamApply)
  SharedDtor();
}

void ProcessTeamApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProcessTeamApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessTeamApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessTeamApply_descriptor_;
}

const ProcessTeamApply& ProcessTeamApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

ProcessTeamApply* ProcessTeamApply::default_instance_ = NULL;

ProcessTeamApply* ProcessTeamApply::New() const {
  return new ProcessTeamApply;
}

void ProcessTeamApply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProcessTeamApply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(userguid_, type_);
    cmd_ = 51;
    param_ = 9;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessTeamApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ProcessTeamApply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_PROCESSAPPLY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.ETeamApplyType type = 3 [default = ETEAMAPPLYTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETeamApplyType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ETeamApplyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userguid;
        break;
      }

      // optional uint64 userguid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_userguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userguid_)));
          set_has_userguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ProcessTeamApply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ProcessTeamApply)
  return false;
#undef DO_
}

void ProcessTeamApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ProcessTeamApply)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_PROCESSAPPLY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ETeamApplyType type = 3 [default = ETEAMAPPLYTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 userguid = 4 [default = 0];
  if (has_userguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->userguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ProcessTeamApply)
}

::google::protobuf::uint8* ProcessTeamApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ProcessTeamApply)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_PROCESSAPPLY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ETeamApplyType type = 3 [default = ETEAMAPPLYTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint64 userguid = 4 [default = 0];
  if (has_userguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->userguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ProcessTeamApply)
  return target;
}

int ProcessTeamApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_PROCESSAPPLY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ETeamApplyType type = 3 [default = ETEAMAPPLYTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 userguid = 4 [default = 0];
    if (has_userguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessTeamApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessTeamApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessTeamApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessTeamApply::MergeFrom(const ProcessTeamApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_userguid()) {
      set_userguid(from.userguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessTeamApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessTeamApply::CopyFrom(const ProcessTeamApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTeamApply::IsInitialized() const {

  return true;
}

void ProcessTeamApply::Swap(ProcessTeamApply* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(userguid_, other->userguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessTeamApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessTeamApply_descriptor_;
  metadata.reflection = ProcessTeamApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickMember::kCmdFieldNumber;
const int KickMember::kParamFieldNumber;
const int KickMember::kUseridFieldNumber;
const int KickMember::kCatidFieldNumber;
#endif  // !_MSC_VER

KickMember::KickMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.KickMember)
}

void KickMember::InitAsDefaultInstance() {
}

KickMember::KickMember(const KickMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.KickMember)
}

void KickMember::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 10;
  userid_ = GOOGLE_ULONGLONG(0);
  catid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickMember::~KickMember() {
  // @@protoc_insertion_point(destructor:Cmd.KickMember)
  SharedDtor();
}

void KickMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickMember_descriptor_;
}

const KickMember& KickMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

KickMember* KickMember::default_instance_ = NULL;

KickMember* KickMember::New() const {
  return new KickMember;
}

void KickMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KickMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(userid_, catid_);
    cmd_ = 51;
    param_ = 10;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.KickMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_KICKMEMBER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_catid;
        break;
      }

      // optional uint64 catid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_catid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &catid_)));
          set_has_catid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.KickMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.KickMember)
  return false;
#undef DO_
}

void KickMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.KickMember)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_KICKMEMBER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  // optional uint64 catid = 4 [default = 0];
  if (has_catid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->catid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.KickMember)
}

::google::protobuf::uint8* KickMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.KickMember)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_KICKMEMBER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  // optional uint64 catid = 4 [default = 0];
  if (has_catid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->catid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.KickMember)
  return target;
}

int KickMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_KICKMEMBER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 userid = 3 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional uint64 catid = 4 [default = 0];
    if (has_catid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->catid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickMember::MergeFrom(const KickMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_catid()) {
      set_catid(from.catid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickMember::CopyFrom(const KickMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickMember::IsInitialized() const {

  return true;
}

void KickMember::Swap(KickMember* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(catid_, other->catid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickMember_descriptor_;
  metadata.reflection = KickMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeLeader::kCmdFieldNumber;
const int ExchangeLeader::kParamFieldNumber;
const int ExchangeLeader::kUseridFieldNumber;
#endif  // !_MSC_VER

ExchangeLeader::ExchangeLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExchangeLeader)
}

void ExchangeLeader::InitAsDefaultInstance() {
}

ExchangeLeader::ExchangeLeader(const ExchangeLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExchangeLeader)
}

void ExchangeLeader::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 11;
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeLeader::~ExchangeLeader() {
  // @@protoc_insertion_point(destructor:Cmd.ExchangeLeader)
  SharedDtor();
}

void ExchangeLeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeLeader_descriptor_;
}

const ExchangeLeader& ExchangeLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

ExchangeLeader* ExchangeLeader::default_instance_ = NULL;

ExchangeLeader* ExchangeLeader::New() const {
  return new ExchangeLeader;
}

void ExchangeLeader::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 51;
    param_ = 11;
    userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExchangeLeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_EXCHANGELEADER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExchangeLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExchangeLeader)
  return false;
#undef DO_
}

void ExchangeLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExchangeLeader)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_EXCHANGELEADER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExchangeLeader)
}

::google::protobuf::uint8* ExchangeLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExchangeLeader)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_EXCHANGELEADER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExchangeLeader)
  return target;
}

int ExchangeLeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_EXCHANGELEADER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 userid = 4 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeLeader::MergeFrom(const ExchangeLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeLeader::CopyFrom(const ExchangeLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeLeader::IsInitialized() const {

  return true;
}

void ExchangeLeader::Swap(ExchangeLeader* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeLeader_descriptor_;
  metadata.reflection = ExchangeLeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitTeam::kCmdFieldNumber;
const int ExitTeam::kParamFieldNumber;
const int ExitTeam::kTeamidFieldNumber;
#endif  // !_MSC_VER

ExitTeam::ExitTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExitTeam)
}

void ExitTeam::InitAsDefaultInstance() {
}

ExitTeam::ExitTeam(const ExitTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExitTeam)
}

void ExitTeam::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 12;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitTeam::~ExitTeam() {
  // @@protoc_insertion_point(destructor:Cmd.ExitTeam)
  SharedDtor();
}

void ExitTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitTeam_descriptor_;
}

const ExitTeam& ExitTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

ExitTeam* ExitTeam::default_instance_ = NULL;

ExitTeam* ExitTeam::New() const {
  return new ExitTeam;
}

void ExitTeam::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 51;
    param_ = 12;
    teamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExitTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_EXITTEAM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExitTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExitTeam)
  return false;
#undef DO_
}

void ExitTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExitTeam)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_EXITTEAM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExitTeam)
}

::google::protobuf::uint8* ExitTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExitTeam)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_EXITTEAM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExitTeam)
  return target;
}

int ExitTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_EXITTEAM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 teamid = 3 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitTeam::MergeFrom(const ExitTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitTeam::CopyFrom(const ExitTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitTeam::IsInitialized() const {

  return true;
}

void ExitTeam::Swap(ExitTeam* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitTeam_descriptor_;
  metadata.reflection = ExitTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterTeam::kCmdFieldNumber;
const int EnterTeam::kParamFieldNumber;
const int EnterTeam::kDataFieldNumber;
#endif  // !_MSC_VER

EnterTeam::EnterTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnterTeam)
}

void EnterTeam::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::TeamData*>(&::Cmd::TeamData::default_instance());
}

EnterTeam::EnterTeam(const EnterTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnterTeam)
}

void EnterTeam::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 13;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterTeam::~EnterTeam() {
  // @@protoc_insertion_point(destructor:Cmd.EnterTeam)
  SharedDtor();
}

void EnterTeam::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void EnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterTeam_descriptor_;
}

const EnterTeam& EnterTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

EnterTeam* EnterTeam::default_instance_ = NULL;

EnterTeam* EnterTeam::New() const {
  return new EnterTeam;
}

void EnterTeam::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 51;
    param_ = 13;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::TeamData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnterTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_ENTERTEAM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.TeamData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnterTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnterTeam)
  return false;
#undef DO_
}

void EnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnterTeam)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_ENTERTEAM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.TeamData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnterTeam)
}

::google::protobuf::uint8* EnterTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnterTeam)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_ENTERTEAM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.TeamData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnterTeam)
  return target;
}

int EnterTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_ENTERTEAM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.TeamData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterTeam::MergeFrom(const EnterTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::TeamData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterTeam::CopyFrom(const EnterTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterTeam::IsInitialized() const {

  return true;
}

void EnterTeam::Swap(EnterTeam* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterTeam_descriptor_;
  metadata.reflection = EnterTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberPosUpdate::kCmdFieldNumber;
const int MemberPosUpdate::kParamFieldNumber;
const int MemberPosUpdate::kIdFieldNumber;
const int MemberPosUpdate::kPosFieldNumber;
#endif  // !_MSC_VER

MemberPosUpdate::MemberPosUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MemberPosUpdate)
}

void MemberPosUpdate::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

MemberPosUpdate::MemberPosUpdate(const MemberPosUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MemberPosUpdate)
}

void MemberPosUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 14;
  id_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberPosUpdate::~MemberPosUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.MemberPosUpdate)
  SharedDtor();
}

void MemberPosUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void MemberPosUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberPosUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberPosUpdate_descriptor_;
}

const MemberPosUpdate& MemberPosUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

MemberPosUpdate* MemberPosUpdate::default_instance_ = NULL;

MemberPosUpdate* MemberPosUpdate::New() const {
  return new MemberPosUpdate;
}

void MemberPosUpdate::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 51;
    param_ = 14;
    id_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberPosUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MemberPosUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERPOSUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MemberPosUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MemberPosUpdate)
  return false;
#undef DO_
}

void MemberPosUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MemberPosUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERPOSUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MemberPosUpdate)
}

::google::protobuf::uint8* MemberPosUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MemberPosUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERPOSUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MemberPosUpdate)
  return target;
}

int MemberPosUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERPOSUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .Cmd.ScenePos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberPosUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberPosUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberPosUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberPosUpdate::MergeFrom(const MemberPosUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberPosUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberPosUpdate::CopyFrom(const MemberPosUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberPosUpdate::IsInitialized() const {

  return true;
}

void MemberPosUpdate::Swap(MemberPosUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberPosUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberPosUpdate_descriptor_;
  metadata.reflection = MemberPosUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberDataUpdate::kCmdFieldNumber;
const int MemberDataUpdate::kParamFieldNumber;
const int MemberDataUpdate::kIdFieldNumber;
const int MemberDataUpdate::kMembersFieldNumber;
#endif  // !_MSC_VER

MemberDataUpdate::MemberDataUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MemberDataUpdate)
}

void MemberDataUpdate::InitAsDefaultInstance() {
}

MemberDataUpdate::MemberDataUpdate(const MemberDataUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MemberDataUpdate)
}

void MemberDataUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 15;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberDataUpdate::~MemberDataUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.MemberDataUpdate)
  SharedDtor();
}

void MemberDataUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemberDataUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberDataUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberDataUpdate_descriptor_;
}

const MemberDataUpdate& MemberDataUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

MemberDataUpdate* MemberDataUpdate::default_instance_ = NULL;

MemberDataUpdate* MemberDataUpdate::New() const {
  return new MemberDataUpdate;
}

void MemberDataUpdate::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 51;
    param_ = 15;
    id_ = GOOGLE_ULONGLONG(0);
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberDataUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MemberDataUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERDATAUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }

      // repeated .Cmd.MemberData members = 4;
      case 4: {
        if (tag == 34) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MemberDataUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MemberDataUpdate)
  return false;
#undef DO_
}

void MemberDataUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MemberDataUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERDATAUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // repeated .Cmd.MemberData members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MemberDataUpdate)
}

::google::protobuf::uint8* MemberDataUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MemberDataUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERDATAUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // repeated .Cmd.MemberData members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MemberDataUpdate)
  return target;
}

int MemberDataUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERDATAUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .Cmd.MemberData members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberDataUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberDataUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberDataUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberDataUpdate::MergeFrom(const MemberDataUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberDataUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberDataUpdate::CopyFrom(const MemberDataUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberDataUpdate::IsInitialized() const {

  return true;
}

void MemberDataUpdate::Swap(MemberDataUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberDataUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberDataUpdate_descriptor_;
  metadata.reflection = MemberDataUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LockTarget::kCmdFieldNumber;
const int LockTarget::kParamFieldNumber;
const int LockTarget::kTargetidFieldNumber;
#endif  // !_MSC_VER

LockTarget::LockTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LockTarget)
}

void LockTarget::InitAsDefaultInstance() {
}

LockTarget::LockTarget(const LockTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LockTarget)
}

void LockTarget::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 16;
  targetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LockTarget::~LockTarget() {
  // @@protoc_insertion_point(destructor:Cmd.LockTarget)
  SharedDtor();
}

void LockTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LockTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LockTarget_descriptor_;
}

const LockTarget& LockTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

LockTarget* LockTarget::default_instance_ = NULL;

LockTarget* LockTarget::New() const {
  return new LockTarget;
}

void LockTarget::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 51;
    param_ = 16;
    targetid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LockTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LockTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_LOCKTARGET];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_targetid;
        break;
      }

      // optional uint64 targetid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LockTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LockTarget)
  return false;
#undef DO_
}

void LockTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LockTarget)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_LOCKTARGET];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 targetid = 3 [default = 0];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LockTarget)
}

::google::protobuf::uint8* LockTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LockTarget)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_LOCKTARGET];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 targetid = 3 [default = 0];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LockTarget)
  return target;
}

int LockTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_LOCKTARGET];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 targetid = 3 [default = 0];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LockTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LockTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LockTarget::MergeFrom(const LockTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LockTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockTarget::CopyFrom(const LockTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockTarget::IsInitialized() const {

  return true;
}

void LockTarget::Swap(LockTarget* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LockTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LockTarget_descriptor_;
  metadata.reflection = LockTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamSummon::kCmdFieldNumber;
const int TeamSummon::kParamFieldNumber;
const int TeamSummon::kRaididFieldNumber;
#endif  // !_MSC_VER

TeamSummon::TeamSummon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamSummon)
}

void TeamSummon::InitAsDefaultInstance() {
}

TeamSummon::TeamSummon(const TeamSummon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamSummon)
}

void TeamSummon::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 17;
  raidid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamSummon::~TeamSummon() {
  // @@protoc_insertion_point(destructor:Cmd.TeamSummon)
  SharedDtor();
}

void TeamSummon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamSummon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamSummon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamSummon_descriptor_;
}

const TeamSummon& TeamSummon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

TeamSummon* TeamSummon::default_instance_ = NULL;

TeamSummon* TeamSummon::New() const {
  return new TeamSummon;
}

void TeamSummon::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 51;
    param_ = 17;
    raidid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamSummon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamSummon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_SUMMON];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_raidid;
        break;
      }

      // optional uint32 raidid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_raidid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raidid_)));
          set_has_raidid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamSummon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamSummon)
  return false;
#undef DO_
}

void TeamSummon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamSummon)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_SUMMON];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 raidid = 3 [default = 0];
  if (has_raidid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raidid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamSummon)
}

::google::protobuf::uint8* TeamSummon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamSummon)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_SUMMON];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 raidid = 3 [default = 0];
  if (has_raidid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raidid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamSummon)
  return target;
}

int TeamSummon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_SUMMON];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 raidid = 3 [default = 0];
    if (has_raidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raidid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamSummon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamSummon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamSummon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamSummon::MergeFrom(const TeamSummon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_raidid()) {
      set_raidid(from.raidid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamSummon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamSummon::CopyFrom(const TeamSummon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamSummon::IsInitialized() const {

  return true;
}

void TeamSummon::Swap(TeamSummon* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(raidid_, other->raidid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamSummon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamSummon_descriptor_;
  metadata.reflection = TeamSummon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClearApplyList::kCmdFieldNumber;
const int ClearApplyList::kParamFieldNumber;
#endif  // !_MSC_VER

ClearApplyList::ClearApplyList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ClearApplyList)
}

void ClearApplyList::InitAsDefaultInstance() {
}

ClearApplyList::ClearApplyList(const ClearApplyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ClearApplyList)
}

void ClearApplyList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 18;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearApplyList::~ClearApplyList() {
  // @@protoc_insertion_point(destructor:Cmd.ClearApplyList)
  SharedDtor();
}

void ClearApplyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearApplyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearApplyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearApplyList_descriptor_;
}

const ClearApplyList& ClearApplyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

ClearApplyList* ClearApplyList::default_instance_ = NULL;

ClearApplyList* ClearApplyList::New() const {
  return new ClearApplyList;
}

void ClearApplyList::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 51;
    param_ = 18;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearApplyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ClearApplyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_CLEARAPPLYLIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ClearApplyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ClearApplyList)
  return false;
#undef DO_
}

void ClearApplyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ClearApplyList)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_CLEARAPPLYLIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ClearApplyList)
}

::google::protobuf::uint8* ClearApplyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ClearApplyList)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_CLEARAPPLYLIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ClearApplyList)
  return target;
}

int ClearApplyList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_CLEARAPPLYLIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearApplyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearApplyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearApplyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClearApplyList::MergeFrom(const ClearApplyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearApplyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearApplyList::CopyFrom(const ClearApplyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearApplyList::IsInitialized() const {

  return true;
}

void ClearApplyList::Swap(ClearApplyList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClearApplyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearApplyList_descriptor_;
  metadata.reflection = ClearApplyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuickEnter::kCmdFieldNumber;
const int QuickEnter::kParamFieldNumber;
const int QuickEnter::kTypeFieldNumber;
const int QuickEnter::kTimeFieldNumber;
const int QuickEnter::kSetFieldNumber;
#endif  // !_MSC_VER

QuickEnter::QuickEnter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuickEnter)
}

void QuickEnter::InitAsDefaultInstance() {
}

QuickEnter::QuickEnter(const QuickEnter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuickEnter)
}

void QuickEnter::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 19;
  type_ = 0u;
  time_ = 0u;
  set_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickEnter::~QuickEnter() {
  // @@protoc_insertion_point(destructor:Cmd.QuickEnter)
  SharedDtor();
}

void QuickEnter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuickEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickEnter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickEnter_descriptor_;
}

const QuickEnter& QuickEnter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

QuickEnter* QuickEnter::default_instance_ = NULL;

QuickEnter* QuickEnter::New() const {
  return new QuickEnter;
}

void QuickEnter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuickEnter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, set_);
    cmd_ = 51;
    param_ = 19;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuickEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuickEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUICKENTER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_set;
        break;
      }

      // optional bool set = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &set_)));
          set_has_set();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuickEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuickEnter)
  return false;
#undef DO_
}

void QuickEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuickEnter)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUICKENTER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 type = 3 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  // optional bool set = 5 [default = false];
  if (has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuickEnter)
}

::google::protobuf::uint8* QuickEnter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuickEnter)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUICKENTER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 type = 3 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  // optional bool set = 5 [default = false];
  if (has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuickEnter)
  return target;
}

int QuickEnter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUICKENTER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 type = 3 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 time = 4 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bool set = 5 [default = false];
    if (has_set()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickEnter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuickEnter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuickEnter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuickEnter::MergeFrom(const QuickEnter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_set()) {
      set_set(from.set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuickEnter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickEnter::CopyFrom(const QuickEnter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickEnter::IsInitialized() const {

  return true;
}

void QuickEnter::Swap(QuickEnter* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(set_, other->set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuickEnter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickEnter_descriptor_;
  metadata.reflection = QuickEnter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTeamOption::kCmdFieldNumber;
const int SetTeamOption::kParamFieldNumber;
const int SetTeamOption::kNameFieldNumber;
const int SetTeamOption::kItemsFieldNumber;
#endif  // !_MSC_VER

SetTeamOption::SetTeamOption()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SetTeamOption)
}

void SetTeamOption::InitAsDefaultInstance() {
}

SetTeamOption::SetTeamOption(const SetTeamOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SetTeamOption)
}

void SetTeamOption::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 20;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTeamOption::~SetTeamOption() {
  // @@protoc_insertion_point(destructor:Cmd.SetTeamOption)
  SharedDtor();
}

void SetTeamOption::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SetTeamOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTeamOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTeamOption_descriptor_;
}

const SetTeamOption& SetTeamOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

SetTeamOption* SetTeamOption::default_instance_ = NULL;

SetTeamOption* SetTeamOption::New() const {
  return new SetTeamOption;
}

void SetTeamOption::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 51;
    param_ = 20;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTeamOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SetTeamOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_SETOPTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .Cmd.TeamSummaryItem items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SetTeamOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SetTeamOption)
  return false;
#undef DO_
}

void SetTeamOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SetTeamOption)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_SETOPTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .Cmd.TeamSummaryItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SetTeamOption)
}

::google::protobuf::uint8* SetTeamOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SetTeamOption)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_SETOPTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .Cmd.TeamSummaryItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SetTeamOption)
  return target;
}

int SetTeamOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_SETOPTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Cmd.TeamSummaryItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTeamOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTeamOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTeamOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTeamOption::MergeFrom(const SetTeamOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTeamOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTeamOption::CopyFrom(const SetTeamOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTeamOption::IsInitialized() const {

  return true;
}

void SetTeamOption::Swap(SetTeamOption* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(name_, other->name_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTeamOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTeamOption_descriptor_;
  metadata.reflection = SetTeamOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryUserTeamInfoTeamCmd::kCmdFieldNumber;
const int QueryUserTeamInfoTeamCmd::kParamFieldNumber;
const int QueryUserTeamInfoTeamCmd::kCharidFieldNumber;
const int QueryUserTeamInfoTeamCmd::kTeamidFieldNumber;
#endif  // !_MSC_VER

QueryUserTeamInfoTeamCmd::QueryUserTeamInfoTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryUserTeamInfoTeamCmd)
}

void QueryUserTeamInfoTeamCmd::InitAsDefaultInstance() {
}

QueryUserTeamInfoTeamCmd::QueryUserTeamInfoTeamCmd(const QueryUserTeamInfoTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryUserTeamInfoTeamCmd)
}

void QueryUserTeamInfoTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 21;
  charid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUserTeamInfoTeamCmd::~QueryUserTeamInfoTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryUserTeamInfoTeamCmd)
  SharedDtor();
}

void QueryUserTeamInfoTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryUserTeamInfoTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserTeamInfoTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserTeamInfoTeamCmd_descriptor_;
}

const QueryUserTeamInfoTeamCmd& QueryUserTeamInfoTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

QueryUserTeamInfoTeamCmd* QueryUserTeamInfoTeamCmd::default_instance_ = NULL;

QueryUserTeamInfoTeamCmd* QueryUserTeamInfoTeamCmd::New() const {
  return new QueryUserTeamInfoTeamCmd;
}

void QueryUserTeamInfoTeamCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryUserTeamInfoTeamCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, teamid_);
    cmd_ = 51;
    param_ = 21;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryUserTeamInfoTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryUserTeamInfoTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYUSERTEAMINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryUserTeamInfoTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryUserTeamInfoTeamCmd)
  return false;
#undef DO_
}

void QueryUserTeamInfoTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryUserTeamInfoTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYUSERTEAMINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryUserTeamInfoTeamCmd)
}

::google::protobuf::uint8* QueryUserTeamInfoTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryUserTeamInfoTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYUSERTEAMINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryUserTeamInfoTeamCmd)
  return target;
}

int QueryUserTeamInfoTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYUSERTEAMINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 teamid = 4 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserTeamInfoTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryUserTeamInfoTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryUserTeamInfoTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryUserTeamInfoTeamCmd::MergeFrom(const QueryUserTeamInfoTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryUserTeamInfoTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserTeamInfoTeamCmd::CopyFrom(const QueryUserTeamInfoTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserTeamInfoTeamCmd::IsInitialized() const {

  return true;
}

void QueryUserTeamInfoTeamCmd::Swap(QueryUserTeamInfoTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryUserTeamInfoTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserTeamInfoTeamCmd_descriptor_;
  metadata.reflection = QueryUserTeamInfoTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetMemberOptionTeamCmd::kCmdFieldNumber;
const int SetMemberOptionTeamCmd::kParamFieldNumber;
const int SetMemberOptionTeamCmd::kAutofollowFieldNumber;
#endif  // !_MSC_VER

SetMemberOptionTeamCmd::SetMemberOptionTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SetMemberOptionTeamCmd)
}

void SetMemberOptionTeamCmd::InitAsDefaultInstance() {
}

SetMemberOptionTeamCmd::SetMemberOptionTeamCmd(const SetMemberOptionTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SetMemberOptionTeamCmd)
}

void SetMemberOptionTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 22;
  autofollow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetMemberOptionTeamCmd::~SetMemberOptionTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SetMemberOptionTeamCmd)
  SharedDtor();
}

void SetMemberOptionTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetMemberOptionTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetMemberOptionTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetMemberOptionTeamCmd_descriptor_;
}

const SetMemberOptionTeamCmd& SetMemberOptionTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

SetMemberOptionTeamCmd* SetMemberOptionTeamCmd::default_instance_ = NULL;

SetMemberOptionTeamCmd* SetMemberOptionTeamCmd::New() const {
  return new SetMemberOptionTeamCmd;
}

void SetMemberOptionTeamCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 51;
    param_ = 22;
    autofollow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetMemberOptionTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SetMemberOptionTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_SETMEMBEROPTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_autofollow;
        break;
      }

      // optional bool autofollow = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_autofollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autofollow_)));
          set_has_autofollow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SetMemberOptionTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SetMemberOptionTeamCmd)
  return false;
#undef DO_
}

void SetMemberOptionTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SetMemberOptionTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_SETMEMBEROPTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool autofollow = 3 [default = false];
  if (has_autofollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->autofollow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SetMemberOptionTeamCmd)
}

::google::protobuf::uint8* SetMemberOptionTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SetMemberOptionTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_SETMEMBEROPTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool autofollow = 3 [default = false];
  if (has_autofollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->autofollow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SetMemberOptionTeamCmd)
  return target;
}

int SetMemberOptionTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_SETMEMBEROPTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool autofollow = 3 [default = false];
    if (has_autofollow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetMemberOptionTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetMemberOptionTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetMemberOptionTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetMemberOptionTeamCmd::MergeFrom(const SetMemberOptionTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_autofollow()) {
      set_autofollow(from.autofollow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetMemberOptionTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMemberOptionTeamCmd::CopyFrom(const SetMemberOptionTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMemberOptionTeamCmd::IsInitialized() const {

  return true;
}

void SetMemberOptionTeamCmd::Swap(SetMemberOptionTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(autofollow_, other->autofollow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetMemberOptionTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetMemberOptionTeamCmd_descriptor_;
  metadata.reflection = SetMemberOptionTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberWantedQuest::kCharidFieldNumber;
const int MemberWantedQuest::kQuestidFieldNumber;
const int MemberWantedQuest::kActionFieldNumber;
const int MemberWantedQuest::kStepFieldNumber;
const int MemberWantedQuest::kQuestdataFieldNumber;
#endif  // !_MSC_VER

MemberWantedQuest::MemberWantedQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MemberWantedQuest)
}

void MemberWantedQuest::InitAsDefaultInstance() {
  questdata_ = const_cast< ::Cmd::QuestStep*>(&::Cmd::QuestStep::default_instance());
}

MemberWantedQuest::MemberWantedQuest(const MemberWantedQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MemberWantedQuest)
}

void MemberWantedQuest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  questid_ = 0u;
  action_ = 0;
  step_ = 0u;
  questdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberWantedQuest::~MemberWantedQuest() {
  // @@protoc_insertion_point(destructor:Cmd.MemberWantedQuest)
  SharedDtor();
}

void MemberWantedQuest::SharedDtor() {
  if (this != default_instance_) {
    delete questdata_;
  }
}

void MemberWantedQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberWantedQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberWantedQuest_descriptor_;
}

const MemberWantedQuest& MemberWantedQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

MemberWantedQuest* MemberWantedQuest::default_instance_ = NULL;

MemberWantedQuest* MemberWantedQuest::New() const {
  return new MemberWantedQuest;
}

void MemberWantedQuest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemberWantedQuest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, action_);
    step_ = 0u;
    if (has_questdata()) {
      if (questdata_ != NULL) questdata_->::Cmd::QuestStep::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberWantedQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MemberWantedQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_questid;
        break;
      }

      // optional uint32 questid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional .Cmd.EQuestAction action = 3 [default = EQUESTACTION_MIN];
      case 3: {
        if (tag == 24) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQuestAction_IsValid(value)) {
            set_action(static_cast< ::Cmd::EQuestAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_step;
        break;
      }

      // optional uint32 step = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_questdata;
        break;
      }

      // optional .Cmd.QuestStep questdata = 5;
      case 5: {
        if (tag == 42) {
         parse_questdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MemberWantedQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MemberWantedQuest)
  return false;
#undef DO_
}

void MemberWantedQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MemberWantedQuest)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 questid = 2 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->questid(), output);
  }

  // optional .Cmd.EQuestAction action = 3 [default = EQUESTACTION_MIN];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // optional uint32 step = 4 [default = 0];
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->step(), output);
  }

  // optional .Cmd.QuestStep questdata = 5;
  if (has_questdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->questdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MemberWantedQuest)
}

::google::protobuf::uint8* MemberWantedQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MemberWantedQuest)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 questid = 2 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->questid(), target);
  }

  // optional .Cmd.EQuestAction action = 3 [default = EQUESTACTION_MIN];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // optional uint32 step = 4 [default = 0];
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->step(), target);
  }

  // optional .Cmd.QuestStep questdata = 5;
  if (has_questdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->questdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MemberWantedQuest)
  return target;
}

int MemberWantedQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 questid = 2 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional .Cmd.EQuestAction action = 3 [default = EQUESTACTION_MIN];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional uint32 step = 4 [default = 0];
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

    // optional .Cmd.QuestStep questdata = 5;
    if (has_questdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberWantedQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberWantedQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberWantedQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberWantedQuest::MergeFrom(const MemberWantedQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_questdata()) {
      mutable_questdata()->::Cmd::QuestStep::MergeFrom(from.questdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberWantedQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberWantedQuest::CopyFrom(const MemberWantedQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberWantedQuest::IsInitialized() const {

  return true;
}

void MemberWantedQuest::Swap(MemberWantedQuest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(questid_, other->questid_);
    std::swap(action_, other->action_);
    std::swap(step_, other->step_);
    std::swap(questdata_, other->questdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberWantedQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberWantedQuest_descriptor_;
  metadata.reflection = MemberWantedQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestWantedQuestTeamCmd::kCmdFieldNumber;
const int QuestWantedQuestTeamCmd::kParamFieldNumber;
const int QuestWantedQuestTeamCmd::kQuestsFieldNumber;
#endif  // !_MSC_VER

QuestWantedQuestTeamCmd::QuestWantedQuestTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestWantedQuestTeamCmd)
}

void QuestWantedQuestTeamCmd::InitAsDefaultInstance() {
}

QuestWantedQuestTeamCmd::QuestWantedQuestTeamCmd(const QuestWantedQuestTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestWantedQuestTeamCmd)
}

void QuestWantedQuestTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 23;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestWantedQuestTeamCmd::~QuestWantedQuestTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QuestWantedQuestTeamCmd)
  SharedDtor();
}

void QuestWantedQuestTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestWantedQuestTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestWantedQuestTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestWantedQuestTeamCmd_descriptor_;
}

const QuestWantedQuestTeamCmd& QuestWantedQuestTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

QuestWantedQuestTeamCmd* QuestWantedQuestTeamCmd::default_instance_ = NULL;

QuestWantedQuestTeamCmd* QuestWantedQuestTeamCmd::New() const {
  return new QuestWantedQuestTeamCmd;
}

void QuestWantedQuestTeamCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 51;
    param_ = 23;
  }
  quests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestWantedQuestTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestWantedQuestTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYWANTEDQUEST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_quests;
        break;
      }

      // repeated .Cmd.MemberWantedQuest quests = 3;
      case 3: {
        if (tag == 26) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_quests;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestWantedQuestTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestWantedQuestTeamCmd)
  return false;
#undef DO_
}

void QuestWantedQuestTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestWantedQuestTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYWANTEDQUEST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.MemberWantedQuest quests = 3;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->quests(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestWantedQuestTeamCmd)
}

::google::protobuf::uint8* QuestWantedQuestTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestWantedQuestTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYWANTEDQUEST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.MemberWantedQuest quests = 3;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->quests(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestWantedQuestTeamCmd)
  return target;
}

int QuestWantedQuestTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYWANTEDQUEST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.MemberWantedQuest quests = 3;
  total_size += 1 * this->quests_size();
  for (int i = 0; i < this->quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestWantedQuestTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestWantedQuestTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestWantedQuestTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestWantedQuestTeamCmd::MergeFrom(const QuestWantedQuestTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  quests_.MergeFrom(from.quests_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestWantedQuestTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestWantedQuestTeamCmd::CopyFrom(const QuestWantedQuestTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestWantedQuestTeamCmd::IsInitialized() const {

  return true;
}

void QuestWantedQuestTeamCmd::Swap(QuestWantedQuestTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    quests_.Swap(&other->quests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestWantedQuestTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestWantedQuestTeamCmd_descriptor_;
  metadata.reflection = QuestWantedQuestTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateWantedQuestTeamCmd::kCmdFieldNumber;
const int UpdateWantedQuestTeamCmd::kParamFieldNumber;
const int UpdateWantedQuestTeamCmd::kQuestFieldNumber;
#endif  // !_MSC_VER

UpdateWantedQuestTeamCmd::UpdateWantedQuestTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateWantedQuestTeamCmd)
}

void UpdateWantedQuestTeamCmd::InitAsDefaultInstance() {
  quest_ = const_cast< ::Cmd::MemberWantedQuest*>(&::Cmd::MemberWantedQuest::default_instance());
}

UpdateWantedQuestTeamCmd::UpdateWantedQuestTeamCmd(const UpdateWantedQuestTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateWantedQuestTeamCmd)
}

void UpdateWantedQuestTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 24;
  quest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateWantedQuestTeamCmd::~UpdateWantedQuestTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateWantedQuestTeamCmd)
  SharedDtor();
}

void UpdateWantedQuestTeamCmd::SharedDtor() {
  if (this != default_instance_) {
    delete quest_;
  }
}

void UpdateWantedQuestTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateWantedQuestTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateWantedQuestTeamCmd_descriptor_;
}

const UpdateWantedQuestTeamCmd& UpdateWantedQuestTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

UpdateWantedQuestTeamCmd* UpdateWantedQuestTeamCmd::default_instance_ = NULL;

UpdateWantedQuestTeamCmd* UpdateWantedQuestTeamCmd::New() const {
  return new UpdateWantedQuestTeamCmd;
}

void UpdateWantedQuestTeamCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 51;
    param_ = 24;
    if (has_quest()) {
      if (quest_ != NULL) quest_->::Cmd::MemberWantedQuest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateWantedQuestTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateWantedQuestTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_UPDATEWANTEDQUEST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_quest;
        break;
      }

      // optional .Cmd.MemberWantedQuest quest = 3;
      case 3: {
        if (tag == 26) {
         parse_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateWantedQuestTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateWantedQuestTeamCmd)
  return false;
#undef DO_
}

void UpdateWantedQuestTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateWantedQuestTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_UPDATEWANTEDQUEST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.MemberWantedQuest quest = 3;
  if (has_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->quest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateWantedQuestTeamCmd)
}

::google::protobuf::uint8* UpdateWantedQuestTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateWantedQuestTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_UPDATEWANTEDQUEST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.MemberWantedQuest quest = 3;
  if (has_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->quest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateWantedQuestTeamCmd)
  return target;
}

int UpdateWantedQuestTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_UPDATEWANTEDQUEST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.MemberWantedQuest quest = 3;
    if (has_quest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateWantedQuestTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateWantedQuestTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateWantedQuestTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateWantedQuestTeamCmd::MergeFrom(const UpdateWantedQuestTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_quest()) {
      mutable_quest()->::Cmd::MemberWantedQuest::MergeFrom(from.quest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateWantedQuestTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateWantedQuestTeamCmd::CopyFrom(const UpdateWantedQuestTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateWantedQuestTeamCmd::IsInitialized() const {

  return true;
}

void UpdateWantedQuestTeamCmd::Swap(UpdateWantedQuestTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(quest_, other->quest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateWantedQuestTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateWantedQuestTeamCmd_descriptor_;
  metadata.reflection = UpdateWantedQuestTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptHelpWantedTeamCmd::kCmdFieldNumber;
const int AcceptHelpWantedTeamCmd::kParamFieldNumber;
const int AcceptHelpWantedTeamCmd::kQuestidFieldNumber;
const int AcceptHelpWantedTeamCmd::kIsabandonFieldNumber;
#endif  // !_MSC_VER

AcceptHelpWantedTeamCmd::AcceptHelpWantedTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AcceptHelpWantedTeamCmd)
}

void AcceptHelpWantedTeamCmd::InitAsDefaultInstance() {
}

AcceptHelpWantedTeamCmd::AcceptHelpWantedTeamCmd(const AcceptHelpWantedTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AcceptHelpWantedTeamCmd)
}

void AcceptHelpWantedTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 25;
  questid_ = 0u;
  isabandon_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptHelpWantedTeamCmd::~AcceptHelpWantedTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AcceptHelpWantedTeamCmd)
  SharedDtor();
}

void AcceptHelpWantedTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AcceptHelpWantedTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptHelpWantedTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptHelpWantedTeamCmd_descriptor_;
}

const AcceptHelpWantedTeamCmd& AcceptHelpWantedTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

AcceptHelpWantedTeamCmd* AcceptHelpWantedTeamCmd::default_instance_ = NULL;

AcceptHelpWantedTeamCmd* AcceptHelpWantedTeamCmd::New() const {
  return new AcceptHelpWantedTeamCmd;
}

void AcceptHelpWantedTeamCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AcceptHelpWantedTeamCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(questid_, isabandon_);
    cmd_ = 51;
    param_ = 25;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptHelpWantedTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AcceptHelpWantedTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_ACCEPTHELPWANTED];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_questid;
        break;
      }

      // optional uint32 questid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isabandon;
        break;
      }

      // optional bool isabandon = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_isabandon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isabandon_)));
          set_has_isabandon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AcceptHelpWantedTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AcceptHelpWantedTeamCmd)
  return false;
#undef DO_
}

void AcceptHelpWantedTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AcceptHelpWantedTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_ACCEPTHELPWANTED];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 questid = 3 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->questid(), output);
  }

  // optional bool isabandon = 4 [default = false];
  if (has_isabandon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isabandon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AcceptHelpWantedTeamCmd)
}

::google::protobuf::uint8* AcceptHelpWantedTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AcceptHelpWantedTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_ACCEPTHELPWANTED];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 questid = 3 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->questid(), target);
  }

  // optional bool isabandon = 4 [default = false];
  if (has_isabandon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isabandon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AcceptHelpWantedTeamCmd)
  return target;
}

int AcceptHelpWantedTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_ACCEPTHELPWANTED];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 questid = 3 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional bool isabandon = 4 [default = false];
    if (has_isabandon()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptHelpWantedTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptHelpWantedTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptHelpWantedTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptHelpWantedTeamCmd::MergeFrom(const AcceptHelpWantedTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_isabandon()) {
      set_isabandon(from.isabandon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptHelpWantedTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptHelpWantedTeamCmd::CopyFrom(const AcceptHelpWantedTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptHelpWantedTeamCmd::IsInitialized() const {

  return true;
}

void AcceptHelpWantedTeamCmd::Swap(AcceptHelpWantedTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(questid_, other->questid_);
    std::swap(isabandon_, other->isabandon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptHelpWantedTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptHelpWantedTeamCmd_descriptor_;
  metadata.reflection = AcceptHelpWantedTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateHelpWantedTeamCmd::kCmdFieldNumber;
const int UpdateHelpWantedTeamCmd::kParamFieldNumber;
const int UpdateHelpWantedTeamCmd::kAddlistFieldNumber;
const int UpdateHelpWantedTeamCmd::kDellistFieldNumber;
#endif  // !_MSC_VER

UpdateHelpWantedTeamCmd::UpdateHelpWantedTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateHelpWantedTeamCmd)
}

void UpdateHelpWantedTeamCmd::InitAsDefaultInstance() {
}

UpdateHelpWantedTeamCmd::UpdateHelpWantedTeamCmd(const UpdateHelpWantedTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateHelpWantedTeamCmd)
}

void UpdateHelpWantedTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 26;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateHelpWantedTeamCmd::~UpdateHelpWantedTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateHelpWantedTeamCmd)
  SharedDtor();
}

void UpdateHelpWantedTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateHelpWantedTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateHelpWantedTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateHelpWantedTeamCmd_descriptor_;
}

const UpdateHelpWantedTeamCmd& UpdateHelpWantedTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

UpdateHelpWantedTeamCmd* UpdateHelpWantedTeamCmd::default_instance_ = NULL;

UpdateHelpWantedTeamCmd* UpdateHelpWantedTeamCmd::New() const {
  return new UpdateHelpWantedTeamCmd;
}

void UpdateHelpWantedTeamCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 51;
    param_ = 26;
  }
  addlist_.Clear();
  dellist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateHelpWantedTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateHelpWantedTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_UPDATEHELPWANTED];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addlist;
        break;
      }

      // repeated uint32 addlist = 3;
      case 3: {
        if (tag == 24) {
         parse_addlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_addlist())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_addlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addlist;
        if (input->ExpectTag(32)) goto parse_dellist;
        break;
      }

      // repeated uint32 dellist = 4;
      case 4: {
        if (tag == 32) {
         parse_dellist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_dellist())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dellist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dellist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateHelpWantedTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateHelpWantedTeamCmd)
  return false;
#undef DO_
}

void UpdateHelpWantedTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateHelpWantedTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_UPDATEHELPWANTED];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 addlist = 3;
  for (int i = 0; i < this->addlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->addlist(i), output);
  }

  // repeated uint32 dellist = 4;
  for (int i = 0; i < this->dellist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->dellist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateHelpWantedTeamCmd)
}

::google::protobuf::uint8* UpdateHelpWantedTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateHelpWantedTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_UPDATEHELPWANTED];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 addlist = 3;
  for (int i = 0; i < this->addlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->addlist(i), target);
  }

  // repeated uint32 dellist = 4;
  for (int i = 0; i < this->dellist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->dellist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateHelpWantedTeamCmd)
  return target;
}

int UpdateHelpWantedTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_UPDATEHELPWANTED];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 addlist = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->addlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->addlist(i));
    }
    total_size += 1 * this->addlist_size() + data_size;
  }

  // repeated uint32 dellist = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->dellist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dellist(i));
    }
    total_size += 1 * this->dellist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateHelpWantedTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateHelpWantedTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateHelpWantedTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateHelpWantedTeamCmd::MergeFrom(const UpdateHelpWantedTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  addlist_.MergeFrom(from.addlist_);
  dellist_.MergeFrom(from.dellist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateHelpWantedTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateHelpWantedTeamCmd::CopyFrom(const UpdateHelpWantedTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateHelpWantedTeamCmd::IsInitialized() const {

  return true;
}

void UpdateHelpWantedTeamCmd::Swap(UpdateHelpWantedTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    addlist_.Swap(&other->addlist_);
    dellist_.Swap(&other->dellist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateHelpWantedTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateHelpWantedTeamCmd_descriptor_;
  metadata.reflection = UpdateHelpWantedTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryHelpWantedTeamCmd::kCmdFieldNumber;
const int QueryHelpWantedTeamCmd::kParamFieldNumber;
const int QueryHelpWantedTeamCmd::kQuestidsFieldNumber;
#endif  // !_MSC_VER

QueryHelpWantedTeamCmd::QueryHelpWantedTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryHelpWantedTeamCmd)
}

void QueryHelpWantedTeamCmd::InitAsDefaultInstance() {
}

QueryHelpWantedTeamCmd::QueryHelpWantedTeamCmd(const QueryHelpWantedTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryHelpWantedTeamCmd)
}

void QueryHelpWantedTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 27;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryHelpWantedTeamCmd::~QueryHelpWantedTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryHelpWantedTeamCmd)
  SharedDtor();
}

void QueryHelpWantedTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryHelpWantedTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryHelpWantedTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryHelpWantedTeamCmd_descriptor_;
}

const QueryHelpWantedTeamCmd& QueryHelpWantedTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

QueryHelpWantedTeamCmd* QueryHelpWantedTeamCmd::default_instance_ = NULL;

QueryHelpWantedTeamCmd* QueryHelpWantedTeamCmd::New() const {
  return new QueryHelpWantedTeamCmd;
}

void QueryHelpWantedTeamCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 51;
    param_ = 27;
  }
  questids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryHelpWantedTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryHelpWantedTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYHELPWANTED];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_questids;
        break;
      }

      // repeated uint32 questids = 3;
      case 3: {
        if (tag == 24) {
         parse_questids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_questids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_questids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_questids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryHelpWantedTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryHelpWantedTeamCmd)
  return false;
#undef DO_
}

void QueryHelpWantedTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryHelpWantedTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYHELPWANTED];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 questids = 3;
  for (int i = 0; i < this->questids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->questids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryHelpWantedTeamCmd)
}

::google::protobuf::uint8* QueryHelpWantedTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryHelpWantedTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYHELPWANTED];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 questids = 3;
  for (int i = 0; i < this->questids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->questids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryHelpWantedTeamCmd)
  return target;
}

int QueryHelpWantedTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYHELPWANTED];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 questids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->questids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->questids(i));
    }
    total_size += 1 * this->questids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryHelpWantedTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryHelpWantedTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryHelpWantedTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryHelpWantedTeamCmd::MergeFrom(const QueryHelpWantedTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  questids_.MergeFrom(from.questids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryHelpWantedTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryHelpWantedTeamCmd::CopyFrom(const QueryHelpWantedTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryHelpWantedTeamCmd::IsInitialized() const {

  return true;
}

void QueryHelpWantedTeamCmd::Swap(QueryHelpWantedTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    questids_.Swap(&other->questids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryHelpWantedTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryHelpWantedTeamCmd_descriptor_;
  metadata.reflection = QueryHelpWantedTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberCat::kOwneridFieldNumber;
const int MemberCat::kIdFieldNumber;
const int MemberCat::kCatidFieldNumber;
const int MemberCat::kRelivetimeFieldNumber;
const int MemberCat::kLvFieldNumber;
const int MemberCat::kExpiretimeFieldNumber;
const int MemberCat::kNameFieldNumber;
#endif  // !_MSC_VER

MemberCat::MemberCat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MemberCat)
}

void MemberCat::InitAsDefaultInstance() {
}

MemberCat::MemberCat(const MemberCat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MemberCat)
}

void MemberCat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ownerid_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  catid_ = 0u;
  relivetime_ = 0u;
  lv_ = 0u;
  expiretime_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberCat::~MemberCat() {
  // @@protoc_insertion_point(destructor:Cmd.MemberCat)
  SharedDtor();
}

void MemberCat::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MemberCat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberCat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberCat_descriptor_;
}

const MemberCat& MemberCat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

MemberCat* MemberCat::default_instance_ = NULL;

MemberCat* MemberCat::New() const {
  return new MemberCat;
}

void MemberCat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemberCat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(ownerid_, expiretime_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberCat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MemberCat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ownerid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_catid;
        break;
      }

      // optional uint32 catid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_catid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catid_)));
          set_has_catid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_relivetime;
        break;
      }

      // optional uint32 relivetime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_relivetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relivetime_)));
          set_has_relivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_expiretime;
        break;
      }

      // optional uint32 expiretime = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_expiretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MemberCat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MemberCat)
  return false;
#undef DO_
}

void MemberCat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MemberCat)
  // optional uint64 ownerid = 1 [default = 0];
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ownerid(), output);
  }

  // optional uint64 id = 2 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint32 catid = 3 [default = 0];
  if (has_catid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->catid(), output);
  }

  // optional uint32 relivetime = 4 [default = 0];
  if (has_relivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->relivetime(), output);
  }

  // optional uint32 lv = 5 [default = 0];
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }

  // optional uint32 expiretime = 6 [default = 0];
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->expiretime(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MemberCat)
}

::google::protobuf::uint8* MemberCat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MemberCat)
  // optional uint64 ownerid = 1 [default = 0];
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ownerid(), target);
  }

  // optional uint64 id = 2 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint32 catid = 3 [default = 0];
  if (has_catid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->catid(), target);
  }

  // optional uint32 relivetime = 4 [default = 0];
  if (has_relivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->relivetime(), target);
  }

  // optional uint32 lv = 5 [default = 0];
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lv(), target);
  }

  // optional uint32 expiretime = 6 [default = 0];
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->expiretime(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MemberCat)
  return target;
}

int MemberCat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ownerid = 1 [default = 0];
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

    // optional uint64 id = 2 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 catid = 3 [default = 0];
    if (has_catid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->catid());
    }

    // optional uint32 relivetime = 4 [default = 0];
    if (has_relivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relivetime());
    }

    // optional uint32 lv = 5 [default = 0];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 expiretime = 6 [default = 0];
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiretime());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberCat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberCat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberCat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberCat::MergeFrom(const MemberCat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_catid()) {
      set_catid(from.catid());
    }
    if (from.has_relivetime()) {
      set_relivetime(from.relivetime());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberCat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberCat::CopyFrom(const MemberCat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberCat::IsInitialized() const {

  return true;
}

void MemberCat::Swap(MemberCat* other) {
  if (other != this) {
    std::swap(ownerid_, other->ownerid_);
    std::swap(id_, other->id_);
    std::swap(catid_, other->catid_);
    std::swap(relivetime_, other->relivetime_);
    std::swap(lv_, other->lv_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberCat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberCat_descriptor_;
  metadata.reflection = MemberCat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryMemberCatTeamCmd::kCmdFieldNumber;
const int QueryMemberCatTeamCmd::kParamFieldNumber;
#endif  // !_MSC_VER

QueryMemberCatTeamCmd::QueryMemberCatTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryMemberCatTeamCmd)
}

void QueryMemberCatTeamCmd::InitAsDefaultInstance() {
}

QueryMemberCatTeamCmd::QueryMemberCatTeamCmd(const QueryMemberCatTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryMemberCatTeamCmd)
}

void QueryMemberCatTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 28;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryMemberCatTeamCmd::~QueryMemberCatTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryMemberCatTeamCmd)
  SharedDtor();
}

void QueryMemberCatTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryMemberCatTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMemberCatTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryMemberCatTeamCmd_descriptor_;
}

const QueryMemberCatTeamCmd& QueryMemberCatTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

QueryMemberCatTeamCmd* QueryMemberCatTeamCmd::default_instance_ = NULL;

QueryMemberCatTeamCmd* QueryMemberCatTeamCmd::New() const {
  return new QueryMemberCatTeamCmd;
}

void QueryMemberCatTeamCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 51;
    param_ = 28;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryMemberCatTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryMemberCatTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYMEMBERCAT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryMemberCatTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryMemberCatTeamCmd)
  return false;
#undef DO_
}

void QueryMemberCatTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryMemberCatTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYMEMBERCAT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryMemberCatTeamCmd)
}

::google::protobuf::uint8* QueryMemberCatTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryMemberCatTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYMEMBERCAT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryMemberCatTeamCmd)
  return target;
}

int QueryMemberCatTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_QUERYMEMBERCAT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMemberCatTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryMemberCatTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryMemberCatTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryMemberCatTeamCmd::MergeFrom(const QueryMemberCatTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryMemberCatTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMemberCatTeamCmd::CopyFrom(const QueryMemberCatTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMemberCatTeamCmd::IsInitialized() const {

  return true;
}

void QueryMemberCatTeamCmd::Swap(QueryMemberCatTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryMemberCatTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryMemberCatTeamCmd_descriptor_;
  metadata.reflection = QueryMemberCatTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberCatUpdateTeam::kCmdFieldNumber;
const int MemberCatUpdateTeam::kParamFieldNumber;
const int MemberCatUpdateTeam::kUpdatesFieldNumber;
const int MemberCatUpdateTeam::kDelsFieldNumber;
#endif  // !_MSC_VER

MemberCatUpdateTeam::MemberCatUpdateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MemberCatUpdateTeam)
}

void MemberCatUpdateTeam::InitAsDefaultInstance() {
}

MemberCatUpdateTeam::MemberCatUpdateTeam(const MemberCatUpdateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MemberCatUpdateTeam)
}

void MemberCatUpdateTeam::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 51;
  param_ = 29;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberCatUpdateTeam::~MemberCatUpdateTeam() {
  // @@protoc_insertion_point(destructor:Cmd.MemberCatUpdateTeam)
  SharedDtor();
}

void MemberCatUpdateTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemberCatUpdateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberCatUpdateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberCatUpdateTeam_descriptor_;
}

const MemberCatUpdateTeam& MemberCatUpdateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionTeam_2eproto();
  return *default_instance_;
}

MemberCatUpdateTeam* MemberCatUpdateTeam::default_instance_ = NULL;

MemberCatUpdateTeam* MemberCatUpdateTeam::New() const {
  return new MemberCatUpdateTeam;
}

void MemberCatUpdateTeam::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 51;
    param_ = 29;
  }
  updates_.Clear();
  dels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberCatUpdateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MemberCatUpdateTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERCAT_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        break;
      }

      // repeated .Cmd.MemberCat updates = 3;
      case 3: {
        if (tag == 26) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        if (input->ExpectTag(34)) goto parse_dels;
        break;
      }

      // repeated .Cmd.MemberCat dels = 4;
      case 4: {
        if (tag == 34) {
         parse_dels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MemberCatUpdateTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MemberCatUpdateTeam)
  return false;
#undef DO_
}

void MemberCatUpdateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MemberCatUpdateTeam)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERCAT_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.MemberCat updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updates(i), output);
  }

  // repeated .Cmd.MemberCat dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MemberCatUpdateTeam)
}

::google::protobuf::uint8* MemberCatUpdateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MemberCatUpdateTeam)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERCAT_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.MemberCat updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updates(i), target);
  }

  // repeated .Cmd.MemberCat dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MemberCatUpdateTeam)
  return target;
}

int MemberCatUpdateTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamParam param = 2 [default = TEAMPARAM_MEMBERCAT_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.MemberCat updates = 3;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated .Cmd.MemberCat dels = 4;
  total_size += 1 * this->dels_size();
  for (int i = 0; i < this->dels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberCatUpdateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberCatUpdateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberCatUpdateTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberCatUpdateTeam::MergeFrom(const MemberCatUpdateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  dels_.MergeFrom(from.dels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberCatUpdateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberCatUpdateTeam::CopyFrom(const MemberCatUpdateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberCatUpdateTeam::IsInitialized() const {

  return true;
}

void MemberCatUpdateTeam::Swap(MemberCatUpdateTeam* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    updates_.Swap(&other->updates_);
    dels_.Swap(&other->dels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberCatUpdateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberCatUpdateTeam_descriptor_;
  metadata.reflection = MemberCatUpdateTeam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
