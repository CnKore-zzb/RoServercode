// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeamRaidCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TeamRaidCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* TeamRaidInviteCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRaidInviteCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRaidReplyCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRaidReplyCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRaidEnterCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRaidEnterCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRaidAltmanShowCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRaidAltmanShowCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TeamRaidParam_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TeamRaidCmd_2eproto() {
  protobuf_AddDesc_TeamRaidCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TeamRaidCmd.proto");
  GOOGLE_CHECK(file != NULL);
  TeamRaidInviteCmd_descriptor_ = file->message_type(0);
  static const int TeamRaidInviteCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidInviteCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidInviteCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidInviteCmd, iscancel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidInviteCmd, raid_type_),
  };
  TeamRaidInviteCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRaidInviteCmd_descriptor_,
      TeamRaidInviteCmd::default_instance_,
      TeamRaidInviteCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidInviteCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidInviteCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRaidInviteCmd));
  TeamRaidReplyCmd_descriptor_ = file->message_type(1);
  static const int TeamRaidReplyCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidReplyCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidReplyCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidReplyCmd, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidReplyCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidReplyCmd, raid_type_),
  };
  TeamRaidReplyCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRaidReplyCmd_descriptor_,
      TeamRaidReplyCmd::default_instance_,
      TeamRaidReplyCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidReplyCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidReplyCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRaidReplyCmd));
  TeamRaidEnterCmd_descriptor_ = file->message_type(2);
  static const int TeamRaidEnterCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidEnterCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidEnterCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidEnterCmd, raid_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidEnterCmd, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidEnterCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidEnterCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidEnterCmd, sign_),
  };
  TeamRaidEnterCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRaidEnterCmd_descriptor_,
      TeamRaidEnterCmd::default_instance_,
      TeamRaidEnterCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidEnterCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidEnterCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRaidEnterCmd));
  TeamRaidAltmanShowCmd_descriptor_ = file->message_type(3);
  static const int TeamRaidAltmanShowCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidAltmanShowCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidAltmanShowCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidAltmanShowCmd, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidAltmanShowCmd, killcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidAltmanShowCmd, selfkill_),
  };
  TeamRaidAltmanShowCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRaidAltmanShowCmd_descriptor_,
      TeamRaidAltmanShowCmd::default_instance_,
      TeamRaidAltmanShowCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidAltmanShowCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidAltmanShowCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRaidAltmanShowCmd));
  TeamRaidParam_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TeamRaidCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRaidInviteCmd_descriptor_, &TeamRaidInviteCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRaidReplyCmd_descriptor_, &TeamRaidReplyCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRaidEnterCmd_descriptor_, &TeamRaidEnterCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRaidAltmanShowCmd_descriptor_, &TeamRaidAltmanShowCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TeamRaidCmd_2eproto() {
  delete TeamRaidInviteCmd::default_instance_;
  delete TeamRaidInviteCmd_reflection_;
  delete TeamRaidReplyCmd::default_instance_;
  delete TeamRaidReplyCmd_reflection_;
  delete TeamRaidEnterCmd::default_instance_;
  delete TeamRaidEnterCmd_reflection_;
  delete TeamRaidAltmanShowCmd::default_instance_;
  delete TeamRaidAltmanShowCmd_reflection_;
}

void protobuf_AddDesc_TeamRaidCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_FuBenCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021TeamRaidCmd.proto\022\003Cmd\032\nxCmd.proto\032\016Fu"
    "BenCmd.proto\"\306\001\n\021TeamRaidInviteCmd\022-\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\022TEAM_RAID_PROTOCM"
    "D\0227\n\005param\030\002 \001(\0162\022.Cmd.TeamRaidParam:\024TE"
    "AMRAIDPARAM_INVITE\022\027\n\010iscancel\030\003 \001(\010:\005fa"
    "lse\0220\n\traid_type\030\004 \001(\0162\016.Cmd.ERaidType:\r"
    "ERAIDTYPE_MIN\"\324\001\n\020TeamRaidReplyCmd\022-\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\022TEAM_RAID_PROTOCM"
    "D\0226\n\005param\030\002 \001(\0162\022.Cmd.TeamRaidParam:\023TE"
    "AMRAIDPARAM_REPLY\022\024\n\005reply\030\003 \001(\010:\005false\022"
    "\021\n\006charid\030\004 \001(\004:\0010\0220\n\traid_type\030\005 \001(\0162\016."
    "Cmd.ERaidType:\rERAIDTYPE_MIN\"\360\001\n\020TeamRai"
    "dEnterCmd\022-\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\022TE"
    "AM_RAID_PROTOCMD\0226\n\005param\030\002 \001(\0162\022.Cmd.Te"
    "amRaidParam:\023TEAMRAIDPARAM_ENTER\0220\n\traid"
    "_type\030\003 \001(\0162\016.Cmd.ERaidType:\rERAIDTYPE_M"
    "IN\022\021\n\006userid\030\004 \001(\004:\0010\022\021\n\006zoneid\030\005 \001(\r:\0010"
    "\022\017\n\004time\030\006 \001(\r:\0010\022\014\n\004sign\030\007 \001(\t\"\303\001\n\025Team"
    "RaidAltmanShowCmd\022-\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\022TEAM_RAID_PROTOCMD\022;\n\005param\030\002 \001(\0162"
    "\022.Cmd.TeamRaidParam:\030TEAMRAIDPARAM_ALTMA"
    "NSHOW\022\023\n\010lefttime\030\003 \001(\r:\0010\022\024\n\tkillcount\030"
    "\004 \001(\r:\0010\022\023\n\010selfkill\030\005 \001(\r:\0010*y\n\rTeamRai"
    "dParam\022\030\n\024TEAMRAIDPARAM_INVITE\020\001\022\027\n\023TEAM"
    "RAIDPARAM_REPLY\020\002\022\027\n\023TEAMRAIDPARAM_ENTER"
    "\020\003\022\034\n\030TEAMRAIDPARAM_ALTMANSHOW\020\004", 1032);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TeamRaidCmd.proto", &protobuf_RegisterTypes);
  TeamRaidInviteCmd::default_instance_ = new TeamRaidInviteCmd();
  TeamRaidReplyCmd::default_instance_ = new TeamRaidReplyCmd();
  TeamRaidEnterCmd::default_instance_ = new TeamRaidEnterCmd();
  TeamRaidAltmanShowCmd::default_instance_ = new TeamRaidAltmanShowCmd();
  TeamRaidInviteCmd::default_instance_->InitAsDefaultInstance();
  TeamRaidReplyCmd::default_instance_->InitAsDefaultInstance();
  TeamRaidEnterCmd::default_instance_->InitAsDefaultInstance();
  TeamRaidAltmanShowCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TeamRaidCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TeamRaidCmd_2eproto {
  StaticDescriptorInitializer_TeamRaidCmd_2eproto() {
    protobuf_AddDesc_TeamRaidCmd_2eproto();
  }
} static_descriptor_initializer_TeamRaidCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* TeamRaidParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRaidParam_descriptor_;
}
bool TeamRaidParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRaidInviteCmd::kCmdFieldNumber;
const int TeamRaidInviteCmd::kParamFieldNumber;
const int TeamRaidInviteCmd::kIscancelFieldNumber;
const int TeamRaidInviteCmd::kRaidTypeFieldNumber;
#endif  // !_MSC_VER

TeamRaidInviteCmd::TeamRaidInviteCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamRaidInviteCmd)
}

void TeamRaidInviteCmd::InitAsDefaultInstance() {
}

TeamRaidInviteCmd::TeamRaidInviteCmd(const TeamRaidInviteCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamRaidInviteCmd)
}

void TeamRaidInviteCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 67;
  param_ = 1;
  iscancel_ = false;
  raid_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRaidInviteCmd::~TeamRaidInviteCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamRaidInviteCmd)
  SharedDtor();
}

void TeamRaidInviteCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRaidInviteCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRaidInviteCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRaidInviteCmd_descriptor_;
}

const TeamRaidInviteCmd& TeamRaidInviteCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRaidCmd_2eproto();
  return *default_instance_;
}

TeamRaidInviteCmd* TeamRaidInviteCmd::default_instance_ = NULL;

TeamRaidInviteCmd* TeamRaidInviteCmd::New() const {
  return new TeamRaidInviteCmd;
}

void TeamRaidInviteCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamRaidInviteCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iscancel_, raid_type_);
    cmd_ = 67;
    param_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRaidInviteCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamRaidInviteCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_INVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamRaidParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamRaidParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iscancel;
        break;
      }

      // optional bool iscancel = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_iscancel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscancel_)));
          set_has_iscancel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_raid_type;
        break;
      }

      // optional .Cmd.ERaidType raid_type = 4 [default = ERAIDTYPE_MIN];
      case 4: {
        if (tag == 32) {
         parse_raid_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERaidType_IsValid(value)) {
            set_raid_type(static_cast< ::Cmd::ERaidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamRaidInviteCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamRaidInviteCmd)
  return false;
#undef DO_
}

void TeamRaidInviteCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamRaidInviteCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_INVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool iscancel = 3 [default = false];
  if (has_iscancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->iscancel(), output);
  }

  // optional .Cmd.ERaidType raid_type = 4 [default = ERAIDTYPE_MIN];
  if (has_raid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->raid_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamRaidInviteCmd)
}

::google::protobuf::uint8* TeamRaidInviteCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamRaidInviteCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_INVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool iscancel = 3 [default = false];
  if (has_iscancel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->iscancel(), target);
  }

  // optional .Cmd.ERaidType raid_type = 4 [default = ERAIDTYPE_MIN];
  if (has_raid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->raid_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamRaidInviteCmd)
  return target;
}

int TeamRaidInviteCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_INVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool iscancel = 3 [default = false];
    if (has_iscancel()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.ERaidType raid_type = 4 [default = ERAIDTYPE_MIN];
    if (has_raid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->raid_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRaidInviteCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRaidInviteCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRaidInviteCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRaidInviteCmd::MergeFrom(const TeamRaidInviteCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_iscancel()) {
      set_iscancel(from.iscancel());
    }
    if (from.has_raid_type()) {
      set_raid_type(from.raid_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRaidInviteCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRaidInviteCmd::CopyFrom(const TeamRaidInviteCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRaidInviteCmd::IsInitialized() const {

  return true;
}

void TeamRaidInviteCmd::Swap(TeamRaidInviteCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(iscancel_, other->iscancel_);
    std::swap(raid_type_, other->raid_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRaidInviteCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRaidInviteCmd_descriptor_;
  metadata.reflection = TeamRaidInviteCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRaidReplyCmd::kCmdFieldNumber;
const int TeamRaidReplyCmd::kParamFieldNumber;
const int TeamRaidReplyCmd::kReplyFieldNumber;
const int TeamRaidReplyCmd::kCharidFieldNumber;
const int TeamRaidReplyCmd::kRaidTypeFieldNumber;
#endif  // !_MSC_VER

TeamRaidReplyCmd::TeamRaidReplyCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamRaidReplyCmd)
}

void TeamRaidReplyCmd::InitAsDefaultInstance() {
}

TeamRaidReplyCmd::TeamRaidReplyCmd(const TeamRaidReplyCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamRaidReplyCmd)
}

void TeamRaidReplyCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 67;
  param_ = 2;
  reply_ = false;
  charid_ = GOOGLE_ULONGLONG(0);
  raid_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRaidReplyCmd::~TeamRaidReplyCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamRaidReplyCmd)
  SharedDtor();
}

void TeamRaidReplyCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRaidReplyCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRaidReplyCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRaidReplyCmd_descriptor_;
}

const TeamRaidReplyCmd& TeamRaidReplyCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRaidCmd_2eproto();
  return *default_instance_;
}

TeamRaidReplyCmd* TeamRaidReplyCmd::default_instance_ = NULL;

TeamRaidReplyCmd* TeamRaidReplyCmd::New() const {
  return new TeamRaidReplyCmd;
}

void TeamRaidReplyCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamRaidReplyCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, raid_type_);
    cmd_ = 67;
    param_ = 2;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRaidReplyCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamRaidReplyCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_REPLY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamRaidParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamRaidParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reply;
        break;
      }

      // optional bool reply = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_reply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_raid_type;
        break;
      }

      // optional .Cmd.ERaidType raid_type = 5 [default = ERAIDTYPE_MIN];
      case 5: {
        if (tag == 40) {
         parse_raid_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERaidType_IsValid(value)) {
            set_raid_type(static_cast< ::Cmd::ERaidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamRaidReplyCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamRaidReplyCmd)
  return false;
#undef DO_
}

void TeamRaidReplyCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamRaidReplyCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_REPLY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool reply = 3 [default = false];
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reply(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional .Cmd.ERaidType raid_type = 5 [default = ERAIDTYPE_MIN];
  if (has_raid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->raid_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamRaidReplyCmd)
}

::google::protobuf::uint8* TeamRaidReplyCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamRaidReplyCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_REPLY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool reply = 3 [default = false];
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reply(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional .Cmd.ERaidType raid_type = 5 [default = ERAIDTYPE_MIN];
  if (has_raid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->raid_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamRaidReplyCmd)
  return target;
}

int TeamRaidReplyCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_REPLY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool reply = 3 [default = false];
    if (has_reply()) {
      total_size += 1 + 1;
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.ERaidType raid_type = 5 [default = ERAIDTYPE_MIN];
    if (has_raid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->raid_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRaidReplyCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRaidReplyCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRaidReplyCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRaidReplyCmd::MergeFrom(const TeamRaidReplyCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_raid_type()) {
      set_raid_type(from.raid_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRaidReplyCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRaidReplyCmd::CopyFrom(const TeamRaidReplyCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRaidReplyCmd::IsInitialized() const {

  return true;
}

void TeamRaidReplyCmd::Swap(TeamRaidReplyCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(reply_, other->reply_);
    std::swap(charid_, other->charid_);
    std::swap(raid_type_, other->raid_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRaidReplyCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRaidReplyCmd_descriptor_;
  metadata.reflection = TeamRaidReplyCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRaidEnterCmd::kCmdFieldNumber;
const int TeamRaidEnterCmd::kParamFieldNumber;
const int TeamRaidEnterCmd::kRaidTypeFieldNumber;
const int TeamRaidEnterCmd::kUseridFieldNumber;
const int TeamRaidEnterCmd::kZoneidFieldNumber;
const int TeamRaidEnterCmd::kTimeFieldNumber;
const int TeamRaidEnterCmd::kSignFieldNumber;
#endif  // !_MSC_VER

TeamRaidEnterCmd::TeamRaidEnterCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamRaidEnterCmd)
}

void TeamRaidEnterCmd::InitAsDefaultInstance() {
}

TeamRaidEnterCmd::TeamRaidEnterCmd(const TeamRaidEnterCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamRaidEnterCmd)
}

void TeamRaidEnterCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 67;
  param_ = 3;
  raid_type_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  time_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRaidEnterCmd::~TeamRaidEnterCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamRaidEnterCmd)
  SharedDtor();
}

void TeamRaidEnterCmd::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void TeamRaidEnterCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRaidEnterCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRaidEnterCmd_descriptor_;
}

const TeamRaidEnterCmd& TeamRaidEnterCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRaidCmd_2eproto();
  return *default_instance_;
}

TeamRaidEnterCmd* TeamRaidEnterCmd::default_instance_ = NULL;

TeamRaidEnterCmd* TeamRaidEnterCmd::New() const {
  return new TeamRaidEnterCmd;
}

void TeamRaidEnterCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamRaidEnterCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(userid_, zoneid_);
    cmd_ = 67;
    param_ = 3;
    time_ = 0u;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRaidEnterCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamRaidEnterCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_ENTER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamRaidParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamRaidParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_raid_type;
        break;
      }

      // optional .Cmd.ERaidType raid_type = 3 [default = ERAIDTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_raid_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERaidType_IsValid(value)) {
            set_raid_type(static_cast< ::Cmd::ERaidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sign;
        break;
      }

      // optional string sign = 7;
      case 7: {
        if (tag == 58) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamRaidEnterCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamRaidEnterCmd)
  return false;
#undef DO_
}

void TeamRaidEnterCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamRaidEnterCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_ENTER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ERaidType raid_type = 3 [default = ERAIDTYPE_MIN];
  if (has_raid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->raid_type(), output);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->userid(), output);
  }

  // optional uint32 zoneid = 5 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // optional uint32 time = 6 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional string sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamRaidEnterCmd)
}

::google::protobuf::uint8* TeamRaidEnterCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamRaidEnterCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_ENTER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ERaidType raid_type = 3 [default = ERAIDTYPE_MIN];
  if (has_raid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->raid_type(), target);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->userid(), target);
  }

  // optional uint32 zoneid = 5 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // optional uint32 time = 6 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional string sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamRaidEnterCmd)
  return target;
}

int TeamRaidEnterCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_ENTER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ERaidType raid_type = 3 [default = ERAIDTYPE_MIN];
    if (has_raid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->raid_type());
    }

    // optional uint64 userid = 4 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional uint32 zoneid = 5 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 time = 6 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string sign = 7;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRaidEnterCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRaidEnterCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRaidEnterCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRaidEnterCmd::MergeFrom(const TeamRaidEnterCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_raid_type()) {
      set_raid_type(from.raid_type());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRaidEnterCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRaidEnterCmd::CopyFrom(const TeamRaidEnterCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRaidEnterCmd::IsInitialized() const {

  return true;
}

void TeamRaidEnterCmd::Swap(TeamRaidEnterCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(raid_type_, other->raid_type_);
    std::swap(userid_, other->userid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(time_, other->time_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRaidEnterCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRaidEnterCmd_descriptor_;
  metadata.reflection = TeamRaidEnterCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRaidAltmanShowCmd::kCmdFieldNumber;
const int TeamRaidAltmanShowCmd::kParamFieldNumber;
const int TeamRaidAltmanShowCmd::kLefttimeFieldNumber;
const int TeamRaidAltmanShowCmd::kKillcountFieldNumber;
const int TeamRaidAltmanShowCmd::kSelfkillFieldNumber;
#endif  // !_MSC_VER

TeamRaidAltmanShowCmd::TeamRaidAltmanShowCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamRaidAltmanShowCmd)
}

void TeamRaidAltmanShowCmd::InitAsDefaultInstance() {
}

TeamRaidAltmanShowCmd::TeamRaidAltmanShowCmd(const TeamRaidAltmanShowCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamRaidAltmanShowCmd)
}

void TeamRaidAltmanShowCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 67;
  param_ = 4;
  lefttime_ = 0u;
  killcount_ = 0u;
  selfkill_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRaidAltmanShowCmd::~TeamRaidAltmanShowCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamRaidAltmanShowCmd)
  SharedDtor();
}

void TeamRaidAltmanShowCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRaidAltmanShowCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRaidAltmanShowCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRaidAltmanShowCmd_descriptor_;
}

const TeamRaidAltmanShowCmd& TeamRaidAltmanShowCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRaidCmd_2eproto();
  return *default_instance_;
}

TeamRaidAltmanShowCmd* TeamRaidAltmanShowCmd::default_instance_ = NULL;

TeamRaidAltmanShowCmd* TeamRaidAltmanShowCmd::New() const {
  return new TeamRaidAltmanShowCmd;
}

void TeamRaidAltmanShowCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamRaidAltmanShowCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(lefttime_, selfkill_);
    cmd_ = 67;
    param_ = 4;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRaidAltmanShowCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamRaidAltmanShowCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_ALTMANSHOW];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TeamRaidParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TeamRaidParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lefttime;
        break;
      }

      // optional uint32 lefttime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_lefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_killcount;
        break;
      }

      // optional uint32 killcount = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_killcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_selfkill;
        break;
      }

      // optional uint32 selfkill = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_selfkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfkill_)));
          set_has_selfkill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamRaidAltmanShowCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamRaidAltmanShowCmd)
  return false;
#undef DO_
}

void TeamRaidAltmanShowCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamRaidAltmanShowCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_ALTMANSHOW];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 lefttime = 3 [default = 0];
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lefttime(), output);
  }

  // optional uint32 killcount = 4 [default = 0];
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->killcount(), output);
  }

  // optional uint32 selfkill = 5 [default = 0];
  if (has_selfkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->selfkill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamRaidAltmanShowCmd)
}

::google::protobuf::uint8* TeamRaidAltmanShowCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamRaidAltmanShowCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_ALTMANSHOW];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 lefttime = 3 [default = 0];
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lefttime(), target);
  }

  // optional uint32 killcount = 4 [default = 0];
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->killcount(), target);
  }

  // optional uint32 selfkill = 5 [default = 0];
  if (has_selfkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->selfkill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamRaidAltmanShowCmd)
  return target;
}

int TeamRaidAltmanShowCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_ALTMANSHOW];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 lefttime = 3 [default = 0];
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lefttime());
    }

    // optional uint32 killcount = 4 [default = 0];
    if (has_killcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcount());
    }

    // optional uint32 selfkill = 5 [default = 0];
    if (has_selfkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfkill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRaidAltmanShowCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRaidAltmanShowCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRaidAltmanShowCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRaidAltmanShowCmd::MergeFrom(const TeamRaidAltmanShowCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
    if (from.has_selfkill()) {
      set_selfkill(from.selfkill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRaidAltmanShowCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRaidAltmanShowCmd::CopyFrom(const TeamRaidAltmanShowCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRaidAltmanShowCmd::IsInitialized() const {

  return true;
}

void TeamRaidAltmanShowCmd::Swap(TeamRaidAltmanShowCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(killcount_, other->killcount_);
    std::swap(selfkill_, other->selfkill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRaidAltmanShowCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRaidAltmanShowCmd_descriptor_;
  metadata.reflection = TeamRaidAltmanShowCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
