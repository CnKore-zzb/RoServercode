// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeamRaidCmd.proto

#ifndef PROTOBUF_TeamRaidCmd_2eproto__INCLUDED
#define PROTOBUF_TeamRaidCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "FuBenCmd.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TeamRaidCmd_2eproto();
void protobuf_AssignDesc_TeamRaidCmd_2eproto();
void protobuf_ShutdownFile_TeamRaidCmd_2eproto();

class TeamRaidInviteCmd;
class TeamRaidReplyCmd;
class TeamRaidEnterCmd;
class TeamRaidAltmanShowCmd;

enum TeamRaidParam {
  TEAMRAIDPARAM_INVITE = 1,
  TEAMRAIDPARAM_REPLY = 2,
  TEAMRAIDPARAM_ENTER = 3,
  TEAMRAIDPARAM_ALTMANSHOW = 4
};
bool TeamRaidParam_IsValid(int value);
const TeamRaidParam TeamRaidParam_MIN = TEAMRAIDPARAM_INVITE;
const TeamRaidParam TeamRaidParam_MAX = TEAMRAIDPARAM_ALTMANSHOW;
const int TeamRaidParam_ARRAYSIZE = TeamRaidParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* TeamRaidParam_descriptor();
inline const ::std::string& TeamRaidParam_Name(TeamRaidParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    TeamRaidParam_descriptor(), value);
}
inline bool TeamRaidParam_Parse(
    const ::std::string& name, TeamRaidParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TeamRaidParam>(
    TeamRaidParam_descriptor(), name, value);
}
// ===================================================================

class TeamRaidInviteCmd : public ::google::protobuf::Message {
 public:
  TeamRaidInviteCmd();
  virtual ~TeamRaidInviteCmd();

  TeamRaidInviteCmd(const TeamRaidInviteCmd& from);

  inline TeamRaidInviteCmd& operator=(const TeamRaidInviteCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRaidInviteCmd& default_instance();

  void Swap(TeamRaidInviteCmd* other);

  // implements Message ----------------------------------------------

  TeamRaidInviteCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamRaidInviteCmd& from);
  void MergeFrom(const TeamRaidInviteCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_INVITE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::TeamRaidParam param() const;
  inline void set_param(::Cmd::TeamRaidParam value);

  // optional bool iscancel = 3 [default = false];
  inline bool has_iscancel() const;
  inline void clear_iscancel();
  static const int kIscancelFieldNumber = 3;
  inline bool iscancel() const;
  inline void set_iscancel(bool value);

  // optional .Cmd.ERaidType raid_type = 4 [default = ERAIDTYPE_MIN];
  inline bool has_raid_type() const;
  inline void clear_raid_type();
  static const int kRaidTypeFieldNumber = 4;
  inline ::Cmd::ERaidType raid_type() const;
  inline void set_raid_type(::Cmd::ERaidType value);

  // @@protoc_insertion_point(class_scope:Cmd.TeamRaidInviteCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_iscancel();
  inline void clear_has_iscancel();
  inline void set_has_raid_type();
  inline void clear_has_raid_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  bool iscancel_;
  int raid_type_;
  friend void  protobuf_AddDesc_TeamRaidCmd_2eproto();
  friend void protobuf_AssignDesc_TeamRaidCmd_2eproto();
  friend void protobuf_ShutdownFile_TeamRaidCmd_2eproto();

  void InitAsDefaultInstance();
  static TeamRaidInviteCmd* default_instance_;
};
// -------------------------------------------------------------------

class TeamRaidReplyCmd : public ::google::protobuf::Message {
 public:
  TeamRaidReplyCmd();
  virtual ~TeamRaidReplyCmd();

  TeamRaidReplyCmd(const TeamRaidReplyCmd& from);

  inline TeamRaidReplyCmd& operator=(const TeamRaidReplyCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRaidReplyCmd& default_instance();

  void Swap(TeamRaidReplyCmd* other);

  // implements Message ----------------------------------------------

  TeamRaidReplyCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamRaidReplyCmd& from);
  void MergeFrom(const TeamRaidReplyCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_REPLY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::TeamRaidParam param() const;
  inline void set_param(::Cmd::TeamRaidParam value);

  // optional bool reply = 3 [default = false];
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 3;
  inline bool reply() const;
  inline void set_reply(bool value);

  // optional uint64 charid = 4 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.ERaidType raid_type = 5 [default = ERAIDTYPE_MIN];
  inline bool has_raid_type() const;
  inline void clear_raid_type();
  static const int kRaidTypeFieldNumber = 5;
  inline ::Cmd::ERaidType raid_type() const;
  inline void set_raid_type(::Cmd::ERaidType value);

  // @@protoc_insertion_point(class_scope:Cmd.TeamRaidReplyCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_reply();
  inline void clear_has_reply();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_raid_type();
  inline void clear_has_raid_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  bool reply_;
  int raid_type_;
  friend void  protobuf_AddDesc_TeamRaidCmd_2eproto();
  friend void protobuf_AssignDesc_TeamRaidCmd_2eproto();
  friend void protobuf_ShutdownFile_TeamRaidCmd_2eproto();

  void InitAsDefaultInstance();
  static TeamRaidReplyCmd* default_instance_;
};
// -------------------------------------------------------------------

class TeamRaidEnterCmd : public ::google::protobuf::Message {
 public:
  TeamRaidEnterCmd();
  virtual ~TeamRaidEnterCmd();

  TeamRaidEnterCmd(const TeamRaidEnterCmd& from);

  inline TeamRaidEnterCmd& operator=(const TeamRaidEnterCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRaidEnterCmd& default_instance();

  void Swap(TeamRaidEnterCmd* other);

  // implements Message ----------------------------------------------

  TeamRaidEnterCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamRaidEnterCmd& from);
  void MergeFrom(const TeamRaidEnterCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_ENTER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::TeamRaidParam param() const;
  inline void set_param(::Cmd::TeamRaidParam value);

  // optional .Cmd.ERaidType raid_type = 3 [default = ERAIDTYPE_MIN];
  inline bool has_raid_type() const;
  inline void clear_raid_type();
  static const int kRaidTypeFieldNumber = 3;
  inline ::Cmd::ERaidType raid_type() const;
  inline void set_raid_type(::Cmd::ERaidType value);

  // optional uint64 userid = 4 [default = 0];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 4;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 5 [default = 0];
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 5;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 time = 6 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string sign = 7;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 7;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:Cmd.TeamRaidEnterCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_raid_type();
  inline void clear_has_raid_type();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 userid_;
  int raid_type_;
  ::google::protobuf::uint32 zoneid_;
  ::std::string* sign_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_TeamRaidCmd_2eproto();
  friend void protobuf_AssignDesc_TeamRaidCmd_2eproto();
  friend void protobuf_ShutdownFile_TeamRaidCmd_2eproto();

  void InitAsDefaultInstance();
  static TeamRaidEnterCmd* default_instance_;
};
// -------------------------------------------------------------------

class TeamRaidAltmanShowCmd : public ::google::protobuf::Message {
 public:
  TeamRaidAltmanShowCmd();
  virtual ~TeamRaidAltmanShowCmd();

  TeamRaidAltmanShowCmd(const TeamRaidAltmanShowCmd& from);

  inline TeamRaidAltmanShowCmd& operator=(const TeamRaidAltmanShowCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRaidAltmanShowCmd& default_instance();

  void Swap(TeamRaidAltmanShowCmd* other);

  // implements Message ----------------------------------------------

  TeamRaidAltmanShowCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamRaidAltmanShowCmd& from);
  void MergeFrom(const TeamRaidAltmanShowCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_ALTMANSHOW];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::TeamRaidParam param() const;
  inline void set_param(::Cmd::TeamRaidParam value);

  // optional uint32 lefttime = 3 [default = 0];
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLefttimeFieldNumber = 3;
  inline ::google::protobuf::uint32 lefttime() const;
  inline void set_lefttime(::google::protobuf::uint32 value);

  // optional uint32 killcount = 4 [default = 0];
  inline bool has_killcount() const;
  inline void clear_killcount();
  static const int kKillcountFieldNumber = 4;
  inline ::google::protobuf::uint32 killcount() const;
  inline void set_killcount(::google::protobuf::uint32 value);

  // optional uint32 selfkill = 5 [default = 0];
  inline bool has_selfkill() const;
  inline void clear_selfkill();
  static const int kSelfkillFieldNumber = 5;
  inline ::google::protobuf::uint32 selfkill() const;
  inline void set_selfkill(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.TeamRaidAltmanShowCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();
  inline void set_has_killcount();
  inline void clear_has_killcount();
  inline void set_has_selfkill();
  inline void clear_has_selfkill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 lefttime_;
  ::google::protobuf::uint32 killcount_;
  ::google::protobuf::uint32 selfkill_;
  friend void  protobuf_AddDesc_TeamRaidCmd_2eproto();
  friend void protobuf_AssignDesc_TeamRaidCmd_2eproto();
  friend void protobuf_ShutdownFile_TeamRaidCmd_2eproto();

  void InitAsDefaultInstance();
  static TeamRaidAltmanShowCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// TeamRaidInviteCmd

// optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
inline bool TeamRaidInviteCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRaidInviteCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRaidInviteCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRaidInviteCmd::clear_cmd() {
  cmd_ = 67;
  clear_has_cmd();
}
inline ::Cmd::Command TeamRaidInviteCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidInviteCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TeamRaidInviteCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidInviteCmd.cmd)
}

// optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_INVITE];
inline bool TeamRaidInviteCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRaidInviteCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRaidInviteCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRaidInviteCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::TeamRaidParam TeamRaidInviteCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidInviteCmd.param)
  return static_cast< ::Cmd::TeamRaidParam >(param_);
}
inline void TeamRaidInviteCmd::set_param(::Cmd::TeamRaidParam value) {
  assert(::Cmd::TeamRaidParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidInviteCmd.param)
}

// optional bool iscancel = 3 [default = false];
inline bool TeamRaidInviteCmd::has_iscancel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRaidInviteCmd::set_has_iscancel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRaidInviteCmd::clear_has_iscancel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRaidInviteCmd::clear_iscancel() {
  iscancel_ = false;
  clear_has_iscancel();
}
inline bool TeamRaidInviteCmd::iscancel() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidInviteCmd.iscancel)
  return iscancel_;
}
inline void TeamRaidInviteCmd::set_iscancel(bool value) {
  set_has_iscancel();
  iscancel_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidInviteCmd.iscancel)
}

// optional .Cmd.ERaidType raid_type = 4 [default = ERAIDTYPE_MIN];
inline bool TeamRaidInviteCmd::has_raid_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamRaidInviteCmd::set_has_raid_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamRaidInviteCmd::clear_has_raid_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamRaidInviteCmd::clear_raid_type() {
  raid_type_ = 0;
  clear_has_raid_type();
}
inline ::Cmd::ERaidType TeamRaidInviteCmd::raid_type() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidInviteCmd.raid_type)
  return static_cast< ::Cmd::ERaidType >(raid_type_);
}
inline void TeamRaidInviteCmd::set_raid_type(::Cmd::ERaidType value) {
  assert(::Cmd::ERaidType_IsValid(value));
  set_has_raid_type();
  raid_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidInviteCmd.raid_type)
}

// -------------------------------------------------------------------

// TeamRaidReplyCmd

// optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
inline bool TeamRaidReplyCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRaidReplyCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRaidReplyCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRaidReplyCmd::clear_cmd() {
  cmd_ = 67;
  clear_has_cmd();
}
inline ::Cmd::Command TeamRaidReplyCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidReplyCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TeamRaidReplyCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidReplyCmd.cmd)
}

// optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_REPLY];
inline bool TeamRaidReplyCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRaidReplyCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRaidReplyCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRaidReplyCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::TeamRaidParam TeamRaidReplyCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidReplyCmd.param)
  return static_cast< ::Cmd::TeamRaidParam >(param_);
}
inline void TeamRaidReplyCmd::set_param(::Cmd::TeamRaidParam value) {
  assert(::Cmd::TeamRaidParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidReplyCmd.param)
}

// optional bool reply = 3 [default = false];
inline bool TeamRaidReplyCmd::has_reply() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRaidReplyCmd::set_has_reply() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRaidReplyCmd::clear_has_reply() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRaidReplyCmd::clear_reply() {
  reply_ = false;
  clear_has_reply();
}
inline bool TeamRaidReplyCmd::reply() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidReplyCmd.reply)
  return reply_;
}
inline void TeamRaidReplyCmd::set_reply(bool value) {
  set_has_reply();
  reply_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidReplyCmd.reply)
}

// optional uint64 charid = 4 [default = 0];
inline bool TeamRaidReplyCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamRaidReplyCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamRaidReplyCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamRaidReplyCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 TeamRaidReplyCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidReplyCmd.charid)
  return charid_;
}
inline void TeamRaidReplyCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidReplyCmd.charid)
}

// optional .Cmd.ERaidType raid_type = 5 [default = ERAIDTYPE_MIN];
inline bool TeamRaidReplyCmd::has_raid_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamRaidReplyCmd::set_has_raid_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamRaidReplyCmd::clear_has_raid_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamRaidReplyCmd::clear_raid_type() {
  raid_type_ = 0;
  clear_has_raid_type();
}
inline ::Cmd::ERaidType TeamRaidReplyCmd::raid_type() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidReplyCmd.raid_type)
  return static_cast< ::Cmd::ERaidType >(raid_type_);
}
inline void TeamRaidReplyCmd::set_raid_type(::Cmd::ERaidType value) {
  assert(::Cmd::ERaidType_IsValid(value));
  set_has_raid_type();
  raid_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidReplyCmd.raid_type)
}

// -------------------------------------------------------------------

// TeamRaidEnterCmd

// optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
inline bool TeamRaidEnterCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRaidEnterCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRaidEnterCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRaidEnterCmd::clear_cmd() {
  cmd_ = 67;
  clear_has_cmd();
}
inline ::Cmd::Command TeamRaidEnterCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidEnterCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TeamRaidEnterCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidEnterCmd.cmd)
}

// optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_ENTER];
inline bool TeamRaidEnterCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRaidEnterCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRaidEnterCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRaidEnterCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::TeamRaidParam TeamRaidEnterCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidEnterCmd.param)
  return static_cast< ::Cmd::TeamRaidParam >(param_);
}
inline void TeamRaidEnterCmd::set_param(::Cmd::TeamRaidParam value) {
  assert(::Cmd::TeamRaidParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidEnterCmd.param)
}

// optional .Cmd.ERaidType raid_type = 3 [default = ERAIDTYPE_MIN];
inline bool TeamRaidEnterCmd::has_raid_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRaidEnterCmd::set_has_raid_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRaidEnterCmd::clear_has_raid_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRaidEnterCmd::clear_raid_type() {
  raid_type_ = 0;
  clear_has_raid_type();
}
inline ::Cmd::ERaidType TeamRaidEnterCmd::raid_type() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidEnterCmd.raid_type)
  return static_cast< ::Cmd::ERaidType >(raid_type_);
}
inline void TeamRaidEnterCmd::set_raid_type(::Cmd::ERaidType value) {
  assert(::Cmd::ERaidType_IsValid(value));
  set_has_raid_type();
  raid_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidEnterCmd.raid_type)
}

// optional uint64 userid = 4 [default = 0];
inline bool TeamRaidEnterCmd::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamRaidEnterCmd::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamRaidEnterCmd::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamRaidEnterCmd::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 TeamRaidEnterCmd::userid() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidEnterCmd.userid)
  return userid_;
}
inline void TeamRaidEnterCmd::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidEnterCmd.userid)
}

// optional uint32 zoneid = 5 [default = 0];
inline bool TeamRaidEnterCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamRaidEnterCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamRaidEnterCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamRaidEnterCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 TeamRaidEnterCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidEnterCmd.zoneid)
  return zoneid_;
}
inline void TeamRaidEnterCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidEnterCmd.zoneid)
}

// optional uint32 time = 6 [default = 0];
inline bool TeamRaidEnterCmd::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamRaidEnterCmd::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamRaidEnterCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamRaidEnterCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 TeamRaidEnterCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidEnterCmd.time)
  return time_;
}
inline void TeamRaidEnterCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidEnterCmd.time)
}

// optional string sign = 7;
inline bool TeamRaidEnterCmd::has_sign() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeamRaidEnterCmd::set_has_sign() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeamRaidEnterCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeamRaidEnterCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& TeamRaidEnterCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidEnterCmd.sign)
  return *sign_;
}
inline void TeamRaidEnterCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidEnterCmd.sign)
}
inline void TeamRaidEnterCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TeamRaidEnterCmd.sign)
}
inline void TeamRaidEnterCmd::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TeamRaidEnterCmd.sign)
}
inline ::std::string* TeamRaidEnterCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TeamRaidEnterCmd.sign)
  return sign_;
}
inline ::std::string* TeamRaidEnterCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TeamRaidEnterCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TeamRaidEnterCmd.sign)
}

// -------------------------------------------------------------------

// TeamRaidAltmanShowCmd

// optional .Cmd.Command cmd = 1 [default = TEAM_RAID_PROTOCMD];
inline bool TeamRaidAltmanShowCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRaidAltmanShowCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRaidAltmanShowCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRaidAltmanShowCmd::clear_cmd() {
  cmd_ = 67;
  clear_has_cmd();
}
inline ::Cmd::Command TeamRaidAltmanShowCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidAltmanShowCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TeamRaidAltmanShowCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidAltmanShowCmd.cmd)
}

// optional .Cmd.TeamRaidParam param = 2 [default = TEAMRAIDPARAM_ALTMANSHOW];
inline bool TeamRaidAltmanShowCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRaidAltmanShowCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRaidAltmanShowCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRaidAltmanShowCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::TeamRaidParam TeamRaidAltmanShowCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidAltmanShowCmd.param)
  return static_cast< ::Cmd::TeamRaidParam >(param_);
}
inline void TeamRaidAltmanShowCmd::set_param(::Cmd::TeamRaidParam value) {
  assert(::Cmd::TeamRaidParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidAltmanShowCmd.param)
}

// optional uint32 lefttime = 3 [default = 0];
inline bool TeamRaidAltmanShowCmd::has_lefttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRaidAltmanShowCmd::set_has_lefttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRaidAltmanShowCmd::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRaidAltmanShowCmd::clear_lefttime() {
  lefttime_ = 0u;
  clear_has_lefttime();
}
inline ::google::protobuf::uint32 TeamRaidAltmanShowCmd::lefttime() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidAltmanShowCmd.lefttime)
  return lefttime_;
}
inline void TeamRaidAltmanShowCmd::set_lefttime(::google::protobuf::uint32 value) {
  set_has_lefttime();
  lefttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidAltmanShowCmd.lefttime)
}

// optional uint32 killcount = 4 [default = 0];
inline bool TeamRaidAltmanShowCmd::has_killcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamRaidAltmanShowCmd::set_has_killcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamRaidAltmanShowCmd::clear_has_killcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamRaidAltmanShowCmd::clear_killcount() {
  killcount_ = 0u;
  clear_has_killcount();
}
inline ::google::protobuf::uint32 TeamRaidAltmanShowCmd::killcount() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidAltmanShowCmd.killcount)
  return killcount_;
}
inline void TeamRaidAltmanShowCmd::set_killcount(::google::protobuf::uint32 value) {
  set_has_killcount();
  killcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidAltmanShowCmd.killcount)
}

// optional uint32 selfkill = 5 [default = 0];
inline bool TeamRaidAltmanShowCmd::has_selfkill() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamRaidAltmanShowCmd::set_has_selfkill() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamRaidAltmanShowCmd::clear_has_selfkill() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamRaidAltmanShowCmd::clear_selfkill() {
  selfkill_ = 0u;
  clear_has_selfkill();
}
inline ::google::protobuf::uint32 TeamRaidAltmanShowCmd::selfkill() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamRaidAltmanShowCmd.selfkill)
  return selfkill_;
}
inline void TeamRaidAltmanShowCmd::set_selfkill(::google::protobuf::uint32 value) {
  set_has_selfkill();
  selfkill_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamRaidAltmanShowCmd.selfkill)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::TeamRaidParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::TeamRaidParam>() {
  return ::Cmd::TeamRaidParam_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TeamRaidCmd_2eproto__INCLUDED
