// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PveCard.proto

#ifndef PROTOBUF_PveCard_2eproto__INCLUDED
#define PROTOBUF_PveCard_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PveCard_2eproto();
void protobuf_AssignDesc_PveCard_2eproto();
void protobuf_ShutdownFile_PveCard_2eproto();

class InvitePveCardCmd;
class ReplyPveCardCmd;
class EnterPveCardCmd;
class PveCardInfo;
class QueryCardInfoCmd;
class SelectPveCardCmd;
class SyncProcessPveCardCmd;
class UpdateProcessPveCardCmd;
class BeginFirePveCardCmd;
class FinishPlayCardCmd;
class PlayPveCardCmd;

enum EPveCardParam {
  EPVE_INVITE_TEAM_CMD = 1,
  EPVE_REPLY_TEAM_CMD = 2,
  EPVE_ENTER_RAID_CMD = 3,
  EPVE_QUERY_ALL_CARD_CMD = 4,
  EPVE_SELECT_CARD_CMD = 5,
  EPVE_SELECTED_CARD_CMD = 6,
  EPVE_UPDATE_CARD_CMD = 7,
  EPVE_BEGIN_FIRE_CMD = 8,
  EPVE_FINISH_CARD_CMD = 9,
  EPVE_PLAY_CARD_CMD = 10
};
bool EPveCardParam_IsValid(int value);
const EPveCardParam EPveCardParam_MIN = EPVE_INVITE_TEAM_CMD;
const EPveCardParam EPveCardParam_MAX = EPVE_PLAY_CARD_CMD;
const int EPveCardParam_ARRAYSIZE = EPveCardParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPveCardParam_descriptor();
inline const ::std::string& EPveCardParam_Name(EPveCardParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPveCardParam_descriptor(), value);
}
inline bool EPveCardParam_Parse(
    const ::std::string& name, EPveCardParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPveCardParam>(
    EPveCardParam_descriptor(), name, value);
}
// ===================================================================

class InvitePveCardCmd : public ::google::protobuf::Message {
 public:
  InvitePveCardCmd();
  virtual ~InvitePveCardCmd();

  InvitePveCardCmd(const InvitePveCardCmd& from);

  inline InvitePveCardCmd& operator=(const InvitePveCardCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvitePveCardCmd& default_instance();

  void Swap(InvitePveCardCmd* other);

  // implements Message ----------------------------------------------

  InvitePveCardCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvitePveCardCmd& from);
  void MergeFrom(const InvitePveCardCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_INVITE_TEAM_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EPveCardParam param() const;
  inline void set_param(::Cmd::EPveCardParam value);

  // optional uint32 configid = 3 [default = 0];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigidFieldNumber = 3;
  inline ::google::protobuf::uint32 configid() const;
  inline void set_configid(::google::protobuf::uint32 value);

  // optional bool iscancel = 4 [default = false];
  inline bool has_iscancel() const;
  inline void clear_iscancel();
  static const int kIscancelFieldNumber = 4;
  inline bool iscancel() const;
  inline void set_iscancel(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.InvitePveCardCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_iscancel();
  inline void clear_has_iscancel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 configid_;
  bool iscancel_;
  friend void  protobuf_AddDesc_PveCard_2eproto();
  friend void protobuf_AssignDesc_PveCard_2eproto();
  friend void protobuf_ShutdownFile_PveCard_2eproto();

  void InitAsDefaultInstance();
  static InvitePveCardCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReplyPveCardCmd : public ::google::protobuf::Message {
 public:
  ReplyPveCardCmd();
  virtual ~ReplyPveCardCmd();

  ReplyPveCardCmd(const ReplyPveCardCmd& from);

  inline ReplyPveCardCmd& operator=(const ReplyPveCardCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyPveCardCmd& default_instance();

  void Swap(ReplyPveCardCmd* other);

  // implements Message ----------------------------------------------

  ReplyPveCardCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyPveCardCmd& from);
  void MergeFrom(const ReplyPveCardCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_REPLY_TEAM_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EPveCardParam param() const;
  inline void set_param(::Cmd::EPveCardParam value);

  // optional bool agree = 3 [default = false];
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 3;
  inline bool agree() const;
  inline void set_agree(bool value);

  // optional uint64 charid = 4 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ReplyPveCardCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_agree();
  inline void clear_has_agree();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  bool agree_;
  friend void  protobuf_AddDesc_PveCard_2eproto();
  friend void protobuf_AssignDesc_PveCard_2eproto();
  friend void protobuf_ShutdownFile_PveCard_2eproto();

  void InitAsDefaultInstance();
  static ReplyPveCardCmd* default_instance_;
};
// -------------------------------------------------------------------

class EnterPveCardCmd : public ::google::protobuf::Message {
 public:
  EnterPveCardCmd();
  virtual ~EnterPveCardCmd();

  EnterPveCardCmd(const EnterPveCardCmd& from);

  inline EnterPveCardCmd& operator=(const EnterPveCardCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterPveCardCmd& default_instance();

  void Swap(EnterPveCardCmd* other);

  // implements Message ----------------------------------------------

  EnterPveCardCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterPveCardCmd& from);
  void MergeFrom(const EnterPveCardCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_ENTER_RAID_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EPveCardParam param() const;
  inline void set_param(::Cmd::EPveCardParam value);

  // optional uint32 configid = 3 [default = 0];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigidFieldNumber = 3;
  inline ::google::protobuf::uint32 configid() const;
  inline void set_configid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.EnterPveCardCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_configid();
  inline void clear_has_configid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 configid_;
  friend void  protobuf_AddDesc_PveCard_2eproto();
  friend void protobuf_AssignDesc_PveCard_2eproto();
  friend void protobuf_ShutdownFile_PveCard_2eproto();

  void InitAsDefaultInstance();
  static EnterPveCardCmd* default_instance_;
};
// -------------------------------------------------------------------

class PveCardInfo : public ::google::protobuf::Message {
 public:
  PveCardInfo();
  virtual ~PveCardInfo();

  PveCardInfo(const PveCardInfo& from);

  inline PveCardInfo& operator=(const PveCardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PveCardInfo& default_instance();

  void Swap(PveCardInfo* other);

  // implements Message ----------------------------------------------

  PveCardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PveCardInfo& from);
  void MergeFrom(const PveCardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 1 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // repeated uint32 cardids = 2;
  inline int cardids_size() const;
  inline void clear_cardids();
  static const int kCardidsFieldNumber = 2;
  inline ::google::protobuf::uint32 cardids(int index) const;
  inline void set_cardids(int index, ::google::protobuf::uint32 value);
  inline void add_cardids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cardids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cardids();

  // @@protoc_insertion_point(class_scope:Cmd.PveCardInfo)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cardids_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_PveCard_2eproto();
  friend void protobuf_AssignDesc_PveCard_2eproto();
  friend void protobuf_ShutdownFile_PveCard_2eproto();

  void InitAsDefaultInstance();
  static PveCardInfo* default_instance_;
};
// -------------------------------------------------------------------

class QueryCardInfoCmd : public ::google::protobuf::Message {
 public:
  QueryCardInfoCmd();
  virtual ~QueryCardInfoCmd();

  QueryCardInfoCmd(const QueryCardInfoCmd& from);

  inline QueryCardInfoCmd& operator=(const QueryCardInfoCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryCardInfoCmd& default_instance();

  void Swap(QueryCardInfoCmd* other);

  // implements Message ----------------------------------------------

  QueryCardInfoCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryCardInfoCmd& from);
  void MergeFrom(const QueryCardInfoCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_QUERY_ALL_CARD_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EPveCardParam param() const;
  inline void set_param(::Cmd::EPveCardParam value);

  // repeated .Cmd.PveCardInfo cards = 3;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline const ::Cmd::PveCardInfo& cards(int index) const;
  inline ::Cmd::PveCardInfo* mutable_cards(int index);
  inline ::Cmd::PveCardInfo* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PveCardInfo >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PveCardInfo >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:Cmd.QueryCardInfoCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PveCardInfo > cards_;
  friend void  protobuf_AddDesc_PveCard_2eproto();
  friend void protobuf_AssignDesc_PveCard_2eproto();
  friend void protobuf_ShutdownFile_PveCard_2eproto();

  void InitAsDefaultInstance();
  static QueryCardInfoCmd* default_instance_;
};
// -------------------------------------------------------------------

class SelectPveCardCmd : public ::google::protobuf::Message {
 public:
  SelectPveCardCmd();
  virtual ~SelectPveCardCmd();

  SelectPveCardCmd(const SelectPveCardCmd& from);

  inline SelectPveCardCmd& operator=(const SelectPveCardCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectPveCardCmd& default_instance();

  void Swap(SelectPveCardCmd* other);

  // implements Message ----------------------------------------------

  SelectPveCardCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelectPveCardCmd& from);
  void MergeFrom(const SelectPveCardCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_SELECT_CARD_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EPveCardParam param() const;
  inline void set_param(::Cmd::EPveCardParam value);

  // required uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SelectPveCardCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_PveCard_2eproto();
  friend void protobuf_AssignDesc_PveCard_2eproto();
  friend void protobuf_ShutdownFile_PveCard_2eproto();

  void InitAsDefaultInstance();
  static SelectPveCardCmd* default_instance_;
};
// -------------------------------------------------------------------

class SyncProcessPveCardCmd : public ::google::protobuf::Message {
 public:
  SyncProcessPveCardCmd();
  virtual ~SyncProcessPveCardCmd();

  SyncProcessPveCardCmd(const SyncProcessPveCardCmd& from);

  inline SyncProcessPveCardCmd& operator=(const SyncProcessPveCardCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncProcessPveCardCmd& default_instance();

  void Swap(SyncProcessPveCardCmd* other);

  // implements Message ----------------------------------------------

  SyncProcessPveCardCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncProcessPveCardCmd& from);
  void MergeFrom(const SyncProcessPveCardCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_SELECTED_CARD_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EPveCardParam param() const;
  inline void set_param(::Cmd::EPveCardParam value);

  // optional .Cmd.PveCardInfo card = 3;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 3;
  inline const ::Cmd::PveCardInfo& card() const;
  inline ::Cmd::PveCardInfo* mutable_card();
  inline ::Cmd::PveCardInfo* release_card();
  inline void set_allocated_card(::Cmd::PveCardInfo* card);

  // optional uint32 process = 4 [default = 0];
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 4;
  inline ::google::protobuf::uint32 process() const;
  inline void set_process(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SyncProcessPveCardCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_process();
  inline void clear_has_process();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::PveCardInfo* card_;
  ::google::protobuf::uint32 process_;
  friend void  protobuf_AddDesc_PveCard_2eproto();
  friend void protobuf_AssignDesc_PveCard_2eproto();
  friend void protobuf_ShutdownFile_PveCard_2eproto();

  void InitAsDefaultInstance();
  static SyncProcessPveCardCmd* default_instance_;
};
// -------------------------------------------------------------------

class UpdateProcessPveCardCmd : public ::google::protobuf::Message {
 public:
  UpdateProcessPveCardCmd();
  virtual ~UpdateProcessPveCardCmd();

  UpdateProcessPveCardCmd(const UpdateProcessPveCardCmd& from);

  inline UpdateProcessPveCardCmd& operator=(const UpdateProcessPveCardCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateProcessPveCardCmd& default_instance();

  void Swap(UpdateProcessPveCardCmd* other);

  // implements Message ----------------------------------------------

  UpdateProcessPveCardCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateProcessPveCardCmd& from);
  void MergeFrom(const UpdateProcessPveCardCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_UPDATE_CARD_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EPveCardParam param() const;
  inline void set_param(::Cmd::EPveCardParam value);

  // optional uint32 process = 3 [default = 0];
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 3;
  inline ::google::protobuf::uint32 process() const;
  inline void set_process(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UpdateProcessPveCardCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_process();
  inline void clear_has_process();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 process_;
  friend void  protobuf_AddDesc_PveCard_2eproto();
  friend void protobuf_AssignDesc_PveCard_2eproto();
  friend void protobuf_ShutdownFile_PveCard_2eproto();

  void InitAsDefaultInstance();
  static UpdateProcessPveCardCmd* default_instance_;
};
// -------------------------------------------------------------------

class BeginFirePveCardCmd : public ::google::protobuf::Message {
 public:
  BeginFirePveCardCmd();
  virtual ~BeginFirePveCardCmd();

  BeginFirePveCardCmd(const BeginFirePveCardCmd& from);

  inline BeginFirePveCardCmd& operator=(const BeginFirePveCardCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginFirePveCardCmd& default_instance();

  void Swap(BeginFirePveCardCmd* other);

  // implements Message ----------------------------------------------

  BeginFirePveCardCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeginFirePveCardCmd& from);
  void MergeFrom(const BeginFirePveCardCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_BEGIN_FIRE_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EPveCardParam param() const;
  inline void set_param(::Cmd::EPveCardParam value);

  // @@protoc_insertion_point(class_scope:Cmd.BeginFirePveCardCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_PveCard_2eproto();
  friend void protobuf_AssignDesc_PveCard_2eproto();
  friend void protobuf_ShutdownFile_PveCard_2eproto();

  void InitAsDefaultInstance();
  static BeginFirePveCardCmd* default_instance_;
};
// -------------------------------------------------------------------

class FinishPlayCardCmd : public ::google::protobuf::Message {
 public:
  FinishPlayCardCmd();
  virtual ~FinishPlayCardCmd();

  FinishPlayCardCmd(const FinishPlayCardCmd& from);

  inline FinishPlayCardCmd& operator=(const FinishPlayCardCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FinishPlayCardCmd& default_instance();

  void Swap(FinishPlayCardCmd* other);

  // implements Message ----------------------------------------------

  FinishPlayCardCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FinishPlayCardCmd& from);
  void MergeFrom(const FinishPlayCardCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_FINISH_CARD_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EPveCardParam param() const;
  inline void set_param(::Cmd::EPveCardParam value);

  // @@protoc_insertion_point(class_scope:Cmd.FinishPlayCardCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_PveCard_2eproto();
  friend void protobuf_AssignDesc_PveCard_2eproto();
  friend void protobuf_ShutdownFile_PveCard_2eproto();

  void InitAsDefaultInstance();
  static FinishPlayCardCmd* default_instance_;
};
// -------------------------------------------------------------------

class PlayPveCardCmd : public ::google::protobuf::Message {
 public:
  PlayPveCardCmd();
  virtual ~PlayPveCardCmd();

  PlayPveCardCmd(const PlayPveCardCmd& from);

  inline PlayPveCardCmd& operator=(const PlayPveCardCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayPveCardCmd& default_instance();

  void Swap(PlayPveCardCmd* other);

  // implements Message ----------------------------------------------

  PlayPveCardCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayPveCardCmd& from);
  void MergeFrom(const PlayPveCardCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_PLAY_CARD_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EPveCardParam param() const;
  inline void set_param(::Cmd::EPveCardParam value);

  // required uint64 npcguid = 3;
  inline bool has_npcguid() const;
  inline void clear_npcguid();
  static const int kNpcguidFieldNumber = 3;
  inline ::google::protobuf::uint64 npcguid() const;
  inline void set_npcguid(::google::protobuf::uint64 value);

  // repeated uint32 cardids = 4;
  inline int cardids_size() const;
  inline void clear_cardids();
  static const int kCardidsFieldNumber = 4;
  inline ::google::protobuf::uint32 cardids(int index) const;
  inline void set_cardids(int index, ::google::protobuf::uint32 value);
  inline void add_cardids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cardids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cardids();

  // @@protoc_insertion_point(class_scope:Cmd.PlayPveCardCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npcguid();
  inline void clear_has_npcguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npcguid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cardids_;
  friend void  protobuf_AddDesc_PveCard_2eproto();
  friend void protobuf_AssignDesc_PveCard_2eproto();
  friend void protobuf_ShutdownFile_PveCard_2eproto();

  void InitAsDefaultInstance();
  static PlayPveCardCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// InvitePveCardCmd

// optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
inline bool InvitePveCardCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InvitePveCardCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InvitePveCardCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InvitePveCardCmd::clear_cmd() {
  cmd_ = 66;
  clear_has_cmd();
}
inline ::Cmd::Command InvitePveCardCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.InvitePveCardCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void InvitePveCardCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InvitePveCardCmd.cmd)
}

// optional .Cmd.EPveCardParam param = 2 [default = EPVE_INVITE_TEAM_CMD];
inline bool InvitePveCardCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InvitePveCardCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InvitePveCardCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InvitePveCardCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::EPveCardParam InvitePveCardCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.InvitePveCardCmd.param)
  return static_cast< ::Cmd::EPveCardParam >(param_);
}
inline void InvitePveCardCmd::set_param(::Cmd::EPveCardParam value) {
  assert(::Cmd::EPveCardParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InvitePveCardCmd.param)
}

// optional uint32 configid = 3 [default = 0];
inline bool InvitePveCardCmd::has_configid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InvitePveCardCmd::set_has_configid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InvitePveCardCmd::clear_has_configid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InvitePveCardCmd::clear_configid() {
  configid_ = 0u;
  clear_has_configid();
}
inline ::google::protobuf::uint32 InvitePveCardCmd::configid() const {
  // @@protoc_insertion_point(field_get:Cmd.InvitePveCardCmd.configid)
  return configid_;
}
inline void InvitePveCardCmd::set_configid(::google::protobuf::uint32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InvitePveCardCmd.configid)
}

// optional bool iscancel = 4 [default = false];
inline bool InvitePveCardCmd::has_iscancel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InvitePveCardCmd::set_has_iscancel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InvitePveCardCmd::clear_has_iscancel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InvitePveCardCmd::clear_iscancel() {
  iscancel_ = false;
  clear_has_iscancel();
}
inline bool InvitePveCardCmd::iscancel() const {
  // @@protoc_insertion_point(field_get:Cmd.InvitePveCardCmd.iscancel)
  return iscancel_;
}
inline void InvitePveCardCmd::set_iscancel(bool value) {
  set_has_iscancel();
  iscancel_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InvitePveCardCmd.iscancel)
}

// -------------------------------------------------------------------

// ReplyPveCardCmd

// optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
inline bool ReplyPveCardCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyPveCardCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyPveCardCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyPveCardCmd::clear_cmd() {
  cmd_ = 66;
  clear_has_cmd();
}
inline ::Cmd::Command ReplyPveCardCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyPveCardCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReplyPveCardCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyPveCardCmd.cmd)
}

// optional .Cmd.EPveCardParam param = 2 [default = EPVE_REPLY_TEAM_CMD];
inline bool ReplyPveCardCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplyPveCardCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplyPveCardCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplyPveCardCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::EPveCardParam ReplyPveCardCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyPveCardCmd.param)
  return static_cast< ::Cmd::EPveCardParam >(param_);
}
inline void ReplyPveCardCmd::set_param(::Cmd::EPveCardParam value) {
  assert(::Cmd::EPveCardParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyPveCardCmd.param)
}

// optional bool agree = 3 [default = false];
inline bool ReplyPveCardCmd::has_agree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplyPveCardCmd::set_has_agree() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplyPveCardCmd::clear_has_agree() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplyPveCardCmd::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool ReplyPveCardCmd::agree() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyPveCardCmd.agree)
  return agree_;
}
inline void ReplyPveCardCmd::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyPveCardCmd.agree)
}

// optional uint64 charid = 4 [default = 0];
inline bool ReplyPveCardCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReplyPveCardCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReplyPveCardCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReplyPveCardCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ReplyPveCardCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyPveCardCmd.charid)
  return charid_;
}
inline void ReplyPveCardCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyPveCardCmd.charid)
}

// -------------------------------------------------------------------

// EnterPveCardCmd

// optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
inline bool EnterPveCardCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterPveCardCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterPveCardCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterPveCardCmd::clear_cmd() {
  cmd_ = 66;
  clear_has_cmd();
}
inline ::Cmd::Command EnterPveCardCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterPveCardCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EnterPveCardCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterPveCardCmd.cmd)
}

// optional .Cmd.EPveCardParam param = 2 [default = EPVE_ENTER_RAID_CMD];
inline bool EnterPveCardCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterPveCardCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterPveCardCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterPveCardCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::EPveCardParam EnterPveCardCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterPveCardCmd.param)
  return static_cast< ::Cmd::EPveCardParam >(param_);
}
inline void EnterPveCardCmd::set_param(::Cmd::EPveCardParam value) {
  assert(::Cmd::EPveCardParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterPveCardCmd.param)
}

// optional uint32 configid = 3 [default = 0];
inline bool EnterPveCardCmd::has_configid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterPveCardCmd::set_has_configid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterPveCardCmd::clear_has_configid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterPveCardCmd::clear_configid() {
  configid_ = 0u;
  clear_has_configid();
}
inline ::google::protobuf::uint32 EnterPveCardCmd::configid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterPveCardCmd.configid)
  return configid_;
}
inline void EnterPveCardCmd::set_configid(::google::protobuf::uint32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterPveCardCmd.configid)
}

// -------------------------------------------------------------------

// PveCardInfo

// optional uint32 index = 1 [default = 0];
inline bool PveCardInfo::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PveCardInfo::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PveCardInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PveCardInfo::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 PveCardInfo::index() const {
  // @@protoc_insertion_point(field_get:Cmd.PveCardInfo.index)
  return index_;
}
inline void PveCardInfo::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PveCardInfo.index)
}

// repeated uint32 cardids = 2;
inline int PveCardInfo::cardids_size() const {
  return cardids_.size();
}
inline void PveCardInfo::clear_cardids() {
  cardids_.Clear();
}
inline ::google::protobuf::uint32 PveCardInfo::cardids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PveCardInfo.cardids)
  return cardids_.Get(index);
}
inline void PveCardInfo::set_cardids(int index, ::google::protobuf::uint32 value) {
  cardids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.PveCardInfo.cardids)
}
inline void PveCardInfo::add_cardids(::google::protobuf::uint32 value) {
  cardids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.PveCardInfo.cardids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PveCardInfo::cardids() const {
  // @@protoc_insertion_point(field_list:Cmd.PveCardInfo.cardids)
  return cardids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PveCardInfo::mutable_cardids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PveCardInfo.cardids)
  return &cardids_;
}

// -------------------------------------------------------------------

// QueryCardInfoCmd

// optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
inline bool QueryCardInfoCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryCardInfoCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryCardInfoCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryCardInfoCmd::clear_cmd() {
  cmd_ = 66;
  clear_has_cmd();
}
inline ::Cmd::Command QueryCardInfoCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryCardInfoCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryCardInfoCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryCardInfoCmd.cmd)
}

// optional .Cmd.EPveCardParam param = 2 [default = EPVE_QUERY_ALL_CARD_CMD];
inline bool QueryCardInfoCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryCardInfoCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryCardInfoCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryCardInfoCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::EPveCardParam QueryCardInfoCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryCardInfoCmd.param)
  return static_cast< ::Cmd::EPveCardParam >(param_);
}
inline void QueryCardInfoCmd::set_param(::Cmd::EPveCardParam value) {
  assert(::Cmd::EPveCardParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryCardInfoCmd.param)
}

// repeated .Cmd.PveCardInfo cards = 3;
inline int QueryCardInfoCmd::cards_size() const {
  return cards_.size();
}
inline void QueryCardInfoCmd::clear_cards() {
  cards_.Clear();
}
inline const ::Cmd::PveCardInfo& QueryCardInfoCmd::cards(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryCardInfoCmd.cards)
  return cards_.Get(index);
}
inline ::Cmd::PveCardInfo* QueryCardInfoCmd::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryCardInfoCmd.cards)
  return cards_.Mutable(index);
}
inline ::Cmd::PveCardInfo* QueryCardInfoCmd::add_cards() {
  // @@protoc_insertion_point(field_add:Cmd.QueryCardInfoCmd.cards)
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PveCardInfo >&
QueryCardInfoCmd::cards() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryCardInfoCmd.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PveCardInfo >*
QueryCardInfoCmd::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryCardInfoCmd.cards)
  return &cards_;
}

// -------------------------------------------------------------------

// SelectPveCardCmd

// optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
inline bool SelectPveCardCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectPveCardCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectPveCardCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectPveCardCmd::clear_cmd() {
  cmd_ = 66;
  clear_has_cmd();
}
inline ::Cmd::Command SelectPveCardCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectPveCardCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SelectPveCardCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectPveCardCmd.cmd)
}

// optional .Cmd.EPveCardParam param = 2 [default = EPVE_SELECT_CARD_CMD];
inline bool SelectPveCardCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelectPveCardCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelectPveCardCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelectPveCardCmd::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::EPveCardParam SelectPveCardCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectPveCardCmd.param)
  return static_cast< ::Cmd::EPveCardParam >(param_);
}
inline void SelectPveCardCmd::set_param(::Cmd::EPveCardParam value) {
  assert(::Cmd::EPveCardParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectPveCardCmd.param)
}

// required uint32 index = 3;
inline bool SelectPveCardCmd::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SelectPveCardCmd::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SelectPveCardCmd::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SelectPveCardCmd::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 SelectPveCardCmd::index() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectPveCardCmd.index)
  return index_;
}
inline void SelectPveCardCmd::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectPveCardCmd.index)
}

// -------------------------------------------------------------------

// SyncProcessPveCardCmd

// optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
inline bool SyncProcessPveCardCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncProcessPveCardCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncProcessPveCardCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncProcessPveCardCmd::clear_cmd() {
  cmd_ = 66;
  clear_has_cmd();
}
inline ::Cmd::Command SyncProcessPveCardCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncProcessPveCardCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SyncProcessPveCardCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncProcessPveCardCmd.cmd)
}

// optional .Cmd.EPveCardParam param = 2 [default = EPVE_SELECTED_CARD_CMD];
inline bool SyncProcessPveCardCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncProcessPveCardCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncProcessPveCardCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncProcessPveCardCmd::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::EPveCardParam SyncProcessPveCardCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncProcessPveCardCmd.param)
  return static_cast< ::Cmd::EPveCardParam >(param_);
}
inline void SyncProcessPveCardCmd::set_param(::Cmd::EPveCardParam value) {
  assert(::Cmd::EPveCardParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncProcessPveCardCmd.param)
}

// optional .Cmd.PveCardInfo card = 3;
inline bool SyncProcessPveCardCmd::has_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncProcessPveCardCmd::set_has_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncProcessPveCardCmd::clear_has_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncProcessPveCardCmd::clear_card() {
  if (card_ != NULL) card_->::Cmd::PveCardInfo::Clear();
  clear_has_card();
}
inline const ::Cmd::PveCardInfo& SyncProcessPveCardCmd::card() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncProcessPveCardCmd.card)
  return card_ != NULL ? *card_ : *default_instance_->card_;
}
inline ::Cmd::PveCardInfo* SyncProcessPveCardCmd::mutable_card() {
  set_has_card();
  if (card_ == NULL) card_ = new ::Cmd::PveCardInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.SyncProcessPveCardCmd.card)
  return card_;
}
inline ::Cmd::PveCardInfo* SyncProcessPveCardCmd::release_card() {
  clear_has_card();
  ::Cmd::PveCardInfo* temp = card_;
  card_ = NULL;
  return temp;
}
inline void SyncProcessPveCardCmd::set_allocated_card(::Cmd::PveCardInfo* card) {
  delete card_;
  card_ = card;
  if (card) {
    set_has_card();
  } else {
    clear_has_card();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SyncProcessPveCardCmd.card)
}

// optional uint32 process = 4 [default = 0];
inline bool SyncProcessPveCardCmd::has_process() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncProcessPveCardCmd::set_has_process() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncProcessPveCardCmd::clear_has_process() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncProcessPveCardCmd::clear_process() {
  process_ = 0u;
  clear_has_process();
}
inline ::google::protobuf::uint32 SyncProcessPveCardCmd::process() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncProcessPveCardCmd.process)
  return process_;
}
inline void SyncProcessPveCardCmd::set_process(::google::protobuf::uint32 value) {
  set_has_process();
  process_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncProcessPveCardCmd.process)
}

// -------------------------------------------------------------------

// UpdateProcessPveCardCmd

// optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
inline bool UpdateProcessPveCardCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateProcessPveCardCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateProcessPveCardCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateProcessPveCardCmd::clear_cmd() {
  cmd_ = 66;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateProcessPveCardCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateProcessPveCardCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateProcessPveCardCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateProcessPveCardCmd.cmd)
}

// optional .Cmd.EPveCardParam param = 2 [default = EPVE_UPDATE_CARD_CMD];
inline bool UpdateProcessPveCardCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateProcessPveCardCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateProcessPveCardCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateProcessPveCardCmd::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::EPveCardParam UpdateProcessPveCardCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateProcessPveCardCmd.param)
  return static_cast< ::Cmd::EPveCardParam >(param_);
}
inline void UpdateProcessPveCardCmd::set_param(::Cmd::EPveCardParam value) {
  assert(::Cmd::EPveCardParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateProcessPveCardCmd.param)
}

// optional uint32 process = 3 [default = 0];
inline bool UpdateProcessPveCardCmd::has_process() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateProcessPveCardCmd::set_has_process() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateProcessPveCardCmd::clear_has_process() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateProcessPveCardCmd::clear_process() {
  process_ = 0u;
  clear_has_process();
}
inline ::google::protobuf::uint32 UpdateProcessPveCardCmd::process() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateProcessPveCardCmd.process)
  return process_;
}
inline void UpdateProcessPveCardCmd::set_process(::google::protobuf::uint32 value) {
  set_has_process();
  process_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateProcessPveCardCmd.process)
}

// -------------------------------------------------------------------

// BeginFirePveCardCmd

// optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
inline bool BeginFirePveCardCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeginFirePveCardCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeginFirePveCardCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeginFirePveCardCmd::clear_cmd() {
  cmd_ = 66;
  clear_has_cmd();
}
inline ::Cmd::Command BeginFirePveCardCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BeginFirePveCardCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BeginFirePveCardCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BeginFirePveCardCmd.cmd)
}

// optional .Cmd.EPveCardParam param = 2 [default = EPVE_BEGIN_FIRE_CMD];
inline bool BeginFirePveCardCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeginFirePveCardCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BeginFirePveCardCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BeginFirePveCardCmd::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::EPveCardParam BeginFirePveCardCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BeginFirePveCardCmd.param)
  return static_cast< ::Cmd::EPveCardParam >(param_);
}
inline void BeginFirePveCardCmd::set_param(::Cmd::EPveCardParam value) {
  assert(::Cmd::EPveCardParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BeginFirePveCardCmd.param)
}

// -------------------------------------------------------------------

// FinishPlayCardCmd

// optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
inline bool FinishPlayCardCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FinishPlayCardCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FinishPlayCardCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FinishPlayCardCmd::clear_cmd() {
  cmd_ = 66;
  clear_has_cmd();
}
inline ::Cmd::Command FinishPlayCardCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.FinishPlayCardCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void FinishPlayCardCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FinishPlayCardCmd.cmd)
}

// optional .Cmd.EPveCardParam param = 2 [default = EPVE_FINISH_CARD_CMD];
inline bool FinishPlayCardCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FinishPlayCardCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FinishPlayCardCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FinishPlayCardCmd::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::EPveCardParam FinishPlayCardCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.FinishPlayCardCmd.param)
  return static_cast< ::Cmd::EPveCardParam >(param_);
}
inline void FinishPlayCardCmd::set_param(::Cmd::EPveCardParam value) {
  assert(::Cmd::EPveCardParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FinishPlayCardCmd.param)
}

// -------------------------------------------------------------------

// PlayPveCardCmd

// optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
inline bool PlayPveCardCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayPveCardCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayPveCardCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayPveCardCmd::clear_cmd() {
  cmd_ = 66;
  clear_has_cmd();
}
inline ::Cmd::Command PlayPveCardCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PlayPveCardCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PlayPveCardCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PlayPveCardCmd.cmd)
}

// optional .Cmd.EPveCardParam param = 2 [default = EPVE_PLAY_CARD_CMD];
inline bool PlayPveCardCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayPveCardCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayPveCardCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayPveCardCmd::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::EPveCardParam PlayPveCardCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PlayPveCardCmd.param)
  return static_cast< ::Cmd::EPveCardParam >(param_);
}
inline void PlayPveCardCmd::set_param(::Cmd::EPveCardParam value) {
  assert(::Cmd::EPveCardParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PlayPveCardCmd.param)
}

// required uint64 npcguid = 3;
inline bool PlayPveCardCmd::has_npcguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayPveCardCmd::set_has_npcguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayPveCardCmd::clear_has_npcguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayPveCardCmd::clear_npcguid() {
  npcguid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcguid();
}
inline ::google::protobuf::uint64 PlayPveCardCmd::npcguid() const {
  // @@protoc_insertion_point(field_get:Cmd.PlayPveCardCmd.npcguid)
  return npcguid_;
}
inline void PlayPveCardCmd::set_npcguid(::google::protobuf::uint64 value) {
  set_has_npcguid();
  npcguid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PlayPveCardCmd.npcguid)
}

// repeated uint32 cardids = 4;
inline int PlayPveCardCmd::cardids_size() const {
  return cardids_.size();
}
inline void PlayPveCardCmd::clear_cardids() {
  cardids_.Clear();
}
inline ::google::protobuf::uint32 PlayPveCardCmd::cardids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PlayPveCardCmd.cardids)
  return cardids_.Get(index);
}
inline void PlayPveCardCmd::set_cardids(int index, ::google::protobuf::uint32 value) {
  cardids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.PlayPveCardCmd.cardids)
}
inline void PlayPveCardCmd::add_cardids(::google::protobuf::uint32 value) {
  cardids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.PlayPveCardCmd.cardids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayPveCardCmd::cardids() const {
  // @@protoc_insertion_point(field_list:Cmd.PlayPveCardCmd.cardids)
  return cardids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayPveCardCmd::mutable_cardids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PlayPveCardCmd.cardids)
  return &cardids_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::EPveCardParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EPveCardParam>() {
  return ::Cmd::EPveCardParam_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PveCard_2eproto__INCLUDED
