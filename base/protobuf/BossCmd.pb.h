// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BossCmd.proto

#ifndef PROTOBUF_BossCmd_2eproto__INCLUDED
#define PROTOBUF_BossCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "ProtoCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BossCmd_2eproto();
void protobuf_AssignDesc_BossCmd_2eproto();
void protobuf_ShutdownFile_BossCmd_2eproto();

class BossInfoItem;
class BossListUserCmd;
class BossPosUserCmd;
class KillBossUserCmd;
class BossKillerData;
class QueryKillerInfoBossCmd;
class WorldBossNtf;
class StepSyncBossCmd;

enum BossParam {
  BOSS_LIST_USER_CMD = 1,
  BOSS_POS_USER_CMD = 2,
  BOSS_KILL_USER_CMD = 3,
  BOSS_USER_INFO_CMD = 4,
  BOSS_WORLD_NTF = 5,
  BOSS_STEP_SYNC = 6
};
bool BossParam_IsValid(int value);
const BossParam BossParam_MIN = BOSS_LIST_USER_CMD;
const BossParam BossParam_MAX = BOSS_STEP_SYNC;
const int BossParam_ARRAYSIZE = BossParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* BossParam_descriptor();
inline const ::std::string& BossParam_Name(BossParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    BossParam_descriptor(), value);
}
inline bool BossParam_Parse(
    const ::std::string& name, BossParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BossParam>(
    BossParam_descriptor(), name, value);
}
enum EBossRefreshState {
  EBOSSREFRESHSTATE_MIN = 0,
  EBOSSREFRESHSTATE_APPEARED = 1,
  EBOSSREFRESHSTATE_UPCOMING = 2,
  EBOSSREFRESHSTATE_SHORT = 3,
  EBOSSREFRESHSTATE_LONG = 4,
  EBOSSREFRESHSTATE_MAX = 5
};
bool EBossRefreshState_IsValid(int value);
const EBossRefreshState EBossRefreshState_MIN = EBOSSREFRESHSTATE_MIN;
const EBossRefreshState EBossRefreshState_MAX = EBOSSREFRESHSTATE_MAX;
const int EBossRefreshState_ARRAYSIZE = EBossRefreshState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBossRefreshState_descriptor();
inline const ::std::string& EBossRefreshState_Name(EBossRefreshState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBossRefreshState_descriptor(), value);
}
inline bool EBossRefreshState_Parse(
    const ::std::string& name, EBossRefreshState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBossRefreshState>(
    EBossRefreshState_descriptor(), name, value);
}
enum EBossStep {
  EBOSSSTEP_MIN = 0,
  EBOSSSTEP_VISIT = 1,
  EBOSSSTEP_SUMMON = 2,
  EBOSSSTEP_CLEAR = 3,
  EBOSSSTEP_BOSS = 4,
  EBOSSSTEP_END = 5,
  EBOSSSTEP_LIMIT = 7,
  EBOSSSTEP_DIALOG = 8,
  EBOSSSTEP_STATUS = 9,
  EBOSSSTEP_WAIT = 10,
  EBOSSSTEP_KILL = 11,
  EBOSSSTEP_WORLD = 12,
  EBOSSSTEP_SHOW = 13,
  EBOSSSTEP_MAX = 14
};
bool EBossStep_IsValid(int value);
const EBossStep EBossStep_MIN = EBOSSSTEP_MIN;
const EBossStep EBossStep_MAX = EBOSSSTEP_MAX;
const int EBossStep_ARRAYSIZE = EBossStep_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBossStep_descriptor();
inline const ::std::string& EBossStep_Name(EBossStep value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBossStep_descriptor(), value);
}
inline bool EBossStep_Parse(
    const ::std::string& name, EBossStep* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBossStep>(
    EBossStep_descriptor(), name, value);
}
// ===================================================================

class BossInfoItem : public ::google::protobuf::Message {
 public:
  BossInfoItem();
  virtual ~BossInfoItem();

  BossInfoItem(const BossInfoItem& from);

  inline BossInfoItem& operator=(const BossInfoItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossInfoItem& default_instance();

  void Swap(BossInfoItem* other);

  // implements Message ----------------------------------------------

  BossInfoItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossInfoItem& from);
  void MergeFrom(const BossInfoItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 refreshTime = 2 [default = 0];
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint32 value);

  // optional uint32 dietime = 9 [default = 0];
  inline bool has_dietime() const;
  inline void clear_dietime();
  static const int kDietimeFieldNumber = 9;
  inline ::google::protobuf::uint32 dietime() const;
  inline void set_dietime(::google::protobuf::uint32 value);

  // optional uint32 summontime = 10 [default = 0];
  inline bool has_summontime() const;
  inline void clear_summontime();
  static const int kSummontimeFieldNumber = 10;
  inline ::google::protobuf::uint32 summontime() const;
  inline void set_summontime(::google::protobuf::uint32 value);

  // optional uint32 mapid = 4;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 4;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 settime = 7 [default = 0];
  inline bool has_settime() const;
  inline void clear_settime();
  static const int kSettimeFieldNumber = 7;
  inline ::google::protobuf::uint32 settime() const;
  inline void set_settime(::google::protobuf::uint32 value);

  // optional uint32 lv = 8 [default = 0];
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 8;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional .Cmd.EBossRefreshState refreshstate = 5 [default = EBOSSREFRESHSTATE_MIN];
  inline bool has_refreshstate() const;
  inline void clear_refreshstate();
  static const int kRefreshstateFieldNumber = 5;
  inline ::Cmd::EBossRefreshState refreshstate() const;
  inline void set_refreshstate(::Cmd::EBossRefreshState value);

  // optional string lastKiller = 3;
  inline bool has_lastkiller() const;
  inline void clear_lastkiller();
  static const int kLastKillerFieldNumber = 3;
  inline const ::std::string& lastkiller() const;
  inline void set_lastkiller(const ::std::string& value);
  inline void set_lastkiller(const char* value);
  inline void set_lastkiller(const char* value, size_t size);
  inline ::std::string* mutable_lastkiller();
  inline ::std::string* release_lastkiller();
  inline void set_allocated_lastkiller(::std::string* lastkiller);

  // optional uint64 charid = 6 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 6;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.BossInfoItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();
  inline void set_has_dietime();
  inline void clear_has_dietime();
  inline void set_has_summontime();
  inline void clear_has_summontime();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_settime();
  inline void clear_has_settime();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_refreshstate();
  inline void clear_has_refreshstate();
  inline void set_has_lastkiller();
  inline void clear_has_lastkiller();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 refreshtime_;
  ::google::protobuf::uint32 dietime_;
  ::google::protobuf::uint32 summontime_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 settime_;
  ::google::protobuf::uint32 lv_;
  int refreshstate_;
  ::std::string* lastkiller_;
  ::google::protobuf::uint64 charid_;
  friend void  protobuf_AddDesc_BossCmd_2eproto();
  friend void protobuf_AssignDesc_BossCmd_2eproto();
  friend void protobuf_ShutdownFile_BossCmd_2eproto();

  void InitAsDefaultInstance();
  static BossInfoItem* default_instance_;
};
// -------------------------------------------------------------------

class BossListUserCmd : public ::google::protobuf::Message {
 public:
  BossListUserCmd();
  virtual ~BossListUserCmd();

  BossListUserCmd(const BossListUserCmd& from);

  inline BossListUserCmd& operator=(const BossListUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossListUserCmd& default_instance();

  void Swap(BossListUserCmd* other);

  // implements Message ----------------------------------------------

  BossListUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossListUserCmd& from);
  void MergeFrom(const BossListUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.BossParam param = 2 [default = BOSS_LIST_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::BossParam param() const;
  inline void set_param(::Cmd::BossParam value);

  // repeated .Cmd.BossInfoItem bosslist = 3;
  inline int bosslist_size() const;
  inline void clear_bosslist();
  static const int kBosslistFieldNumber = 3;
  inline const ::Cmd::BossInfoItem& bosslist(int index) const;
  inline ::Cmd::BossInfoItem* mutable_bosslist(int index);
  inline ::Cmd::BossInfoItem* add_bosslist();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BossInfoItem >&
      bosslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BossInfoItem >*
      mutable_bosslist();

  // repeated .Cmd.BossInfoItem minilist = 4;
  inline int minilist_size() const;
  inline void clear_minilist();
  static const int kMinilistFieldNumber = 4;
  inline const ::Cmd::BossInfoItem& minilist(int index) const;
  inline ::Cmd::BossInfoItem* mutable_minilist(int index);
  inline ::Cmd::BossInfoItem* add_minilist();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BossInfoItem >&
      minilist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BossInfoItem >*
      mutable_minilist();

  // repeated .Cmd.BossInfoItem deadlist = 5;
  inline int deadlist_size() const;
  inline void clear_deadlist();
  static const int kDeadlistFieldNumber = 5;
  inline const ::Cmd::BossInfoItem& deadlist(int index) const;
  inline ::Cmd::BossInfoItem* mutable_deadlist(int index);
  inline ::Cmd::BossInfoItem* add_deadlist();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BossInfoItem >&
      deadlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BossInfoItem >*
      mutable_deadlist();

  // @@protoc_insertion_point(class_scope:Cmd.BossListUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BossInfoItem > bosslist_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BossInfoItem > minilist_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BossInfoItem > deadlist_;
  friend void  protobuf_AddDesc_BossCmd_2eproto();
  friend void protobuf_AssignDesc_BossCmd_2eproto();
  friend void protobuf_ShutdownFile_BossCmd_2eproto();

  void InitAsDefaultInstance();
  static BossListUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class BossPosUserCmd : public ::google::protobuf::Message {
 public:
  BossPosUserCmd();
  virtual ~BossPosUserCmd();

  BossPosUserCmd(const BossPosUserCmd& from);

  inline BossPosUserCmd& operator=(const BossPosUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossPosUserCmd& default_instance();

  void Swap(BossPosUserCmd* other);

  // implements Message ----------------------------------------------

  BossPosUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossPosUserCmd& from);
  void MergeFrom(const BossPosUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.BossParam param = 2 [default = BOSS_POS_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::BossParam param() const;
  inline void set_param(::Cmd::BossParam value);

  // optional .Cmd.ScenePos pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::Cmd::ScenePos& pos() const;
  inline ::Cmd::ScenePos* mutable_pos();
  inline ::Cmd::ScenePos* release_pos();
  inline void set_allocated_pos(::Cmd::ScenePos* pos);

  // @@protoc_insertion_point(class_scope:Cmd.BossPosUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::ScenePos* pos_;
  friend void  protobuf_AddDesc_BossCmd_2eproto();
  friend void protobuf_AssignDesc_BossCmd_2eproto();
  friend void protobuf_ShutdownFile_BossCmd_2eproto();

  void InitAsDefaultInstance();
  static BossPosUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class KillBossUserCmd : public ::google::protobuf::Message {
 public:
  KillBossUserCmd();
  virtual ~KillBossUserCmd();

  KillBossUserCmd(const KillBossUserCmd& from);

  inline KillBossUserCmd& operator=(const KillBossUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KillBossUserCmd& default_instance();

  void Swap(KillBossUserCmd* other);

  // implements Message ----------------------------------------------

  KillBossUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KillBossUserCmd& from);
  void MergeFrom(const KillBossUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.BossParam param = 2 [default = BOSS_KILL_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::BossParam param() const;
  inline void set_param(::Cmd::BossParam value);

  // optional uint64 userid = 3 [default = 0];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.KillBossUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 userid_;
  friend void  protobuf_AddDesc_BossCmd_2eproto();
  friend void protobuf_AssignDesc_BossCmd_2eproto();
  friend void protobuf_ShutdownFile_BossCmd_2eproto();

  void InitAsDefaultInstance();
  static KillBossUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class BossKillerData : public ::google::protobuf::Message {
 public:
  BossKillerData();
  virtual ~BossKillerData();

  BossKillerData(const BossKillerData& from);

  inline BossKillerData& operator=(const BossKillerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossKillerData& default_instance();

  void Swap(BossKillerData* other);

  // implements Message ----------------------------------------------

  BossKillerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossKillerData& from);
  void MergeFrom(const BossKillerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 portrait = 2;
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 2;
  inline ::google::protobuf::uint32 portrait() const;
  inline void set_portrait(::google::protobuf::uint32 value);

  // optional uint32 baselevel = 4;
  inline bool has_baselevel() const;
  inline void clear_baselevel();
  static const int kBaselevelFieldNumber = 4;
  inline ::google::protobuf::uint32 baselevel() const;
  inline void set_baselevel(::google::protobuf::uint32 value);

  // optional uint32 hair = 5;
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 5;
  inline ::google::protobuf::uint32 hair() const;
  inline void set_hair(::google::protobuf::uint32 value);

  // optional uint32 haircolor = 6;
  inline bool has_haircolor() const;
  inline void clear_haircolor();
  static const int kHaircolorFieldNumber = 6;
  inline ::google::protobuf::uint32 haircolor() const;
  inline void set_haircolor(::google::protobuf::uint32 value);

  // optional uint32 body = 7;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 7;
  inline ::google::protobuf::uint32 body() const;
  inline void set_body(::google::protobuf::uint32 value);

  // optional uint32 head = 8;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 8;
  inline ::google::protobuf::uint32 head() const;
  inline void set_head(::google::protobuf::uint32 value);

  // optional uint32 face = 9;
  inline bool has_face() const;
  inline void clear_face();
  static const int kFaceFieldNumber = 9;
  inline ::google::protobuf::uint32 face() const;
  inline void set_face(::google::protobuf::uint32 value);

  // optional uint32 mouth = 10;
  inline bool has_mouth() const;
  inline void clear_mouth();
  static const int kMouthFieldNumber = 10;
  inline ::google::protobuf::uint32 mouth() const;
  inline void set_mouth(::google::protobuf::uint32 value);

  // optional uint32 eye = 11;
  inline bool has_eye() const;
  inline void clear_eye();
  static const int kEyeFieldNumber = 11;
  inline ::google::protobuf::uint32 eye() const;
  inline void set_eye(::google::protobuf::uint32 value);

  // optional uint32 blink = 12;
  inline bool has_blink() const;
  inline void clear_blink();
  static const int kBlinkFieldNumber = 12;
  inline ::google::protobuf::uint32 blink() const;
  inline void set_blink(::google::protobuf::uint32 value);

  // optional .Cmd.EProfession profession = 13;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 13;
  inline ::Cmd::EProfession profession() const;
  inline void set_profession(::Cmd::EProfession value);

  // optional .Cmd.EGender gender = 14;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 14;
  inline ::Cmd::EGender gender() const;
  inline void set_gender(::Cmd::EGender value);

  // optional string name = 15;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 15;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string guildname = 16;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 16;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // @@protoc_insertion_point(class_scope:Cmd.BossKillerData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_baselevel();
  inline void clear_has_baselevel();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_haircolor();
  inline void clear_has_haircolor();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_face();
  inline void clear_has_face();
  inline void set_has_mouth();
  inline void clear_has_mouth();
  inline void set_has_eye();
  inline void clear_has_eye();
  inline void set_has_blink();
  inline void clear_has_blink();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guildname();
  inline void clear_has_guildname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 portrait_;
  ::google::protobuf::uint32 baselevel_;
  ::google::protobuf::uint32 hair_;
  ::google::protobuf::uint32 haircolor_;
  ::google::protobuf::uint32 body_;
  ::google::protobuf::uint32 head_;
  ::google::protobuf::uint32 face_;
  ::google::protobuf::uint32 mouth_;
  ::google::protobuf::uint32 eye_;
  ::google::protobuf::uint32 blink_;
  int profession_;
  int gender_;
  ::std::string* name_;
  ::std::string* guildname_;
  friend void  protobuf_AddDesc_BossCmd_2eproto();
  friend void protobuf_AssignDesc_BossCmd_2eproto();
  friend void protobuf_ShutdownFile_BossCmd_2eproto();

  void InitAsDefaultInstance();
  static BossKillerData* default_instance_;
};
// -------------------------------------------------------------------

class QueryKillerInfoBossCmd : public ::google::protobuf::Message {
 public:
  QueryKillerInfoBossCmd();
  virtual ~QueryKillerInfoBossCmd();

  QueryKillerInfoBossCmd(const QueryKillerInfoBossCmd& from);

  inline QueryKillerInfoBossCmd& operator=(const QueryKillerInfoBossCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryKillerInfoBossCmd& default_instance();

  void Swap(QueryKillerInfoBossCmd* other);

  // implements Message ----------------------------------------------

  QueryKillerInfoBossCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryKillerInfoBossCmd& from);
  void MergeFrom(const QueryKillerInfoBossCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.BossParam param = 2 [default = BOSS_USER_INFO_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::BossParam param() const;
  inline void set_param(::Cmd::BossParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.BossKillerData userdata = 4;
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserdataFieldNumber = 4;
  inline const ::Cmd::BossKillerData& userdata() const;
  inline ::Cmd::BossKillerData* mutable_userdata();
  inline ::Cmd::BossKillerData* release_userdata();
  inline void set_allocated_userdata(::Cmd::BossKillerData* userdata);

  // @@protoc_insertion_point(class_scope:Cmd.QueryKillerInfoBossCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_userdata();
  inline void clear_has_userdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::Cmd::BossKillerData* userdata_;
  friend void  protobuf_AddDesc_BossCmd_2eproto();
  friend void protobuf_AssignDesc_BossCmd_2eproto();
  friend void protobuf_ShutdownFile_BossCmd_2eproto();

  void InitAsDefaultInstance();
  static QueryKillerInfoBossCmd* default_instance_;
};
// -------------------------------------------------------------------

class WorldBossNtf : public ::google::protobuf::Message {
 public:
  WorldBossNtf();
  virtual ~WorldBossNtf();

  WorldBossNtf(const WorldBossNtf& from);

  inline WorldBossNtf& operator=(const WorldBossNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldBossNtf& default_instance();

  void Swap(WorldBossNtf* other);

  // implements Message ----------------------------------------------

  WorldBossNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldBossNtf& from);
  void MergeFrom(const WorldBossNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.BossParam param = 2 [default = BOSS_WORLD_NTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::BossParam param() const;
  inline void set_param(::Cmd::BossParam value);

  // optional uint32 npcid = 3 [default = 0];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 3;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // optional uint32 mapid = 4 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 4;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 time = 5 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional bool open = 6 [default = false];
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 6;
  inline bool open() const;
  inline void set_open(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.WorldBossNtf)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_open();
  inline void clear_has_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 time_;
  bool open_;
  friend void  protobuf_AddDesc_BossCmd_2eproto();
  friend void protobuf_AssignDesc_BossCmd_2eproto();
  friend void protobuf_ShutdownFile_BossCmd_2eproto();

  void InitAsDefaultInstance();
  static WorldBossNtf* default_instance_;
};
// -------------------------------------------------------------------

class StepSyncBossCmd : public ::google::protobuf::Message {
 public:
  StepSyncBossCmd();
  virtual ~StepSyncBossCmd();

  StepSyncBossCmd(const StepSyncBossCmd& from);

  inline StepSyncBossCmd& operator=(const StepSyncBossCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StepSyncBossCmd& default_instance();

  void Swap(StepSyncBossCmd* other);

  // implements Message ----------------------------------------------

  StepSyncBossCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StepSyncBossCmd& from);
  void MergeFrom(const StepSyncBossCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.BossParam param = 2 [default = BOSS_STEP_SYNC];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::BossParam param() const;
  inline void set_param(::Cmd::BossParam value);

  // optional uint32 actid = 3 [default = 0];
  inline bool has_actid() const;
  inline void clear_actid();
  static const int kActidFieldNumber = 3;
  inline ::google::protobuf::uint32 actid() const;
  inline void set_actid(::google::protobuf::uint32 value);

  // optional .Cmd.EBossStep step = 4 [default = EBOSSSTEP_MIN];
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 4;
  inline ::Cmd::EBossStep step() const;
  inline void set_step(::Cmd::EBossStep value);

  // optional .Cmd.ConfigParam params = 5;
  inline bool has_params() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 5;
  inline const ::Cmd::ConfigParam& params() const;
  inline ::Cmd::ConfigParam* mutable_params();
  inline ::Cmd::ConfigParam* release_params();
  inline void set_allocated_params(::Cmd::ConfigParam* params);

  // @@protoc_insertion_point(class_scope:Cmd.StepSyncBossCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_actid();
  inline void clear_has_actid();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_params();
  inline void clear_has_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 actid_;
  int step_;
  ::Cmd::ConfigParam* params_;
  friend void  protobuf_AddDesc_BossCmd_2eproto();
  friend void protobuf_AssignDesc_BossCmd_2eproto();
  friend void protobuf_ShutdownFile_BossCmd_2eproto();

  void InitAsDefaultInstance();
  static StepSyncBossCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// BossInfoItem

// optional uint32 id = 1;
inline bool BossInfoItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossInfoItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossInfoItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossInfoItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BossInfoItem::id() const {
  // @@protoc_insertion_point(field_get:Cmd.BossInfoItem.id)
  return id_;
}
inline void BossInfoItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossInfoItem.id)
}

// optional uint32 refreshTime = 2 [default = 0];
inline bool BossInfoItem::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossInfoItem::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossInfoItem::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossInfoItem::clear_refreshtime() {
  refreshtime_ = 0u;
  clear_has_refreshtime();
}
inline ::google::protobuf::uint32 BossInfoItem::refreshtime() const {
  // @@protoc_insertion_point(field_get:Cmd.BossInfoItem.refreshTime)
  return refreshtime_;
}
inline void BossInfoItem::set_refreshtime(::google::protobuf::uint32 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossInfoItem.refreshTime)
}

// optional uint32 dietime = 9 [default = 0];
inline bool BossInfoItem::has_dietime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossInfoItem::set_has_dietime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossInfoItem::clear_has_dietime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossInfoItem::clear_dietime() {
  dietime_ = 0u;
  clear_has_dietime();
}
inline ::google::protobuf::uint32 BossInfoItem::dietime() const {
  // @@protoc_insertion_point(field_get:Cmd.BossInfoItem.dietime)
  return dietime_;
}
inline void BossInfoItem::set_dietime(::google::protobuf::uint32 value) {
  set_has_dietime();
  dietime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossInfoItem.dietime)
}

// optional uint32 summontime = 10 [default = 0];
inline bool BossInfoItem::has_summontime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossInfoItem::set_has_summontime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossInfoItem::clear_has_summontime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossInfoItem::clear_summontime() {
  summontime_ = 0u;
  clear_has_summontime();
}
inline ::google::protobuf::uint32 BossInfoItem::summontime() const {
  // @@protoc_insertion_point(field_get:Cmd.BossInfoItem.summontime)
  return summontime_;
}
inline void BossInfoItem::set_summontime(::google::protobuf::uint32 value) {
  set_has_summontime();
  summontime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossInfoItem.summontime)
}

// optional uint32 mapid = 4;
inline bool BossInfoItem::has_mapid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BossInfoItem::set_has_mapid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BossInfoItem::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BossInfoItem::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 BossInfoItem::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.BossInfoItem.mapid)
  return mapid_;
}
inline void BossInfoItem::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossInfoItem.mapid)
}

// optional uint32 settime = 7 [default = 0];
inline bool BossInfoItem::has_settime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BossInfoItem::set_has_settime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BossInfoItem::clear_has_settime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BossInfoItem::clear_settime() {
  settime_ = 0u;
  clear_has_settime();
}
inline ::google::protobuf::uint32 BossInfoItem::settime() const {
  // @@protoc_insertion_point(field_get:Cmd.BossInfoItem.settime)
  return settime_;
}
inline void BossInfoItem::set_settime(::google::protobuf::uint32 value) {
  set_has_settime();
  settime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossInfoItem.settime)
}

// optional uint32 lv = 8 [default = 0];
inline bool BossInfoItem::has_lv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BossInfoItem::set_has_lv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BossInfoItem::clear_has_lv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BossInfoItem::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 BossInfoItem::lv() const {
  // @@protoc_insertion_point(field_get:Cmd.BossInfoItem.lv)
  return lv_;
}
inline void BossInfoItem::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossInfoItem.lv)
}

// optional .Cmd.EBossRefreshState refreshstate = 5 [default = EBOSSREFRESHSTATE_MIN];
inline bool BossInfoItem::has_refreshstate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BossInfoItem::set_has_refreshstate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BossInfoItem::clear_has_refreshstate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BossInfoItem::clear_refreshstate() {
  refreshstate_ = 0;
  clear_has_refreshstate();
}
inline ::Cmd::EBossRefreshState BossInfoItem::refreshstate() const {
  // @@protoc_insertion_point(field_get:Cmd.BossInfoItem.refreshstate)
  return static_cast< ::Cmd::EBossRefreshState >(refreshstate_);
}
inline void BossInfoItem::set_refreshstate(::Cmd::EBossRefreshState value) {
  assert(::Cmd::EBossRefreshState_IsValid(value));
  set_has_refreshstate();
  refreshstate_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossInfoItem.refreshstate)
}

// optional string lastKiller = 3;
inline bool BossInfoItem::has_lastkiller() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BossInfoItem::set_has_lastkiller() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BossInfoItem::clear_has_lastkiller() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BossInfoItem::clear_lastkiller() {
  if (lastkiller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastkiller_->clear();
  }
  clear_has_lastkiller();
}
inline const ::std::string& BossInfoItem::lastkiller() const {
  // @@protoc_insertion_point(field_get:Cmd.BossInfoItem.lastKiller)
  return *lastkiller_;
}
inline void BossInfoItem::set_lastkiller(const ::std::string& value) {
  set_has_lastkiller();
  if (lastkiller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastkiller_ = new ::std::string;
  }
  lastkiller_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BossInfoItem.lastKiller)
}
inline void BossInfoItem::set_lastkiller(const char* value) {
  set_has_lastkiller();
  if (lastkiller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastkiller_ = new ::std::string;
  }
  lastkiller_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BossInfoItem.lastKiller)
}
inline void BossInfoItem::set_lastkiller(const char* value, size_t size) {
  set_has_lastkiller();
  if (lastkiller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastkiller_ = new ::std::string;
  }
  lastkiller_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BossInfoItem.lastKiller)
}
inline ::std::string* BossInfoItem::mutable_lastkiller() {
  set_has_lastkiller();
  if (lastkiller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastkiller_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BossInfoItem.lastKiller)
  return lastkiller_;
}
inline ::std::string* BossInfoItem::release_lastkiller() {
  clear_has_lastkiller();
  if (lastkiller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lastkiller_;
    lastkiller_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BossInfoItem::set_allocated_lastkiller(::std::string* lastkiller) {
  if (lastkiller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastkiller_;
  }
  if (lastkiller) {
    set_has_lastkiller();
    lastkiller_ = lastkiller;
  } else {
    clear_has_lastkiller();
    lastkiller_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BossInfoItem.lastKiller)
}

// optional uint64 charid = 6 [default = 0];
inline bool BossInfoItem::has_charid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BossInfoItem::set_has_charid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BossInfoItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BossInfoItem::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 BossInfoItem::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.BossInfoItem.charid)
  return charid_;
}
inline void BossInfoItem::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossInfoItem.charid)
}

// -------------------------------------------------------------------

// BossListUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
inline bool BossListUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossListUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossListUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossListUserCmd::clear_cmd() {
  cmd_ = 15;
  clear_has_cmd();
}
inline ::Cmd::Command BossListUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BossListUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BossListUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossListUserCmd.cmd)
}

// optional .Cmd.BossParam param = 2 [default = BOSS_LIST_USER_CMD];
inline bool BossListUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossListUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossListUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossListUserCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::BossParam BossListUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BossListUserCmd.param)
  return static_cast< ::Cmd::BossParam >(param_);
}
inline void BossListUserCmd::set_param(::Cmd::BossParam value) {
  assert(::Cmd::BossParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossListUserCmd.param)
}

// repeated .Cmd.BossInfoItem bosslist = 3;
inline int BossListUserCmd::bosslist_size() const {
  return bosslist_.size();
}
inline void BossListUserCmd::clear_bosslist() {
  bosslist_.Clear();
}
inline const ::Cmd::BossInfoItem& BossListUserCmd::bosslist(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BossListUserCmd.bosslist)
  return bosslist_.Get(index);
}
inline ::Cmd::BossInfoItem* BossListUserCmd::mutable_bosslist(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BossListUserCmd.bosslist)
  return bosslist_.Mutable(index);
}
inline ::Cmd::BossInfoItem* BossListUserCmd::add_bosslist() {
  // @@protoc_insertion_point(field_add:Cmd.BossListUserCmd.bosslist)
  return bosslist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BossInfoItem >&
BossListUserCmd::bosslist() const {
  // @@protoc_insertion_point(field_list:Cmd.BossListUserCmd.bosslist)
  return bosslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BossInfoItem >*
BossListUserCmd::mutable_bosslist() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BossListUserCmd.bosslist)
  return &bosslist_;
}

// repeated .Cmd.BossInfoItem minilist = 4;
inline int BossListUserCmd::minilist_size() const {
  return minilist_.size();
}
inline void BossListUserCmd::clear_minilist() {
  minilist_.Clear();
}
inline const ::Cmd::BossInfoItem& BossListUserCmd::minilist(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BossListUserCmd.minilist)
  return minilist_.Get(index);
}
inline ::Cmd::BossInfoItem* BossListUserCmd::mutable_minilist(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BossListUserCmd.minilist)
  return minilist_.Mutable(index);
}
inline ::Cmd::BossInfoItem* BossListUserCmd::add_minilist() {
  // @@protoc_insertion_point(field_add:Cmd.BossListUserCmd.minilist)
  return minilist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BossInfoItem >&
BossListUserCmd::minilist() const {
  // @@protoc_insertion_point(field_list:Cmd.BossListUserCmd.minilist)
  return minilist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BossInfoItem >*
BossListUserCmd::mutable_minilist() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BossListUserCmd.minilist)
  return &minilist_;
}

// repeated .Cmd.BossInfoItem deadlist = 5;
inline int BossListUserCmd::deadlist_size() const {
  return deadlist_.size();
}
inline void BossListUserCmd::clear_deadlist() {
  deadlist_.Clear();
}
inline const ::Cmd::BossInfoItem& BossListUserCmd::deadlist(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BossListUserCmd.deadlist)
  return deadlist_.Get(index);
}
inline ::Cmd::BossInfoItem* BossListUserCmd::mutable_deadlist(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BossListUserCmd.deadlist)
  return deadlist_.Mutable(index);
}
inline ::Cmd::BossInfoItem* BossListUserCmd::add_deadlist() {
  // @@protoc_insertion_point(field_add:Cmd.BossListUserCmd.deadlist)
  return deadlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BossInfoItem >&
BossListUserCmd::deadlist() const {
  // @@protoc_insertion_point(field_list:Cmd.BossListUserCmd.deadlist)
  return deadlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BossInfoItem >*
BossListUserCmd::mutable_deadlist() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BossListUserCmd.deadlist)
  return &deadlist_;
}

// -------------------------------------------------------------------

// BossPosUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
inline bool BossPosUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossPosUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossPosUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossPosUserCmd::clear_cmd() {
  cmd_ = 15;
  clear_has_cmd();
}
inline ::Cmd::Command BossPosUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BossPosUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BossPosUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossPosUserCmd.cmd)
}

// optional .Cmd.BossParam param = 2 [default = BOSS_POS_USER_CMD];
inline bool BossPosUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossPosUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossPosUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossPosUserCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::BossParam BossPosUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BossPosUserCmd.param)
  return static_cast< ::Cmd::BossParam >(param_);
}
inline void BossPosUserCmd::set_param(::Cmd::BossParam value) {
  assert(::Cmd::BossParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossPosUserCmd.param)
}

// optional .Cmd.ScenePos pos = 3;
inline bool BossPosUserCmd::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossPosUserCmd::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossPosUserCmd::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossPosUserCmd::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
  clear_has_pos();
}
inline const ::Cmd::ScenePos& BossPosUserCmd::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.BossPosUserCmd.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::ScenePos* BossPosUserCmd::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.BossPosUserCmd.pos)
  return pos_;
}
inline ::Cmd::ScenePos* BossPosUserCmd::release_pos() {
  clear_has_pos();
  ::Cmd::ScenePos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void BossPosUserCmd::set_allocated_pos(::Cmd::ScenePos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BossPosUserCmd.pos)
}

// -------------------------------------------------------------------

// KillBossUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
inline bool KillBossUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KillBossUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KillBossUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KillBossUserCmd::clear_cmd() {
  cmd_ = 15;
  clear_has_cmd();
}
inline ::Cmd::Command KillBossUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.KillBossUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void KillBossUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillBossUserCmd.cmd)
}

// optional .Cmd.BossParam param = 2 [default = BOSS_KILL_USER_CMD];
inline bool KillBossUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KillBossUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KillBossUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KillBossUserCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::BossParam KillBossUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.KillBossUserCmd.param)
  return static_cast< ::Cmd::BossParam >(param_);
}
inline void KillBossUserCmd::set_param(::Cmd::BossParam value) {
  assert(::Cmd::BossParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillBossUserCmd.param)
}

// optional uint64 userid = 3 [default = 0];
inline bool KillBossUserCmd::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KillBossUserCmd::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KillBossUserCmd::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KillBossUserCmd::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 KillBossUserCmd::userid() const {
  // @@protoc_insertion_point(field_get:Cmd.KillBossUserCmd.userid)
  return userid_;
}
inline void KillBossUserCmd::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillBossUserCmd.userid)
}

// -------------------------------------------------------------------

// BossKillerData

// optional uint64 charid = 1 [default = 0];
inline bool BossKillerData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossKillerData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossKillerData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossKillerData::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 BossKillerData::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.BossKillerData.charid)
  return charid_;
}
inline void BossKillerData::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossKillerData.charid)
}

// optional uint32 portrait = 2;
inline bool BossKillerData::has_portrait() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossKillerData::set_has_portrait() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossKillerData::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossKillerData::clear_portrait() {
  portrait_ = 0u;
  clear_has_portrait();
}
inline ::google::protobuf::uint32 BossKillerData::portrait() const {
  // @@protoc_insertion_point(field_get:Cmd.BossKillerData.portrait)
  return portrait_;
}
inline void BossKillerData::set_portrait(::google::protobuf::uint32 value) {
  set_has_portrait();
  portrait_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossKillerData.portrait)
}

// optional uint32 baselevel = 4;
inline bool BossKillerData::has_baselevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossKillerData::set_has_baselevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossKillerData::clear_has_baselevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossKillerData::clear_baselevel() {
  baselevel_ = 0u;
  clear_has_baselevel();
}
inline ::google::protobuf::uint32 BossKillerData::baselevel() const {
  // @@protoc_insertion_point(field_get:Cmd.BossKillerData.baselevel)
  return baselevel_;
}
inline void BossKillerData::set_baselevel(::google::protobuf::uint32 value) {
  set_has_baselevel();
  baselevel_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossKillerData.baselevel)
}

// optional uint32 hair = 5;
inline bool BossKillerData::has_hair() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossKillerData::set_has_hair() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossKillerData::clear_has_hair() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossKillerData::clear_hair() {
  hair_ = 0u;
  clear_has_hair();
}
inline ::google::protobuf::uint32 BossKillerData::hair() const {
  // @@protoc_insertion_point(field_get:Cmd.BossKillerData.hair)
  return hair_;
}
inline void BossKillerData::set_hair(::google::protobuf::uint32 value) {
  set_has_hair();
  hair_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossKillerData.hair)
}

// optional uint32 haircolor = 6;
inline bool BossKillerData::has_haircolor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BossKillerData::set_has_haircolor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BossKillerData::clear_has_haircolor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BossKillerData::clear_haircolor() {
  haircolor_ = 0u;
  clear_has_haircolor();
}
inline ::google::protobuf::uint32 BossKillerData::haircolor() const {
  // @@protoc_insertion_point(field_get:Cmd.BossKillerData.haircolor)
  return haircolor_;
}
inline void BossKillerData::set_haircolor(::google::protobuf::uint32 value) {
  set_has_haircolor();
  haircolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossKillerData.haircolor)
}

// optional uint32 body = 7;
inline bool BossKillerData::has_body() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BossKillerData::set_has_body() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BossKillerData::clear_has_body() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BossKillerData::clear_body() {
  body_ = 0u;
  clear_has_body();
}
inline ::google::protobuf::uint32 BossKillerData::body() const {
  // @@protoc_insertion_point(field_get:Cmd.BossKillerData.body)
  return body_;
}
inline void BossKillerData::set_body(::google::protobuf::uint32 value) {
  set_has_body();
  body_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossKillerData.body)
}

// optional uint32 head = 8;
inline bool BossKillerData::has_head() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BossKillerData::set_has_head() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BossKillerData::clear_has_head() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BossKillerData::clear_head() {
  head_ = 0u;
  clear_has_head();
}
inline ::google::protobuf::uint32 BossKillerData::head() const {
  // @@protoc_insertion_point(field_get:Cmd.BossKillerData.head)
  return head_;
}
inline void BossKillerData::set_head(::google::protobuf::uint32 value) {
  set_has_head();
  head_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossKillerData.head)
}

// optional uint32 face = 9;
inline bool BossKillerData::has_face() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BossKillerData::set_has_face() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BossKillerData::clear_has_face() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BossKillerData::clear_face() {
  face_ = 0u;
  clear_has_face();
}
inline ::google::protobuf::uint32 BossKillerData::face() const {
  // @@protoc_insertion_point(field_get:Cmd.BossKillerData.face)
  return face_;
}
inline void BossKillerData::set_face(::google::protobuf::uint32 value) {
  set_has_face();
  face_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossKillerData.face)
}

// optional uint32 mouth = 10;
inline bool BossKillerData::has_mouth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BossKillerData::set_has_mouth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BossKillerData::clear_has_mouth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BossKillerData::clear_mouth() {
  mouth_ = 0u;
  clear_has_mouth();
}
inline ::google::protobuf::uint32 BossKillerData::mouth() const {
  // @@protoc_insertion_point(field_get:Cmd.BossKillerData.mouth)
  return mouth_;
}
inline void BossKillerData::set_mouth(::google::protobuf::uint32 value) {
  set_has_mouth();
  mouth_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossKillerData.mouth)
}

// optional uint32 eye = 11;
inline bool BossKillerData::has_eye() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BossKillerData::set_has_eye() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BossKillerData::clear_has_eye() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BossKillerData::clear_eye() {
  eye_ = 0u;
  clear_has_eye();
}
inline ::google::protobuf::uint32 BossKillerData::eye() const {
  // @@protoc_insertion_point(field_get:Cmd.BossKillerData.eye)
  return eye_;
}
inline void BossKillerData::set_eye(::google::protobuf::uint32 value) {
  set_has_eye();
  eye_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossKillerData.eye)
}

// optional uint32 blink = 12;
inline bool BossKillerData::has_blink() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BossKillerData::set_has_blink() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BossKillerData::clear_has_blink() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BossKillerData::clear_blink() {
  blink_ = 0u;
  clear_has_blink();
}
inline ::google::protobuf::uint32 BossKillerData::blink() const {
  // @@protoc_insertion_point(field_get:Cmd.BossKillerData.blink)
  return blink_;
}
inline void BossKillerData::set_blink(::google::protobuf::uint32 value) {
  set_has_blink();
  blink_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossKillerData.blink)
}

// optional .Cmd.EProfession profession = 13;
inline bool BossKillerData::has_profession() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BossKillerData::set_has_profession() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BossKillerData::clear_has_profession() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BossKillerData::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::Cmd::EProfession BossKillerData::profession() const {
  // @@protoc_insertion_point(field_get:Cmd.BossKillerData.profession)
  return static_cast< ::Cmd::EProfession >(profession_);
}
inline void BossKillerData::set_profession(::Cmd::EProfession value) {
  assert(::Cmd::EProfession_IsValid(value));
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossKillerData.profession)
}

// optional .Cmd.EGender gender = 14;
inline bool BossKillerData::has_gender() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BossKillerData::set_has_gender() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BossKillerData::clear_has_gender() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BossKillerData::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::Cmd::EGender BossKillerData::gender() const {
  // @@protoc_insertion_point(field_get:Cmd.BossKillerData.gender)
  return static_cast< ::Cmd::EGender >(gender_);
}
inline void BossKillerData::set_gender(::Cmd::EGender value) {
  assert(::Cmd::EGender_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossKillerData.gender)
}

// optional string name = 15;
inline bool BossKillerData::has_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BossKillerData::set_has_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BossKillerData::clear_has_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BossKillerData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BossKillerData::name() const {
  // @@protoc_insertion_point(field_get:Cmd.BossKillerData.name)
  return *name_;
}
inline void BossKillerData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BossKillerData.name)
}
inline void BossKillerData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BossKillerData.name)
}
inline void BossKillerData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BossKillerData.name)
}
inline ::std::string* BossKillerData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BossKillerData.name)
  return name_;
}
inline ::std::string* BossKillerData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BossKillerData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BossKillerData.name)
}

// optional string guildname = 16;
inline bool BossKillerData::has_guildname() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BossKillerData::set_has_guildname() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BossKillerData::clear_has_guildname() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BossKillerData::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& BossKillerData::guildname() const {
  // @@protoc_insertion_point(field_get:Cmd.BossKillerData.guildname)
  return *guildname_;
}
inline void BossKillerData::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BossKillerData.guildname)
}
inline void BossKillerData::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BossKillerData.guildname)
}
inline void BossKillerData::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BossKillerData.guildname)
}
inline ::std::string* BossKillerData::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BossKillerData.guildname)
  return guildname_;
}
inline ::std::string* BossKillerData::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BossKillerData::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BossKillerData.guildname)
}

// -------------------------------------------------------------------

// QueryKillerInfoBossCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
inline bool QueryKillerInfoBossCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryKillerInfoBossCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryKillerInfoBossCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryKillerInfoBossCmd::clear_cmd() {
  cmd_ = 15;
  clear_has_cmd();
}
inline ::Cmd::Command QueryKillerInfoBossCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryKillerInfoBossCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryKillerInfoBossCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryKillerInfoBossCmd.cmd)
}

// optional .Cmd.BossParam param = 2 [default = BOSS_USER_INFO_CMD];
inline bool QueryKillerInfoBossCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryKillerInfoBossCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryKillerInfoBossCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryKillerInfoBossCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::BossParam QueryKillerInfoBossCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryKillerInfoBossCmd.param)
  return static_cast< ::Cmd::BossParam >(param_);
}
inline void QueryKillerInfoBossCmd::set_param(::Cmd::BossParam value) {
  assert(::Cmd::BossParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryKillerInfoBossCmd.param)
}

// optional uint64 charid = 3;
inline bool QueryKillerInfoBossCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryKillerInfoBossCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryKillerInfoBossCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryKillerInfoBossCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 QueryKillerInfoBossCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryKillerInfoBossCmd.charid)
  return charid_;
}
inline void QueryKillerInfoBossCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryKillerInfoBossCmd.charid)
}

// optional .Cmd.BossKillerData userdata = 4;
inline bool QueryKillerInfoBossCmd::has_userdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryKillerInfoBossCmd::set_has_userdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryKillerInfoBossCmd::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryKillerInfoBossCmd::clear_userdata() {
  if (userdata_ != NULL) userdata_->::Cmd::BossKillerData::Clear();
  clear_has_userdata();
}
inline const ::Cmd::BossKillerData& QueryKillerInfoBossCmd::userdata() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryKillerInfoBossCmd.userdata)
  return userdata_ != NULL ? *userdata_ : *default_instance_->userdata_;
}
inline ::Cmd::BossKillerData* QueryKillerInfoBossCmd::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == NULL) userdata_ = new ::Cmd::BossKillerData;
  // @@protoc_insertion_point(field_mutable:Cmd.QueryKillerInfoBossCmd.userdata)
  return userdata_;
}
inline ::Cmd::BossKillerData* QueryKillerInfoBossCmd::release_userdata() {
  clear_has_userdata();
  ::Cmd::BossKillerData* temp = userdata_;
  userdata_ = NULL;
  return temp;
}
inline void QueryKillerInfoBossCmd::set_allocated_userdata(::Cmd::BossKillerData* userdata) {
  delete userdata_;
  userdata_ = userdata;
  if (userdata) {
    set_has_userdata();
  } else {
    clear_has_userdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryKillerInfoBossCmd.userdata)
}

// -------------------------------------------------------------------

// WorldBossNtf

// optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
inline bool WorldBossNtf::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldBossNtf::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldBossNtf::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldBossNtf::clear_cmd() {
  cmd_ = 15;
  clear_has_cmd();
}
inline ::Cmd::Command WorldBossNtf::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldBossNtf.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void WorldBossNtf::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldBossNtf.cmd)
}

// optional .Cmd.BossParam param = 2 [default = BOSS_WORLD_NTF];
inline bool WorldBossNtf::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldBossNtf::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldBossNtf::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldBossNtf::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::BossParam WorldBossNtf::param() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldBossNtf.param)
  return static_cast< ::Cmd::BossParam >(param_);
}
inline void WorldBossNtf::set_param(::Cmd::BossParam value) {
  assert(::Cmd::BossParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldBossNtf.param)
}

// optional uint32 npcid = 3 [default = 0];
inline bool WorldBossNtf::has_npcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldBossNtf::set_has_npcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldBossNtf::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldBossNtf::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 WorldBossNtf::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldBossNtf.npcid)
  return npcid_;
}
inline void WorldBossNtf::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldBossNtf.npcid)
}

// optional uint32 mapid = 4 [default = 0];
inline bool WorldBossNtf::has_mapid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorldBossNtf::set_has_mapid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorldBossNtf::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorldBossNtf::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 WorldBossNtf::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldBossNtf.mapid)
  return mapid_;
}
inline void WorldBossNtf::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldBossNtf.mapid)
}

// optional uint32 time = 5 [default = 0];
inline bool WorldBossNtf::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WorldBossNtf::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WorldBossNtf::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WorldBossNtf::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 WorldBossNtf::time() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldBossNtf.time)
  return time_;
}
inline void WorldBossNtf::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldBossNtf.time)
}

// optional bool open = 6 [default = false];
inline bool WorldBossNtf::has_open() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WorldBossNtf::set_has_open() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WorldBossNtf::clear_has_open() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WorldBossNtf::clear_open() {
  open_ = false;
  clear_has_open();
}
inline bool WorldBossNtf::open() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldBossNtf.open)
  return open_;
}
inline void WorldBossNtf::set_open(bool value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldBossNtf.open)
}

// -------------------------------------------------------------------

// StepSyncBossCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
inline bool StepSyncBossCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StepSyncBossCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StepSyncBossCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StepSyncBossCmd::clear_cmd() {
  cmd_ = 15;
  clear_has_cmd();
}
inline ::Cmd::Command StepSyncBossCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.StepSyncBossCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void StepSyncBossCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StepSyncBossCmd.cmd)
}

// optional .Cmd.BossParam param = 2 [default = BOSS_STEP_SYNC];
inline bool StepSyncBossCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StepSyncBossCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StepSyncBossCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StepSyncBossCmd::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::BossParam StepSyncBossCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.StepSyncBossCmd.param)
  return static_cast< ::Cmd::BossParam >(param_);
}
inline void StepSyncBossCmd::set_param(::Cmd::BossParam value) {
  assert(::Cmd::BossParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StepSyncBossCmd.param)
}

// optional uint32 actid = 3 [default = 0];
inline bool StepSyncBossCmd::has_actid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StepSyncBossCmd::set_has_actid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StepSyncBossCmd::clear_has_actid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StepSyncBossCmd::clear_actid() {
  actid_ = 0u;
  clear_has_actid();
}
inline ::google::protobuf::uint32 StepSyncBossCmd::actid() const {
  // @@protoc_insertion_point(field_get:Cmd.StepSyncBossCmd.actid)
  return actid_;
}
inline void StepSyncBossCmd::set_actid(::google::protobuf::uint32 value) {
  set_has_actid();
  actid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StepSyncBossCmd.actid)
}

// optional .Cmd.EBossStep step = 4 [default = EBOSSSTEP_MIN];
inline bool StepSyncBossCmd::has_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StepSyncBossCmd::set_has_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StepSyncBossCmd::clear_has_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StepSyncBossCmd::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::Cmd::EBossStep StepSyncBossCmd::step() const {
  // @@protoc_insertion_point(field_get:Cmd.StepSyncBossCmd.step)
  return static_cast< ::Cmd::EBossStep >(step_);
}
inline void StepSyncBossCmd::set_step(::Cmd::EBossStep value) {
  assert(::Cmd::EBossStep_IsValid(value));
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StepSyncBossCmd.step)
}

// optional .Cmd.ConfigParam params = 5;
inline bool StepSyncBossCmd::has_params() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StepSyncBossCmd::set_has_params() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StepSyncBossCmd::clear_has_params() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StepSyncBossCmd::clear_params() {
  if (params_ != NULL) params_->::Cmd::ConfigParam::Clear();
  clear_has_params();
}
inline const ::Cmd::ConfigParam& StepSyncBossCmd::params() const {
  // @@protoc_insertion_point(field_get:Cmd.StepSyncBossCmd.params)
  return params_ != NULL ? *params_ : *default_instance_->params_;
}
inline ::Cmd::ConfigParam* StepSyncBossCmd::mutable_params() {
  set_has_params();
  if (params_ == NULL) params_ = new ::Cmd::ConfigParam;
  // @@protoc_insertion_point(field_mutable:Cmd.StepSyncBossCmd.params)
  return params_;
}
inline ::Cmd::ConfigParam* StepSyncBossCmd::release_params() {
  clear_has_params();
  ::Cmd::ConfigParam* temp = params_;
  params_ = NULL;
  return temp;
}
inline void StepSyncBossCmd::set_allocated_params(::Cmd::ConfigParam* params) {
  delete params_;
  params_ = params;
  if (params) {
    set_has_params();
  } else {
    clear_has_params();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.StepSyncBossCmd.params)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::BossParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::BossParam>() {
  return ::Cmd::BossParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EBossRefreshState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EBossRefreshState>() {
  return ::Cmd::EBossRefreshState_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EBossStep> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EBossStep>() {
  return ::Cmd::EBossStep_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BossCmd_2eproto__INCLUDED
