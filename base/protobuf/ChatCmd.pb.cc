// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChatCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* OfflineMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffMsgUserAddItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffMsgUserAddItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffMsgUserQuotaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffMsgUserQuotaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayExpressionChatCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayExpressionChatCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserInfoChatCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserInfoChatCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BarrageChatCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BarrageChatCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BarrageMsgChatCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BarrageMsgChatCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryVoiceUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryVoiceUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetVoiceIDChatCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetVoiceIDChatCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoveLetterNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoveLetterNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatSelfNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatSelfNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcChatNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcChatNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryRealtimeVoiceIDCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryRealtimeVoiceIDCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EOfflineMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EUserAddItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EUserQuotaOper_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EUserInfoType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBarrageOpt_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGameChatChannel_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ChatCmd_2eproto() {
  protobuf_AddDesc_ChatCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ChatCmd.proto");
  GOOGLE_CHECK(file != NULL);
  OfflineMsg_descriptor_ = file->message_type(0);
  static const int OfflineMsg_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, senderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, sendername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, givemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, sysstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, gmcmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, syscmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, tutorreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, useradditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, weddingmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, quotadata_),
  };
  OfflineMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineMsg_descriptor_,
      OfflineMsg::default_instance_,
      OfflineMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineMsg));
  OffMsgUserAddItem_descriptor_ = file->message_type(1);
  static const int OffMsgUserAddItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffMsgUserAddItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffMsgUserAddItem, items_),
  };
  OffMsgUserAddItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffMsgUserAddItem_descriptor_,
      OffMsgUserAddItem::default_instance_,
      OffMsgUserAddItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffMsgUserAddItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffMsgUserAddItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffMsgUserAddItem));
  OffMsgUserQuotaData_descriptor_ = file->message_type(2);
  static const int OffMsgUserQuotaData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffMsgUserQuotaData, quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffMsgUserQuotaData, oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffMsgUserQuotaData, type_),
  };
  OffMsgUserQuotaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffMsgUserQuotaData_descriptor_,
      OffMsgUserQuotaData::default_instance_,
      OffMsgUserQuotaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffMsgUserQuotaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffMsgUserQuotaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffMsgUserQuotaData));
  QueryItemData_descriptor_ = file->message_type(3);
  static const int QueryItemData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryItemData, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryItemData, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryItemData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryItemData, data_),
  };
  QueryItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryItemData_descriptor_,
      QueryItemData::default_instance_,
      QueryItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryItemData));
  PlayExpressionChatCmd_descriptor_ = file->message_type(4);
  static const int PlayExpressionChatCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayExpressionChatCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayExpressionChatCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayExpressionChatCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayExpressionChatCmd, expressionid_),
  };
  PlayExpressionChatCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayExpressionChatCmd_descriptor_,
      PlayExpressionChatCmd::default_instance_,
      PlayExpressionChatCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayExpressionChatCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayExpressionChatCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayExpressionChatCmd));
  QueryUserInfo_descriptor_ = file->message_type(5);
  static const int QueryUserInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfo, guildportrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfo, guildjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfo, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfo, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfo, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfo, fashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfo, highrefine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfo, partner_),
  };
  QueryUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryUserInfo_descriptor_,
      QueryUserInfo::default_instance_,
      QueryUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryUserInfo));
  QueryUserInfoChatCmd_descriptor_ = file->message_type(6);
  static const int QueryUserInfoChatCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoChatCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoChatCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoChatCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoChatCmd, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoChatCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoChatCmd, info_),
  };
  QueryUserInfoChatCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryUserInfoChatCmd_descriptor_,
      QueryUserInfoChatCmd::default_instance_,
      QueryUserInfoChatCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoChatCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoChatCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryUserInfoChatCmd));
  BarrageChatCmd_descriptor_ = file->message_type(7);
  static const int BarrageChatCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarrageChatCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarrageChatCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarrageChatCmd, opt_),
  };
  BarrageChatCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BarrageChatCmd_descriptor_,
      BarrageChatCmd::default_instance_,
      BarrageChatCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarrageChatCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarrageChatCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BarrageChatCmd));
  ColorInfo_descriptor_ = file->message_type(8);
  static const int ColorInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorInfo, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorInfo, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorInfo, b_),
  };
  ColorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColorInfo_descriptor_,
      ColorInfo::default_instance_,
      ColorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColorInfo));
  BarrageMsgChatCmd_descriptor_ = file->message_type(9);
  static const int BarrageMsgChatCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarrageMsgChatCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarrageMsgChatCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarrageMsgChatCmd, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarrageMsgChatCmd, msgpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarrageMsgChatCmd, clr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarrageMsgChatCmd, speed_),
  };
  BarrageMsgChatCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BarrageMsgChatCmd_descriptor_,
      BarrageMsgChatCmd::default_instance_,
      BarrageMsgChatCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarrageMsgChatCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarrageMsgChatCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BarrageMsgChatCmd));
  ChatCmd_descriptor_ = file->message_type(10);
  static const int ChatCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCmd, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCmd, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCmd, desid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCmd, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCmd, voicetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCmd, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCmd, msgover_),
  };
  ChatCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatCmd_descriptor_,
      ChatCmd::default_instance_,
      ChatCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatCmd));
  ChatRetCmd_descriptor_ = file->message_type(11);
  static const int ChatRetCmd_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, baselevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, voiceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, voicetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, appellation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, mouth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, eye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, rolejob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, blink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, sysmsgid_),
  };
  ChatRetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRetCmd_descriptor_,
      ChatRetCmd::default_instance_,
      ChatRetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRetCmd));
  QueryVoiceUserCmd_descriptor_ = file->message_type(12);
  static const int QueryVoiceUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVoiceUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVoiceUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVoiceUserCmd, voiceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVoiceUserCmd, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVoiceUserCmd, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVoiceUserCmd, msgover_),
  };
  QueryVoiceUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryVoiceUserCmd_descriptor_,
      QueryVoiceUserCmd::default_instance_,
      QueryVoiceUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVoiceUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVoiceUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryVoiceUserCmd));
  GetVoiceIDChatCmd_descriptor_ = file->message_type(13);
  static const int GetVoiceIDChatCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVoiceIDChatCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVoiceIDChatCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVoiceIDChatCmd, id_),
  };
  GetVoiceIDChatCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetVoiceIDChatCmd_descriptor_,
      GetVoiceIDChatCmd::default_instance_,
      GetVoiceIDChatCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVoiceIDChatCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVoiceIDChatCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetVoiceIDChatCmd));
  LoveLetterNtf_descriptor_ = file->message_type(14);
  static const int LoveLetterNtf_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterNtf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterNtf, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterNtf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterNtf, bg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterNtf, letterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterNtf, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterNtf, content2_),
  };
  LoveLetterNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoveLetterNtf_descriptor_,
      LoveLetterNtf::default_instance_,
      LoveLetterNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoveLetterNtf));
  ChatSelfNtf_descriptor_ = file->message_type(15);
  static const int ChatSelfNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSelfNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSelfNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSelfNtf, chat_),
  };
  ChatSelfNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatSelfNtf_descriptor_,
      ChatSelfNtf::default_instance_,
      ChatSelfNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSelfNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSelfNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatSelfNtf));
  NpcChatNtf_descriptor_ = file->message_type(16);
  static const int NpcChatNtf_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChatNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChatNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChatNtf, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChatNtf, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChatNtf, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChatNtf, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChatNtf, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChatNtf, npcguid_),
  };
  NpcChatNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcChatNtf_descriptor_,
      NpcChatNtf::default_instance_,
      NpcChatNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChatNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChatNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcChatNtf));
  QueryRealtimeVoiceIDCmd_descriptor_ = file->message_type(17);
  static const int QueryRealtimeVoiceIDCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRealtimeVoiceIDCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRealtimeVoiceIDCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRealtimeVoiceIDCmd, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRealtimeVoiceIDCmd, id_),
  };
  QueryRealtimeVoiceIDCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryRealtimeVoiceIDCmd_descriptor_,
      QueryRealtimeVoiceIDCmd::default_instance_,
      QueryRealtimeVoiceIDCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRealtimeVoiceIDCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRealtimeVoiceIDCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryRealtimeVoiceIDCmd));
  ChatParam_descriptor_ = file->enum_type(0);
  EOfflineMsg_descriptor_ = file->enum_type(1);
  EUserAddItemType_descriptor_ = file->enum_type(2);
  EUserQuotaOper_descriptor_ = file->enum_type(3);
  EUserInfoType_descriptor_ = file->enum_type(4);
  EBarrageOpt_descriptor_ = file->enum_type(5);
  EGameChatChannel_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ChatCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineMsg_descriptor_, &OfflineMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffMsgUserAddItem_descriptor_, &OffMsgUserAddItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffMsgUserQuotaData_descriptor_, &OffMsgUserQuotaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryItemData_descriptor_, &QueryItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayExpressionChatCmd_descriptor_, &PlayExpressionChatCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryUserInfo_descriptor_, &QueryUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryUserInfoChatCmd_descriptor_, &QueryUserInfoChatCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BarrageChatCmd_descriptor_, &BarrageChatCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColorInfo_descriptor_, &ColorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BarrageMsgChatCmd_descriptor_, &BarrageMsgChatCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatCmd_descriptor_, &ChatCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRetCmd_descriptor_, &ChatRetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryVoiceUserCmd_descriptor_, &QueryVoiceUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetVoiceIDChatCmd_descriptor_, &GetVoiceIDChatCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoveLetterNtf_descriptor_, &LoveLetterNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatSelfNtf_descriptor_, &ChatSelfNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcChatNtf_descriptor_, &NpcChatNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryRealtimeVoiceIDCmd_descriptor_, &QueryRealtimeVoiceIDCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ChatCmd_2eproto() {
  delete OfflineMsg::default_instance_;
  delete OfflineMsg_reflection_;
  delete OffMsgUserAddItem::default_instance_;
  delete OffMsgUserAddItem_reflection_;
  delete OffMsgUserQuotaData::default_instance_;
  delete OffMsgUserQuotaData_reflection_;
  delete QueryItemData::default_instance_;
  delete QueryItemData_reflection_;
  delete PlayExpressionChatCmd::default_instance_;
  delete PlayExpressionChatCmd_reflection_;
  delete QueryUserInfo::default_instance_;
  delete QueryUserInfo_reflection_;
  delete QueryUserInfoChatCmd::default_instance_;
  delete QueryUserInfoChatCmd_reflection_;
  delete BarrageChatCmd::default_instance_;
  delete BarrageChatCmd_reflection_;
  delete ColorInfo::default_instance_;
  delete ColorInfo_reflection_;
  delete BarrageMsgChatCmd::default_instance_;
  delete BarrageMsgChatCmd_reflection_;
  delete ChatCmd::default_instance_;
  delete ChatCmd_reflection_;
  delete ChatRetCmd::default_instance_;
  delete ChatRetCmd_reflection_;
  delete QueryVoiceUserCmd::default_instance_;
  delete QueryVoiceUserCmd_reflection_;
  delete GetVoiceIDChatCmd::default_instance_;
  delete GetVoiceIDChatCmd_reflection_;
  delete LoveLetterNtf::default_instance_;
  delete LoveLetterNtf_reflection_;
  delete ChatSelfNtf::default_instance_;
  delete ChatSelfNtf_reflection_;
  delete NpcChatNtf::default_instance_;
  delete NpcChatNtf_reflection_;
  delete QueryRealtimeVoiceIDCmd::default_instance_;
  delete QueryRealtimeVoiceIDCmd_reflection_;
}

void protobuf_AddDesc_ChatCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser2_2eproto();
  ::Cmd::protobuf_AddDesc_Tutor_2eproto();
  ::Cmd::protobuf_AddDesc_WeddingCCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rChatCmd.proto\022\003Cmd\032\nxCmd.proto\032\021ProtoC"
    "ommon.proto\032\017SceneItem.proto\032\017SceneUser."
    "proto\032\020SceneUser2.proto\032\013Tutor.proto\032\021We"
    "ddingCCmd.proto\"\324\004\n\nOfflineMsg\022\023\n\010target"
    "id\030\001 \001(\004:\0010\022\023\n\010senderid\030\002 \001(\004:\0010\022\017\n\004time"
    "\030\003 \001(\r:\0010\022/\n\004type\030\004 \001(\0162\020.Cmd.EOfflineMs"
    "g:\017EOFFLINEMSG_MIN\022\022\n\nsendername\030\005 \001(\t\022\035"
    "\n\004chat\030\023 \001(\0132\017.Cmd.ChatRetCmd\022\021\n\006itemid\030"
    "\013 \001(\r:\0010\022\020\n\005price\030\014 \001(\r:\0010\022\020\n\005count\030\r \001("
    "\r:\0010\022\024\n\tgivemoney\030\016 \001(\r:\0010\0222\n\tmoneytype\030"
    "\017 \001(\0162\017.Cmd.EMoneyType:\016EMONEYTYPE_MIN\022\016"
    "\n\006sysstr\030\024 \001(\t\022\r\n\005gmcmd\030\020 \001(\t\022\r\n\002id\030\021 \001("
    "\004:\0010\022\013\n\003msg\030\022 \001(\t\022\037\n\010itemdata\030\026 \001(\0132\r.Cm"
    "d.ItemData\022\033\n\006syscmd\030\025 \001(\0132\013.Cmd.SysMsg\022"
    "%\n\013tutorreward\030\027 \001(\0132\020.Cmd.TutorReward\022+"
    "\n\013useradditem\030\030 \001(\0132\026.Cmd.OffMsgUserAddI"
    "tem\022,\n\nweddingmsg\030\031 \001(\0132\030.Cmd.WeddingEve"
    "ntMsgCCmd\022+\n\tquotadata\030\032 \001(\0132\030.Cmd.OffMs"
    "gUserQuotaData\"l\n\021OffMsgUserAddItem\0229\n\004t"
    "ype\030\001 \001(\0162\025.Cmd.EUserAddItemType:\024EUSERA"
    "DDITEMTYPE_MIN\022\034\n\005items\030\002 \003(\0132\r.Cmd.Item"
    "Info\"\226\001\n\023OffMsgUserQuotaData\022\020\n\005quota\030\001 "
    "\001(\004:\0010\0225\n\004oper\030\002 \001(\0162\023.Cmd.EUserQuotaOpe"
    "r:\022EUSERQUOTAOPER_MIN\0226\n\004type\030\003 \001(\0162\017.Cm"
    "d.EQuotaType:\027EQuotaType_U_Give_Trade\"\234\001"
    "\n\rQueryItemData\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\rCHAT_PROTOCMD\0226\n\005param\030\002 \001(\0162\016.Cmd.C"
    "hatParam:\027CHATPARAM_QUERYITEMDATA\022\014\n\004gui"
    "d\030\003 \001(\t\022\033\n\004data\030\004 \001(\0132\r.Cmd.ItemData\"\246\001\n"
    "\025PlayExpressionChatCmd\022(\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\rCHAT_PROTOCMD\0227\n\005param\030\002 \001(\0162"
    "\016.Cmd.ChatParam:\030CHATPARAM_PLAYEXPRESSIO"
    "N\022\021\n\006charid\030\003 \001(\004:\0010\022\027\n\014expressionid\030\004 \001"
    "(\r:\0010\"\264\002\n\rQueryUserInfo\022\021\n\006charid\030\001 \001(\004:"
    "\0010\022\022\n\007guildid\030\002 \001(\004:\0010\022\014\n\004name\030\003 \001(\t\022\021\n\t"
    "guildname\030\004 \001(\t\022\025\n\rguildportrait\030\005 \001(\t\022\020"
    "\n\010guildjob\030\006 \001(\t\022\034\n\005datas\030\007 \003(\0132\r.Cmd.Us"
    "erData\022\034\n\005attrs\030\010 \003(\0132\r.Cmd.UserAttr\022\034\n\005"
    "equip\030\t \003(\0132\r.Cmd.ItemData\022\036\n\007fashion\030\014 "
    "\003(\0132\r.Cmd.ItemData\022\'\n\nhighrefine\030\n \003(\0132\023"
    ".Cmd.HighRefineData\022\017\n\007partner\030\013 \001(\t\"\365\001\n"
    "\024QueryUserInfoChatCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\rCHAT_PROTOCMD\0226\n\005param\030\002 \001(\0162\016"
    ".Cmd.ChatParam:\027CHATPARAM_QUERYUSERINFO\022"
    "\021\n\006charid\030\003 \001(\004:\0010\022\020\n\005msgid\030\004 \001(\r:\0010\0224\n\004"
    "type\030\006 \001(\0162\022.Cmd.EUserInfoType:\022EUSERINF"
    "OTYPE_CHAT\022 \n\004info\030\005 \001(\0132\022.Cmd.QueryUser"
    "Info\"\233\001\n\016BarrageChatCmd\022(\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\rCHAT_PROTOCMD\0220\n\005param\030\002 \001(\016"
    "2\016.Cmd.ChatParam:\021CHATPARAM_BARRAGE\022-\n\003o"
    "pt\030\003 \001(\0162\020.Cmd.EBarrageOpt:\016EBARRAGE_CLO"
    "SE\";\n\tColorInfo\022\016\n\001r\030\001 \001(\r:\003255\022\016\n\001g\030\002 \001"
    "(\r:\003255\022\016\n\001b\030\003 \001(\r:\003255\"\315\001\n\021BarrageMsgCh"
    "atCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rCHAT_P"
    "ROTOCMD\0223\n\005param\030\002 \001(\0162\016.Cmd.ChatParam:\024"
    "CHATPARAM_BARRAGEMSG\022\013\n\003str\030\003 \001(\t\022\035\n\006msg"
    "pos\030\004 \001(\0132\r.Cmd.ScenePos\022\033\n\003clr\030\005 \001(\0132\016."
    "Cmd.ColorInfo\022\020\n\005speed\030\006 \001(\r:\0010\"\212\002\n\007Chat"
    "Cmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rCHAT_PRO"
    "TOCMD\022-\n\005param\030\002 \001(\0162\016.Cmd.ChatParam:\016CH"
    "ATPARAM_CHAT\022;\n\007channel\030\003 \001(\0162\025.Cmd.EGam"
    "eChatChannel:\023ECHAT_CHANNEL_ROUND\022\013\n\003str"
    "\030\004 \002(\t\022\r\n\005desID\030\005 \001(\004\022\r\n\005voice\030\006 \001(\014\022\024\n\t"
    "voicetime\030\007 \001(\r:\0010\022\020\n\005msgid\030\010 \001(\r:\0010\022\026\n\007"
    "msgover\030\t \001(\010:\005false\"\206\005\n\nChatRetCmd\022(\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\rCHAT_PROTOCMD\0221\n"
    "\005param\030\002 \001(\0162\016.Cmd.ChatParam:\022CHATPARAM_"
    "CHAT_RET\022\n\n\002id\030\006 \002(\004\022\023\n\010targetid\030\r \001(\004:\001"
    "0\022\020\n\010portrait\030\007 \002(\r\022\r\n\005frame\030\010 \002(\r\022\024\n\tba"
    "selevel\030\n \001(\r:\0010\022\022\n\007voiceid\030\013 \001(\r:\0010\022\024\n\t"
    "voicetime\030\014 \001(\r:\0010\022\017\n\004hair\030\016 \001(\r:\0010\022\024\n\th"
    "aircolor\030\017 \001(\r:\0010\022\017\n\004body\030\020 \001(\r:\0010\022\026\n\013ap"
    "pellation\030\023 \001(\r:\0010\022\020\n\005msgid\030\025 \001(\r:\0010\022\017\n\004"
    "head\030\026 \001(\r:\0010\022\017\n\004face\030\027 \001(\r:\0010\022\020\n\005mouth\030"
    "\030 \001(\r:\0010\022\016\n\003eye\030\031 \001(\r:\0010\022;\n\007channel\030\003 \001("
    "\0162\025.Cmd.EGameChatChannel:\023ECHAT_CHANNEL_"
    "ROUND\0222\n\007rolejob\030\t \001(\0162\020.Cmd.EProfession"
    ":\017EPROFESSION_MIN\022)\n\006gender\030\021 \001(\0162\014.Cmd."
    "EGender:\013EGENDER_MIN\022\024\n\005blink\030\024 \001(\010:\005fal"
    "se\022\013\n\003str\030\004 \002(\t\022\014\n\004name\030\005 \002(\t\022\021\n\tguildna"
    "me\030\022 \001(\t\022\023\n\010sysmsgid\030\032 \001(\r:\0010\"\300\001\n\021QueryV"
    "oiceUserCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\r"
    "CHAT_PROTOCMD\0224\n\005param\030\002 \001(\0162\016.Cmd.ChatP"
    "aram:\025CHATPARAM_QUERY_VOICE\022\022\n\007voiceid\030\003"
    " \001(\r:\0010\022\r\n\005voice\030\004 \001(\014\022\020\n\005msgid\030\010 \001(\r:\0010"
    "\022\026\n\007msgover\030\t \001(\010:\005false\"\202\001\n\021GetVoiceIDC"
    "hatCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rCHAT_"
    "PROTOCMD\0224\n\005param\030\002 \001(\0162\016.Cmd.ChatParam:"
    "\025CHATPARAM_GET_VOICEID\022\r\n\002id\030\003 \001(\r:\0010\"\344\001"
    "\n\rLoveLetterNtf\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\rCHAT_PROTOCMD\0224\n\005param\030\002 \001(\0162\016.Cmd.C"
    "hatParam:\025CHATPARAM_LOVE_LETTER\022\014\n\004name\030"
    "\003 \001(\t\022\017\n\007content\030\004 \001(\t\022\014\n\004type\030\005 \001(\r\022\n\n\002"
    "bg\030\006 \001(\t\022\023\n\010letterID\030\007 \001(\r:\0010\022\023\n\010configI"
    "D\030\010 \001(\r:\0010\022\020\n\010content2\030\t \001(\t\"\207\001\n\013ChatSel"
    "fNtf\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rCHAT_PR"
    "OTOCMD\0222\n\005param\030\002 \001(\0162\016.Cmd.ChatParam:\023C"
    "HATPARAM_CHAT_SELF\022\032\n\004chat\030\003 \001(\0132\014.Cmd.C"
    "hatCmd\"\214\002\n\nNpcChatNtf\022(\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\rCHAT_PROTOCMD\0225\n\005param\030\002 \001(\0162\016"
    ".Cmd.ChatParam:\026CHATPARAM_NPC_CHAT_NTF\0229"
    "\n\007channel\030\003 \001(\0162\025.Cmd.EGameChatChannel:\021"
    "ECHAT_CHANNEL_MIN\022\020\n\005npcid\030\004 \001(\r:\0010\022\020\n\005m"
    "sgid\030\005 \001(\r:\0010\022\035\n\006params\030\006 \003(\0132\r.Cmd.MsgP"
    "aram\022\013\n\003msg\030\007 \001(\t\022\022\n\007npcguid\030\010 \001(\004:\0010\"\314\001"
    "\n\027QueryRealtimeVoiceIDCmd\022(\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\rCHAT_PROTOCMD\022@\n\005param\030\002 \001"
    "(\0162\016.Cmd.ChatParam:!CHATPARAM_QUERY_REAL"
    "TIME_VOICE_ID\0229\n\007channel\030\003 \001(\0162\025.Cmd.EGa"
    "meChatChannel:\021ECHAT_CHANNEL_MIN\022\n\n\002id\030\004"
    " \001(\t*\355\002\n\tChatParam\022\033\n\027CHATPARAM_QUERYITE"
    "MDATA\020\001\022\034\n\030CHATPARAM_PLAYEXPRESSION\020\002\022\033\n"
    "\027CHATPARAM_QUERYUSERINFO\020\003\022\025\n\021CHATPARAM_"
    "BARRAGE\020\004\022\030\n\024CHATPARAM_BARRAGEMSG\020\005\022\022\n\016C"
    "HATPARAM_CHAT\020\006\022\026\n\022CHATPARAM_CHAT_RET\020\007\022"
    "\031\n\025CHATPARAM_QUERY_VOICE\020\010\022\031\n\025CHATPARAM_"
    "GET_VOICEID\020\n\022\031\n\025CHATPARAM_LOVE_LETTER\020\013"
    "\022\027\n\023CHATPARAM_CHAT_SELF\020\014\022\032\n\026CHATPARAM_N"
    "PC_CHAT_NTF\020\r\022%\n!CHATPARAM_QUERY_REALTIM"
    "E_VOICE_ID\020\016*\356\002\n\013EOfflineMsg\022\023\n\017EOFFLINE"
    "MSG_MIN\020\000\022\024\n\020EOFFLINEMSG_USER\020\001\022\025\n\021EOFFL"
    "INEMSG_TRADE\020\002\022\022\n\016EOFFLINEMSG_GM\020\003\022\023\n\017EO"
    "FFLINEMSG_SYS\020\004\022\024\n\020EOFFLINEMSG_SYS2\020\005\022\034\n"
    "\030EOFFLINEMSG_ADD_RELATION\020\006\022\037\n\033EOFFLINEM"
    "SG_REMOVE_RELATION\020\007\022\030\n\024EOFFLINEMSG_ADD_"
    "ITEM\020\010\022\034\n\030EOFFLINEMSG_TUTOR_REWARD\020\t\022\035\n\031"
    "EOFFLINEMSG_USER_ADD_ITEM\020\n\022\027\n\023EOFFLINEM"
    "SG_WEDDING\020\013\022\032\n\026EOFFLINEMSG_USER_QUOTA\020\014"
    "\022\023\n\017EOFFLINEMSG_MAX\020\r*O\n\020EUserAddItemTyp"
    "e\022\030\n\024EUSERADDITEMTYPE_MIN\020\000\022!\n\035EUSERADDI"
    "TEMTYPE_GUILD_DONATE\020\001*z\n\016EUserQuotaOper"
    "\022\026\n\022EUSERQUOTAOPER_MIN\020\000\022\031\n\025EUSERQUOTAOP"
    "ER_UNLOCK\020\001\022\035\n\031EUSERQUOTAOPER_UNLOCK_SUB"
    "\020\002\022\026\n\022EUSERQUOTAOPER_MAX\020\003*B\n\rEUserInfoT"
    "ype\022\026\n\022EUSERINFOTYPE_CHAT\020\000\022\031\n\025EUSERINFO"
    "TYPE_WEDDING\020\001*4\n\013EBarrageOpt\022\021\n\rEBARRAG"
    "E_OPEN\020\001\022\022\n\016EBARRAGE_CLOSE\020\002*\266\002\n\020EGameCh"
    "atChannel\022\025\n\021ECHAT_CHANNEL_MIN\020\000\022\027\n\023ECHA"
    "T_CHANNEL_ROUND\020\001\022\026\n\022ECHAT_CHANNEL_TEAM\020"
    "\002\022\027\n\023ECHAT_CHANNEL_GUILD\020\003\022\030\n\024ECHAT_CHAN"
    "NEL_FRIEND\020\004\022\027\n\023ECHAT_CHANNEL_WORLD\020\005\022\025\n"
    "\021ECHAT_CHANNEL_MAP\020\006\022\025\n\021ECHAT_CHANNEL_SY"
    "S\020\007\022\026\n\022ECHAT_CHANNEL_ROOM\020\010\022\031\n\025ECHAT_CHA"
    "NNEL_BARRAGE\020\t\022\026\n\022ECHAT_CHANNEL_CHAT\020\n\022\025"
    "\n\021ECHAT_CHANNEL_MAX\020\013", 5781);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChatCmd.proto", &protobuf_RegisterTypes);
  OfflineMsg::default_instance_ = new OfflineMsg();
  OffMsgUserAddItem::default_instance_ = new OffMsgUserAddItem();
  OffMsgUserQuotaData::default_instance_ = new OffMsgUserQuotaData();
  QueryItemData::default_instance_ = new QueryItemData();
  PlayExpressionChatCmd::default_instance_ = new PlayExpressionChatCmd();
  QueryUserInfo::default_instance_ = new QueryUserInfo();
  QueryUserInfoChatCmd::default_instance_ = new QueryUserInfoChatCmd();
  BarrageChatCmd::default_instance_ = new BarrageChatCmd();
  ColorInfo::default_instance_ = new ColorInfo();
  BarrageMsgChatCmd::default_instance_ = new BarrageMsgChatCmd();
  ChatCmd::default_instance_ = new ChatCmd();
  ChatRetCmd::default_instance_ = new ChatRetCmd();
  QueryVoiceUserCmd::default_instance_ = new QueryVoiceUserCmd();
  GetVoiceIDChatCmd::default_instance_ = new GetVoiceIDChatCmd();
  LoveLetterNtf::default_instance_ = new LoveLetterNtf();
  ChatSelfNtf::default_instance_ = new ChatSelfNtf();
  NpcChatNtf::default_instance_ = new NpcChatNtf();
  QueryRealtimeVoiceIDCmd::default_instance_ = new QueryRealtimeVoiceIDCmd();
  OfflineMsg::default_instance_->InitAsDefaultInstance();
  OffMsgUserAddItem::default_instance_->InitAsDefaultInstance();
  OffMsgUserQuotaData::default_instance_->InitAsDefaultInstance();
  QueryItemData::default_instance_->InitAsDefaultInstance();
  PlayExpressionChatCmd::default_instance_->InitAsDefaultInstance();
  QueryUserInfo::default_instance_->InitAsDefaultInstance();
  QueryUserInfoChatCmd::default_instance_->InitAsDefaultInstance();
  BarrageChatCmd::default_instance_->InitAsDefaultInstance();
  ColorInfo::default_instance_->InitAsDefaultInstance();
  BarrageMsgChatCmd::default_instance_->InitAsDefaultInstance();
  ChatCmd::default_instance_->InitAsDefaultInstance();
  ChatRetCmd::default_instance_->InitAsDefaultInstance();
  QueryVoiceUserCmd::default_instance_->InitAsDefaultInstance();
  GetVoiceIDChatCmd::default_instance_->InitAsDefaultInstance();
  LoveLetterNtf::default_instance_->InitAsDefaultInstance();
  ChatSelfNtf::default_instance_->InitAsDefaultInstance();
  NpcChatNtf::default_instance_->InitAsDefaultInstance();
  QueryRealtimeVoiceIDCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChatCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChatCmd_2eproto {
  StaticDescriptorInitializer_ChatCmd_2eproto() {
    protobuf_AddDesc_ChatCmd_2eproto();
  }
} static_descriptor_initializer_ChatCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* ChatParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatParam_descriptor_;
}
bool ChatParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EOfflineMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EOfflineMsg_descriptor_;
}
bool EOfflineMsg_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUserAddItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EUserAddItemType_descriptor_;
}
bool EUserAddItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUserQuotaOper_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EUserQuotaOper_descriptor_;
}
bool EUserQuotaOper_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUserInfoType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EUserInfoType_descriptor_;
}
bool EUserInfoType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBarrageOpt_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBarrageOpt_descriptor_;
}
bool EBarrageOpt_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGameChatChannel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGameChatChannel_descriptor_;
}
bool EGameChatChannel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineMsg::kTargetidFieldNumber;
const int OfflineMsg::kSenderidFieldNumber;
const int OfflineMsg::kTimeFieldNumber;
const int OfflineMsg::kTypeFieldNumber;
const int OfflineMsg::kSendernameFieldNumber;
const int OfflineMsg::kChatFieldNumber;
const int OfflineMsg::kItemidFieldNumber;
const int OfflineMsg::kPriceFieldNumber;
const int OfflineMsg::kCountFieldNumber;
const int OfflineMsg::kGivemoneyFieldNumber;
const int OfflineMsg::kMoneytypeFieldNumber;
const int OfflineMsg::kSysstrFieldNumber;
const int OfflineMsg::kGmcmdFieldNumber;
const int OfflineMsg::kIdFieldNumber;
const int OfflineMsg::kMsgFieldNumber;
const int OfflineMsg::kItemdataFieldNumber;
const int OfflineMsg::kSyscmdFieldNumber;
const int OfflineMsg::kTutorrewardFieldNumber;
const int OfflineMsg::kUseradditemFieldNumber;
const int OfflineMsg::kWeddingmsgFieldNumber;
const int OfflineMsg::kQuotadataFieldNumber;
#endif  // !_MSC_VER

OfflineMsg::OfflineMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OfflineMsg)
}

void OfflineMsg::InitAsDefaultInstance() {
  chat_ = const_cast< ::Cmd::ChatRetCmd*>(&::Cmd::ChatRetCmd::default_instance());
  itemdata_ = const_cast< ::Cmd::ItemData*>(&::Cmd::ItemData::default_instance());
  syscmd_ = const_cast< ::Cmd::SysMsg*>(&::Cmd::SysMsg::default_instance());
  tutorreward_ = const_cast< ::Cmd::TutorReward*>(&::Cmd::TutorReward::default_instance());
  useradditem_ = const_cast< ::Cmd::OffMsgUserAddItem*>(&::Cmd::OffMsgUserAddItem::default_instance());
  weddingmsg_ = const_cast< ::Cmd::WeddingEventMsgCCmd*>(&::Cmd::WeddingEventMsgCCmd::default_instance());
  quotadata_ = const_cast< ::Cmd::OffMsgUserQuotaData*>(&::Cmd::OffMsgUserQuotaData::default_instance());
}

OfflineMsg::OfflineMsg(const OfflineMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OfflineMsg)
}

void OfflineMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  targetid_ = GOOGLE_ULONGLONG(0);
  senderid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  type_ = 0;
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_ = NULL;
  itemid_ = 0u;
  price_ = 0u;
  count_ = 0u;
  givemoney_ = 0u;
  moneytype_ = 0;
  sysstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gmcmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemdata_ = NULL;
  syscmd_ = NULL;
  tutorreward_ = NULL;
  useradditem_ = NULL;
  weddingmsg_ = NULL;
  quotadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineMsg::~OfflineMsg() {
  // @@protoc_insertion_point(destructor:Cmd.OfflineMsg)
  SharedDtor();
}

void OfflineMsg::SharedDtor() {
  if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendername_;
  }
  if (sysstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sysstr_;
  }
  if (gmcmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmcmd_;
  }
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete chat_;
    delete itemdata_;
    delete syscmd_;
    delete tutorreward_;
    delete useradditem_;
    delete weddingmsg_;
    delete quotadata_;
  }
}

void OfflineMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineMsg_descriptor_;
}

const OfflineMsg& OfflineMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

OfflineMsg* OfflineMsg::default_instance_ = NULL;

OfflineMsg* OfflineMsg::New() const {
  return new OfflineMsg;
}

void OfflineMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OfflineMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(targetid_, type_);
    ZR_(itemid_, price_);
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sendername_->clear();
      }
    }
    if (has_chat()) {
      if (chat_ != NULL) chat_->::Cmd::ChatRetCmd::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(count_, givemoney_);
    moneytype_ = 0;
    if (has_sysstr()) {
      if (sysstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sysstr_->clear();
      }
    }
    if (has_gmcmd()) {
      if (gmcmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmcmd_->clear();
      }
    }
    id_ = GOOGLE_ULONGLONG(0);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 2031616) {
    if (has_syscmd()) {
      if (syscmd_ != NULL) syscmd_->::Cmd::SysMsg::Clear();
    }
    if (has_tutorreward()) {
      if (tutorreward_ != NULL) tutorreward_->::Cmd::TutorReward::Clear();
    }
    if (has_useradditem()) {
      if (useradditem_ != NULL) useradditem_->::Cmd::OffMsgUserAddItem::Clear();
    }
    if (has_weddingmsg()) {
      if (weddingmsg_ != NULL) weddingmsg_->::Cmd::WeddingEventMsgCCmd::Clear();
    }
    if (has_quotadata()) {
      if (quotadata_ != NULL) quotadata_->::Cmd::OffMsgUserQuotaData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OfflineMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 targetid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_senderid;
        break;
      }

      // optional uint64 senderid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_senderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &senderid_)));
          set_has_senderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.EOfflineMsg type = 4 [default = EOFFLINEMSG_MIN];
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EOfflineMsg_IsValid(value)) {
            set_type(static_cast< ::Cmd::EOfflineMsg >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sendername;
        break;
      }

      // optional string sendername = 5;
      case 5: {
        if (tag == 42) {
         parse_sendername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sendername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_price;
        break;
      }

      // optional uint32 price = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_count;
        break;
      }

      // optional uint32 count = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_givemoney;
        break;
      }

      // optional uint32 givemoney = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_givemoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &givemoney_)));
          set_has_givemoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_moneytype;
        break;
      }

      // optional .Cmd.EMoneyType moneytype = 15 [default = EMONEYTYPE_MIN];
      case 15: {
        if (tag == 120) {
         parse_moneytype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EMoneyType_IsValid(value)) {
            set_moneytype(static_cast< ::Cmd::EMoneyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_gmcmd;
        break;
      }

      // optional string gmcmd = 16;
      case 16: {
        if (tag == 130) {
         parse_gmcmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmcmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmcmd().data(), this->gmcmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmcmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_id;
        break;
      }

      // optional uint64 id = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_msg;
        break;
      }

      // optional string msg = 18;
      case 18: {
        if (tag == 146) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_chat;
        break;
      }

      // optional .Cmd.ChatRetCmd chat = 19;
      case 19: {
        if (tag == 154) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_sysstr;
        break;
      }

      // optional string sysstr = 20;
      case 20: {
        if (tag == 162) {
         parse_sysstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sysstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sysstr().data(), this->sysstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sysstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_syscmd;
        break;
      }

      // optional .Cmd.SysMsg syscmd = 21;
      case 21: {
        if (tag == 170) {
         parse_syscmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_itemdata;
        break;
      }

      // optional .Cmd.ItemData itemdata = 22;
      case 22: {
        if (tag == 178) {
         parse_itemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_tutorreward;
        break;
      }

      // optional .Cmd.TutorReward tutorreward = 23;
      case 23: {
        if (tag == 186) {
         parse_tutorreward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tutorreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_useradditem;
        break;
      }

      // optional .Cmd.OffMsgUserAddItem useradditem = 24;
      case 24: {
        if (tag == 194) {
         parse_useradditem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_useradditem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_weddingmsg;
        break;
      }

      // optional .Cmd.WeddingEventMsgCCmd weddingmsg = 25;
      case 25: {
        if (tag == 202) {
         parse_weddingmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weddingmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_quotadata;
        break;
      }

      // optional .Cmd.OffMsgUserQuotaData quotadata = 26;
      case 26: {
        if (tag == 210) {
         parse_quotadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quotadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OfflineMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OfflineMsg)
  return false;
#undef DO_
}

void OfflineMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OfflineMsg)
  // optional uint64 targetid = 1 [default = 0];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->targetid(), output);
  }

  // optional uint64 senderid = 2 [default = 0];
  if (has_senderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->senderid(), output);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional .Cmd.EOfflineMsg type = 4 [default = EOFFLINEMSG_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional string sendername = 5;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sendername(), output);
  }

  // optional uint32 itemid = 11 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->itemid(), output);
  }

  // optional uint32 price = 12 [default = 0];
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->price(), output);
  }

  // optional uint32 count = 13 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->count(), output);
  }

  // optional uint32 givemoney = 14 [default = 0];
  if (has_givemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->givemoney(), output);
  }

  // optional .Cmd.EMoneyType moneytype = 15 [default = EMONEYTYPE_MIN];
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->moneytype(), output);
  }

  // optional string gmcmd = 16;
  if (has_gmcmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmcmd().data(), this->gmcmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmcmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->gmcmd(), output);
  }

  // optional uint64 id = 17 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->id(), output);
  }

  // optional string msg = 18;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->msg(), output);
  }

  // optional .Cmd.ChatRetCmd chat = 19;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->chat(), output);
  }

  // optional string sysstr = 20;
  if (has_sysstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sysstr().data(), this->sysstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sysstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->sysstr(), output);
  }

  // optional .Cmd.SysMsg syscmd = 21;
  if (has_syscmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->syscmd(), output);
  }

  // optional .Cmd.ItemData itemdata = 22;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->itemdata(), output);
  }

  // optional .Cmd.TutorReward tutorreward = 23;
  if (has_tutorreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->tutorreward(), output);
  }

  // optional .Cmd.OffMsgUserAddItem useradditem = 24;
  if (has_useradditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->useradditem(), output);
  }

  // optional .Cmd.WeddingEventMsgCCmd weddingmsg = 25;
  if (has_weddingmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->weddingmsg(), output);
  }

  // optional .Cmd.OffMsgUserQuotaData quotadata = 26;
  if (has_quotadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->quotadata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OfflineMsg)
}

::google::protobuf::uint8* OfflineMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OfflineMsg)
  // optional uint64 targetid = 1 [default = 0];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->targetid(), target);
  }

  // optional uint64 senderid = 2 [default = 0];
  if (has_senderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->senderid(), target);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional .Cmd.EOfflineMsg type = 4 [default = EOFFLINEMSG_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional string sendername = 5;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sendername(), target);
  }

  // optional uint32 itemid = 11 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->itemid(), target);
  }

  // optional uint32 price = 12 [default = 0];
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->price(), target);
  }

  // optional uint32 count = 13 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->count(), target);
  }

  // optional uint32 givemoney = 14 [default = 0];
  if (has_givemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->givemoney(), target);
  }

  // optional .Cmd.EMoneyType moneytype = 15 [default = EMONEYTYPE_MIN];
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->moneytype(), target);
  }

  // optional string gmcmd = 16;
  if (has_gmcmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmcmd().data(), this->gmcmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmcmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->gmcmd(), target);
  }

  // optional uint64 id = 17 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->id(), target);
  }

  // optional string msg = 18;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->msg(), target);
  }

  // optional .Cmd.ChatRetCmd chat = 19;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->chat(), target);
  }

  // optional string sysstr = 20;
  if (has_sysstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sysstr().data(), this->sysstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sysstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->sysstr(), target);
  }

  // optional .Cmd.SysMsg syscmd = 21;
  if (has_syscmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->syscmd(), target);
  }

  // optional .Cmd.ItemData itemdata = 22;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->itemdata(), target);
  }

  // optional .Cmd.TutorReward tutorreward = 23;
  if (has_tutorreward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->tutorreward(), target);
  }

  // optional .Cmd.OffMsgUserAddItem useradditem = 24;
  if (has_useradditem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->useradditem(), target);
  }

  // optional .Cmd.WeddingEventMsgCCmd weddingmsg = 25;
  if (has_weddingmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->weddingmsg(), target);
  }

  // optional .Cmd.OffMsgUserQuotaData quotadata = 26;
  if (has_quotadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->quotadata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OfflineMsg)
  return target;
}

int OfflineMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 targetid = 1 [default = 0];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional uint64 senderid = 2 [default = 0];
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->senderid());
    }

    // optional uint32 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .Cmd.EOfflineMsg type = 4 [default = EOFFLINEMSG_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string sendername = 5;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // optional .Cmd.ChatRetCmd chat = 19;
    if (has_chat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat());
    }

    // optional uint32 itemid = 11 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 price = 12 [default = 0];
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 count = 13 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 givemoney = 14 [default = 0];
    if (has_givemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->givemoney());
    }

    // optional .Cmd.EMoneyType moneytype = 15 [default = EMONEYTYPE_MIN];
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->moneytype());
    }

    // optional string sysstr = 20;
    if (has_sysstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sysstr());
    }

    // optional string gmcmd = 16;
    if (has_gmcmd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmcmd());
    }

    // optional uint64 id = 17 [default = 0];
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string msg = 18;
    if (has_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional .Cmd.ItemData itemdata = 22;
    if (has_itemdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Cmd.SysMsg syscmd = 21;
    if (has_syscmd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscmd());
    }

    // optional .Cmd.TutorReward tutorreward = 23;
    if (has_tutorreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tutorreward());
    }

    // optional .Cmd.OffMsgUserAddItem useradditem = 24;
    if (has_useradditem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->useradditem());
    }

    // optional .Cmd.WeddingEventMsgCCmd weddingmsg = 25;
    if (has_weddingmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weddingmsg());
    }

    // optional .Cmd.OffMsgUserQuotaData quotadata = 26;
    if (has_quotadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quotadata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineMsg::MergeFrom(const OfflineMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_senderid()) {
      set_senderid(from.senderid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_chat()) {
      mutable_chat()->::Cmd::ChatRetCmd::MergeFrom(from.chat());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_givemoney()) {
      set_givemoney(from.givemoney());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_sysstr()) {
      set_sysstr(from.sysstr());
    }
    if (from.has_gmcmd()) {
      set_gmcmd(from.gmcmd());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_itemdata()) {
      mutable_itemdata()->::Cmd::ItemData::MergeFrom(from.itemdata());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_syscmd()) {
      mutable_syscmd()->::Cmd::SysMsg::MergeFrom(from.syscmd());
    }
    if (from.has_tutorreward()) {
      mutable_tutorreward()->::Cmd::TutorReward::MergeFrom(from.tutorreward());
    }
    if (from.has_useradditem()) {
      mutable_useradditem()->::Cmd::OffMsgUserAddItem::MergeFrom(from.useradditem());
    }
    if (from.has_weddingmsg()) {
      mutable_weddingmsg()->::Cmd::WeddingEventMsgCCmd::MergeFrom(from.weddingmsg());
    }
    if (from.has_quotadata()) {
      mutable_quotadata()->::Cmd::OffMsgUserQuotaData::MergeFrom(from.quotadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineMsg::CopyFrom(const OfflineMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineMsg::IsInitialized() const {

  if (has_chat()) {
    if (!this->chat().IsInitialized()) return false;
  }
  return true;
}

void OfflineMsg::Swap(OfflineMsg* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(senderid_, other->senderid_);
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(sendername_, other->sendername_);
    std::swap(chat_, other->chat_);
    std::swap(itemid_, other->itemid_);
    std::swap(price_, other->price_);
    std::swap(count_, other->count_);
    std::swap(givemoney_, other->givemoney_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(sysstr_, other->sysstr_);
    std::swap(gmcmd_, other->gmcmd_);
    std::swap(id_, other->id_);
    std::swap(msg_, other->msg_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(syscmd_, other->syscmd_);
    std::swap(tutorreward_, other->tutorreward_);
    std::swap(useradditem_, other->useradditem_);
    std::swap(weddingmsg_, other->weddingmsg_);
    std::swap(quotadata_, other->quotadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineMsg_descriptor_;
  metadata.reflection = OfflineMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffMsgUserAddItem::kTypeFieldNumber;
const int OffMsgUserAddItem::kItemsFieldNumber;
#endif  // !_MSC_VER

OffMsgUserAddItem::OffMsgUserAddItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OffMsgUserAddItem)
}

void OffMsgUserAddItem::InitAsDefaultInstance() {
}

OffMsgUserAddItem::OffMsgUserAddItem(const OffMsgUserAddItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OffMsgUserAddItem)
}

void OffMsgUserAddItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffMsgUserAddItem::~OffMsgUserAddItem() {
  // @@protoc_insertion_point(destructor:Cmd.OffMsgUserAddItem)
  SharedDtor();
}

void OffMsgUserAddItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffMsgUserAddItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffMsgUserAddItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffMsgUserAddItem_descriptor_;
}

const OffMsgUserAddItem& OffMsgUserAddItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

OffMsgUserAddItem* OffMsgUserAddItem::default_instance_ = NULL;

OffMsgUserAddItem* OffMsgUserAddItem::New() const {
  return new OffMsgUserAddItem;
}

void OffMsgUserAddItem::Clear() {
  type_ = 0;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffMsgUserAddItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OffMsgUserAddItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EUserAddItemType type = 1 [default = EUSERADDITEMTYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EUserAddItemType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EUserAddItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemInfo items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OffMsgUserAddItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OffMsgUserAddItem)
  return false;
#undef DO_
}

void OffMsgUserAddItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OffMsgUserAddItem)
  // optional .Cmd.EUserAddItemType type = 1 [default = EUSERADDITEMTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .Cmd.ItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OffMsgUserAddItem)
}

::google::protobuf::uint8* OffMsgUserAddItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OffMsgUserAddItem)
  // optional .Cmd.EUserAddItemType type = 1 [default = EUSERADDITEMTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .Cmd.ItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OffMsgUserAddItem)
  return target;
}

int OffMsgUserAddItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EUserAddItemType type = 1 [default = EUSERADDITEMTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.ItemInfo items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffMsgUserAddItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffMsgUserAddItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffMsgUserAddItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffMsgUserAddItem::MergeFrom(const OffMsgUserAddItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffMsgUserAddItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffMsgUserAddItem::CopyFrom(const OffMsgUserAddItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffMsgUserAddItem::IsInitialized() const {

  return true;
}

void OffMsgUserAddItem::Swap(OffMsgUserAddItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffMsgUserAddItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffMsgUserAddItem_descriptor_;
  metadata.reflection = OffMsgUserAddItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffMsgUserQuotaData::kQuotaFieldNumber;
const int OffMsgUserQuotaData::kOperFieldNumber;
const int OffMsgUserQuotaData::kTypeFieldNumber;
#endif  // !_MSC_VER

OffMsgUserQuotaData::OffMsgUserQuotaData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OffMsgUserQuotaData)
}

void OffMsgUserQuotaData::InitAsDefaultInstance() {
}

OffMsgUserQuotaData::OffMsgUserQuotaData(const OffMsgUserQuotaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OffMsgUserQuotaData)
}

void OffMsgUserQuotaData::SharedCtor() {
  _cached_size_ = 0;
  quota_ = GOOGLE_ULONGLONG(0);
  oper_ = 0;
  type_ = 12;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffMsgUserQuotaData::~OffMsgUserQuotaData() {
  // @@protoc_insertion_point(destructor:Cmd.OffMsgUserQuotaData)
  SharedDtor();
}

void OffMsgUserQuotaData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffMsgUserQuotaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffMsgUserQuotaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffMsgUserQuotaData_descriptor_;
}

const OffMsgUserQuotaData& OffMsgUserQuotaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

OffMsgUserQuotaData* OffMsgUserQuotaData::default_instance_ = NULL;

OffMsgUserQuotaData* OffMsgUserQuotaData::New() const {
  return new OffMsgUserQuotaData;
}

void OffMsgUserQuotaData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OffMsgUserQuotaData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(quota_, oper_);
    type_ = 12;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffMsgUserQuotaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OffMsgUserQuotaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 quota = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_)));
          set_has_quota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oper;
        break;
      }

      // optional .Cmd.EUserQuotaOper oper = 2 [default = EUSERQUOTAOPER_MIN];
      case 2: {
        if (tag == 16) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EUserQuotaOper_IsValid(value)) {
            set_oper(static_cast< ::Cmd::EUserQuotaOper >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EQuotaType type = 3 [default = EQuotaType_U_Give_Trade];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQuotaType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EQuotaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OffMsgUserQuotaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OffMsgUserQuotaData)
  return false;
#undef DO_
}

void OffMsgUserQuotaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OffMsgUserQuotaData)
  // optional uint64 quota = 1 [default = 0];
  if (has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quota(), output);
  }

  // optional .Cmd.EUserQuotaOper oper = 2 [default = EUSERQUOTAOPER_MIN];
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->oper(), output);
  }

  // optional .Cmd.EQuotaType type = 3 [default = EQuotaType_U_Give_Trade];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OffMsgUserQuotaData)
}

::google::protobuf::uint8* OffMsgUserQuotaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OffMsgUserQuotaData)
  // optional uint64 quota = 1 [default = 0];
  if (has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quota(), target);
  }

  // optional .Cmd.EUserQuotaOper oper = 2 [default = EUSERQUOTAOPER_MIN];
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->oper(), target);
  }

  // optional .Cmd.EQuotaType type = 3 [default = EQuotaType_U_Give_Trade];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OffMsgUserQuotaData)
  return target;
}

int OffMsgUserQuotaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 quota = 1 [default = 0];
    if (has_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota());
    }

    // optional .Cmd.EUserQuotaOper oper = 2 [default = EUSERQUOTAOPER_MIN];
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional .Cmd.EQuotaType type = 3 [default = EQuotaType_U_Give_Trade];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffMsgUserQuotaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffMsgUserQuotaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffMsgUserQuotaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffMsgUserQuotaData::MergeFrom(const OffMsgUserQuotaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quota()) {
      set_quota(from.quota());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffMsgUserQuotaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffMsgUserQuotaData::CopyFrom(const OffMsgUserQuotaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffMsgUserQuotaData::IsInitialized() const {

  return true;
}

void OffMsgUserQuotaData::Swap(OffMsgUserQuotaData* other) {
  if (other != this) {
    std::swap(quota_, other->quota_);
    std::swap(oper_, other->oper_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffMsgUserQuotaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffMsgUserQuotaData_descriptor_;
  metadata.reflection = OffMsgUserQuotaData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryItemData::kCmdFieldNumber;
const int QueryItemData::kParamFieldNumber;
const int QueryItemData::kGuidFieldNumber;
const int QueryItemData::kDataFieldNumber;
#endif  // !_MSC_VER

QueryItemData::QueryItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryItemData)
}

void QueryItemData::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::ItemData*>(&::Cmd::ItemData::default_instance());
}

QueryItemData::QueryItemData(const QueryItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryItemData)
}

void QueryItemData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 59;
  param_ = 1;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryItemData::~QueryItemData() {
  // @@protoc_insertion_point(destructor:Cmd.QueryItemData)
  SharedDtor();
}

void QueryItemData::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void QueryItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryItemData_descriptor_;
}

const QueryItemData& QueryItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

QueryItemData* QueryItemData::default_instance_ = NULL;

QueryItemData* QueryItemData::New() const {
  return new QueryItemData;
}

void QueryItemData::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 59;
    param_ = 1;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::ItemData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryItemData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERYITEMDATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ChatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ChatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guid;
        break;
      }

      // optional string guid = 3;
      case 3: {
        if (tag == 26) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .Cmd.ItemData data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryItemData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryItemData)
  return false;
#undef DO_
}

void QueryItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryItemData)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERYITEMDATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guid(), output);
  }

  // optional .Cmd.ItemData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryItemData)
}

::google::protobuf::uint8* QueryItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryItemData)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERYITEMDATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guid(), target);
  }

  // optional .Cmd.ItemData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryItemData)
  return target;
}

int QueryItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERYITEMDATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional .Cmd.ItemData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryItemData::MergeFrom(const QueryItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::ItemData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryItemData::CopyFrom(const QueryItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryItemData::IsInitialized() const {

  return true;
}

void QueryItemData::Swap(QueryItemData* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryItemData_descriptor_;
  metadata.reflection = QueryItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayExpressionChatCmd::kCmdFieldNumber;
const int PlayExpressionChatCmd::kParamFieldNumber;
const int PlayExpressionChatCmd::kCharidFieldNumber;
const int PlayExpressionChatCmd::kExpressionidFieldNumber;
#endif  // !_MSC_VER

PlayExpressionChatCmd::PlayExpressionChatCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PlayExpressionChatCmd)
}

void PlayExpressionChatCmd::InitAsDefaultInstance() {
}

PlayExpressionChatCmd::PlayExpressionChatCmd(const PlayExpressionChatCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PlayExpressionChatCmd)
}

void PlayExpressionChatCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 59;
  param_ = 2;
  charid_ = GOOGLE_ULONGLONG(0);
  expressionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayExpressionChatCmd::~PlayExpressionChatCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PlayExpressionChatCmd)
  SharedDtor();
}

void PlayExpressionChatCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayExpressionChatCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayExpressionChatCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayExpressionChatCmd_descriptor_;
}

const PlayExpressionChatCmd& PlayExpressionChatCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

PlayExpressionChatCmd* PlayExpressionChatCmd::default_instance_ = NULL;

PlayExpressionChatCmd* PlayExpressionChatCmd::New() const {
  return new PlayExpressionChatCmd;
}

void PlayExpressionChatCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayExpressionChatCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, expressionid_);
    cmd_ = 59;
    param_ = 2;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayExpressionChatCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PlayExpressionChatCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_PLAYEXPRESSION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ChatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ChatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expressionid;
        break;
      }

      // optional uint32 expressionid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_expressionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expressionid_)));
          set_has_expressionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PlayExpressionChatCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PlayExpressionChatCmd)
  return false;
#undef DO_
}

void PlayExpressionChatCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PlayExpressionChatCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_PLAYEXPRESSION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 expressionid = 4 [default = 0];
  if (has_expressionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->expressionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PlayExpressionChatCmd)
}

::google::protobuf::uint8* PlayExpressionChatCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PlayExpressionChatCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_PLAYEXPRESSION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 expressionid = 4 [default = 0];
  if (has_expressionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->expressionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PlayExpressionChatCmd)
  return target;
}

int PlayExpressionChatCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_PLAYEXPRESSION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 expressionid = 4 [default = 0];
    if (has_expressionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expressionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayExpressionChatCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayExpressionChatCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayExpressionChatCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayExpressionChatCmd::MergeFrom(const PlayExpressionChatCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_expressionid()) {
      set_expressionid(from.expressionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayExpressionChatCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayExpressionChatCmd::CopyFrom(const PlayExpressionChatCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayExpressionChatCmd::IsInitialized() const {

  return true;
}

void PlayExpressionChatCmd::Swap(PlayExpressionChatCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(expressionid_, other->expressionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayExpressionChatCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayExpressionChatCmd_descriptor_;
  metadata.reflection = PlayExpressionChatCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryUserInfo::kCharidFieldNumber;
const int QueryUserInfo::kGuildidFieldNumber;
const int QueryUserInfo::kNameFieldNumber;
const int QueryUserInfo::kGuildnameFieldNumber;
const int QueryUserInfo::kGuildportraitFieldNumber;
const int QueryUserInfo::kGuildjobFieldNumber;
const int QueryUserInfo::kDatasFieldNumber;
const int QueryUserInfo::kAttrsFieldNumber;
const int QueryUserInfo::kEquipFieldNumber;
const int QueryUserInfo::kFashionFieldNumber;
const int QueryUserInfo::kHighrefineFieldNumber;
const int QueryUserInfo::kPartnerFieldNumber;
#endif  // !_MSC_VER

QueryUserInfo::QueryUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryUserInfo)
}

void QueryUserInfo::InitAsDefaultInstance() {
}

QueryUserInfo::QueryUserInfo(const QueryUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryUserInfo)
}

void QueryUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  guildid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildportrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildjob_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUserInfo::~QueryUserInfo() {
  // @@protoc_insertion_point(destructor:Cmd.QueryUserInfo)
  SharedDtor();
}

void QueryUserInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildportrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildportrait_;
  }
  if (guildjob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildjob_;
  }
  if (partner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete partner_;
  }
  if (this != default_instance_) {
  }
}

void QueryUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserInfo_descriptor_;
}

const QueryUserInfo& QueryUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

QueryUserInfo* QueryUserInfo::default_instance_ = NULL;

QueryUserInfo* QueryUserInfo::New() const {
  return new QueryUserInfo;
}

void QueryUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, guildid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_guildportrait()) {
      if (guildportrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildportrait_->clear();
      }
    }
    if (has_guildjob()) {
      if (guildjob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildjob_->clear();
      }
    }
  }
  if (has_partner()) {
    if (partner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      partner_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  attrs_.Clear();
  equip_.Clear();
  fashion_.Clear();
  highrefine_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guildname;
        break;
      }

      // optional string guildname = 4;
      case 4: {
        if (tag == 34) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_guildportrait;
        break;
      }

      // optional string guildportrait = 5;
      case 5: {
        if (tag == 42) {
         parse_guildportrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildportrait()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildportrait().data(), this->guildportrait().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildportrait");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_guildjob;
        break;
      }

      // optional string guildjob = 6;
      case 6: {
        if (tag == 50) {
         parse_guildjob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildjob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildjob().data(), this->guildjob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildjob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_datas;
        break;
      }

      // repeated .Cmd.UserData datas = 7;
      case 7: {
        if (tag == 58) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_datas;
        if (input->ExpectTag(66)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttr attrs = 8;
      case 8: {
        if (tag == 66) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_attrs;
        if (input->ExpectTag(74)) goto parse_equip;
        break;
      }

      // repeated .Cmd.ItemData equip = 9;
      case 9: {
        if (tag == 74) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_equip;
        if (input->ExpectTag(82)) goto parse_highrefine;
        break;
      }

      // repeated .Cmd.HighRefineData highrefine = 10;
      case 10: {
        if (tag == 82) {
         parse_highrefine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_highrefine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_highrefine;
        if (input->ExpectTag(90)) goto parse_partner;
        break;
      }

      // optional string partner = 11;
      case 11: {
        if (tag == 90) {
         parse_partner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partner().data(), this->partner().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "partner");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_fashion;
        break;
      }

      // repeated .Cmd.ItemData fashion = 12;
      case 12: {
        if (tag == 98) {
         parse_fashion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fashion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_fashion;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryUserInfo)
  return false;
#undef DO_
}

void QueryUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryUserInfo)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint64 guildid = 2 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string guildname = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->guildname(), output);
  }

  // optional string guildportrait = 5;
  if (has_guildportrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildportrait().data(), this->guildportrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildportrait");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->guildportrait(), output);
  }

  // optional string guildjob = 6;
  if (has_guildjob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildjob().data(), this->guildjob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildjob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->guildjob(), output);
  }

  // repeated .Cmd.UserData datas = 7;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->datas(i), output);
  }

  // repeated .Cmd.UserAttr attrs = 8;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attrs(i), output);
  }

  // repeated .Cmd.ItemData equip = 9;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->equip(i), output);
  }

  // repeated .Cmd.HighRefineData highrefine = 10;
  for (int i = 0; i < this->highrefine_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->highrefine(i), output);
  }

  // optional string partner = 11;
  if (has_partner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partner().data(), this->partner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "partner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->partner(), output);
  }

  // repeated .Cmd.ItemData fashion = 12;
  for (int i = 0; i < this->fashion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->fashion(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryUserInfo)
}

::google::protobuf::uint8* QueryUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryUserInfo)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint64 guildid = 2 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string guildname = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildname(), target);
  }

  // optional string guildportrait = 5;
  if (has_guildportrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildportrait().data(), this->guildportrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildportrait");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guildportrait(), target);
  }

  // optional string guildjob = 6;
  if (has_guildjob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildjob().data(), this->guildjob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildjob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guildjob(), target);
  }

  // repeated .Cmd.UserData datas = 7;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->datas(i), target);
  }

  // repeated .Cmd.UserAttr attrs = 8;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attrs(i), target);
  }

  // repeated .Cmd.ItemData equip = 9;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->equip(i), target);
  }

  // repeated .Cmd.HighRefineData highrefine = 10;
  for (int i = 0; i < this->highrefine_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->highrefine(i), target);
  }

  // optional string partner = 11;
  if (has_partner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partner().data(), this->partner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "partner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->partner(), target);
  }

  // repeated .Cmd.ItemData fashion = 12;
  for (int i = 0; i < this->fashion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->fashion(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryUserInfo)
  return target;
}

int QueryUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 guildid = 2 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string guildname = 4;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string guildportrait = 5;
    if (has_guildportrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildportrait());
    }

    // optional string guildjob = 6;
    if (has_guildjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildjob());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional string partner = 11;
    if (has_partner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partner());
    }

  }
  // repeated .Cmd.UserData datas = 7;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.UserAttr attrs = 8;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  // repeated .Cmd.ItemData equip = 9;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated .Cmd.ItemData fashion = 12;
  total_size += 1 * this->fashion_size();
  for (int i = 0; i < this->fashion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fashion(i));
  }

  // repeated .Cmd.HighRefineData highrefine = 10;
  total_size += 1 * this->highrefine_size();
  for (int i = 0; i < this->highrefine_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->highrefine(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryUserInfo::MergeFrom(const QueryUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  attrs_.MergeFrom(from.attrs_);
  equip_.MergeFrom(from.equip_);
  fashion_.MergeFrom(from.fashion_);
  highrefine_.MergeFrom(from.highrefine_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildportrait()) {
      set_guildportrait(from.guildportrait());
    }
    if (from.has_guildjob()) {
      set_guildjob(from.guildjob());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_partner()) {
      set_partner(from.partner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserInfo::CopyFrom(const QueryUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  return true;
}

void QueryUserInfo::Swap(QueryUserInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(guildid_, other->guildid_);
    std::swap(name_, other->name_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildportrait_, other->guildportrait_);
    std::swap(guildjob_, other->guildjob_);
    datas_.Swap(&other->datas_);
    attrs_.Swap(&other->attrs_);
    equip_.Swap(&other->equip_);
    fashion_.Swap(&other->fashion_);
    highrefine_.Swap(&other->highrefine_);
    std::swap(partner_, other->partner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserInfo_descriptor_;
  metadata.reflection = QueryUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryUserInfoChatCmd::kCmdFieldNumber;
const int QueryUserInfoChatCmd::kParamFieldNumber;
const int QueryUserInfoChatCmd::kCharidFieldNumber;
const int QueryUserInfoChatCmd::kMsgidFieldNumber;
const int QueryUserInfoChatCmd::kTypeFieldNumber;
const int QueryUserInfoChatCmd::kInfoFieldNumber;
#endif  // !_MSC_VER

QueryUserInfoChatCmd::QueryUserInfoChatCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryUserInfoChatCmd)
}

void QueryUserInfoChatCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::QueryUserInfo*>(&::Cmd::QueryUserInfo::default_instance());
}

QueryUserInfoChatCmd::QueryUserInfoChatCmd(const QueryUserInfoChatCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryUserInfoChatCmd)
}

void QueryUserInfoChatCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 59;
  param_ = 3;
  charid_ = GOOGLE_ULONGLONG(0);
  msgid_ = 0u;
  type_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUserInfoChatCmd::~QueryUserInfoChatCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryUserInfoChatCmd)
  SharedDtor();
}

void QueryUserInfoChatCmd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void QueryUserInfoChatCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserInfoChatCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserInfoChatCmd_descriptor_;
}

const QueryUserInfoChatCmd& QueryUserInfoChatCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

QueryUserInfoChatCmd* QueryUserInfoChatCmd::default_instance_ = NULL;

QueryUserInfoChatCmd* QueryUserInfoChatCmd::New() const {
  return new QueryUserInfoChatCmd;
}

void QueryUserInfoChatCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryUserInfoChatCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, type_);
    cmd_ = 59;
    param_ = 3;
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::QueryUserInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryUserInfoChatCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryUserInfoChatCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERYUSERINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ChatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ChatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .Cmd.QueryUserInfo info = 5;
      case 5: {
        if (tag == 42) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .Cmd.EUserInfoType type = 6 [default = EUSERINFOTYPE_CHAT];
      case 6: {
        if (tag == 48) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EUserInfoType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EUserInfoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryUserInfoChatCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryUserInfoChatCmd)
  return false;
#undef DO_
}

void QueryUserInfoChatCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryUserInfoChatCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERYUSERINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 msgid = 4 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msgid(), output);
  }

  // optional .Cmd.QueryUserInfo info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(), output);
  }

  // optional .Cmd.EUserInfoType type = 6 [default = EUSERINFOTYPE_CHAT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryUserInfoChatCmd)
}

::google::protobuf::uint8* QueryUserInfoChatCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryUserInfoChatCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERYUSERINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 msgid = 4 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msgid(), target);
  }

  // optional .Cmd.QueryUserInfo info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(), target);
  }

  // optional .Cmd.EUserInfoType type = 6 [default = EUSERINFOTYPE_CHAT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryUserInfoChatCmd)
  return target;
}

int QueryUserInfoChatCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERYUSERINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 msgid = 4 [default = 0];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional .Cmd.EUserInfoType type = 6 [default = EUSERINFOTYPE_CHAT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Cmd.QueryUserInfo info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserInfoChatCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryUserInfoChatCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryUserInfoChatCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryUserInfoChatCmd::MergeFrom(const QueryUserInfoChatCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::QueryUserInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryUserInfoChatCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserInfoChatCmd::CopyFrom(const QueryUserInfoChatCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserInfoChatCmd::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void QueryUserInfoChatCmd::Swap(QueryUserInfoChatCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryUserInfoChatCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserInfoChatCmd_descriptor_;
  metadata.reflection = QueryUserInfoChatCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BarrageChatCmd::kCmdFieldNumber;
const int BarrageChatCmd::kParamFieldNumber;
const int BarrageChatCmd::kOptFieldNumber;
#endif  // !_MSC_VER

BarrageChatCmd::BarrageChatCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BarrageChatCmd)
}

void BarrageChatCmd::InitAsDefaultInstance() {
}

BarrageChatCmd::BarrageChatCmd(const BarrageChatCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BarrageChatCmd)
}

void BarrageChatCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 59;
  param_ = 4;
  opt_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BarrageChatCmd::~BarrageChatCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BarrageChatCmd)
  SharedDtor();
}

void BarrageChatCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BarrageChatCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BarrageChatCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BarrageChatCmd_descriptor_;
}

const BarrageChatCmd& BarrageChatCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

BarrageChatCmd* BarrageChatCmd::default_instance_ = NULL;

BarrageChatCmd* BarrageChatCmd::New() const {
  return new BarrageChatCmd;
}

void BarrageChatCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 59;
    param_ = 4;
    opt_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BarrageChatCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BarrageChatCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_BARRAGE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ChatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ChatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opt;
        break;
      }

      // optional .Cmd.EBarrageOpt opt = 3 [default = EBARRAGE_CLOSE];
      case 3: {
        if (tag == 24) {
         parse_opt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EBarrageOpt_IsValid(value)) {
            set_opt(static_cast< ::Cmd::EBarrageOpt >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BarrageChatCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BarrageChatCmd)
  return false;
#undef DO_
}

void BarrageChatCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BarrageChatCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_BARRAGE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EBarrageOpt opt = 3 [default = EBARRAGE_CLOSE];
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BarrageChatCmd)
}

::google::protobuf::uint8* BarrageChatCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BarrageChatCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_BARRAGE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EBarrageOpt opt = 3 [default = EBARRAGE_CLOSE];
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BarrageChatCmd)
  return target;
}

int BarrageChatCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_BARRAGE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EBarrageOpt opt = 3 [default = EBARRAGE_CLOSE];
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BarrageChatCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BarrageChatCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BarrageChatCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BarrageChatCmd::MergeFrom(const BarrageChatCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BarrageChatCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarrageChatCmd::CopyFrom(const BarrageChatCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarrageChatCmd::IsInitialized() const {

  return true;
}

void BarrageChatCmd::Swap(BarrageChatCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BarrageChatCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BarrageChatCmd_descriptor_;
  metadata.reflection = BarrageChatCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColorInfo::kRFieldNumber;
const int ColorInfo::kGFieldNumber;
const int ColorInfo::kBFieldNumber;
#endif  // !_MSC_VER

ColorInfo::ColorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ColorInfo)
}

void ColorInfo::InitAsDefaultInstance() {
}

ColorInfo::ColorInfo(const ColorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ColorInfo)
}

void ColorInfo::SharedCtor() {
  _cached_size_ = 0;
  r_ = 255u;
  g_ = 255u;
  b_ = 255u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColorInfo::~ColorInfo() {
  // @@protoc_insertion_point(destructor:Cmd.ColorInfo)
  SharedDtor();
}

void ColorInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColorInfo_descriptor_;
}

const ColorInfo& ColorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

ColorInfo* ColorInfo::default_instance_ = NULL;

ColorInfo* ColorInfo::New() const {
  return new ColorInfo;
}

void ColorInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    r_ = 255u;
    g_ = 255u;
    b_ = 255u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ColorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 r = 1 [default = 255];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_g;
        break;
      }

      // optional uint32 g = 2 [default = 255];
      case 2: {
        if (tag == 16) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_b;
        break;
      }

      // optional uint32 b = 3 [default = 255];
      case 3: {
        if (tag == 24) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ColorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ColorInfo)
  return false;
#undef DO_
}

void ColorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ColorInfo)
  // optional uint32 r = 1 [default = 255];
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->r(), output);
  }

  // optional uint32 g = 2 [default = 255];
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->g(), output);
  }

  // optional uint32 b = 3 [default = 255];
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ColorInfo)
}

::google::protobuf::uint8* ColorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ColorInfo)
  // optional uint32 r = 1 [default = 255];
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->r(), target);
  }

  // optional uint32 g = 2 [default = 255];
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->g(), target);
  }

  // optional uint32 b = 3 [default = 255];
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ColorInfo)
  return target;
}

int ColorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 r = 1 [default = 255];
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // optional uint32 g = 2 [default = 255];
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->g());
    }

    // optional uint32 b = 3 [default = 255];
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColorInfo::MergeFrom(const ColorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorInfo::CopyFrom(const ColorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorInfo::IsInitialized() const {

  return true;
}

void ColorInfo::Swap(ColorInfo* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColorInfo_descriptor_;
  metadata.reflection = ColorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BarrageMsgChatCmd::kCmdFieldNumber;
const int BarrageMsgChatCmd::kParamFieldNumber;
const int BarrageMsgChatCmd::kStrFieldNumber;
const int BarrageMsgChatCmd::kMsgposFieldNumber;
const int BarrageMsgChatCmd::kClrFieldNumber;
const int BarrageMsgChatCmd::kSpeedFieldNumber;
#endif  // !_MSC_VER

BarrageMsgChatCmd::BarrageMsgChatCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BarrageMsgChatCmd)
}

void BarrageMsgChatCmd::InitAsDefaultInstance() {
  msgpos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
  clr_ = const_cast< ::Cmd::ColorInfo*>(&::Cmd::ColorInfo::default_instance());
}

BarrageMsgChatCmd::BarrageMsgChatCmd(const BarrageMsgChatCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BarrageMsgChatCmd)
}

void BarrageMsgChatCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 59;
  param_ = 5;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgpos_ = NULL;
  clr_ = NULL;
  speed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BarrageMsgChatCmd::~BarrageMsgChatCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BarrageMsgChatCmd)
  SharedDtor();
}

void BarrageMsgChatCmd::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (this != default_instance_) {
    delete msgpos_;
    delete clr_;
  }
}

void BarrageMsgChatCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BarrageMsgChatCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BarrageMsgChatCmd_descriptor_;
}

const BarrageMsgChatCmd& BarrageMsgChatCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

BarrageMsgChatCmd* BarrageMsgChatCmd::default_instance_ = NULL;

BarrageMsgChatCmd* BarrageMsgChatCmd::New() const {
  return new BarrageMsgChatCmd;
}

void BarrageMsgChatCmd::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    cmd_ = 59;
    param_ = 5;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_->clear();
      }
    }
    if (has_msgpos()) {
      if (msgpos_ != NULL) msgpos_->::Cmd::ScenePos::Clear();
    }
    if (has_clr()) {
      if (clr_ != NULL) clr_->::Cmd::ColorInfo::Clear();
    }
    speed_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BarrageMsgChatCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BarrageMsgChatCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_BARRAGEMSG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ChatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ChatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_str;
        break;
      }

      // optional string str = 3;
      case 3: {
        if (tag == 26) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgpos;
        break;
      }

      // optional .Cmd.ScenePos msgpos = 4;
      case 4: {
        if (tag == 34) {
         parse_msgpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_clr;
        break;
      }

      // optional .Cmd.ColorInfo clr = 5;
      case 5: {
        if (tag == 42) {
         parse_clr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_speed;
        break;
      }

      // optional uint32 speed = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BarrageMsgChatCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BarrageMsgChatCmd)
  return false;
#undef DO_
}

void BarrageMsgChatCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BarrageMsgChatCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_BARRAGEMSG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string str = 3;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->str(), output);
  }

  // optional .Cmd.ScenePos msgpos = 4;
  if (has_msgpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msgpos(), output);
  }

  // optional .Cmd.ColorInfo clr = 5;
  if (has_clr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->clr(), output);
  }

  // optional uint32 speed = 6 [default = 0];
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BarrageMsgChatCmd)
}

::google::protobuf::uint8* BarrageMsgChatCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BarrageMsgChatCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_BARRAGEMSG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string str = 3;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->str(), target);
  }

  // optional .Cmd.ScenePos msgpos = 4;
  if (has_msgpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msgpos(), target);
  }

  // optional .Cmd.ColorInfo clr = 5;
  if (has_clr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->clr(), target);
  }

  // optional uint32 speed = 6 [default = 0];
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BarrageMsgChatCmd)
  return target;
}

int BarrageMsgChatCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_BARRAGEMSG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string str = 3;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional .Cmd.ScenePos msgpos = 4;
    if (has_msgpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgpos());
    }

    // optional .Cmd.ColorInfo clr = 5;
    if (has_clr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clr());
    }

    // optional uint32 speed = 6 [default = 0];
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BarrageMsgChatCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BarrageMsgChatCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BarrageMsgChatCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BarrageMsgChatCmd::MergeFrom(const BarrageMsgChatCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_msgpos()) {
      mutable_msgpos()->::Cmd::ScenePos::MergeFrom(from.msgpos());
    }
    if (from.has_clr()) {
      mutable_clr()->::Cmd::ColorInfo::MergeFrom(from.clr());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BarrageMsgChatCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarrageMsgChatCmd::CopyFrom(const BarrageMsgChatCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarrageMsgChatCmd::IsInitialized() const {

  return true;
}

void BarrageMsgChatCmd::Swap(BarrageMsgChatCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(str_, other->str_);
    std::swap(msgpos_, other->msgpos_);
    std::swap(clr_, other->clr_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BarrageMsgChatCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BarrageMsgChatCmd_descriptor_;
  metadata.reflection = BarrageMsgChatCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatCmd::kCmdFieldNumber;
const int ChatCmd::kParamFieldNumber;
const int ChatCmd::kChannelFieldNumber;
const int ChatCmd::kStrFieldNumber;
const int ChatCmd::kDesIDFieldNumber;
const int ChatCmd::kVoiceFieldNumber;
const int ChatCmd::kVoicetimeFieldNumber;
const int ChatCmd::kMsgidFieldNumber;
const int ChatCmd::kMsgoverFieldNumber;
#endif  // !_MSC_VER

ChatCmd::ChatCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatCmd)
}

void ChatCmd::InitAsDefaultInstance() {
}

ChatCmd::ChatCmd(const ChatCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatCmd)
}

void ChatCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 59;
  param_ = 6;
  channel_ = 1;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desid_ = GOOGLE_ULONGLONG(0);
  voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voicetime_ = 0u;
  msgid_ = 0u;
  msgover_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatCmd::~ChatCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChatCmd)
  SharedDtor();
}

void ChatCmd::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (this != default_instance_) {
  }
}

void ChatCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatCmd_descriptor_;
}

const ChatCmd& ChatCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

ChatCmd* ChatCmd::default_instance_ = NULL;

ChatCmd* ChatCmd::New() const {
  return new ChatCmd;
}

void ChatCmd::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    cmd_ = 59;
    param_ = 6;
    channel_ = 1;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_->clear();
      }
    }
    desid_ = GOOGLE_ULONGLONG(0);
    if (has_voice()) {
      if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voice_->clear();
      }
    }
    voicetime_ = 0u;
    msgid_ = 0u;
  }
  msgover_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ChatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ChatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel;
        break;
      }

      // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_ROUND];
      case 3: {
        if (tag == 24) {
         parse_channel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGameChatChannel_IsValid(value)) {
            set_channel(static_cast< ::Cmd::EGameChatChannel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_str;
        break;
      }

      // required string str = 4;
      case 4: {
        if (tag == 34) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_desID;
        break;
      }

      // optional uint64 desID = 5;
      case 5: {
        if (tag == 40) {
         parse_desID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &desid_)));
          set_has_desid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_voice;
        break;
      }

      // optional bytes voice = 6;
      case 6: {
        if (tag == 50) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_voicetime;
        break;
      }

      // optional uint32 voicetime = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_voicetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voicetime_)));
          set_has_voicetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_msgover;
        break;
      }

      // optional bool msgover = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_msgover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msgover_)));
          set_has_msgover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatCmd)
  return false;
#undef DO_
}

void ChatCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_ROUND];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->channel(), output);
  }

  // required string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->str(), output);
  }

  // optional uint64 desID = 5;
  if (has_desid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->desid(), output);
  }

  // optional bytes voice = 6;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->voice(), output);
  }

  // optional uint32 voicetime = 7 [default = 0];
  if (has_voicetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->voicetime(), output);
  }

  // optional uint32 msgid = 8 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->msgid(), output);
  }

  // optional bool msgover = 9 [default = false];
  if (has_msgover()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->msgover(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatCmd)
}

::google::protobuf::uint8* ChatCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_ROUND];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->channel(), target);
  }

  // required string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str(), target);
  }

  // optional uint64 desID = 5;
  if (has_desid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->desid(), target);
  }

  // optional bytes voice = 6;
  if (has_voice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->voice(), target);
  }

  // optional uint32 voicetime = 7 [default = 0];
  if (has_voicetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->voicetime(), target);
  }

  // optional uint32 msgid = 8 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->msgid(), target);
  }

  // optional bool msgover = 9 [default = false];
  if (has_msgover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->msgover(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatCmd)
  return target;
}

int ChatCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_ROUND];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // required string str = 4;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional uint64 desID = 5;
    if (has_desid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->desid());
    }

    // optional bytes voice = 6;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice());
    }

    // optional uint32 voicetime = 7 [default = 0];
    if (has_voicetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voicetime());
    }

    // optional uint32 msgid = 8 [default = 0];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool msgover = 9 [default = false];
    if (has_msgover()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatCmd::MergeFrom(const ChatCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_desid()) {
      set_desid(from.desid());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
    if (from.has_voicetime()) {
      set_voicetime(from.voicetime());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_msgover()) {
      set_msgover(from.msgover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatCmd::CopyFrom(const ChatCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  return true;
}

void ChatCmd::Swap(ChatCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(channel_, other->channel_);
    std::swap(str_, other->str_);
    std::swap(desid_, other->desid_);
    std::swap(voice_, other->voice_);
    std::swap(voicetime_, other->voicetime_);
    std::swap(msgid_, other->msgid_);
    std::swap(msgover_, other->msgover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatCmd_descriptor_;
  metadata.reflection = ChatCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRetCmd::kCmdFieldNumber;
const int ChatRetCmd::kParamFieldNumber;
const int ChatRetCmd::kIdFieldNumber;
const int ChatRetCmd::kTargetidFieldNumber;
const int ChatRetCmd::kPortraitFieldNumber;
const int ChatRetCmd::kFrameFieldNumber;
const int ChatRetCmd::kBaselevelFieldNumber;
const int ChatRetCmd::kVoiceidFieldNumber;
const int ChatRetCmd::kVoicetimeFieldNumber;
const int ChatRetCmd::kHairFieldNumber;
const int ChatRetCmd::kHaircolorFieldNumber;
const int ChatRetCmd::kBodyFieldNumber;
const int ChatRetCmd::kAppellationFieldNumber;
const int ChatRetCmd::kMsgidFieldNumber;
const int ChatRetCmd::kHeadFieldNumber;
const int ChatRetCmd::kFaceFieldNumber;
const int ChatRetCmd::kMouthFieldNumber;
const int ChatRetCmd::kEyeFieldNumber;
const int ChatRetCmd::kChannelFieldNumber;
const int ChatRetCmd::kRolejobFieldNumber;
const int ChatRetCmd::kGenderFieldNumber;
const int ChatRetCmd::kBlinkFieldNumber;
const int ChatRetCmd::kStrFieldNumber;
const int ChatRetCmd::kNameFieldNumber;
const int ChatRetCmd::kGuildnameFieldNumber;
const int ChatRetCmd::kSysmsgidFieldNumber;
#endif  // !_MSC_VER

ChatRetCmd::ChatRetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatRetCmd)
}

void ChatRetCmd::InitAsDefaultInstance() {
}

ChatRetCmd::ChatRetCmd(const ChatRetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatRetCmd)
}

void ChatRetCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 59;
  param_ = 7;
  id_ = GOOGLE_ULONGLONG(0);
  targetid_ = GOOGLE_ULONGLONG(0);
  portrait_ = 0u;
  frame_ = 0u;
  baselevel_ = 0u;
  voiceid_ = 0u;
  voicetime_ = 0u;
  hair_ = 0u;
  haircolor_ = 0u;
  body_ = 0u;
  appellation_ = 0u;
  msgid_ = 0u;
  head_ = 0u;
  face_ = 0u;
  mouth_ = 0u;
  eye_ = 0u;
  channel_ = 1;
  rolejob_ = 0;
  gender_ = 0;
  blink_ = false;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sysmsgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRetCmd::~ChatRetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChatRetCmd)
  SharedDtor();
}

void ChatRetCmd::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void ChatRetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRetCmd_descriptor_;
}

const ChatRetCmd& ChatRetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

ChatRetCmd* ChatRetCmd::default_instance_ = NULL;

ChatRetCmd* ChatRetCmd::New() const {
  return new ChatRetCmd;
}

void ChatRetCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatRetCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, voiceid_);
    cmd_ = 59;
    param_ = 7;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(voicetime_, face_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(mouth_, eye_);
    ZR_(rolejob_, blink_);
    channel_ = 1;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 50331648) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    sysmsgid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatRetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT_RET];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ChatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ChatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel;
        break;
      }

      // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_ROUND];
      case 3: {
        if (tag == 24) {
         parse_channel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGameChatChannel_IsValid(value)) {
            set_channel(static_cast< ::Cmd::EGameChatChannel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_str;
        break;
      }

      // required string str = 4;
      case 4: {
        if (tag == 34) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }

      // required uint64 id = 6;
      case 6: {
        if (tag == 48) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_portrait;
        break;
      }

      // required uint32 portrait = 7;
      case 7: {
        if (tag == 56) {
         parse_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portrait_)));
          set_has_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_frame;
        break;
      }

      // required uint32 frame = 8;
      case 8: {
        if (tag == 64) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_rolejob;
        break;
      }

      // optional .Cmd.EProfession rolejob = 9 [default = EPROFESSION_MIN];
      case 9: {
        if (tag == 72) {
         parse_rolejob:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_rolejob(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_baselevel;
        break;
      }

      // optional uint32 baselevel = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_baselevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baselevel_)));
          set_has_baselevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_voiceid;
        break;
      }

      // optional uint32 voiceid = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_voiceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voiceid_)));
          set_has_voiceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_voicetime;
        break;
      }

      // optional uint32 voicetime = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_voicetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voicetime_)));
          set_has_voicetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_targetid;
        break;
      }

      // optional uint64 targetid = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_hair;
        break;
      }

      // optional uint32 hair = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_haircolor;
        break;
      }

      // optional uint32 haircolor = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_body;
        break;
      }

      // optional uint32 body = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_gender;
        break;
      }

      // optional .Cmd.EGender gender = 17 [default = EGENDER_MIN];
      case 17: {
        if (tag == 136) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGender_IsValid(value)) {
            set_gender(static_cast< ::Cmd::EGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_guildname;
        break;
      }

      // optional string guildname = 18;
      case 18: {
        if (tag == 146) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_appellation;
        break;
      }

      // optional uint32 appellation = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_appellation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appellation_)));
          set_has_appellation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_blink;
        break;
      }

      // optional bool blink = 20 [default = false];
      case 20: {
        if (tag == 160) {
         parse_blink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blink_)));
          set_has_blink();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_head;
        break;
      }

      // optional uint32 head = 22 [default = 0];
      case 22: {
        if (tag == 176) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_face;
        break;
      }

      // optional uint32 face = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_mouth;
        break;
      }

      // optional uint32 mouth = 24 [default = 0];
      case 24: {
        if (tag == 192) {
         parse_mouth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouth_)));
          set_has_mouth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_eye;
        break;
      }

      // optional uint32 eye = 25 [default = 0];
      case 25: {
        if (tag == 200) {
         parse_eye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eye_)));
          set_has_eye();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_sysmsgid;
        break;
      }

      // optional uint32 sysmsgid = 26 [default = 0];
      case 26: {
        if (tag == 208) {
         parse_sysmsgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sysmsgid_)));
          set_has_sysmsgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatRetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatRetCmd)
  return false;
#undef DO_
}

void ChatRetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatRetCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT_RET];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_ROUND];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->channel(), output);
  }

  // required string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->str(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // required uint64 id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->id(), output);
  }

  // required uint32 portrait = 7;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->portrait(), output);
  }

  // required uint32 frame = 8;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->frame(), output);
  }

  // optional .Cmd.EProfession rolejob = 9 [default = EPROFESSION_MIN];
  if (has_rolejob()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->rolejob(), output);
  }

  // optional uint32 baselevel = 10 [default = 0];
  if (has_baselevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->baselevel(), output);
  }

  // optional uint32 voiceid = 11 [default = 0];
  if (has_voiceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->voiceid(), output);
  }

  // optional uint32 voicetime = 12 [default = 0];
  if (has_voicetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->voicetime(), output);
  }

  // optional uint64 targetid = 13 [default = 0];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->targetid(), output);
  }

  // optional uint32 hair = 14 [default = 0];
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->hair(), output);
  }

  // optional uint32 haircolor = 15 [default = 0];
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->haircolor(), output);
  }

  // optional uint32 body = 16 [default = 0];
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->body(), output);
  }

  // optional .Cmd.EGender gender = 17 [default = EGENDER_MIN];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->gender(), output);
  }

  // optional string guildname = 18;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->guildname(), output);
  }

  // optional uint32 appellation = 19 [default = 0];
  if (has_appellation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->appellation(), output);
  }

  // optional bool blink = 20 [default = false];
  if (has_blink()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->blink(), output);
  }

  // optional uint32 msgid = 21 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->msgid(), output);
  }

  // optional uint32 head = 22 [default = 0];
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->head(), output);
  }

  // optional uint32 face = 23 [default = 0];
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->face(), output);
  }

  // optional uint32 mouth = 24 [default = 0];
  if (has_mouth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->mouth(), output);
  }

  // optional uint32 eye = 25 [default = 0];
  if (has_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->eye(), output);
  }

  // optional uint32 sysmsgid = 26 [default = 0];
  if (has_sysmsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->sysmsgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatRetCmd)
}

::google::protobuf::uint8* ChatRetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatRetCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT_RET];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_ROUND];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->channel(), target);
  }

  // required string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required uint64 id = 6;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->id(), target);
  }

  // required uint32 portrait = 7;
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->portrait(), target);
  }

  // required uint32 frame = 8;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->frame(), target);
  }

  // optional .Cmd.EProfession rolejob = 9 [default = EPROFESSION_MIN];
  if (has_rolejob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->rolejob(), target);
  }

  // optional uint32 baselevel = 10 [default = 0];
  if (has_baselevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->baselevel(), target);
  }

  // optional uint32 voiceid = 11 [default = 0];
  if (has_voiceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->voiceid(), target);
  }

  // optional uint32 voicetime = 12 [default = 0];
  if (has_voicetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->voicetime(), target);
  }

  // optional uint64 targetid = 13 [default = 0];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->targetid(), target);
  }

  // optional uint32 hair = 14 [default = 0];
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->hair(), target);
  }

  // optional uint32 haircolor = 15 [default = 0];
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->haircolor(), target);
  }

  // optional uint32 body = 16 [default = 0];
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->body(), target);
  }

  // optional .Cmd.EGender gender = 17 [default = EGENDER_MIN];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->gender(), target);
  }

  // optional string guildname = 18;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->guildname(), target);
  }

  // optional uint32 appellation = 19 [default = 0];
  if (has_appellation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->appellation(), target);
  }

  // optional bool blink = 20 [default = false];
  if (has_blink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->blink(), target);
  }

  // optional uint32 msgid = 21 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->msgid(), target);
  }

  // optional uint32 head = 22 [default = 0];
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->head(), target);
  }

  // optional uint32 face = 23 [default = 0];
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->face(), target);
  }

  // optional uint32 mouth = 24 [default = 0];
  if (has_mouth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->mouth(), target);
  }

  // optional uint32 eye = 25 [default = 0];
  if (has_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->eye(), target);
  }

  // optional uint32 sysmsgid = 26 [default = 0];
  if (has_sysmsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->sysmsgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatRetCmd)
  return target;
}

int ChatRetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT_RET];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 targetid = 13 [default = 0];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // required uint32 portrait = 7;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portrait());
    }

    // required uint32 frame = 8;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame());
    }

    // optional uint32 baselevel = 10 [default = 0];
    if (has_baselevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baselevel());
    }

    // optional uint32 voiceid = 11 [default = 0];
    if (has_voiceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voiceid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 voicetime = 12 [default = 0];
    if (has_voicetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voicetime());
    }

    // optional uint32 hair = 14 [default = 0];
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hair());
    }

    // optional uint32 haircolor = 15 [default = 0];
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haircolor());
    }

    // optional uint32 body = 16 [default = 0];
    if (has_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

    // optional uint32 appellation = 19 [default = 0];
    if (has_appellation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appellation());
    }

    // optional uint32 msgid = 21 [default = 0];
    if (has_msgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional uint32 head = 22 [default = 0];
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head());
    }

    // optional uint32 face = 23 [default = 0];
    if (has_face()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 mouth = 24 [default = 0];
    if (has_mouth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouth());
    }

    // optional uint32 eye = 25 [default = 0];
    if (has_eye()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eye());
    }

    // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_ROUND];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional .Cmd.EProfession rolejob = 9 [default = EPROFESSION_MIN];
    if (has_rolejob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rolejob());
    }

    // optional .Cmd.EGender gender = 17 [default = EGENDER_MIN];
    if (has_gender()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional bool blink = 20 [default = false];
    if (has_blink()) {
      total_size += 2 + 1;
    }

    // required string str = 4;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string guildname = 18;
    if (has_guildname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 sysmsgid = 26 [default = 0];
    if (has_sysmsgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sysmsgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRetCmd::MergeFrom(const ChatRetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_baselevel()) {
      set_baselevel(from.baselevel());
    }
    if (from.has_voiceid()) {
      set_voiceid(from.voiceid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_voicetime()) {
      set_voicetime(from.voicetime());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_appellation()) {
      set_appellation(from.appellation());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mouth()) {
      set_mouth(from.mouth());
    }
    if (from.has_eye()) {
      set_eye(from.eye());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_rolejob()) {
      set_rolejob(from.rolejob());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_blink()) {
      set_blink(from.blink());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_sysmsgid()) {
      set_sysmsgid(from.sysmsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRetCmd::CopyFrom(const ChatRetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRetCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00c00034) != 0x00c00034) return false;

  return true;
}

void ChatRetCmd::Swap(ChatRetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(targetid_, other->targetid_);
    std::swap(portrait_, other->portrait_);
    std::swap(frame_, other->frame_);
    std::swap(baselevel_, other->baselevel_);
    std::swap(voiceid_, other->voiceid_);
    std::swap(voicetime_, other->voicetime_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(body_, other->body_);
    std::swap(appellation_, other->appellation_);
    std::swap(msgid_, other->msgid_);
    std::swap(head_, other->head_);
    std::swap(face_, other->face_);
    std::swap(mouth_, other->mouth_);
    std::swap(eye_, other->eye_);
    std::swap(channel_, other->channel_);
    std::swap(rolejob_, other->rolejob_);
    std::swap(gender_, other->gender_);
    std::swap(blink_, other->blink_);
    std::swap(str_, other->str_);
    std::swap(name_, other->name_);
    std::swap(guildname_, other->guildname_);
    std::swap(sysmsgid_, other->sysmsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRetCmd_descriptor_;
  metadata.reflection = ChatRetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryVoiceUserCmd::kCmdFieldNumber;
const int QueryVoiceUserCmd::kParamFieldNumber;
const int QueryVoiceUserCmd::kVoiceidFieldNumber;
const int QueryVoiceUserCmd::kVoiceFieldNumber;
const int QueryVoiceUserCmd::kMsgidFieldNumber;
const int QueryVoiceUserCmd::kMsgoverFieldNumber;
#endif  // !_MSC_VER

QueryVoiceUserCmd::QueryVoiceUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryVoiceUserCmd)
}

void QueryVoiceUserCmd::InitAsDefaultInstance() {
}

QueryVoiceUserCmd::QueryVoiceUserCmd(const QueryVoiceUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryVoiceUserCmd)
}

void QueryVoiceUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 59;
  param_ = 8;
  voiceid_ = 0u;
  voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgid_ = 0u;
  msgover_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryVoiceUserCmd::~QueryVoiceUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryVoiceUserCmd)
  SharedDtor();
}

void QueryVoiceUserCmd::SharedDtor() {
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (this != default_instance_) {
  }
}

void QueryVoiceUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryVoiceUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryVoiceUserCmd_descriptor_;
}

const QueryVoiceUserCmd& QueryVoiceUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

QueryVoiceUserCmd* QueryVoiceUserCmd::default_instance_ = NULL;

QueryVoiceUserCmd* QueryVoiceUserCmd::New() const {
  return new QueryVoiceUserCmd;
}

void QueryVoiceUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryVoiceUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(voiceid_, msgover_);
    cmd_ = 59;
    param_ = 8;
    if (has_voice()) {
      if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voice_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryVoiceUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryVoiceUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERY_VOICE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ChatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ChatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_voiceid;
        break;
      }

      // optional uint32 voiceid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_voiceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voiceid_)));
          set_has_voiceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_voice;
        break;
      }

      // optional bytes voice = 4;
      case 4: {
        if (tag == 34) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_msgover;
        break;
      }

      // optional bool msgover = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_msgover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msgover_)));
          set_has_msgover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryVoiceUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryVoiceUserCmd)
  return false;
#undef DO_
}

void QueryVoiceUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryVoiceUserCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERY_VOICE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 voiceid = 3 [default = 0];
  if (has_voiceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->voiceid(), output);
  }

  // optional bytes voice = 4;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->voice(), output);
  }

  // optional uint32 msgid = 8 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->msgid(), output);
  }

  // optional bool msgover = 9 [default = false];
  if (has_msgover()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->msgover(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryVoiceUserCmd)
}

::google::protobuf::uint8* QueryVoiceUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryVoiceUserCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERY_VOICE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 voiceid = 3 [default = 0];
  if (has_voiceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->voiceid(), target);
  }

  // optional bytes voice = 4;
  if (has_voice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->voice(), target);
  }

  // optional uint32 msgid = 8 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->msgid(), target);
  }

  // optional bool msgover = 9 [default = false];
  if (has_msgover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->msgover(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryVoiceUserCmd)
  return target;
}

int QueryVoiceUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERY_VOICE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 voiceid = 3 [default = 0];
    if (has_voiceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voiceid());
    }

    // optional bytes voice = 4;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice());
    }

    // optional uint32 msgid = 8 [default = 0];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional bool msgover = 9 [default = false];
    if (has_msgover()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryVoiceUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryVoiceUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryVoiceUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryVoiceUserCmd::MergeFrom(const QueryVoiceUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_voiceid()) {
      set_voiceid(from.voiceid());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msgover()) {
      set_msgover(from.msgover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryVoiceUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryVoiceUserCmd::CopyFrom(const QueryVoiceUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryVoiceUserCmd::IsInitialized() const {

  return true;
}

void QueryVoiceUserCmd::Swap(QueryVoiceUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(voiceid_, other->voiceid_);
    std::swap(voice_, other->voice_);
    std::swap(msgid_, other->msgid_);
    std::swap(msgover_, other->msgover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryVoiceUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryVoiceUserCmd_descriptor_;
  metadata.reflection = QueryVoiceUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetVoiceIDChatCmd::kCmdFieldNumber;
const int GetVoiceIDChatCmd::kParamFieldNumber;
const int GetVoiceIDChatCmd::kIdFieldNumber;
#endif  // !_MSC_VER

GetVoiceIDChatCmd::GetVoiceIDChatCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GetVoiceIDChatCmd)
}

void GetVoiceIDChatCmd::InitAsDefaultInstance() {
}

GetVoiceIDChatCmd::GetVoiceIDChatCmd(const GetVoiceIDChatCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GetVoiceIDChatCmd)
}

void GetVoiceIDChatCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 59;
  param_ = 10;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetVoiceIDChatCmd::~GetVoiceIDChatCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GetVoiceIDChatCmd)
  SharedDtor();
}

void GetVoiceIDChatCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetVoiceIDChatCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVoiceIDChatCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetVoiceIDChatCmd_descriptor_;
}

const GetVoiceIDChatCmd& GetVoiceIDChatCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

GetVoiceIDChatCmd* GetVoiceIDChatCmd::default_instance_ = NULL;

GetVoiceIDChatCmd* GetVoiceIDChatCmd::New() const {
  return new GetVoiceIDChatCmd;
}

void GetVoiceIDChatCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 59;
    param_ = 10;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetVoiceIDChatCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GetVoiceIDChatCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_GET_VOICEID];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ChatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ChatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GetVoiceIDChatCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GetVoiceIDChatCmd)
  return false;
#undef DO_
}

void GetVoiceIDChatCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GetVoiceIDChatCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_GET_VOICEID];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GetVoiceIDChatCmd)
}

::google::protobuf::uint8* GetVoiceIDChatCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GetVoiceIDChatCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_GET_VOICEID];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GetVoiceIDChatCmd)
  return target;
}

int GetVoiceIDChatCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_GET_VOICEID];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVoiceIDChatCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetVoiceIDChatCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetVoiceIDChatCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetVoiceIDChatCmd::MergeFrom(const GetVoiceIDChatCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetVoiceIDChatCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVoiceIDChatCmd::CopyFrom(const GetVoiceIDChatCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVoiceIDChatCmd::IsInitialized() const {

  return true;
}

void GetVoiceIDChatCmd::Swap(GetVoiceIDChatCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetVoiceIDChatCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetVoiceIDChatCmd_descriptor_;
  metadata.reflection = GetVoiceIDChatCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoveLetterNtf::kCmdFieldNumber;
const int LoveLetterNtf::kParamFieldNumber;
const int LoveLetterNtf::kNameFieldNumber;
const int LoveLetterNtf::kContentFieldNumber;
const int LoveLetterNtf::kTypeFieldNumber;
const int LoveLetterNtf::kBgFieldNumber;
const int LoveLetterNtf::kLetterIDFieldNumber;
const int LoveLetterNtf::kConfigIDFieldNumber;
const int LoveLetterNtf::kContent2FieldNumber;
#endif  // !_MSC_VER

LoveLetterNtf::LoveLetterNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LoveLetterNtf)
}

void LoveLetterNtf::InitAsDefaultInstance() {
}

LoveLetterNtf::LoveLetterNtf(const LoveLetterNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LoveLetterNtf)
}

void LoveLetterNtf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 59;
  param_ = 11;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  bg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  letterid_ = 0u;
  configid_ = 0u;
  content2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoveLetterNtf::~LoveLetterNtf() {
  // @@protoc_insertion_point(destructor:Cmd.LoveLetterNtf)
  SharedDtor();
}

void LoveLetterNtf::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (bg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bg_;
  }
  if (content2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content2_;
  }
  if (this != default_instance_) {
  }
}

void LoveLetterNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoveLetterNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoveLetterNtf_descriptor_;
}

const LoveLetterNtf& LoveLetterNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

LoveLetterNtf* LoveLetterNtf::default_instance_ = NULL;

LoveLetterNtf* LoveLetterNtf::New() const {
  return new LoveLetterNtf;
}

void LoveLetterNtf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoveLetterNtf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, letterid_);
    cmd_ = 59;
    param_ = 11;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_bg()) {
      if (bg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bg_->clear();
      }
    }
    configid_ = 0u;
  }
  if (has_content2()) {
    if (content2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      content2_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoveLetterNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LoveLetterNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_LOVE_LETTER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ChatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ChatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional uint32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bg;
        break;
      }

      // optional string bg = 6;
      case 6: {
        if (tag == 50) {
         parse_bg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bg().data(), this->bg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_letterID;
        break;
      }

      // optional uint32 letterID = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_letterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &letterid_)));
          set_has_letterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_configID;
        break;
      }

      // optional uint32 configID = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_configID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_content2;
        break;
      }

      // optional string content2 = 9;
      case 9: {
        if (tag == 74) {
         parse_content2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content2().data(), this->content2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LoveLetterNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LoveLetterNtf)
  return false;
#undef DO_
}

void LoveLetterNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LoveLetterNtf)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_LOVE_LETTER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // optional string bg = 6;
  if (has_bg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bg().data(), this->bg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bg(), output);
  }

  // optional uint32 letterID = 7 [default = 0];
  if (has_letterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->letterid(), output);
  }

  // optional uint32 configID = 8 [default = 0];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->configid(), output);
  }

  // optional string content2 = 9;
  if (has_content2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content2().data(), this->content2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->content2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LoveLetterNtf)
}

::google::protobuf::uint8* LoveLetterNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LoveLetterNtf)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_LOVE_LETTER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // optional string bg = 6;
  if (has_bg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bg().data(), this->bg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bg(), target);
  }

  // optional uint32 letterID = 7 [default = 0];
  if (has_letterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->letterid(), target);
  }

  // optional uint32 configID = 8 [default = 0];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->configid(), target);
  }

  // optional string content2 = 9;
  if (has_content2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content2().data(), this->content2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->content2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LoveLetterNtf)
  return target;
}

int LoveLetterNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_LOVE_LETTER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string bg = 6;
    if (has_bg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bg());
    }

    // optional uint32 letterID = 7 [default = 0];
    if (has_letterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->letterid());
    }

    // optional uint32 configID = 8 [default = 0];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string content2 = 9;
    if (has_content2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoveLetterNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoveLetterNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoveLetterNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoveLetterNtf::MergeFrom(const LoveLetterNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bg()) {
      set_bg(from.bg());
    }
    if (from.has_letterid()) {
      set_letterid(from.letterid());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_content2()) {
      set_content2(from.content2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoveLetterNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoveLetterNtf::CopyFrom(const LoveLetterNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoveLetterNtf::IsInitialized() const {

  return true;
}

void LoveLetterNtf::Swap(LoveLetterNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(name_, other->name_);
    std::swap(content_, other->content_);
    std::swap(type_, other->type_);
    std::swap(bg_, other->bg_);
    std::swap(letterid_, other->letterid_);
    std::swap(configid_, other->configid_);
    std::swap(content2_, other->content2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoveLetterNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoveLetterNtf_descriptor_;
  metadata.reflection = LoveLetterNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatSelfNtf::kCmdFieldNumber;
const int ChatSelfNtf::kParamFieldNumber;
const int ChatSelfNtf::kChatFieldNumber;
#endif  // !_MSC_VER

ChatSelfNtf::ChatSelfNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatSelfNtf)
}

void ChatSelfNtf::InitAsDefaultInstance() {
  chat_ = const_cast< ::Cmd::ChatCmd*>(&::Cmd::ChatCmd::default_instance());
}

ChatSelfNtf::ChatSelfNtf(const ChatSelfNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatSelfNtf)
}

void ChatSelfNtf::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 59;
  param_ = 12;
  chat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatSelfNtf::~ChatSelfNtf() {
  // @@protoc_insertion_point(destructor:Cmd.ChatSelfNtf)
  SharedDtor();
}

void ChatSelfNtf::SharedDtor() {
  if (this != default_instance_) {
    delete chat_;
  }
}

void ChatSelfNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatSelfNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatSelfNtf_descriptor_;
}

const ChatSelfNtf& ChatSelfNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

ChatSelfNtf* ChatSelfNtf::default_instance_ = NULL;

ChatSelfNtf* ChatSelfNtf::New() const {
  return new ChatSelfNtf;
}

void ChatSelfNtf::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 59;
    param_ = 12;
    if (has_chat()) {
      if (chat_ != NULL) chat_->::Cmd::ChatCmd::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatSelfNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatSelfNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT_SELF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ChatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ChatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chat;
        break;
      }

      // optional .Cmd.ChatCmd chat = 3;
      case 3: {
        if (tag == 26) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatSelfNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatSelfNtf)
  return false;
#undef DO_
}

void ChatSelfNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatSelfNtf)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT_SELF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ChatCmd chat = 3;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatSelfNtf)
}

::google::protobuf::uint8* ChatSelfNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatSelfNtf)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT_SELF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ChatCmd chat = 3;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatSelfNtf)
  return target;
}

int ChatSelfNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT_SELF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ChatCmd chat = 3;
    if (has_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatSelfNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatSelfNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatSelfNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatSelfNtf::MergeFrom(const ChatSelfNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_chat()) {
      mutable_chat()->::Cmd::ChatCmd::MergeFrom(from.chat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatSelfNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatSelfNtf::CopyFrom(const ChatSelfNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatSelfNtf::IsInitialized() const {

  if (has_chat()) {
    if (!this->chat().IsInitialized()) return false;
  }
  return true;
}

void ChatSelfNtf::Swap(ChatSelfNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(chat_, other->chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatSelfNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatSelfNtf_descriptor_;
  metadata.reflection = ChatSelfNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcChatNtf::kCmdFieldNumber;
const int NpcChatNtf::kParamFieldNumber;
const int NpcChatNtf::kChannelFieldNumber;
const int NpcChatNtf::kNpcidFieldNumber;
const int NpcChatNtf::kMsgidFieldNumber;
const int NpcChatNtf::kParamsFieldNumber;
const int NpcChatNtf::kMsgFieldNumber;
const int NpcChatNtf::kNpcguidFieldNumber;
#endif  // !_MSC_VER

NpcChatNtf::NpcChatNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NpcChatNtf)
}

void NpcChatNtf::InitAsDefaultInstance() {
}

NpcChatNtf::NpcChatNtf(const NpcChatNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NpcChatNtf)
}

void NpcChatNtf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 59;
  param_ = 13;
  channel_ = 0;
  npcid_ = 0u;
  msgid_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npcguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcChatNtf::~NpcChatNtf() {
  // @@protoc_insertion_point(destructor:Cmd.NpcChatNtf)
  SharedDtor();
}

void NpcChatNtf::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void NpcChatNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcChatNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcChatNtf_descriptor_;
}

const NpcChatNtf& NpcChatNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

NpcChatNtf* NpcChatNtf::default_instance_ = NULL;

NpcChatNtf* NpcChatNtf::New() const {
  return new NpcChatNtf;
}

void NpcChatNtf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NpcChatNtf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(channel_, npcid_);
    ZR_(npcguid_, msgid_);
    cmd_ = 59;
    param_ = 13;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcChatNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NpcChatNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_NPC_CHAT_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ChatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ChatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel;
        break;
      }

      // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_MIN];
      case 3: {
        if (tag == 24) {
         parse_channel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGameChatChannel_IsValid(value)) {
            set_channel(static_cast< ::Cmd::EGameChatChannel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npcid;
        break;
      }

      // optional uint32 npcid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_params;
        break;
      }

      // repeated .Cmd.MsgParam params = 6;
      case 6: {
        if (tag == 50) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_params;
        if (input->ExpectTag(58)) goto parse_msg;
        break;
      }

      // optional string msg = 7;
      case 7: {
        if (tag == 58) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_npcguid;
        break;
      }

      // optional uint64 npcguid = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NpcChatNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NpcChatNtf)
  return false;
#undef DO_
}

void NpcChatNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NpcChatNtf)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_NPC_CHAT_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_MIN];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->channel(), output);
  }

  // optional uint32 npcid = 4 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->npcid(), output);
  }

  // optional uint32 msgid = 5 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->msgid(), output);
  }

  // repeated .Cmd.MsgParam params = 6;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->params(i), output);
  }

  // optional string msg = 7;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->msg(), output);
  }

  // optional uint64 npcguid = 8 [default = 0];
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->npcguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NpcChatNtf)
}

::google::protobuf::uint8* NpcChatNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NpcChatNtf)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_NPC_CHAT_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_MIN];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->channel(), target);
  }

  // optional uint32 npcid = 4 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->npcid(), target);
  }

  // optional uint32 msgid = 5 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->msgid(), target);
  }

  // repeated .Cmd.MsgParam params = 6;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->params(i), target);
  }

  // optional string msg = 7;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->msg(), target);
  }

  // optional uint64 npcguid = 8 [default = 0];
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->npcguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NpcChatNtf)
  return target;
}

int NpcChatNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_NPC_CHAT_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_MIN];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional uint32 npcid = 4 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

    // optional uint32 msgid = 5 [default = 0];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional string msg = 7;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional uint64 npcguid = 8 [default = 0];
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

  }
  // repeated .Cmd.MsgParam params = 6;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcChatNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcChatNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcChatNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcChatNtf::MergeFrom(const NpcChatNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcChatNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcChatNtf::CopyFrom(const NpcChatNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcChatNtf::IsInitialized() const {

  return true;
}

void NpcChatNtf::Swap(NpcChatNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(channel_, other->channel_);
    std::swap(npcid_, other->npcid_);
    std::swap(msgid_, other->msgid_);
    params_.Swap(&other->params_);
    std::swap(msg_, other->msg_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcChatNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcChatNtf_descriptor_;
  metadata.reflection = NpcChatNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryRealtimeVoiceIDCmd::kCmdFieldNumber;
const int QueryRealtimeVoiceIDCmd::kParamFieldNumber;
const int QueryRealtimeVoiceIDCmd::kChannelFieldNumber;
const int QueryRealtimeVoiceIDCmd::kIdFieldNumber;
#endif  // !_MSC_VER

QueryRealtimeVoiceIDCmd::QueryRealtimeVoiceIDCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryRealtimeVoiceIDCmd)
}

void QueryRealtimeVoiceIDCmd::InitAsDefaultInstance() {
}

QueryRealtimeVoiceIDCmd::QueryRealtimeVoiceIDCmd(const QueryRealtimeVoiceIDCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryRealtimeVoiceIDCmd)
}

void QueryRealtimeVoiceIDCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 59;
  param_ = 14;
  channel_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRealtimeVoiceIDCmd::~QueryRealtimeVoiceIDCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryRealtimeVoiceIDCmd)
  SharedDtor();
}

void QueryRealtimeVoiceIDCmd::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void QueryRealtimeVoiceIDCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryRealtimeVoiceIDCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryRealtimeVoiceIDCmd_descriptor_;
}

const QueryRealtimeVoiceIDCmd& QueryRealtimeVoiceIDCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatCmd_2eproto();
  return *default_instance_;
}

QueryRealtimeVoiceIDCmd* QueryRealtimeVoiceIDCmd::default_instance_ = NULL;

QueryRealtimeVoiceIDCmd* QueryRealtimeVoiceIDCmd::New() const {
  return new QueryRealtimeVoiceIDCmd;
}

void QueryRealtimeVoiceIDCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 59;
    param_ = 14;
    channel_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryRealtimeVoiceIDCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryRealtimeVoiceIDCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERY_REALTIME_VOICE_ID];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ChatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ChatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel;
        break;
      }

      // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_MIN];
      case 3: {
        if (tag == 24) {
         parse_channel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGameChatChannel_IsValid(value)) {
            set_channel(static_cast< ::Cmd::EGameChatChannel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_id;
        break;
      }

      // optional string id = 4;
      case 4: {
        if (tag == 34) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryRealtimeVoiceIDCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryRealtimeVoiceIDCmd)
  return false;
#undef DO_
}

void QueryRealtimeVoiceIDCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryRealtimeVoiceIDCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERY_REALTIME_VOICE_ID];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_MIN];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->channel(), output);
  }

  // optional string id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryRealtimeVoiceIDCmd)
}

::google::protobuf::uint8* QueryRealtimeVoiceIDCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryRealtimeVoiceIDCmd)
  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERY_REALTIME_VOICE_ID];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_MIN];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->channel(), target);
  }

  // optional string id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryRealtimeVoiceIDCmd)
  return target;
}

int QueryRealtimeVoiceIDCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERY_REALTIME_VOICE_ID];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_MIN];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional string id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRealtimeVoiceIDCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryRealtimeVoiceIDCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryRealtimeVoiceIDCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryRealtimeVoiceIDCmd::MergeFrom(const QueryRealtimeVoiceIDCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryRealtimeVoiceIDCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRealtimeVoiceIDCmd::CopyFrom(const QueryRealtimeVoiceIDCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRealtimeVoiceIDCmd::IsInitialized() const {

  return true;
}

void QueryRealtimeVoiceIDCmd::Swap(QueryRealtimeVoiceIDCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(channel_, other->channel_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryRealtimeVoiceIDCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryRealtimeVoiceIDCmd_descriptor_;
  metadata.reflection = QueryRealtimeVoiceIDCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
