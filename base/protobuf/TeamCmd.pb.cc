// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeamCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TeamCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* ForwardAllServerTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardAllServerTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGuildServerTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGuildServerTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRelationTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRelationTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadLuaTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadLuaTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamDataSyncTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamDataSyncTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamDataUpdateTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamDataUpdateTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMemberUpdateTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemberUpdateTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberDataUpdateTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberDataUpdateTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastCmdTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastCmdTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CatEnterTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CatEnterTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CatExitTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CatExitTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CatFireTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CatFireTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CatCallTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CatCallTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeLeaderTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeLeaderTeamCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CatEnterOwnTeamCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CatEnterOwnTeamCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerTeamParam_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TeamCmd_2eproto() {
  protobuf_AddDesc_TeamCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TeamCmd.proto");
  GOOGLE_CHECK(file != NULL);
  ForwardAllServerTeamCmd_descriptor_ = file->message_type(0);
  static const int ForwardAllServerTeamCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAllServerTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAllServerTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAllServerTeamCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAllServerTeamCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAllServerTeamCmd, len_),
  };
  ForwardAllServerTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardAllServerTeamCmd_descriptor_,
      ForwardAllServerTeamCmd::default_instance_,
      ForwardAllServerTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAllServerTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAllServerTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardAllServerTeamCmd));
  UpdateGuildServerTeamCmd_descriptor_ = file->message_type(1);
  static const int UpdateGuildServerTeamCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildServerTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildServerTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildServerTeamCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildServerTeamCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildServerTeamCmd, guildname_),
  };
  UpdateGuildServerTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGuildServerTeamCmd_descriptor_,
      UpdateGuildServerTeamCmd::default_instance_,
      UpdateGuildServerTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildServerTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildServerTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGuildServerTeamCmd));
  AddRelationTeamCmd_descriptor_ = file->message_type(2);
  static const int AddRelationTeamCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationTeamCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationTeamCmd, targetid_),
  };
  AddRelationTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRelationTeamCmd_descriptor_,
      AddRelationTeamCmd::default_instance_,
      AddRelationTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRelationTeamCmd));
  LoadLuaTeamCmd_descriptor_ = file->message_type(3);
  static const int LoadLuaTeamCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaTeamCmd, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaTeamCmd, lua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaTeamCmd, log_),
  };
  LoadLuaTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadLuaTeamCmd_descriptor_,
      LoadLuaTeamCmd::default_instance_,
      LoadLuaTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadLuaTeamCmd));
  TeamMemberInfo_descriptor_ = file->message_type(4);
  static const int TeamMemberInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, raidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, catid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, guildraidindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, level_),
  };
  TeamMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMemberInfo_descriptor_,
      TeamMemberInfo::default_instance_,
      TeamMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMemberInfo));
  TeamInfo_descriptor_ = file->message_type(5);
  static const int TeamInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, pickupmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, name_),
  };
  TeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfo_descriptor_,
      TeamInfo::default_instance_,
      TeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfo));
  TeamDataSyncTeamCmd_descriptor_ = file->message_type(6);
  static const int TeamDataSyncTeamCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataSyncTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataSyncTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataSyncTeamCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataSyncTeamCmd, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataSyncTeamCmd, online_),
  };
  TeamDataSyncTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamDataSyncTeamCmd_descriptor_,
      TeamDataSyncTeamCmd::default_instance_,
      TeamDataSyncTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataSyncTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataSyncTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamDataSyncTeamCmd));
  TeamDataUpdateTeamCmd_descriptor_ = file->message_type(7);
  static const int TeamDataUpdateTeamCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataUpdateTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataUpdateTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataUpdateTeamCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataUpdateTeamCmd, datas_),
  };
  TeamDataUpdateTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamDataUpdateTeamCmd_descriptor_,
      TeamDataUpdateTeamCmd::default_instance_,
      TeamDataUpdateTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataUpdateTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDataUpdateTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamDataUpdateTeamCmd));
  TeamMemberUpdateTeamCmd_descriptor_ = file->message_type(8);
  static const int TeamMemberUpdateTeamCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberUpdateTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberUpdateTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberUpdateTeamCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberUpdateTeamCmd, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberUpdateTeamCmd, dels_),
  };
  TeamMemberUpdateTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMemberUpdateTeamCmd_descriptor_,
      TeamMemberUpdateTeamCmd::default_instance_,
      TeamMemberUpdateTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberUpdateTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberUpdateTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMemberUpdateTeamCmd));
  MemberDataUpdateTeamCmd_descriptor_ = file->message_type(9);
  static const int MemberDataUpdateTeamCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDataUpdateTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDataUpdateTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDataUpdateTeamCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDataUpdateTeamCmd, updatecharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDataUpdateTeamCmd, updates_),
  };
  MemberDataUpdateTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberDataUpdateTeamCmd_descriptor_,
      MemberDataUpdateTeamCmd::default_instance_,
      MemberDataUpdateTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDataUpdateTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDataUpdateTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberDataUpdateTeamCmd));
  BroadcastCmdTeamCmd_descriptor_ = file->message_type(10);
  static const int BroadcastCmdTeamCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastCmdTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastCmdTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastCmdTeamCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastCmdTeamCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastCmdTeamCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastCmdTeamCmd, len_),
  };
  BroadcastCmdTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastCmdTeamCmd_descriptor_,
      BroadcastCmdTeamCmd::default_instance_,
      BroadcastCmdTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastCmdTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastCmdTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastCmdTeamCmd));
  CatEnterTeamCmd_descriptor_ = file->message_type(11);
  static const int CatEnterTeamCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatEnterTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatEnterTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatEnterTeamCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatEnterTeamCmd, cats_),
  };
  CatEnterTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CatEnterTeamCmd_descriptor_,
      CatEnterTeamCmd::default_instance_,
      CatEnterTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatEnterTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatEnterTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CatEnterTeamCmd));
  CatExitTeamCmd_descriptor_ = file->message_type(12);
  static const int CatExitTeamCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatExitTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatExitTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatExitTeamCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatExitTeamCmd, catid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatExitTeamCmd, enterfail_),
  };
  CatExitTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CatExitTeamCmd_descriptor_,
      CatExitTeamCmd::default_instance_,
      CatExitTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatExitTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatExitTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CatExitTeamCmd));
  CatFireTeamCmd_descriptor_ = file->message_type(13);
  static const int CatFireTeamCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatFireTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatFireTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatFireTeamCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatFireTeamCmd, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatFireTeamCmd, catid_),
  };
  CatFireTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CatFireTeamCmd_descriptor_,
      CatFireTeamCmd::default_instance_,
      CatFireTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatFireTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatFireTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CatFireTeamCmd));
  CatCallTeamCmd_descriptor_ = file->message_type(14);
  static const int CatCallTeamCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatCallTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatCallTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatCallTeamCmd, charid_),
  };
  CatCallTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CatCallTeamCmd_descriptor_,
      CatCallTeamCmd::default_instance_,
      CatCallTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatCallTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatCallTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CatCallTeamCmd));
  BeLeaderTeamCmd_descriptor_ = file->message_type(15);
  static const int BeLeaderTeamCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeLeaderTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeLeaderTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeLeaderTeamCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeLeaderTeamCmd, teamjob_),
  };
  BeLeaderTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeLeaderTeamCmd_descriptor_,
      BeLeaderTeamCmd::default_instance_,
      BeLeaderTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeLeaderTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeLeaderTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeLeaderTeamCmd));
  CatEnterOwnTeamCmd_descriptor_ = file->message_type(16);
  static const int CatEnterOwnTeamCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatEnterOwnTeamCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatEnterOwnTeamCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatEnterOwnTeamCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatEnterOwnTeamCmd, data_),
  };
  CatEnterOwnTeamCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CatEnterOwnTeamCmd_descriptor_,
      CatEnterOwnTeamCmd::default_instance_,
      CatEnterOwnTeamCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatEnterOwnTeamCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatEnterOwnTeamCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CatEnterOwnTeamCmd));
  ServerTeamParam_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TeamCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardAllServerTeamCmd_descriptor_, &ForwardAllServerTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGuildServerTeamCmd_descriptor_, &UpdateGuildServerTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRelationTeamCmd_descriptor_, &AddRelationTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadLuaTeamCmd_descriptor_, &LoadLuaTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMemberInfo_descriptor_, &TeamMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfo_descriptor_, &TeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamDataSyncTeamCmd_descriptor_, &TeamDataSyncTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamDataUpdateTeamCmd_descriptor_, &TeamDataUpdateTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMemberUpdateTeamCmd_descriptor_, &TeamMemberUpdateTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberDataUpdateTeamCmd_descriptor_, &MemberDataUpdateTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastCmdTeamCmd_descriptor_, &BroadcastCmdTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CatEnterTeamCmd_descriptor_, &CatEnterTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CatExitTeamCmd_descriptor_, &CatExitTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CatFireTeamCmd_descriptor_, &CatFireTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CatCallTeamCmd_descriptor_, &CatCallTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeLeaderTeamCmd_descriptor_, &BeLeaderTeamCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CatEnterOwnTeamCmd_descriptor_, &CatEnterOwnTeamCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TeamCmd_2eproto() {
  delete ForwardAllServerTeamCmd::default_instance_;
  delete ForwardAllServerTeamCmd_reflection_;
  delete UpdateGuildServerTeamCmd::default_instance_;
  delete UpdateGuildServerTeamCmd_reflection_;
  delete AddRelationTeamCmd::default_instance_;
  delete AddRelationTeamCmd_reflection_;
  delete LoadLuaTeamCmd::default_instance_;
  delete LoadLuaTeamCmd_reflection_;
  delete TeamMemberInfo::default_instance_;
  delete TeamMemberInfo_reflection_;
  delete TeamInfo::default_instance_;
  delete TeamInfo_reflection_;
  delete TeamDataSyncTeamCmd::default_instance_;
  delete TeamDataSyncTeamCmd_reflection_;
  delete TeamDataUpdateTeamCmd::default_instance_;
  delete TeamDataUpdateTeamCmd_reflection_;
  delete TeamMemberUpdateTeamCmd::default_instance_;
  delete TeamMemberUpdateTeamCmd_reflection_;
  delete MemberDataUpdateTeamCmd::default_instance_;
  delete MemberDataUpdateTeamCmd_reflection_;
  delete BroadcastCmdTeamCmd::default_instance_;
  delete BroadcastCmdTeamCmd_reflection_;
  delete CatEnterTeamCmd::default_instance_;
  delete CatEnterTeamCmd_reflection_;
  delete CatExitTeamCmd::default_instance_;
  delete CatExitTeamCmd_reflection_;
  delete CatFireTeamCmd::default_instance_;
  delete CatFireTeamCmd_reflection_;
  delete CatCallTeamCmd::default_instance_;
  delete CatCallTeamCmd_reflection_;
  delete BeLeaderTeamCmd::default_instance_;
  delete BeLeaderTeamCmd_reflection_;
  delete CatEnterOwnTeamCmd::default_instance_;
  delete CatEnterOwnTeamCmd_reflection_;
}

void protobuf_AddDesc_TeamCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::Cmd::protobuf_AddDesc_SessionTeam_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rTeamCmd.proto\022\003Cmd\032\nxCmd.proto\032\021ProtoC"
    "ommon.proto\032\021SessionTeam.proto\"\272\001\n\027Forwa"
    "rdAllServerTeamCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\rTEAM_PROTOCMD\022D\n\005param\030\002 \001(\0162\024.Cm"
    "d.ServerTeamParam:\037SERVERTEAMPARAM_FORWA"
    "RD_ALL_CMD\022\021\n\006charid\030\003 \001(\004:\0010\022\014\n\004data\030\005 "
    "\001(\014\022\016\n\003len\030\006 \001(\r:\0010\"\301\001\n\030UpdateGuildServe"
    "rTeamCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rTEA"
    "M_PROTOCMD\022A\n\005param\030\002 \001(\0162\024.Cmd.ServerTe"
    "amParam:\034SERVERTEAMPARAM_UPDATE_GUILD\022\021\n"
    "\006charid\030\003 \001(\004:\0010\022\022\n\007guildid\030\004 \001(\004:\0010\022\021\n\t"
    "guildname\030\005 \001(\t\"\257\001\n\022AddRelationTeamCmd\022("
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rTEAM_PROTOCMD"
    "\022G\n\005param\030\002 \001(\0162\024.Cmd.ServerTeamParam:\"S"
    "ERVERTEAMPARAM_SOCIAL_ADDRELATION\022\021\n\006cha"
    "rid\030\003 \001(\004:\0010\022\023\n\010targetid\030\004 \001(\004:\0010\"\241\001\n\016Lo"
    "adLuaTeamCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\rTEAM_PROTOCMD\022<\n\005param\030\002 \001(\0162\024.Cmd.Serv"
    "erTeamParam:\027SERVERTEAMPARAM_LOADLUA\022\r\n\005"
    "table\030\003 \001(\t\022\013\n\003lua\030\004 \001(\t\022\013\n\003log\030\005 \001(\t\"\352\001"
    "\n\016TeamMemberInfo\022\021\n\006charid\030\001 \001(\004:\0010\022\020\n\005m"
    "apid\030\002 \001(\r:\0010\022\021\n\006raidid\030\003 \001(\r:\0010\022\021\n\006zone"
    "id\030\004 \001(\r:\0010\022)\n\006gender\030\005 \001(\0162\014.Cmd.EGende"
    "r:\013EGENDER_MIN\022\014\n\004name\030\006 \001(\t\022\020\n\005catid\030\007 "
    "\001(\r:\0010\022\031\n\016guildraidindex\030\010 \001(\r:\0010\022\025\n\006onl"
    "ine\030\t \001(\010:\005false\022\020\n\005level\030\n \001(\r:\0010\"|\n\010Te"
    "amInfo\022\021\n\006teamid\030\001 \001(\004:\0010\022\023\n\010leaderid\030\002 "
    "\001(\004:\0010\022\025\n\npickupmode\030\003 \001(\r:\0010\022#\n\006member\030"
    "\004 \003(\0132\023.Cmd.TeamMemberInfo\022\014\n\004name\030\005 \001(\t"
    "\"\312\001\n\023TeamDataSyncTeamCmd\022(\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\rTEAM_PROTOCMD\022B\n\005param\030\002 \001("
    "\0162\024.Cmd.ServerTeamParam:\035SERVERTEAMPARAM"
    "_TEAMDATA_SYNC\022\021\n\006charid\030\003 \001(\004:\0010\022\033\n\004inf"
    "o\030\004 \001(\0132\r.Cmd.TeamInfo\022\025\n\006online\030\005 \001(\010:\005"
    "false\"\277\001\n\025TeamDataUpdateTeamCmd\022(\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\rTEAM_PROTOCMD\022D\n\005par"
    "am\030\002 \001(\0162\024.Cmd.ServerTeamParam:\037SERVERTE"
    "AMPARAM_TEAMDATA_UPDATE\022\021\n\006charid\030\003 \001(\004:"
    "\0010\022#\n\005datas\030\004 \003(\0132\024.Cmd.TeamSummaryItem\""
    "\322\001\n\027TeamMemberUpdateTeamCmd\022(\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\rTEAM_PROTOCMD\022F\n\005param\030\002"
    " \001(\0162\024.Cmd.ServerTeamParam:!SERVERTEAMPA"
    "RAM_TEAMMEMBER_UPDATE\022\021\n\006charid\030\003 \001(\004:\0010"
    "\022$\n\007updates\030\004 \003(\0132\023.Cmd.TeamMemberInfo\022\014"
    "\n\004dels\030\005 \003(\004\"\331\001\n\027MemberDataUpdateTeamCmd"
    "\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rTEAM_PROTOC"
    "MD\022F\n\005param\030\002 \001(\0162\024.Cmd.ServerTeamParam:"
    "!SERVERTEAMPARAM_MEMBERDATA_UPDATE\022\021\n\006ch"
    "arid\030\003 \001(\004:\0010\022\027\n\014updatecharid\030\004 \001(\004:\0010\022 "
    "\n\007updates\030\005 \003(\0132\017.Cmd.MemberData\"\276\001\n\023Bro"
    "adcastCmdTeamCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\rTEAM_PROTOCMD\022B\n\005param\030\002 \001(\0162\024.Cmd."
    "ServerTeamParam:\035SERVERTEAMPARAM_BROADCA"
    "ST_CMD\022\017\n\004type\030\003 \001(\r:\0010\022\r\n\002id\030\004 \001(\004:\0010\022\014"
    "\n\004data\030\005 \001(\014\022\013\n\003len\030\006 \001(\r\"\260\001\n\017CatEnterTe"
    "amCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rTEAM_P"
    "ROTOCMD\022B\n\005param\030\002 \001(\0162\024.Cmd.ServerTeamP"
    "aram:\035SERVERTEAMPARAM_CAT_ENTERTEAM\022\021\n\006c"
    "harid\030\003 \001(\004:\0010\022\034\n\004cats\030\004 \003(\0132\016.Cmd.Membe"
    "rCat\"\274\001\n\016CatExitTeamCmd\022(\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\rTEAM_PROTOCMD\022A\n\005param\030\002 \001(\016"
    "2\024.Cmd.ServerTeamParam:\034SERVERTEAMPARAM_"
    "CAT_EXITTEAM\022\021\n\006charid\030\003 \001(\004:\0010\022\020\n\005catid"
    "\030\004 \001(\r:\0010\022\030\n\tenterfail\030\005 \001(\010:\005false\"\260\001\n\016"
    "CatFireTeamCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\rTEAM_PROTOCMD\022=\n\005param\030\002 \001(\0162\024.Cmd.Se"
    "rverTeamParam:\030SERVERTEAMPARAM_CAT_FIRE\022"
    "\021\n\006charid\030\003 \001(\004:\0010\022\020\n\005npcid\030\004 \001(\004:\0010\022\020\n\005"
    "catid\030\005 \001(\004:\0010\"\214\001\n\016CatCallTeamCmd\022(\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\rTEAM_PROTOCMD\022=\n\005p"
    "aram\030\002 \001(\0162\024.Cmd.ServerTeamParam:\030SERVER"
    "TEAMPARAM_CAT_CALL\022\021\n\006charid\030\003 \001(\004:\0010\"\242\001"
    "\n\017BeLeaderTeamCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\rTEAM_PROTOCMD\022>\n\005param\030\002 \001(\0162\024.Cmd"
    ".ServerTeamParam:\031SERVERTEAMPARAM_BE_LEA"
    "DER\022\021\n\006charid\030\003 \001(\004:\0010\022\022\n\007teamjob\030\004 \001(\r:"
    "\0010\"\262\001\n\022CatEnterOwnTeamCmd\022(\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\rTEAM_PROTOCMD\022E\n\005param\030\002 \001"
    "(\0162\024.Cmd.ServerTeamParam: SERVERTEAMPARA"
    "M_CAT_ENTEROWNTEAM\022\016\n\006charid\030\003 \002(\004\022\033\n\004da"
    "ta\030\004 \001(\0132\r.Cmd.TeamData*\234\004\n\017ServerTeamPa"
    "ram\022#\n\037SERVERTEAMPARAM_FORWARD_ALL_CMD\020\001"
    "\022 \n\034SERVERTEAMPARAM_UPDATE_GUILD\020\002\022&\n\"SE"
    "RVERTEAMPARAM_SOCIAL_ADDRELATION\020\004\022\033\n\027SE"
    "RVERTEAMPARAM_LOADLUA\020\005\022!\n\035SERVERTEAMPAR"
    "AM_TEAMDATA_SYNC\020\010\022#\n\037SERVERTEAMPARAM_TE"
    "AMDATA_UPDATE\020\t\022%\n!SERVERTEAMPARAM_TEAMM"
    "EMBER_UPDATE\020\n\022%\n!SERVERTEAMPARAM_MEMBER"
    "DATA_UPDATE\020\013\022!\n\035SERVERTEAMPARAM_BROADCA"
    "ST_CMD\020\014\022!\n\035SERVERTEAMPARAM_CAT_ENTERTEA"
    "M\020\r\022 \n\034SERVERTEAMPARAM_CAT_EXITTEAM\020\016\022\034\n"
    "\030SERVERTEAMPARAM_CAT_FIRE\020\017\022\034\n\030SERVERTEA"
    "MPARAM_CAT_CALL\020\020\022\035\n\031SERVERTEAMPARAM_BE_"
    "LEADER\020\021\022$\n SERVERTEAMPARAM_CAT_ENTEROWN"
    "TEAM\020\022", 3766);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TeamCmd.proto", &protobuf_RegisterTypes);
  ForwardAllServerTeamCmd::default_instance_ = new ForwardAllServerTeamCmd();
  UpdateGuildServerTeamCmd::default_instance_ = new UpdateGuildServerTeamCmd();
  AddRelationTeamCmd::default_instance_ = new AddRelationTeamCmd();
  LoadLuaTeamCmd::default_instance_ = new LoadLuaTeamCmd();
  TeamMemberInfo::default_instance_ = new TeamMemberInfo();
  TeamInfo::default_instance_ = new TeamInfo();
  TeamDataSyncTeamCmd::default_instance_ = new TeamDataSyncTeamCmd();
  TeamDataUpdateTeamCmd::default_instance_ = new TeamDataUpdateTeamCmd();
  TeamMemberUpdateTeamCmd::default_instance_ = new TeamMemberUpdateTeamCmd();
  MemberDataUpdateTeamCmd::default_instance_ = new MemberDataUpdateTeamCmd();
  BroadcastCmdTeamCmd::default_instance_ = new BroadcastCmdTeamCmd();
  CatEnterTeamCmd::default_instance_ = new CatEnterTeamCmd();
  CatExitTeamCmd::default_instance_ = new CatExitTeamCmd();
  CatFireTeamCmd::default_instance_ = new CatFireTeamCmd();
  CatCallTeamCmd::default_instance_ = new CatCallTeamCmd();
  BeLeaderTeamCmd::default_instance_ = new BeLeaderTeamCmd();
  CatEnterOwnTeamCmd::default_instance_ = new CatEnterOwnTeamCmd();
  ForwardAllServerTeamCmd::default_instance_->InitAsDefaultInstance();
  UpdateGuildServerTeamCmd::default_instance_->InitAsDefaultInstance();
  AddRelationTeamCmd::default_instance_->InitAsDefaultInstance();
  LoadLuaTeamCmd::default_instance_->InitAsDefaultInstance();
  TeamMemberInfo::default_instance_->InitAsDefaultInstance();
  TeamInfo::default_instance_->InitAsDefaultInstance();
  TeamDataSyncTeamCmd::default_instance_->InitAsDefaultInstance();
  TeamDataUpdateTeamCmd::default_instance_->InitAsDefaultInstance();
  TeamMemberUpdateTeamCmd::default_instance_->InitAsDefaultInstance();
  MemberDataUpdateTeamCmd::default_instance_->InitAsDefaultInstance();
  BroadcastCmdTeamCmd::default_instance_->InitAsDefaultInstance();
  CatEnterTeamCmd::default_instance_->InitAsDefaultInstance();
  CatExitTeamCmd::default_instance_->InitAsDefaultInstance();
  CatFireTeamCmd::default_instance_->InitAsDefaultInstance();
  CatCallTeamCmd::default_instance_->InitAsDefaultInstance();
  BeLeaderTeamCmd::default_instance_->InitAsDefaultInstance();
  CatEnterOwnTeamCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TeamCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TeamCmd_2eproto {
  StaticDescriptorInitializer_TeamCmd_2eproto() {
    protobuf_AddDesc_TeamCmd_2eproto();
  }
} static_descriptor_initializer_TeamCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* ServerTeamParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerTeamParam_descriptor_;
}
bool ServerTeamParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 5:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardAllServerTeamCmd::kCmdFieldNumber;
const int ForwardAllServerTeamCmd::kParamFieldNumber;
const int ForwardAllServerTeamCmd::kCharidFieldNumber;
const int ForwardAllServerTeamCmd::kDataFieldNumber;
const int ForwardAllServerTeamCmd::kLenFieldNumber;
#endif  // !_MSC_VER

ForwardAllServerTeamCmd::ForwardAllServerTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardAllServerTeamCmd)
}

void ForwardAllServerTeamCmd::InitAsDefaultInstance() {
}

ForwardAllServerTeamCmd::ForwardAllServerTeamCmd(const ForwardAllServerTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardAllServerTeamCmd)
}

void ForwardAllServerTeamCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 209;
  param_ = 1;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardAllServerTeamCmd::~ForwardAllServerTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardAllServerTeamCmd)
  SharedDtor();
}

void ForwardAllServerTeamCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardAllServerTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardAllServerTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardAllServerTeamCmd_descriptor_;
}

const ForwardAllServerTeamCmd& ForwardAllServerTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

ForwardAllServerTeamCmd* ForwardAllServerTeamCmd::default_instance_ = NULL;

ForwardAllServerTeamCmd* ForwardAllServerTeamCmd::New() const {
  return new ForwardAllServerTeamCmd;
}

void ForwardAllServerTeamCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 209;
    param_ = 1;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardAllServerTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardAllServerTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_FORWARD_ALL_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ServerTeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ServerTeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_len;
        break;
      }

      // optional uint32 len = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardAllServerTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardAllServerTeamCmd)
  return false;
#undef DO_
}

void ForwardAllServerTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardAllServerTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_FORWARD_ALL_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // optional uint32 len = 6 [default = 0];
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardAllServerTeamCmd)
}

::google::protobuf::uint8* ForwardAllServerTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardAllServerTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_FORWARD_ALL_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // optional uint32 len = 6 [default = 0];
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardAllServerTeamCmd)
  return target;
}

int ForwardAllServerTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_FORWARD_ALL_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 6 [default = 0];
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardAllServerTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardAllServerTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardAllServerTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardAllServerTeamCmd::MergeFrom(const ForwardAllServerTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardAllServerTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardAllServerTeamCmd::CopyFrom(const ForwardAllServerTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardAllServerTeamCmd::IsInitialized() const {

  return true;
}

void ForwardAllServerTeamCmd::Swap(ForwardAllServerTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardAllServerTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardAllServerTeamCmd_descriptor_;
  metadata.reflection = ForwardAllServerTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGuildServerTeamCmd::kCmdFieldNumber;
const int UpdateGuildServerTeamCmd::kParamFieldNumber;
const int UpdateGuildServerTeamCmd::kCharidFieldNumber;
const int UpdateGuildServerTeamCmd::kGuildidFieldNumber;
const int UpdateGuildServerTeamCmd::kGuildnameFieldNumber;
#endif  // !_MSC_VER

UpdateGuildServerTeamCmd::UpdateGuildServerTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateGuildServerTeamCmd)
}

void UpdateGuildServerTeamCmd::InitAsDefaultInstance() {
}

UpdateGuildServerTeamCmd::UpdateGuildServerTeamCmd(const UpdateGuildServerTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateGuildServerTeamCmd)
}

void UpdateGuildServerTeamCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 209;
  param_ = 2;
  charid_ = GOOGLE_ULONGLONG(0);
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGuildServerTeamCmd::~UpdateGuildServerTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateGuildServerTeamCmd)
  SharedDtor();
}

void UpdateGuildServerTeamCmd::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void UpdateGuildServerTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGuildServerTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGuildServerTeamCmd_descriptor_;
}

const UpdateGuildServerTeamCmd& UpdateGuildServerTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

UpdateGuildServerTeamCmd* UpdateGuildServerTeamCmd::default_instance_ = NULL;

UpdateGuildServerTeamCmd* UpdateGuildServerTeamCmd::New() const {
  return new UpdateGuildServerTeamCmd;
}

void UpdateGuildServerTeamCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateGuildServerTeamCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, guildid_);
    cmd_ = 209;
    param_ = 2;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGuildServerTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateGuildServerTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_UPDATE_GUILD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ServerTeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ServerTeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_guildname;
        break;
      }

      // optional string guildname = 5;
      case 5: {
        if (tag == 42) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateGuildServerTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateGuildServerTeamCmd)
  return false;
#undef DO_
}

void UpdateGuildServerTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateGuildServerTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_UPDATE_GUILD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 guildid = 4 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guildid(), output);
  }

  // optional string guildname = 5;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateGuildServerTeamCmd)
}

::google::protobuf::uint8* UpdateGuildServerTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateGuildServerTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_UPDATE_GUILD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 guildid = 4 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guildid(), target);
  }

  // optional string guildname = 5;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateGuildServerTeamCmd)
  return target;
}

int UpdateGuildServerTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_UPDATE_GUILD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 guildid = 4 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string guildname = 5;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGuildServerTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGuildServerTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGuildServerTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGuildServerTeamCmd::MergeFrom(const UpdateGuildServerTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGuildServerTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGuildServerTeamCmd::CopyFrom(const UpdateGuildServerTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGuildServerTeamCmd::IsInitialized() const {

  return true;
}

void UpdateGuildServerTeamCmd::Swap(UpdateGuildServerTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGuildServerTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGuildServerTeamCmd_descriptor_;
  metadata.reflection = UpdateGuildServerTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddRelationTeamCmd::kCmdFieldNumber;
const int AddRelationTeamCmd::kParamFieldNumber;
const int AddRelationTeamCmd::kCharidFieldNumber;
const int AddRelationTeamCmd::kTargetidFieldNumber;
#endif  // !_MSC_VER

AddRelationTeamCmd::AddRelationTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddRelationTeamCmd)
}

void AddRelationTeamCmd::InitAsDefaultInstance() {
}

AddRelationTeamCmd::AddRelationTeamCmd(const AddRelationTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddRelationTeamCmd)
}

void AddRelationTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 209;
  param_ = 4;
  charid_ = GOOGLE_ULONGLONG(0);
  targetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRelationTeamCmd::~AddRelationTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AddRelationTeamCmd)
  SharedDtor();
}

void AddRelationTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddRelationTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRelationTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRelationTeamCmd_descriptor_;
}

const AddRelationTeamCmd& AddRelationTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

AddRelationTeamCmd* AddRelationTeamCmd::default_instance_ = NULL;

AddRelationTeamCmd* AddRelationTeamCmd::New() const {
  return new AddRelationTeamCmd;
}

void AddRelationTeamCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddRelationTeamCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, targetid_);
    cmd_ = 209;
    param_ = 4;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRelationTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddRelationTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_SOCIAL_ADDRELATION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ServerTeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ServerTeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetid;
        break;
      }

      // optional uint64 targetid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddRelationTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddRelationTeamCmd)
  return false;
#undef DO_
}

void AddRelationTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddRelationTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_SOCIAL_ADDRELATION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 targetid = 4 [default = 0];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddRelationTeamCmd)
}

::google::protobuf::uint8* AddRelationTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddRelationTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_SOCIAL_ADDRELATION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 targetid = 4 [default = 0];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddRelationTeamCmd)
  return target;
}

int AddRelationTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_SOCIAL_ADDRELATION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 targetid = 4 [default = 0];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRelationTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRelationTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRelationTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRelationTeamCmd::MergeFrom(const AddRelationTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRelationTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRelationTeamCmd::CopyFrom(const AddRelationTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRelationTeamCmd::IsInitialized() const {

  return true;
}

void AddRelationTeamCmd::Swap(AddRelationTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRelationTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRelationTeamCmd_descriptor_;
  metadata.reflection = AddRelationTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadLuaTeamCmd::kCmdFieldNumber;
const int LoadLuaTeamCmd::kParamFieldNumber;
const int LoadLuaTeamCmd::kTableFieldNumber;
const int LoadLuaTeamCmd::kLuaFieldNumber;
const int LoadLuaTeamCmd::kLogFieldNumber;
#endif  // !_MSC_VER

LoadLuaTeamCmd::LoadLuaTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LoadLuaTeamCmd)
}

void LoadLuaTeamCmd::InitAsDefaultInstance() {
}

LoadLuaTeamCmd::LoadLuaTeamCmd(const LoadLuaTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LoadLuaTeamCmd)
}

void LoadLuaTeamCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 209;
  param_ = 5;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadLuaTeamCmd::~LoadLuaTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LoadLuaTeamCmd)
  SharedDtor();
}

void LoadLuaTeamCmd::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (lua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lua_;
  }
  if (log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_;
  }
  if (this != default_instance_) {
  }
}

void LoadLuaTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadLuaTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadLuaTeamCmd_descriptor_;
}

const LoadLuaTeamCmd& LoadLuaTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

LoadLuaTeamCmd* LoadLuaTeamCmd::default_instance_ = NULL;

LoadLuaTeamCmd* LoadLuaTeamCmd::New() const {
  return new LoadLuaTeamCmd;
}

void LoadLuaTeamCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 209;
    param_ = 5;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_->clear();
      }
    }
    if (has_lua()) {
      if (lua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lua_->clear();
      }
    }
    if (has_log()) {
      if (log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        log_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadLuaTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LoadLuaTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_LOADLUA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ServerTeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ServerTeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_table;
        break;
      }

      // optional string table = 3;
      case 3: {
        if (tag == 26) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table().data(), this->table().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "table");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lua;
        break;
      }

      // optional string lua = 4;
      case 4: {
        if (tag == 34) {
         parse_lua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lua().data(), this->lua().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lua");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_log;
        break;
      }

      // optional string log = 5;
      case 5: {
        if (tag == 42) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "log");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LoadLuaTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LoadLuaTeamCmd)
  return false;
#undef DO_
}

void LoadLuaTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LoadLuaTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_LOADLUA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string table = 3;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table(), output);
  }

  // optional string lua = 4;
  if (has_lua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lua().data(), this->lua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lua");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lua(), output);
  }

  // optional string log = 5;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->log(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LoadLuaTeamCmd)
}

::google::protobuf::uint8* LoadLuaTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LoadLuaTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_LOADLUA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string table = 3;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table(), target);
  }

  // optional string lua = 4;
  if (has_lua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lua().data(), this->lua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lua");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lua(), target);
  }

  // optional string log = 5;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->log(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LoadLuaTeamCmd)
  return target;
}

int LoadLuaTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_LOADLUA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string table = 3;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table());
    }

    // optional string lua = 4;
    if (has_lua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lua());
    }

    // optional string log = 5;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadLuaTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadLuaTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadLuaTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadLuaTeamCmd::MergeFrom(const LoadLuaTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_lua()) {
      set_lua(from.lua());
    }
    if (from.has_log()) {
      set_log(from.log());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadLuaTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadLuaTeamCmd::CopyFrom(const LoadLuaTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadLuaTeamCmd::IsInitialized() const {

  return true;
}

void LoadLuaTeamCmd::Swap(LoadLuaTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(table_, other->table_);
    std::swap(lua_, other->lua_);
    std::swap(log_, other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadLuaTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadLuaTeamCmd_descriptor_;
  metadata.reflection = LoadLuaTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMemberInfo::kCharidFieldNumber;
const int TeamMemberInfo::kMapidFieldNumber;
const int TeamMemberInfo::kRaididFieldNumber;
const int TeamMemberInfo::kZoneidFieldNumber;
const int TeamMemberInfo::kGenderFieldNumber;
const int TeamMemberInfo::kNameFieldNumber;
const int TeamMemberInfo::kCatidFieldNumber;
const int TeamMemberInfo::kGuildraidindexFieldNumber;
const int TeamMemberInfo::kOnlineFieldNumber;
const int TeamMemberInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

TeamMemberInfo::TeamMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamMemberInfo)
}

void TeamMemberInfo::InitAsDefaultInstance() {
}

TeamMemberInfo::TeamMemberInfo(const TeamMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamMemberInfo)
}

void TeamMemberInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  raidid_ = 0u;
  zoneid_ = 0u;
  gender_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  catid_ = 0u;
  guildraidindex_ = 0u;
  online_ = false;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemberInfo::~TeamMemberInfo() {
  // @@protoc_insertion_point(destructor:Cmd.TeamMemberInfo)
  SharedDtor();
}

void TeamMemberInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TeamMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemberInfo_descriptor_;
}

const TeamMemberInfo& TeamMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

TeamMemberInfo* TeamMemberInfo::default_instance_ = NULL;

TeamMemberInfo* TeamMemberInfo::New() const {
  return new TeamMemberInfo;
}

void TeamMemberInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamMemberInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, gender_);
    ZR_(catid_, guildraidindex_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ZR_(online_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamMemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_raidid;
        break;
      }

      // optional uint32 raidid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_raidid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raidid_)));
          set_has_raidid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional .Cmd.EGender gender = 5 [default = EGENDER_MIN];
      case 5: {
        if (tag == 40) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGender_IsValid(value)) {
            set_gender(static_cast< ::Cmd::EGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_catid;
        break;
      }

      // optional uint32 catid = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_catid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catid_)));
          set_has_catid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_guildraidindex;
        break;
      }

      // optional uint32 guildraidindex = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_guildraidindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildraidindex_)));
          set_has_guildraidindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_online;
        break;
      }

      // optional bool online = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_level;
        break;
      }

      // optional uint32 level = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamMemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamMemberInfo)
  return false;
#undef DO_
}

void TeamMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamMemberInfo)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 mapid = 2 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapid(), output);
  }

  // optional uint32 raidid = 3 [default = 0];
  if (has_raidid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raidid(), output);
  }

  // optional uint32 zoneid = 4 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional .Cmd.EGender gender = 5 [default = EGENDER_MIN];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->gender(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional uint32 catid = 7 [default = 0];
  if (has_catid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->catid(), output);
  }

  // optional uint32 guildraidindex = 8 [default = 0];
  if (has_guildraidindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->guildraidindex(), output);
  }

  // optional bool online = 9 [default = false];
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->online(), output);
  }

  // optional uint32 level = 10 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamMemberInfo)
}

::google::protobuf::uint8* TeamMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamMemberInfo)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 mapid = 2 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapid(), target);
  }

  // optional uint32 raidid = 3 [default = 0];
  if (has_raidid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raidid(), target);
  }

  // optional uint32 zoneid = 4 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional .Cmd.EGender gender = 5 [default = EGENDER_MIN];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->gender(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional uint32 catid = 7 [default = 0];
  if (has_catid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->catid(), target);
  }

  // optional uint32 guildraidindex = 8 [default = 0];
  if (has_guildraidindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->guildraidindex(), target);
  }

  // optional bool online = 9 [default = false];
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->online(), target);
  }

  // optional uint32 level = 10 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamMemberInfo)
  return target;
}

int TeamMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 mapid = 2 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 raidid = 3 [default = 0];
    if (has_raidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raidid());
    }

    // optional uint32 zoneid = 4 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional .Cmd.EGender gender = 5 [default = EGENDER_MIN];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 catid = 7 [default = 0];
    if (has_catid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->catid());
    }

    // optional uint32 guildraidindex = 8 [default = 0];
    if (has_guildraidindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildraidindex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool online = 9 [default = false];
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional uint32 level = 10 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMemberInfo::MergeFrom(const TeamMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_raidid()) {
      set_raidid(from.raidid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_catid()) {
      set_catid(from.catid());
    }
    if (from.has_guildraidindex()) {
      set_guildraidindex(from.guildraidindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemberInfo::CopyFrom(const TeamMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberInfo::IsInitialized() const {

  return true;
}

void TeamMemberInfo::Swap(TeamMemberInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(mapid_, other->mapid_);
    std::swap(raidid_, other->raidid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gender_, other->gender_);
    std::swap(name_, other->name_);
    std::swap(catid_, other->catid_);
    std::swap(guildraidindex_, other->guildraidindex_);
    std::swap(online_, other->online_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemberInfo_descriptor_;
  metadata.reflection = TeamMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInfo::kTeamidFieldNumber;
const int TeamInfo::kLeaderidFieldNumber;
const int TeamInfo::kPickupmodeFieldNumber;
const int TeamInfo::kMemberFieldNumber;
const int TeamInfo::kNameFieldNumber;
#endif  // !_MSC_VER

TeamInfo::TeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamInfo)
}

void TeamInfo::InitAsDefaultInstance() {
}

TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamInfo)
}

void TeamInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  leaderid_ = GOOGLE_ULONGLONG(0);
  pickupmode_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfo::~TeamInfo() {
  // @@protoc_insertion_point(destructor:Cmd.TeamInfo)
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfo_descriptor_;
}

const TeamInfo& TeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

TeamInfo* TeamInfo::default_instance_ = NULL;

TeamInfo* TeamInfo::New() const {
  return new TeamInfo;
}

void TeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(teamid_, leaderid_);
    pickupmode_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 teamid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_leaderid;
        break;
      }

      // optional uint64 leaderid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_leaderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pickupmode;
        break;
      }

      // optional uint32 pickupmode = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_pickupmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pickupmode_)));
          set_has_pickupmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_member;
        break;
      }

      // repeated .Cmd.TeamMemberInfo member = 4;
      case 4: {
        if (tag == 34) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_member;
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamInfo)
  return false;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamInfo)
  // optional uint64 teamid = 1 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint64 leaderid = 2 [default = 0];
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->leaderid(), output);
  }

  // optional uint32 pickupmode = 3 [default = 0];
  if (has_pickupmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pickupmode(), output);
  }

  // repeated .Cmd.TeamMemberInfo member = 4;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->member(i), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamInfo)
}

::google::protobuf::uint8* TeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamInfo)
  // optional uint64 teamid = 1 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint64 leaderid = 2 [default = 0];
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->leaderid(), target);
  }

  // optional uint32 pickupmode = 3 [default = 0];
  if (has_pickupmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pickupmode(), target);
  }

  // repeated .Cmd.TeamMemberInfo member = 4;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->member(i), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamInfo)
  return target;
}

int TeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 teamid = 1 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 leaderid = 2 [default = 0];
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderid());
    }

    // optional uint32 pickupmode = 3 [default = 0];
    if (has_pickupmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pickupmode());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Cmd.TeamMemberInfo member = 4;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_pickupmode()) {
      set_pickupmode(from.pickupmode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {

  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(pickupmode_, other->pickupmode_);
    member_.Swap(&other->member_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfo_descriptor_;
  metadata.reflection = TeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamDataSyncTeamCmd::kCmdFieldNumber;
const int TeamDataSyncTeamCmd::kParamFieldNumber;
const int TeamDataSyncTeamCmd::kCharidFieldNumber;
const int TeamDataSyncTeamCmd::kInfoFieldNumber;
const int TeamDataSyncTeamCmd::kOnlineFieldNumber;
#endif  // !_MSC_VER

TeamDataSyncTeamCmd::TeamDataSyncTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamDataSyncTeamCmd)
}

void TeamDataSyncTeamCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::TeamInfo*>(&::Cmd::TeamInfo::default_instance());
}

TeamDataSyncTeamCmd::TeamDataSyncTeamCmd(const TeamDataSyncTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamDataSyncTeamCmd)
}

void TeamDataSyncTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 209;
  param_ = 8;
  charid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamDataSyncTeamCmd::~TeamDataSyncTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamDataSyncTeamCmd)
  SharedDtor();
}

void TeamDataSyncTeamCmd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void TeamDataSyncTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamDataSyncTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamDataSyncTeamCmd_descriptor_;
}

const TeamDataSyncTeamCmd& TeamDataSyncTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

TeamDataSyncTeamCmd* TeamDataSyncTeamCmd::default_instance_ = NULL;

TeamDataSyncTeamCmd* TeamDataSyncTeamCmd::New() const {
  return new TeamDataSyncTeamCmd;
}

void TeamDataSyncTeamCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 209;
    param_ = 8;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::TeamInfo::Clear();
    }
    online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamDataSyncTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamDataSyncTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_TEAMDATA_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ServerTeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ServerTeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .Cmd.TeamInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_online;
        break;
      }

      // optional bool online = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamDataSyncTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamDataSyncTeamCmd)
  return false;
#undef DO_
}

void TeamDataSyncTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamDataSyncTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_TEAMDATA_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.TeamInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  // optional bool online = 5 [default = false];
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamDataSyncTeamCmd)
}

::google::protobuf::uint8* TeamDataSyncTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamDataSyncTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_TEAMDATA_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.TeamInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  // optional bool online = 5 [default = false];
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamDataSyncTeamCmd)
  return target;
}

int TeamDataSyncTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_TEAMDATA_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.TeamInfo info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional bool online = 5 [default = false];
    if (has_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamDataSyncTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamDataSyncTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamDataSyncTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamDataSyncTeamCmd::MergeFrom(const TeamDataSyncTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::TeamInfo::MergeFrom(from.info());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamDataSyncTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamDataSyncTeamCmd::CopyFrom(const TeamDataSyncTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamDataSyncTeamCmd::IsInitialized() const {

  return true;
}

void TeamDataSyncTeamCmd::Swap(TeamDataSyncTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamDataSyncTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamDataSyncTeamCmd_descriptor_;
  metadata.reflection = TeamDataSyncTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamDataUpdateTeamCmd::kCmdFieldNumber;
const int TeamDataUpdateTeamCmd::kParamFieldNumber;
const int TeamDataUpdateTeamCmd::kCharidFieldNumber;
const int TeamDataUpdateTeamCmd::kDatasFieldNumber;
#endif  // !_MSC_VER

TeamDataUpdateTeamCmd::TeamDataUpdateTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamDataUpdateTeamCmd)
}

void TeamDataUpdateTeamCmd::InitAsDefaultInstance() {
}

TeamDataUpdateTeamCmd::TeamDataUpdateTeamCmd(const TeamDataUpdateTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamDataUpdateTeamCmd)
}

void TeamDataUpdateTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 209;
  param_ = 9;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamDataUpdateTeamCmd::~TeamDataUpdateTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamDataUpdateTeamCmd)
  SharedDtor();
}

void TeamDataUpdateTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamDataUpdateTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamDataUpdateTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamDataUpdateTeamCmd_descriptor_;
}

const TeamDataUpdateTeamCmd& TeamDataUpdateTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

TeamDataUpdateTeamCmd* TeamDataUpdateTeamCmd::default_instance_ = NULL;

TeamDataUpdateTeamCmd* TeamDataUpdateTeamCmd::New() const {
  return new TeamDataUpdateTeamCmd;
}

void TeamDataUpdateTeamCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 209;
    param_ = 9;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamDataUpdateTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamDataUpdateTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_TEAMDATA_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ServerTeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ServerTeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        break;
      }

      // repeated .Cmd.TeamSummaryItem datas = 4;
      case 4: {
        if (tag == 34) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamDataUpdateTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamDataUpdateTeamCmd)
  return false;
#undef DO_
}

void TeamDataUpdateTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamDataUpdateTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_TEAMDATA_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated .Cmd.TeamSummaryItem datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamDataUpdateTeamCmd)
}

::google::protobuf::uint8* TeamDataUpdateTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamDataUpdateTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_TEAMDATA_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated .Cmd.TeamSummaryItem datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamDataUpdateTeamCmd)
  return target;
}

int TeamDataUpdateTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_TEAMDATA_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.TeamSummaryItem datas = 4;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamDataUpdateTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamDataUpdateTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamDataUpdateTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamDataUpdateTeamCmd::MergeFrom(const TeamDataUpdateTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamDataUpdateTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamDataUpdateTeamCmd::CopyFrom(const TeamDataUpdateTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamDataUpdateTeamCmd::IsInitialized() const {

  return true;
}

void TeamDataUpdateTeamCmd::Swap(TeamDataUpdateTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamDataUpdateTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamDataUpdateTeamCmd_descriptor_;
  metadata.reflection = TeamDataUpdateTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMemberUpdateTeamCmd::kCmdFieldNumber;
const int TeamMemberUpdateTeamCmd::kParamFieldNumber;
const int TeamMemberUpdateTeamCmd::kCharidFieldNumber;
const int TeamMemberUpdateTeamCmd::kUpdatesFieldNumber;
const int TeamMemberUpdateTeamCmd::kDelsFieldNumber;
#endif  // !_MSC_VER

TeamMemberUpdateTeamCmd::TeamMemberUpdateTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamMemberUpdateTeamCmd)
}

void TeamMemberUpdateTeamCmd::InitAsDefaultInstance() {
}

TeamMemberUpdateTeamCmd::TeamMemberUpdateTeamCmd(const TeamMemberUpdateTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamMemberUpdateTeamCmd)
}

void TeamMemberUpdateTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 209;
  param_ = 10;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemberUpdateTeamCmd::~TeamMemberUpdateTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamMemberUpdateTeamCmd)
  SharedDtor();
}

void TeamMemberUpdateTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamMemberUpdateTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemberUpdateTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemberUpdateTeamCmd_descriptor_;
}

const TeamMemberUpdateTeamCmd& TeamMemberUpdateTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

TeamMemberUpdateTeamCmd* TeamMemberUpdateTeamCmd::default_instance_ = NULL;

TeamMemberUpdateTeamCmd* TeamMemberUpdateTeamCmd::New() const {
  return new TeamMemberUpdateTeamCmd;
}

void TeamMemberUpdateTeamCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 209;
    param_ = 10;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  updates_.Clear();
  dels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMemberUpdateTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamMemberUpdateTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_TEAMMEMBER_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ServerTeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ServerTeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updates;
        break;
      }

      // repeated .Cmd.TeamMemberInfo updates = 4;
      case 4: {
        if (tag == 34) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updates;
        if (input->ExpectTag(40)) goto parse_dels;
        break;
      }

      // repeated uint64 dels = 5;
      case 5: {
        if (tag == 40) {
         parse_dels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_dels())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_dels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamMemberUpdateTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamMemberUpdateTeamCmd)
  return false;
#undef DO_
}

void TeamMemberUpdateTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamMemberUpdateTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_TEAMMEMBER_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated .Cmd.TeamMemberInfo updates = 4;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->updates(i), output);
  }

  // repeated uint64 dels = 5;
  for (int i = 0; i < this->dels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->dels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamMemberUpdateTeamCmd)
}

::google::protobuf::uint8* TeamMemberUpdateTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamMemberUpdateTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_TEAMMEMBER_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated .Cmd.TeamMemberInfo updates = 4;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->updates(i), target);
  }

  // repeated uint64 dels = 5;
  for (int i = 0; i < this->dels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->dels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamMemberUpdateTeamCmd)
  return target;
}

int TeamMemberUpdateTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_TEAMMEMBER_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.TeamMemberInfo updates = 4;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated uint64 dels = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->dels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->dels(i));
    }
    total_size += 1 * this->dels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemberUpdateTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMemberUpdateTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMemberUpdateTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMemberUpdateTeamCmd::MergeFrom(const TeamMemberUpdateTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  dels_.MergeFrom(from.dels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMemberUpdateTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemberUpdateTeamCmd::CopyFrom(const TeamMemberUpdateTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberUpdateTeamCmd::IsInitialized() const {

  return true;
}

void TeamMemberUpdateTeamCmd::Swap(TeamMemberUpdateTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    updates_.Swap(&other->updates_);
    dels_.Swap(&other->dels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMemberUpdateTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemberUpdateTeamCmd_descriptor_;
  metadata.reflection = TeamMemberUpdateTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberDataUpdateTeamCmd::kCmdFieldNumber;
const int MemberDataUpdateTeamCmd::kParamFieldNumber;
const int MemberDataUpdateTeamCmd::kCharidFieldNumber;
const int MemberDataUpdateTeamCmd::kUpdatecharidFieldNumber;
const int MemberDataUpdateTeamCmd::kUpdatesFieldNumber;
#endif  // !_MSC_VER

MemberDataUpdateTeamCmd::MemberDataUpdateTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MemberDataUpdateTeamCmd)
}

void MemberDataUpdateTeamCmd::InitAsDefaultInstance() {
}

MemberDataUpdateTeamCmd::MemberDataUpdateTeamCmd(const MemberDataUpdateTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MemberDataUpdateTeamCmd)
}

void MemberDataUpdateTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 209;
  param_ = 11;
  charid_ = GOOGLE_ULONGLONG(0);
  updatecharid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberDataUpdateTeamCmd::~MemberDataUpdateTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MemberDataUpdateTeamCmd)
  SharedDtor();
}

void MemberDataUpdateTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemberDataUpdateTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberDataUpdateTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberDataUpdateTeamCmd_descriptor_;
}

const MemberDataUpdateTeamCmd& MemberDataUpdateTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

MemberDataUpdateTeamCmd* MemberDataUpdateTeamCmd::default_instance_ = NULL;

MemberDataUpdateTeamCmd* MemberDataUpdateTeamCmd::New() const {
  return new MemberDataUpdateTeamCmd;
}

void MemberDataUpdateTeamCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemberDataUpdateTeamCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, updatecharid_);
    cmd_ = 209;
    param_ = 11;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberDataUpdateTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MemberDataUpdateTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_MEMBERDATA_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ServerTeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ServerTeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_updatecharid;
        break;
      }

      // optional uint64 updatecharid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_updatecharid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatecharid_)));
          set_has_updatecharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_updates;
        break;
      }

      // repeated .Cmd.MemberData updates = 5;
      case 5: {
        if (tag == 42) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_updates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MemberDataUpdateTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MemberDataUpdateTeamCmd)
  return false;
#undef DO_
}

void MemberDataUpdateTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MemberDataUpdateTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_MEMBERDATA_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 updatecharid = 4 [default = 0];
  if (has_updatecharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->updatecharid(), output);
  }

  // repeated .Cmd.MemberData updates = 5;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->updates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MemberDataUpdateTeamCmd)
}

::google::protobuf::uint8* MemberDataUpdateTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MemberDataUpdateTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_MEMBERDATA_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 updatecharid = 4 [default = 0];
  if (has_updatecharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->updatecharid(), target);
  }

  // repeated .Cmd.MemberData updates = 5;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->updates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MemberDataUpdateTeamCmd)
  return target;
}

int MemberDataUpdateTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_MEMBERDATA_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 updatecharid = 4 [default = 0];
    if (has_updatecharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatecharid());
    }

  }
  // repeated .Cmd.MemberData updates = 5;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberDataUpdateTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberDataUpdateTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberDataUpdateTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberDataUpdateTeamCmd::MergeFrom(const MemberDataUpdateTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_updatecharid()) {
      set_updatecharid(from.updatecharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberDataUpdateTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberDataUpdateTeamCmd::CopyFrom(const MemberDataUpdateTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberDataUpdateTeamCmd::IsInitialized() const {

  return true;
}

void MemberDataUpdateTeamCmd::Swap(MemberDataUpdateTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(updatecharid_, other->updatecharid_);
    updates_.Swap(&other->updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberDataUpdateTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberDataUpdateTeamCmd_descriptor_;
  metadata.reflection = MemberDataUpdateTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastCmdTeamCmd::kCmdFieldNumber;
const int BroadcastCmdTeamCmd::kParamFieldNumber;
const int BroadcastCmdTeamCmd::kTypeFieldNumber;
const int BroadcastCmdTeamCmd::kIdFieldNumber;
const int BroadcastCmdTeamCmd::kDataFieldNumber;
const int BroadcastCmdTeamCmd::kLenFieldNumber;
#endif  // !_MSC_VER

BroadcastCmdTeamCmd::BroadcastCmdTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BroadcastCmdTeamCmd)
}

void BroadcastCmdTeamCmd::InitAsDefaultInstance() {
}

BroadcastCmdTeamCmd::BroadcastCmdTeamCmd(const BroadcastCmdTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BroadcastCmdTeamCmd)
}

void BroadcastCmdTeamCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 209;
  param_ = 12;
  type_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastCmdTeamCmd::~BroadcastCmdTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BroadcastCmdTeamCmd)
  SharedDtor();
}

void BroadcastCmdTeamCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void BroadcastCmdTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastCmdTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastCmdTeamCmd_descriptor_;
}

const BroadcastCmdTeamCmd& BroadcastCmdTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

BroadcastCmdTeamCmd* BroadcastCmdTeamCmd::default_instance_ = NULL;

BroadcastCmdTeamCmd* BroadcastCmdTeamCmd::New() const {
  return new BroadcastCmdTeamCmd;
}

void BroadcastCmdTeamCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BroadcastCmdTeamCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, len_);
    cmd_ = 209;
    param_ = 12;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastCmdTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BroadcastCmdTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_BROADCAST_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ServerTeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ServerTeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint64 id = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_len;
        break;
      }

      // optional uint32 len = 6;
      case 6: {
        if (tag == 48) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BroadcastCmdTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BroadcastCmdTeamCmd)
  return false;
#undef DO_
}

void BroadcastCmdTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BroadcastCmdTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_BROADCAST_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 type = 3 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint64 id = 4 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // optional uint32 len = 6;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BroadcastCmdTeamCmd)
}

::google::protobuf::uint8* BroadcastCmdTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BroadcastCmdTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_BROADCAST_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 type = 3 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint64 id = 4 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // optional uint32 len = 6;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BroadcastCmdTeamCmd)
  return target;
}

int BroadcastCmdTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_BROADCAST_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 type = 3 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 id = 4 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 6;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastCmdTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastCmdTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastCmdTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastCmdTeamCmd::MergeFrom(const BroadcastCmdTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastCmdTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastCmdTeamCmd::CopyFrom(const BroadcastCmdTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastCmdTeamCmd::IsInitialized() const {

  return true;
}

void BroadcastCmdTeamCmd::Swap(BroadcastCmdTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastCmdTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastCmdTeamCmd_descriptor_;
  metadata.reflection = BroadcastCmdTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CatEnterTeamCmd::kCmdFieldNumber;
const int CatEnterTeamCmd::kParamFieldNumber;
const int CatEnterTeamCmd::kCharidFieldNumber;
const int CatEnterTeamCmd::kCatsFieldNumber;
#endif  // !_MSC_VER

CatEnterTeamCmd::CatEnterTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CatEnterTeamCmd)
}

void CatEnterTeamCmd::InitAsDefaultInstance() {
}

CatEnterTeamCmd::CatEnterTeamCmd(const CatEnterTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CatEnterTeamCmd)
}

void CatEnterTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 209;
  param_ = 13;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CatEnterTeamCmd::~CatEnterTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CatEnterTeamCmd)
  SharedDtor();
}

void CatEnterTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CatEnterTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatEnterTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatEnterTeamCmd_descriptor_;
}

const CatEnterTeamCmd& CatEnterTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

CatEnterTeamCmd* CatEnterTeamCmd::default_instance_ = NULL;

CatEnterTeamCmd* CatEnterTeamCmd::New() const {
  return new CatEnterTeamCmd;
}

void CatEnterTeamCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 209;
    param_ = 13;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  cats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CatEnterTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CatEnterTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_ENTERTEAM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ServerTeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ServerTeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cats;
        break;
      }

      // repeated .Cmd.MemberCat cats = 4;
      case 4: {
        if (tag == 34) {
         parse_cats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cats;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CatEnterTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CatEnterTeamCmd)
  return false;
#undef DO_
}

void CatEnterTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CatEnterTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_ENTERTEAM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated .Cmd.MemberCat cats = 4;
  for (int i = 0; i < this->cats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CatEnterTeamCmd)
}

::google::protobuf::uint8* CatEnterTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CatEnterTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_ENTERTEAM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated .Cmd.MemberCat cats = 4;
  for (int i = 0; i < this->cats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CatEnterTeamCmd)
  return target;
}

int CatEnterTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_ENTERTEAM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.MemberCat cats = 4;
  total_size += 1 * this->cats_size();
  for (int i = 0; i < this->cats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatEnterTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CatEnterTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CatEnterTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CatEnterTeamCmd::MergeFrom(const CatEnterTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  cats_.MergeFrom(from.cats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CatEnterTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatEnterTeamCmd::CopyFrom(const CatEnterTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatEnterTeamCmd::IsInitialized() const {

  return true;
}

void CatEnterTeamCmd::Swap(CatEnterTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    cats_.Swap(&other->cats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CatEnterTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CatEnterTeamCmd_descriptor_;
  metadata.reflection = CatEnterTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CatExitTeamCmd::kCmdFieldNumber;
const int CatExitTeamCmd::kParamFieldNumber;
const int CatExitTeamCmd::kCharidFieldNumber;
const int CatExitTeamCmd::kCatidFieldNumber;
const int CatExitTeamCmd::kEnterfailFieldNumber;
#endif  // !_MSC_VER

CatExitTeamCmd::CatExitTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CatExitTeamCmd)
}

void CatExitTeamCmd::InitAsDefaultInstance() {
}

CatExitTeamCmd::CatExitTeamCmd(const CatExitTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CatExitTeamCmd)
}

void CatExitTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 209;
  param_ = 14;
  charid_ = GOOGLE_ULONGLONG(0);
  catid_ = 0u;
  enterfail_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CatExitTeamCmd::~CatExitTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CatExitTeamCmd)
  SharedDtor();
}

void CatExitTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CatExitTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatExitTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatExitTeamCmd_descriptor_;
}

const CatExitTeamCmd& CatExitTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

CatExitTeamCmd* CatExitTeamCmd::default_instance_ = NULL;

CatExitTeamCmd* CatExitTeamCmd::New() const {
  return new CatExitTeamCmd;
}

void CatExitTeamCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CatExitTeamCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, enterfail_);
    cmd_ = 209;
    param_ = 14;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CatExitTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CatExitTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_EXITTEAM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ServerTeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ServerTeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_catid;
        break;
      }

      // optional uint32 catid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_catid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catid_)));
          set_has_catid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_enterfail;
        break;
      }

      // optional bool enterfail = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_enterfail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enterfail_)));
          set_has_enterfail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CatExitTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CatExitTeamCmd)
  return false;
#undef DO_
}

void CatExitTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CatExitTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_EXITTEAM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 catid = 4 [default = 0];
  if (has_catid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->catid(), output);
  }

  // optional bool enterfail = 5 [default = false];
  if (has_enterfail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enterfail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CatExitTeamCmd)
}

::google::protobuf::uint8* CatExitTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CatExitTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_EXITTEAM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 catid = 4 [default = 0];
  if (has_catid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->catid(), target);
  }

  // optional bool enterfail = 5 [default = false];
  if (has_enterfail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enterfail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CatExitTeamCmd)
  return target;
}

int CatExitTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_EXITTEAM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 catid = 4 [default = 0];
    if (has_catid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->catid());
    }

    // optional bool enterfail = 5 [default = false];
    if (has_enterfail()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatExitTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CatExitTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CatExitTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CatExitTeamCmd::MergeFrom(const CatExitTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_catid()) {
      set_catid(from.catid());
    }
    if (from.has_enterfail()) {
      set_enterfail(from.enterfail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CatExitTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatExitTeamCmd::CopyFrom(const CatExitTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatExitTeamCmd::IsInitialized() const {

  return true;
}

void CatExitTeamCmd::Swap(CatExitTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(catid_, other->catid_);
    std::swap(enterfail_, other->enterfail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CatExitTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CatExitTeamCmd_descriptor_;
  metadata.reflection = CatExitTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CatFireTeamCmd::kCmdFieldNumber;
const int CatFireTeamCmd::kParamFieldNumber;
const int CatFireTeamCmd::kCharidFieldNumber;
const int CatFireTeamCmd::kNpcidFieldNumber;
const int CatFireTeamCmd::kCatidFieldNumber;
#endif  // !_MSC_VER

CatFireTeamCmd::CatFireTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CatFireTeamCmd)
}

void CatFireTeamCmd::InitAsDefaultInstance() {
}

CatFireTeamCmd::CatFireTeamCmd(const CatFireTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CatFireTeamCmd)
}

void CatFireTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 209;
  param_ = 15;
  charid_ = GOOGLE_ULONGLONG(0);
  npcid_ = GOOGLE_ULONGLONG(0);
  catid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CatFireTeamCmd::~CatFireTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CatFireTeamCmd)
  SharedDtor();
}

void CatFireTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CatFireTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatFireTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatFireTeamCmd_descriptor_;
}

const CatFireTeamCmd& CatFireTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

CatFireTeamCmd* CatFireTeamCmd::default_instance_ = NULL;

CatFireTeamCmd* CatFireTeamCmd::New() const {
  return new CatFireTeamCmd;
}

void CatFireTeamCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CatFireTeamCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, catid_);
    cmd_ = 209;
    param_ = 15;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CatFireTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CatFireTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_FIRE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ServerTeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ServerTeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npcid;
        break;
      }

      // optional uint64 npcid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_catid;
        break;
      }

      // optional uint64 catid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_catid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &catid_)));
          set_has_catid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CatFireTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CatFireTeamCmd)
  return false;
#undef DO_
}

void CatFireTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CatFireTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_FIRE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 npcid = 4 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->npcid(), output);
  }

  // optional uint64 catid = 5 [default = 0];
  if (has_catid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->catid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CatFireTeamCmd)
}

::google::protobuf::uint8* CatFireTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CatFireTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_FIRE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 npcid = 4 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->npcid(), target);
  }

  // optional uint64 catid = 5 [default = 0];
  if (has_catid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->catid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CatFireTeamCmd)
  return target;
}

int CatFireTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_FIRE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 npcid = 4 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

    // optional uint64 catid = 5 [default = 0];
    if (has_catid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->catid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatFireTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CatFireTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CatFireTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CatFireTeamCmd::MergeFrom(const CatFireTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_catid()) {
      set_catid(from.catid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CatFireTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatFireTeamCmd::CopyFrom(const CatFireTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatFireTeamCmd::IsInitialized() const {

  return true;
}

void CatFireTeamCmd::Swap(CatFireTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(npcid_, other->npcid_);
    std::swap(catid_, other->catid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CatFireTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CatFireTeamCmd_descriptor_;
  metadata.reflection = CatFireTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CatCallTeamCmd::kCmdFieldNumber;
const int CatCallTeamCmd::kParamFieldNumber;
const int CatCallTeamCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

CatCallTeamCmd::CatCallTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CatCallTeamCmd)
}

void CatCallTeamCmd::InitAsDefaultInstance() {
}

CatCallTeamCmd::CatCallTeamCmd(const CatCallTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CatCallTeamCmd)
}

void CatCallTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 209;
  param_ = 16;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CatCallTeamCmd::~CatCallTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CatCallTeamCmd)
  SharedDtor();
}

void CatCallTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CatCallTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatCallTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatCallTeamCmd_descriptor_;
}

const CatCallTeamCmd& CatCallTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

CatCallTeamCmd* CatCallTeamCmd::default_instance_ = NULL;

CatCallTeamCmd* CatCallTeamCmd::New() const {
  return new CatCallTeamCmd;
}

void CatCallTeamCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 209;
    param_ = 16;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CatCallTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CatCallTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_CALL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ServerTeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ServerTeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CatCallTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CatCallTeamCmd)
  return false;
#undef DO_
}

void CatCallTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CatCallTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_CALL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CatCallTeamCmd)
}

::google::protobuf::uint8* CatCallTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CatCallTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_CALL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CatCallTeamCmd)
  return target;
}

int CatCallTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_CALL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatCallTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CatCallTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CatCallTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CatCallTeamCmd::MergeFrom(const CatCallTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CatCallTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatCallTeamCmd::CopyFrom(const CatCallTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatCallTeamCmd::IsInitialized() const {

  return true;
}

void CatCallTeamCmd::Swap(CatCallTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CatCallTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CatCallTeamCmd_descriptor_;
  metadata.reflection = CatCallTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeLeaderTeamCmd::kCmdFieldNumber;
const int BeLeaderTeamCmd::kParamFieldNumber;
const int BeLeaderTeamCmd::kCharidFieldNumber;
const int BeLeaderTeamCmd::kTeamjobFieldNumber;
#endif  // !_MSC_VER

BeLeaderTeamCmd::BeLeaderTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BeLeaderTeamCmd)
}

void BeLeaderTeamCmd::InitAsDefaultInstance() {
}

BeLeaderTeamCmd::BeLeaderTeamCmd(const BeLeaderTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BeLeaderTeamCmd)
}

void BeLeaderTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 209;
  param_ = 17;
  charid_ = GOOGLE_ULONGLONG(0);
  teamjob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeLeaderTeamCmd::~BeLeaderTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BeLeaderTeamCmd)
  SharedDtor();
}

void BeLeaderTeamCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeLeaderTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeLeaderTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeLeaderTeamCmd_descriptor_;
}

const BeLeaderTeamCmd& BeLeaderTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

BeLeaderTeamCmd* BeLeaderTeamCmd::default_instance_ = NULL;

BeLeaderTeamCmd* BeLeaderTeamCmd::New() const {
  return new BeLeaderTeamCmd;
}

void BeLeaderTeamCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BeLeaderTeamCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, teamjob_);
    cmd_ = 209;
    param_ = 17;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeLeaderTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BeLeaderTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_BE_LEADER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ServerTeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ServerTeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamjob;
        break;
      }

      // optional uint32 teamjob = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_teamjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamjob_)));
          set_has_teamjob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BeLeaderTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BeLeaderTeamCmd)
  return false;
#undef DO_
}

void BeLeaderTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BeLeaderTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_BE_LEADER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 teamjob = 4 [default = 0];
  if (has_teamjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teamjob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BeLeaderTeamCmd)
}

::google::protobuf::uint8* BeLeaderTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BeLeaderTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_BE_LEADER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 teamjob = 4 [default = 0];
  if (has_teamjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teamjob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BeLeaderTeamCmd)
  return target;
}

int BeLeaderTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_BE_LEADER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 teamjob = 4 [default = 0];
    if (has_teamjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamjob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeLeaderTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeLeaderTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeLeaderTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeLeaderTeamCmd::MergeFrom(const BeLeaderTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_teamjob()) {
      set_teamjob(from.teamjob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeLeaderTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeLeaderTeamCmd::CopyFrom(const BeLeaderTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeLeaderTeamCmd::IsInitialized() const {

  return true;
}

void BeLeaderTeamCmd::Swap(BeLeaderTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(teamjob_, other->teamjob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeLeaderTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeLeaderTeamCmd_descriptor_;
  metadata.reflection = BeLeaderTeamCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CatEnterOwnTeamCmd::kCmdFieldNumber;
const int CatEnterOwnTeamCmd::kParamFieldNumber;
const int CatEnterOwnTeamCmd::kCharidFieldNumber;
const int CatEnterOwnTeamCmd::kDataFieldNumber;
#endif  // !_MSC_VER

CatEnterOwnTeamCmd::CatEnterOwnTeamCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CatEnterOwnTeamCmd)
}

void CatEnterOwnTeamCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::TeamData*>(&::Cmd::TeamData::default_instance());
}

CatEnterOwnTeamCmd::CatEnterOwnTeamCmd(const CatEnterOwnTeamCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CatEnterOwnTeamCmd)
}

void CatEnterOwnTeamCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 209;
  param_ = 18;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CatEnterOwnTeamCmd::~CatEnterOwnTeamCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CatEnterOwnTeamCmd)
  SharedDtor();
}

void CatEnterOwnTeamCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CatEnterOwnTeamCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatEnterOwnTeamCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatEnterOwnTeamCmd_descriptor_;
}

const CatEnterOwnTeamCmd& CatEnterOwnTeamCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCmd_2eproto();
  return *default_instance_;
}

CatEnterOwnTeamCmd* CatEnterOwnTeamCmd::default_instance_ = NULL;

CatEnterOwnTeamCmd* CatEnterOwnTeamCmd::New() const {
  return new CatEnterOwnTeamCmd;
}

void CatEnterOwnTeamCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 209;
    param_ = 18;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::TeamData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CatEnterOwnTeamCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CatEnterOwnTeamCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_ENTEROWNTEAM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ServerTeamParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ServerTeamParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .Cmd.TeamData data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CatEnterOwnTeamCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CatEnterOwnTeamCmd)
  return false;
#undef DO_
}

void CatEnterOwnTeamCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CatEnterOwnTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_ENTEROWNTEAM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.TeamData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CatEnterOwnTeamCmd)
}

::google::protobuf::uint8* CatEnterOwnTeamCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CatEnterOwnTeamCmd)
  // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_ENTEROWNTEAM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.TeamData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CatEnterOwnTeamCmd)
  return target;
}

int CatEnterOwnTeamCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TEAM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ServerTeamParam param = 2 [default = SERVERTEAMPARAM_CAT_ENTEROWNTEAM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.TeamData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatEnterOwnTeamCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CatEnterOwnTeamCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CatEnterOwnTeamCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CatEnterOwnTeamCmd::MergeFrom(const CatEnterOwnTeamCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::TeamData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CatEnterOwnTeamCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatEnterOwnTeamCmd::CopyFrom(const CatEnterOwnTeamCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatEnterOwnTeamCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void CatEnterOwnTeamCmd::Swap(CatEnterOwnTeamCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CatEnterOwnTeamCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CatEnterOwnTeamCmd_descriptor_;
  metadata.reflection = CatEnterOwnTeamCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
