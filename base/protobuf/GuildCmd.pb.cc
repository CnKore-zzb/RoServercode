// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuildCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GuildCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* GuildPrayCFG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildPrayCFG_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMemberPray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMemberPray_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGuildPray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGuildPray_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobDonate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobDonate_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserGuildBuilding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserGuildBuilding_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGuildBuilding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGuildBuilding_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGuildMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGuildMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGuildApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGuildApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildJob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildJob_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBuildMaterial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBuildMaterial_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBuilding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBuilding_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBuildingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBuildingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildChallengeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildChallengeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWelfareItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWelfareItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWelfare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWelfare_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildArtifactItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildArtifactItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildArtifactData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildArtifactData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildArtifact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildArtifact_reflection_ = NULL;
const ::google::protobuf::Descriptor* GQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGGvg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGGvg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildTreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildTreasure_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGuildTreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGuildTreasure_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGuildMisc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGuildMisc_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGuildPack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGuildPack_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGuildEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGuildEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildPhoto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildPhoto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhotoFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGuildPhoto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGuildPhoto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildSummaryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildSummaryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryGuildListGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryGuildListGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGuildGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGuildGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGuildGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGuildGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMemberUpdateGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMemberUpdateGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildApplyUpdateGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildApplyUpdateGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildDataUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildDataUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildDataUpdateGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildDataUpdateGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMemberDataUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMemberDataUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMemberDataUpdateGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMemberDataUpdateGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyGuildGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyGuildGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessApplyGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessApplyGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteMemberGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteMemberGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessInviteGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessInviteGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuildOptionGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuildOptionGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickMemberGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickMemberGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeJobGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeJobGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitGuildGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitGuildGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeChairGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeChairGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DismissGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DismissGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelupGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelupGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DonateGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DonateGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DonateItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DonateItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DonateListGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DonateListGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDonateItemGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDonateItemGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DonateFrameGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DonateFrameGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterTerritoryGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterTerritoryGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrayGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrayGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildInfoNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildInfoNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildPrayNtfGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildPrayNtfGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelupEffectGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelupEffectGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPackGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPackGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackUpdateGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackUpdateGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeZoneGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeZoneGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeZoneNtfGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeZoneNtfGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeZoneAnswerGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeZoneAnswerGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryEventListGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryEventListGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewEventGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewEventGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyRewardConGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyRewardConGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameStatusGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameStatusGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyAuthGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyAuthGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobUpdateGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobUpdateGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameQueryGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameQueryGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildCityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildCityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryGuildCityInfoGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryGuildCityInfoGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityActionGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityActionGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* IconInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IconInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildIconSyncGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildIconSyncGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildIconAddGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildIconAddGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildIconUploadGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildIconUploadGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenFunctionGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenFunctionGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmitMaterialGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmitMaterialGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingNtfGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingNtfGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingSubmitCountGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingSubmitCountGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeUpdateNtfGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeUpdateNtfGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareNtfGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareNtfGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetWelfareGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetWelfareGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingLvupEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingLvupEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingLvupEffGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingLvupEffGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArtifactUpdateNtfGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtifactUpdateNtfGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArtifactProduceGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtifactProduceGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArtifactOptGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtifactOptGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryGQuestGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryGQuestGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureActionGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureActionGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingSubmitRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingSubmitRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryBuildingRankGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryBuildingRankGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryTreasureResultGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryTreasureResultGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityShowInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityShowInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryGCityShowInfoGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryGCityShowInfoGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgOpenFireGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgOpenFireGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterPunishTimeNtfGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterPunishTimeNtfGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenRealtimeVoiceGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenRealtimeVoiceGuildCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildGlobal_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildJob_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPrayType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildFunction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAuth_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildBuilding_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildWelfare_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETreasureState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildData_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildMemberData_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EModify_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildCityStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECityAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EIconState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EArtifactOptType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildTreasureType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETreasureAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETreasurePoint_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCityState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GuildCmd_2eproto() {
  protobuf_AddDesc_GuildCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GuildCmd.proto");
  GOOGLE_CHECK(file != NULL);
  GuildPrayCFG_descriptor_ = file->message_type(0);
  static const int GuildPrayCFG_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayCFG, prayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayCFG, praylv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayCFG, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayCFG, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayCFG, costs_),
  };
  GuildPrayCFG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildPrayCFG_descriptor_,
      GuildPrayCFG::default_instance_,
      GuildPrayCFG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayCFG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayCFG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildPrayCFG));
  GuildMemberPray_descriptor_ = file->message_type(1);
  static const int GuildMemberPray_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberPray, pray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberPray, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberPray, cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberPray, next_),
  };
  GuildMemberPray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMemberPray_descriptor_,
      GuildMemberPray::default_instance_,
      GuildMemberPray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberPray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberPray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMemberPray));
  BlobGuildPray_descriptor_ = file->message_type(2);
  static const int BlobGuildPray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildPray, prays_),
  };
  BlobGuildPray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGuildPray_descriptor_,
      BlobGuildPray::default_instance_,
      BlobGuildPray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildPray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildPray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGuildPray));
  BlobDonate_descriptor_ = file->message_type(3);
  static const int BlobDonate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDonate, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDonate, steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDonate, donatetime1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDonate, donatetime2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDonate, donatetime3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDonate, donatetime4_),
  };
  BlobDonate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobDonate_descriptor_,
      BlobDonate::default_instance_,
      BlobDonate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDonate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDonate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobDonate));
  UserGuildBuilding_descriptor_ = file->message_type(4);
  static const int UserGuildBuilding_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildBuilding, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildBuilding, submitcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildBuilding, nextwelfaretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildBuilding, levelupeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildBuilding, submitcounttotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildBuilding, submittime_),
  };
  UserGuildBuilding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserGuildBuilding_descriptor_,
      UserGuildBuilding::default_instance_,
      UserGuildBuilding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildBuilding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildBuilding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserGuildBuilding));
  BlobGuildBuilding_descriptor_ = file->message_type(5);
  static const int BlobGuildBuilding_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildBuilding, buildings_),
  };
  BlobGuildBuilding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGuildBuilding_descriptor_,
      BlobGuildBuilding::default_instance_,
      BlobGuildBuilding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildBuilding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildBuilding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGuildBuilding));
  GuildMember_descriptor_ = file->message_type(6);
  static const int GuildMember_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, baselevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, weekcontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, totalcontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, entertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, giftpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, weekasset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, asset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, mouth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, eye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, pray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, donate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, levelupeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, exchangezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, building_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, lastexittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, redtip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, buildingeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, realtimevoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, weekbcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, totalcoin_),
  };
  GuildMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMember_descriptor_,
      GuildMember::default_instance_,
      GuildMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMember));
  BlobGuildMember_descriptor_ = file->message_type(7);
  static const int BlobGuildMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMember, members_),
  };
  BlobGuildMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGuildMember_descriptor_,
      BlobGuildMember::default_instance_,
      BlobGuildMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGuildMember));
  GuildApply_descriptor_ = file->message_type(8);
  static const int GuildApply_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, baselevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, entertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, mouth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, eye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, accid_),
  };
  GuildApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildApply_descriptor_,
      GuildApply::default_instance_,
      GuildApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildApply));
  BlobGuildApply_descriptor_ = file->message_type(9);
  static const int BlobGuildApply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildApply, applys_),
  };
  BlobGuildApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGuildApply_descriptor_,
      BlobGuildApply::default_instance_,
      BlobGuildApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGuildApply));
  GuildJob_descriptor_ = file->message_type(10);
  static const int GuildJob_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildJob, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildJob, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildJob, auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildJob, editauth_),
  };
  GuildJob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildJob_descriptor_,
      GuildJob::default_instance_,
      GuildJob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildJob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildJob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildJob));
  GuildQuest_descriptor_ = file->message_type(11);
  static const int GuildQuest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildQuest, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildQuest, time_),
  };
  GuildQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildQuest_descriptor_,
      GuildQuest::default_instance_,
      GuildQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildQuest));
  GuildBuildMaterial_descriptor_ = file->message_type(12);
  static const int GuildBuildMaterial_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildMaterial, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildMaterial, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildMaterial, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildMaterial, itemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildMaterial, rewardid_),
  };
  GuildBuildMaterial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBuildMaterial_descriptor_,
      GuildBuildMaterial::default_instance_,
      GuildBuildMaterial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildMaterial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildMaterial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBuildMaterial));
  GuildBuilding_descriptor_ = file->message_type(13);
  static const int GuildBuilding_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuilding, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuilding, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuilding, materials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuilding, isbuilding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuilding, nextwelfaretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuilding, nextbuildtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuilding, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuilding, restmaterials_),
  };
  GuildBuilding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBuilding_descriptor_,
      GuildBuilding::default_instance_,
      GuildBuilding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuilding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuilding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBuilding));
  GuildBuildingData_descriptor_ = file->message_type(14);
  static const int GuildBuildingData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildingData, buildings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildingData, version_),
  };
  GuildBuildingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBuildingData_descriptor_,
      GuildBuildingData::default_instance_,
      GuildBuildingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBuildingData));
  GuildChallenge_descriptor_ = file->message_type(15);
  static const int GuildChallenge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChallenge, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChallenge, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChallenge, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChallenge, extrareward_),
  };
  GuildChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildChallenge_descriptor_,
      GuildChallenge::default_instance_,
      GuildChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildChallenge));
  GuildChallengeData_descriptor_ = file->message_type(16);
  static const int GuildChallengeData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChallengeData, challenges_),
  };
  GuildChallengeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildChallengeData_descriptor_,
      GuildChallengeData::default_instance_,
      GuildChallengeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChallengeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChallengeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildChallengeData));
  GuildWelfareItem_descriptor_ = file->message_type(17);
  static const int GuildWelfareItem_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfareItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfareItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfareItem, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfareItem, rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfareItem, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfareItem, overduetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfareItem, charids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfareItem, ownername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfareItem, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfareItem, eventguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfareItem, index_),
  };
  GuildWelfareItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWelfareItem_descriptor_,
      GuildWelfareItem::default_instance_,
      GuildWelfareItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfareItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfareItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWelfareItem));
  GuildWelfare_descriptor_ = file->message_type(18);
  static const int GuildWelfare_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfare, items_),
  };
  GuildWelfare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWelfare_descriptor_,
      GuildWelfare::default_instance_,
      GuildWelfare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWelfare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWelfare));
  GuildArtifactItem_descriptor_ = file->message_type(19);
  static const int GuildArtifactItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactItem, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactItem, distributecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactItem, retrievetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactItem, ownerid_),
  };
  GuildArtifactItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildArtifactItem_descriptor_,
      GuildArtifactItem::default_instance_,
      GuildArtifactItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildArtifactItem));
  GuildArtifactData_descriptor_ = file->message_type(20);
  static const int GuildArtifactData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactData, producecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactData, maxlevel_),
  };
  GuildArtifactData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildArtifactData_descriptor_,
      GuildArtifactData::default_instance_,
      GuildArtifactData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildArtifactData));
  GuildArtifact_descriptor_ = file->message_type(21);
  static const int GuildArtifact_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifact, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifact, datas_),
  };
  GuildArtifact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildArtifact_descriptor_,
      GuildArtifact::default_instance_,
      GuildArtifact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildArtifact));
  GQuest_descriptor_ = file->message_type(22);
  static const int GQuest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GQuest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GQuest, datas_),
  };
  GQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GQuest_descriptor_,
      GQuest::default_instance_,
      GQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GQuest));
  BlobGQuest_descriptor_ = file->message_type(23);
  static const int BlobGQuest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGQuest, quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGQuest, accepts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGQuest, submit_),
  };
  BlobGQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGQuest_descriptor_,
      BlobGQuest::default_instance_,
      BlobGQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGQuest));
  BlobGGvg_descriptor_ = file->message_type(24);
  static const int BlobGGvg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGGvg, partin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGGvg, partin_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGGvg, sugvgtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGGvg, sugvgcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGGvg, sugvgscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGGvg, version_),
  };
  BlobGGvg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGGvg_descriptor_,
      BlobGGvg::default_instance_,
      BlobGGvg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGGvg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGGvg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGGvg));
  GuildTreasure_descriptor_ = file->message_type(25);
  static const int GuildTreasure_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTreasure, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTreasure, count_),
  };
  GuildTreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildTreasure_descriptor_,
      GuildTreasure::default_instance_,
      GuildTreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildTreasure));
  TreasureItem_descriptor_ = file->message_type(26);
  static const int TreasureItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureItem, datas_),
  };
  TreasureItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureItem_descriptor_,
      TreasureItem::default_instance_,
      TreasureItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureItem));
  TreasureResult_descriptor_ = file->message_type(27);
  static const int TreasureResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureResult, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureResult, eventguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureResult, treasureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureResult, totalmember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureResult, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureResult, items_),
  };
  TreasureResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureResult_descriptor_,
      TreasureResult::default_instance_,
      TreasureResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureResult));
  BlobGuildTreasure_descriptor_ = file->message_type(28);
  static const int BlobGuildTreasure_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildTreasure, treasures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildTreasure, result_),
  };
  BlobGuildTreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGuildTreasure_descriptor_,
      BlobGuildTreasure::default_instance_,
      BlobGuildTreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildTreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildTreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGuildTreasure));
  BlobGuildMisc_descriptor_ = file->message_type(29);
  static const int BlobGuildMisc_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, donatetime1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, donatetime2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, nextquesttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, dojomsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, donatetime3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, donatetime4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, renametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, city_giveup_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, auth_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, building_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, openfunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, welfare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, artifact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, treasures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, gvg_),
  };
  BlobGuildMisc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGuildMisc_descriptor_,
      BlobGuildMisc::default_instance_,
      BlobGuildMisc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildMisc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGuildMisc));
  BlobGuildPack_descriptor_ = file->message_type(30);
  static const int BlobGuildPack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildPack, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildPack, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildPack, data_),
  };
  BlobGuildPack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGuildPack_descriptor_,
      BlobGuildPack::default_instance_,
      BlobGuildPack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildPack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildPack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGuildPack));
  BlobGuildEvent_descriptor_ = file->message_type(31);
  static const int BlobGuildEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildEvent, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildEvent, events_),
  };
  BlobGuildEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGuildEvent_descriptor_,
      BlobGuildEvent::default_instance_,
      BlobGuildEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGuildEvent));
  GuildPhoto_descriptor_ = file->message_type(32);
  static const int GuildPhoto_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPhoto, accid_svr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPhoto, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPhoto, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPhoto, anglez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPhoto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPhoto, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPhoto, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPhoto, source_),
  };
  GuildPhoto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildPhoto_descriptor_,
      GuildPhoto::default_instance_,
      GuildPhoto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPhoto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPhoto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildPhoto));
  PhotoFrame_descriptor_ = file->message_type(33);
  static const int PhotoFrame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoFrame, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoFrame, photo_),
  };
  PhotoFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhotoFrame_descriptor_,
      PhotoFrame::default_instance_,
      PhotoFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhotoFrame));
  BlobGuildPhoto_descriptor_ = file->message_type(34);
  static const int BlobGuildPhoto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildPhoto, frames_),
  };
  BlobGuildPhoto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGuildPhoto_descriptor_,
      BlobGuildPhoto::default_instance_,
      BlobGuildPhoto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildPhoto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildPhoto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGuildPhoto));
  GuildSummaryData_descriptor_ = file->message_type(35);
  static const int GuildSummaryData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSummaryData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSummaryData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSummaryData, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSummaryData, curmember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSummaryData, maxmember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSummaryData, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSummaryData, chairmangender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSummaryData, chairmanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSummaryData, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSummaryData, recruitinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSummaryData, portrait_),
  };
  GuildSummaryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildSummaryData_descriptor_,
      GuildSummaryData::default_instance_,
      GuildSummaryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSummaryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSummaryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildSummaryData));
  GuildData_descriptor_ = file->message_type(36);
  static const int GuildData_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, questresettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, asset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, dismisstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, zonetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, nextzone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, donatetime1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, donatetime2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, boardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, recruitinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, applys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, jobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, assettoday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, citygiveuptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, openfunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, challenges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, gvg_treasure_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, guild_treasure_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, bcoin_treasure_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, insupergvg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, supergvg_lv_),
  };
  GuildData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildData_descriptor_,
      GuildData::default_instance_,
      GuildData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildData));
  QueryGuildListGuildCmd_descriptor_ = file->message_type(37);
  static const int QueryGuildListGuildCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildListGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildListGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildListGuildCmd, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildListGuildCmd, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildListGuildCmd, list_),
  };
  QueryGuildListGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryGuildListGuildCmd_descriptor_,
      QueryGuildListGuildCmd::default_instance_,
      QueryGuildListGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildListGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildListGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryGuildListGuildCmd));
  CreateGuildGuildCmd_descriptor_ = file->message_type(38);
  static const int CreateGuildGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildGuildCmd, name_),
  };
  CreateGuildGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateGuildGuildCmd_descriptor_,
      CreateGuildGuildCmd::default_instance_,
      CreateGuildGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGuildGuildCmd));
  EnterGuildGuildCmd_descriptor_ = file->message_type(39);
  static const int EnterGuildGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildGuildCmd, data_),
  };
  EnterGuildGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterGuildGuildCmd_descriptor_,
      EnterGuildGuildCmd::default_instance_,
      EnterGuildGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterGuildGuildCmd));
  GuildMemberUpdateGuildCmd_descriptor_ = file->message_type(40);
  static const int GuildMemberUpdateGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberUpdateGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberUpdateGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberUpdateGuildCmd, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberUpdateGuildCmd, dels_),
  };
  GuildMemberUpdateGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMemberUpdateGuildCmd_descriptor_,
      GuildMemberUpdateGuildCmd::default_instance_,
      GuildMemberUpdateGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberUpdateGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberUpdateGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMemberUpdateGuildCmd));
  GuildApplyUpdateGuildCmd_descriptor_ = file->message_type(41);
  static const int GuildApplyUpdateGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyUpdateGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyUpdateGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyUpdateGuildCmd, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyUpdateGuildCmd, dels_),
  };
  GuildApplyUpdateGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildApplyUpdateGuildCmd_descriptor_,
      GuildApplyUpdateGuildCmd::default_instance_,
      GuildApplyUpdateGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyUpdateGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyUpdateGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildApplyUpdateGuildCmd));
  GuildDataUpdate_descriptor_ = file->message_type(42);
  static const int GuildDataUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdate, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdate, data_),
  };
  GuildDataUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildDataUpdate_descriptor_,
      GuildDataUpdate::default_instance_,
      GuildDataUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildDataUpdate));
  GuildDataUpdateGuildCmd_descriptor_ = file->message_type(43);
  static const int GuildDataUpdateGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdateGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdateGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdateGuildCmd, updates_),
  };
  GuildDataUpdateGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildDataUpdateGuildCmd_descriptor_,
      GuildDataUpdateGuildCmd::default_instance_,
      GuildDataUpdateGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdateGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdateGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildDataUpdateGuildCmd));
  GuildMemberDataUpdate_descriptor_ = file->message_type(44);
  static const int GuildMemberDataUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdate, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdate, data_),
  };
  GuildMemberDataUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMemberDataUpdate_descriptor_,
      GuildMemberDataUpdate::default_instance_,
      GuildMemberDataUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMemberDataUpdate));
  GuildMemberDataUpdateGuildCmd_descriptor_ = file->message_type(45);
  static const int GuildMemberDataUpdateGuildCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdateGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdateGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdateGuildCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdateGuildCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdateGuildCmd, updates_),
  };
  GuildMemberDataUpdateGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMemberDataUpdateGuildCmd_descriptor_,
      GuildMemberDataUpdateGuildCmd::default_instance_,
      GuildMemberDataUpdateGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdateGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdateGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMemberDataUpdateGuildCmd));
  ApplyGuildGuildCmd_descriptor_ = file->message_type(46);
  static const int ApplyGuildGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildGuildCmd, guid_),
  };
  ApplyGuildGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyGuildGuildCmd_descriptor_,
      ApplyGuildGuildCmd::default_instance_,
      ApplyGuildGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyGuildGuildCmd));
  ProcessApplyGuildCmd_descriptor_ = file->message_type(47);
  static const int ProcessApplyGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessApplyGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessApplyGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessApplyGuildCmd, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessApplyGuildCmd, charid_),
  };
  ProcessApplyGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessApplyGuildCmd_descriptor_,
      ProcessApplyGuildCmd::default_instance_,
      ProcessApplyGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessApplyGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessApplyGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessApplyGuildCmd));
  InviteMemberGuildCmd_descriptor_ = file->message_type(48);
  static const int InviteMemberGuildCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMemberGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMemberGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMemberGuildCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMemberGuildCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMemberGuildCmd, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMemberGuildCmd, invitename_),
  };
  InviteMemberGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteMemberGuildCmd_descriptor_,
      InviteMemberGuildCmd::default_instance_,
      InviteMemberGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMemberGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMemberGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteMemberGuildCmd));
  ProcessInviteGuildCmd_descriptor_ = file->message_type(49);
  static const int ProcessInviteGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInviteGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInviteGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInviteGuildCmd, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInviteGuildCmd, guid_),
  };
  ProcessInviteGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessInviteGuildCmd_descriptor_,
      ProcessInviteGuildCmd::default_instance_,
      ProcessInviteGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInviteGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInviteGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessInviteGuildCmd));
  SetGuildOptionGuildCmd_descriptor_ = file->message_type(50);
  static const int SetGuildOptionGuildCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildOptionGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildOptionGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildOptionGuildCmd, board_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildOptionGuildCmd, recruit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildOptionGuildCmd, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildOptionGuildCmd, jobs_),
  };
  SetGuildOptionGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGuildOptionGuildCmd_descriptor_,
      SetGuildOptionGuildCmd::default_instance_,
      SetGuildOptionGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildOptionGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildOptionGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGuildOptionGuildCmd));
  KickMemberGuildCmd_descriptor_ = file->message_type(51);
  static const int KickMemberGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMemberGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMemberGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMemberGuildCmd, charid_),
  };
  KickMemberGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickMemberGuildCmd_descriptor_,
      KickMemberGuildCmd::default_instance_,
      KickMemberGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMemberGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMemberGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickMemberGuildCmd));
  ChangeJobGuildCmd_descriptor_ = file->message_type(52);
  static const int ChangeJobGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeJobGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeJobGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeJobGuildCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeJobGuildCmd, job_),
  };
  ChangeJobGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeJobGuildCmd_descriptor_,
      ChangeJobGuildCmd::default_instance_,
      ChangeJobGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeJobGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeJobGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeJobGuildCmd));
  ExitGuildGuildCmd_descriptor_ = file->message_type(53);
  static const int ExitGuildGuildCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGuildGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGuildGuildCmd, param_),
  };
  ExitGuildGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitGuildGuildCmd_descriptor_,
      ExitGuildGuildCmd::default_instance_,
      ExitGuildGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGuildGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGuildGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitGuildGuildCmd));
  ExchangeChairGuildCmd_descriptor_ = file->message_type(54);
  static const int ExchangeChairGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeChairGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeChairGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeChairGuildCmd, newcharid_),
  };
  ExchangeChairGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeChairGuildCmd_descriptor_,
      ExchangeChairGuildCmd::default_instance_,
      ExchangeChairGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeChairGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeChairGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeChairGuildCmd));
  DismissGuildCmd_descriptor_ = file->message_type(55);
  static const int DismissGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DismissGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DismissGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DismissGuildCmd, set_),
  };
  DismissGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DismissGuildCmd_descriptor_,
      DismissGuildCmd::default_instance_,
      DismissGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DismissGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DismissGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DismissGuildCmd));
  LevelupGuildCmd_descriptor_ = file->message_type(56);
  static const int LevelupGuildCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupGuildCmd, param_),
  };
  LevelupGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelupGuildCmd_descriptor_,
      LevelupGuildCmd::default_instance_,
      LevelupGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelupGuildCmd));
  DonateGuildCmd_descriptor_ = file->message_type(57);
  static const int DonateGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateGuildCmd, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateGuildCmd, time_),
  };
  DonateGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DonateGuildCmd_descriptor_,
      DonateGuildCmd::default_instance_,
      DonateGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DonateGuildCmd));
  DonateItem_descriptor_ = file->message_type(58);
  static const int DonateItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateItem, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateItem, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateItem, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateItem, itemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateItem, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateItem, medal_),
  };
  DonateItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DonateItem_descriptor_,
      DonateItem::default_instance_,
      DonateItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DonateItem));
  DonateListGuildCmd_descriptor_ = file->message_type(59);
  static const int DonateListGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateListGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateListGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateListGuildCmd, items_),
  };
  DonateListGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DonateListGuildCmd_descriptor_,
      DonateListGuildCmd::default_instance_,
      DonateListGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateListGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateListGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DonateListGuildCmd));
  UpdateDonateItemGuildCmd_descriptor_ = file->message_type(60);
  static const int UpdateDonateItemGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDonateItemGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDonateItemGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDonateItemGuildCmd, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDonateItemGuildCmd, del_),
  };
  UpdateDonateItemGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDonateItemGuildCmd_descriptor_,
      UpdateDonateItemGuildCmd::default_instance_,
      UpdateDonateItemGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDonateItemGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDonateItemGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDonateItemGuildCmd));
  DonateFrameGuildCmd_descriptor_ = file->message_type(61);
  static const int DonateFrameGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateFrameGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateFrameGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateFrameGuildCmd, open_),
  };
  DonateFrameGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DonateFrameGuildCmd_descriptor_,
      DonateFrameGuildCmd::default_instance_,
      DonateFrameGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateFrameGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateFrameGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DonateFrameGuildCmd));
  EnterTerritoryGuildCmd_descriptor_ = file->message_type(62);
  static const int EnterTerritoryGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTerritoryGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTerritoryGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTerritoryGuildCmd, handid_),
  };
  EnterTerritoryGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterTerritoryGuildCmd_descriptor_,
      EnterTerritoryGuildCmd::default_instance_,
      EnterTerritoryGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTerritoryGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTerritoryGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterTerritoryGuildCmd));
  PrayGuildCmd_descriptor_ = file->message_type(63);
  static const int PrayGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayGuildCmd, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayGuildCmd, pray_),
  };
  PrayGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrayGuildCmd_descriptor_,
      PrayGuildCmd::default_instance_,
      PrayGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrayGuildCmd));
  GuildInfoNtf_descriptor_ = file->message_type(64);
  static const int GuildInfoNtf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoNtf, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoNtf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoNtf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoNtf, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoNtf, job_),
  };
  GuildInfoNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildInfoNtf_descriptor_,
      GuildInfoNtf::default_instance_,
      GuildInfoNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildInfoNtf));
  GuildPrayNtfGuildCmd_descriptor_ = file->message_type(65);
  static const int GuildPrayNtfGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayNtfGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayNtfGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayNtfGuildCmd, prays_),
  };
  GuildPrayNtfGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildPrayNtfGuildCmd_descriptor_,
      GuildPrayNtfGuildCmd::default_instance_,
      GuildPrayNtfGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayNtfGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayNtfGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildPrayNtfGuildCmd));
  LevelupEffectGuildCmd_descriptor_ = file->message_type(66);
  static const int LevelupEffectGuildCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupEffectGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupEffectGuildCmd, param_),
  };
  LevelupEffectGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelupEffectGuildCmd_descriptor_,
      LevelupEffectGuildCmd::default_instance_,
      LevelupEffectGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupEffectGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupEffectGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelupEffectGuildCmd));
  QueryPackGuildCmd_descriptor_ = file->message_type(67);
  static const int QueryPackGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackGuildCmd, items_),
  };
  QueryPackGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPackGuildCmd_descriptor_,
      QueryPackGuildCmd::default_instance_,
      QueryPackGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPackGuildCmd));
  PackUpdateGuildCmd_descriptor_ = file->message_type(68);
  static const int PackUpdateGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackUpdateGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackUpdateGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackUpdateGuildCmd, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackUpdateGuildCmd, dels_),
  };
  PackUpdateGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackUpdateGuildCmd_descriptor_,
      PackUpdateGuildCmd::default_instance_,
      PackUpdateGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackUpdateGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackUpdateGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackUpdateGuildCmd));
  ExchangeZoneGuildCmd_descriptor_ = file->message_type(69);
  static const int ExchangeZoneGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneGuildCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneGuildCmd, set_),
  };
  ExchangeZoneGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeZoneGuildCmd_descriptor_,
      ExchangeZoneGuildCmd::default_instance_,
      ExchangeZoneGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeZoneGuildCmd));
  ExchangeZoneNtfGuildCmd_descriptor_ = file->message_type(70);
  static const int ExchangeZoneNtfGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneNtfGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneNtfGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneNtfGuildCmd, nextzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneNtfGuildCmd, curzoneid_),
  };
  ExchangeZoneNtfGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeZoneNtfGuildCmd_descriptor_,
      ExchangeZoneNtfGuildCmd::default_instance_,
      ExchangeZoneNtfGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneNtfGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneNtfGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeZoneNtfGuildCmd));
  ExchangeZoneAnswerGuildCmd_descriptor_ = file->message_type(71);
  static const int ExchangeZoneAnswerGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneAnswerGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneAnswerGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneAnswerGuildCmd, agree_),
  };
  ExchangeZoneAnswerGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeZoneAnswerGuildCmd_descriptor_,
      ExchangeZoneAnswerGuildCmd::default_instance_,
      ExchangeZoneAnswerGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneAnswerGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeZoneAnswerGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeZoneAnswerGuildCmd));
  GuildEvent_descriptor_ = file->message_type(72);
  static const int GuildEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, param_),
  };
  GuildEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildEvent_descriptor_,
      GuildEvent::default_instance_,
      GuildEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildEvent));
  QueryEventListGuildCmd_descriptor_ = file->message_type(73);
  static const int QueryEventListGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEventListGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEventListGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEventListGuildCmd, events_),
  };
  QueryEventListGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryEventListGuildCmd_descriptor_,
      QueryEventListGuildCmd::default_instance_,
      QueryEventListGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEventListGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEventListGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryEventListGuildCmd));
  NewEventGuildCmd_descriptor_ = file->message_type(74);
  static const int NewEventGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewEventGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewEventGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewEventGuildCmd, del_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewEventGuildCmd, event_),
  };
  NewEventGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewEventGuildCmd_descriptor_,
      NewEventGuildCmd::default_instance_,
      NewEventGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewEventGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewEventGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewEventGuildCmd));
  GuildReward_descriptor_ = file->message_type(75);
  static const int GuildReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildReward, num_),
  };
  GuildReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildReward_descriptor_,
      GuildReward::default_instance_,
      GuildReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildReward));
  ApplyRewardConGuildCmd_descriptor_ = file->message_type(76);
  static const int ApplyRewardConGuildCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyRewardConGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyRewardConGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyRewardConGuildCmd, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyRewardConGuildCmd, con_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyRewardConGuildCmd, asset_),
  };
  ApplyRewardConGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyRewardConGuildCmd_descriptor_,
      ApplyRewardConGuildCmd::default_instance_,
      ApplyRewardConGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyRewardConGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyRewardConGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyRewardConGuildCmd));
  FrameStatusGuildCmd_descriptor_ = file->message_type(77);
  static const int FrameStatusGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStatusGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStatusGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStatusGuildCmd, open_),
  };
  FrameStatusGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameStatusGuildCmd_descriptor_,
      FrameStatusGuildCmd::default_instance_,
      FrameStatusGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStatusGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStatusGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameStatusGuildCmd));
  ModifyAuthGuildCmd_descriptor_ = file->message_type(78);
  static const int ModifyAuthGuildCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyAuthGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyAuthGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyAuthGuildCmd, add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyAuthGuildCmd, modify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyAuthGuildCmd, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyAuthGuildCmd, auth_),
  };
  ModifyAuthGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyAuthGuildCmd_descriptor_,
      ModifyAuthGuildCmd::default_instance_,
      ModifyAuthGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyAuthGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyAuthGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyAuthGuildCmd));
  JobUpdateGuildCmd_descriptor_ = file->message_type(79);
  static const int JobUpdateGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobUpdateGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobUpdateGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobUpdateGuildCmd, job_),
  };
  JobUpdateGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobUpdateGuildCmd_descriptor_,
      JobUpdateGuildCmd::default_instance_,
      JobUpdateGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobUpdateGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobUpdateGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobUpdateGuildCmd));
  RenameQueryGuildCmd_descriptor_ = file->message_type(80);
  static const int RenameQueryGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameQueryGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameQueryGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameQueryGuildCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameQueryGuildCmd, code_),
  };
  RenameQueryGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameQueryGuildCmd_descriptor_,
      RenameQueryGuildCmd::default_instance_,
      RenameQueryGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameQueryGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameQueryGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameQueryGuildCmd));
  GuildCityInfo_descriptor_ = file->message_type(81);
  static const int GuildCityInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityInfo, membercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityInfo, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityInfo, oldguild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityInfo, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityInfo, leadername_),
  };
  GuildCityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildCityInfo_descriptor_,
      GuildCityInfo::default_instance_,
      GuildCityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildCityInfo));
  QueryGuildCityInfoGuildCmd_descriptor_ = file->message_type(82);
  static const int QueryGuildCityInfoGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildCityInfoGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildCityInfoGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildCityInfoGuildCmd, infos_),
  };
  QueryGuildCityInfoGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryGuildCityInfoGuildCmd_descriptor_,
      QueryGuildCityInfoGuildCmd::default_instance_,
      QueryGuildCityInfoGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildCityInfoGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildCityInfoGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryGuildCityInfoGuildCmd));
  CityActionGuildCmd_descriptor_ = file->message_type(83);
  static const int CityActionGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityActionGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityActionGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityActionGuildCmd, action_),
  };
  CityActionGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CityActionGuildCmd_descriptor_,
      CityActionGuildCmd::default_instance_,
      CityActionGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityActionGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityActionGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CityActionGuildCmd));
  IconInfo_descriptor_ = file->message_type(84);
  static const int IconInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, isread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, type_),
  };
  IconInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IconInfo_descriptor_,
      IconInfo::default_instance_,
      IconInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IconInfo));
  GuildIconSyncGuildCmd_descriptor_ = file->message_type(85);
  static const int GuildIconSyncGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconSyncGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconSyncGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconSyncGuildCmd, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconSyncGuildCmd, dels_),
  };
  GuildIconSyncGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildIconSyncGuildCmd_descriptor_,
      GuildIconSyncGuildCmd::default_instance_,
      GuildIconSyncGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconSyncGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconSyncGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildIconSyncGuildCmd));
  GuildIconAddGuildCmd_descriptor_ = file->message_type(86);
  static const int GuildIconAddGuildCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconAddGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconAddGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconAddGuildCmd, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconAddGuildCmd, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconAddGuildCmd, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconAddGuildCmd, isdelete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconAddGuildCmd, type_),
  };
  GuildIconAddGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildIconAddGuildCmd_descriptor_,
      GuildIconAddGuildCmd::default_instance_,
      GuildIconAddGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconAddGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconAddGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildIconAddGuildCmd));
  GuildIconUploadGuildCmd_descriptor_ = file->message_type(87);
  static const int GuildIconUploadGuildCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconUploadGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconUploadGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconUploadGuildCmd, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconUploadGuildCmd, policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconUploadGuildCmd, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconUploadGuildCmd, type_),
  };
  GuildIconUploadGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildIconUploadGuildCmd_descriptor_,
      GuildIconUploadGuildCmd::default_instance_,
      GuildIconUploadGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconUploadGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconUploadGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildIconUploadGuildCmd));
  OpenFunctionGuildCmd_descriptor_ = file->message_type(88);
  static const int OpenFunctionGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFunctionGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFunctionGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFunctionGuildCmd, func_),
  };
  OpenFunctionGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenFunctionGuildCmd_descriptor_,
      OpenFunctionGuildCmd::default_instance_,
      OpenFunctionGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFunctionGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFunctionGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenFunctionGuildCmd));
  BuildGuildCmd_descriptor_ = file->message_type(89);
  static const int BuildGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildGuildCmd, building_),
  };
  BuildGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildGuildCmd_descriptor_,
      BuildGuildCmd::default_instance_,
      BuildGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildGuildCmd));
  SubmitMaterialGuildCmd_descriptor_ = file->message_type(90);
  static const int SubmitMaterialGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildCmd, building_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildCmd, materialid_),
  };
  SubmitMaterialGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmitMaterialGuildCmd_descriptor_,
      SubmitMaterialGuildCmd::default_instance_,
      SubmitMaterialGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmitMaterialGuildCmd));
  BuildingNtfGuildCmd_descriptor_ = file->message_type(91);
  static const int BuildingNtfGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingNtfGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingNtfGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingNtfGuildCmd, buildings_),
  };
  BuildingNtfGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingNtfGuildCmd_descriptor_,
      BuildingNtfGuildCmd::default_instance_,
      BuildingNtfGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingNtfGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingNtfGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingNtfGuildCmd));
  BuildingSubmitCountGuildCmd_descriptor_ = file->message_type(92);
  static const int BuildingSubmitCountGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSubmitCountGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSubmitCountGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSubmitCountGuildCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSubmitCountGuildCmd, count_),
  };
  BuildingSubmitCountGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingSubmitCountGuildCmd_descriptor_,
      BuildingSubmitCountGuildCmd::default_instance_,
      BuildingSubmitCountGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSubmitCountGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSubmitCountGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingSubmitCountGuildCmd));
  ChallengeUpdateNtfGuildCmd_descriptor_ = file->message_type(93);
  static const int ChallengeUpdateNtfGuildCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeUpdateNtfGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeUpdateNtfGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeUpdateNtfGuildCmd, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeUpdateNtfGuildCmd, dels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeUpdateNtfGuildCmd, refreshtime_),
  };
  ChallengeUpdateNtfGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeUpdateNtfGuildCmd_descriptor_,
      ChallengeUpdateNtfGuildCmd::default_instance_,
      ChallengeUpdateNtfGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeUpdateNtfGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeUpdateNtfGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeUpdateNtfGuildCmd));
  WelfareNtfGuildCmd_descriptor_ = file->message_type(94);
  static const int WelfareNtfGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareNtfGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareNtfGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareNtfGuildCmd, welfare_),
  };
  WelfareNtfGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareNtfGuildCmd_descriptor_,
      WelfareNtfGuildCmd::default_instance_,
      WelfareNtfGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareNtfGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareNtfGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareNtfGuildCmd));
  GetWelfareGuildCmd_descriptor_ = file->message_type(95);
  static const int GetWelfareGuildCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWelfareGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWelfareGuildCmd, param_),
  };
  GetWelfareGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetWelfareGuildCmd_descriptor_,
      GetWelfareGuildCmd::default_instance_,
      GetWelfareGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWelfareGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWelfareGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetWelfareGuildCmd));
  BuildingLvupEffect_descriptor_ = file->message_type(96);
  static const int BuildingLvupEffect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingLvupEffect, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingLvupEffect, level_),
  };
  BuildingLvupEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingLvupEffect_descriptor_,
      BuildingLvupEffect::default_instance_,
      BuildingLvupEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingLvupEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingLvupEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingLvupEffect));
  BuildingLvupEffGuildCmd_descriptor_ = file->message_type(97);
  static const int BuildingLvupEffGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingLvupEffGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingLvupEffGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingLvupEffGuildCmd, effects_),
  };
  BuildingLvupEffGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingLvupEffGuildCmd_descriptor_,
      BuildingLvupEffGuildCmd::default_instance_,
      BuildingLvupEffGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingLvupEffGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingLvupEffGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingLvupEffGuildCmd));
  ArtifactUpdateNtfGuildCmd_descriptor_ = file->message_type(98);
  static const int ArtifactUpdateNtfGuildCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateNtfGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateNtfGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateNtfGuildCmd, itemupdates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateNtfGuildCmd, itemdels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateNtfGuildCmd, dataupdates_),
  };
  ArtifactUpdateNtfGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArtifactUpdateNtfGuildCmd_descriptor_,
      ArtifactUpdateNtfGuildCmd::default_instance_,
      ArtifactUpdateNtfGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateNtfGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateNtfGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtifactUpdateNtfGuildCmd));
  ArtifactProduceGuildCmd_descriptor_ = file->message_type(99);
  static const int ArtifactProduceGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactProduceGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactProduceGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactProduceGuildCmd, id_),
  };
  ArtifactProduceGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArtifactProduceGuildCmd_descriptor_,
      ArtifactProduceGuildCmd::default_instance_,
      ArtifactProduceGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactProduceGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactProduceGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtifactProduceGuildCmd));
  ArtifactOptGuildCmd_descriptor_ = file->message_type(100);
  static const int ArtifactOptGuildCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactOptGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactOptGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactOptGuildCmd, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactOptGuildCmd, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactOptGuildCmd, charid_),
  };
  ArtifactOptGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArtifactOptGuildCmd_descriptor_,
      ArtifactOptGuildCmd::default_instance_,
      ArtifactOptGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactOptGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactOptGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtifactOptGuildCmd));
  QueryGQuestGuildCmd_descriptor_ = file->message_type(101);
  static const int QueryGQuestGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGQuestGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGQuestGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGQuestGuildCmd, submit_quests_),
  };
  QueryGQuestGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryGQuestGuildCmd_descriptor_,
      QueryGQuestGuildCmd::default_instance_,
      QueryGQuestGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGQuestGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGQuestGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryGQuestGuildCmd));
  TreasureActionGuildCmd_descriptor_ = file->message_type(102);
  static const int TreasureActionGuildCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureActionGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureActionGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureActionGuildCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureActionGuildCmd, guild_treasure_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureActionGuildCmd, bcoin_treasure_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureActionGuildCmd, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureActionGuildCmd, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureActionGuildCmd, treasure_),
  };
  TreasureActionGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureActionGuildCmd_descriptor_,
      TreasureActionGuildCmd::default_instance_,
      TreasureActionGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureActionGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureActionGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureActionGuildCmd));
  BuildingSubmitRankItem_descriptor_ = file->message_type(103);
  static const int BuildingSubmitRankItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSubmitRankItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSubmitRankItem, submitcounttotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSubmitRankItem, submittime_),
  };
  BuildingSubmitRankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingSubmitRankItem_descriptor_,
      BuildingSubmitRankItem::default_instance_,
      BuildingSubmitRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSubmitRankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSubmitRankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingSubmitRankItem));
  QueryBuildingRankGuildCmd_descriptor_ = file->message_type(104);
  static const int QueryBuildingRankGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBuildingRankGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBuildingRankGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBuildingRankGuildCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBuildingRankGuildCmd, items_),
  };
  QueryBuildingRankGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryBuildingRankGuildCmd_descriptor_,
      QueryBuildingRankGuildCmd::default_instance_,
      QueryBuildingRankGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBuildingRankGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBuildingRankGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryBuildingRankGuildCmd));
  QueryTreasureResultGuildCmd_descriptor_ = file->message_type(105);
  static const int QueryTreasureResultGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureResultGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureResultGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureResultGuildCmd, eventguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureResultGuildCmd, result_),
  };
  QueryTreasureResultGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryTreasureResultGuildCmd_descriptor_,
      QueryTreasureResultGuildCmd::default_instance_,
      QueryTreasureResultGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureResultGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureResultGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryTreasureResultGuildCmd));
  CityShowInfo_descriptor_ = file->message_type(106);
  static const int CityShowInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityShowInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityShowInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityShowInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityShowInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityShowInfo, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityShowInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityShowInfo, membercount_),
  };
  CityShowInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CityShowInfo_descriptor_,
      CityShowInfo::default_instance_,
      CityShowInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityShowInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityShowInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CityShowInfo));
  QueryGCityShowInfoGuildCmd_descriptor_ = file->message_type(107);
  static const int QueryGCityShowInfoGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGCityShowInfoGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGCityShowInfoGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGCityShowInfoGuildCmd, infos_),
  };
  QueryGCityShowInfoGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryGCityShowInfoGuildCmd_descriptor_,
      QueryGCityShowInfoGuildCmd::default_instance_,
      QueryGCityShowInfoGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGCityShowInfoGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGCityShowInfoGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryGCityShowInfoGuildCmd));
  GvgOpenFireGuildCmd_descriptor_ = file->message_type(108);
  static const int GvgOpenFireGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgOpenFireGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgOpenFireGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgOpenFireGuildCmd, fire_),
  };
  GvgOpenFireGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgOpenFireGuildCmd_descriptor_,
      GvgOpenFireGuildCmd::default_instance_,
      GvgOpenFireGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgOpenFireGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgOpenFireGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgOpenFireGuildCmd));
  EnterPunishTimeNtfGuildCmd_descriptor_ = file->message_type(109);
  static const int EnterPunishTimeNtfGuildCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPunishTimeNtfGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPunishTimeNtfGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPunishTimeNtfGuildCmd, exittime_),
  };
  EnterPunishTimeNtfGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterPunishTimeNtfGuildCmd_descriptor_,
      EnterPunishTimeNtfGuildCmd::default_instance_,
      EnterPunishTimeNtfGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPunishTimeNtfGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPunishTimeNtfGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterPunishTimeNtfGuildCmd));
  OpenRealtimeVoiceGuildCmd_descriptor_ = file->message_type(110);
  static const int OpenRealtimeVoiceGuildCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRealtimeVoiceGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRealtimeVoiceGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRealtimeVoiceGuildCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRealtimeVoiceGuildCmd, open_),
  };
  OpenRealtimeVoiceGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenRealtimeVoiceGuildCmd_descriptor_,
      OpenRealtimeVoiceGuildCmd::default_instance_,
      OpenRealtimeVoiceGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRealtimeVoiceGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRealtimeVoiceGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenRealtimeVoiceGuildCmd));
  GuildParam_descriptor_ = file->enum_type(0);
  EGuildGlobal_descriptor_ = file->enum_type(1);
  EGuildJob_descriptor_ = file->enum_type(2);
  EPrayType_descriptor_ = file->enum_type(3);
  EGuildFunction_descriptor_ = file->enum_type(4);
  EAuth_descriptor_ = file->enum_type(5);
  EGuildBuilding_descriptor_ = file->enum_type(6);
  EGuildWelfare_descriptor_ = file->enum_type(7);
  ETreasureState_descriptor_ = file->enum_type(8);
  EGuildData_descriptor_ = file->enum_type(9);
  EGuildList_descriptor_ = file->enum_type(10);
  EGuildMemberData_descriptor_ = file->enum_type(11);
  EGuildAction_descriptor_ = file->enum_type(12);
  EModify_descriptor_ = file->enum_type(13);
  EGuildCityStatus_descriptor_ = file->enum_type(14);
  ECityAction_descriptor_ = file->enum_type(15);
  EIconState_descriptor_ = file->enum_type(16);
  EArtifactOptType_descriptor_ = file->enum_type(17);
  EGuildTreasureType_descriptor_ = file->enum_type(18);
  ETreasureAction_descriptor_ = file->enum_type(19);
  ETreasurePoint_descriptor_ = file->enum_type(20);
  EGCityState_descriptor_ = file->enum_type(21);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GuildCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildPrayCFG_descriptor_, &GuildPrayCFG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMemberPray_descriptor_, &GuildMemberPray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGuildPray_descriptor_, &BlobGuildPray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobDonate_descriptor_, &BlobDonate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserGuildBuilding_descriptor_, &UserGuildBuilding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGuildBuilding_descriptor_, &BlobGuildBuilding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMember_descriptor_, &GuildMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGuildMember_descriptor_, &BlobGuildMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildApply_descriptor_, &GuildApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGuildApply_descriptor_, &BlobGuildApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildJob_descriptor_, &GuildJob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildQuest_descriptor_, &GuildQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBuildMaterial_descriptor_, &GuildBuildMaterial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBuilding_descriptor_, &GuildBuilding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBuildingData_descriptor_, &GuildBuildingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildChallenge_descriptor_, &GuildChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildChallengeData_descriptor_, &GuildChallengeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWelfareItem_descriptor_, &GuildWelfareItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWelfare_descriptor_, &GuildWelfare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildArtifactItem_descriptor_, &GuildArtifactItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildArtifactData_descriptor_, &GuildArtifactData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildArtifact_descriptor_, &GuildArtifact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GQuest_descriptor_, &GQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGQuest_descriptor_, &BlobGQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGGvg_descriptor_, &BlobGGvg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildTreasure_descriptor_, &GuildTreasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureItem_descriptor_, &TreasureItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureResult_descriptor_, &TreasureResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGuildTreasure_descriptor_, &BlobGuildTreasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGuildMisc_descriptor_, &BlobGuildMisc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGuildPack_descriptor_, &BlobGuildPack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGuildEvent_descriptor_, &BlobGuildEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildPhoto_descriptor_, &GuildPhoto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhotoFrame_descriptor_, &PhotoFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGuildPhoto_descriptor_, &BlobGuildPhoto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildSummaryData_descriptor_, &GuildSummaryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildData_descriptor_, &GuildData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryGuildListGuildCmd_descriptor_, &QueryGuildListGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGuildGuildCmd_descriptor_, &CreateGuildGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterGuildGuildCmd_descriptor_, &EnterGuildGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMemberUpdateGuildCmd_descriptor_, &GuildMemberUpdateGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildApplyUpdateGuildCmd_descriptor_, &GuildApplyUpdateGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildDataUpdate_descriptor_, &GuildDataUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildDataUpdateGuildCmd_descriptor_, &GuildDataUpdateGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMemberDataUpdate_descriptor_, &GuildMemberDataUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMemberDataUpdateGuildCmd_descriptor_, &GuildMemberDataUpdateGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyGuildGuildCmd_descriptor_, &ApplyGuildGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessApplyGuildCmd_descriptor_, &ProcessApplyGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteMemberGuildCmd_descriptor_, &InviteMemberGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessInviteGuildCmd_descriptor_, &ProcessInviteGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGuildOptionGuildCmd_descriptor_, &SetGuildOptionGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickMemberGuildCmd_descriptor_, &KickMemberGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeJobGuildCmd_descriptor_, &ChangeJobGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitGuildGuildCmd_descriptor_, &ExitGuildGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeChairGuildCmd_descriptor_, &ExchangeChairGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DismissGuildCmd_descriptor_, &DismissGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelupGuildCmd_descriptor_, &LevelupGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DonateGuildCmd_descriptor_, &DonateGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DonateItem_descriptor_, &DonateItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DonateListGuildCmd_descriptor_, &DonateListGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDonateItemGuildCmd_descriptor_, &UpdateDonateItemGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DonateFrameGuildCmd_descriptor_, &DonateFrameGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterTerritoryGuildCmd_descriptor_, &EnterTerritoryGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrayGuildCmd_descriptor_, &PrayGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildInfoNtf_descriptor_, &GuildInfoNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildPrayNtfGuildCmd_descriptor_, &GuildPrayNtfGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelupEffectGuildCmd_descriptor_, &LevelupEffectGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPackGuildCmd_descriptor_, &QueryPackGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackUpdateGuildCmd_descriptor_, &PackUpdateGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeZoneGuildCmd_descriptor_, &ExchangeZoneGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeZoneNtfGuildCmd_descriptor_, &ExchangeZoneNtfGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeZoneAnswerGuildCmd_descriptor_, &ExchangeZoneAnswerGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildEvent_descriptor_, &GuildEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryEventListGuildCmd_descriptor_, &QueryEventListGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewEventGuildCmd_descriptor_, &NewEventGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildReward_descriptor_, &GuildReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyRewardConGuildCmd_descriptor_, &ApplyRewardConGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameStatusGuildCmd_descriptor_, &FrameStatusGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyAuthGuildCmd_descriptor_, &ModifyAuthGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobUpdateGuildCmd_descriptor_, &JobUpdateGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameQueryGuildCmd_descriptor_, &RenameQueryGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildCityInfo_descriptor_, &GuildCityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryGuildCityInfoGuildCmd_descriptor_, &QueryGuildCityInfoGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CityActionGuildCmd_descriptor_, &CityActionGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IconInfo_descriptor_, &IconInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildIconSyncGuildCmd_descriptor_, &GuildIconSyncGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildIconAddGuildCmd_descriptor_, &GuildIconAddGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildIconUploadGuildCmd_descriptor_, &GuildIconUploadGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenFunctionGuildCmd_descriptor_, &OpenFunctionGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildGuildCmd_descriptor_, &BuildGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmitMaterialGuildCmd_descriptor_, &SubmitMaterialGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingNtfGuildCmd_descriptor_, &BuildingNtfGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingSubmitCountGuildCmd_descriptor_, &BuildingSubmitCountGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeUpdateNtfGuildCmd_descriptor_, &ChallengeUpdateNtfGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareNtfGuildCmd_descriptor_, &WelfareNtfGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetWelfareGuildCmd_descriptor_, &GetWelfareGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingLvupEffect_descriptor_, &BuildingLvupEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingLvupEffGuildCmd_descriptor_, &BuildingLvupEffGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtifactUpdateNtfGuildCmd_descriptor_, &ArtifactUpdateNtfGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtifactProduceGuildCmd_descriptor_, &ArtifactProduceGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtifactOptGuildCmd_descriptor_, &ArtifactOptGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryGQuestGuildCmd_descriptor_, &QueryGQuestGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureActionGuildCmd_descriptor_, &TreasureActionGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingSubmitRankItem_descriptor_, &BuildingSubmitRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryBuildingRankGuildCmd_descriptor_, &QueryBuildingRankGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryTreasureResultGuildCmd_descriptor_, &QueryTreasureResultGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CityShowInfo_descriptor_, &CityShowInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryGCityShowInfoGuildCmd_descriptor_, &QueryGCityShowInfoGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgOpenFireGuildCmd_descriptor_, &GvgOpenFireGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterPunishTimeNtfGuildCmd_descriptor_, &EnterPunishTimeNtfGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenRealtimeVoiceGuildCmd_descriptor_, &OpenRealtimeVoiceGuildCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GuildCmd_2eproto() {
  delete GuildPrayCFG::default_instance_;
  delete GuildPrayCFG_reflection_;
  delete GuildMemberPray::default_instance_;
  delete GuildMemberPray_reflection_;
  delete BlobGuildPray::default_instance_;
  delete BlobGuildPray_reflection_;
  delete BlobDonate::default_instance_;
  delete BlobDonate_reflection_;
  delete UserGuildBuilding::default_instance_;
  delete UserGuildBuilding_reflection_;
  delete BlobGuildBuilding::default_instance_;
  delete BlobGuildBuilding_reflection_;
  delete GuildMember::default_instance_;
  delete GuildMember_reflection_;
  delete BlobGuildMember::default_instance_;
  delete BlobGuildMember_reflection_;
  delete GuildApply::default_instance_;
  delete GuildApply_reflection_;
  delete BlobGuildApply::default_instance_;
  delete BlobGuildApply_reflection_;
  delete GuildJob::default_instance_;
  delete GuildJob_reflection_;
  delete GuildQuest::default_instance_;
  delete GuildQuest_reflection_;
  delete GuildBuildMaterial::default_instance_;
  delete GuildBuildMaterial_reflection_;
  delete GuildBuilding::default_instance_;
  delete GuildBuilding_reflection_;
  delete GuildBuildingData::default_instance_;
  delete GuildBuildingData_reflection_;
  delete GuildChallenge::default_instance_;
  delete GuildChallenge_reflection_;
  delete GuildChallengeData::default_instance_;
  delete GuildChallengeData_reflection_;
  delete GuildWelfareItem::default_instance_;
  delete GuildWelfareItem_reflection_;
  delete GuildWelfare::default_instance_;
  delete GuildWelfare_reflection_;
  delete GuildArtifactItem::default_instance_;
  delete GuildArtifactItem_reflection_;
  delete GuildArtifactData::default_instance_;
  delete GuildArtifactData_reflection_;
  delete GuildArtifact::default_instance_;
  delete GuildArtifact_reflection_;
  delete GQuest::default_instance_;
  delete GQuest_reflection_;
  delete BlobGQuest::default_instance_;
  delete BlobGQuest_reflection_;
  delete BlobGGvg::default_instance_;
  delete BlobGGvg_reflection_;
  delete GuildTreasure::default_instance_;
  delete GuildTreasure_reflection_;
  delete TreasureItem::default_instance_;
  delete TreasureItem_reflection_;
  delete TreasureResult::default_instance_;
  delete TreasureResult_reflection_;
  delete BlobGuildTreasure::default_instance_;
  delete BlobGuildTreasure_reflection_;
  delete BlobGuildMisc::default_instance_;
  delete BlobGuildMisc_reflection_;
  delete BlobGuildPack::default_instance_;
  delete BlobGuildPack_reflection_;
  delete BlobGuildEvent::default_instance_;
  delete BlobGuildEvent_reflection_;
  delete GuildPhoto::default_instance_;
  delete GuildPhoto_reflection_;
  delete PhotoFrame::default_instance_;
  delete PhotoFrame_reflection_;
  delete BlobGuildPhoto::default_instance_;
  delete BlobGuildPhoto_reflection_;
  delete GuildSummaryData::default_instance_;
  delete GuildSummaryData_reflection_;
  delete GuildData::default_instance_;
  delete GuildData_reflection_;
  delete QueryGuildListGuildCmd::default_instance_;
  delete QueryGuildListGuildCmd_reflection_;
  delete CreateGuildGuildCmd::default_instance_;
  delete CreateGuildGuildCmd_reflection_;
  delete EnterGuildGuildCmd::default_instance_;
  delete EnterGuildGuildCmd_reflection_;
  delete GuildMemberUpdateGuildCmd::default_instance_;
  delete GuildMemberUpdateGuildCmd_reflection_;
  delete GuildApplyUpdateGuildCmd::default_instance_;
  delete GuildApplyUpdateGuildCmd_reflection_;
  delete GuildDataUpdate::default_instance_;
  delete GuildDataUpdate_reflection_;
  delete GuildDataUpdateGuildCmd::default_instance_;
  delete GuildDataUpdateGuildCmd_reflection_;
  delete GuildMemberDataUpdate::default_instance_;
  delete GuildMemberDataUpdate_reflection_;
  delete GuildMemberDataUpdateGuildCmd::default_instance_;
  delete GuildMemberDataUpdateGuildCmd_reflection_;
  delete ApplyGuildGuildCmd::default_instance_;
  delete ApplyGuildGuildCmd_reflection_;
  delete ProcessApplyGuildCmd::default_instance_;
  delete ProcessApplyGuildCmd_reflection_;
  delete InviteMemberGuildCmd::default_instance_;
  delete InviteMemberGuildCmd_reflection_;
  delete ProcessInviteGuildCmd::default_instance_;
  delete ProcessInviteGuildCmd_reflection_;
  delete SetGuildOptionGuildCmd::default_instance_;
  delete SetGuildOptionGuildCmd_reflection_;
  delete KickMemberGuildCmd::default_instance_;
  delete KickMemberGuildCmd_reflection_;
  delete ChangeJobGuildCmd::default_instance_;
  delete ChangeJobGuildCmd_reflection_;
  delete ExitGuildGuildCmd::default_instance_;
  delete ExitGuildGuildCmd_reflection_;
  delete ExchangeChairGuildCmd::default_instance_;
  delete ExchangeChairGuildCmd_reflection_;
  delete DismissGuildCmd::default_instance_;
  delete DismissGuildCmd_reflection_;
  delete LevelupGuildCmd::default_instance_;
  delete LevelupGuildCmd_reflection_;
  delete DonateGuildCmd::default_instance_;
  delete DonateGuildCmd_reflection_;
  delete DonateItem::default_instance_;
  delete DonateItem_reflection_;
  delete DonateListGuildCmd::default_instance_;
  delete DonateListGuildCmd_reflection_;
  delete UpdateDonateItemGuildCmd::default_instance_;
  delete UpdateDonateItemGuildCmd_reflection_;
  delete DonateFrameGuildCmd::default_instance_;
  delete DonateFrameGuildCmd_reflection_;
  delete EnterTerritoryGuildCmd::default_instance_;
  delete EnterTerritoryGuildCmd_reflection_;
  delete PrayGuildCmd::default_instance_;
  delete PrayGuildCmd_reflection_;
  delete GuildInfoNtf::default_instance_;
  delete GuildInfoNtf_reflection_;
  delete GuildPrayNtfGuildCmd::default_instance_;
  delete GuildPrayNtfGuildCmd_reflection_;
  delete LevelupEffectGuildCmd::default_instance_;
  delete LevelupEffectGuildCmd_reflection_;
  delete QueryPackGuildCmd::default_instance_;
  delete QueryPackGuildCmd_reflection_;
  delete PackUpdateGuildCmd::default_instance_;
  delete PackUpdateGuildCmd_reflection_;
  delete ExchangeZoneGuildCmd::default_instance_;
  delete ExchangeZoneGuildCmd_reflection_;
  delete ExchangeZoneNtfGuildCmd::default_instance_;
  delete ExchangeZoneNtfGuildCmd_reflection_;
  delete ExchangeZoneAnswerGuildCmd::default_instance_;
  delete ExchangeZoneAnswerGuildCmd_reflection_;
  delete GuildEvent::default_instance_;
  delete GuildEvent_reflection_;
  delete QueryEventListGuildCmd::default_instance_;
  delete QueryEventListGuildCmd_reflection_;
  delete NewEventGuildCmd::default_instance_;
  delete NewEventGuildCmd_reflection_;
  delete GuildReward::default_instance_;
  delete GuildReward_reflection_;
  delete ApplyRewardConGuildCmd::default_instance_;
  delete ApplyRewardConGuildCmd_reflection_;
  delete FrameStatusGuildCmd::default_instance_;
  delete FrameStatusGuildCmd_reflection_;
  delete ModifyAuthGuildCmd::default_instance_;
  delete ModifyAuthGuildCmd_reflection_;
  delete JobUpdateGuildCmd::default_instance_;
  delete JobUpdateGuildCmd_reflection_;
  delete RenameQueryGuildCmd::default_instance_;
  delete RenameQueryGuildCmd_reflection_;
  delete GuildCityInfo::default_instance_;
  delete GuildCityInfo_reflection_;
  delete QueryGuildCityInfoGuildCmd::default_instance_;
  delete QueryGuildCityInfoGuildCmd_reflection_;
  delete CityActionGuildCmd::default_instance_;
  delete CityActionGuildCmd_reflection_;
  delete IconInfo::default_instance_;
  delete IconInfo_reflection_;
  delete GuildIconSyncGuildCmd::default_instance_;
  delete GuildIconSyncGuildCmd_reflection_;
  delete GuildIconAddGuildCmd::default_instance_;
  delete GuildIconAddGuildCmd_reflection_;
  delete GuildIconUploadGuildCmd::default_instance_;
  delete GuildIconUploadGuildCmd_reflection_;
  delete OpenFunctionGuildCmd::default_instance_;
  delete OpenFunctionGuildCmd_reflection_;
  delete BuildGuildCmd::default_instance_;
  delete BuildGuildCmd_reflection_;
  delete SubmitMaterialGuildCmd::default_instance_;
  delete SubmitMaterialGuildCmd_reflection_;
  delete BuildingNtfGuildCmd::default_instance_;
  delete BuildingNtfGuildCmd_reflection_;
  delete BuildingSubmitCountGuildCmd::default_instance_;
  delete BuildingSubmitCountGuildCmd_reflection_;
  delete ChallengeUpdateNtfGuildCmd::default_instance_;
  delete ChallengeUpdateNtfGuildCmd_reflection_;
  delete WelfareNtfGuildCmd::default_instance_;
  delete WelfareNtfGuildCmd_reflection_;
  delete GetWelfareGuildCmd::default_instance_;
  delete GetWelfareGuildCmd_reflection_;
  delete BuildingLvupEffect::default_instance_;
  delete BuildingLvupEffect_reflection_;
  delete BuildingLvupEffGuildCmd::default_instance_;
  delete BuildingLvupEffGuildCmd_reflection_;
  delete ArtifactUpdateNtfGuildCmd::default_instance_;
  delete ArtifactUpdateNtfGuildCmd_reflection_;
  delete ArtifactProduceGuildCmd::default_instance_;
  delete ArtifactProduceGuildCmd_reflection_;
  delete ArtifactOptGuildCmd::default_instance_;
  delete ArtifactOptGuildCmd_reflection_;
  delete QueryGQuestGuildCmd::default_instance_;
  delete QueryGQuestGuildCmd_reflection_;
  delete TreasureActionGuildCmd::default_instance_;
  delete TreasureActionGuildCmd_reflection_;
  delete BuildingSubmitRankItem::default_instance_;
  delete BuildingSubmitRankItem_reflection_;
  delete QueryBuildingRankGuildCmd::default_instance_;
  delete QueryBuildingRankGuildCmd_reflection_;
  delete QueryTreasureResultGuildCmd::default_instance_;
  delete QueryTreasureResultGuildCmd_reflection_;
  delete CityShowInfo::default_instance_;
  delete CityShowInfo_reflection_;
  delete QueryGCityShowInfoGuildCmd::default_instance_;
  delete QueryGCityShowInfoGuildCmd_reflection_;
  delete GvgOpenFireGuildCmd::default_instance_;
  delete GvgOpenFireGuildCmd_reflection_;
  delete EnterPunishTimeNtfGuildCmd::default_instance_;
  delete EnterPunishTimeNtfGuildCmd_reflection_;
  delete OpenRealtimeVoiceGuildCmd::default_instance_;
  delete OpenRealtimeVoiceGuildCmd_reflection_;
}

void protobuf_AddDesc_GuildCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser2_2eproto();
  ::Cmd::protobuf_AddDesc_SceneQuest_2eproto();
  ::Cmd::protobuf_AddDesc_Dojo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016GuildCmd.proto\022\003Cmd\032\nxCmd.proto\032\021Proto"
    "Common.proto\032\017SceneItem.proto\032\017SceneUser"
    ".proto\032\020SceneUser2.proto\032\020SceneQuest.pro"
    "to\032\nDojo.proto\"\241\001\n\014GuildPrayCFG\022\021\n\006prayi"
    "d\030\001 \001(\r:\0010\022\021\n\006praylv\030\002 \001(\r:\0010\022/\n\004type\030\003 "
    "\001(\0162\016.Cmd.EPrayType:\021EPRAYTYPE_GODDESS\022\034"
    "\n\005attrs\030\004 \003(\0132\r.Cmd.UserAttr\022\034\n\005costs\030\005 "
    "\003(\0132\r.Cmd.ItemInfo\"r\n\017GuildMemberPray\022\017\n"
    "\004pray\030\001 \001(\r:\0010\022\r\n\002lv\030\002 \001(\r:\0010\022\036\n\003cur\030\003 \001"
    "(\0132\021.Cmd.GuildPrayCFG\022\037\n\004next\030\004 \001(\0132\021.Cm"
    "d.GuildPrayCFG\"4\n\rBlobGuildPray\022#\n\005prays"
    "\030\001 \003(\0132\024.Cmd.GuildMemberPray\"\233\001\n\nBlobDon"
    "ate\022\036\n\005items\030\001 \003(\0132\017.Cmd.DonateItem\022\r\n\005s"
    "teps\030\002 \003(\r\022\026\n\013donatetime1\030\003 \001(\r:\0010\022\026\n\013do"
    "natetime2\030\004 \001(\r:\0010\022\026\n\013donatetime3\030\005 \001(\r:"
    "\0010\022\026\n\013donatetime4\030\006 \001(\r:\0010\"\320\001\n\021UserGuild"
    "Building\0225\n\004type\030\001 \001(\0162\023.Cmd.EGuildBuild"
    "ing:\022EGUILDBUILDING_MIN\022\026\n\013submitcount\030\002"
    " \001(\r:\0010\022\032\n\017nextwelfaretime\030\003 \001(\r:\0010\022\034\n\rl"
    "evelupeffect\030\004 \001(\010:\005false\022\033\n\020submitcount"
    "total\030\005 \001(\r:\0010\022\025\n\nsubmittime\030\006 \001(\r:\0010\">\n"
    "\021BlobGuildBuilding\022)\n\tbuildings\030\001 \003(\0132\026."
    "Cmd.UserGuildBuilding\"\267\007\n\013GuildMember\022\021\n"
    "\006charid\030\001 \001(\004:\0010\022\024\n\tbaselevel\030\002 \001(\r:\0010\022\023"
    "\n\010portrait\030\003 \001(\r:\0010\022\020\n\005frame\030\004 \001(\r:\0010\022\033\n"
    "\020weekcontribution\030\005 \001(\r:\0010\022\027\n\014contributi"
    "on\030\006 \001(\r:\0010\022\034\n\021totalcontribution\030\023 \001(\r:\001"
    "0\022\024\n\tentertime\030\007 \001(\r:\0010\022\026\n\013offlinetime\030\010"
    " \001(\r:\0010\022\024\n\tgiftpoint\030\t \001(\r:\0010\022\017\n\004hair\030\020 "
    "\001(\r:\0010\022\024\n\thaircolor\030\021 \001(\r:\0010\022\017\n\004body\030\022 \001"
    "(\r:\0010\022\024\n\tweekasset\030\026 \001(\r:\0010\022\020\n\005asset\030\027 \001"
    "(\r:\0010\022\021\n\006zoneid\030\030 \001(\r:\0010\022\017\n\004head\030\031 \001(\r:\001"
    "0\022\017\n\004face\030\034 \001(\r:\0010\022\020\n\005mouth\030\035 \001(\r:\0010\022\016\n\003"
    "eye\030\036 \001(\r:\0010\022)\n\006gender\030\n \001(\0162\014.Cmd.EGend"
    "er:\013EGENDER_MIN\0225\n\nprofession\030\013 \001(\0162\020.Cm"
    "d.EProfession:\017EPROFESSION_MIN\022*\n\003job\030\014 "
    "\001(\0162\016.Cmd.EGuildJob:\rEGUILDJOB_MIN\022\014\n\004na"
    "me\030\r \001(\t\022\013\n\003var\030\016 \001(\014\022 \n\004pray\030\017 \001(\0132\022.Cm"
    "d.BlobGuildPray\022\037\n\006donate\030\025 \001(\0132\017.Cmd.Bl"
    "obDonate\022\034\n\rlevelupeffect\030\024 \001(\010:\005false\022\033"
    "\n\014exchangezone\030\032 \001(\010:\005false\022\r\n\005accid\030\033 \001"
    "(\r\022(\n\010building\030\037 \001(\0132\026.Cmd.BlobGuildBuil"
    "ding\022\024\n\tchallenge\030  \001(\004:\0010\022\027\n\014lastexitti"
    "me\030! \001(\r:\0010\022\021\n\006redtip\030\" \001(\004:\0010\022\035\n\016buildi"
    "ngeffect\030# \001(\010:\005false\022\034\n\rrealtimevoice\030$"
    " \001(\010:\005false\022\024\n\tweekbcoin\030% \001(\r:\0010\022\024\n\ttot"
    "alcoin\030& \001(\r:\0010\"4\n\017BlobGuildMember\022!\n\007me"
    "mbers\030\001 \003(\0132\020.Cmd.GuildMember\"\200\003\n\nGuildA"
    "pply\022\021\n\006charid\030\001 \001(\004:\0010\022\021\n\006zoneid\030\014 \001(\r:"
    "\0010\022\024\n\tbaselevel\030\002 \001(\r:\0010\022\023\n\010portrait\030\003 \001"
    "(\r:\0010\022\020\n\005frame\030\004 \001(\r:\0010\022\024\n\tentertime\030\005 \001"
    "(\r:\0010\022\017\n\004hair\030\t \001(\r:\0010\022\024\n\thaircolor\030\n \001("
    "\r:\0010\022\017\n\004body\030\013 \001(\r:\0010\022\017\n\004head\030\016 \001(\r:\0010\022\017"
    "\n\004face\030\017 \001(\r:\0010\022\020\n\005mouth\030\020 \001(\r:\0010\022\016\n\003eye"
    "\030\021 \001(\r:\0010\022)\n\006gender\030\006 \001(\0162\014.Cmd.EGender:"
    "\013EGENDER_MIN\0225\n\nprofession\030\007 \001(\0162\020.Cmd.E"
    "Profession:\017EPROFESSION_MIN\022\014\n\004name\030\010 \001("
    "\t\022\r\n\005accid\030\r \001(\004\"1\n\016BlobGuildApply\022\037\n\006ap"
    "plys\030\001 \003(\0132\017.Cmd.GuildApply\"j\n\010GuildJob\022"
    "*\n\003job\030\001 \001(\0162\016.Cmd.EGuildJob:\rEGUILDJOB_"
    "MIN\022\014\n\004name\030\002 \001(\t\022\017\n\004auth\030\003 \001(\r:\0010\022\023\n\010ed"
    "itauth\030\004 \001(\r:\0010\"1\n\nGuildQuest\022\022\n\007questid"
    "\030\001 \001(\r:\0010\022\017\n\004time\030\002 \001(\r:\0010\"s\n\022GuildBuild"
    "Material\022\r\n\002id\030\001 \001(\r:\0010\022\020\n\005count\030\002 \001(\r:\001"
    "0\022\021\n\006itemid\030\003 \001(\r:\0010\022\024\n\titemcount\030\004 \001(\r:"
    "\0010\022\023\n\010rewardid\030\005 \001(\r:\0010\"\232\002\n\rGuildBuildin"
    "g\0225\n\004type\030\001 \001(\0162\023.Cmd.EGuildBuilding:\022EG"
    "UILDBUILDING_MIN\022\020\n\005level\030\002 \001(\r:\0010\022*\n\tma"
    "terials\030\003 \003(\0132\027.Cmd.GuildBuildMaterial\022\031"
    "\n\nisbuilding\030\004 \001(\010:\005false\022\032\n\017nextwelfare"
    "time\030\005 \001(\r:\0010\022\030\n\rnextbuildtime\030\010 \001(\r:\0010\022"
    "\023\n\010progress\030\006 \001(\r:\0010\022.\n\rrestmaterials\030\007 "
    "\003(\0132\027.Cmd.GuildBuildMaterial\"N\n\021GuildBui"
    "ldingData\022%\n\tbuildings\030\001 \003(\0132\022.Cmd.Guild"
    "Building\022\022\n\007version\030\002 \001(\r:\0010\"g\n\016GuildCha"
    "llenge\022\r\n\002id\030\001 \001(\r:\0010\022\023\n\010progress\030\002 \001(\r:"
    "\0010\022\025\n\006reward\030\003 \001(\010:\005false\022\032\n\013extrareward"
    "\030\004 \001(\010:\005false\"=\n\022GuildChallengeData\022\'\n\nc"
    "hallenges\030\001 \003(\0132\023.Cmd.GuildChallenge\"\246\002\n"
    "\020GuildWelfareItem\0223\n\004type\030\001 \001(\0162\022.Cmd.EG"
    "uildWelfare:\021EGUILDWELFARE_MIN\022\r\n\002id\030\002 \001"
    "(\004:\0010\022)\n\006source\030\003 \001(\0162\014.Cmd.ESource:\013ESO"
    "URCE_MIN\022\023\n\010rewardid\030\004 \001(\r:\0010\022\025\n\ncreatet"
    "ime\030\005 \001(\r:\0010\022\026\n\013overduetime\030\006 \001(\r:\0010\022\017\n\007"
    "charids\030\007 \003(\004\022\021\n\townername\030\010 \001(\t\022\023\n\010sour"
    "ceid\030\t \001(\r:\0010\022\024\n\teventguid\030\n \001(\r:\0010\022\020\n\005i"
    "ndex\030\013 \001(\r:\0010\"4\n\014GuildWelfare\022$\n\005items\030\001"
    " \003(\0132\025.Cmd.GuildWelfareItem\"}\n\021GuildArti"
    "factItem\022\014\n\004guid\030\001 \001(\t\022\021\n\006itemid\030\002 \001(\r:\001"
    "0\022\032\n\017distributecount\030\003 \001(\r:\0010\022\027\n\014retriev"
    "etime\030\004 \001(\r:\0010\022\022\n\007ownerid\030\005 \001(\004:\0010\"R\n\021Gu"
    "ildArtifactData\022\017\n\004type\030\001 \001(\r:\0010\022\027\n\014prod"
    "ucecount\030\002 \001(\r:\0010\022\023\n\010maxlevel\030\003 \001(\r:\0010\"]"
    "\n\rGuildArtifact\022%\n\005items\030\001 \003(\0132\026.Cmd.Gui"
    "ldArtifactItem\022%\n\005datas\030\002 \003(\0132\026.Cmd.Guil"
    "dArtifactData\":\n\006GQuest\022\021\n\006charid\030\001 \001(\004:"
    "\0010\022\035\n\005datas\030\002 \003(\0132\016.Cmd.QuestData\"J\n\nBlo"
    "bGQuest\022\033\n\006quests\030\001 \003(\0132\013.Cmd.GQuest\022\017\n\007"
    "accepts\030\002 \003(\r\022\016\n\006submit\030\003 \003(\r\"\216\001\n\010BlobGG"
    "vg\022\026\n\013partin_time\030\001 \001(\r:\0010\022\024\n\014partin_use"
    "rs\030\002 \003(\004\022\024\n\tsugvgtime\030\003 \001(\r:\0010\022\023\n\010sugvgc"
    "nt\030\004 \001(\r:\0010\022\025\n\nsugvgscore\030\005 \001(\r:\0010\022\022\n\007ve"
    "rsion\030\006 \001(\r:\0010\"0\n\rGuildTreasure\022\r\n\002id\030\001 "
    "\001(\r:\0010\022\020\n\005count\030\002 \001(\r:\0010\"M\n\014TreasureItem"
    "\022\021\n\006charid\030\001 \001(\004:\0010\022\014\n\004name\030\003 \001(\t\022\034\n\005dat"
    "as\030\002 \003(\0132\r.Cmd.ItemData\"\303\001\n\016TreasureResu"
    "lt\022\022\n\007ownerid\030\001 \001(\004:\0010\022\024\n\teventguid\030\002 \001("
    "\r:\0010\022\025\n\ntreasureid\030\003 \001(\r:\0010\022\026\n\013totalmemb"
    "er\030\005 \001(\r:\0010\0226\n\005state\030\006 \001(\0162\023.Cmd.ETreasu"
    "reState:\022ETREASURESTATE_MIN\022 \n\005items\030\004 \003"
    "(\0132\021.Cmd.TreasureItem\"_\n\021BlobGuildTreasu"
    "re\022%\n\ttreasures\030\001 \003(\0132\022.Cmd.GuildTreasur"
    "e\022#\n\006result\030\002 \003(\0132\023.Cmd.TreasureResult\"\343"
    "\004\n\rBlobGuildMisc\022\013\n\003var\030\001 \001(\014\022\032\n\003job\030\002 \003"
    "(\0132\r.Cmd.GuildJob\022\026\n\013donatetime1\030\003 \001(\r:\001"
    "0\022\026\n\013donatetime2\030\004 \001(\r:\0010\022\036\n\005quest\030\005 \003(\013"
    "2\017.Cmd.GuildQuest\022\030\n\rnextquesttime\030\006 \001(\r"
    ":\0010\022!\n\007dojomsg\030\007 \003(\0132\020.Cmd.DojoMsgBlob\022\026"
    "\n\013donatetime3\030\010 \001(\r:\0010\022\026\n\013donatetime4\030\t "
    "\001(\r:\0010\022\025\n\nrenametime\030\n \001(\r:\0010\022\033\n\020city_gi"
    "veup_time\030\013 \001(\r:\0010\022\027\n\014auth_version\030\014 \001(\r"
    ":\0010\022(\n\010building\030\r \001(\0132\026.Cmd.GuildBuildin"
    "gData\022\027\n\014openfunction\030\016 \001(\004:\0010\022*\n\tchalle"
    "nge\030\017 \001(\0132\027.Cmd.GuildChallengeData\022\"\n\007we"
    "lfare\030\020 \001(\0132\021.Cmd.GuildWelfare\022$\n\010artifa"
    "ct\030\021 \001(\0132\022.Cmd.GuildArtifact\022\037\n\006quests\030\022"
    " \001(\0132\017.Cmd.BlobGQuest\022)\n\ttreasures\030\023 \001(\013"
    "2\026.Cmd.BlobGuildTreasure\022\032\n\003gvg\030\024 \001(\0132\r."
    "Cmd.BlobGGvg\"]\n\rBlobGuildPack\022\022\n\007version"
    "\030\001 \001(\r:\0010\022\033\n\004item\030\002 \003(\0132\r.Cmd.ItemInfo\022\033"
    "\n\004data\030\003 \003(\0132\r.Cmd.ItemData\"E\n\016BlobGuild"
    "Event\022\022\n\007version\030\001 \001(\r:\0010\022\037\n\006events\030\002 \003("
    "\0132\017.Cmd.GuildEvent\"\275\001\n\nGuildPhoto\022\024\n\tacc"
    "id_svr\030\010 \001(\004:\0010\022\020\n\005accid\030\007 \001(\004:\0010\022\021\n\006cha"
    "rid\030\001 \001(\004:\0010\022\021\n\006anglez\030\002 \001(\r:\0010\022\017\n\004time\030"
    "\003 \001(\r:\0010\022\020\n\005mapid\030\004 \001(\r:\0010\022\023\n\010sourceid\030\005"
    " \001(\r:\0010\022)\n\006source\030\006 \001(\0162\014.Cmd.ESource:\013E"
    "SOURCE_MIN\"@\n\nPhotoFrame\022\022\n\007frameid\030\001 \001("
    "\r:\0010\022\036\n\005photo\030\002 \003(\0132\017.Cmd.GuildPhoto\"1\n\016"
    "BlobGuildPhoto\022\037\n\006frames\030\001 \003(\0132\017.Cmd.Pho"
    "toFrame\"\212\002\n\020GuildSummaryData\022\017\n\004guid\030\001 \001"
    "(\004:\0010\022\020\n\005level\030\002 \001(\r:\0010\022\021\n\006zoneid\030\n \001(\r:"
    "\0010\022\024\n\tcurmember\030\003 \001(\r:\0010\022\024\n\tmaxmember\030\004 "
    "\001(\r:\0010\022\021\n\006cityid\030\013 \001(\r:\0010\0221\n\016chairmangen"
    "der\030\005 \001(\0162\014.Cmd.EGender:\013EGENDER_MIN\022\024\n\014"
    "chairmanname\030\006 \001(\t\022\021\n\tguildname\030\007 \001(\t\022\023\n"
    "\013recruitinfo\030\010 \001(\t\022\020\n\010portrait\030\t \001(\t\"\210\005\n"
    "\tGuildData\022&\n\007summary\030\001 \001(\0132\025.Cmd.GuildS"
    "ummaryData\022\031\n\016questresettime\030\004 \001(\r:\0010\022\020\n"
    "\005asset\030\005 \001(\r:\0010\022\026\n\013dismisstime\030\006 \001(\r:\0010\022"
    "\023\n\010zonetime\030\007 \001(\r:\0010\022\025\n\ncreatetime\030\010 \001(\r"
    ":\0010\022\023\n\010nextzone\030\t \001(\r:\0010\022\026\n\013donatetime1\030"
    "\n \001(\r:\0010\022\026\n\013donatetime2\030\013 \001(\r:\0010\022\014\n\004name"
    "\030\014 \001(\t\022\021\n\tboardinfo\030\r \001(\t\022\023\n\013recruitinfo"
    "\030\016 \001(\t\022!\n\007members\030\017 \003(\0132\020.Cmd.GuildMembe"
    "r\022\037\n\006applys\030\020 \003(\0132\017.Cmd.GuildApply\022\033\n\004jo"
    "bs\030\021 \003(\0132\r.Cmd.GuildJob\022\025\n\nassettoday\030\022 "
    "\001(\r:\0010\022\031\n\016citygiveuptime\030\023 \001(\r:\0010\022\027\n\014ope"
    "nfunction\030\024 \001(\r:\0010\022\'\n\nchallenges\030\025 \003(\0132\023"
    ".Cmd.GuildChallenge\022\035\n\022gvg_treasure_coun"
    "t\030\026 \001(\r:\0010\022\037\n\024guild_treasure_count\030\027 \001(\r"
    ":\0010\022\037\n\024bcoin_treasure_count\030\030 \001(\r:\0010\022\031\n\n"
    "insupergvg\030\031 \001(\010:\005false\022\026\n\013supergvg_lv\030\032"
    " \001(\r:\0010\"\315\001\n\026QueryGuildListGuildCmd\0226\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\033SESSION_USER_GUIL"
    "D_PROTOCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.GuildPar"
    "am:\024GUILDPARAM_GUILDLIST\022\017\n\007keyword\030\003 \001("
    "\t\022\017\n\004page\030\004 \001(\r:\0010\022#\n\004list\030\005 \003(\0132\025.Cmd.G"
    "uildSummaryData\"\223\001\n\023CreateGuildGuildCmd\022"
    "6\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SESSION_USER"
    "_GUILD_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.Gui"
    "ldParam:\026GUILDPARAM_CREATEGUILD\022\014\n\004name\030"
    "\003 \001(\t\"\241\001\n\022EnterGuildGuildCmd\0226\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\033SESSION_USER_GUILD_PROT"
    "OCMD\0225\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\025GU"
    "ILDPARAM_ENTERGUILD\022\034\n\004data\030\003 \001(\0132\016.Cmd."
    "GuildData\"\275\001\n\031GuildMemberUpdateGuildCmd\022"
    "6\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SESSION_USER"
    "_GUILD_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.Gui"
    "ldParam:\027GUILDPARAM_MEMBERUPDATE\022!\n\007upda"
    "tes\030\003 \003(\0132\020.Cmd.GuildMember\022\014\n\004dels\030\004 \003("
    "\004\"\272\001\n\030GuildApplyUpdateGuildCmd\0226\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\033SESSION_USER_GUILD_PR"
    "OTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\026"
    "GUILDPARAM_APPLYUPDATE\022 \n\007updates\030\003 \003(\0132"
    "\017.Cmd.GuildApply\022\014\n\004dels\030\004 \003(\004\"`\n\017GuildD"
    "ataUpdate\022-\n\004type\030\001 \001(\0162\017.Cmd.EGuildData"
    ":\016EGUILDDATA_MIN\022\020\n\005value\030\002 \001(\004:\0010\022\014\n\004da"
    "ta\030\003 \001(\t\"\264\001\n\027GuildDataUpdateGuildCmd\0226\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\033SESSION_USER_GU"
    "ILD_PROTOCMD\022:\n\005param\030\002 \001(\0162\017.Cmd.GuildP"
    "aram:\032GUILDPARAM_GUILDDATAUPDATE\022%\n\007upda"
    "tes\030\003 \003(\0132\024.Cmd.GuildDataUpdate\"r\n\025Guild"
    "MemberDataUpdate\0229\n\004type\030\001 \001(\0162\025.Cmd.EGu"
    "ildMemberData:\024EGUILDMEMBERDATA_MIN\022\020\n\005v"
    "alue\030\002 \001(\004:\0010\022\014\n\004data\030\003 \001(\t\"\206\002\n\035GuildMem"
    "berDataUpdateGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\033SESSION_USER_GUILD_PROTOCMD\022;\n"
    "\005param\030\002 \001(\0162\017.Cmd.GuildParam:\033GUILDPARA"
    "M_MEMBERDATAUPDATE\0220\n\004type\030\003 \001(\0162\017.Cmd.E"
    "GuildList:\021EGUILDLIST_MEMBER\022\021\n\006charid\030\004"
    " \001(\004:\0010\022+\n\007updates\030\005 \003(\0132\032.Cmd.GuildMemb"
    "erDataUpdate\"\224\001\n\022ApplyGuildGuildCmd\0226\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\033SESSION_USER_GUI"
    "LD_PROTOCMD\0225\n\005param\030\002 \001(\0162\017.Cmd.GuildPa"
    "ram:\025GUILDPARAM_APPLYGUILD\022\017\n\004guid\030\003 \001(\004"
    ":\0010\"\317\001\n\024ProcessApplyGuildCmd\0226\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\033SESSION_USER_GUILD_PROT"
    "OCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\027GU"
    "ILDPARAM_PROCESSAPPLY\0223\n\006action\030\003 \001(\0162\021."
    "Cmd.EGuildAction:\020EGUILDACTION_MIN\022\021\n\006ch"
    "arid\030\004 \001(\004:\0010\"\325\001\n\024InviteMemberGuildCmd\0226"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SESSION_USER_"
    "GUILD_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.Guil"
    "dParam:\027GUILDPARAM_INVITEMEMBER\022\021\n\006chari"
    "d\030\003 \001(\004:\0010\022\022\n\007guildid\030\004 \001(\004:\0010\022\021\n\tguildn"
    "ame\030\005 \001(\t\022\022\n\ninvitename\030\006 \001(\t\"\325\001\n\025Proces"
    "sInviteGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\033SESSION_USER_GUILD_PROTOCMD\022>\n\005param"
    "\030\002 \001(\0162\017.Cmd.GuildParam:\036GUILDPARAM_PROC"
    "ESSINVITEMEMBER\0223\n\006action\030\003 \001(\0162\021.Cmd.EG"
    "uildAction:\020EGUILDACTION_MIN\022\017\n\004guid\030\004 \001"
    "(\004:\0010\"\325\001\n\026SetGuildOptionGuildCmd\0226\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\033SESSION_USER_GUILD_"
    "PROTOCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.GuildParam"
    ":\024GUILDPARAM_SETOPTION\022\r\n\005board\030\003 \001(\t\022\017\n"
    "\007recruit\030\004 \001(\t\022\020\n\010portrait\030\005 \001(\t\022\033\n\004jobs"
    "\030\006 \003(\0132\r.Cmd.GuildJob\"\226\001\n\022KickMemberGuil"
    "dCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SESSION"
    "_USER_GUILD_PROTOCMD\0225\n\005param\030\002 \001(\0162\017.Cm"
    "d.GuildParam:\025GUILDPARAM_KICKMEMBER\022\021\n\006c"
    "harid\030\003 \001(\004:\0010\"\300\001\n\021ChangeJobGuildCmd\0226\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\033SESSION_USER_GU"
    "ILD_PROTOCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.GuildP"
    "aram:\024GUILDPARAM_CHANGEJOB\022\021\n\006charid\030\003 \001"
    "(\004:\0010\022*\n\003job\030\004 \001(\0162\016.Cmd.EGuildJob:\rEGUI"
    "LDJOB_MIN\"\201\001\n\021ExitGuildGuildCmd\0226\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\033SESSION_USER_GUILD_P"
    "ROTOCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:"
    "\024GUILDPARAM_EXITGUILD\"\237\001\n\025ExchangeChairG"
    "uildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SESS"
    "ION_USER_GUILD_PROTOCMD\0228\n\005param\030\002 \001(\0162\017"
    ".Cmd.GuildParam:\030GUILDPARAM_EXCHANGECHAI"
    "R\022\024\n\tnewcharid\030\003 \001(\004:\0010\"\226\001\n\017DismissGuild"
    "Cmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SESSION_"
    "USER_GUILD_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd"
    ".GuildParam:\027GUILDPARAM_DISMISSGUILD\022\022\n\003"
    "set\030\003 \001(\010:\005false\"\202\001\n\017LevelupGuildCmd\0226\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\033SESSION_USER_GU"
    "ILD_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.GuildP"
    "aram:\027GUILDPARAM_LEVELUPGUILD\"\241\001\n\016Donate"
    "GuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SES"
    "SION_USER_GUILD_PROTOCMD\0221\n\005param\030\002 \001(\0162"
    "\017.Cmd.GuildParam:\021GUILDPARAM_DONATE\022\023\n\010c"
    "onfigid\030\003 \001(\r:\0010\022\017\n\004time\030\004 \001(\r:\0010\"\226\001\n\nDo"
    "nateItem\022\023\n\010configid\030\001 \001(\r:\0010\022\020\n\005count\030\002"
    " \001(\r:\0010\022\017\n\004time\030\003 \001(\r:\0010\022\021\n\006itemid\030\004 \001(\r"
    ":\0010\022\024\n\titemcount\030\005 \001(\r:\0010\022\025\n\ncontribute\030"
    "\006 \001(\r:\0010\022\020\n\005medal\030\007 \001(\r:\0010\"\243\001\n\022DonateLis"
    "tGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SE"
    "SSION_USER_GUILD_PROTOCMD\0225\n\005param\030\002 \001(\016"
    "2\017.Cmd.GuildParam:\025GUILDPARAM_DONATELIST"
    "\022\036\n\005items\030\003 \003(\0132\017.Cmd.DonateItem\"\314\001\n\030Upd"
    "ateDonateItemGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\033SESSION_USER_GUILD_PROTOCMD\022;\n"
    "\005param\030\002 \001(\0162\017.Cmd.GuildParam:\033GUILDPARA"
    "M_UPDATEDONATEITEM\022\035\n\004item\030\003 \001(\0132\017.Cmd.D"
    "onateItem\022\034\n\003del\030\004 \001(\0132\017.Cmd.DonateItem\""
    "\240\001\n\023DonateFrameGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\033SESSION_USER_GUILD_PROTOCMD\022"
    "<\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\034GUILDPA"
    "RAM_DONATEFRAMESTATUS\022\023\n\004open\030\003 \001(\010:\005fal"
    "se\"\243\001\n\026EnterTerritoryGuildCmd\0226\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\033SESSION_USER_GUILD_PRO"
    "TOCMD\022>\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\036G"
    "UILDPARAM_ENTERGUILDTERRITORY\022\021\n\006handid\030"
    "\003 \001(\004:\0010\"\232\001\n\014PrayGuildCmd\0226\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\033SESSION_USER_GUILD_PROTOCM"
    "D\022/\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\017GUILD"
    "PARAM_PRAY\022\020\n\005npcid\030\003 \001(\004:\0010\022\017\n\004pray\030\004 \001"
    "(\r:\0010\"\312\001\n\014GuildInfoNtf\0226\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\033SESSION_USER_GUILD_PROTOCMD\0227"
    "\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\027GUILDPAR"
    "AM_GUILDINFONTF\022\021\n\006charid\030\003 \001(\004:\0010\022\r\n\002id"
    "\030\004 \001(\004:\0010\022\014\n\004name\030\005 \001(\t\022\014\n\004icon\030\006 \001(\t\022\013\n"
    "\003job\030\007 \001(\t\"\254\001\n\024GuildPrayNtfGuildCmd\0226\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\033SESSION_USER_GUI"
    "LD_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.GuildPa"
    "ram:\027GUILDPARAM_GUILDPRAYNTF\022#\n\005prays\030\003 "
    "\003(\0132\024.Cmd.GuildMemberPray\"\211\001\n\025LevelupEff"
    "ectGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033"
    "SESSION_USER_GUILD_PROTOCMD\0228\n\005param\030\002 \001"
    "(\0162\017.Cmd.GuildParam:\030GUILDPARAM_LEVELUPE"
    "FFECT\"\237\001\n\021QueryPackGuildCmd\0226\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\033SESSION_USER_GUILD_PROTO"
    "CMD\0224\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\024GUI"
    "LDPARAM_QUERYPACK\022\034\n\005items\030\003 \003(\0132\r.Cmd.I"
    "temData\"\261\001\n\022PackUpdateGuildCmd\0226\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\033SESSION_USER_GUILD_PR"
    "OTOCMD\0225\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\025"
    "GUILDPARAM_PACKUPDATE\022\036\n\007updates\030\003 \003(\0132\r"
    ".Cmd.ItemData\022\014\n\004dels\030\004 \003(\t\"\256\001\n\024Exchange"
    "ZoneGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\033SESSION_USER_GUILD_PROTOCMD\0227\n\005param\030\002 "
    "\001(\0162\017.Cmd.GuildParam:\027GUILDPARAM_EXCHANG"
    "EZONE\022\021\n\006zoneid\030\003 \001(\r:\0010\022\022\n\003set\030\004 \001(\010:\005f"
    "alse\"\273\001\n\027ExchangeZoneNtfGuildCmd\0226\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\033SESSION_USER_GUILD_"
    "PROTOCMD\022;\n\005param\030\002 \001(\0162\017.Cmd.GuildParam"
    ":\033GUILDPARAM_EXCHANGEZONE_NTF\022\025\n\nnextzon"
    "eid\030\003 \001(\r:\0010\022\024\n\tcurzoneid\030\004 \001(\r:\0010\"\252\001\n\032E"
    "xchangeZoneAnswerGuildCmd\0226\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\033SESSION_USER_GUILD_PROTOCM"
    "D\022>\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\036GUILD"
    "PARAM_EXCHANGEZONE_ANSWER\022\024\n\005agree\030\003 \001(\010"
    ":\005false\"Q\n\nGuildEvent\022\017\n\004guid\030\001 \001(\r:\0010\022\022"
    "\n\007eventid\030\002 \001(\r:\0010\022\017\n\004time\030\003 \001(\r:\0010\022\r\n\005p"
    "aram\030\004 \003(\t\"\256\001\n\026QueryEventListGuildCmd\0226\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SESSION_USER_G"
    "UILD_PROTOCMD\022;\n\005param\030\002 \001(\0162\017.Cmd.Guild"
    "Param:\033GUILDPARAM_QUERY_EVENT_LIST\022\037\n\006ev"
    "ents\030\003 \003(\0132\017.Cmd.GuildEvent\"\264\001\n\020NewEvent"
    "GuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SES"
    "SION_USER_GUILD_PROTOCMD\0224\n\005param\030\002 \001(\0162"
    "\017.Cmd.GuildParam:\024GUILDPARAM_NEW_EVENT\022\022"
    "\n\003del\030\003 \001(\010:\005false\022\036\n\005event\030\004 \001(\0132\017.Cmd."
    "GuildEvent\",\n\013GuildReward\022\r\n\002id\030\001 \001(\r:\0010"
    "\022\016\n\003num\030\002 \001(\r:\0010\"\335\001\n\026ApplyRewardConGuild"
    "Cmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SESSION_"
    "USER_GUILD_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd"
    ".GuildParam:\026GUILDPARAM_APPLYCONFIG\022\023\n\010c"
    "onfigid\030\003 \001(\r:\0010\022\035\n\003con\030\004 \003(\0132\020.Cmd.Guil"
    "dReward\022\037\n\005asset\030\005 \003(\0132\020.Cmd.GuildReward"
    "\"\233\001\n\023FrameStatusGuildCmd\0226\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\033SESSION_USER_GUILD_PROTOCMD"
    "\0227\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\027GUILDP"
    "ARAM_FRAME_STATUS\022\023\n\004open\030\003 \001(\010:\005false\"\224"
    "\002\n\022ModifyAuthGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\033SESSION_USER_GUILD_PROTOCMD\0226\n"
    "\005param\030\002 \001(\0162\017.Cmd.GuildParam:\026GUILDPARA"
    "M_MODIFY_AUTH\022\022\n\003add\030\003 \001(\010:\005false\022)\n\006mod"
    "ify\030\004 \001(\0162\014.Cmd.EModify:\013EMODIFY_MIN\022*\n\003"
    "job\030\005 \001(\0162\016.Cmd.EGuildJob:\rEGUILDJOB_MIN"
    "\022#\n\004auth\030\006 \001(\0162\n.Cmd.EAuth:\tEAUTH_MIN\"\236\001"
    "\n\021JobUpdateGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\033SESSION_USER_GUILD_PROTOCMD\0225\n\005p"
    "aram\030\002 \001(\0162\017.Cmd.GuildParam:\025GUILDPARAM_"
    "JOB_UPDATE\022\032\n\003job\030\003 \001(\0132\r.Cmd.GuildJob\"\310"
    "\001\n\023RenameQueryGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\033SESSION_USER_GUILD_PROTOCMD\0227"
    "\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\027GUILDPAR"
    "AM_RENAME_QUERY\022\014\n\004name\030\003 \001(\t\0222\n\004code\030\004 "
    "\001(\0162\023.Cmd.ERenameErrCode:\017ERENAME_SUCCES"
    "S\"\261\001\n\rGuildCityInfo\022\r\n\002id\030\001 \001(\004:\0010\022\017\n\004fl"
    "ag\030\002 \001(\r:\0010\022\r\n\002lv\030\003 \001(\r:\0010\022\026\n\013membercoun"
    "t\030\004 \001(\r:\0010\022\014\n\004name\030\005 \001(\t\022\020\n\010portrait\030\006 \001"
    "(\t\022\023\n\010oldguild\030\007 \001(\004:\0010\022\020\n\005times\030\010 \001(\r:\001"
    "0\022\022\n\nleadername\030\t \001(\t\"\262\001\n\032QueryGuildCity"
    "InfoGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\033SESSION_USER_GUILD_PROTOCMD\0229\n\005param\030\002 "
    "\001(\0162\017.Cmd.GuildParam:\031GUILDPARAM_QUERY_C"
    "ITYINFO\022!\n\005infos\030\003 \003(\0132\022.Cmd.GuildCityIn"
    "fo\"\267\001\n\022CityActionGuildCmd\0226\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\033SESSION_USER_GUILD_PROTOCM"
    "D\0226\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\026GUILD"
    "PARAM_CITY_ACTION\0221\n\006action\030\003 \001(\0162\020.Cmd."
    "ECityAction:\017ECITYACTION_MIN\"k\n\010IconInfo"
    "\022\r\n\005index\030\001 \001(\r\022\036\n\005state\030\002 \001(\0162\017.Cmd.EIc"
    "onState\022\014\n\004time\030\003 \001(\r\022\024\n\006isread\030\004 \001(\010:\004t"
    "rue\022\014\n\004type\030\005 \001(\t\"\267\001\n\025GuildIconSyncGuild"
    "Cmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SESSION_"
    "USER_GUILD_PROTOCMD\022:\n\005param\030\002 \001(\0162\017.Cmd"
    ".GuildParam:\032GUILDPARAM_GUILD_ICON_SYNC\022"
    "\034\n\005infos\030\003 \003(\0132\r.Cmd.IconInfo\022\014\n\004dels\030\004 "
    "\003(\r\"\205\002\n\024GuildIconAddGuildCmd\0226\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\033SESSION_USER_GUILD_PROT"
    "OCMD\0229\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\031GU"
    "ILDPARAM_GUILD_ICON_ADD\022\020\n\005index\030\003 \001(\r:\001"
    "0\022*\n\005state\030\004 \001(\0162\017.Cmd.EIconState:\nEICON"
    "_INIT\022\025\n\ncreatetime\030\005 \001(\r:\0010\022\027\n\010isdelete"
    "\030\006 \001(\010:\005false\022\014\n\004type\030\007 \001(\t\"\322\001\n\027GuildIco"
    "nUploadGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\033SESSION_USER_GUILD_PROTOCMD\022<\n\005param"
    "\030\002 \001(\0162\017.Cmd.GuildParam:\034GUILDPARAM_GUIL"
    "D_ICON_UPLOAD\022\020\n\005index\030\003 \001(\r:\0010\022\016\n\006polic"
    "y\030\004 \001(\t\022\021\n\tsignature\030\005 \001(\t\022\014\n\004type\030\006 \001(\t"
    "\"\277\001\n\024OpenFunctionGuildCmd\0226\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\033SESSION_USER_GUILD_PROTOCM"
    "D\0228\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\030GUILD"
    "PARAM_OPEN_FUNCTION\0225\n\004func\030\003 \001(\0162\023.Cmd."
    "EGuildFunction:\022EGUILDFUNCTION_MIN\"\264\001\n\rB"
    "uildGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\033SESSION_USER_GUILD_PROTOCMD\0220\n\005param\030\002 "
    "\001(\0162\017.Cmd.GuildParam:\020GUILDPARAM_BUILD\0229"
    "\n\010building\030\003 \001(\0162\023.Cmd.EGuildBuilding:\022E"
    "GUILDBUILDING_MIN\"\336\001\n\026SubmitMaterialGuil"
    "dCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SESSION"
    "_USER_GUILD_PROTOCMD\022:\n\005param\030\002 \001(\0162\017.Cm"
    "d.GuildParam:\032GUILDPARAM_SUBMIT_MATERIAL"
    "\0229\n\010building\030\003 \001(\0162\023.Cmd.EGuildBuilding:"
    "\022EGUILDBUILDING_MIN\022\025\n\nmaterialid\030\004 \001(\r:"
    "\0010\"\255\001\n\023BuildingNtfGuildCmd\0226\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\033SESSION_USER_GUILD_PROTOC"
    "MD\0227\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\027GUIL"
    "DPARAM_BUILDING_NTF\022%\n\tbuildings\030\003 \003(\0132\022"
    ".Cmd.GuildBuilding\"\340\001\n\033BuildingSubmitCou"
    "ntGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033S"
    "ESSION_USER_GUILD_PROTOCMD\022@\n\005param\030\002 \001("
    "\0162\017.Cmd.GuildParam: GUILDPARAM_BUILDING_"
    "SUBMIT_COUNT\0225\n\004type\030\003 \001(\0162\023.Cmd.EGuildB"
    "uilding:\022EGUILDBUILDING_MIN\022\020\n\005count\030\004 \001"
    "(\r:\0010\"\357\001\n\032ChallengeUpdateNtfGuildCmd\0226\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\033SESSION_USER_GU"
    "ILD_PROTOCMD\022;\n\005param\030\002 \001(\0162\017.Cmd.GuildP"
    "aram:\033GUILDPARAM_CHALLENGE_UPDATE\022$\n\007upd"
    "ates\030\003 \003(\0132\023.Cmd.GuildChallenge\022!\n\004dels\030"
    "\004 \003(\0132\023.Cmd.GuildChallenge\022\023\n\013refreshtim"
    "e\030\005 \001(\r\"\234\001\n\022WelfareNtfGuildCmd\0226\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\033SESSION_USER_GUILD_PR"
    "OTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\026"
    "GUILDPARAM_WELFARE_NTF\022\026\n\007welfare\030\003 \001(\010:"
    "\005false\"\204\001\n\022GetWelfareGuildCmd\0226\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\033SESSION_USER_GUILD_PRO"
    "TOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\026G"
    "UILDPARAM_GET_WELFARE\"]\n\022BuildingLvupEff"
    "ect\0225\n\004type\030\001 \001(\0162\023.Cmd.EGuildBuilding:\022"
    "EGUILDBUILDING_MIN\022\020\n\005level\030\002 \001(\r:\0010\"\271\001\n"
    "\027BuildingLvupEffGuildCmd\0226\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\033SESSION_USER_GUILD_PROTOCMD"
    "\022<\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\034GUILDP"
    "ARAM_BUILDING_LVUP_EFF\022(\n\007effects\030\003 \003(\0132"
    "\027.Cmd.BuildingLvupEffect\"\377\001\n\031ArtifactUpd"
    "ateNtfGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\033SESSION_USER_GUILD_PROTOCMD\022>\n\005param\030"
    "\002 \001(\0162\017.Cmd.GuildParam:\036GUILDPARAM_ARTIF"
    "ACT_UPDATE_NTF\022+\n\013itemupdates\030\003 \003(\0132\026.Cm"
    "d.GuildArtifactItem\022\020\n\010itemdels\030\004 \003(\t\022+\n"
    "\013dataupdates\030\005 \003(\0132\026.Cmd.GuildArtifactDa"
    "ta\"\235\001\n\027ArtifactProduceGuildCmd\0226\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\033SESSION_USER_GUILD_PR"
    "OTOCMD\022;\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\033"
    "GUILDPARAM_ARTIFACT_PRODUCE\022\r\n\002id\030\003 \001(\r:"
    "\0010\"\341\001\n\023ArtifactOptGuildCmd\0226\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\033SESSION_USER_GUILD_PROTOC"
    "MD\0227\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\027GUIL"
    "DPARAM_ARTIFACT_OPT\0228\n\003opt\030\003 \001(\0162\025.Cmd.E"
    "ArtifactOptType:\024EARTIFACTOPTTYPE_MIN\022\014\n"
    "\004guid\030\004 \003(\t\022\021\n\006charid\030\005 \001(\004:\0010\"\235\001\n\023Query"
    "GQuestGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\033SESSION_USER_GUILD_PROTOCMD\0227\n\005param\030"
    "\002 \001(\0162\017.Cmd.GuildParam:\027GUILDPARAM_QUERY"
    "_GQUEST\022\025\n\rsubmit_quests\030\003 \003(\r\"\372\002\n\026Treas"
    "ureActionGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\033SESSION_USER_GUILD_PROTOCMD\022:\n\005par"
    "am\030\002 \001(\0162\017.Cmd.GuildParam:\032GUILDPARAM_TR"
    "EASURE_ACTION\022\021\n\006charid\030\003 \001(\004:\0010\022\037\n\024guil"
    "d_treasure_count\030\004 \001(\r:\0010\022\037\n\024bcoin_treas"
    "ure_count\030\005 \001(\r:\0010\0229\n\006action\030\006 \001(\0162\024.Cmd"
    ".ETreasureAction:\023ETREASUREACTION_MIN\0226\n"
    "\005point\030\007 \001(\0162\023.Cmd.ETreasurePoint:\022ETREA"
    "SUREPOINT_MIN\022$\n\010treasure\030\010 \001(\0132\022.Cmd.Gu"
    "ildTreasure\"_\n\026BuildingSubmitRankItem\022\021\n"
    "\006charid\030\001 \001(\004:\0010\022\033\n\020submitcounttotal\030\002 \001"
    "(\r:\0010\022\025\n\nsubmittime\030\003 \001(\r:\0010\"\366\001\n\031QueryBu"
    "ildingRankGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\033SESSION_USER_GUILD_PROTOCMD\022>\n\005pa"
    "ram\030\002 \001(\0162\017.Cmd.GuildParam:\036GUILDPARAM_Q"
    "UERY_BUILDING_RANK\0225\n\004type\030\003 \001(\0162\023.Cmd.E"
    "GuildBuilding:\022EGUILDBUILDING_MIN\022*\n\005ite"
    "ms\030\004 \003(\0132\033.Cmd.BuildingSubmitRankItem\"\321\001"
    "\n\033QueryTreasureResultGuildCmd\0226\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\033SESSION_USER_GUILD_PRO"
    "TOCMD\022\?\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\037G"
    "UILDPARAM_TREASURE_QUERYRESULT\022\024\n\teventg"
    "uid\030\003 \001(\r:\0010\022#\n\006result\030\004 \001(\0132\023.Cmd.Treas"
    "ureResult\"\256\001\n\014CityShowInfo\022\021\n\006cityid\030\001 \001"
    "(\r:\0010\0220\n\005state\030\002 \001(\0162\020.Cmd.EGCityState:\017"
    "EGCITYSTATE_MIN\022\022\n\007guildid\030\003 \001(\004:\0010\022\014\n\004n"
    "ame\030\004 \001(\t\022\020\n\010portrait\030\005 \001(\t\022\r\n\002lv\030\006 \001(\r:"
    "\0010\022\026\n\013membercount\030\007 \001(\r:\0010\"\261\001\n\032QueryGCit"
    "yShowInfoGuildCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\033SESSION_USER_GUILD_PROTOCMD\0229\n\005par"
    "am\030\002 \001(\0162\017.Cmd.GuildParam:\031GUILDPARAM_QU"
    "ERY_CITYSHOW\022 \n\005infos\030\003 \003(\0132\021.Cmd.CitySh"
    "owInfo\"\227\001\n\023GvgOpenFireGuildCmd\0226\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\033SESSION_USER_GUILD_PR"
    "OTOCMD\0223\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:\023"
    "GUILDPARAM_OEPN_GVG\022\023\n\004fire\030\003 \001(\010:\005false"
    "\"\251\001\n\032EnterPunishTimeNtfGuildCmd\0226\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\033SESSION_USER_GUILD_P"
    "ROTOCMD\022>\n\005param\030\002 \001(\0162\017.Cmd.GuildParam:"
    "\036GUILDPARAM_ENTERPUNISHTIME_NTF\022\023\n\010exitt"
    "ime\030\003 \001(\r:\0010\"\273\001\n\031OpenRealtimeVoiceGuildC"
    "md\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SESSION_U"
    "SER_GUILD_PROTOCMD\022>\n\005param\030\002 \001(\0162\017.Cmd."
    "GuildParam:\036GUILDPARAM_OPEN_REALTIME_VOI"
    "CE\022\021\n\006charid\030\003 \001(\004:\0010\022\023\n\004open\030\004 \001(\010:\005fal"
    "se*\214\017\n\nGuildParam\022\030\n\024GUILDPARAM_GUILDLIS"
    "T\020\001\022\032\n\026GUILDPARAM_CREATEGUILD\020\002\022\031\n\025GUILD"
    "PARAM_ENTERGUILD\020\003\022\033\n\027GUILDPARAM_MEMBERU"
    "PDATE\020\004\022\032\n\026GUILDPARAM_APPLYUPDATE\020\005\022\036\n\032G"
    "UILDPARAM_GUILDDATAUPDATE\020\006\022\037\n\033GUILDPARA"
    "M_MEMBERDATAUPDATE\020\007\022\031\n\025GUILDPARAM_APPLY"
    "GUILD\020\010\022\033\n\027GUILDPARAM_PROCESSAPPLY\020\t\022\033\n\027"
    "GUILDPARAM_INVITEMEMBER\020\n\022\"\n\036GUILDPARAM_"
    "PROCESSINVITEMEMBER\020\013\022\030\n\024GUILDPARAM_SETO"
    "PTION\020\014\022\031\n\025GUILDPARAM_KICKMEMBER\020\r\022\030\n\024GU"
    "ILDPARAM_CHANGEJOB\020\016\022\030\n\024GUILDPARAM_EXITG"
    "UILD\020\017\022\034\n\030GUILDPARAM_EXCHANGECHAIR\020\020\022\033\n\027"
    "GUILDPARAM_DISMISSGUILD\020\021\022\033\n\027GUILDPARAM_"
    "LEVELUPGUILD\020\022\022\025\n\021GUILDPARAM_DONATE\020\023\022\"\n"
    "\036GUILDPARAM_ENTERGUILDTERRITORY\020\024\022\023\n\017GUI"
    "LDPARAM_PRAY\020\025\022\033\n\027GUILDPARAM_GUILDINFONT"
    "F\020\026\022\033\n\027GUILDPARAM_GUILDPRAYNTF\020\027\022\034\n\030GUIL"
    "DPARAM_LEVELUPEFFECT\020\030\022\031\n\025GUILDPARAM_DON"
    "ATELIST\020\031\022\037\n\033GUILDPARAM_UPDATEDONATEITEM"
    "\020\032\022 \n\034GUILDPARAM_DONATEFRAMESTATUS\020\033\022\030\n\024"
    "GUILDPARAM_QUERYPACK\020\034\022\031\n\025GUILDPARAM_PAC"
    "KUPDATE\020 \022\033\n\027GUILDPARAM_EXCHANGEZONE\020\035\022\037"
    "\n\033GUILDPARAM_EXCHANGEZONE_NTF\020\036\022\"\n\036GUILD"
    "PARAM_EXCHANGEZONE_ANSWER\020\037\022\037\n\033GUILDPARA"
    "M_QUERY_EVENT_LIST\020!\022\030\n\024GUILDPARAM_NEW_E"
    "VENT\020\"\022\032\n\026GUILDPARAM_APPLYCONFIG\020#\022\033\n\027GU"
    "ILDPARAM_FRAME_STATUS\020%\022\032\n\026GUILDPARAM_MO"
    "DIFY_AUTH\020&\022\031\n\025GUILDPARAM_JOB_UPDATE\020\'\022\033"
    "\n\027GUILDPARAM_RENAME_QUERY\020(\022\035\n\031GUILDPARA"
    "M_QUERY_CITYINFO\020)\022\032\n\026GUILDPARAM_CITY_AC"
    "TION\020*\022\036\n\032GUILDPARAM_GUILD_ICON_SYNC\020+\022\035"
    "\n\031GUILDPARAM_GUILD_ICON_ADD\020,\022 \n\034GUILDPA"
    "RAM_GUILD_ICON_UPLOAD\020-\022\034\n\030GUILDPARAM_OP"
    "EN_FUNCTION\020/\022\024\n\020GUILDPARAM_BUILD\0200\022\036\n\032G"
    "UILDPARAM_SUBMIT_MATERIAL\0201\022\033\n\027GUILDPARA"
    "M_BUILDING_NTF\0202\022$\n GUILDPARAM_BUILDING_"
    "SUBMIT_COUNT\0203\022\037\n\033GUILDPARAM_CHALLENGE_U"
    "PDATE\0204\022\032\n\026GUILDPARAM_WELFARE_NTF\0205\022\032\n\026G"
    "UILDPARAM_GET_WELFARE\0206\022 \n\034GUILDPARAM_BU"
    "ILDING_LVUP_EFF\0207\022\"\n\036GUILDPARAM_ARTIFACT"
    "_UPDATE_NTF\0208\022\037\n\033GUILDPARAM_ARTIFACT_PRO"
    "DUCE\0209\022\033\n\027GUILDPARAM_ARTIFACT_OPT\020:\022\033\n\027G"
    "UILDPARAM_QUERY_GQUEST\020;\022\036\n\032GUILDPARAM_T"
    "REASURE_ACTION\020<\022\"\n\036GUILDPARAM_QUERY_BUI"
    "LDING_RANK\020=\022#\n\037GUILDPARAM_TREASURE_QUER"
    "YRESULT\020>\022\035\n\031GUILDPARAM_QUERY_CITYSHOW\020\?"
    "\022\027\n\023GUILDPARAM_OEPN_GVG\020@\022\"\n\036GUILDPARAM_"
    "OPEN_REALTIME_VOICE\020A\022\"\n\036GUILDPARAM_ENTE"
    "RPUNISHTIME_NTF\020B*2\n\014EGuildGlobal\022\"\n\036EGU"
    "ILDGLOBAL_LISTCOUNT_PERPAGE\020\024*\370\002\n\tEGuild"
    "Job\022\021\n\rEGUILDJOB_MIN\020\000\022\026\n\022EGUILDJOB_CHAI"
    "RMAN\020\001\022\033\n\027EGUILDJOB_VICE_CHAIRMAN\020\002\022\025\n\021E"
    "GUILDJOB_MEMBER1\020\003\022\025\n\021EGUILDJOB_MEMBER2\020"
    "\004\022\025\n\021EGUILDJOB_MEMBER3\020\005\022\023\n\017EGUILDJOB_AP"
    "PLY\020\006\022\024\n\020EGUILDJOB_INVITE\020\007\022\025\n\021EGUILDJOB"
    "_MEMBER4\020\010\022\025\n\021EGUILDJOB_MEMBER5\020\t\022\025\n\021EGU"
    "ILDJOB_MEMBER6\020\n\022\025\n\021EGUILDJOB_MEMBER7\020\013\022"
    "\025\n\021EGUILDJOB_MEMBER8\020\014\022\025\n\021EGUILDJOB_MEMB"
    "ER9\020\r\022\026\n\022EGUILDJOB_MEMBER10\020\016\022\021\n\rEGUILDJ"
    "OB_MAX\020\017*z\n\tEPrayType\022\025\n\021EPRAYTYPE_GODDE"
    "SS\020\000\022\025\n\021EPRAYTYPE_GVG_ATK\020\001\022\025\n\021EPRAYTYPE"
    "_GVG_DEF\020\002\022\025\n\021EPRAYTYPE_GVG_ELE\020\003\022\021\n\rEPR"
    "AYTYPE_MAX\020\004*]\n\016EGuildFunction\022\026\n\022EGUILD"
    "FUNCTION_MIN\020\000\022\033\n\027EGUILDFUNCTION_BUILDIN"
    "G\020\001\022\026\n\022EGUILDFUNCTION_MAX\020\002*\306\005\n\005EAuth\022\r\n"
    "\tEAUTH_MIN\020\000\022\020\n\014EAUTH_INVITE\020\001\022\017\n\013EAUTH_"
    "AGREE\020\002\022\032\n\026EAUTH_DELETE_APPLYLIST\020\003\022\024\n\020E"
    "AUTH_EDIT_BOARD\020\004\022\026\n\022EAUTH_EDIT_RECRUIT\020"
    "\005\022\031\n\025EAUTH_CHANGE_PORTRAIT\020\006\022\027\n\023EAUTH_LE"
    "VELUP_GUILD\020\007\022\025\n\021EAUTH_LEVELUP_CON\020\010\022\026\n\022"
    "EAUTH_LEVELUP_TECH\020\t\022\027\n\023EAUTH_PUBLISH_QU"
    "EST\020\n\022\025\n\021EAUTH_KICK_MEMBER\020\013\022\023\n\017EAUTH_KI"
    "CK_VICE\020\014\022\024\n\020EAUTH_CHANGE_JOB\020\r\022\030\n\024EAUTH"
    "_CHANGE_JOBNAME\020\016\022\025\n\021EAUTH_LEADER_GIVE\020\017"
    "\022\027\n\023EAUTH_DISMISS_GUILD\020\020\022\027\n\023EAUTH_EXCHA"
    "NGE_ZONE\020\021\022\023\n\017EAUTH_OPEN_RAID\020\022\022\026\n\022EAUTH"
    "_UPLOAD_PHOTO\020\023\022\026\n\022EAUTH_GUILD_RENAME\020\024\022"
    "\025\n\021EAUTH_GIVEUP_CITY\020\025\022\027\n\023EAUTH_OPEN_BUI"
    "LDING\020\026\022\017\n\013EAUTH_BUILD\020\027\022\030\n\024EAUTH_ARTIFA"
    "CT_QUEST\020\030\022\032\n\026EAUTH_ARTIFACT_PRODUCE\020\031\022\026"
    "\n\022EAUTH_ARTIFACT_OPT\020\032\022\026\n\022EAUTH_TREASURE"
    "_OPT\020\033\022\024\n\020EAUTH_GUILD_SHOP\020\034\022\017\n\013EAUTH_VO"
    "ICE\020\035\022\r\n\tEAUTH_MAX\020\036*\241\002\n\016EGuildBuilding\022"
    "\026\n\022EGUILDBUILDING_MIN\020\000\022\"\n\036EGUILDBUILDIN"
    "G_VENDING_MACHINE\020\001\022\026\n\022EGUILDBUILDING_BA"
    "R\020\002\022!\n\035EGUILDBUILDING_CAT_LITTER_BOX\020\003\022\037"
    "\n\033EGUILDBUILDING_MAGIC_SEWING\020\004\022\036\n\032EGUIL"
    "DBUILDING_HIGH_REFINE\020\005\022 \n\034EGUILDBUILDIN"
    "G_ARTIFACT_HEAD\020\006\022\035\n\031EGUILDBUILDING_CAT_"
    "PILLOW\020\007\022\026\n\022EGUILDBUILDING_MAX\020\010*\222\001\n\rEGu"
    "ildWelfare\022\025\n\021EGUILDWELFARE_MIN\020\000\022\032\n\026EGU"
    "ILDWELFARE_BUILDING\020\001\022\033\n\027EGUILDWELFARE_C"
    "HALLENGE\020\002\022\032\n\026EGUILDWELFARE_TREASURE\020\003\022\025"
    "\n\021EGUILDWELFARE_MAX\020\004*\223\001\n\016ETreasureState"
    "\022\026\n\022ETREASURESTATE_MIN\020\000\022\032\n\026ETREASURESTA"
    "TE_UNGETED\020\001\022\030\n\024ETREASURESTATE_GETED\020\002\022\033"
    "\n\027ETREASURESTATE_UNENABLE\020\003\022\026\n\022ETREASURE"
    "STATE_MAX\020\004*\337\006\n\nEGuildData\022\022\n\016EGUILDDATA"
    "_MIN\020\000\022\021\n\rEGUILDDATA_ID\020\001\022\023\n\017EGUILDDATA_"
    "NAME\020\002\022\024\n\020EGUILDDATA_LEVEL\020\003\022\030\n\024EGUILDDA"
    "TA_BOARDINFO\020\006\022\032\n\026EGUILDDATA_RECRUITINFO"
    "\020\007\022\027\n\023EGUILDDATA_PORTRAIT\020\010\022\036\n\032EGUILDDAT"
    "A_QUEST_RESETTIME\020\t\022\024\n\020EGUILDDATA_ASSET\020"
    "\n\022\032\n\026EGUILDDATA_DISMISSTIME\020\013\022\025\n\021EGUILDD"
    "ATA_MEMBER\020\022\022\024\n\020EGUILDDATA_APPLY\020\023\022\023\n\017EG"
    "UILDDATA_MISC\020\024\022\023\n\017EGUILDDATA_PACK\020\025\022\025\n\021"
    "EGUILDDATA_ZONEID\020\026\022\027\n\023EGUILDDATA_ZONETI"
    "ME\020\027\022\027\n\023EGUILDDATA_NEXTZONE\020\030\022\032\n\026EGUILDD"
    "ATA_DONATETIME1\020\031\022\032\n\026EGUILDDATA_DONATETI"
    "ME2\020\032\022\024\n\020EGUILDDATA_EVENT\020\033\022\032\n\026EGUILDDAT"
    "A_DONATETIME3\020\034\022\032\n\026EGUILDDATA_DONATETIME"
    "4\020\035\022\030\n\024EGUILDDATA_ASSET_DAY\020%\022\024\n\020EGUILDD"
    "ATA_PHOTO\020&\022\025\n\021EGUILDDATA_CITYID\020+\022\035\n\031EG"
    "UILDDATA_CITY_GIVEUP_CD\020,\022\034\n\030EGUILDDATA_"
    "OPEN_FUNCTION\020-\022!\n\035EGUILDDATA_TREASURE_G"
    "VG_COUNT\020.\022#\n\037EGUILDDATA_TREASURE_GUILD_"
    "COUNT\020/\022#\n\037EGUILDDATA_TREASURE_BCOIN_COU"
    "NT\0200\022\027\n\023EGUILDDATA_SUPERGVG\0201\022\032\n\026EGUILDD"
    "ATA_SUPERGVG_LV\0202\022\022\n\016EGUILDDATA_MAX\0203*9\n"
    "\nEGuildList\022\025\n\021EGUILDLIST_MEMBER\020\001\022\024\n\020EG"
    "UILDLIST_APPLY\020\002*\262\007\n\020EGuildMemberData\022\030\n"
    "\024EGUILDMEMBERDATA_MIN\020\000\022\036\n\032EGUILDMEMBERD"
    "ATA_BASELEVEL\020\001\022%\n!EGUILDMEMBERDATA_WEEK"
    "CONTRIBUTION\020\002\022!\n\035EGUILDMEMBERDATA_CONTR"
    "IBUTION\020\003\022&\n\"EGUILDMEMBERDATA_TOTALCONTR"
    "IBUTION\020\016\022\036\n\032EGUILDMEMBERDATA_ENTERTIME\020"
    "\004\022 \n\034EGUILDMEMBERDATA_OFFLINETIME\020\005\022\037\n\033E"
    "GUILDMEMBERDATA_PROFESSION\020\006\022\035\n\031EGUILDME"
    "MBERDATA_PORTRAIT\020\007\022\032\n\026EGUILDMEMBERDATA_"
    "FRAME\020\010\022\031\n\025EGUILDMEMBERDATA_HAIR\020\t\022\036\n\032EG"
    "UILDMEMBERDATA_HAIRCOLOR\020\n\022\031\n\025EGUILDMEMB"
    "ERDATA_BODY\020\013\022\030\n\024EGUILDMEMBERDATA_JOB\020\014\022"
    "\"\n\036EGUILDMEMBERDATA_LEVELUPEFFECT\020\017\022\036\n\032E"
    "GUILDMEMBERDATA_WEEKASSET\020\020\022\032\n\026EGUILDMEM"
    "BERDATA_ASSET\020\021\022\033\n\027EGUILDMEMBERDATA_ZONE"
    "ID\020\022\022\031\n\025EGUILDMEMBERDATA_NAME\020\023\022\037\n\033EGUIL"
    "DMEMBERDATA_ONLINETIME\020\024\022\031\n\025EGUILDMEMBER"
    "DATA_HEAD\020\025\022\031\n\025EGUILDMEMBERDATA_FACE\020\026\022\032"
    "\n\026EGUILDMEMBERDATA_MOUTH\020\027\022\030\n\024EGUILDMEMB"
    "ERDATA_EYE\020\030\022#\n\037EGUILDMEMBERDATA_BUILDIN"
    "GEFFECT\020\031\022\033\n\027EGUILDMEMBERDATA_GENDER\020\032\022\""
    "\n\036EGUILDMEMBERDATA_REALTIMEVOICE\020\033\022\036\n\032EG"
    "UILDMEMBERDATA_WEEKBCOIN\020\034\022\037\n\033EGUILDMEMB"
    "ERDATA_TOTALBCOIN\020\035\022\030\n\024EGUILDMEMBERDATA_"
    "MAX\020\036*m\n\014EGuildAction\022\024\n\020EGUILDACTION_MI"
    "N\020\000\022\026\n\022EGUILDACTION_AGREE\020\001\022\031\n\025EGUILDACT"
    "ION_DISAGREE\020\002\022\024\n\020EGUILDACTION_MAX\020\003*S\n\007"
    "EModify\022\017\n\013EMODIFY_MIN\020\000\022\020\n\014EMODIFY_AUTH"
    "\020\001\022\024\n\020EMODIFY_EDITAUTH\020\002\022\017\n\013EMODIFY_MAX\020"
    "\003*\270\001\n\020EGuildCityStatus\022\030\n\024EGUILDCITYSTAT"
    "US_MIN\020\000\022\031\n\025EGUILDCITYSTATUS_NONE\020\001\022\033\n\027E"
    "GUILDCITYSTATUS_OCCUPY\020\002\022\033\n\027EGUILDCITYST"
    "ATUS_GIVEUP\020\003\022\033\n\027EGUILDCITYSTATUS_FINISH"
    "\020\004\022\030\n\024EGUILDCITYSTATUS_MAX\020\005*n\n\013ECityAct"
    "ion\022\023\n\017ECITYACTION_MIN\020\000\022\026\n\022ECITYACTION_"
    "GIVEUP\020\001\022\035\n\031ECITYACTION_CANCEL_GIVEUP\020\002\022"
    "\023\n\017ECITYACTION_MAX\020\003*>\n\nEIconState\022\016\n\nEI"
    "CON_INIT\020\000\022\016\n\nEICON_PASS\020\001\022\020\n\014EICON_FORB"
    "ID\020\002*\313\001\n\020EArtifactOptType\022\030\n\024EARTIFACTOP"
    "TTYPE_MIN\020\000\022\037\n\033EARTIFACTOPTTYPE_DISTRIBU"
    "TE\020\001\022\035\n\031EARTIFACTOPTTYPE_RETRIEVE\020\002\022$\n E"
    "ARTIFACTOPTTYPE_RETRIEVE_CANCEL\020\003\022\035\n\031EAR"
    "TIFACTOPTTYPE_GIVEBACK\020\004\022\030\n\024EARTIFACTOPT"
    "TYPE_MAX\020\005*\320\001\n\022EGuildTreasureType\022\032\n\026EGU"
    "ILDTREASURETYPE_MIN\020\000\022\032\n\026EGUILDTREASURET"
    "YPE_GVG\020\001\022\"\n\036EGUILDTREASURETYPE_GUILD_BC"
    "OIN\020\002\022\"\n\036EGUILDTREASURETYPE_GUILD_ASSET\020"
    "\003\022\036\n\032EGUILDTREASURETYPE_PREVIEW\020\004\022\032\n\026EGU"
    "ILDTREASURETYPE_MAX\020\005*\233\002\n\017ETreasureActio"
    "n\022\027\n\023ETREASUREACTION_MIN\020\000\022 \n\034ETREASUREA"
    "CTION_GVG_FRAME_ON\020\001\022\"\n\036ETREASUREACTION_"
    "GUILD_FRAME_ON\020\002\022\035\n\031ETREASUREACTION_FRAM"
    "E_OFF\020\003\022\030\n\024ETREASUREACTION_LEFT\020\004\022\031\n\025ETR"
    "EASUREACTION_RIGHT\020\005\022\034\n\030ETREASUREACTION_"
    "OPEN_GVG\020\006\022\036\n\032ETREASUREACTION_OPEN_GUILD"
    "\020\007\022\027\n\023ETREASUREACTION_MAX\020\010*\214\001\n\016ETreasur"
    "ePoint\022\026\n\022ETREASUREPOINT_MIN\020\000\022\027\n\023ETREAS"
    "UREPOINT_LEFT\020\001\022\030\n\024ETREASUREPOINT_RIGHT\020"
    "\002\022\027\n\023ETREASUREPOINT_NONE\020\003\022\026\n\022ETREASUREP"
    "OINT_ALL\020\004*\323\001\n\013EGCityState\022\023\n\017EGCITYSTAT"
    "E_MIN\020\000\022\027\n\023EGCITYSTATE_CRIFIRE\020\001\022\027\n\023EGCI"
    "TYSTATE_ATTFIRE\020\002\022\027\n\023EGCITYSTATE_DEFFIRE"
    "\020\003\022\032\n\026EGCITYSTATE_NORMALFIRE\020\004\022\027\n\023EGCITY"
    "STATE_PERFECT\020\005\022\027\n\023EGCITYSTATE_NOOWNER\020\006"
    "\022\026\n\022EGCITYSTATE_OCCUPY\020\007", 27264);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GuildCmd.proto", &protobuf_RegisterTypes);
  GuildPrayCFG::default_instance_ = new GuildPrayCFG();
  GuildMemberPray::default_instance_ = new GuildMemberPray();
  BlobGuildPray::default_instance_ = new BlobGuildPray();
  BlobDonate::default_instance_ = new BlobDonate();
  UserGuildBuilding::default_instance_ = new UserGuildBuilding();
  BlobGuildBuilding::default_instance_ = new BlobGuildBuilding();
  GuildMember::default_instance_ = new GuildMember();
  BlobGuildMember::default_instance_ = new BlobGuildMember();
  GuildApply::default_instance_ = new GuildApply();
  BlobGuildApply::default_instance_ = new BlobGuildApply();
  GuildJob::default_instance_ = new GuildJob();
  GuildQuest::default_instance_ = new GuildQuest();
  GuildBuildMaterial::default_instance_ = new GuildBuildMaterial();
  GuildBuilding::default_instance_ = new GuildBuilding();
  GuildBuildingData::default_instance_ = new GuildBuildingData();
  GuildChallenge::default_instance_ = new GuildChallenge();
  GuildChallengeData::default_instance_ = new GuildChallengeData();
  GuildWelfareItem::default_instance_ = new GuildWelfareItem();
  GuildWelfare::default_instance_ = new GuildWelfare();
  GuildArtifactItem::default_instance_ = new GuildArtifactItem();
  GuildArtifactData::default_instance_ = new GuildArtifactData();
  GuildArtifact::default_instance_ = new GuildArtifact();
  GQuest::default_instance_ = new GQuest();
  BlobGQuest::default_instance_ = new BlobGQuest();
  BlobGGvg::default_instance_ = new BlobGGvg();
  GuildTreasure::default_instance_ = new GuildTreasure();
  TreasureItem::default_instance_ = new TreasureItem();
  TreasureResult::default_instance_ = new TreasureResult();
  BlobGuildTreasure::default_instance_ = new BlobGuildTreasure();
  BlobGuildMisc::default_instance_ = new BlobGuildMisc();
  BlobGuildPack::default_instance_ = new BlobGuildPack();
  BlobGuildEvent::default_instance_ = new BlobGuildEvent();
  GuildPhoto::default_instance_ = new GuildPhoto();
  PhotoFrame::default_instance_ = new PhotoFrame();
  BlobGuildPhoto::default_instance_ = new BlobGuildPhoto();
  GuildSummaryData::default_instance_ = new GuildSummaryData();
  GuildData::default_instance_ = new GuildData();
  QueryGuildListGuildCmd::default_instance_ = new QueryGuildListGuildCmd();
  CreateGuildGuildCmd::default_instance_ = new CreateGuildGuildCmd();
  EnterGuildGuildCmd::default_instance_ = new EnterGuildGuildCmd();
  GuildMemberUpdateGuildCmd::default_instance_ = new GuildMemberUpdateGuildCmd();
  GuildApplyUpdateGuildCmd::default_instance_ = new GuildApplyUpdateGuildCmd();
  GuildDataUpdate::default_instance_ = new GuildDataUpdate();
  GuildDataUpdateGuildCmd::default_instance_ = new GuildDataUpdateGuildCmd();
  GuildMemberDataUpdate::default_instance_ = new GuildMemberDataUpdate();
  GuildMemberDataUpdateGuildCmd::default_instance_ = new GuildMemberDataUpdateGuildCmd();
  ApplyGuildGuildCmd::default_instance_ = new ApplyGuildGuildCmd();
  ProcessApplyGuildCmd::default_instance_ = new ProcessApplyGuildCmd();
  InviteMemberGuildCmd::default_instance_ = new InviteMemberGuildCmd();
  ProcessInviteGuildCmd::default_instance_ = new ProcessInviteGuildCmd();
  SetGuildOptionGuildCmd::default_instance_ = new SetGuildOptionGuildCmd();
  KickMemberGuildCmd::default_instance_ = new KickMemberGuildCmd();
  ChangeJobGuildCmd::default_instance_ = new ChangeJobGuildCmd();
  ExitGuildGuildCmd::default_instance_ = new ExitGuildGuildCmd();
  ExchangeChairGuildCmd::default_instance_ = new ExchangeChairGuildCmd();
  DismissGuildCmd::default_instance_ = new DismissGuildCmd();
  LevelupGuildCmd::default_instance_ = new LevelupGuildCmd();
  DonateGuildCmd::default_instance_ = new DonateGuildCmd();
  DonateItem::default_instance_ = new DonateItem();
  DonateListGuildCmd::default_instance_ = new DonateListGuildCmd();
  UpdateDonateItemGuildCmd::default_instance_ = new UpdateDonateItemGuildCmd();
  DonateFrameGuildCmd::default_instance_ = new DonateFrameGuildCmd();
  EnterTerritoryGuildCmd::default_instance_ = new EnterTerritoryGuildCmd();
  PrayGuildCmd::default_instance_ = new PrayGuildCmd();
  GuildInfoNtf::default_instance_ = new GuildInfoNtf();
  GuildPrayNtfGuildCmd::default_instance_ = new GuildPrayNtfGuildCmd();
  LevelupEffectGuildCmd::default_instance_ = new LevelupEffectGuildCmd();
  QueryPackGuildCmd::default_instance_ = new QueryPackGuildCmd();
  PackUpdateGuildCmd::default_instance_ = new PackUpdateGuildCmd();
  ExchangeZoneGuildCmd::default_instance_ = new ExchangeZoneGuildCmd();
  ExchangeZoneNtfGuildCmd::default_instance_ = new ExchangeZoneNtfGuildCmd();
  ExchangeZoneAnswerGuildCmd::default_instance_ = new ExchangeZoneAnswerGuildCmd();
  GuildEvent::default_instance_ = new GuildEvent();
  QueryEventListGuildCmd::default_instance_ = new QueryEventListGuildCmd();
  NewEventGuildCmd::default_instance_ = new NewEventGuildCmd();
  GuildReward::default_instance_ = new GuildReward();
  ApplyRewardConGuildCmd::default_instance_ = new ApplyRewardConGuildCmd();
  FrameStatusGuildCmd::default_instance_ = new FrameStatusGuildCmd();
  ModifyAuthGuildCmd::default_instance_ = new ModifyAuthGuildCmd();
  JobUpdateGuildCmd::default_instance_ = new JobUpdateGuildCmd();
  RenameQueryGuildCmd::default_instance_ = new RenameQueryGuildCmd();
  GuildCityInfo::default_instance_ = new GuildCityInfo();
  QueryGuildCityInfoGuildCmd::default_instance_ = new QueryGuildCityInfoGuildCmd();
  CityActionGuildCmd::default_instance_ = new CityActionGuildCmd();
  IconInfo::default_instance_ = new IconInfo();
  GuildIconSyncGuildCmd::default_instance_ = new GuildIconSyncGuildCmd();
  GuildIconAddGuildCmd::default_instance_ = new GuildIconAddGuildCmd();
  GuildIconUploadGuildCmd::default_instance_ = new GuildIconUploadGuildCmd();
  OpenFunctionGuildCmd::default_instance_ = new OpenFunctionGuildCmd();
  BuildGuildCmd::default_instance_ = new BuildGuildCmd();
  SubmitMaterialGuildCmd::default_instance_ = new SubmitMaterialGuildCmd();
  BuildingNtfGuildCmd::default_instance_ = new BuildingNtfGuildCmd();
  BuildingSubmitCountGuildCmd::default_instance_ = new BuildingSubmitCountGuildCmd();
  ChallengeUpdateNtfGuildCmd::default_instance_ = new ChallengeUpdateNtfGuildCmd();
  WelfareNtfGuildCmd::default_instance_ = new WelfareNtfGuildCmd();
  GetWelfareGuildCmd::default_instance_ = new GetWelfareGuildCmd();
  BuildingLvupEffect::default_instance_ = new BuildingLvupEffect();
  BuildingLvupEffGuildCmd::default_instance_ = new BuildingLvupEffGuildCmd();
  ArtifactUpdateNtfGuildCmd::default_instance_ = new ArtifactUpdateNtfGuildCmd();
  ArtifactProduceGuildCmd::default_instance_ = new ArtifactProduceGuildCmd();
  ArtifactOptGuildCmd::default_instance_ = new ArtifactOptGuildCmd();
  QueryGQuestGuildCmd::default_instance_ = new QueryGQuestGuildCmd();
  TreasureActionGuildCmd::default_instance_ = new TreasureActionGuildCmd();
  BuildingSubmitRankItem::default_instance_ = new BuildingSubmitRankItem();
  QueryBuildingRankGuildCmd::default_instance_ = new QueryBuildingRankGuildCmd();
  QueryTreasureResultGuildCmd::default_instance_ = new QueryTreasureResultGuildCmd();
  CityShowInfo::default_instance_ = new CityShowInfo();
  QueryGCityShowInfoGuildCmd::default_instance_ = new QueryGCityShowInfoGuildCmd();
  GvgOpenFireGuildCmd::default_instance_ = new GvgOpenFireGuildCmd();
  EnterPunishTimeNtfGuildCmd::default_instance_ = new EnterPunishTimeNtfGuildCmd();
  OpenRealtimeVoiceGuildCmd::default_instance_ = new OpenRealtimeVoiceGuildCmd();
  GuildPrayCFG::default_instance_->InitAsDefaultInstance();
  GuildMemberPray::default_instance_->InitAsDefaultInstance();
  BlobGuildPray::default_instance_->InitAsDefaultInstance();
  BlobDonate::default_instance_->InitAsDefaultInstance();
  UserGuildBuilding::default_instance_->InitAsDefaultInstance();
  BlobGuildBuilding::default_instance_->InitAsDefaultInstance();
  GuildMember::default_instance_->InitAsDefaultInstance();
  BlobGuildMember::default_instance_->InitAsDefaultInstance();
  GuildApply::default_instance_->InitAsDefaultInstance();
  BlobGuildApply::default_instance_->InitAsDefaultInstance();
  GuildJob::default_instance_->InitAsDefaultInstance();
  GuildQuest::default_instance_->InitAsDefaultInstance();
  GuildBuildMaterial::default_instance_->InitAsDefaultInstance();
  GuildBuilding::default_instance_->InitAsDefaultInstance();
  GuildBuildingData::default_instance_->InitAsDefaultInstance();
  GuildChallenge::default_instance_->InitAsDefaultInstance();
  GuildChallengeData::default_instance_->InitAsDefaultInstance();
  GuildWelfareItem::default_instance_->InitAsDefaultInstance();
  GuildWelfare::default_instance_->InitAsDefaultInstance();
  GuildArtifactItem::default_instance_->InitAsDefaultInstance();
  GuildArtifactData::default_instance_->InitAsDefaultInstance();
  GuildArtifact::default_instance_->InitAsDefaultInstance();
  GQuest::default_instance_->InitAsDefaultInstance();
  BlobGQuest::default_instance_->InitAsDefaultInstance();
  BlobGGvg::default_instance_->InitAsDefaultInstance();
  GuildTreasure::default_instance_->InitAsDefaultInstance();
  TreasureItem::default_instance_->InitAsDefaultInstance();
  TreasureResult::default_instance_->InitAsDefaultInstance();
  BlobGuildTreasure::default_instance_->InitAsDefaultInstance();
  BlobGuildMisc::default_instance_->InitAsDefaultInstance();
  BlobGuildPack::default_instance_->InitAsDefaultInstance();
  BlobGuildEvent::default_instance_->InitAsDefaultInstance();
  GuildPhoto::default_instance_->InitAsDefaultInstance();
  PhotoFrame::default_instance_->InitAsDefaultInstance();
  BlobGuildPhoto::default_instance_->InitAsDefaultInstance();
  GuildSummaryData::default_instance_->InitAsDefaultInstance();
  GuildData::default_instance_->InitAsDefaultInstance();
  QueryGuildListGuildCmd::default_instance_->InitAsDefaultInstance();
  CreateGuildGuildCmd::default_instance_->InitAsDefaultInstance();
  EnterGuildGuildCmd::default_instance_->InitAsDefaultInstance();
  GuildMemberUpdateGuildCmd::default_instance_->InitAsDefaultInstance();
  GuildApplyUpdateGuildCmd::default_instance_->InitAsDefaultInstance();
  GuildDataUpdate::default_instance_->InitAsDefaultInstance();
  GuildDataUpdateGuildCmd::default_instance_->InitAsDefaultInstance();
  GuildMemberDataUpdate::default_instance_->InitAsDefaultInstance();
  GuildMemberDataUpdateGuildCmd::default_instance_->InitAsDefaultInstance();
  ApplyGuildGuildCmd::default_instance_->InitAsDefaultInstance();
  ProcessApplyGuildCmd::default_instance_->InitAsDefaultInstance();
  InviteMemberGuildCmd::default_instance_->InitAsDefaultInstance();
  ProcessInviteGuildCmd::default_instance_->InitAsDefaultInstance();
  SetGuildOptionGuildCmd::default_instance_->InitAsDefaultInstance();
  KickMemberGuildCmd::default_instance_->InitAsDefaultInstance();
  ChangeJobGuildCmd::default_instance_->InitAsDefaultInstance();
  ExitGuildGuildCmd::default_instance_->InitAsDefaultInstance();
  ExchangeChairGuildCmd::default_instance_->InitAsDefaultInstance();
  DismissGuildCmd::default_instance_->InitAsDefaultInstance();
  LevelupGuildCmd::default_instance_->InitAsDefaultInstance();
  DonateGuildCmd::default_instance_->InitAsDefaultInstance();
  DonateItem::default_instance_->InitAsDefaultInstance();
  DonateListGuildCmd::default_instance_->InitAsDefaultInstance();
  UpdateDonateItemGuildCmd::default_instance_->InitAsDefaultInstance();
  DonateFrameGuildCmd::default_instance_->InitAsDefaultInstance();
  EnterTerritoryGuildCmd::default_instance_->InitAsDefaultInstance();
  PrayGuildCmd::default_instance_->InitAsDefaultInstance();
  GuildInfoNtf::default_instance_->InitAsDefaultInstance();
  GuildPrayNtfGuildCmd::default_instance_->InitAsDefaultInstance();
  LevelupEffectGuildCmd::default_instance_->InitAsDefaultInstance();
  QueryPackGuildCmd::default_instance_->InitAsDefaultInstance();
  PackUpdateGuildCmd::default_instance_->InitAsDefaultInstance();
  ExchangeZoneGuildCmd::default_instance_->InitAsDefaultInstance();
  ExchangeZoneNtfGuildCmd::default_instance_->InitAsDefaultInstance();
  ExchangeZoneAnswerGuildCmd::default_instance_->InitAsDefaultInstance();
  GuildEvent::default_instance_->InitAsDefaultInstance();
  QueryEventListGuildCmd::default_instance_->InitAsDefaultInstance();
  NewEventGuildCmd::default_instance_->InitAsDefaultInstance();
  GuildReward::default_instance_->InitAsDefaultInstance();
  ApplyRewardConGuildCmd::default_instance_->InitAsDefaultInstance();
  FrameStatusGuildCmd::default_instance_->InitAsDefaultInstance();
  ModifyAuthGuildCmd::default_instance_->InitAsDefaultInstance();
  JobUpdateGuildCmd::default_instance_->InitAsDefaultInstance();
  RenameQueryGuildCmd::default_instance_->InitAsDefaultInstance();
  GuildCityInfo::default_instance_->InitAsDefaultInstance();
  QueryGuildCityInfoGuildCmd::default_instance_->InitAsDefaultInstance();
  CityActionGuildCmd::default_instance_->InitAsDefaultInstance();
  IconInfo::default_instance_->InitAsDefaultInstance();
  GuildIconSyncGuildCmd::default_instance_->InitAsDefaultInstance();
  GuildIconAddGuildCmd::default_instance_->InitAsDefaultInstance();
  GuildIconUploadGuildCmd::default_instance_->InitAsDefaultInstance();
  OpenFunctionGuildCmd::default_instance_->InitAsDefaultInstance();
  BuildGuildCmd::default_instance_->InitAsDefaultInstance();
  SubmitMaterialGuildCmd::default_instance_->InitAsDefaultInstance();
  BuildingNtfGuildCmd::default_instance_->InitAsDefaultInstance();
  BuildingSubmitCountGuildCmd::default_instance_->InitAsDefaultInstance();
  ChallengeUpdateNtfGuildCmd::default_instance_->InitAsDefaultInstance();
  WelfareNtfGuildCmd::default_instance_->InitAsDefaultInstance();
  GetWelfareGuildCmd::default_instance_->InitAsDefaultInstance();
  BuildingLvupEffect::default_instance_->InitAsDefaultInstance();
  BuildingLvupEffGuildCmd::default_instance_->InitAsDefaultInstance();
  ArtifactUpdateNtfGuildCmd::default_instance_->InitAsDefaultInstance();
  ArtifactProduceGuildCmd::default_instance_->InitAsDefaultInstance();
  ArtifactOptGuildCmd::default_instance_->InitAsDefaultInstance();
  QueryGQuestGuildCmd::default_instance_->InitAsDefaultInstance();
  TreasureActionGuildCmd::default_instance_->InitAsDefaultInstance();
  BuildingSubmitRankItem::default_instance_->InitAsDefaultInstance();
  QueryBuildingRankGuildCmd::default_instance_->InitAsDefaultInstance();
  QueryTreasureResultGuildCmd::default_instance_->InitAsDefaultInstance();
  CityShowInfo::default_instance_->InitAsDefaultInstance();
  QueryGCityShowInfoGuildCmd::default_instance_->InitAsDefaultInstance();
  GvgOpenFireGuildCmd::default_instance_->InitAsDefaultInstance();
  EnterPunishTimeNtfGuildCmd::default_instance_->InitAsDefaultInstance();
  OpenRealtimeVoiceGuildCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GuildCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GuildCmd_2eproto {
  StaticDescriptorInitializer_GuildCmd_2eproto() {
    protobuf_AddDesc_GuildCmd_2eproto();
  }
} static_descriptor_initializer_GuildCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* GuildParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildParam_descriptor_;
}
bool GuildParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildGlobal_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildGlobal_descriptor_;
}
bool EGuildGlobal_IsValid(int value) {
  switch(value) {
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildJob_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildJob_descriptor_;
}
bool EGuildJob_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPrayType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPrayType_descriptor_;
}
bool EPrayType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildFunction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildFunction_descriptor_;
}
bool EGuildFunction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAuth_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAuth_descriptor_;
}
bool EAuth_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildBuilding_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildBuilding_descriptor_;
}
bool EGuildBuilding_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildWelfare_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildWelfare_descriptor_;
}
bool EGuildWelfare_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETreasureState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETreasureState_descriptor_;
}
bool ETreasureState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildData_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildData_descriptor_;
}
bool EGuildData_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 37:
    case 38:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildList_descriptor_;
}
bool EGuildList_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildMemberData_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildMemberData_descriptor_;
}
bool EGuildMemberData_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildAction_descriptor_;
}
bool EGuildAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EModify_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EModify_descriptor_;
}
bool EModify_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildCityStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildCityStatus_descriptor_;
}
bool EGuildCityStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECityAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECityAction_descriptor_;
}
bool ECityAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EIconState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EIconState_descriptor_;
}
bool EIconState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EArtifactOptType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EArtifactOptType_descriptor_;
}
bool EArtifactOptType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildTreasureType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildTreasureType_descriptor_;
}
bool EGuildTreasureType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETreasureAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETreasureAction_descriptor_;
}
bool ETreasureAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETreasurePoint_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETreasurePoint_descriptor_;
}
bool ETreasurePoint_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGCityState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCityState_descriptor_;
}
bool EGCityState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GuildPrayCFG::kPrayidFieldNumber;
const int GuildPrayCFG::kPraylvFieldNumber;
const int GuildPrayCFG::kTypeFieldNumber;
const int GuildPrayCFG::kAttrsFieldNumber;
const int GuildPrayCFG::kCostsFieldNumber;
#endif  // !_MSC_VER

GuildPrayCFG::GuildPrayCFG()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildPrayCFG)
}

void GuildPrayCFG::InitAsDefaultInstance() {
}

GuildPrayCFG::GuildPrayCFG(const GuildPrayCFG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildPrayCFG)
}

void GuildPrayCFG::SharedCtor() {
  _cached_size_ = 0;
  prayid_ = 0u;
  praylv_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildPrayCFG::~GuildPrayCFG() {
  // @@protoc_insertion_point(destructor:Cmd.GuildPrayCFG)
  SharedDtor();
}

void GuildPrayCFG::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildPrayCFG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildPrayCFG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildPrayCFG_descriptor_;
}

const GuildPrayCFG& GuildPrayCFG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildPrayCFG* GuildPrayCFG::default_instance_ = NULL;

GuildPrayCFG* GuildPrayCFG::New() const {
  return new GuildPrayCFG;
}

void GuildPrayCFG::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildPrayCFG*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(prayid_, praylv_);
    type_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attrs_.Clear();
  costs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildPrayCFG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildPrayCFG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prayid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prayid_)));
          set_has_prayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_praylv;
        break;
      }

      // optional uint32 praylv = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_praylv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &praylv_)));
          set_has_praylv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EPrayType type = 3 [default = EPRAYTYPE_GODDESS];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPrayType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPrayType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttr attrs = 4;
      case 4: {
        if (tag == 34) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attrs;
        if (input->ExpectTag(42)) goto parse_costs;
        break;
      }

      // repeated .Cmd.ItemInfo costs = 5;
      case 5: {
        if (tag == 42) {
         parse_costs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_costs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_costs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildPrayCFG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildPrayCFG)
  return false;
#undef DO_
}

void GuildPrayCFG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildPrayCFG)
  // optional uint32 prayid = 1 [default = 0];
  if (has_prayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prayid(), output);
  }

  // optional uint32 praylv = 2 [default = 0];
  if (has_praylv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->praylv(), output);
  }

  // optional .Cmd.EPrayType type = 3 [default = EPRAYTYPE_GODDESS];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .Cmd.UserAttr attrs = 4;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attrs(i), output);
  }

  // repeated .Cmd.ItemInfo costs = 5;
  for (int i = 0; i < this->costs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->costs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildPrayCFG)
}

::google::protobuf::uint8* GuildPrayCFG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildPrayCFG)
  // optional uint32 prayid = 1 [default = 0];
  if (has_prayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prayid(), target);
  }

  // optional uint32 praylv = 2 [default = 0];
  if (has_praylv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->praylv(), target);
  }

  // optional .Cmd.EPrayType type = 3 [default = EPRAYTYPE_GODDESS];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .Cmd.UserAttr attrs = 4;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attrs(i), target);
  }

  // repeated .Cmd.ItemInfo costs = 5;
  for (int i = 0; i < this->costs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->costs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildPrayCFG)
  return target;
}

int GuildPrayCFG::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 prayid = 1 [default = 0];
    if (has_prayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prayid());
    }

    // optional uint32 praylv = 2 [default = 0];
    if (has_praylv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->praylv());
    }

    // optional .Cmd.EPrayType type = 3 [default = EPRAYTYPE_GODDESS];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.UserAttr attrs = 4;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  // repeated .Cmd.ItemInfo costs = 5;
  total_size += 1 * this->costs_size();
  for (int i = 0; i < this->costs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->costs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildPrayCFG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildPrayCFG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildPrayCFG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildPrayCFG::MergeFrom(const GuildPrayCFG& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  costs_.MergeFrom(from.costs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prayid()) {
      set_prayid(from.prayid());
    }
    if (from.has_praylv()) {
      set_praylv(from.praylv());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildPrayCFG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPrayCFG::CopyFrom(const GuildPrayCFG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPrayCFG::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  return true;
}

void GuildPrayCFG::Swap(GuildPrayCFG* other) {
  if (other != this) {
    std::swap(prayid_, other->prayid_);
    std::swap(praylv_, other->praylv_);
    std::swap(type_, other->type_);
    attrs_.Swap(&other->attrs_);
    costs_.Swap(&other->costs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildPrayCFG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildPrayCFG_descriptor_;
  metadata.reflection = GuildPrayCFG_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMemberPray::kPrayFieldNumber;
const int GuildMemberPray::kLvFieldNumber;
const int GuildMemberPray::kCurFieldNumber;
const int GuildMemberPray::kNextFieldNumber;
#endif  // !_MSC_VER

GuildMemberPray::GuildMemberPray()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildMemberPray)
}

void GuildMemberPray::InitAsDefaultInstance() {
  cur_ = const_cast< ::Cmd::GuildPrayCFG*>(&::Cmd::GuildPrayCFG::default_instance());
  next_ = const_cast< ::Cmd::GuildPrayCFG*>(&::Cmd::GuildPrayCFG::default_instance());
}

GuildMemberPray::GuildMemberPray(const GuildMemberPray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildMemberPray)
}

void GuildMemberPray::SharedCtor() {
  _cached_size_ = 0;
  pray_ = 0u;
  lv_ = 0u;
  cur_ = NULL;
  next_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMemberPray::~GuildMemberPray() {
  // @@protoc_insertion_point(destructor:Cmd.GuildMemberPray)
  SharedDtor();
}

void GuildMemberPray::SharedDtor() {
  if (this != default_instance_) {
    delete cur_;
    delete next_;
  }
}

void GuildMemberPray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMemberPray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberPray_descriptor_;
}

const GuildMemberPray& GuildMemberPray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildMemberPray* GuildMemberPray::default_instance_ = NULL;

GuildMemberPray* GuildMemberPray::New() const {
  return new GuildMemberPray;
}

void GuildMemberPray::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildMemberPray*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(pray_, lv_);
    if (has_cur()) {
      if (cur_ != NULL) cur_->::Cmd::GuildPrayCFG::Clear();
    }
    if (has_next()) {
      if (next_ != NULL) next_->::Cmd::GuildPrayCFG::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMemberPray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildMemberPray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pray = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pray_)));
          set_has_pray();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cur;
        break;
      }

      // optional .Cmd.GuildPrayCFG cur = 3;
      case 3: {
        if (tag == 26) {
         parse_cur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_next;
        break;
      }

      // optional .Cmd.GuildPrayCFG next = 4;
      case 4: {
        if (tag == 34) {
         parse_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildMemberPray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildMemberPray)
  return false;
#undef DO_
}

void GuildMemberPray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildMemberPray)
  // optional uint32 pray = 1 [default = 0];
  if (has_pray()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pray(), output);
  }

  // optional uint32 lv = 2 [default = 0];
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lv(), output);
  }

  // optional .Cmd.GuildPrayCFG cur = 3;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cur(), output);
  }

  // optional .Cmd.GuildPrayCFG next = 4;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->next(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildMemberPray)
}

::google::protobuf::uint8* GuildMemberPray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildMemberPray)
  // optional uint32 pray = 1 [default = 0];
  if (has_pray()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pray(), target);
  }

  // optional uint32 lv = 2 [default = 0];
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lv(), target);
  }

  // optional .Cmd.GuildPrayCFG cur = 3;
  if (has_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cur(), target);
  }

  // optional .Cmd.GuildPrayCFG next = 4;
  if (has_next()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->next(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildMemberPray)
  return target;
}

int GuildMemberPray::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pray = 1 [default = 0];
    if (has_pray()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pray());
    }

    // optional uint32 lv = 2 [default = 0];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional .Cmd.GuildPrayCFG cur = 3;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cur());
    }

    // optional .Cmd.GuildPrayCFG next = 4;
    if (has_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMemberPray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMemberPray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMemberPray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMemberPray::MergeFrom(const GuildMemberPray& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pray()) {
      set_pray(from.pray());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_cur()) {
      mutable_cur()->::Cmd::GuildPrayCFG::MergeFrom(from.cur());
    }
    if (from.has_next()) {
      mutable_next()->::Cmd::GuildPrayCFG::MergeFrom(from.next());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMemberPray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMemberPray::CopyFrom(const GuildMemberPray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberPray::IsInitialized() const {

  if (has_cur()) {
    if (!this->cur().IsInitialized()) return false;
  }
  if (has_next()) {
    if (!this->next().IsInitialized()) return false;
  }
  return true;
}

void GuildMemberPray::Swap(GuildMemberPray* other) {
  if (other != this) {
    std::swap(pray_, other->pray_);
    std::swap(lv_, other->lv_);
    std::swap(cur_, other->cur_);
    std::swap(next_, other->next_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMemberPray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMemberPray_descriptor_;
  metadata.reflection = GuildMemberPray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGuildPray::kPraysFieldNumber;
#endif  // !_MSC_VER

BlobGuildPray::BlobGuildPray()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGuildPray)
}

void BlobGuildPray::InitAsDefaultInstance() {
}

BlobGuildPray::BlobGuildPray(const BlobGuildPray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGuildPray)
}

void BlobGuildPray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGuildPray::~BlobGuildPray() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGuildPray)
  SharedDtor();
}

void BlobGuildPray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGuildPray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGuildPray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGuildPray_descriptor_;
}

const BlobGuildPray& BlobGuildPray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BlobGuildPray* BlobGuildPray::default_instance_ = NULL;

BlobGuildPray* BlobGuildPray::New() const {
  return new BlobGuildPray;
}

void BlobGuildPray::Clear() {
  prays_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGuildPray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGuildPray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.GuildMemberPray prays = 1;
      case 1: {
        if (tag == 10) {
         parse_prays:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prays()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_prays;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGuildPray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGuildPray)
  return false;
#undef DO_
}

void BlobGuildPray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGuildPray)
  // repeated .Cmd.GuildMemberPray prays = 1;
  for (int i = 0; i < this->prays_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prays(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGuildPray)
}

::google::protobuf::uint8* BlobGuildPray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGuildPray)
  // repeated .Cmd.GuildMemberPray prays = 1;
  for (int i = 0; i < this->prays_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prays(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGuildPray)
  return target;
}

int BlobGuildPray::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.GuildMemberPray prays = 1;
  total_size += 1 * this->prays_size();
  for (int i = 0; i < this->prays_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prays(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGuildPray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGuildPray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGuildPray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGuildPray::MergeFrom(const BlobGuildPray& from) {
  GOOGLE_CHECK_NE(&from, this);
  prays_.MergeFrom(from.prays_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGuildPray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGuildPray::CopyFrom(const BlobGuildPray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGuildPray::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->prays())) return false;
  return true;
}

void BlobGuildPray::Swap(BlobGuildPray* other) {
  if (other != this) {
    prays_.Swap(&other->prays_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGuildPray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGuildPray_descriptor_;
  metadata.reflection = BlobGuildPray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobDonate::kItemsFieldNumber;
const int BlobDonate::kStepsFieldNumber;
const int BlobDonate::kDonatetime1FieldNumber;
const int BlobDonate::kDonatetime2FieldNumber;
const int BlobDonate::kDonatetime3FieldNumber;
const int BlobDonate::kDonatetime4FieldNumber;
#endif  // !_MSC_VER

BlobDonate::BlobDonate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobDonate)
}

void BlobDonate::InitAsDefaultInstance() {
}

BlobDonate::BlobDonate(const BlobDonate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobDonate)
}

void BlobDonate::SharedCtor() {
  _cached_size_ = 0;
  donatetime1_ = 0u;
  donatetime2_ = 0u;
  donatetime3_ = 0u;
  donatetime4_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobDonate::~BlobDonate() {
  // @@protoc_insertion_point(destructor:Cmd.BlobDonate)
  SharedDtor();
}

void BlobDonate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobDonate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobDonate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobDonate_descriptor_;
}

const BlobDonate& BlobDonate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BlobDonate* BlobDonate::default_instance_ = NULL;

BlobDonate* BlobDonate::New() const {
  return new BlobDonate;
}

void BlobDonate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobDonate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(donatetime1_, donatetime4_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  steps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobDonate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobDonate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.DonateItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_steps;
        break;
      }

      // repeated uint32 steps = 2;
      case 2: {
        if (tag == 16) {
         parse_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_steps())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_steps())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_steps;
        if (input->ExpectTag(24)) goto parse_donatetime1;
        break;
      }

      // optional uint32 donatetime1 = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_donatetime1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatetime1_)));
          set_has_donatetime1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_donatetime2;
        break;
      }

      // optional uint32 donatetime2 = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_donatetime2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatetime2_)));
          set_has_donatetime2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_donatetime3;
        break;
      }

      // optional uint32 donatetime3 = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_donatetime3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatetime3_)));
          set_has_donatetime3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_donatetime4;
        break;
      }

      // optional uint32 donatetime4 = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_donatetime4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatetime4_)));
          set_has_donatetime4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobDonate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobDonate)
  return false;
#undef DO_
}

void BlobDonate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobDonate)
  // repeated .Cmd.DonateItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // repeated uint32 steps = 2;
  for (int i = 0; i < this->steps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->steps(i), output);
  }

  // optional uint32 donatetime1 = 3 [default = 0];
  if (has_donatetime1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->donatetime1(), output);
  }

  // optional uint32 donatetime2 = 4 [default = 0];
  if (has_donatetime2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->donatetime2(), output);
  }

  // optional uint32 donatetime3 = 5 [default = 0];
  if (has_donatetime3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->donatetime3(), output);
  }

  // optional uint32 donatetime4 = 6 [default = 0];
  if (has_donatetime4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->donatetime4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobDonate)
}

::google::protobuf::uint8* BlobDonate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobDonate)
  // repeated .Cmd.DonateItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // repeated uint32 steps = 2;
  for (int i = 0; i < this->steps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->steps(i), target);
  }

  // optional uint32 donatetime1 = 3 [default = 0];
  if (has_donatetime1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->donatetime1(), target);
  }

  // optional uint32 donatetime2 = 4 [default = 0];
  if (has_donatetime2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->donatetime2(), target);
  }

  // optional uint32 donatetime3 = 5 [default = 0];
  if (has_donatetime3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->donatetime3(), target);
  }

  // optional uint32 donatetime4 = 6 [default = 0];
  if (has_donatetime4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->donatetime4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobDonate)
  return target;
}

int BlobDonate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 donatetime1 = 3 [default = 0];
    if (has_donatetime1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donatetime1());
    }

    // optional uint32 donatetime2 = 4 [default = 0];
    if (has_donatetime2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donatetime2());
    }

    // optional uint32 donatetime3 = 5 [default = 0];
    if (has_donatetime3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donatetime3());
    }

    // optional uint32 donatetime4 = 6 [default = 0];
    if (has_donatetime4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donatetime4());
    }

  }
  // repeated .Cmd.DonateItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated uint32 steps = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->steps_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->steps(i));
    }
    total_size += 1 * this->steps_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobDonate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobDonate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobDonate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobDonate::MergeFrom(const BlobDonate& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  steps_.MergeFrom(from.steps_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_donatetime1()) {
      set_donatetime1(from.donatetime1());
    }
    if (from.has_donatetime2()) {
      set_donatetime2(from.donatetime2());
    }
    if (from.has_donatetime3()) {
      set_donatetime3(from.donatetime3());
    }
    if (from.has_donatetime4()) {
      set_donatetime4(from.donatetime4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobDonate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobDonate::CopyFrom(const BlobDonate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobDonate::IsInitialized() const {

  return true;
}

void BlobDonate::Swap(BlobDonate* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    steps_.Swap(&other->steps_);
    std::swap(donatetime1_, other->donatetime1_);
    std::swap(donatetime2_, other->donatetime2_);
    std::swap(donatetime3_, other->donatetime3_);
    std::swap(donatetime4_, other->donatetime4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobDonate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobDonate_descriptor_;
  metadata.reflection = BlobDonate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserGuildBuilding::kTypeFieldNumber;
const int UserGuildBuilding::kSubmitcountFieldNumber;
const int UserGuildBuilding::kNextwelfaretimeFieldNumber;
const int UserGuildBuilding::kLevelupeffectFieldNumber;
const int UserGuildBuilding::kSubmitcounttotalFieldNumber;
const int UserGuildBuilding::kSubmittimeFieldNumber;
#endif  // !_MSC_VER

UserGuildBuilding::UserGuildBuilding()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserGuildBuilding)
}

void UserGuildBuilding::InitAsDefaultInstance() {
}

UserGuildBuilding::UserGuildBuilding(const UserGuildBuilding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserGuildBuilding)
}

void UserGuildBuilding::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  submitcount_ = 0u;
  nextwelfaretime_ = 0u;
  levelupeffect_ = false;
  submitcounttotal_ = 0u;
  submittime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserGuildBuilding::~UserGuildBuilding() {
  // @@protoc_insertion_point(destructor:Cmd.UserGuildBuilding)
  SharedDtor();
}

void UserGuildBuilding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserGuildBuilding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGuildBuilding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserGuildBuilding_descriptor_;
}

const UserGuildBuilding& UserGuildBuilding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

UserGuildBuilding* UserGuildBuilding::default_instance_ = NULL;

UserGuildBuilding* UserGuildBuilding::New() const {
  return new UserGuildBuilding;
}

void UserGuildBuilding::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserGuildBuilding*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(type_, submittime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserGuildBuilding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserGuildBuilding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EGuildBuilding type = 1 [default = EGUILDBUILDING_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildBuilding_IsValid(value)) {
            set_type(static_cast< ::Cmd::EGuildBuilding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_submitcount;
        break;
      }

      // optional uint32 submitcount = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_submitcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submitcount_)));
          set_has_submitcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nextwelfaretime;
        break;
      }

      // optional uint32 nextwelfaretime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_nextwelfaretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextwelfaretime_)));
          set_has_nextwelfaretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_levelupeffect;
        break;
      }

      // optional bool levelupeffect = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_levelupeffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &levelupeffect_)));
          set_has_levelupeffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_submitcounttotal;
        break;
      }

      // optional uint32 submitcounttotal = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_submitcounttotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submitcounttotal_)));
          set_has_submitcounttotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_submittime;
        break;
      }

      // optional uint32 submittime = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_submittime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submittime_)));
          set_has_submittime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserGuildBuilding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserGuildBuilding)
  return false;
#undef DO_
}

void UserGuildBuilding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserGuildBuilding)
  // optional .Cmd.EGuildBuilding type = 1 [default = EGUILDBUILDING_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 submitcount = 2 [default = 0];
  if (has_submitcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->submitcount(), output);
  }

  // optional uint32 nextwelfaretime = 3 [default = 0];
  if (has_nextwelfaretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nextwelfaretime(), output);
  }

  // optional bool levelupeffect = 4 [default = false];
  if (has_levelupeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->levelupeffect(), output);
  }

  // optional uint32 submitcounttotal = 5 [default = 0];
  if (has_submitcounttotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->submitcounttotal(), output);
  }

  // optional uint32 submittime = 6 [default = 0];
  if (has_submittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->submittime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserGuildBuilding)
}

::google::protobuf::uint8* UserGuildBuilding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserGuildBuilding)
  // optional .Cmd.EGuildBuilding type = 1 [default = EGUILDBUILDING_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 submitcount = 2 [default = 0];
  if (has_submitcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->submitcount(), target);
  }

  // optional uint32 nextwelfaretime = 3 [default = 0];
  if (has_nextwelfaretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nextwelfaretime(), target);
  }

  // optional bool levelupeffect = 4 [default = false];
  if (has_levelupeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->levelupeffect(), target);
  }

  // optional uint32 submitcounttotal = 5 [default = 0];
  if (has_submitcounttotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->submitcounttotal(), target);
  }

  // optional uint32 submittime = 6 [default = 0];
  if (has_submittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->submittime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserGuildBuilding)
  return target;
}

int UserGuildBuilding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EGuildBuilding type = 1 [default = EGUILDBUILDING_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 submitcount = 2 [default = 0];
    if (has_submitcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->submitcount());
    }

    // optional uint32 nextwelfaretime = 3 [default = 0];
    if (has_nextwelfaretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextwelfaretime());
    }

    // optional bool levelupeffect = 4 [default = false];
    if (has_levelupeffect()) {
      total_size += 1 + 1;
    }

    // optional uint32 submitcounttotal = 5 [default = 0];
    if (has_submitcounttotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->submitcounttotal());
    }

    // optional uint32 submittime = 6 [default = 0];
    if (has_submittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->submittime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGuildBuilding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserGuildBuilding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserGuildBuilding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserGuildBuilding::MergeFrom(const UserGuildBuilding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_submitcount()) {
      set_submitcount(from.submitcount());
    }
    if (from.has_nextwelfaretime()) {
      set_nextwelfaretime(from.nextwelfaretime());
    }
    if (from.has_levelupeffect()) {
      set_levelupeffect(from.levelupeffect());
    }
    if (from.has_submitcounttotal()) {
      set_submitcounttotal(from.submitcounttotal());
    }
    if (from.has_submittime()) {
      set_submittime(from.submittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserGuildBuilding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGuildBuilding::CopyFrom(const UserGuildBuilding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGuildBuilding::IsInitialized() const {

  return true;
}

void UserGuildBuilding::Swap(UserGuildBuilding* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(submitcount_, other->submitcount_);
    std::swap(nextwelfaretime_, other->nextwelfaretime_);
    std::swap(levelupeffect_, other->levelupeffect_);
    std::swap(submitcounttotal_, other->submitcounttotal_);
    std::swap(submittime_, other->submittime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserGuildBuilding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserGuildBuilding_descriptor_;
  metadata.reflection = UserGuildBuilding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGuildBuilding::kBuildingsFieldNumber;
#endif  // !_MSC_VER

BlobGuildBuilding::BlobGuildBuilding()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGuildBuilding)
}

void BlobGuildBuilding::InitAsDefaultInstance() {
}

BlobGuildBuilding::BlobGuildBuilding(const BlobGuildBuilding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGuildBuilding)
}

void BlobGuildBuilding::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGuildBuilding::~BlobGuildBuilding() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGuildBuilding)
  SharedDtor();
}

void BlobGuildBuilding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGuildBuilding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGuildBuilding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGuildBuilding_descriptor_;
}

const BlobGuildBuilding& BlobGuildBuilding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BlobGuildBuilding* BlobGuildBuilding::default_instance_ = NULL;

BlobGuildBuilding* BlobGuildBuilding::New() const {
  return new BlobGuildBuilding;
}

void BlobGuildBuilding::Clear() {
  buildings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGuildBuilding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGuildBuilding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.UserGuildBuilding buildings = 1;
      case 1: {
        if (tag == 10) {
         parse_buildings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_buildings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGuildBuilding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGuildBuilding)
  return false;
#undef DO_
}

void BlobGuildBuilding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGuildBuilding)
  // repeated .Cmd.UserGuildBuilding buildings = 1;
  for (int i = 0; i < this->buildings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buildings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGuildBuilding)
}

::google::protobuf::uint8* BlobGuildBuilding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGuildBuilding)
  // repeated .Cmd.UserGuildBuilding buildings = 1;
  for (int i = 0; i < this->buildings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buildings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGuildBuilding)
  return target;
}

int BlobGuildBuilding::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.UserGuildBuilding buildings = 1;
  total_size += 1 * this->buildings_size();
  for (int i = 0; i < this->buildings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGuildBuilding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGuildBuilding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGuildBuilding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGuildBuilding::MergeFrom(const BlobGuildBuilding& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildings_.MergeFrom(from.buildings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGuildBuilding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGuildBuilding::CopyFrom(const BlobGuildBuilding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGuildBuilding::IsInitialized() const {

  return true;
}

void BlobGuildBuilding::Swap(BlobGuildBuilding* other) {
  if (other != this) {
    buildings_.Swap(&other->buildings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGuildBuilding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGuildBuilding_descriptor_;
  metadata.reflection = BlobGuildBuilding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMember::kCharidFieldNumber;
const int GuildMember::kBaselevelFieldNumber;
const int GuildMember::kPortraitFieldNumber;
const int GuildMember::kFrameFieldNumber;
const int GuildMember::kWeekcontributionFieldNumber;
const int GuildMember::kContributionFieldNumber;
const int GuildMember::kTotalcontributionFieldNumber;
const int GuildMember::kEntertimeFieldNumber;
const int GuildMember::kOfflinetimeFieldNumber;
const int GuildMember::kGiftpointFieldNumber;
const int GuildMember::kHairFieldNumber;
const int GuildMember::kHaircolorFieldNumber;
const int GuildMember::kBodyFieldNumber;
const int GuildMember::kWeekassetFieldNumber;
const int GuildMember::kAssetFieldNumber;
const int GuildMember::kZoneidFieldNumber;
const int GuildMember::kHeadFieldNumber;
const int GuildMember::kFaceFieldNumber;
const int GuildMember::kMouthFieldNumber;
const int GuildMember::kEyeFieldNumber;
const int GuildMember::kGenderFieldNumber;
const int GuildMember::kProfessionFieldNumber;
const int GuildMember::kJobFieldNumber;
const int GuildMember::kNameFieldNumber;
const int GuildMember::kVarFieldNumber;
const int GuildMember::kPrayFieldNumber;
const int GuildMember::kDonateFieldNumber;
const int GuildMember::kLevelupeffectFieldNumber;
const int GuildMember::kExchangezoneFieldNumber;
const int GuildMember::kAccidFieldNumber;
const int GuildMember::kBuildingFieldNumber;
const int GuildMember::kChallengeFieldNumber;
const int GuildMember::kLastexittimeFieldNumber;
const int GuildMember::kRedtipFieldNumber;
const int GuildMember::kBuildingeffectFieldNumber;
const int GuildMember::kRealtimevoiceFieldNumber;
const int GuildMember::kWeekbcoinFieldNumber;
const int GuildMember::kTotalcoinFieldNumber;
#endif  // !_MSC_VER

GuildMember::GuildMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildMember)
}

void GuildMember::InitAsDefaultInstance() {
  pray_ = const_cast< ::Cmd::BlobGuildPray*>(&::Cmd::BlobGuildPray::default_instance());
  donate_ = const_cast< ::Cmd::BlobDonate*>(&::Cmd::BlobDonate::default_instance());
  building_ = const_cast< ::Cmd::BlobGuildBuilding*>(&::Cmd::BlobGuildBuilding::default_instance());
}

GuildMember::GuildMember(const GuildMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildMember)
}

void GuildMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  baselevel_ = 0u;
  portrait_ = 0u;
  frame_ = 0u;
  weekcontribution_ = 0u;
  contribution_ = 0u;
  totalcontribution_ = 0u;
  entertime_ = 0u;
  offlinetime_ = 0u;
  giftpoint_ = 0u;
  hair_ = 0u;
  haircolor_ = 0u;
  body_ = 0u;
  weekasset_ = 0u;
  asset_ = 0u;
  zoneid_ = 0u;
  head_ = 0u;
  face_ = 0u;
  mouth_ = 0u;
  eye_ = 0u;
  gender_ = 0;
  profession_ = 0;
  job_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  var_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pray_ = NULL;
  donate_ = NULL;
  levelupeffect_ = false;
  exchangezone_ = false;
  accid_ = 0u;
  building_ = NULL;
  challenge_ = GOOGLE_ULONGLONG(0);
  lastexittime_ = 0u;
  redtip_ = GOOGLE_ULONGLONG(0);
  buildingeffect_ = false;
  realtimevoice_ = false;
  weekbcoin_ = 0u;
  totalcoin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMember::~GuildMember() {
  // @@protoc_insertion_point(destructor:Cmd.GuildMember)
  SharedDtor();
}

void GuildMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (var_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete var_;
  }
  if (this != default_instance_) {
    delete pray_;
    delete donate_;
    delete building_;
  }
}

void GuildMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMember_descriptor_;
}

const GuildMember& GuildMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildMember* GuildMember::default_instance_ = NULL;

GuildMember* GuildMember::New() const {
  return new GuildMember;
}

void GuildMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, entertime_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(offlinetime_, zoneid_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(head_, job_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(accid_, exchangezone_);
    if (has_var()) {
      if (var_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        var_->clear();
      }
    }
    if (has_pray()) {
      if (pray_ != NULL) pray_->::Cmd::BlobGuildPray::Clear();
    }
    if (has_donate()) {
      if (donate_ != NULL) donate_->::Cmd::BlobDonate::Clear();
    }
    if (has_building()) {
      if (building_ != NULL) building_->::Cmd::BlobGuildBuilding::Clear();
    }
    challenge_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[32 / 32] & 63) {
    ZR_(buildingeffect_, realtimevoice_);
    ZR_(redtip_, totalcoin_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_baselevel;
        break;
      }

      // optional uint32 baselevel = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_baselevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baselevel_)));
          set_has_baselevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_portrait;
        break;
      }

      // optional uint32 portrait = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portrait_)));
          set_has_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_frame;
        break;
      }

      // optional uint32 frame = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_weekcontribution;
        break;
      }

      // optional uint32 weekcontribution = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_weekcontribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekcontribution_)));
          set_has_weekcontribution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_contribution;
        break;
      }

      // optional uint32 contribution = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribution_)));
          set_has_contribution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_entertime;
        break;
      }

      // optional uint32 entertime = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_entertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entertime_)));
          set_has_entertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_offlinetime;
        break;
      }

      // optional uint32 offlinetime = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_offlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_giftpoint;
        break;
      }

      // optional uint32 giftpoint = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_giftpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giftpoint_)));
          set_has_giftpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gender;
        break;
      }

      // optional .Cmd.EGender gender = 10 [default = EGENDER_MIN];
      case 10: {
        if (tag == 80) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGender_IsValid(value)) {
            set_gender(static_cast< ::Cmd::EGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_profession;
        break;
      }

      // optional .Cmd.EProfession profession = 11 [default = EPROFESSION_MIN];
      case 11: {
        if (tag == 88) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_profession(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_job;
        break;
      }

      // optional .Cmd.EGuildJob job = 12 [default = EGUILDJOB_MIN];
      case 12: {
        if (tag == 96) {
         parse_job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildJob_IsValid(value)) {
            set_job(static_cast< ::Cmd::EGuildJob >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_name;
        break;
      }

      // optional string name = 13;
      case 13: {
        if (tag == 106) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_var;
        break;
      }

      // optional bytes var = 14;
      case 14: {
        if (tag == 114) {
         parse_var:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_var()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_pray;
        break;
      }

      // optional .Cmd.BlobGuildPray pray = 15;
      case 15: {
        if (tag == 122) {
         parse_pray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_hair;
        break;
      }

      // optional uint32 hair = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_haircolor;
        break;
      }

      // optional uint32 haircolor = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_body;
        break;
      }

      // optional uint32 body = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_totalcontribution;
        break;
      }

      // optional uint32 totalcontribution = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_totalcontribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalcontribution_)));
          set_has_totalcontribution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_levelupeffect;
        break;
      }

      // optional bool levelupeffect = 20 [default = false];
      case 20: {
        if (tag == 160) {
         parse_levelupeffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &levelupeffect_)));
          set_has_levelupeffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_donate;
        break;
      }

      // optional .Cmd.BlobDonate donate = 21;
      case 21: {
        if (tag == 170) {
         parse_donate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_donate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_weekasset;
        break;
      }

      // optional uint32 weekasset = 22 [default = 0];
      case 22: {
        if (tag == 176) {
         parse_weekasset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekasset_)));
          set_has_weekasset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_asset;
        break;
      }

      // optional uint32 asset = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_asset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asset_)));
          set_has_asset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 24 [default = 0];
      case 24: {
        if (tag == 192) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_head;
        break;
      }

      // optional uint32 head = 25 [default = 0];
      case 25: {
        if (tag == 200) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_exchangezone;
        break;
      }

      // optional bool exchangezone = 26 [default = false];
      case 26: {
        if (tag == 208) {
         parse_exchangezone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exchangezone_)));
          set_has_exchangezone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_accid;
        break;
      }

      // optional uint32 accid = 27;
      case 27: {
        if (tag == 216) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_face;
        break;
      }

      // optional uint32 face = 28 [default = 0];
      case 28: {
        if (tag == 224) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_mouth;
        break;
      }

      // optional uint32 mouth = 29 [default = 0];
      case 29: {
        if (tag == 232) {
         parse_mouth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouth_)));
          set_has_mouth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_eye;
        break;
      }

      // optional uint32 eye = 30 [default = 0];
      case 30: {
        if (tag == 240) {
         parse_eye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eye_)));
          set_has_eye();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_building;
        break;
      }

      // optional .Cmd.BlobGuildBuilding building = 31;
      case 31: {
        if (tag == 250) {
         parse_building:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_building()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_challenge;
        break;
      }

      // optional uint64 challenge = 32 [default = 0];
      case 32: {
        if (tag == 256) {
         parse_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &challenge_)));
          set_has_challenge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_lastexittime;
        break;
      }

      // optional uint32 lastexittime = 33 [default = 0];
      case 33: {
        if (tag == 264) {
         parse_lastexittime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastexittime_)));
          set_has_lastexittime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_redtip;
        break;
      }

      // optional uint64 redtip = 34 [default = 0];
      case 34: {
        if (tag == 272) {
         parse_redtip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &redtip_)));
          set_has_redtip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_buildingeffect;
        break;
      }

      // optional bool buildingeffect = 35 [default = false];
      case 35: {
        if (tag == 280) {
         parse_buildingeffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buildingeffect_)));
          set_has_buildingeffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_realtimevoice;
        break;
      }

      // optional bool realtimevoice = 36 [default = false];
      case 36: {
        if (tag == 288) {
         parse_realtimevoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &realtimevoice_)));
          set_has_realtimevoice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_weekbcoin;
        break;
      }

      // optional uint32 weekbcoin = 37 [default = 0];
      case 37: {
        if (tag == 296) {
         parse_weekbcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekbcoin_)));
          set_has_weekbcoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_totalcoin;
        break;
      }

      // optional uint32 totalcoin = 38 [default = 0];
      case 38: {
        if (tag == 304) {
         parse_totalcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalcoin_)));
          set_has_totalcoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildMember)
  return false;
#undef DO_
}

void GuildMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildMember)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 baselevel = 2 [default = 0];
  if (has_baselevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->baselevel(), output);
  }

  // optional uint32 portrait = 3 [default = 0];
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->portrait(), output);
  }

  // optional uint32 frame = 4 [default = 0];
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->frame(), output);
  }

  // optional uint32 weekcontribution = 5 [default = 0];
  if (has_weekcontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->weekcontribution(), output);
  }

  // optional uint32 contribution = 6 [default = 0];
  if (has_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->contribution(), output);
  }

  // optional uint32 entertime = 7 [default = 0];
  if (has_entertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->entertime(), output);
  }

  // optional uint32 offlinetime = 8 [default = 0];
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->offlinetime(), output);
  }

  // optional uint32 giftpoint = 9 [default = 0];
  if (has_giftpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->giftpoint(), output);
  }

  // optional .Cmd.EGender gender = 10 [default = EGENDER_MIN];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->gender(), output);
  }

  // optional .Cmd.EProfession profession = 11 [default = EPROFESSION_MIN];
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->profession(), output);
  }

  // optional .Cmd.EGuildJob job = 12 [default = EGUILDJOB_MIN];
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->job(), output);
  }

  // optional string name = 13;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->name(), output);
  }

  // optional bytes var = 14;
  if (has_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->var(), output);
  }

  // optional .Cmd.BlobGuildPray pray = 15;
  if (has_pray()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->pray(), output);
  }

  // optional uint32 hair = 16 [default = 0];
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->hair(), output);
  }

  // optional uint32 haircolor = 17 [default = 0];
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->haircolor(), output);
  }

  // optional uint32 body = 18 [default = 0];
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->body(), output);
  }

  // optional uint32 totalcontribution = 19 [default = 0];
  if (has_totalcontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->totalcontribution(), output);
  }

  // optional bool levelupeffect = 20 [default = false];
  if (has_levelupeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->levelupeffect(), output);
  }

  // optional .Cmd.BlobDonate donate = 21;
  if (has_donate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->donate(), output);
  }

  // optional uint32 weekasset = 22 [default = 0];
  if (has_weekasset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->weekasset(), output);
  }

  // optional uint32 asset = 23 [default = 0];
  if (has_asset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->asset(), output);
  }

  // optional uint32 zoneid = 24 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->zoneid(), output);
  }

  // optional uint32 head = 25 [default = 0];
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->head(), output);
  }

  // optional bool exchangezone = 26 [default = false];
  if (has_exchangezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->exchangezone(), output);
  }

  // optional uint32 accid = 27;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->accid(), output);
  }

  // optional uint32 face = 28 [default = 0];
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->face(), output);
  }

  // optional uint32 mouth = 29 [default = 0];
  if (has_mouth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->mouth(), output);
  }

  // optional uint32 eye = 30 [default = 0];
  if (has_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->eye(), output);
  }

  // optional .Cmd.BlobGuildBuilding building = 31;
  if (has_building()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->building(), output);
  }

  // optional uint64 challenge = 32 [default = 0];
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->challenge(), output);
  }

  // optional uint32 lastexittime = 33 [default = 0];
  if (has_lastexittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->lastexittime(), output);
  }

  // optional uint64 redtip = 34 [default = 0];
  if (has_redtip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->redtip(), output);
  }

  // optional bool buildingeffect = 35 [default = false];
  if (has_buildingeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->buildingeffect(), output);
  }

  // optional bool realtimevoice = 36 [default = false];
  if (has_realtimevoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->realtimevoice(), output);
  }

  // optional uint32 weekbcoin = 37 [default = 0];
  if (has_weekbcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->weekbcoin(), output);
  }

  // optional uint32 totalcoin = 38 [default = 0];
  if (has_totalcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->totalcoin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildMember)
}

::google::protobuf::uint8* GuildMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildMember)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 baselevel = 2 [default = 0];
  if (has_baselevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->baselevel(), target);
  }

  // optional uint32 portrait = 3 [default = 0];
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->portrait(), target);
  }

  // optional uint32 frame = 4 [default = 0];
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->frame(), target);
  }

  // optional uint32 weekcontribution = 5 [default = 0];
  if (has_weekcontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->weekcontribution(), target);
  }

  // optional uint32 contribution = 6 [default = 0];
  if (has_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->contribution(), target);
  }

  // optional uint32 entertime = 7 [default = 0];
  if (has_entertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->entertime(), target);
  }

  // optional uint32 offlinetime = 8 [default = 0];
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->offlinetime(), target);
  }

  // optional uint32 giftpoint = 9 [default = 0];
  if (has_giftpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->giftpoint(), target);
  }

  // optional .Cmd.EGender gender = 10 [default = EGENDER_MIN];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->gender(), target);
  }

  // optional .Cmd.EProfession profession = 11 [default = EPROFESSION_MIN];
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->profession(), target);
  }

  // optional .Cmd.EGuildJob job = 12 [default = EGUILDJOB_MIN];
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->job(), target);
  }

  // optional string name = 13;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->name(), target);
  }

  // optional bytes var = 14;
  if (has_var()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->var(), target);
  }

  // optional .Cmd.BlobGuildPray pray = 15;
  if (has_pray()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->pray(), target);
  }

  // optional uint32 hair = 16 [default = 0];
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->hair(), target);
  }

  // optional uint32 haircolor = 17 [default = 0];
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->haircolor(), target);
  }

  // optional uint32 body = 18 [default = 0];
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->body(), target);
  }

  // optional uint32 totalcontribution = 19 [default = 0];
  if (has_totalcontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->totalcontribution(), target);
  }

  // optional bool levelupeffect = 20 [default = false];
  if (has_levelupeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->levelupeffect(), target);
  }

  // optional .Cmd.BlobDonate donate = 21;
  if (has_donate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->donate(), target);
  }

  // optional uint32 weekasset = 22 [default = 0];
  if (has_weekasset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->weekasset(), target);
  }

  // optional uint32 asset = 23 [default = 0];
  if (has_asset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->asset(), target);
  }

  // optional uint32 zoneid = 24 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->zoneid(), target);
  }

  // optional uint32 head = 25 [default = 0];
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->head(), target);
  }

  // optional bool exchangezone = 26 [default = false];
  if (has_exchangezone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->exchangezone(), target);
  }

  // optional uint32 accid = 27;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->accid(), target);
  }

  // optional uint32 face = 28 [default = 0];
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->face(), target);
  }

  // optional uint32 mouth = 29 [default = 0];
  if (has_mouth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->mouth(), target);
  }

  // optional uint32 eye = 30 [default = 0];
  if (has_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->eye(), target);
  }

  // optional .Cmd.BlobGuildBuilding building = 31;
  if (has_building()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->building(), target);
  }

  // optional uint64 challenge = 32 [default = 0];
  if (has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->challenge(), target);
  }

  // optional uint32 lastexittime = 33 [default = 0];
  if (has_lastexittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->lastexittime(), target);
  }

  // optional uint64 redtip = 34 [default = 0];
  if (has_redtip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(34, this->redtip(), target);
  }

  // optional bool buildingeffect = 35 [default = false];
  if (has_buildingeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->buildingeffect(), target);
  }

  // optional bool realtimevoice = 36 [default = false];
  if (has_realtimevoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->realtimevoice(), target);
  }

  // optional uint32 weekbcoin = 37 [default = 0];
  if (has_weekbcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->weekbcoin(), target);
  }

  // optional uint32 totalcoin = 38 [default = 0];
  if (has_totalcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->totalcoin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildMember)
  return target;
}

int GuildMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 baselevel = 2 [default = 0];
    if (has_baselevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baselevel());
    }

    // optional uint32 portrait = 3 [default = 0];
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portrait());
    }

    // optional uint32 frame = 4 [default = 0];
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame());
    }

    // optional uint32 weekcontribution = 5 [default = 0];
    if (has_weekcontribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekcontribution());
    }

    // optional uint32 contribution = 6 [default = 0];
    if (has_contribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribution());
    }

    // optional uint32 totalcontribution = 19 [default = 0];
    if (has_totalcontribution()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalcontribution());
    }

    // optional uint32 entertime = 7 [default = 0];
    if (has_entertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entertime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 offlinetime = 8 [default = 0];
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offlinetime());
    }

    // optional uint32 giftpoint = 9 [default = 0];
    if (has_giftpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giftpoint());
    }

    // optional uint32 hair = 16 [default = 0];
    if (has_hair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hair());
    }

    // optional uint32 haircolor = 17 [default = 0];
    if (has_haircolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haircolor());
    }

    // optional uint32 body = 18 [default = 0];
    if (has_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

    // optional uint32 weekasset = 22 [default = 0];
    if (has_weekasset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekasset());
    }

    // optional uint32 asset = 23 [default = 0];
    if (has_asset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asset());
    }

    // optional uint32 zoneid = 24 [default = 0];
    if (has_zoneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 head = 25 [default = 0];
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head());
    }

    // optional uint32 face = 28 [default = 0];
    if (has_face()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

    // optional uint32 mouth = 29 [default = 0];
    if (has_mouth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouth());
    }

    // optional uint32 eye = 30 [default = 0];
    if (has_eye()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eye());
    }

    // optional .Cmd.EGender gender = 10 [default = EGENDER_MIN];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional .Cmd.EProfession profession = 11 [default = EPROFESSION_MIN];
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

    // optional .Cmd.EGuildJob job = 12 [default = EGUILDJOB_MIN];
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job());
    }

    // optional string name = 13;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bytes var = 14;
    if (has_var()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->var());
    }

    // optional .Cmd.BlobGuildPray pray = 15;
    if (has_pray()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pray());
    }

    // optional .Cmd.BlobDonate donate = 21;
    if (has_donate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->donate());
    }

    // optional bool levelupeffect = 20 [default = false];
    if (has_levelupeffect()) {
      total_size += 2 + 1;
    }

    // optional bool exchangezone = 26 [default = false];
    if (has_exchangezone()) {
      total_size += 2 + 1;
    }

    // optional uint32 accid = 27;
    if (has_accid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accid());
    }

    // optional .Cmd.BlobGuildBuilding building = 31;
    if (has_building()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->building());
    }

    // optional uint64 challenge = 32 [default = 0];
    if (has_challenge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->challenge());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 lastexittime = 33 [default = 0];
    if (has_lastexittime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastexittime());
    }

    // optional uint64 redtip = 34 [default = 0];
    if (has_redtip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->redtip());
    }

    // optional bool buildingeffect = 35 [default = false];
    if (has_buildingeffect()) {
      total_size += 2 + 1;
    }

    // optional bool realtimevoice = 36 [default = false];
    if (has_realtimevoice()) {
      total_size += 2 + 1;
    }

    // optional uint32 weekbcoin = 37 [default = 0];
    if (has_weekbcoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekbcoin());
    }

    // optional uint32 totalcoin = 38 [default = 0];
    if (has_totalcoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalcoin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMember::MergeFrom(const GuildMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_baselevel()) {
      set_baselevel(from.baselevel());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_weekcontribution()) {
      set_weekcontribution(from.weekcontribution());
    }
    if (from.has_contribution()) {
      set_contribution(from.contribution());
    }
    if (from.has_totalcontribution()) {
      set_totalcontribution(from.totalcontribution());
    }
    if (from.has_entertime()) {
      set_entertime(from.entertime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_giftpoint()) {
      set_giftpoint(from.giftpoint());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_weekasset()) {
      set_weekasset(from.weekasset());
    }
    if (from.has_asset()) {
      set_asset(from.asset());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_mouth()) {
      set_mouth(from.mouth());
    }
    if (from.has_eye()) {
      set_eye(from.eye());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_var()) {
      set_var(from.var());
    }
    if (from.has_pray()) {
      mutable_pray()->::Cmd::BlobGuildPray::MergeFrom(from.pray());
    }
    if (from.has_donate()) {
      mutable_donate()->::Cmd::BlobDonate::MergeFrom(from.donate());
    }
    if (from.has_levelupeffect()) {
      set_levelupeffect(from.levelupeffect());
    }
    if (from.has_exchangezone()) {
      set_exchangezone(from.exchangezone());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_building()) {
      mutable_building()->::Cmd::BlobGuildBuilding::MergeFrom(from.building());
    }
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_lastexittime()) {
      set_lastexittime(from.lastexittime());
    }
    if (from.has_redtip()) {
      set_redtip(from.redtip());
    }
    if (from.has_buildingeffect()) {
      set_buildingeffect(from.buildingeffect());
    }
    if (from.has_realtimevoice()) {
      set_realtimevoice(from.realtimevoice());
    }
    if (from.has_weekbcoin()) {
      set_weekbcoin(from.weekbcoin());
    }
    if (from.has_totalcoin()) {
      set_totalcoin(from.totalcoin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMember::CopyFrom(const GuildMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMember::IsInitialized() const {

  if (has_pray()) {
    if (!this->pray().IsInitialized()) return false;
  }
  return true;
}

void GuildMember::Swap(GuildMember* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(baselevel_, other->baselevel_);
    std::swap(portrait_, other->portrait_);
    std::swap(frame_, other->frame_);
    std::swap(weekcontribution_, other->weekcontribution_);
    std::swap(contribution_, other->contribution_);
    std::swap(totalcontribution_, other->totalcontribution_);
    std::swap(entertime_, other->entertime_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(giftpoint_, other->giftpoint_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(body_, other->body_);
    std::swap(weekasset_, other->weekasset_);
    std::swap(asset_, other->asset_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(head_, other->head_);
    std::swap(face_, other->face_);
    std::swap(mouth_, other->mouth_);
    std::swap(eye_, other->eye_);
    std::swap(gender_, other->gender_);
    std::swap(profession_, other->profession_);
    std::swap(job_, other->job_);
    std::swap(name_, other->name_);
    std::swap(var_, other->var_);
    std::swap(pray_, other->pray_);
    std::swap(donate_, other->donate_);
    std::swap(levelupeffect_, other->levelupeffect_);
    std::swap(exchangezone_, other->exchangezone_);
    std::swap(accid_, other->accid_);
    std::swap(building_, other->building_);
    std::swap(challenge_, other->challenge_);
    std::swap(lastexittime_, other->lastexittime_);
    std::swap(redtip_, other->redtip_);
    std::swap(buildingeffect_, other->buildingeffect_);
    std::swap(realtimevoice_, other->realtimevoice_);
    std::swap(weekbcoin_, other->weekbcoin_);
    std::swap(totalcoin_, other->totalcoin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMember_descriptor_;
  metadata.reflection = GuildMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGuildMember::kMembersFieldNumber;
#endif  // !_MSC_VER

BlobGuildMember::BlobGuildMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGuildMember)
}

void BlobGuildMember::InitAsDefaultInstance() {
}

BlobGuildMember::BlobGuildMember(const BlobGuildMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGuildMember)
}

void BlobGuildMember::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGuildMember::~BlobGuildMember() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGuildMember)
  SharedDtor();
}

void BlobGuildMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGuildMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGuildMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGuildMember_descriptor_;
}

const BlobGuildMember& BlobGuildMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BlobGuildMember* BlobGuildMember::default_instance_ = NULL;

BlobGuildMember* BlobGuildMember::New() const {
  return new BlobGuildMember;
}

void BlobGuildMember::Clear() {
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGuildMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGuildMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.GuildMember members = 1;
      case 1: {
        if (tag == 10) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_members;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGuildMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGuildMember)
  return false;
#undef DO_
}

void BlobGuildMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGuildMember)
  // repeated .Cmd.GuildMember members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGuildMember)
}

::google::protobuf::uint8* BlobGuildMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGuildMember)
  // repeated .Cmd.GuildMember members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGuildMember)
  return target;
}

int BlobGuildMember::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.GuildMember members = 1;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGuildMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGuildMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGuildMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGuildMember::MergeFrom(const BlobGuildMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGuildMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGuildMember::CopyFrom(const BlobGuildMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGuildMember::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  return true;
}

void BlobGuildMember::Swap(BlobGuildMember* other) {
  if (other != this) {
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGuildMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGuildMember_descriptor_;
  metadata.reflection = BlobGuildMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildApply::kCharidFieldNumber;
const int GuildApply::kZoneidFieldNumber;
const int GuildApply::kBaselevelFieldNumber;
const int GuildApply::kPortraitFieldNumber;
const int GuildApply::kFrameFieldNumber;
const int GuildApply::kEntertimeFieldNumber;
const int GuildApply::kHairFieldNumber;
const int GuildApply::kHaircolorFieldNumber;
const int GuildApply::kBodyFieldNumber;
const int GuildApply::kHeadFieldNumber;
const int GuildApply::kFaceFieldNumber;
const int GuildApply::kMouthFieldNumber;
const int GuildApply::kEyeFieldNumber;
const int GuildApply::kGenderFieldNumber;
const int GuildApply::kProfessionFieldNumber;
const int GuildApply::kNameFieldNumber;
const int GuildApply::kAccidFieldNumber;
#endif  // !_MSC_VER

GuildApply::GuildApply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildApply)
}

void GuildApply::InitAsDefaultInstance() {
}

GuildApply::GuildApply(const GuildApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildApply)
}

void GuildApply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  baselevel_ = 0u;
  portrait_ = 0u;
  frame_ = 0u;
  entertime_ = 0u;
  hair_ = 0u;
  haircolor_ = 0u;
  body_ = 0u;
  head_ = 0u;
  face_ = 0u;
  mouth_ = 0u;
  eye_ = 0u;
  gender_ = 0;
  profession_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildApply::~GuildApply() {
  // @@protoc_insertion_point(destructor:Cmd.GuildApply)
  SharedDtor();
}

void GuildApply::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GuildApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildApply_descriptor_;
}

const GuildApply& GuildApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildApply* GuildApply::default_instance_ = NULL;

GuildApply* GuildApply::New() const {
  return new GuildApply;
}

void GuildApply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildApply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, haircolor_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(body_, profession_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  accid_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildApply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_baselevel;
        break;
      }

      // optional uint32 baselevel = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_baselevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baselevel_)));
          set_has_baselevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_portrait;
        break;
      }

      // optional uint32 portrait = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portrait_)));
          set_has_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_frame;
        break;
      }

      // optional uint32 frame = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_entertime;
        break;
      }

      // optional uint32 entertime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_entertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entertime_)));
          set_has_entertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gender;
        break;
      }

      // optional .Cmd.EGender gender = 6 [default = EGENDER_MIN];
      case 6: {
        if (tag == 48) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGender_IsValid(value)) {
            set_gender(static_cast< ::Cmd::EGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_profession;
        break;
      }

      // optional .Cmd.EProfession profession = 7 [default = EPROFESSION_MIN];
      case 7: {
        if (tag == 56) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_profession(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }

      // optional string name = 8;
      case 8: {
        if (tag == 66) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_hair;
        break;
      }

      // optional uint32 hair = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_haircolor;
        break;
      }

      // optional uint32 haircolor = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_body;
        break;
      }

      // optional uint32 body = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 13;
      case 13: {
        if (tag == 104) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_head;
        break;
      }

      // optional uint32 head = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_face;
        break;
      }

      // optional uint32 face = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_mouth;
        break;
      }

      // optional uint32 mouth = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_mouth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouth_)));
          set_has_mouth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_eye;
        break;
      }

      // optional uint32 eye = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_eye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eye_)));
          set_has_eye();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildApply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildApply)
  return false;
#undef DO_
}

void GuildApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildApply)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 baselevel = 2 [default = 0];
  if (has_baselevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->baselevel(), output);
  }

  // optional uint32 portrait = 3 [default = 0];
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->portrait(), output);
  }

  // optional uint32 frame = 4 [default = 0];
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->frame(), output);
  }

  // optional uint32 entertime = 5 [default = 0];
  if (has_entertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->entertime(), output);
  }

  // optional .Cmd.EGender gender = 6 [default = EGENDER_MIN];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->gender(), output);
  }

  // optional .Cmd.EProfession profession = 7 [default = EPROFESSION_MIN];
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->profession(), output);
  }

  // optional string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  // optional uint32 hair = 9 [default = 0];
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hair(), output);
  }

  // optional uint32 haircolor = 10 [default = 0];
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->haircolor(), output);
  }

  // optional uint32 body = 11 [default = 0];
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->body(), output);
  }

  // optional uint32 zoneid = 12 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->zoneid(), output);
  }

  // optional uint64 accid = 13;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->accid(), output);
  }

  // optional uint32 head = 14 [default = 0];
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->head(), output);
  }

  // optional uint32 face = 15 [default = 0];
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->face(), output);
  }

  // optional uint32 mouth = 16 [default = 0];
  if (has_mouth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->mouth(), output);
  }

  // optional uint32 eye = 17 [default = 0];
  if (has_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->eye(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildApply)
}

::google::protobuf::uint8* GuildApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildApply)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 baselevel = 2 [default = 0];
  if (has_baselevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->baselevel(), target);
  }

  // optional uint32 portrait = 3 [default = 0];
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->portrait(), target);
  }

  // optional uint32 frame = 4 [default = 0];
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->frame(), target);
  }

  // optional uint32 entertime = 5 [default = 0];
  if (has_entertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->entertime(), target);
  }

  // optional .Cmd.EGender gender = 6 [default = EGENDER_MIN];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->gender(), target);
  }

  // optional .Cmd.EProfession profession = 7 [default = EPROFESSION_MIN];
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->profession(), target);
  }

  // optional string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  // optional uint32 hair = 9 [default = 0];
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hair(), target);
  }

  // optional uint32 haircolor = 10 [default = 0];
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->haircolor(), target);
  }

  // optional uint32 body = 11 [default = 0];
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->body(), target);
  }

  // optional uint32 zoneid = 12 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->zoneid(), target);
  }

  // optional uint64 accid = 13;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->accid(), target);
  }

  // optional uint32 head = 14 [default = 0];
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->head(), target);
  }

  // optional uint32 face = 15 [default = 0];
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->face(), target);
  }

  // optional uint32 mouth = 16 [default = 0];
  if (has_mouth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->mouth(), target);
  }

  // optional uint32 eye = 17 [default = 0];
  if (has_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->eye(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildApply)
  return target;
}

int GuildApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 12 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 baselevel = 2 [default = 0];
    if (has_baselevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baselevel());
    }

    // optional uint32 portrait = 3 [default = 0];
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portrait());
    }

    // optional uint32 frame = 4 [default = 0];
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame());
    }

    // optional uint32 entertime = 5 [default = 0];
    if (has_entertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entertime());
    }

    // optional uint32 hair = 9 [default = 0];
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hair());
    }

    // optional uint32 haircolor = 10 [default = 0];
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haircolor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 body = 11 [default = 0];
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

    // optional uint32 head = 14 [default = 0];
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head());
    }

    // optional uint32 face = 15 [default = 0];
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

    // optional uint32 mouth = 16 [default = 0];
    if (has_mouth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouth());
    }

    // optional uint32 eye = 17 [default = 0];
    if (has_eye()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eye());
    }

    // optional .Cmd.EGender gender = 6 [default = EGENDER_MIN];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional .Cmd.EProfession profession = 7 [default = EPROFESSION_MIN];
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

    // optional string name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 accid = 13;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildApply::MergeFrom(const GuildApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_baselevel()) {
      set_baselevel(from.baselevel());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_entertime()) {
      set_entertime(from.entertime());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_mouth()) {
      set_mouth(from.mouth());
    }
    if (from.has_eye()) {
      set_eye(from.eye());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_accid()) {
      set_accid(from.accid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildApply::CopyFrom(const GuildApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildApply::IsInitialized() const {

  return true;
}

void GuildApply::Swap(GuildApply* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(baselevel_, other->baselevel_);
    std::swap(portrait_, other->portrait_);
    std::swap(frame_, other->frame_);
    std::swap(entertime_, other->entertime_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(body_, other->body_);
    std::swap(head_, other->head_);
    std::swap(face_, other->face_);
    std::swap(mouth_, other->mouth_);
    std::swap(eye_, other->eye_);
    std::swap(gender_, other->gender_);
    std::swap(profession_, other->profession_);
    std::swap(name_, other->name_);
    std::swap(accid_, other->accid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildApply_descriptor_;
  metadata.reflection = GuildApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGuildApply::kApplysFieldNumber;
#endif  // !_MSC_VER

BlobGuildApply::BlobGuildApply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGuildApply)
}

void BlobGuildApply::InitAsDefaultInstance() {
}

BlobGuildApply::BlobGuildApply(const BlobGuildApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGuildApply)
}

void BlobGuildApply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGuildApply::~BlobGuildApply() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGuildApply)
  SharedDtor();
}

void BlobGuildApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGuildApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGuildApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGuildApply_descriptor_;
}

const BlobGuildApply& BlobGuildApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BlobGuildApply* BlobGuildApply::default_instance_ = NULL;

BlobGuildApply* BlobGuildApply::New() const {
  return new BlobGuildApply;
}

void BlobGuildApply::Clear() {
  applys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGuildApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGuildApply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.GuildApply applys = 1;
      case 1: {
        if (tag == 10) {
         parse_applys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_applys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGuildApply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGuildApply)
  return false;
#undef DO_
}

void BlobGuildApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGuildApply)
  // repeated .Cmd.GuildApply applys = 1;
  for (int i = 0; i < this->applys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGuildApply)
}

::google::protobuf::uint8* BlobGuildApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGuildApply)
  // repeated .Cmd.GuildApply applys = 1;
  for (int i = 0; i < this->applys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGuildApply)
  return target;
}

int BlobGuildApply::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.GuildApply applys = 1;
  total_size += 1 * this->applys_size();
  for (int i = 0; i < this->applys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGuildApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGuildApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGuildApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGuildApply::MergeFrom(const BlobGuildApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  applys_.MergeFrom(from.applys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGuildApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGuildApply::CopyFrom(const BlobGuildApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGuildApply::IsInitialized() const {

  return true;
}

void BlobGuildApply::Swap(BlobGuildApply* other) {
  if (other != this) {
    applys_.Swap(&other->applys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGuildApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGuildApply_descriptor_;
  metadata.reflection = BlobGuildApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildJob::kJobFieldNumber;
const int GuildJob::kNameFieldNumber;
const int GuildJob::kAuthFieldNumber;
const int GuildJob::kEditauthFieldNumber;
#endif  // !_MSC_VER

GuildJob::GuildJob()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildJob)
}

void GuildJob::InitAsDefaultInstance() {
}

GuildJob::GuildJob(const GuildJob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildJob)
}

void GuildJob::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  job_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_ = 0u;
  editauth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildJob::~GuildJob() {
  // @@protoc_insertion_point(destructor:Cmd.GuildJob)
  SharedDtor();
}

void GuildJob::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GuildJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildJob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildJob_descriptor_;
}

const GuildJob& GuildJob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildJob* GuildJob::default_instance_ = NULL;

GuildJob* GuildJob::New() const {
  return new GuildJob;
}

void GuildJob::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildJob*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(job_, editauth_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildJob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EGuildJob job = 1 [default = EGUILDJOB_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildJob_IsValid(value)) {
            set_job(static_cast< ::Cmd::EGuildJob >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_auth;
        break;
      }

      // optional uint32 auth = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_auth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_)));
          set_has_auth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_editauth;
        break;
      }

      // optional uint32 editauth = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_editauth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &editauth_)));
          set_has_editauth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildJob)
  return false;
#undef DO_
}

void GuildJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildJob)
  // optional .Cmd.EGuildJob job = 1 [default = EGUILDJOB_MIN];
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->job(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 auth = 3 [default = 0];
  if (has_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->auth(), output);
  }

  // optional uint32 editauth = 4 [default = 0];
  if (has_editauth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->editauth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildJob)
}

::google::protobuf::uint8* GuildJob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildJob)
  // optional .Cmd.EGuildJob job = 1 [default = EGUILDJOB_MIN];
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->job(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 auth = 3 [default = 0];
  if (has_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->auth(), target);
  }

  // optional uint32 editauth = 4 [default = 0];
  if (has_editauth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->editauth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildJob)
  return target;
}

int GuildJob::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EGuildJob job = 1 [default = EGUILDJOB_MIN];
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 auth = 3 [default = 0];
    if (has_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth());
    }

    // optional uint32 editauth = 4 [default = 0];
    if (has_editauth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->editauth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildJob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildJob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildJob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildJob::MergeFrom(const GuildJob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_auth()) {
      set_auth(from.auth());
    }
    if (from.has_editauth()) {
      set_editauth(from.editauth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildJob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildJob::CopyFrom(const GuildJob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildJob::IsInitialized() const {

  return true;
}

void GuildJob::Swap(GuildJob* other) {
  if (other != this) {
    std::swap(job_, other->job_);
    std::swap(name_, other->name_);
    std::swap(auth_, other->auth_);
    std::swap(editauth_, other->editauth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildJob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildJob_descriptor_;
  metadata.reflection = GuildJob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildQuest::kQuestidFieldNumber;
const int GuildQuest::kTimeFieldNumber;
#endif  // !_MSC_VER

GuildQuest::GuildQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildQuest)
}

void GuildQuest::InitAsDefaultInstance() {
}

GuildQuest::GuildQuest(const GuildQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildQuest)
}

void GuildQuest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildQuest::~GuildQuest() {
  // @@protoc_insertion_point(destructor:Cmd.GuildQuest)
  SharedDtor();
}

void GuildQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildQuest_descriptor_;
}

const GuildQuest& GuildQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildQuest* GuildQuest::default_instance_ = NULL;

GuildQuest* GuildQuest::New() const {
  return new GuildQuest;
}

void GuildQuest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildQuest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(questid_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildQuest)
  return false;
#undef DO_
}

void GuildQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildQuest)
  // optional uint32 questid = 1 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }

  // optional uint32 time = 2 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildQuest)
}

::google::protobuf::uint8* GuildQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildQuest)
  // optional uint32 questid = 1 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }

  // optional uint32 time = 2 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildQuest)
  return target;
}

int GuildQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional uint32 time = 2 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildQuest::MergeFrom(const GuildQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildQuest::CopyFrom(const GuildQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildQuest::IsInitialized() const {

  return true;
}

void GuildQuest::Swap(GuildQuest* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildQuest_descriptor_;
  metadata.reflection = GuildQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBuildMaterial::kIdFieldNumber;
const int GuildBuildMaterial::kCountFieldNumber;
const int GuildBuildMaterial::kItemidFieldNumber;
const int GuildBuildMaterial::kItemcountFieldNumber;
const int GuildBuildMaterial::kRewardidFieldNumber;
#endif  // !_MSC_VER

GuildBuildMaterial::GuildBuildMaterial()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildBuildMaterial)
}

void GuildBuildMaterial::InitAsDefaultInstance() {
}

GuildBuildMaterial::GuildBuildMaterial(const GuildBuildMaterial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildBuildMaterial)
}

void GuildBuildMaterial::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  itemid_ = 0u;
  itemcount_ = 0u;
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBuildMaterial::~GuildBuildMaterial() {
  // @@protoc_insertion_point(destructor:Cmd.GuildBuildMaterial)
  SharedDtor();
}

void GuildBuildMaterial::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBuildMaterial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBuildMaterial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBuildMaterial_descriptor_;
}

const GuildBuildMaterial& GuildBuildMaterial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildBuildMaterial* GuildBuildMaterial::default_instance_ = NULL;

GuildBuildMaterial* GuildBuildMaterial::New() const {
  return new GuildBuildMaterial;
}

void GuildBuildMaterial::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildBuildMaterial*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, rewardid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBuildMaterial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildBuildMaterial)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemcount;
        break;
      }

      // optional uint32 itemcount = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_itemcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rewardid;
        break;
      }

      // optional uint32 rewardid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_rewardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildBuildMaterial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildBuildMaterial)
  return false;
#undef DO_
}

void GuildBuildMaterial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildBuildMaterial)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 itemid = 3 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  // optional uint32 itemcount = 4 [default = 0];
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemcount(), output);
  }

  // optional uint32 rewardid = 5 [default = 0];
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildBuildMaterial)
}

::google::protobuf::uint8* GuildBuildMaterial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildBuildMaterial)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 itemid = 3 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  // optional uint32 itemcount = 4 [default = 0];
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemcount(), target);
  }

  // optional uint32 rewardid = 5 [default = 0];
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildBuildMaterial)
  return target;
}

int GuildBuildMaterial::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 itemid = 3 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 itemcount = 4 [default = 0];
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcount());
    }

    // optional uint32 rewardid = 5 [default = 0];
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBuildMaterial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBuildMaterial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBuildMaterial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBuildMaterial::MergeFrom(const GuildBuildMaterial& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBuildMaterial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBuildMaterial::CopyFrom(const GuildBuildMaterial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBuildMaterial::IsInitialized() const {

  return true;
}

void GuildBuildMaterial::Swap(GuildBuildMaterial* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBuildMaterial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBuildMaterial_descriptor_;
  metadata.reflection = GuildBuildMaterial_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBuilding::kTypeFieldNumber;
const int GuildBuilding::kLevelFieldNumber;
const int GuildBuilding::kMaterialsFieldNumber;
const int GuildBuilding::kIsbuildingFieldNumber;
const int GuildBuilding::kNextwelfaretimeFieldNumber;
const int GuildBuilding::kNextbuildtimeFieldNumber;
const int GuildBuilding::kProgressFieldNumber;
const int GuildBuilding::kRestmaterialsFieldNumber;
#endif  // !_MSC_VER

GuildBuilding::GuildBuilding()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildBuilding)
}

void GuildBuilding::InitAsDefaultInstance() {
}

GuildBuilding::GuildBuilding(const GuildBuilding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildBuilding)
}

void GuildBuilding::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0u;
  isbuilding_ = false;
  nextwelfaretime_ = 0u;
  nextbuildtime_ = 0u;
  progress_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBuilding::~GuildBuilding() {
  // @@protoc_insertion_point(destructor:Cmd.GuildBuilding)
  SharedDtor();
}

void GuildBuilding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBuilding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBuilding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBuilding_descriptor_;
}

const GuildBuilding& GuildBuilding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildBuilding* GuildBuilding::default_instance_ = NULL;

GuildBuilding* GuildBuilding::New() const {
  return new GuildBuilding;
}

void GuildBuilding::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildBuilding*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(type_, level_);
    ZR_(isbuilding_, progress_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  materials_.Clear();
  restmaterials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBuilding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildBuilding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EGuildBuilding type = 1 [default = EGUILDBUILDING_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildBuilding_IsValid(value)) {
            set_type(static_cast< ::Cmd::EGuildBuilding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_materials;
        break;
      }

      // repeated .Cmd.GuildBuildMaterial materials = 3;
      case 3: {
        if (tag == 26) {
         parse_materials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materials()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_materials;
        if (input->ExpectTag(32)) goto parse_isbuilding;
        break;
      }

      // optional bool isbuilding = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_isbuilding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbuilding_)));
          set_has_isbuilding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nextwelfaretime;
        break;
      }

      // optional uint32 nextwelfaretime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_nextwelfaretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextwelfaretime_)));
          set_has_nextwelfaretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_restmaterials;
        break;
      }

      // repeated .Cmd.GuildBuildMaterial restmaterials = 7;
      case 7: {
        if (tag == 58) {
         parse_restmaterials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_restmaterials()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_restmaterials;
        if (input->ExpectTag(64)) goto parse_nextbuildtime;
        break;
      }

      // optional uint32 nextbuildtime = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_nextbuildtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextbuildtime_)));
          set_has_nextbuildtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildBuilding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildBuilding)
  return false;
#undef DO_
}

void GuildBuilding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildBuilding)
  // optional .Cmd.EGuildBuilding type = 1 [default = EGUILDBUILDING_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 level = 2 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // repeated .Cmd.GuildBuildMaterial materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->materials(i), output);
  }

  // optional bool isbuilding = 4 [default = false];
  if (has_isbuilding()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isbuilding(), output);
  }

  // optional uint32 nextwelfaretime = 5 [default = 0];
  if (has_nextwelfaretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nextwelfaretime(), output);
  }

  // optional uint32 progress = 6 [default = 0];
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->progress(), output);
  }

  // repeated .Cmd.GuildBuildMaterial restmaterials = 7;
  for (int i = 0; i < this->restmaterials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->restmaterials(i), output);
  }

  // optional uint32 nextbuildtime = 8 [default = 0];
  if (has_nextbuildtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->nextbuildtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildBuilding)
}

::google::protobuf::uint8* GuildBuilding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildBuilding)
  // optional .Cmd.EGuildBuilding type = 1 [default = EGUILDBUILDING_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 level = 2 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // repeated .Cmd.GuildBuildMaterial materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->materials(i), target);
  }

  // optional bool isbuilding = 4 [default = false];
  if (has_isbuilding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isbuilding(), target);
  }

  // optional uint32 nextwelfaretime = 5 [default = 0];
  if (has_nextwelfaretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nextwelfaretime(), target);
  }

  // optional uint32 progress = 6 [default = 0];
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->progress(), target);
  }

  // repeated .Cmd.GuildBuildMaterial restmaterials = 7;
  for (int i = 0; i < this->restmaterials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->restmaterials(i), target);
  }

  // optional uint32 nextbuildtime = 8 [default = 0];
  if (has_nextbuildtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->nextbuildtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildBuilding)
  return target;
}

int GuildBuilding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EGuildBuilding type = 1 [default = EGUILDBUILDING_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional bool isbuilding = 4 [default = false];
    if (has_isbuilding()) {
      total_size += 1 + 1;
    }

    // optional uint32 nextwelfaretime = 5 [default = 0];
    if (has_nextwelfaretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextwelfaretime());
    }

    // optional uint32 nextbuildtime = 8 [default = 0];
    if (has_nextbuildtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextbuildtime());
    }

    // optional uint32 progress = 6 [default = 0];
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

  }
  // repeated .Cmd.GuildBuildMaterial materials = 3;
  total_size += 1 * this->materials_size();
  for (int i = 0; i < this->materials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materials(i));
  }

  // repeated .Cmd.GuildBuildMaterial restmaterials = 7;
  total_size += 1 * this->restmaterials_size();
  for (int i = 0; i < this->restmaterials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->restmaterials(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBuilding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBuilding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBuilding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBuilding::MergeFrom(const GuildBuilding& from) {
  GOOGLE_CHECK_NE(&from, this);
  materials_.MergeFrom(from.materials_);
  restmaterials_.MergeFrom(from.restmaterials_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_isbuilding()) {
      set_isbuilding(from.isbuilding());
    }
    if (from.has_nextwelfaretime()) {
      set_nextwelfaretime(from.nextwelfaretime());
    }
    if (from.has_nextbuildtime()) {
      set_nextbuildtime(from.nextbuildtime());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBuilding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBuilding::CopyFrom(const GuildBuilding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBuilding::IsInitialized() const {

  return true;
}

void GuildBuilding::Swap(GuildBuilding* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    materials_.Swap(&other->materials_);
    std::swap(isbuilding_, other->isbuilding_);
    std::swap(nextwelfaretime_, other->nextwelfaretime_);
    std::swap(nextbuildtime_, other->nextbuildtime_);
    std::swap(progress_, other->progress_);
    restmaterials_.Swap(&other->restmaterials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBuilding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBuilding_descriptor_;
  metadata.reflection = GuildBuilding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBuildingData::kBuildingsFieldNumber;
const int GuildBuildingData::kVersionFieldNumber;
#endif  // !_MSC_VER

GuildBuildingData::GuildBuildingData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildBuildingData)
}

void GuildBuildingData::InitAsDefaultInstance() {
}

GuildBuildingData::GuildBuildingData(const GuildBuildingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildBuildingData)
}

void GuildBuildingData::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBuildingData::~GuildBuildingData() {
  // @@protoc_insertion_point(destructor:Cmd.GuildBuildingData)
  SharedDtor();
}

void GuildBuildingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBuildingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBuildingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBuildingData_descriptor_;
}

const GuildBuildingData& GuildBuildingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildBuildingData* GuildBuildingData::default_instance_ = NULL;

GuildBuildingData* GuildBuildingData::New() const {
  return new GuildBuildingData;
}

void GuildBuildingData::Clear() {
  version_ = 0u;
  buildings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBuildingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildBuildingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.GuildBuilding buildings = 1;
      case 1: {
        if (tag == 10) {
         parse_buildings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_buildings;
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint32 version = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildBuildingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildBuildingData)
  return false;
#undef DO_
}

void GuildBuildingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildBuildingData)
  // repeated .Cmd.GuildBuilding buildings = 1;
  for (int i = 0; i < this->buildings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buildings(i), output);
  }

  // optional uint32 version = 2 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildBuildingData)
}

::google::protobuf::uint8* GuildBuildingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildBuildingData)
  // repeated .Cmd.GuildBuilding buildings = 1;
  for (int i = 0; i < this->buildings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buildings(i), target);
  }

  // optional uint32 version = 2 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildBuildingData)
  return target;
}

int GuildBuildingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 version = 2 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.GuildBuilding buildings = 1;
  total_size += 1 * this->buildings_size();
  for (int i = 0; i < this->buildings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBuildingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBuildingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBuildingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBuildingData::MergeFrom(const GuildBuildingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildings_.MergeFrom(from.buildings_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBuildingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBuildingData::CopyFrom(const GuildBuildingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBuildingData::IsInitialized() const {

  return true;
}

void GuildBuildingData::Swap(GuildBuildingData* other) {
  if (other != this) {
    buildings_.Swap(&other->buildings_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBuildingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBuildingData_descriptor_;
  metadata.reflection = GuildBuildingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildChallenge::kIdFieldNumber;
const int GuildChallenge::kProgressFieldNumber;
const int GuildChallenge::kRewardFieldNumber;
const int GuildChallenge::kExtrarewardFieldNumber;
#endif  // !_MSC_VER

GuildChallenge::GuildChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildChallenge)
}

void GuildChallenge::InitAsDefaultInstance() {
}

GuildChallenge::GuildChallenge(const GuildChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildChallenge)
}

void GuildChallenge::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  progress_ = 0u;
  reward_ = false;
  extrareward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildChallenge::~GuildChallenge() {
  // @@protoc_insertion_point(destructor:Cmd.GuildChallenge)
  SharedDtor();
}

void GuildChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildChallenge_descriptor_;
}

const GuildChallenge& GuildChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildChallenge* GuildChallenge::default_instance_ = NULL;

GuildChallenge* GuildChallenge::New() const {
  return new GuildChallenge;
}

void GuildChallenge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildChallenge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, extrareward_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // optional bool reward = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_extrareward;
        break;
      }

      // optional bool extrareward = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_extrareward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extrareward_)));
          set_has_extrareward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildChallenge)
  return false;
#undef DO_
}

void GuildChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildChallenge)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 progress = 2 [default = 0];
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->progress(), output);
  }

  // optional bool reward = 3 [default = false];
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reward(), output);
  }

  // optional bool extrareward = 4 [default = false];
  if (has_extrareward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->extrareward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildChallenge)
}

::google::protobuf::uint8* GuildChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildChallenge)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 progress = 2 [default = 0];
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->progress(), target);
  }

  // optional bool reward = 3 [default = false];
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reward(), target);
  }

  // optional bool extrareward = 4 [default = false];
  if (has_extrareward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->extrareward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildChallenge)
  return target;
}

int GuildChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 progress = 2 [default = 0];
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional bool reward = 3 [default = false];
    if (has_reward()) {
      total_size += 1 + 1;
    }

    // optional bool extrareward = 4 [default = false];
    if (has_extrareward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildChallenge::MergeFrom(const GuildChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_extrareward()) {
      set_extrareward(from.extrareward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildChallenge::CopyFrom(const GuildChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildChallenge::IsInitialized() const {

  return true;
}

void GuildChallenge::Swap(GuildChallenge* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(progress_, other->progress_);
    std::swap(reward_, other->reward_);
    std::swap(extrareward_, other->extrareward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildChallenge_descriptor_;
  metadata.reflection = GuildChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildChallengeData::kChallengesFieldNumber;
#endif  // !_MSC_VER

GuildChallengeData::GuildChallengeData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildChallengeData)
}

void GuildChallengeData::InitAsDefaultInstance() {
}

GuildChallengeData::GuildChallengeData(const GuildChallengeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildChallengeData)
}

void GuildChallengeData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildChallengeData::~GuildChallengeData() {
  // @@protoc_insertion_point(destructor:Cmd.GuildChallengeData)
  SharedDtor();
}

void GuildChallengeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildChallengeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildChallengeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildChallengeData_descriptor_;
}

const GuildChallengeData& GuildChallengeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildChallengeData* GuildChallengeData::default_instance_ = NULL;

GuildChallengeData* GuildChallengeData::New() const {
  return new GuildChallengeData;
}

void GuildChallengeData::Clear() {
  challenges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildChallengeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildChallengeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.GuildChallenge challenges = 1;
      case 1: {
        if (tag == 10) {
         parse_challenges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challenges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_challenges;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildChallengeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildChallengeData)
  return false;
#undef DO_
}

void GuildChallengeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildChallengeData)
  // repeated .Cmd.GuildChallenge challenges = 1;
  for (int i = 0; i < this->challenges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->challenges(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildChallengeData)
}

::google::protobuf::uint8* GuildChallengeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildChallengeData)
  // repeated .Cmd.GuildChallenge challenges = 1;
  for (int i = 0; i < this->challenges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->challenges(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildChallengeData)
  return target;
}

int GuildChallengeData::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.GuildChallenge challenges = 1;
  total_size += 1 * this->challenges_size();
  for (int i = 0; i < this->challenges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->challenges(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildChallengeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildChallengeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildChallengeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildChallengeData::MergeFrom(const GuildChallengeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  challenges_.MergeFrom(from.challenges_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildChallengeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildChallengeData::CopyFrom(const GuildChallengeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildChallengeData::IsInitialized() const {

  return true;
}

void GuildChallengeData::Swap(GuildChallengeData* other) {
  if (other != this) {
    challenges_.Swap(&other->challenges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildChallengeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildChallengeData_descriptor_;
  metadata.reflection = GuildChallengeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWelfareItem::kTypeFieldNumber;
const int GuildWelfareItem::kIdFieldNumber;
const int GuildWelfareItem::kSourceFieldNumber;
const int GuildWelfareItem::kRewardidFieldNumber;
const int GuildWelfareItem::kCreatetimeFieldNumber;
const int GuildWelfareItem::kOverduetimeFieldNumber;
const int GuildWelfareItem::kCharidsFieldNumber;
const int GuildWelfareItem::kOwnernameFieldNumber;
const int GuildWelfareItem::kSourceidFieldNumber;
const int GuildWelfareItem::kEventguidFieldNumber;
const int GuildWelfareItem::kIndexFieldNumber;
#endif  // !_MSC_VER

GuildWelfareItem::GuildWelfareItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildWelfareItem)
}

void GuildWelfareItem::InitAsDefaultInstance() {
}

GuildWelfareItem::GuildWelfareItem(const GuildWelfareItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildWelfareItem)
}

void GuildWelfareItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  source_ = 0;
  rewardid_ = 0u;
  createtime_ = 0u;
  overduetime_ = 0u;
  ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceid_ = 0u;
  eventguid_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWelfareItem::~GuildWelfareItem() {
  // @@protoc_insertion_point(destructor:Cmd.GuildWelfareItem)
  SharedDtor();
}

void GuildWelfareItem::SharedDtor() {
  if (ownername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ownername_;
  }
  if (this != default_instance_) {
  }
}

void GuildWelfareItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWelfareItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWelfareItem_descriptor_;
}

const GuildWelfareItem& GuildWelfareItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildWelfareItem* GuildWelfareItem::default_instance_ = NULL;

GuildWelfareItem* GuildWelfareItem::New() const {
  return new GuildWelfareItem;
}

void GuildWelfareItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildWelfareItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(id_, createtime_);
    overduetime_ = 0u;
    if (has_ownername()) {
      if (ownername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ownername_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(eventguid_, index_);
    sourceid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  charids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWelfareItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildWelfareItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EGuildWelfare type = 1 [default = EGUILDWELFARE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildWelfare_IsValid(value)) {
            set_type(static_cast< ::Cmd::EGuildWelfare >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_source;
        break;
      }

      // optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
      case 3: {
        if (tag == 24) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESource_IsValid(value)) {
            set_source(static_cast< ::Cmd::ESource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rewardid;
        break;
      }

      // optional uint32 rewardid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_rewardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_createtime;
        break;
      }

      // optional uint32 createtime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_overduetime;
        break;
      }

      // optional uint32 overduetime = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_overduetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overduetime_)));
          set_has_overduetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_charids;
        break;
      }

      // repeated uint64 charids = 7;
      case 7: {
        if (tag == 56) {
         parse_charids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_charids())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_charids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_charids;
        if (input->ExpectTag(66)) goto parse_ownername;
        break;
      }

      // optional string ownername = 8;
      case 8: {
        if (tag == 66) {
         parse_ownername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ownername().data(), this->ownername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ownername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sourceid;
        break;
      }

      // optional uint32 sourceid = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_sourceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eventguid;
        break;
      }

      // optional uint32 eventguid = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_eventguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventguid_)));
          set_has_eventguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_index;
        break;
      }

      // optional uint32 index = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildWelfareItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildWelfareItem)
  return false;
#undef DO_
}

void GuildWelfareItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildWelfareItem)
  // optional .Cmd.EGuildWelfare type = 1 [default = EGUILDWELFARE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 id = 2 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->source(), output);
  }

  // optional uint32 rewardid = 4 [default = 0];
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rewardid(), output);
  }

  // optional uint32 createtime = 5 [default = 0];
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->createtime(), output);
  }

  // optional uint32 overduetime = 6 [default = 0];
  if (has_overduetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->overduetime(), output);
  }

  // repeated uint64 charids = 7;
  for (int i = 0; i < this->charids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->charids(i), output);
  }

  // optional string ownername = 8;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ownername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ownername(), output);
  }

  // optional uint32 sourceid = 9 [default = 0];
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sourceid(), output);
  }

  // optional uint32 eventguid = 10 [default = 0];
  if (has_eventguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->eventguid(), output);
  }

  // optional uint32 index = 11 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildWelfareItem)
}

::google::protobuf::uint8* GuildWelfareItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildWelfareItem)
  // optional .Cmd.EGuildWelfare type = 1 [default = EGUILDWELFARE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 id = 2 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->source(), target);
  }

  // optional uint32 rewardid = 4 [default = 0];
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rewardid(), target);
  }

  // optional uint32 createtime = 5 [default = 0];
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->createtime(), target);
  }

  // optional uint32 overduetime = 6 [default = 0];
  if (has_overduetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->overduetime(), target);
  }

  // repeated uint64 charids = 7;
  for (int i = 0; i < this->charids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->charids(i), target);
  }

  // optional string ownername = 8;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ownername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ownername(), target);
  }

  // optional uint32 sourceid = 9 [default = 0];
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sourceid(), target);
  }

  // optional uint32 eventguid = 10 [default = 0];
  if (has_eventguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->eventguid(), target);
  }

  // optional uint32 index = 11 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildWelfareItem)
  return target;
}

int GuildWelfareItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EGuildWelfare type = 1 [default = EGUILDWELFARE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 id = 2 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional uint32 rewardid = 4 [default = 0];
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

    // optional uint32 createtime = 5 [default = 0];
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // optional uint32 overduetime = 6 [default = 0];
    if (has_overduetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->overduetime());
    }

    // optional string ownername = 8;
    if (has_ownername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ownername());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sourceid = 9 [default = 0];
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }

    // optional uint32 eventguid = 10 [default = 0];
    if (has_eventguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventguid());
    }

    // optional uint32 index = 11 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  // repeated uint64 charids = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->charids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->charids(i));
    }
    total_size += 1 * this->charids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWelfareItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWelfareItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWelfareItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWelfareItem::MergeFrom(const GuildWelfareItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  charids_.MergeFrom(from.charids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_overduetime()) {
      set_overduetime(from.overduetime());
    }
    if (from.has_ownername()) {
      set_ownername(from.ownername());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_eventguid()) {
      set_eventguid(from.eventguid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWelfareItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWelfareItem::CopyFrom(const GuildWelfareItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWelfareItem::IsInitialized() const {

  return true;
}

void GuildWelfareItem::Swap(GuildWelfareItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(source_, other->source_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(createtime_, other->createtime_);
    std::swap(overduetime_, other->overduetime_);
    charids_.Swap(&other->charids_);
    std::swap(ownername_, other->ownername_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(eventguid_, other->eventguid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWelfareItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWelfareItem_descriptor_;
  metadata.reflection = GuildWelfareItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWelfare::kItemsFieldNumber;
#endif  // !_MSC_VER

GuildWelfare::GuildWelfare()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildWelfare)
}

void GuildWelfare::InitAsDefaultInstance() {
}

GuildWelfare::GuildWelfare(const GuildWelfare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildWelfare)
}

void GuildWelfare::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWelfare::~GuildWelfare() {
  // @@protoc_insertion_point(destructor:Cmd.GuildWelfare)
  SharedDtor();
}

void GuildWelfare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWelfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWelfare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWelfare_descriptor_;
}

const GuildWelfare& GuildWelfare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildWelfare* GuildWelfare::default_instance_ = NULL;

GuildWelfare* GuildWelfare::New() const {
  return new GuildWelfare;
}

void GuildWelfare::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWelfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildWelfare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.GuildWelfareItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildWelfare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildWelfare)
  return false;
#undef DO_
}

void GuildWelfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildWelfare)
  // repeated .Cmd.GuildWelfareItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildWelfare)
}

::google::protobuf::uint8* GuildWelfare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildWelfare)
  // repeated .Cmd.GuildWelfareItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildWelfare)
  return target;
}

int GuildWelfare::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.GuildWelfareItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWelfare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWelfare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWelfare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWelfare::MergeFrom(const GuildWelfare& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWelfare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWelfare::CopyFrom(const GuildWelfare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWelfare::IsInitialized() const {

  return true;
}

void GuildWelfare::Swap(GuildWelfare* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWelfare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWelfare_descriptor_;
  metadata.reflection = GuildWelfare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildArtifactItem::kGuidFieldNumber;
const int GuildArtifactItem::kItemidFieldNumber;
const int GuildArtifactItem::kDistributecountFieldNumber;
const int GuildArtifactItem::kRetrievetimeFieldNumber;
const int GuildArtifactItem::kOwneridFieldNumber;
#endif  // !_MSC_VER

GuildArtifactItem::GuildArtifactItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildArtifactItem)
}

void GuildArtifactItem::InitAsDefaultInstance() {
}

GuildArtifactItem::GuildArtifactItem(const GuildArtifactItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildArtifactItem)
}

void GuildArtifactItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemid_ = 0u;
  distributecount_ = 0u;
  retrievetime_ = 0u;
  ownerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildArtifactItem::~GuildArtifactItem() {
  // @@protoc_insertion_point(destructor:Cmd.GuildArtifactItem)
  SharedDtor();
}

void GuildArtifactItem::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void GuildArtifactItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildArtifactItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildArtifactItem_descriptor_;
}

const GuildArtifactItem& GuildArtifactItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildArtifactItem* GuildArtifactItem::default_instance_ = NULL;

GuildArtifactItem* GuildArtifactItem::New() const {
  return new GuildArtifactItem;
}

void GuildArtifactItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildArtifactItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(itemid_, retrievetime_);
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildArtifactItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildArtifactItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_distributecount;
        break;
      }

      // optional uint32 distributecount = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_distributecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distributecount_)));
          set_has_distributecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_retrievetime;
        break;
      }

      // optional uint32 retrievetime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_retrievetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retrievetime_)));
          set_has_retrievetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ownerid;
        break;
      }

      // optional uint64 ownerid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildArtifactItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildArtifactItem)
  return false;
#undef DO_
}

void GuildArtifactItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildArtifactItem)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guid(), output);
  }

  // optional uint32 itemid = 2 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional uint32 distributecount = 3 [default = 0];
  if (has_distributecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->distributecount(), output);
  }

  // optional uint32 retrievetime = 4 [default = 0];
  if (has_retrievetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->retrievetime(), output);
  }

  // optional uint64 ownerid = 5 [default = 0];
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ownerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildArtifactItem)
}

::google::protobuf::uint8* GuildArtifactItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildArtifactItem)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }

  // optional uint32 itemid = 2 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // optional uint32 distributecount = 3 [default = 0];
  if (has_distributecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->distributecount(), target);
  }

  // optional uint32 retrievetime = 4 [default = 0];
  if (has_retrievetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->retrievetime(), target);
  }

  // optional uint64 ownerid = 5 [default = 0];
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ownerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildArtifactItem)
  return target;
}

int GuildArtifactItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional uint32 itemid = 2 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 distributecount = 3 [default = 0];
    if (has_distributecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->distributecount());
    }

    // optional uint32 retrievetime = 4 [default = 0];
    if (has_retrievetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retrievetime());
    }

    // optional uint64 ownerid = 5 [default = 0];
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildArtifactItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildArtifactItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildArtifactItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildArtifactItem::MergeFrom(const GuildArtifactItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_distributecount()) {
      set_distributecount(from.distributecount());
    }
    if (from.has_retrievetime()) {
      set_retrievetime(from.retrievetime());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildArtifactItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildArtifactItem::CopyFrom(const GuildArtifactItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildArtifactItem::IsInitialized() const {

  return true;
}

void GuildArtifactItem::Swap(GuildArtifactItem* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(itemid_, other->itemid_);
    std::swap(distributecount_, other->distributecount_);
    std::swap(retrievetime_, other->retrievetime_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildArtifactItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildArtifactItem_descriptor_;
  metadata.reflection = GuildArtifactItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildArtifactData::kTypeFieldNumber;
const int GuildArtifactData::kProducecountFieldNumber;
const int GuildArtifactData::kMaxlevelFieldNumber;
#endif  // !_MSC_VER

GuildArtifactData::GuildArtifactData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildArtifactData)
}

void GuildArtifactData::InitAsDefaultInstance() {
}

GuildArtifactData::GuildArtifactData(const GuildArtifactData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildArtifactData)
}

void GuildArtifactData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  producecount_ = 0u;
  maxlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildArtifactData::~GuildArtifactData() {
  // @@protoc_insertion_point(destructor:Cmd.GuildArtifactData)
  SharedDtor();
}

void GuildArtifactData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildArtifactData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildArtifactData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildArtifactData_descriptor_;
}

const GuildArtifactData& GuildArtifactData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildArtifactData* GuildArtifactData::default_instance_ = NULL;

GuildArtifactData* GuildArtifactData::New() const {
  return new GuildArtifactData;
}

void GuildArtifactData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildArtifactData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, maxlevel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildArtifactData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildArtifactData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_producecount;
        break;
      }

      // optional uint32 producecount = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_producecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &producecount_)));
          set_has_producecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxlevel;
        break;
      }

      // optional uint32 maxlevel = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_maxlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlevel_)));
          set_has_maxlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildArtifactData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildArtifactData)
  return false;
#undef DO_
}

void GuildArtifactData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildArtifactData)
  // optional uint32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 producecount = 2 [default = 0];
  if (has_producecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->producecount(), output);
  }

  // optional uint32 maxlevel = 3 [default = 0];
  if (has_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildArtifactData)
}

::google::protobuf::uint8* GuildArtifactData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildArtifactData)
  // optional uint32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 producecount = 2 [default = 0];
  if (has_producecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->producecount(), target);
  }

  // optional uint32 maxlevel = 3 [default = 0];
  if (has_maxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildArtifactData)
  return target;
}

int GuildArtifactData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 producecount = 2 [default = 0];
    if (has_producecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->producecount());
    }

    // optional uint32 maxlevel = 3 [default = 0];
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildArtifactData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildArtifactData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildArtifactData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildArtifactData::MergeFrom(const GuildArtifactData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_producecount()) {
      set_producecount(from.producecount());
    }
    if (from.has_maxlevel()) {
      set_maxlevel(from.maxlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildArtifactData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildArtifactData::CopyFrom(const GuildArtifactData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildArtifactData::IsInitialized() const {

  return true;
}

void GuildArtifactData::Swap(GuildArtifactData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(producecount_, other->producecount_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildArtifactData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildArtifactData_descriptor_;
  metadata.reflection = GuildArtifactData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildArtifact::kItemsFieldNumber;
const int GuildArtifact::kDatasFieldNumber;
#endif  // !_MSC_VER

GuildArtifact::GuildArtifact()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildArtifact)
}

void GuildArtifact::InitAsDefaultInstance() {
}

GuildArtifact::GuildArtifact(const GuildArtifact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildArtifact)
}

void GuildArtifact::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildArtifact::~GuildArtifact() {
  // @@protoc_insertion_point(destructor:Cmd.GuildArtifact)
  SharedDtor();
}

void GuildArtifact::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildArtifact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildArtifact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildArtifact_descriptor_;
}

const GuildArtifact& GuildArtifact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildArtifact* GuildArtifact::default_instance_ = NULL;

GuildArtifact* GuildArtifact::New() const {
  return new GuildArtifact;
}

void GuildArtifact::Clear() {
  items_.Clear();
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildArtifact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildArtifact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.GuildArtifactItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }

      // repeated .Cmd.GuildArtifactData datas = 2;
      case 2: {
        if (tag == 18) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildArtifact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildArtifact)
  return false;
#undef DO_
}

void GuildArtifact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildArtifact)
  // repeated .Cmd.GuildArtifactItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // repeated .Cmd.GuildArtifactData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildArtifact)
}

::google::protobuf::uint8* GuildArtifact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildArtifact)
  // repeated .Cmd.GuildArtifactItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // repeated .Cmd.GuildArtifactData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildArtifact)
  return target;
}

int GuildArtifact::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.GuildArtifactItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .Cmd.GuildArtifactData datas = 2;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildArtifact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildArtifact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildArtifact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildArtifact::MergeFrom(const GuildArtifact& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildArtifact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildArtifact::CopyFrom(const GuildArtifact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildArtifact::IsInitialized() const {

  return true;
}

void GuildArtifact::Swap(GuildArtifact* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildArtifact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildArtifact_descriptor_;
  metadata.reflection = GuildArtifact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GQuest::kCharidFieldNumber;
const int GQuest::kDatasFieldNumber;
#endif  // !_MSC_VER

GQuest::GQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GQuest)
}

void GQuest::InitAsDefaultInstance() {
}

GQuest::GQuest(const GQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GQuest)
}

void GQuest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GQuest::~GQuest() {
  // @@protoc_insertion_point(destructor:Cmd.GQuest)
  SharedDtor();
}

void GQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GQuest_descriptor_;
}

const GQuest& GQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GQuest* GQuest::default_instance_ = NULL;

GQuest* GQuest::New() const {
  return new GQuest;
}

void GQuest::Clear() {
  charid_ = GOOGLE_ULONGLONG(0);
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }

      // repeated .Cmd.QuestData datas = 2;
      case 2: {
        if (tag == 18) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GQuest)
  return false;
#undef DO_
}

void GQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GQuest)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // repeated .Cmd.QuestData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GQuest)
}

::google::protobuf::uint8* GQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GQuest)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // repeated .Cmd.QuestData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GQuest)
  return target;
}

int GQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.QuestData datas = 2;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GQuest::MergeFrom(const GQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GQuest::CopyFrom(const GQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GQuest::IsInitialized() const {

  return true;
}

void GQuest::Swap(GQuest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GQuest_descriptor_;
  metadata.reflection = GQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGQuest::kQuestsFieldNumber;
const int BlobGQuest::kAcceptsFieldNumber;
const int BlobGQuest::kSubmitFieldNumber;
#endif  // !_MSC_VER

BlobGQuest::BlobGQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGQuest)
}

void BlobGQuest::InitAsDefaultInstance() {
}

BlobGQuest::BlobGQuest(const BlobGQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGQuest)
}

void BlobGQuest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGQuest::~BlobGQuest() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGQuest)
  SharedDtor();
}

void BlobGQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGQuest_descriptor_;
}

const BlobGQuest& BlobGQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BlobGQuest* BlobGQuest::default_instance_ = NULL;

BlobGQuest* BlobGQuest::New() const {
  return new BlobGQuest;
}

void BlobGQuest::Clear() {
  quests_.Clear();
  accepts_.Clear();
  submit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.GQuest quests = 1;
      case 1: {
        if (tag == 10) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_quests;
        if (input->ExpectTag(16)) goto parse_accepts;
        break;
      }

      // repeated uint32 accepts = 2;
      case 2: {
        if (tag == 16) {
         parse_accepts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_accepts())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_accepts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accepts;
        if (input->ExpectTag(24)) goto parse_submit;
        break;
      }

      // repeated uint32 submit = 3;
      case 3: {
        if (tag == 24) {
         parse_submit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_submit())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_submit())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_submit;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGQuest)
  return false;
#undef DO_
}

void BlobGQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGQuest)
  // repeated .Cmd.GQuest quests = 1;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quests(i), output);
  }

  // repeated uint32 accepts = 2;
  for (int i = 0; i < this->accepts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->accepts(i), output);
  }

  // repeated uint32 submit = 3;
  for (int i = 0; i < this->submit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->submit(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGQuest)
}

::google::protobuf::uint8* BlobGQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGQuest)
  // repeated .Cmd.GQuest quests = 1;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quests(i), target);
  }

  // repeated uint32 accepts = 2;
  for (int i = 0; i < this->accepts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->accepts(i), target);
  }

  // repeated uint32 submit = 3;
  for (int i = 0; i < this->submit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->submit(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGQuest)
  return target;
}

int BlobGQuest::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.GQuest quests = 1;
  total_size += 1 * this->quests_size();
  for (int i = 0; i < this->quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quests(i));
  }

  // repeated uint32 accepts = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->accepts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->accepts(i));
    }
    total_size += 1 * this->accepts_size() + data_size;
  }

  // repeated uint32 submit = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->submit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->submit(i));
    }
    total_size += 1 * this->submit_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGQuest::MergeFrom(const BlobGQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  quests_.MergeFrom(from.quests_);
  accepts_.MergeFrom(from.accepts_);
  submit_.MergeFrom(from.submit_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGQuest::CopyFrom(const BlobGQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGQuest::IsInitialized() const {

  return true;
}

void BlobGQuest::Swap(BlobGQuest* other) {
  if (other != this) {
    quests_.Swap(&other->quests_);
    accepts_.Swap(&other->accepts_);
    submit_.Swap(&other->submit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGQuest_descriptor_;
  metadata.reflection = BlobGQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGGvg::kPartinTimeFieldNumber;
const int BlobGGvg::kPartinUsersFieldNumber;
const int BlobGGvg::kSugvgtimeFieldNumber;
const int BlobGGvg::kSugvgcntFieldNumber;
const int BlobGGvg::kSugvgscoreFieldNumber;
const int BlobGGvg::kVersionFieldNumber;
#endif  // !_MSC_VER

BlobGGvg::BlobGGvg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGGvg)
}

void BlobGGvg::InitAsDefaultInstance() {
}

BlobGGvg::BlobGGvg(const BlobGGvg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGGvg)
}

void BlobGGvg::SharedCtor() {
  _cached_size_ = 0;
  partin_time_ = 0u;
  sugvgtime_ = 0u;
  sugvgcnt_ = 0u;
  sugvgscore_ = 0u;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGGvg::~BlobGGvg() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGGvg)
  SharedDtor();
}

void BlobGGvg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGGvg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGGvg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGGvg_descriptor_;
}

const BlobGGvg& BlobGGvg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BlobGGvg* BlobGGvg::default_instance_ = NULL;

BlobGGvg* BlobGGvg::New() const {
  return new BlobGGvg;
}

void BlobGGvg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobGGvg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 61) {
    ZR_(partin_time_, version_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  partin_users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGGvg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGGvg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 partin_time = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partin_time_)));
          set_has_partin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_partin_users;
        break;
      }

      // repeated uint64 partin_users = 2;
      case 2: {
        if (tag == 16) {
         parse_partin_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_partin_users())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_partin_users())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_partin_users;
        if (input->ExpectTag(24)) goto parse_sugvgtime;
        break;
      }

      // optional uint32 sugvgtime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_sugvgtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sugvgtime_)));
          set_has_sugvgtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sugvgcnt;
        break;
      }

      // optional uint32 sugvgcnt = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_sugvgcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sugvgcnt_)));
          set_has_sugvgcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sugvgscore;
        break;
      }

      // optional uint32 sugvgscore = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_sugvgscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sugvgscore_)));
          set_has_sugvgscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_version;
        break;
      }

      // optional uint32 version = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGGvg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGGvg)
  return false;
#undef DO_
}

void BlobGGvg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGGvg)
  // optional uint32 partin_time = 1 [default = 0];
  if (has_partin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->partin_time(), output);
  }

  // repeated uint64 partin_users = 2;
  for (int i = 0; i < this->partin_users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->partin_users(i), output);
  }

  // optional uint32 sugvgtime = 3 [default = 0];
  if (has_sugvgtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sugvgtime(), output);
  }

  // optional uint32 sugvgcnt = 4 [default = 0];
  if (has_sugvgcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sugvgcnt(), output);
  }

  // optional uint32 sugvgscore = 5 [default = 0];
  if (has_sugvgscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sugvgscore(), output);
  }

  // optional uint32 version = 6 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGGvg)
}

::google::protobuf::uint8* BlobGGvg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGGvg)
  // optional uint32 partin_time = 1 [default = 0];
  if (has_partin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->partin_time(), target);
  }

  // repeated uint64 partin_users = 2;
  for (int i = 0; i < this->partin_users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->partin_users(i), target);
  }

  // optional uint32 sugvgtime = 3 [default = 0];
  if (has_sugvgtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sugvgtime(), target);
  }

  // optional uint32 sugvgcnt = 4 [default = 0];
  if (has_sugvgcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sugvgcnt(), target);
  }

  // optional uint32 sugvgscore = 5 [default = 0];
  if (has_sugvgscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sugvgscore(), target);
  }

  // optional uint32 version = 6 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGGvg)
  return target;
}

int BlobGGvg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 partin_time = 1 [default = 0];
    if (has_partin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partin_time());
    }

    // optional uint32 sugvgtime = 3 [default = 0];
    if (has_sugvgtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sugvgtime());
    }

    // optional uint32 sugvgcnt = 4 [default = 0];
    if (has_sugvgcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sugvgcnt());
    }

    // optional uint32 sugvgscore = 5 [default = 0];
    if (has_sugvgscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sugvgscore());
    }

    // optional uint32 version = 6 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated uint64 partin_users = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->partin_users_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->partin_users(i));
    }
    total_size += 1 * this->partin_users_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGGvg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGGvg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGGvg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGGvg::MergeFrom(const BlobGGvg& from) {
  GOOGLE_CHECK_NE(&from, this);
  partin_users_.MergeFrom(from.partin_users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partin_time()) {
      set_partin_time(from.partin_time());
    }
    if (from.has_sugvgtime()) {
      set_sugvgtime(from.sugvgtime());
    }
    if (from.has_sugvgcnt()) {
      set_sugvgcnt(from.sugvgcnt());
    }
    if (from.has_sugvgscore()) {
      set_sugvgscore(from.sugvgscore());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGGvg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGGvg::CopyFrom(const BlobGGvg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGGvg::IsInitialized() const {

  return true;
}

void BlobGGvg::Swap(BlobGGvg* other) {
  if (other != this) {
    std::swap(partin_time_, other->partin_time_);
    partin_users_.Swap(&other->partin_users_);
    std::swap(sugvgtime_, other->sugvgtime_);
    std::swap(sugvgcnt_, other->sugvgcnt_);
    std::swap(sugvgscore_, other->sugvgscore_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGGvg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGGvg_descriptor_;
  metadata.reflection = BlobGGvg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildTreasure::kIdFieldNumber;
const int GuildTreasure::kCountFieldNumber;
#endif  // !_MSC_VER

GuildTreasure::GuildTreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildTreasure)
}

void GuildTreasure::InitAsDefaultInstance() {
}

GuildTreasure::GuildTreasure(const GuildTreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildTreasure)
}

void GuildTreasure::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildTreasure::~GuildTreasure() {
  // @@protoc_insertion_point(destructor:Cmd.GuildTreasure)
  SharedDtor();
}

void GuildTreasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildTreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildTreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildTreasure_descriptor_;
}

const GuildTreasure& GuildTreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildTreasure* GuildTreasure::default_instance_ = NULL;

GuildTreasure* GuildTreasure::New() const {
  return new GuildTreasure;
}

void GuildTreasure::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildTreasure*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildTreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildTreasure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildTreasure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildTreasure)
  return false;
#undef DO_
}

void GuildTreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildTreasure)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildTreasure)
}

::google::protobuf::uint8* GuildTreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildTreasure)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildTreasure)
  return target;
}

int GuildTreasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildTreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildTreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildTreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildTreasure::MergeFrom(const GuildTreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildTreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildTreasure::CopyFrom(const GuildTreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildTreasure::IsInitialized() const {

  return true;
}

void GuildTreasure::Swap(GuildTreasure* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildTreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildTreasure_descriptor_;
  metadata.reflection = GuildTreasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureItem::kCharidFieldNumber;
const int TreasureItem::kNameFieldNumber;
const int TreasureItem::kDatasFieldNumber;
#endif  // !_MSC_VER

TreasureItem::TreasureItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TreasureItem)
}

void TreasureItem::InitAsDefaultInstance() {
}

TreasureItem::TreasureItem(const TreasureItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TreasureItem)
}

void TreasureItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureItem::~TreasureItem() {
  // @@protoc_insertion_point(destructor:Cmd.TreasureItem)
  SharedDtor();
}

void TreasureItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TreasureItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureItem_descriptor_;
}

const TreasureItem& TreasureItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

TreasureItem* TreasureItem::default_instance_ = NULL;

TreasureItem* TreasureItem::New() const {
  return new TreasureItem;
}

void TreasureItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TreasureItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }

      // repeated .Cmd.ItemData datas = 2;
      case 2: {
        if (tag == 18) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TreasureItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TreasureItem)
  return false;
#undef DO_
}

void TreasureItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TreasureItem)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // repeated .Cmd.ItemData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datas(i), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TreasureItem)
}

::google::protobuf::uint8* TreasureItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TreasureItem)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // repeated .Cmd.ItemData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datas(i), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TreasureItem)
  return target;
}

int TreasureItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Cmd.ItemData datas = 2;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureItem::MergeFrom(const TreasureItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureItem::CopyFrom(const TreasureItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureItem::IsInitialized() const {

  return true;
}

void TreasureItem::Swap(TreasureItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureItem_descriptor_;
  metadata.reflection = TreasureItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureResult::kOwneridFieldNumber;
const int TreasureResult::kEventguidFieldNumber;
const int TreasureResult::kTreasureidFieldNumber;
const int TreasureResult::kTotalmemberFieldNumber;
const int TreasureResult::kStateFieldNumber;
const int TreasureResult::kItemsFieldNumber;
#endif  // !_MSC_VER

TreasureResult::TreasureResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TreasureResult)
}

void TreasureResult::InitAsDefaultInstance() {
}

TreasureResult::TreasureResult(const TreasureResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TreasureResult)
}

void TreasureResult::SharedCtor() {
  _cached_size_ = 0;
  ownerid_ = GOOGLE_ULONGLONG(0);
  eventguid_ = 0u;
  treasureid_ = 0u;
  totalmember_ = 0u;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureResult::~TreasureResult() {
  // @@protoc_insertion_point(destructor:Cmd.TreasureResult)
  SharedDtor();
}

void TreasureResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureResult_descriptor_;
}

const TreasureResult& TreasureResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

TreasureResult* TreasureResult::default_instance_ = NULL;

TreasureResult* TreasureResult::New() const {
  return new TreasureResult;
}

void TreasureResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TreasureResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ownerid_, state_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TreasureResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ownerid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eventguid;
        break;
      }

      // optional uint32 eventguid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_eventguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventguid_)));
          set_has_eventguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_treasureid;
        break;
      }

      // optional uint32 treasureid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_treasureid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treasureid_)));
          set_has_treasureid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .Cmd.TreasureItem items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectTag(40)) goto parse_totalmember;
        break;
      }

      // optional uint32 totalmember = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_totalmember:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalmember_)));
          set_has_totalmember();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional .Cmd.ETreasureState state = 6 [default = ETREASURESTATE_MIN];
      case 6: {
        if (tag == 48) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETreasureState_IsValid(value)) {
            set_state(static_cast< ::Cmd::ETreasureState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TreasureResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TreasureResult)
  return false;
#undef DO_
}

void TreasureResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TreasureResult)
  // optional uint64 ownerid = 1 [default = 0];
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ownerid(), output);
  }

  // optional uint32 eventguid = 2 [default = 0];
  if (has_eventguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eventguid(), output);
  }

  // optional uint32 treasureid = 3 [default = 0];
  if (has_treasureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->treasureid(), output);
  }

  // repeated .Cmd.TreasureItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  // optional uint32 totalmember = 5 [default = 0];
  if (has_totalmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->totalmember(), output);
  }

  // optional .Cmd.ETreasureState state = 6 [default = ETREASURESTATE_MIN];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TreasureResult)
}

::google::protobuf::uint8* TreasureResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TreasureResult)
  // optional uint64 ownerid = 1 [default = 0];
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ownerid(), target);
  }

  // optional uint32 eventguid = 2 [default = 0];
  if (has_eventguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eventguid(), target);
  }

  // optional uint32 treasureid = 3 [default = 0];
  if (has_treasureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->treasureid(), target);
  }

  // repeated .Cmd.TreasureItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  // optional uint32 totalmember = 5 [default = 0];
  if (has_totalmember()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->totalmember(), target);
  }

  // optional .Cmd.ETreasureState state = 6 [default = ETREASURESTATE_MIN];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TreasureResult)
  return target;
}

int TreasureResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ownerid = 1 [default = 0];
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

    // optional uint32 eventguid = 2 [default = 0];
    if (has_eventguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventguid());
    }

    // optional uint32 treasureid = 3 [default = 0];
    if (has_treasureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treasureid());
    }

    // optional uint32 totalmember = 5 [default = 0];
    if (has_totalmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalmember());
    }

    // optional .Cmd.ETreasureState state = 6 [default = ETREASURESTATE_MIN];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  // repeated .Cmd.TreasureItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureResult::MergeFrom(const TreasureResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_eventguid()) {
      set_eventguid(from.eventguid());
    }
    if (from.has_treasureid()) {
      set_treasureid(from.treasureid());
    }
    if (from.has_totalmember()) {
      set_totalmember(from.totalmember());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureResult::CopyFrom(const TreasureResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureResult::IsInitialized() const {

  return true;
}

void TreasureResult::Swap(TreasureResult* other) {
  if (other != this) {
    std::swap(ownerid_, other->ownerid_);
    std::swap(eventguid_, other->eventguid_);
    std::swap(treasureid_, other->treasureid_);
    std::swap(totalmember_, other->totalmember_);
    std::swap(state_, other->state_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureResult_descriptor_;
  metadata.reflection = TreasureResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGuildTreasure::kTreasuresFieldNumber;
const int BlobGuildTreasure::kResultFieldNumber;
#endif  // !_MSC_VER

BlobGuildTreasure::BlobGuildTreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGuildTreasure)
}

void BlobGuildTreasure::InitAsDefaultInstance() {
}

BlobGuildTreasure::BlobGuildTreasure(const BlobGuildTreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGuildTreasure)
}

void BlobGuildTreasure::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGuildTreasure::~BlobGuildTreasure() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGuildTreasure)
  SharedDtor();
}

void BlobGuildTreasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGuildTreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGuildTreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGuildTreasure_descriptor_;
}

const BlobGuildTreasure& BlobGuildTreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BlobGuildTreasure* BlobGuildTreasure::default_instance_ = NULL;

BlobGuildTreasure* BlobGuildTreasure::New() const {
  return new BlobGuildTreasure;
}

void BlobGuildTreasure::Clear() {
  treasures_.Clear();
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGuildTreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGuildTreasure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.GuildTreasure treasures = 1;
      case 1: {
        if (tag == 10) {
         parse_treasures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_treasures;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .Cmd.TreasureResult result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGuildTreasure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGuildTreasure)
  return false;
#undef DO_
}

void BlobGuildTreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGuildTreasure)
  // repeated .Cmd.GuildTreasure treasures = 1;
  for (int i = 0; i < this->treasures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->treasures(i), output);
  }

  // repeated .Cmd.TreasureResult result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGuildTreasure)
}

::google::protobuf::uint8* BlobGuildTreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGuildTreasure)
  // repeated .Cmd.GuildTreasure treasures = 1;
  for (int i = 0; i < this->treasures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->treasures(i), target);
  }

  // repeated .Cmd.TreasureResult result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGuildTreasure)
  return target;
}

int BlobGuildTreasure::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.GuildTreasure treasures = 1;
  total_size += 1 * this->treasures_size();
  for (int i = 0; i < this->treasures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasures(i));
  }

  // repeated .Cmd.TreasureResult result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGuildTreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGuildTreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGuildTreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGuildTreasure::MergeFrom(const BlobGuildTreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasures_.MergeFrom(from.treasures_);
  result_.MergeFrom(from.result_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGuildTreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGuildTreasure::CopyFrom(const BlobGuildTreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGuildTreasure::IsInitialized() const {

  return true;
}

void BlobGuildTreasure::Swap(BlobGuildTreasure* other) {
  if (other != this) {
    treasures_.Swap(&other->treasures_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGuildTreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGuildTreasure_descriptor_;
  metadata.reflection = BlobGuildTreasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGuildMisc::kVarFieldNumber;
const int BlobGuildMisc::kJobFieldNumber;
const int BlobGuildMisc::kDonatetime1FieldNumber;
const int BlobGuildMisc::kDonatetime2FieldNumber;
const int BlobGuildMisc::kQuestFieldNumber;
const int BlobGuildMisc::kNextquesttimeFieldNumber;
const int BlobGuildMisc::kDojomsgFieldNumber;
const int BlobGuildMisc::kDonatetime3FieldNumber;
const int BlobGuildMisc::kDonatetime4FieldNumber;
const int BlobGuildMisc::kRenametimeFieldNumber;
const int BlobGuildMisc::kCityGiveupTimeFieldNumber;
const int BlobGuildMisc::kAuthVersionFieldNumber;
const int BlobGuildMisc::kBuildingFieldNumber;
const int BlobGuildMisc::kOpenfunctionFieldNumber;
const int BlobGuildMisc::kChallengeFieldNumber;
const int BlobGuildMisc::kWelfareFieldNumber;
const int BlobGuildMisc::kArtifactFieldNumber;
const int BlobGuildMisc::kQuestsFieldNumber;
const int BlobGuildMisc::kTreasuresFieldNumber;
const int BlobGuildMisc::kGvgFieldNumber;
#endif  // !_MSC_VER

BlobGuildMisc::BlobGuildMisc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGuildMisc)
}

void BlobGuildMisc::InitAsDefaultInstance() {
  building_ = const_cast< ::Cmd::GuildBuildingData*>(&::Cmd::GuildBuildingData::default_instance());
  challenge_ = const_cast< ::Cmd::GuildChallengeData*>(&::Cmd::GuildChallengeData::default_instance());
  welfare_ = const_cast< ::Cmd::GuildWelfare*>(&::Cmd::GuildWelfare::default_instance());
  artifact_ = const_cast< ::Cmd::GuildArtifact*>(&::Cmd::GuildArtifact::default_instance());
  quests_ = const_cast< ::Cmd::BlobGQuest*>(&::Cmd::BlobGQuest::default_instance());
  treasures_ = const_cast< ::Cmd::BlobGuildTreasure*>(&::Cmd::BlobGuildTreasure::default_instance());
  gvg_ = const_cast< ::Cmd::BlobGGvg*>(&::Cmd::BlobGGvg::default_instance());
}

BlobGuildMisc::BlobGuildMisc(const BlobGuildMisc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGuildMisc)
}

void BlobGuildMisc::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  var_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  donatetime1_ = 0u;
  donatetime2_ = 0u;
  nextquesttime_ = 0u;
  donatetime3_ = 0u;
  donatetime4_ = 0u;
  renametime_ = 0u;
  city_giveup_time_ = 0u;
  auth_version_ = 0u;
  building_ = NULL;
  openfunction_ = GOOGLE_ULONGLONG(0);
  challenge_ = NULL;
  welfare_ = NULL;
  artifact_ = NULL;
  quests_ = NULL;
  treasures_ = NULL;
  gvg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGuildMisc::~BlobGuildMisc() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGuildMisc)
  SharedDtor();
}

void BlobGuildMisc::SharedDtor() {
  if (var_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete var_;
  }
  if (this != default_instance_) {
    delete building_;
    delete challenge_;
    delete welfare_;
    delete artifact_;
    delete quests_;
    delete treasures_;
    delete gvg_;
  }
}

void BlobGuildMisc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGuildMisc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGuildMisc_descriptor_;
}

const BlobGuildMisc& BlobGuildMisc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BlobGuildMisc* BlobGuildMisc::default_instance_ = NULL;

BlobGuildMisc* BlobGuildMisc::New() const {
  return new BlobGuildMisc;
}

void BlobGuildMisc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobGuildMisc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 173) {
    ZR_(donatetime1_, donatetime2_);
    ZR_(nextquesttime_, donatetime3_);
    if (has_var()) {
      if (var_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        var_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(donatetime4_, auth_version_);
    if (has_building()) {
      if (building_ != NULL) building_->::Cmd::GuildBuildingData::Clear();
    }
    openfunction_ = GOOGLE_ULONGLONG(0);
    if (has_challenge()) {
      if (challenge_ != NULL) challenge_->::Cmd::GuildChallengeData::Clear();
    }
    if (has_welfare()) {
      if (welfare_ != NULL) welfare_->::Cmd::GuildWelfare::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 983040) {
    if (has_artifact()) {
      if (artifact_ != NULL) artifact_->::Cmd::GuildArtifact::Clear();
    }
    if (has_quests()) {
      if (quests_ != NULL) quests_->::Cmd::BlobGQuest::Clear();
    }
    if (has_treasures()) {
      if (treasures_ != NULL) treasures_->::Cmd::BlobGuildTreasure::Clear();
    }
    if (has_gvg()) {
      if (gvg_ != NULL) gvg_->::Cmd::BlobGGvg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  job_.Clear();
  quest_.Clear();
  dojomsg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGuildMisc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGuildMisc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes var = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_var()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_job;
        break;
      }

      // repeated .Cmd.GuildJob job = 2;
      case 2: {
        if (tag == 18) {
         parse_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_job()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_job;
        if (input->ExpectTag(24)) goto parse_donatetime1;
        break;
      }

      // optional uint32 donatetime1 = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_donatetime1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatetime1_)));
          set_has_donatetime1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_donatetime2;
        break;
      }

      // optional uint32 donatetime2 = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_donatetime2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatetime2_)));
          set_has_donatetime2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_quest;
        break;
      }

      // repeated .Cmd.GuildQuest quest = 5;
      case 5: {
        if (tag == 42) {
         parse_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_quest;
        if (input->ExpectTag(48)) goto parse_nextquesttime;
        break;
      }

      // optional uint32 nextquesttime = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_nextquesttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextquesttime_)));
          set_has_nextquesttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_dojomsg;
        break;
      }

      // repeated .Cmd.DojoMsgBlob dojomsg = 7;
      case 7: {
        if (tag == 58) {
         parse_dojomsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dojomsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_dojomsg;
        if (input->ExpectTag(64)) goto parse_donatetime3;
        break;
      }

      // optional uint32 donatetime3 = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_donatetime3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatetime3_)));
          set_has_donatetime3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_donatetime4;
        break;
      }

      // optional uint32 donatetime4 = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_donatetime4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatetime4_)));
          set_has_donatetime4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_renametime;
        break;
      }

      // optional uint32 renametime = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_renametime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &renametime_)));
          set_has_renametime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_city_giveup_time;
        break;
      }

      // optional uint32 city_giveup_time = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_city_giveup_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_giveup_time_)));
          set_has_city_giveup_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_auth_version;
        break;
      }

      // optional uint32 auth_version = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_auth_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_version_)));
          set_has_auth_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_building;
        break;
      }

      // optional .Cmd.GuildBuildingData building = 13;
      case 13: {
        if (tag == 106) {
         parse_building:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_building()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_openfunction;
        break;
      }

      // optional uint64 openfunction = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_openfunction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &openfunction_)));
          set_has_openfunction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_challenge;
        break;
      }

      // optional .Cmd.GuildChallengeData challenge = 15;
      case 15: {
        if (tag == 122) {
         parse_challenge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challenge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_welfare;
        break;
      }

      // optional .Cmd.GuildWelfare welfare = 16;
      case 16: {
        if (tag == 130) {
         parse_welfare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_welfare()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_artifact;
        break;
      }

      // optional .Cmd.GuildArtifact artifact = 17;
      case 17: {
        if (tag == 138) {
         parse_artifact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_artifact()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_quests;
        break;
      }

      // optional .Cmd.BlobGQuest quests = 18;
      case 18: {
        if (tag == 146) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_treasures;
        break;
      }

      // optional .Cmd.BlobGuildTreasure treasures = 19;
      case 19: {
        if (tag == 154) {
         parse_treasures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_gvg;
        break;
      }

      // optional .Cmd.BlobGGvg gvg = 20;
      case 20: {
        if (tag == 162) {
         parse_gvg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gvg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGuildMisc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGuildMisc)
  return false;
#undef DO_
}

void BlobGuildMisc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGuildMisc)
  // optional bytes var = 1;
  if (has_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->var(), output);
  }

  // repeated .Cmd.GuildJob job = 2;
  for (int i = 0; i < this->job_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->job(i), output);
  }

  // optional uint32 donatetime1 = 3 [default = 0];
  if (has_donatetime1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->donatetime1(), output);
  }

  // optional uint32 donatetime2 = 4 [default = 0];
  if (has_donatetime2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->donatetime2(), output);
  }

  // repeated .Cmd.GuildQuest quest = 5;
  for (int i = 0; i < this->quest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->quest(i), output);
  }

  // optional uint32 nextquesttime = 6 [default = 0];
  if (has_nextquesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nextquesttime(), output);
  }

  // repeated .Cmd.DojoMsgBlob dojomsg = 7;
  for (int i = 0; i < this->dojomsg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->dojomsg(i), output);
  }

  // optional uint32 donatetime3 = 8 [default = 0];
  if (has_donatetime3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->donatetime3(), output);
  }

  // optional uint32 donatetime4 = 9 [default = 0];
  if (has_donatetime4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->donatetime4(), output);
  }

  // optional uint32 renametime = 10 [default = 0];
  if (has_renametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->renametime(), output);
  }

  // optional uint32 city_giveup_time = 11 [default = 0];
  if (has_city_giveup_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->city_giveup_time(), output);
  }

  // optional uint32 auth_version = 12 [default = 0];
  if (has_auth_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->auth_version(), output);
  }

  // optional .Cmd.GuildBuildingData building = 13;
  if (has_building()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->building(), output);
  }

  // optional uint64 openfunction = 14 [default = 0];
  if (has_openfunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->openfunction(), output);
  }

  // optional .Cmd.GuildChallengeData challenge = 15;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->challenge(), output);
  }

  // optional .Cmd.GuildWelfare welfare = 16;
  if (has_welfare()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->welfare(), output);
  }

  // optional .Cmd.GuildArtifact artifact = 17;
  if (has_artifact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->artifact(), output);
  }

  // optional .Cmd.BlobGQuest quests = 18;
  if (has_quests()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->quests(), output);
  }

  // optional .Cmd.BlobGuildTreasure treasures = 19;
  if (has_treasures()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->treasures(), output);
  }

  // optional .Cmd.BlobGGvg gvg = 20;
  if (has_gvg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->gvg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGuildMisc)
}

::google::protobuf::uint8* BlobGuildMisc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGuildMisc)
  // optional bytes var = 1;
  if (has_var()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->var(), target);
  }

  // repeated .Cmd.GuildJob job = 2;
  for (int i = 0; i < this->job_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->job(i), target);
  }

  // optional uint32 donatetime1 = 3 [default = 0];
  if (has_donatetime1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->donatetime1(), target);
  }

  // optional uint32 donatetime2 = 4 [default = 0];
  if (has_donatetime2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->donatetime2(), target);
  }

  // repeated .Cmd.GuildQuest quest = 5;
  for (int i = 0; i < this->quest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->quest(i), target);
  }

  // optional uint32 nextquesttime = 6 [default = 0];
  if (has_nextquesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->nextquesttime(), target);
  }

  // repeated .Cmd.DojoMsgBlob dojomsg = 7;
  for (int i = 0; i < this->dojomsg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->dojomsg(i), target);
  }

  // optional uint32 donatetime3 = 8 [default = 0];
  if (has_donatetime3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->donatetime3(), target);
  }

  // optional uint32 donatetime4 = 9 [default = 0];
  if (has_donatetime4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->donatetime4(), target);
  }

  // optional uint32 renametime = 10 [default = 0];
  if (has_renametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->renametime(), target);
  }

  // optional uint32 city_giveup_time = 11 [default = 0];
  if (has_city_giveup_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->city_giveup_time(), target);
  }

  // optional uint32 auth_version = 12 [default = 0];
  if (has_auth_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->auth_version(), target);
  }

  // optional .Cmd.GuildBuildingData building = 13;
  if (has_building()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->building(), target);
  }

  // optional uint64 openfunction = 14 [default = 0];
  if (has_openfunction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->openfunction(), target);
  }

  // optional .Cmd.GuildChallengeData challenge = 15;
  if (has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->challenge(), target);
  }

  // optional .Cmd.GuildWelfare welfare = 16;
  if (has_welfare()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->welfare(), target);
  }

  // optional .Cmd.GuildArtifact artifact = 17;
  if (has_artifact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->artifact(), target);
  }

  // optional .Cmd.BlobGQuest quests = 18;
  if (has_quests()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->quests(), target);
  }

  // optional .Cmd.BlobGuildTreasure treasures = 19;
  if (has_treasures()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->treasures(), target);
  }

  // optional .Cmd.BlobGGvg gvg = 20;
  if (has_gvg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->gvg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGuildMisc)
  return target;
}

int BlobGuildMisc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes var = 1;
    if (has_var()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->var());
    }

    // optional uint32 donatetime1 = 3 [default = 0];
    if (has_donatetime1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donatetime1());
    }

    // optional uint32 donatetime2 = 4 [default = 0];
    if (has_donatetime2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donatetime2());
    }

    // optional uint32 nextquesttime = 6 [default = 0];
    if (has_nextquesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextquesttime());
    }

    // optional uint32 donatetime3 = 8 [default = 0];
    if (has_donatetime3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donatetime3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 donatetime4 = 9 [default = 0];
    if (has_donatetime4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donatetime4());
    }

    // optional uint32 renametime = 10 [default = 0];
    if (has_renametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->renametime());
    }

    // optional uint32 city_giveup_time = 11 [default = 0];
    if (has_city_giveup_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_giveup_time());
    }

    // optional uint32 auth_version = 12 [default = 0];
    if (has_auth_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_version());
    }

    // optional .Cmd.GuildBuildingData building = 13;
    if (has_building()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->building());
    }

    // optional uint64 openfunction = 14 [default = 0];
    if (has_openfunction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->openfunction());
    }

    // optional .Cmd.GuildChallengeData challenge = 15;
    if (has_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challenge());
    }

    // optional .Cmd.GuildWelfare welfare = 16;
    if (has_welfare()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->welfare());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Cmd.GuildArtifact artifact = 17;
    if (has_artifact()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->artifact());
    }

    // optional .Cmd.BlobGQuest quests = 18;
    if (has_quests()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quests());
    }

    // optional .Cmd.BlobGuildTreasure treasures = 19;
    if (has_treasures()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasures());
    }

    // optional .Cmd.BlobGGvg gvg = 20;
    if (has_gvg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gvg());
    }

  }
  // repeated .Cmd.GuildJob job = 2;
  total_size += 1 * this->job_size();
  for (int i = 0; i < this->job_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->job(i));
  }

  // repeated .Cmd.GuildQuest quest = 5;
  total_size += 1 * this->quest_size();
  for (int i = 0; i < this->quest_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quest(i));
  }

  // repeated .Cmd.DojoMsgBlob dojomsg = 7;
  total_size += 1 * this->dojomsg_size();
  for (int i = 0; i < this->dojomsg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dojomsg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGuildMisc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGuildMisc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGuildMisc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGuildMisc::MergeFrom(const BlobGuildMisc& from) {
  GOOGLE_CHECK_NE(&from, this);
  job_.MergeFrom(from.job_);
  quest_.MergeFrom(from.quest_);
  dojomsg_.MergeFrom(from.dojomsg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_var()) {
      set_var(from.var());
    }
    if (from.has_donatetime1()) {
      set_donatetime1(from.donatetime1());
    }
    if (from.has_donatetime2()) {
      set_donatetime2(from.donatetime2());
    }
    if (from.has_nextquesttime()) {
      set_nextquesttime(from.nextquesttime());
    }
    if (from.has_donatetime3()) {
      set_donatetime3(from.donatetime3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_donatetime4()) {
      set_donatetime4(from.donatetime4());
    }
    if (from.has_renametime()) {
      set_renametime(from.renametime());
    }
    if (from.has_city_giveup_time()) {
      set_city_giveup_time(from.city_giveup_time());
    }
    if (from.has_auth_version()) {
      set_auth_version(from.auth_version());
    }
    if (from.has_building()) {
      mutable_building()->::Cmd::GuildBuildingData::MergeFrom(from.building());
    }
    if (from.has_openfunction()) {
      set_openfunction(from.openfunction());
    }
    if (from.has_challenge()) {
      mutable_challenge()->::Cmd::GuildChallengeData::MergeFrom(from.challenge());
    }
    if (from.has_welfare()) {
      mutable_welfare()->::Cmd::GuildWelfare::MergeFrom(from.welfare());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_artifact()) {
      mutable_artifact()->::Cmd::GuildArtifact::MergeFrom(from.artifact());
    }
    if (from.has_quests()) {
      mutable_quests()->::Cmd::BlobGQuest::MergeFrom(from.quests());
    }
    if (from.has_treasures()) {
      mutable_treasures()->::Cmd::BlobGuildTreasure::MergeFrom(from.treasures());
    }
    if (from.has_gvg()) {
      mutable_gvg()->::Cmd::BlobGGvg::MergeFrom(from.gvg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGuildMisc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGuildMisc::CopyFrom(const BlobGuildMisc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGuildMisc::IsInitialized() const {

  return true;
}

void BlobGuildMisc::Swap(BlobGuildMisc* other) {
  if (other != this) {
    std::swap(var_, other->var_);
    job_.Swap(&other->job_);
    std::swap(donatetime1_, other->donatetime1_);
    std::swap(donatetime2_, other->donatetime2_);
    quest_.Swap(&other->quest_);
    std::swap(nextquesttime_, other->nextquesttime_);
    dojomsg_.Swap(&other->dojomsg_);
    std::swap(donatetime3_, other->donatetime3_);
    std::swap(donatetime4_, other->donatetime4_);
    std::swap(renametime_, other->renametime_);
    std::swap(city_giveup_time_, other->city_giveup_time_);
    std::swap(auth_version_, other->auth_version_);
    std::swap(building_, other->building_);
    std::swap(openfunction_, other->openfunction_);
    std::swap(challenge_, other->challenge_);
    std::swap(welfare_, other->welfare_);
    std::swap(artifact_, other->artifact_);
    std::swap(quests_, other->quests_);
    std::swap(treasures_, other->treasures_);
    std::swap(gvg_, other->gvg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGuildMisc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGuildMisc_descriptor_;
  metadata.reflection = BlobGuildMisc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGuildPack::kVersionFieldNumber;
const int BlobGuildPack::kItemFieldNumber;
const int BlobGuildPack::kDataFieldNumber;
#endif  // !_MSC_VER

BlobGuildPack::BlobGuildPack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGuildPack)
}

void BlobGuildPack::InitAsDefaultInstance() {
}

BlobGuildPack::BlobGuildPack(const BlobGuildPack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGuildPack)
}

void BlobGuildPack::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGuildPack::~BlobGuildPack() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGuildPack)
  SharedDtor();
}

void BlobGuildPack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGuildPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGuildPack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGuildPack_descriptor_;
}

const BlobGuildPack& BlobGuildPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BlobGuildPack* BlobGuildPack::default_instance_ = NULL;

BlobGuildPack* BlobGuildPack::New() const {
  return new BlobGuildPack;
}

void BlobGuildPack::Clear() {
  version_ = 0u;
  item_.Clear();
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGuildPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGuildPack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .Cmd.ItemInfo item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .Cmd.ItemData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGuildPack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGuildPack)
  return false;
#undef DO_
}

void BlobGuildPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGuildPack)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .Cmd.ItemInfo item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // repeated .Cmd.ItemData data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGuildPack)
}

::google::protobuf::uint8* BlobGuildPack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGuildPack)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .Cmd.ItemInfo item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  // repeated .Cmd.ItemData data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGuildPack)
  return target;
}

int BlobGuildPack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.ItemInfo item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated .Cmd.ItemData data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGuildPack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGuildPack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGuildPack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGuildPack::MergeFrom(const BlobGuildPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGuildPack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGuildPack::CopyFrom(const BlobGuildPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGuildPack::IsInitialized() const {

  return true;
}

void BlobGuildPack::Swap(BlobGuildPack* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    item_.Swap(&other->item_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGuildPack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGuildPack_descriptor_;
  metadata.reflection = BlobGuildPack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGuildEvent::kVersionFieldNumber;
const int BlobGuildEvent::kEventsFieldNumber;
#endif  // !_MSC_VER

BlobGuildEvent::BlobGuildEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGuildEvent)
}

void BlobGuildEvent::InitAsDefaultInstance() {
}

BlobGuildEvent::BlobGuildEvent(const BlobGuildEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGuildEvent)
}

void BlobGuildEvent::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGuildEvent::~BlobGuildEvent() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGuildEvent)
  SharedDtor();
}

void BlobGuildEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGuildEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGuildEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGuildEvent_descriptor_;
}

const BlobGuildEvent& BlobGuildEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BlobGuildEvent* BlobGuildEvent::default_instance_ = NULL;

BlobGuildEvent* BlobGuildEvent::New() const {
  return new BlobGuildEvent;
}

void BlobGuildEvent::Clear() {
  version_ = 0u;
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGuildEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGuildEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_events;
        break;
      }

      // repeated .Cmd.GuildEvent events = 2;
      case 2: {
        if (tag == 18) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_events;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGuildEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGuildEvent)
  return false;
#undef DO_
}

void BlobGuildEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGuildEvent)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .Cmd.GuildEvent events = 2;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGuildEvent)
}

::google::protobuf::uint8* BlobGuildEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGuildEvent)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .Cmd.GuildEvent events = 2;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGuildEvent)
  return target;
}

int BlobGuildEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.GuildEvent events = 2;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGuildEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGuildEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGuildEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGuildEvent::MergeFrom(const BlobGuildEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGuildEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGuildEvent::CopyFrom(const BlobGuildEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGuildEvent::IsInitialized() const {

  return true;
}

void BlobGuildEvent::Swap(BlobGuildEvent* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGuildEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGuildEvent_descriptor_;
  metadata.reflection = BlobGuildEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildPhoto::kAccidSvrFieldNumber;
const int GuildPhoto::kAccidFieldNumber;
const int GuildPhoto::kCharidFieldNumber;
const int GuildPhoto::kAnglezFieldNumber;
const int GuildPhoto::kTimeFieldNumber;
const int GuildPhoto::kMapidFieldNumber;
const int GuildPhoto::kSourceidFieldNumber;
const int GuildPhoto::kSourceFieldNumber;
#endif  // !_MSC_VER

GuildPhoto::GuildPhoto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildPhoto)
}

void GuildPhoto::InitAsDefaultInstance() {
}

GuildPhoto::GuildPhoto(const GuildPhoto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildPhoto)
}

void GuildPhoto::SharedCtor() {
  _cached_size_ = 0;
  accid_svr_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  anglez_ = 0u;
  time_ = 0u;
  mapid_ = 0u;
  sourceid_ = 0u;
  source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildPhoto::~GuildPhoto() {
  // @@protoc_insertion_point(destructor:Cmd.GuildPhoto)
  SharedDtor();
}

void GuildPhoto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildPhoto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildPhoto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildPhoto_descriptor_;
}

const GuildPhoto& GuildPhoto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildPhoto* GuildPhoto::default_instance_ = NULL;

GuildPhoto* GuildPhoto::New() const {
  return new GuildPhoto;
}

void GuildPhoto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildPhoto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(accid_svr_, source_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildPhoto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildPhoto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_anglez;
        break;
      }

      // optional uint32 anglez = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_anglez:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anglez_)));
          set_has_anglez();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sourceid;
        break;
      }

      // optional uint32 sourceid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_sourceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_source;
        break;
      }

      // optional .Cmd.ESource source = 6 [default = ESOURCE_MIN];
      case 6: {
        if (tag == 48) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESource_IsValid(value)) {
            set_source(static_cast< ::Cmd::ESource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_accid_svr;
        break;
      }

      // optional uint64 accid_svr = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_accid_svr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_svr_)));
          set_has_accid_svr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildPhoto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildPhoto)
  return false;
#undef DO_
}

void GuildPhoto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildPhoto)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 anglez = 2 [default = 0];
  if (has_anglez()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->anglez(), output);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mapid(), output);
  }

  // optional uint32 sourceid = 5 [default = 0];
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sourceid(), output);
  }

  // optional .Cmd.ESource source = 6 [default = ESOURCE_MIN];
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->source(), output);
  }

  // optional uint64 accid = 7 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->accid(), output);
  }

  // optional uint64 accid_svr = 8 [default = 0];
  if (has_accid_svr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->accid_svr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildPhoto)
}

::google::protobuf::uint8* GuildPhoto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildPhoto)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 anglez = 2 [default = 0];
  if (has_anglez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->anglez(), target);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mapid(), target);
  }

  // optional uint32 sourceid = 5 [default = 0];
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sourceid(), target);
  }

  // optional .Cmd.ESource source = 6 [default = ESOURCE_MIN];
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->source(), target);
  }

  // optional uint64 accid = 7 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->accid(), target);
  }

  // optional uint64 accid_svr = 8 [default = 0];
  if (has_accid_svr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->accid_svr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildPhoto)
  return target;
}

int GuildPhoto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 accid_svr = 8 [default = 0];
    if (has_accid_svr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid_svr());
    }

    // optional uint64 accid = 7 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 anglez = 2 [default = 0];
    if (has_anglez()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anglez());
    }

    // optional uint32 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 mapid = 4 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 sourceid = 5 [default = 0];
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }

    // optional .Cmd.ESource source = 6 [default = ESOURCE_MIN];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildPhoto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildPhoto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildPhoto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildPhoto::MergeFrom(const GuildPhoto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accid_svr()) {
      set_accid_svr(from.accid_svr());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_anglez()) {
      set_anglez(from.anglez());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildPhoto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPhoto::CopyFrom(const GuildPhoto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPhoto::IsInitialized() const {

  return true;
}

void GuildPhoto::Swap(GuildPhoto* other) {
  if (other != this) {
    std::swap(accid_svr_, other->accid_svr_);
    std::swap(accid_, other->accid_);
    std::swap(charid_, other->charid_);
    std::swap(anglez_, other->anglez_);
    std::swap(time_, other->time_);
    std::swap(mapid_, other->mapid_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildPhoto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildPhoto_descriptor_;
  metadata.reflection = GuildPhoto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PhotoFrame::kFrameidFieldNumber;
const int PhotoFrame::kPhotoFieldNumber;
#endif  // !_MSC_VER

PhotoFrame::PhotoFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PhotoFrame)
}

void PhotoFrame::InitAsDefaultInstance() {
}

PhotoFrame::PhotoFrame(const PhotoFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PhotoFrame)
}

void PhotoFrame::SharedCtor() {
  _cached_size_ = 0;
  frameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhotoFrame::~PhotoFrame() {
  // @@protoc_insertion_point(destructor:Cmd.PhotoFrame)
  SharedDtor();
}

void PhotoFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PhotoFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoFrame_descriptor_;
}

const PhotoFrame& PhotoFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

PhotoFrame* PhotoFrame::default_instance_ = NULL;

PhotoFrame* PhotoFrame::New() const {
  return new PhotoFrame;
}

void PhotoFrame::Clear() {
  frameid_ = 0u;
  photo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhotoFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PhotoFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 frameid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_photo;
        break;
      }

      // repeated .Cmd.GuildPhoto photo = 2;
      case 2: {
        if (tag == 18) {
         parse_photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_photo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PhotoFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PhotoFrame)
  return false;
#undef DO_
}

void PhotoFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PhotoFrame)
  // optional uint32 frameid = 1 [default = 0];
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frameid(), output);
  }

  // repeated .Cmd.GuildPhoto photo = 2;
  for (int i = 0; i < this->photo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->photo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PhotoFrame)
}

::google::protobuf::uint8* PhotoFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PhotoFrame)
  // optional uint32 frameid = 1 [default = 0];
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frameid(), target);
  }

  // repeated .Cmd.GuildPhoto photo = 2;
  for (int i = 0; i < this->photo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->photo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PhotoFrame)
  return target;
}

int PhotoFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 frameid = 1 [default = 0];
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frameid());
    }

  }
  // repeated .Cmd.GuildPhoto photo = 2;
  total_size += 1 * this->photo_size();
  for (int i = 0; i < this->photo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->photo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhotoFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhotoFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhotoFrame::MergeFrom(const PhotoFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  photo_.MergeFrom(from.photo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhotoFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoFrame::CopyFrom(const PhotoFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoFrame::IsInitialized() const {

  return true;
}

void PhotoFrame::Swap(PhotoFrame* other) {
  if (other != this) {
    std::swap(frameid_, other->frameid_);
    photo_.Swap(&other->photo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhotoFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoFrame_descriptor_;
  metadata.reflection = PhotoFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGuildPhoto::kFramesFieldNumber;
#endif  // !_MSC_VER

BlobGuildPhoto::BlobGuildPhoto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGuildPhoto)
}

void BlobGuildPhoto::InitAsDefaultInstance() {
}

BlobGuildPhoto::BlobGuildPhoto(const BlobGuildPhoto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGuildPhoto)
}

void BlobGuildPhoto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGuildPhoto::~BlobGuildPhoto() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGuildPhoto)
  SharedDtor();
}

void BlobGuildPhoto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGuildPhoto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGuildPhoto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGuildPhoto_descriptor_;
}

const BlobGuildPhoto& BlobGuildPhoto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BlobGuildPhoto* BlobGuildPhoto::default_instance_ = NULL;

BlobGuildPhoto* BlobGuildPhoto::New() const {
  return new BlobGuildPhoto;
}

void BlobGuildPhoto::Clear() {
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGuildPhoto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGuildPhoto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.PhotoFrame frames = 1;
      case 1: {
        if (tag == 10) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_frames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGuildPhoto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGuildPhoto)
  return false;
#undef DO_
}

void BlobGuildPhoto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGuildPhoto)
  // repeated .Cmd.PhotoFrame frames = 1;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGuildPhoto)
}

::google::protobuf::uint8* BlobGuildPhoto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGuildPhoto)
  // repeated .Cmd.PhotoFrame frames = 1;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGuildPhoto)
  return target;
}

int BlobGuildPhoto::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.PhotoFrame frames = 1;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGuildPhoto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGuildPhoto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGuildPhoto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGuildPhoto::MergeFrom(const BlobGuildPhoto& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGuildPhoto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGuildPhoto::CopyFrom(const BlobGuildPhoto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGuildPhoto::IsInitialized() const {

  return true;
}

void BlobGuildPhoto::Swap(BlobGuildPhoto* other) {
  if (other != this) {
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGuildPhoto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGuildPhoto_descriptor_;
  metadata.reflection = BlobGuildPhoto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildSummaryData::kGuidFieldNumber;
const int GuildSummaryData::kLevelFieldNumber;
const int GuildSummaryData::kZoneidFieldNumber;
const int GuildSummaryData::kCurmemberFieldNumber;
const int GuildSummaryData::kMaxmemberFieldNumber;
const int GuildSummaryData::kCityidFieldNumber;
const int GuildSummaryData::kChairmangenderFieldNumber;
const int GuildSummaryData::kChairmannameFieldNumber;
const int GuildSummaryData::kGuildnameFieldNumber;
const int GuildSummaryData::kRecruitinfoFieldNumber;
const int GuildSummaryData::kPortraitFieldNumber;
#endif  // !_MSC_VER

GuildSummaryData::GuildSummaryData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildSummaryData)
}

void GuildSummaryData::InitAsDefaultInstance() {
}

GuildSummaryData::GuildSummaryData(const GuildSummaryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildSummaryData)
}

void GuildSummaryData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  zoneid_ = 0u;
  curmember_ = 0u;
  maxmember_ = 0u;
  cityid_ = 0u;
  chairmangender_ = 0;
  chairmanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recruitinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildSummaryData::~GuildSummaryData() {
  // @@protoc_insertion_point(destructor:Cmd.GuildSummaryData)
  SharedDtor();
}

void GuildSummaryData::SharedDtor() {
  if (chairmanname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chairmanname_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (recruitinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recruitinfo_;
  }
  if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete portrait_;
  }
  if (this != default_instance_) {
  }
}

void GuildSummaryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildSummaryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildSummaryData_descriptor_;
}

const GuildSummaryData& GuildSummaryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildSummaryData* GuildSummaryData::default_instance_ = NULL;

GuildSummaryData* GuildSummaryData::New() const {
  return new GuildSummaryData;
}

void GuildSummaryData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildSummaryData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(guid_, chairmangender_);
    if (has_chairmanname()) {
      if (chairmanname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chairmanname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_recruitinfo()) {
      if (recruitinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recruitinfo_->clear();
      }
    }
    if (has_portrait()) {
      if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        portrait_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildSummaryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildSummaryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curmember;
        break;
      }

      // optional uint32 curmember = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_curmember:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curmember_)));
          set_has_curmember();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxmember;
        break;
      }

      // optional uint32 maxmember = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_maxmember:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmember_)));
          set_has_maxmember();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_chairmangender;
        break;
      }

      // optional .Cmd.EGender chairmangender = 5 [default = EGENDER_MIN];
      case 5: {
        if (tag == 40) {
         parse_chairmangender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGender_IsValid(value)) {
            set_chairmangender(static_cast< ::Cmd::EGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_chairmanname;
        break;
      }

      // optional string chairmanname = 6;
      case 6: {
        if (tag == 50) {
         parse_chairmanname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chairmanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chairmanname().data(), this->chairmanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chairmanname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_guildname;
        break;
      }

      // optional string guildname = 7;
      case 7: {
        if (tag == 58) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_recruitinfo;
        break;
      }

      // optional string recruitinfo = 8;
      case 8: {
        if (tag == 66) {
         parse_recruitinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recruitinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recruitinfo().data(), this->recruitinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recruitinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_portrait;
        break;
      }

      // optional string portrait = 9;
      case 9: {
        if (tag == 74) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portrait()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->portrait().data(), this->portrait().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "portrait");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cityid;
        break;
      }

      // optional uint32 cityid = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_cityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildSummaryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildSummaryData)
  return false;
#undef DO_
}

void GuildSummaryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildSummaryData)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional uint32 level = 2 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 curmember = 3 [default = 0];
  if (has_curmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curmember(), output);
  }

  // optional uint32 maxmember = 4 [default = 0];
  if (has_maxmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxmember(), output);
  }

  // optional .Cmd.EGender chairmangender = 5 [default = EGENDER_MIN];
  if (has_chairmangender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->chairmangender(), output);
  }

  // optional string chairmanname = 6;
  if (has_chairmanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chairmanname().data(), this->chairmanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chairmanname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->chairmanname(), output);
  }

  // optional string guildname = 7;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->guildname(), output);
  }

  // optional string recruitinfo = 8;
  if (has_recruitinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recruitinfo().data(), this->recruitinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recruitinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->recruitinfo(), output);
  }

  // optional string portrait = 9;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "portrait");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->portrait(), output);
  }

  // optional uint32 zoneid = 10 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->zoneid(), output);
  }

  // optional uint32 cityid = 11 [default = 0];
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildSummaryData)
}

::google::protobuf::uint8* GuildSummaryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildSummaryData)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional uint32 level = 2 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 curmember = 3 [default = 0];
  if (has_curmember()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curmember(), target);
  }

  // optional uint32 maxmember = 4 [default = 0];
  if (has_maxmember()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxmember(), target);
  }

  // optional .Cmd.EGender chairmangender = 5 [default = EGENDER_MIN];
  if (has_chairmangender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->chairmangender(), target);
  }

  // optional string chairmanname = 6;
  if (has_chairmanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chairmanname().data(), this->chairmanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chairmanname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->chairmanname(), target);
  }

  // optional string guildname = 7;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->guildname(), target);
  }

  // optional string recruitinfo = 8;
  if (has_recruitinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recruitinfo().data(), this->recruitinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recruitinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->recruitinfo(), target);
  }

  // optional string portrait = 9;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "portrait");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->portrait(), target);
  }

  // optional uint32 zoneid = 10 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->zoneid(), target);
  }

  // optional uint32 cityid = 11 [default = 0];
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildSummaryData)
  return target;
}

int GuildSummaryData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 zoneid = 10 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 curmember = 3 [default = 0];
    if (has_curmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curmember());
    }

    // optional uint32 maxmember = 4 [default = 0];
    if (has_maxmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmember());
    }

    // optional uint32 cityid = 11 [default = 0];
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional .Cmd.EGender chairmangender = 5 [default = EGENDER_MIN];
    if (has_chairmangender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chairmangender());
    }

    // optional string chairmanname = 6;
    if (has_chairmanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chairmanname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string guildname = 7;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string recruitinfo = 8;
    if (has_recruitinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recruitinfo());
    }

    // optional string portrait = 9;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portrait());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildSummaryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildSummaryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildSummaryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildSummaryData::MergeFrom(const GuildSummaryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_curmember()) {
      set_curmember(from.curmember());
    }
    if (from.has_maxmember()) {
      set_maxmember(from.maxmember());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_chairmangender()) {
      set_chairmangender(from.chairmangender());
    }
    if (from.has_chairmanname()) {
      set_chairmanname(from.chairmanname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_recruitinfo()) {
      set_recruitinfo(from.recruitinfo());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildSummaryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildSummaryData::CopyFrom(const GuildSummaryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildSummaryData::IsInitialized() const {

  return true;
}

void GuildSummaryData::Swap(GuildSummaryData* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(level_, other->level_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(curmember_, other->curmember_);
    std::swap(maxmember_, other->maxmember_);
    std::swap(cityid_, other->cityid_);
    std::swap(chairmangender_, other->chairmangender_);
    std::swap(chairmanname_, other->chairmanname_);
    std::swap(guildname_, other->guildname_);
    std::swap(recruitinfo_, other->recruitinfo_);
    std::swap(portrait_, other->portrait_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildSummaryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildSummaryData_descriptor_;
  metadata.reflection = GuildSummaryData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildData::kSummaryFieldNumber;
const int GuildData::kQuestresettimeFieldNumber;
const int GuildData::kAssetFieldNumber;
const int GuildData::kDismisstimeFieldNumber;
const int GuildData::kZonetimeFieldNumber;
const int GuildData::kCreatetimeFieldNumber;
const int GuildData::kNextzoneFieldNumber;
const int GuildData::kDonatetime1FieldNumber;
const int GuildData::kDonatetime2FieldNumber;
const int GuildData::kNameFieldNumber;
const int GuildData::kBoardinfoFieldNumber;
const int GuildData::kRecruitinfoFieldNumber;
const int GuildData::kMembersFieldNumber;
const int GuildData::kApplysFieldNumber;
const int GuildData::kJobsFieldNumber;
const int GuildData::kAssettodayFieldNumber;
const int GuildData::kCitygiveuptimeFieldNumber;
const int GuildData::kOpenfunctionFieldNumber;
const int GuildData::kChallengesFieldNumber;
const int GuildData::kGvgTreasureCountFieldNumber;
const int GuildData::kGuildTreasureCountFieldNumber;
const int GuildData::kBcoinTreasureCountFieldNumber;
const int GuildData::kInsupergvgFieldNumber;
const int GuildData::kSupergvgLvFieldNumber;
#endif  // !_MSC_VER

GuildData::GuildData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildData)
}

void GuildData::InitAsDefaultInstance() {
  summary_ = const_cast< ::Cmd::GuildSummaryData*>(&::Cmd::GuildSummaryData::default_instance());
}

GuildData::GuildData(const GuildData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildData)
}

void GuildData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  summary_ = NULL;
  questresettime_ = 0u;
  asset_ = 0u;
  dismisstime_ = 0u;
  zonetime_ = 0u;
  createtime_ = 0u;
  nextzone_ = 0u;
  donatetime1_ = 0u;
  donatetime2_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boardinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recruitinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assettoday_ = 0u;
  citygiveuptime_ = 0u;
  openfunction_ = 0u;
  gvg_treasure_count_ = 0u;
  guild_treasure_count_ = 0u;
  bcoin_treasure_count_ = 0u;
  insupergvg_ = false;
  supergvg_lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildData::~GuildData() {
  // @@protoc_insertion_point(destructor:Cmd.GuildData)
  SharedDtor();
}

void GuildData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (boardinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boardinfo_;
  }
  if (recruitinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recruitinfo_;
  }
  if (this != default_instance_) {
    delete summary_;
  }
}

void GuildData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildData_descriptor_;
}

const GuildData& GuildData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildData* GuildData::default_instance_ = NULL;

GuildData* GuildData::New() const {
  return new GuildData;
}

void GuildData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(questresettime_, donatetime1_);
    if (has_summary()) {
      if (summary_ != NULL) summary_->::Cmd::GuildSummaryData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 36608) {
    donatetime2_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_boardinfo()) {
      if (boardinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boardinfo_->clear();
      }
    }
    if (has_recruitinfo()) {
      if (recruitinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recruitinfo_->clear();
      }
    }
    assettoday_ = 0u;
  }
  if (_has_bits_[16 / 32] & 16449536) {
    ZR_(openfunction_, supergvg_lv_);
    citygiveuptime_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  applys_.Clear();
  jobs_.Clear();
  challenges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.GuildSummaryData summary = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_questresettime;
        break;
      }

      // optional uint32 questresettime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_questresettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questresettime_)));
          set_has_questresettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_asset;
        break;
      }

      // optional uint32 asset = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_asset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asset_)));
          set_has_asset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dismisstime;
        break;
      }

      // optional uint32 dismisstime = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_dismisstime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dismisstime_)));
          set_has_dismisstime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_zonetime;
        break;
      }

      // optional uint32 zonetime = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_zonetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zonetime_)));
          set_has_zonetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_createtime;
        break;
      }

      // optional uint32 createtime = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_nextzone;
        break;
      }

      // optional uint32 nextzone = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_nextzone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextzone_)));
          set_has_nextzone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_donatetime1;
        break;
      }

      // optional uint32 donatetime1 = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_donatetime1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatetime1_)));
          set_has_donatetime1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_donatetime2;
        break;
      }

      // optional uint32 donatetime2 = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_donatetime2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatetime2_)));
          set_has_donatetime2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_name;
        break;
      }

      // optional string name = 12;
      case 12: {
        if (tag == 98) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_boardinfo;
        break;
      }

      // optional string boardinfo = 13;
      case 13: {
        if (tag == 106) {
         parse_boardinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boardinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boardinfo().data(), this->boardinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boardinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_recruitinfo;
        break;
      }

      // optional string recruitinfo = 14;
      case 14: {
        if (tag == 114) {
         parse_recruitinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recruitinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recruitinfo().data(), this->recruitinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recruitinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_members;
        break;
      }

      // repeated .Cmd.GuildMember members = 15;
      case 15: {
        if (tag == 122) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_members;
        if (input->ExpectTag(130)) goto parse_applys;
        break;
      }

      // repeated .Cmd.GuildApply applys = 16;
      case 16: {
        if (tag == 130) {
         parse_applys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_applys;
        if (input->ExpectTag(138)) goto parse_jobs;
        break;
      }

      // repeated .Cmd.GuildJob jobs = 17;
      case 17: {
        if (tag == 138) {
         parse_jobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_jobs;
        if (input->ExpectTag(144)) goto parse_assettoday;
        break;
      }

      // optional uint32 assettoday = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_assettoday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assettoday_)));
          set_has_assettoday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_citygiveuptime;
        break;
      }

      // optional uint32 citygiveuptime = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_citygiveuptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &citygiveuptime_)));
          set_has_citygiveuptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_openfunction;
        break;
      }

      // optional uint32 openfunction = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_openfunction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openfunction_)));
          set_has_openfunction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_challenges;
        break;
      }

      // repeated .Cmd.GuildChallenge challenges = 21;
      case 21: {
        if (tag == 170) {
         parse_challenges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challenges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_challenges;
        if (input->ExpectTag(176)) goto parse_gvg_treasure_count;
        break;
      }

      // optional uint32 gvg_treasure_count = 22 [default = 0];
      case 22: {
        if (tag == 176) {
         parse_gvg_treasure_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gvg_treasure_count_)));
          set_has_gvg_treasure_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_guild_treasure_count;
        break;
      }

      // optional uint32 guild_treasure_count = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_guild_treasure_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_treasure_count_)));
          set_has_guild_treasure_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_bcoin_treasure_count;
        break;
      }

      // optional uint32 bcoin_treasure_count = 24 [default = 0];
      case 24: {
        if (tag == 192) {
         parse_bcoin_treasure_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bcoin_treasure_count_)));
          set_has_bcoin_treasure_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_insupergvg;
        break;
      }

      // optional bool insupergvg = 25 [default = false];
      case 25: {
        if (tag == 200) {
         parse_insupergvg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &insupergvg_)));
          set_has_insupergvg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_supergvg_lv;
        break;
      }

      // optional uint32 supergvg_lv = 26 [default = 0];
      case 26: {
        if (tag == 208) {
         parse_supergvg_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &supergvg_lv_)));
          set_has_supergvg_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildData)
  return false;
#undef DO_
}

void GuildData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildData)
  // optional .Cmd.GuildSummaryData summary = 1;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->summary(), output);
  }

  // optional uint32 questresettime = 4 [default = 0];
  if (has_questresettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->questresettime(), output);
  }

  // optional uint32 asset = 5 [default = 0];
  if (has_asset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->asset(), output);
  }

  // optional uint32 dismisstime = 6 [default = 0];
  if (has_dismisstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dismisstime(), output);
  }

  // optional uint32 zonetime = 7 [default = 0];
  if (has_zonetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->zonetime(), output);
  }

  // optional uint32 createtime = 8 [default = 0];
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->createtime(), output);
  }

  // optional uint32 nextzone = 9 [default = 0];
  if (has_nextzone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->nextzone(), output);
  }

  // optional uint32 donatetime1 = 10 [default = 0];
  if (has_donatetime1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->donatetime1(), output);
  }

  // optional uint32 donatetime2 = 11 [default = 0];
  if (has_donatetime2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->donatetime2(), output);
  }

  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->name(), output);
  }

  // optional string boardinfo = 13;
  if (has_boardinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boardinfo().data(), this->boardinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boardinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->boardinfo(), output);
  }

  // optional string recruitinfo = 14;
  if (has_recruitinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recruitinfo().data(), this->recruitinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recruitinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->recruitinfo(), output);
  }

  // repeated .Cmd.GuildMember members = 15;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->members(i), output);
  }

  // repeated .Cmd.GuildApply applys = 16;
  for (int i = 0; i < this->applys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->applys(i), output);
  }

  // repeated .Cmd.GuildJob jobs = 17;
  for (int i = 0; i < this->jobs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->jobs(i), output);
  }

  // optional uint32 assettoday = 18 [default = 0];
  if (has_assettoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->assettoday(), output);
  }

  // optional uint32 citygiveuptime = 19 [default = 0];
  if (has_citygiveuptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->citygiveuptime(), output);
  }

  // optional uint32 openfunction = 20 [default = 0];
  if (has_openfunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->openfunction(), output);
  }

  // repeated .Cmd.GuildChallenge challenges = 21;
  for (int i = 0; i < this->challenges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->challenges(i), output);
  }

  // optional uint32 gvg_treasure_count = 22 [default = 0];
  if (has_gvg_treasure_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->gvg_treasure_count(), output);
  }

  // optional uint32 guild_treasure_count = 23 [default = 0];
  if (has_guild_treasure_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->guild_treasure_count(), output);
  }

  // optional uint32 bcoin_treasure_count = 24 [default = 0];
  if (has_bcoin_treasure_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->bcoin_treasure_count(), output);
  }

  // optional bool insupergvg = 25 [default = false];
  if (has_insupergvg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->insupergvg(), output);
  }

  // optional uint32 supergvg_lv = 26 [default = 0];
  if (has_supergvg_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->supergvg_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildData)
}

::google::protobuf::uint8* GuildData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildData)
  // optional .Cmd.GuildSummaryData summary = 1;
  if (has_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->summary(), target);
  }

  // optional uint32 questresettime = 4 [default = 0];
  if (has_questresettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->questresettime(), target);
  }

  // optional uint32 asset = 5 [default = 0];
  if (has_asset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->asset(), target);
  }

  // optional uint32 dismisstime = 6 [default = 0];
  if (has_dismisstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dismisstime(), target);
  }

  // optional uint32 zonetime = 7 [default = 0];
  if (has_zonetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->zonetime(), target);
  }

  // optional uint32 createtime = 8 [default = 0];
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->createtime(), target);
  }

  // optional uint32 nextzone = 9 [default = 0];
  if (has_nextzone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->nextzone(), target);
  }

  // optional uint32 donatetime1 = 10 [default = 0];
  if (has_donatetime1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->donatetime1(), target);
  }

  // optional uint32 donatetime2 = 11 [default = 0];
  if (has_donatetime2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->donatetime2(), target);
  }

  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }

  // optional string boardinfo = 13;
  if (has_boardinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boardinfo().data(), this->boardinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boardinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->boardinfo(), target);
  }

  // optional string recruitinfo = 14;
  if (has_recruitinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recruitinfo().data(), this->recruitinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recruitinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->recruitinfo(), target);
  }

  // repeated .Cmd.GuildMember members = 15;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->members(i), target);
  }

  // repeated .Cmd.GuildApply applys = 16;
  for (int i = 0; i < this->applys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->applys(i), target);
  }

  // repeated .Cmd.GuildJob jobs = 17;
  for (int i = 0; i < this->jobs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->jobs(i), target);
  }

  // optional uint32 assettoday = 18 [default = 0];
  if (has_assettoday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->assettoday(), target);
  }

  // optional uint32 citygiveuptime = 19 [default = 0];
  if (has_citygiveuptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->citygiveuptime(), target);
  }

  // optional uint32 openfunction = 20 [default = 0];
  if (has_openfunction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->openfunction(), target);
  }

  // repeated .Cmd.GuildChallenge challenges = 21;
  for (int i = 0; i < this->challenges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->challenges(i), target);
  }

  // optional uint32 gvg_treasure_count = 22 [default = 0];
  if (has_gvg_treasure_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->gvg_treasure_count(), target);
  }

  // optional uint32 guild_treasure_count = 23 [default = 0];
  if (has_guild_treasure_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->guild_treasure_count(), target);
  }

  // optional uint32 bcoin_treasure_count = 24 [default = 0];
  if (has_bcoin_treasure_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->bcoin_treasure_count(), target);
  }

  // optional bool insupergvg = 25 [default = false];
  if (has_insupergvg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->insupergvg(), target);
  }

  // optional uint32 supergvg_lv = 26 [default = 0];
  if (has_supergvg_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->supergvg_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildData)
  return target;
}

int GuildData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.GuildSummaryData summary = 1;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->summary());
    }

    // optional uint32 questresettime = 4 [default = 0];
    if (has_questresettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questresettime());
    }

    // optional uint32 asset = 5 [default = 0];
    if (has_asset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asset());
    }

    // optional uint32 dismisstime = 6 [default = 0];
    if (has_dismisstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dismisstime());
    }

    // optional uint32 zonetime = 7 [default = 0];
    if (has_zonetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zonetime());
    }

    // optional uint32 createtime = 8 [default = 0];
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // optional uint32 nextzone = 9 [default = 0];
    if (has_nextzone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextzone());
    }

    // optional uint32 donatetime1 = 10 [default = 0];
    if (has_donatetime1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donatetime1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 donatetime2 = 11 [default = 0];
    if (has_donatetime2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donatetime2());
    }

    // optional string name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string boardinfo = 13;
    if (has_boardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boardinfo());
    }

    // optional string recruitinfo = 14;
    if (has_recruitinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recruitinfo());
    }

    // optional uint32 assettoday = 18 [default = 0];
    if (has_assettoday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assettoday());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 citygiveuptime = 19 [default = 0];
    if (has_citygiveuptime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->citygiveuptime());
    }

    // optional uint32 openfunction = 20 [default = 0];
    if (has_openfunction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openfunction());
    }

    // optional uint32 gvg_treasure_count = 22 [default = 0];
    if (has_gvg_treasure_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gvg_treasure_count());
    }

    // optional uint32 guild_treasure_count = 23 [default = 0];
    if (has_guild_treasure_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_treasure_count());
    }

    // optional uint32 bcoin_treasure_count = 24 [default = 0];
    if (has_bcoin_treasure_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bcoin_treasure_count());
    }

    // optional bool insupergvg = 25 [default = false];
    if (has_insupergvg()) {
      total_size += 2 + 1;
    }

    // optional uint32 supergvg_lv = 26 [default = 0];
    if (has_supergvg_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->supergvg_lv());
    }

  }
  // repeated .Cmd.GuildMember members = 15;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated .Cmd.GuildApply applys = 16;
  total_size += 2 * this->applys_size();
  for (int i = 0; i < this->applys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applys(i));
  }

  // repeated .Cmd.GuildJob jobs = 17;
  total_size += 2 * this->jobs_size();
  for (int i = 0; i < this->jobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jobs(i));
  }

  // repeated .Cmd.GuildChallenge challenges = 21;
  total_size += 2 * this->challenges_size();
  for (int i = 0; i < this->challenges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->challenges(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildData::MergeFrom(const GuildData& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  applys_.MergeFrom(from.applys_);
  jobs_.MergeFrom(from.jobs_);
  challenges_.MergeFrom(from.challenges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_summary()) {
      mutable_summary()->::Cmd::GuildSummaryData::MergeFrom(from.summary());
    }
    if (from.has_questresettime()) {
      set_questresettime(from.questresettime());
    }
    if (from.has_asset()) {
      set_asset(from.asset());
    }
    if (from.has_dismisstime()) {
      set_dismisstime(from.dismisstime());
    }
    if (from.has_zonetime()) {
      set_zonetime(from.zonetime());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_nextzone()) {
      set_nextzone(from.nextzone());
    }
    if (from.has_donatetime1()) {
      set_donatetime1(from.donatetime1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_donatetime2()) {
      set_donatetime2(from.donatetime2());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_boardinfo()) {
      set_boardinfo(from.boardinfo());
    }
    if (from.has_recruitinfo()) {
      set_recruitinfo(from.recruitinfo());
    }
    if (from.has_assettoday()) {
      set_assettoday(from.assettoday());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_citygiveuptime()) {
      set_citygiveuptime(from.citygiveuptime());
    }
    if (from.has_openfunction()) {
      set_openfunction(from.openfunction());
    }
    if (from.has_gvg_treasure_count()) {
      set_gvg_treasure_count(from.gvg_treasure_count());
    }
    if (from.has_guild_treasure_count()) {
      set_guild_treasure_count(from.guild_treasure_count());
    }
    if (from.has_bcoin_treasure_count()) {
      set_bcoin_treasure_count(from.bcoin_treasure_count());
    }
    if (from.has_insupergvg()) {
      set_insupergvg(from.insupergvg());
    }
    if (from.has_supergvg_lv()) {
      set_supergvg_lv(from.supergvg_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildData::CopyFrom(const GuildData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  return true;
}

void GuildData::Swap(GuildData* other) {
  if (other != this) {
    std::swap(summary_, other->summary_);
    std::swap(questresettime_, other->questresettime_);
    std::swap(asset_, other->asset_);
    std::swap(dismisstime_, other->dismisstime_);
    std::swap(zonetime_, other->zonetime_);
    std::swap(createtime_, other->createtime_);
    std::swap(nextzone_, other->nextzone_);
    std::swap(donatetime1_, other->donatetime1_);
    std::swap(donatetime2_, other->donatetime2_);
    std::swap(name_, other->name_);
    std::swap(boardinfo_, other->boardinfo_);
    std::swap(recruitinfo_, other->recruitinfo_);
    members_.Swap(&other->members_);
    applys_.Swap(&other->applys_);
    jobs_.Swap(&other->jobs_);
    std::swap(assettoday_, other->assettoday_);
    std::swap(citygiveuptime_, other->citygiveuptime_);
    std::swap(openfunction_, other->openfunction_);
    challenges_.Swap(&other->challenges_);
    std::swap(gvg_treasure_count_, other->gvg_treasure_count_);
    std::swap(guild_treasure_count_, other->guild_treasure_count_);
    std::swap(bcoin_treasure_count_, other->bcoin_treasure_count_);
    std::swap(insupergvg_, other->insupergvg_);
    std::swap(supergvg_lv_, other->supergvg_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildData_descriptor_;
  metadata.reflection = GuildData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryGuildListGuildCmd::kCmdFieldNumber;
const int QueryGuildListGuildCmd::kParamFieldNumber;
const int QueryGuildListGuildCmd::kKeywordFieldNumber;
const int QueryGuildListGuildCmd::kPageFieldNumber;
const int QueryGuildListGuildCmd::kListFieldNumber;
#endif  // !_MSC_VER

QueryGuildListGuildCmd::QueryGuildListGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryGuildListGuildCmd)
}

void QueryGuildListGuildCmd::InitAsDefaultInstance() {
}

QueryGuildListGuildCmd::QueryGuildListGuildCmd(const QueryGuildListGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryGuildListGuildCmd)
}

void QueryGuildListGuildCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 1;
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryGuildListGuildCmd::~QueryGuildListGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryGuildListGuildCmd)
  SharedDtor();
}

void QueryGuildListGuildCmd::SharedDtor() {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyword_;
  }
  if (this != default_instance_) {
  }
}

void QueryGuildListGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryGuildListGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryGuildListGuildCmd_descriptor_;
}

const QueryGuildListGuildCmd& QueryGuildListGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

QueryGuildListGuildCmd* QueryGuildListGuildCmd::default_instance_ = NULL;

QueryGuildListGuildCmd* QueryGuildListGuildCmd::New() const {
  return new QueryGuildListGuildCmd;
}

void QueryGuildListGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 50;
    param_ = 1;
    if (has_keyword()) {
      if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keyword_->clear();
      }
    }
    page_ = 0u;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryGuildListGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryGuildListGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDLIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keyword;
        break;
      }

      // optional string keyword = 3;
      case 3: {
        if (tag == 26) {
         parse_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page;
        break;
      }

      // optional uint32 page = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_list;
        break;
      }

      // repeated .Cmd.GuildSummaryData list = 5;
      case 5: {
        if (tag == 42) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryGuildListGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryGuildListGuildCmd)
  return false;
#undef DO_
}

void QueryGuildListGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryGuildListGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDLIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string keyword = 3;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->keyword(), output);
  }

  // optional uint32 page = 4 [default = 0];
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->page(), output);
  }

  // repeated .Cmd.GuildSummaryData list = 5;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryGuildListGuildCmd)
}

::google::protobuf::uint8* QueryGuildListGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryGuildListGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDLIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string keyword = 3;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->keyword(), target);
  }

  // optional uint32 page = 4 [default = 0];
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->page(), target);
  }

  // repeated .Cmd.GuildSummaryData list = 5;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryGuildListGuildCmd)
  return target;
}

int QueryGuildListGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDLIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string keyword = 3;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

    // optional uint32 page = 4 [default = 0];
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

  }
  // repeated .Cmd.GuildSummaryData list = 5;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGuildListGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryGuildListGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryGuildListGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryGuildListGuildCmd::MergeFrom(const QueryGuildListGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryGuildListGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGuildListGuildCmd::CopyFrom(const QueryGuildListGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGuildListGuildCmd::IsInitialized() const {

  return true;
}

void QueryGuildListGuildCmd::Swap(QueryGuildListGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(keyword_, other->keyword_);
    std::swap(page_, other->page_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryGuildListGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryGuildListGuildCmd_descriptor_;
  metadata.reflection = QueryGuildListGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGuildGuildCmd::kCmdFieldNumber;
const int CreateGuildGuildCmd::kParamFieldNumber;
const int CreateGuildGuildCmd::kNameFieldNumber;
#endif  // !_MSC_VER

CreateGuildGuildCmd::CreateGuildGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CreateGuildGuildCmd)
}

void CreateGuildGuildCmd::InitAsDefaultInstance() {
}

CreateGuildGuildCmd::CreateGuildGuildCmd(const CreateGuildGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CreateGuildGuildCmd)
}

void CreateGuildGuildCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 2;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGuildGuildCmd::~CreateGuildGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CreateGuildGuildCmd)
  SharedDtor();
}

void CreateGuildGuildCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CreateGuildGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGuildGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGuildGuildCmd_descriptor_;
}

const CreateGuildGuildCmd& CreateGuildGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

CreateGuildGuildCmd* CreateGuildGuildCmd::default_instance_ = NULL;

CreateGuildGuildCmd* CreateGuildGuildCmd::New() const {
  return new CreateGuildGuildCmd;
}

void CreateGuildGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 2;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateGuildGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CreateGuildGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CREATEGUILD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CreateGuildGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CreateGuildGuildCmd)
  return false;
#undef DO_
}

void CreateGuildGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CreateGuildGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CREATEGUILD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CreateGuildGuildCmd)
}

::google::protobuf::uint8* CreateGuildGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CreateGuildGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CREATEGUILD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CreateGuildGuildCmd)
  return target;
}

int CreateGuildGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CREATEGUILD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGuildGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGuildGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateGuildGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGuildGuildCmd::MergeFrom(const CreateGuildGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateGuildGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGuildGuildCmd::CopyFrom(const CreateGuildGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGuildGuildCmd::IsInitialized() const {

  return true;
}

void CreateGuildGuildCmd::Swap(CreateGuildGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateGuildGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGuildGuildCmd_descriptor_;
  metadata.reflection = CreateGuildGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterGuildGuildCmd::kCmdFieldNumber;
const int EnterGuildGuildCmd::kParamFieldNumber;
const int EnterGuildGuildCmd::kDataFieldNumber;
#endif  // !_MSC_VER

EnterGuildGuildCmd::EnterGuildGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnterGuildGuildCmd)
}

void EnterGuildGuildCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::GuildData*>(&::Cmd::GuildData::default_instance());
}

EnterGuildGuildCmd::EnterGuildGuildCmd(const EnterGuildGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnterGuildGuildCmd)
}

void EnterGuildGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 3;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterGuildGuildCmd::~EnterGuildGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EnterGuildGuildCmd)
  SharedDtor();
}

void EnterGuildGuildCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void EnterGuildGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGuildGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGuildGuildCmd_descriptor_;
}

const EnterGuildGuildCmd& EnterGuildGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

EnterGuildGuildCmd* EnterGuildGuildCmd::default_instance_ = NULL;

EnterGuildGuildCmd* EnterGuildGuildCmd::New() const {
  return new EnterGuildGuildCmd;
}

void EnterGuildGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 3;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::GuildData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterGuildGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnterGuildGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ENTERGUILD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.GuildData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnterGuildGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnterGuildGuildCmd)
  return false;
#undef DO_
}

void EnterGuildGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnterGuildGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ENTERGUILD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.GuildData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnterGuildGuildCmd)
}

::google::protobuf::uint8* EnterGuildGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnterGuildGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ENTERGUILD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.GuildData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnterGuildGuildCmd)
  return target;
}

int EnterGuildGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ENTERGUILD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.GuildData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGuildGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterGuildGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterGuildGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGuildGuildCmd::MergeFrom(const EnterGuildGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::GuildData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterGuildGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGuildGuildCmd::CopyFrom(const EnterGuildGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGuildGuildCmd::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void EnterGuildGuildCmd::Swap(EnterGuildGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterGuildGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGuildGuildCmd_descriptor_;
  metadata.reflection = EnterGuildGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMemberUpdateGuildCmd::kCmdFieldNumber;
const int GuildMemberUpdateGuildCmd::kParamFieldNumber;
const int GuildMemberUpdateGuildCmd::kUpdatesFieldNumber;
const int GuildMemberUpdateGuildCmd::kDelsFieldNumber;
#endif  // !_MSC_VER

GuildMemberUpdateGuildCmd::GuildMemberUpdateGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildMemberUpdateGuildCmd)
}

void GuildMemberUpdateGuildCmd::InitAsDefaultInstance() {
}

GuildMemberUpdateGuildCmd::GuildMemberUpdateGuildCmd(const GuildMemberUpdateGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildMemberUpdateGuildCmd)
}

void GuildMemberUpdateGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMemberUpdateGuildCmd::~GuildMemberUpdateGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildMemberUpdateGuildCmd)
  SharedDtor();
}

void GuildMemberUpdateGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMemberUpdateGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMemberUpdateGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberUpdateGuildCmd_descriptor_;
}

const GuildMemberUpdateGuildCmd& GuildMemberUpdateGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildMemberUpdateGuildCmd* GuildMemberUpdateGuildCmd::default_instance_ = NULL;

GuildMemberUpdateGuildCmd* GuildMemberUpdateGuildCmd::New() const {
  return new GuildMemberUpdateGuildCmd;
}

void GuildMemberUpdateGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 4;
  }
  updates_.Clear();
  dels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMemberUpdateGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildMemberUpdateGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_MEMBERUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        break;
      }

      // repeated .Cmd.GuildMember updates = 3;
      case 3: {
        if (tag == 26) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        if (input->ExpectTag(32)) goto parse_dels;
        break;
      }

      // repeated uint64 dels = 4;
      case 4: {
        if (tag == 32) {
         parse_dels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_dels())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_dels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildMemberUpdateGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildMemberUpdateGuildCmd)
  return false;
#undef DO_
}

void GuildMemberUpdateGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildMemberUpdateGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_MEMBERUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GuildMember updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updates(i), output);
  }

  // repeated uint64 dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->dels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildMemberUpdateGuildCmd)
}

::google::protobuf::uint8* GuildMemberUpdateGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildMemberUpdateGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_MEMBERUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GuildMember updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updates(i), target);
  }

  // repeated uint64 dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->dels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildMemberUpdateGuildCmd)
  return target;
}

int GuildMemberUpdateGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_MEMBERUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.GuildMember updates = 3;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated uint64 dels = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->dels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->dels(i));
    }
    total_size += 1 * this->dels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMemberUpdateGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMemberUpdateGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMemberUpdateGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMemberUpdateGuildCmd::MergeFrom(const GuildMemberUpdateGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  dels_.MergeFrom(from.dels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMemberUpdateGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMemberUpdateGuildCmd::CopyFrom(const GuildMemberUpdateGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberUpdateGuildCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->updates())) return false;
  return true;
}

void GuildMemberUpdateGuildCmd::Swap(GuildMemberUpdateGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    updates_.Swap(&other->updates_);
    dels_.Swap(&other->dels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMemberUpdateGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMemberUpdateGuildCmd_descriptor_;
  metadata.reflection = GuildMemberUpdateGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildApplyUpdateGuildCmd::kCmdFieldNumber;
const int GuildApplyUpdateGuildCmd::kParamFieldNumber;
const int GuildApplyUpdateGuildCmd::kUpdatesFieldNumber;
const int GuildApplyUpdateGuildCmd::kDelsFieldNumber;
#endif  // !_MSC_VER

GuildApplyUpdateGuildCmd::GuildApplyUpdateGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildApplyUpdateGuildCmd)
}

void GuildApplyUpdateGuildCmd::InitAsDefaultInstance() {
}

GuildApplyUpdateGuildCmd::GuildApplyUpdateGuildCmd(const GuildApplyUpdateGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildApplyUpdateGuildCmd)
}

void GuildApplyUpdateGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildApplyUpdateGuildCmd::~GuildApplyUpdateGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildApplyUpdateGuildCmd)
  SharedDtor();
}

void GuildApplyUpdateGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildApplyUpdateGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildApplyUpdateGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildApplyUpdateGuildCmd_descriptor_;
}

const GuildApplyUpdateGuildCmd& GuildApplyUpdateGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildApplyUpdateGuildCmd* GuildApplyUpdateGuildCmd::default_instance_ = NULL;

GuildApplyUpdateGuildCmd* GuildApplyUpdateGuildCmd::New() const {
  return new GuildApplyUpdateGuildCmd;
}

void GuildApplyUpdateGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 5;
  }
  updates_.Clear();
  dels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildApplyUpdateGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildApplyUpdateGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_APPLYUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        break;
      }

      // repeated .Cmd.GuildApply updates = 3;
      case 3: {
        if (tag == 26) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        if (input->ExpectTag(32)) goto parse_dels;
        break;
      }

      // repeated uint64 dels = 4;
      case 4: {
        if (tag == 32) {
         parse_dels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_dels())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_dels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildApplyUpdateGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildApplyUpdateGuildCmd)
  return false;
#undef DO_
}

void GuildApplyUpdateGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildApplyUpdateGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_APPLYUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GuildApply updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updates(i), output);
  }

  // repeated uint64 dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->dels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildApplyUpdateGuildCmd)
}

::google::protobuf::uint8* GuildApplyUpdateGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildApplyUpdateGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_APPLYUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GuildApply updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updates(i), target);
  }

  // repeated uint64 dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->dels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildApplyUpdateGuildCmd)
  return target;
}

int GuildApplyUpdateGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_APPLYUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.GuildApply updates = 3;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated uint64 dels = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->dels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->dels(i));
    }
    total_size += 1 * this->dels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildApplyUpdateGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildApplyUpdateGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildApplyUpdateGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildApplyUpdateGuildCmd::MergeFrom(const GuildApplyUpdateGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  dels_.MergeFrom(from.dels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildApplyUpdateGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildApplyUpdateGuildCmd::CopyFrom(const GuildApplyUpdateGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildApplyUpdateGuildCmd::IsInitialized() const {

  return true;
}

void GuildApplyUpdateGuildCmd::Swap(GuildApplyUpdateGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    updates_.Swap(&other->updates_);
    dels_.Swap(&other->dels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildApplyUpdateGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildApplyUpdateGuildCmd_descriptor_;
  metadata.reflection = GuildApplyUpdateGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildDataUpdate::kTypeFieldNumber;
const int GuildDataUpdate::kValueFieldNumber;
const int GuildDataUpdate::kDataFieldNumber;
#endif  // !_MSC_VER

GuildDataUpdate::GuildDataUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildDataUpdate)
}

void GuildDataUpdate::InitAsDefaultInstance() {
}

GuildDataUpdate::GuildDataUpdate(const GuildDataUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildDataUpdate)
}

void GuildDataUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildDataUpdate::~GuildDataUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.GuildDataUpdate)
  SharedDtor();
}

void GuildDataUpdate::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void GuildDataUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildDataUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildDataUpdate_descriptor_;
}

const GuildDataUpdate& GuildDataUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildDataUpdate* GuildDataUpdate::default_instance_ = NULL;

GuildDataUpdate* GuildDataUpdate::New() const {
  return new GuildDataUpdate;
}

void GuildDataUpdate::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 0;
    value_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildDataUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildDataUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EGuildData type = 1 [default = EGUILDDATA_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildData_IsValid(value)) {
            set_type(static_cast< ::Cmd::EGuildData >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint64 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildDataUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildDataUpdate)
  return false;
#undef DO_
}

void GuildDataUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildDataUpdate)
  // optional .Cmd.EGuildData type = 1 [default = EGUILDDATA_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildDataUpdate)
}

::google::protobuf::uint8* GuildDataUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildDataUpdate)
  // optional .Cmd.EGuildData type = 1 [default = EGUILDDATA_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildDataUpdate)
  return target;
}

int GuildDataUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EGuildData type = 1 [default = EGUILDDATA_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildDataUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildDataUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildDataUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildDataUpdate::MergeFrom(const GuildDataUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildDataUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildDataUpdate::CopyFrom(const GuildDataUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildDataUpdate::IsInitialized() const {

  return true;
}

void GuildDataUpdate::Swap(GuildDataUpdate* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildDataUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildDataUpdate_descriptor_;
  metadata.reflection = GuildDataUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildDataUpdateGuildCmd::kCmdFieldNumber;
const int GuildDataUpdateGuildCmd::kParamFieldNumber;
const int GuildDataUpdateGuildCmd::kUpdatesFieldNumber;
#endif  // !_MSC_VER

GuildDataUpdateGuildCmd::GuildDataUpdateGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildDataUpdateGuildCmd)
}

void GuildDataUpdateGuildCmd::InitAsDefaultInstance() {
}

GuildDataUpdateGuildCmd::GuildDataUpdateGuildCmd(const GuildDataUpdateGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildDataUpdateGuildCmd)
}

void GuildDataUpdateGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 6;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildDataUpdateGuildCmd::~GuildDataUpdateGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildDataUpdateGuildCmd)
  SharedDtor();
}

void GuildDataUpdateGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildDataUpdateGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildDataUpdateGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildDataUpdateGuildCmd_descriptor_;
}

const GuildDataUpdateGuildCmd& GuildDataUpdateGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildDataUpdateGuildCmd* GuildDataUpdateGuildCmd::default_instance_ = NULL;

GuildDataUpdateGuildCmd* GuildDataUpdateGuildCmd::New() const {
  return new GuildDataUpdateGuildCmd;
}

void GuildDataUpdateGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 6;
  }
  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildDataUpdateGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildDataUpdateGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDDATAUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        break;
      }

      // repeated .Cmd.GuildDataUpdate updates = 3;
      case 3: {
        if (tag == 26) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildDataUpdateGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildDataUpdateGuildCmd)
  return false;
#undef DO_
}

void GuildDataUpdateGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildDataUpdateGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDDATAUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GuildDataUpdate updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildDataUpdateGuildCmd)
}

::google::protobuf::uint8* GuildDataUpdateGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildDataUpdateGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDDATAUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GuildDataUpdate updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildDataUpdateGuildCmd)
  return target;
}

int GuildDataUpdateGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDDATAUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.GuildDataUpdate updates = 3;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildDataUpdateGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildDataUpdateGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildDataUpdateGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildDataUpdateGuildCmd::MergeFrom(const GuildDataUpdateGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildDataUpdateGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildDataUpdateGuildCmd::CopyFrom(const GuildDataUpdateGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildDataUpdateGuildCmd::IsInitialized() const {

  return true;
}

void GuildDataUpdateGuildCmd::Swap(GuildDataUpdateGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    updates_.Swap(&other->updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildDataUpdateGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildDataUpdateGuildCmd_descriptor_;
  metadata.reflection = GuildDataUpdateGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMemberDataUpdate::kTypeFieldNumber;
const int GuildMemberDataUpdate::kValueFieldNumber;
const int GuildMemberDataUpdate::kDataFieldNumber;
#endif  // !_MSC_VER

GuildMemberDataUpdate::GuildMemberDataUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildMemberDataUpdate)
}

void GuildMemberDataUpdate::InitAsDefaultInstance() {
}

GuildMemberDataUpdate::GuildMemberDataUpdate(const GuildMemberDataUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildMemberDataUpdate)
}

void GuildMemberDataUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMemberDataUpdate::~GuildMemberDataUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.GuildMemberDataUpdate)
  SharedDtor();
}

void GuildMemberDataUpdate::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void GuildMemberDataUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMemberDataUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberDataUpdate_descriptor_;
}

const GuildMemberDataUpdate& GuildMemberDataUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildMemberDataUpdate* GuildMemberDataUpdate::default_instance_ = NULL;

GuildMemberDataUpdate* GuildMemberDataUpdate::New() const {
  return new GuildMemberDataUpdate;
}

void GuildMemberDataUpdate::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 0;
    value_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMemberDataUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildMemberDataUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EGuildMemberData type = 1 [default = EGUILDMEMBERDATA_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildMemberData_IsValid(value)) {
            set_type(static_cast< ::Cmd::EGuildMemberData >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint64 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildMemberDataUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildMemberDataUpdate)
  return false;
#undef DO_
}

void GuildMemberDataUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildMemberDataUpdate)
  // optional .Cmd.EGuildMemberData type = 1 [default = EGUILDMEMBERDATA_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildMemberDataUpdate)
}

::google::protobuf::uint8* GuildMemberDataUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildMemberDataUpdate)
  // optional .Cmd.EGuildMemberData type = 1 [default = EGUILDMEMBERDATA_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildMemberDataUpdate)
  return target;
}

int GuildMemberDataUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EGuildMemberData type = 1 [default = EGUILDMEMBERDATA_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMemberDataUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMemberDataUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMemberDataUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMemberDataUpdate::MergeFrom(const GuildMemberDataUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMemberDataUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMemberDataUpdate::CopyFrom(const GuildMemberDataUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberDataUpdate::IsInitialized() const {

  return true;
}

void GuildMemberDataUpdate::Swap(GuildMemberDataUpdate* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMemberDataUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMemberDataUpdate_descriptor_;
  metadata.reflection = GuildMemberDataUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMemberDataUpdateGuildCmd::kCmdFieldNumber;
const int GuildMemberDataUpdateGuildCmd::kParamFieldNumber;
const int GuildMemberDataUpdateGuildCmd::kTypeFieldNumber;
const int GuildMemberDataUpdateGuildCmd::kCharidFieldNumber;
const int GuildMemberDataUpdateGuildCmd::kUpdatesFieldNumber;
#endif  // !_MSC_VER

GuildMemberDataUpdateGuildCmd::GuildMemberDataUpdateGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildMemberDataUpdateGuildCmd)
}

void GuildMemberDataUpdateGuildCmd::InitAsDefaultInstance() {
}

GuildMemberDataUpdateGuildCmd::GuildMemberDataUpdateGuildCmd(const GuildMemberDataUpdateGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildMemberDataUpdateGuildCmd)
}

void GuildMemberDataUpdateGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 7;
  type_ = 1;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMemberDataUpdateGuildCmd::~GuildMemberDataUpdateGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildMemberDataUpdateGuildCmd)
  SharedDtor();
}

void GuildMemberDataUpdateGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMemberDataUpdateGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMemberDataUpdateGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberDataUpdateGuildCmd_descriptor_;
}

const GuildMemberDataUpdateGuildCmd& GuildMemberDataUpdateGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildMemberDataUpdateGuildCmd* GuildMemberDataUpdateGuildCmd::default_instance_ = NULL;

GuildMemberDataUpdateGuildCmd* GuildMemberDataUpdateGuildCmd::New() const {
  return new GuildMemberDataUpdateGuildCmd;
}

void GuildMemberDataUpdateGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 50;
    param_ = 7;
    type_ = 1;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMemberDataUpdateGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildMemberDataUpdateGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_MEMBERDATAUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EGuildList type = 3 [default = EGUILDLIST_MEMBER];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildList_IsValid(value)) {
            set_type(static_cast< ::Cmd::EGuildList >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_updates;
        break;
      }

      // repeated .Cmd.GuildMemberDataUpdate updates = 5;
      case 5: {
        if (tag == 42) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_updates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildMemberDataUpdateGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildMemberDataUpdateGuildCmd)
  return false;
#undef DO_
}

void GuildMemberDataUpdateGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildMemberDataUpdateGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_MEMBERDATAUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EGuildList type = 3 [default = EGUILDLIST_MEMBER];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // repeated .Cmd.GuildMemberDataUpdate updates = 5;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->updates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildMemberDataUpdateGuildCmd)
}

::google::protobuf::uint8* GuildMemberDataUpdateGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildMemberDataUpdateGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_MEMBERDATAUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EGuildList type = 3 [default = EGUILDLIST_MEMBER];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // repeated .Cmd.GuildMemberDataUpdate updates = 5;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->updates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildMemberDataUpdateGuildCmd)
  return target;
}

int GuildMemberDataUpdateGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_MEMBERDATAUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EGuildList type = 3 [default = EGUILDLIST_MEMBER];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.GuildMemberDataUpdate updates = 5;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMemberDataUpdateGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMemberDataUpdateGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMemberDataUpdateGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMemberDataUpdateGuildCmd::MergeFrom(const GuildMemberDataUpdateGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMemberDataUpdateGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMemberDataUpdateGuildCmd::CopyFrom(const GuildMemberDataUpdateGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberDataUpdateGuildCmd::IsInitialized() const {

  return true;
}

void GuildMemberDataUpdateGuildCmd::Swap(GuildMemberDataUpdateGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    updates_.Swap(&other->updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMemberDataUpdateGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMemberDataUpdateGuildCmd_descriptor_;
  metadata.reflection = GuildMemberDataUpdateGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyGuildGuildCmd::kCmdFieldNumber;
const int ApplyGuildGuildCmd::kParamFieldNumber;
const int ApplyGuildGuildCmd::kGuidFieldNumber;
#endif  // !_MSC_VER

ApplyGuildGuildCmd::ApplyGuildGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ApplyGuildGuildCmd)
}

void ApplyGuildGuildCmd::InitAsDefaultInstance() {
}

ApplyGuildGuildCmd::ApplyGuildGuildCmd(const ApplyGuildGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ApplyGuildGuildCmd)
}

void ApplyGuildGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 8;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyGuildGuildCmd::~ApplyGuildGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ApplyGuildGuildCmd)
  SharedDtor();
}

void ApplyGuildGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyGuildGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyGuildGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyGuildGuildCmd_descriptor_;
}

const ApplyGuildGuildCmd& ApplyGuildGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

ApplyGuildGuildCmd* ApplyGuildGuildCmd::default_instance_ = NULL;

ApplyGuildGuildCmd* ApplyGuildGuildCmd::New() const {
  return new ApplyGuildGuildCmd;
}

void ApplyGuildGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 8;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyGuildGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ApplyGuildGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_APPLYGUILD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ApplyGuildGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ApplyGuildGuildCmd)
  return false;
#undef DO_
}

void ApplyGuildGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ApplyGuildGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_APPLYGUILD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ApplyGuildGuildCmd)
}

::google::protobuf::uint8* ApplyGuildGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ApplyGuildGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_APPLYGUILD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ApplyGuildGuildCmd)
  return target;
}

int ApplyGuildGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_APPLYGUILD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guid = 3 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyGuildGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyGuildGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyGuildGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyGuildGuildCmd::MergeFrom(const ApplyGuildGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyGuildGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyGuildGuildCmd::CopyFrom(const ApplyGuildGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyGuildGuildCmd::IsInitialized() const {

  return true;
}

void ApplyGuildGuildCmd::Swap(ApplyGuildGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyGuildGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyGuildGuildCmd_descriptor_;
  metadata.reflection = ApplyGuildGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessApplyGuildCmd::kCmdFieldNumber;
const int ProcessApplyGuildCmd::kParamFieldNumber;
const int ProcessApplyGuildCmd::kActionFieldNumber;
const int ProcessApplyGuildCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

ProcessApplyGuildCmd::ProcessApplyGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ProcessApplyGuildCmd)
}

void ProcessApplyGuildCmd::InitAsDefaultInstance() {
}

ProcessApplyGuildCmd::ProcessApplyGuildCmd(const ProcessApplyGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ProcessApplyGuildCmd)
}

void ProcessApplyGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 9;
  action_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessApplyGuildCmd::~ProcessApplyGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ProcessApplyGuildCmd)
  SharedDtor();
}

void ProcessApplyGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProcessApplyGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessApplyGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessApplyGuildCmd_descriptor_;
}

const ProcessApplyGuildCmd& ProcessApplyGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

ProcessApplyGuildCmd* ProcessApplyGuildCmd::default_instance_ = NULL;

ProcessApplyGuildCmd* ProcessApplyGuildCmd::New() const {
  return new ProcessApplyGuildCmd;
}

void ProcessApplyGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProcessApplyGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, action_);
    cmd_ = 50;
    param_ = 9;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessApplyGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ProcessApplyGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PROCESSAPPLY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional .Cmd.EGuildAction action = 3 [default = EGUILDACTION_MIN];
      case 3: {
        if (tag == 24) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildAction_IsValid(value)) {
            set_action(static_cast< ::Cmd::EGuildAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ProcessApplyGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ProcessApplyGuildCmd)
  return false;
#undef DO_
}

void ProcessApplyGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ProcessApplyGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PROCESSAPPLY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EGuildAction action = 3 [default = EGUILDACTION_MIN];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ProcessApplyGuildCmd)
}

::google::protobuf::uint8* ProcessApplyGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ProcessApplyGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PROCESSAPPLY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EGuildAction action = 3 [default = EGUILDACTION_MIN];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ProcessApplyGuildCmd)
  return target;
}

int ProcessApplyGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PROCESSAPPLY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EGuildAction action = 3 [default = EGUILDACTION_MIN];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessApplyGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessApplyGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessApplyGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessApplyGuildCmd::MergeFrom(const ProcessApplyGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessApplyGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessApplyGuildCmd::CopyFrom(const ProcessApplyGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessApplyGuildCmd::IsInitialized() const {

  return true;
}

void ProcessApplyGuildCmd::Swap(ProcessApplyGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(action_, other->action_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessApplyGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessApplyGuildCmd_descriptor_;
  metadata.reflection = ProcessApplyGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteMemberGuildCmd::kCmdFieldNumber;
const int InviteMemberGuildCmd::kParamFieldNumber;
const int InviteMemberGuildCmd::kCharidFieldNumber;
const int InviteMemberGuildCmd::kGuildidFieldNumber;
const int InviteMemberGuildCmd::kGuildnameFieldNumber;
const int InviteMemberGuildCmd::kInvitenameFieldNumber;
#endif  // !_MSC_VER

InviteMemberGuildCmd::InviteMemberGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InviteMemberGuildCmd)
}

void InviteMemberGuildCmd::InitAsDefaultInstance() {
}

InviteMemberGuildCmd::InviteMemberGuildCmd(const InviteMemberGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InviteMemberGuildCmd)
}

void InviteMemberGuildCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 10;
  charid_ = GOOGLE_ULONGLONG(0);
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteMemberGuildCmd::~InviteMemberGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.InviteMemberGuildCmd)
  SharedDtor();
}

void InviteMemberGuildCmd::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (invitename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invitename_;
  }
  if (this != default_instance_) {
  }
}

void InviteMemberGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteMemberGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteMemberGuildCmd_descriptor_;
}

const InviteMemberGuildCmd& InviteMemberGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

InviteMemberGuildCmd* InviteMemberGuildCmd::default_instance_ = NULL;

InviteMemberGuildCmd* InviteMemberGuildCmd::New() const {
  return new InviteMemberGuildCmd;
}

void InviteMemberGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InviteMemberGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, guildid_);
    cmd_ = 50;
    param_ = 10;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_invitename()) {
      if (invitename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invitename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteMemberGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InviteMemberGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_INVITEMEMBER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_guildname;
        break;
      }

      // optional string guildname = 5;
      case 5: {
        if (tag == 42) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_invitename;
        break;
      }

      // optional string invitename = 6;
      case 6: {
        if (tag == 50) {
         parse_invitename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invitename().data(), this->invitename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invitename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InviteMemberGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InviteMemberGuildCmd)
  return false;
#undef DO_
}

void InviteMemberGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InviteMemberGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_INVITEMEMBER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 guildid = 4 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guildid(), output);
  }

  // optional string guildname = 5;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->guildname(), output);
  }

  // optional string invitename = 6;
  if (has_invitename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitename().data(), this->invitename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->invitename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InviteMemberGuildCmd)
}

::google::protobuf::uint8* InviteMemberGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InviteMemberGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_INVITEMEMBER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 guildid = 4 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guildid(), target);
  }

  // optional string guildname = 5;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guildname(), target);
  }

  // optional string invitename = 6;
  if (has_invitename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitename().data(), this->invitename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->invitename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InviteMemberGuildCmd)
  return target;
}

int InviteMemberGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_INVITEMEMBER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 guildid = 4 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string guildname = 5;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string invitename = 6;
    if (has_invitename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteMemberGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteMemberGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteMemberGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteMemberGuildCmd::MergeFrom(const InviteMemberGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_invitename()) {
      set_invitename(from.invitename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteMemberGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteMemberGuildCmd::CopyFrom(const InviteMemberGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteMemberGuildCmd::IsInitialized() const {

  return true;
}

void InviteMemberGuildCmd::Swap(InviteMemberGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(invitename_, other->invitename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteMemberGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteMemberGuildCmd_descriptor_;
  metadata.reflection = InviteMemberGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessInviteGuildCmd::kCmdFieldNumber;
const int ProcessInviteGuildCmd::kParamFieldNumber;
const int ProcessInviteGuildCmd::kActionFieldNumber;
const int ProcessInviteGuildCmd::kGuidFieldNumber;
#endif  // !_MSC_VER

ProcessInviteGuildCmd::ProcessInviteGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ProcessInviteGuildCmd)
}

void ProcessInviteGuildCmd::InitAsDefaultInstance() {
}

ProcessInviteGuildCmd::ProcessInviteGuildCmd(const ProcessInviteGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ProcessInviteGuildCmd)
}

void ProcessInviteGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 11;
  action_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessInviteGuildCmd::~ProcessInviteGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ProcessInviteGuildCmd)
  SharedDtor();
}

void ProcessInviteGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProcessInviteGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessInviteGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessInviteGuildCmd_descriptor_;
}

const ProcessInviteGuildCmd& ProcessInviteGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

ProcessInviteGuildCmd* ProcessInviteGuildCmd::default_instance_ = NULL;

ProcessInviteGuildCmd* ProcessInviteGuildCmd::New() const {
  return new ProcessInviteGuildCmd;
}

void ProcessInviteGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProcessInviteGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(guid_, action_);
    cmd_ = 50;
    param_ = 11;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessInviteGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ProcessInviteGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PROCESSINVITEMEMBER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional .Cmd.EGuildAction action = 3 [default = EGUILDACTION_MIN];
      case 3: {
        if (tag == 24) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildAction_IsValid(value)) {
            set_action(static_cast< ::Cmd::EGuildAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ProcessInviteGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ProcessInviteGuildCmd)
  return false;
#undef DO_
}

void ProcessInviteGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ProcessInviteGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PROCESSINVITEMEMBER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EGuildAction action = 3 [default = EGUILDACTION_MIN];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // optional uint64 guid = 4 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ProcessInviteGuildCmd)
}

::google::protobuf::uint8* ProcessInviteGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ProcessInviteGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PROCESSINVITEMEMBER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EGuildAction action = 3 [default = EGUILDACTION_MIN];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // optional uint64 guid = 4 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ProcessInviteGuildCmd)
  return target;
}

int ProcessInviteGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PROCESSINVITEMEMBER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EGuildAction action = 3 [default = EGUILDACTION_MIN];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional uint64 guid = 4 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessInviteGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessInviteGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessInviteGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessInviteGuildCmd::MergeFrom(const ProcessInviteGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessInviteGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessInviteGuildCmd::CopyFrom(const ProcessInviteGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessInviteGuildCmd::IsInitialized() const {

  return true;
}

void ProcessInviteGuildCmd::Swap(ProcessInviteGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(action_, other->action_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessInviteGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessInviteGuildCmd_descriptor_;
  metadata.reflection = ProcessInviteGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGuildOptionGuildCmd::kCmdFieldNumber;
const int SetGuildOptionGuildCmd::kParamFieldNumber;
const int SetGuildOptionGuildCmd::kBoardFieldNumber;
const int SetGuildOptionGuildCmd::kRecruitFieldNumber;
const int SetGuildOptionGuildCmd::kPortraitFieldNumber;
const int SetGuildOptionGuildCmd::kJobsFieldNumber;
#endif  // !_MSC_VER

SetGuildOptionGuildCmd::SetGuildOptionGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SetGuildOptionGuildCmd)
}

void SetGuildOptionGuildCmd::InitAsDefaultInstance() {
}

SetGuildOptionGuildCmd::SetGuildOptionGuildCmd(const SetGuildOptionGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SetGuildOptionGuildCmd)
}

void SetGuildOptionGuildCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 12;
  board_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recruit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuildOptionGuildCmd::~SetGuildOptionGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SetGuildOptionGuildCmd)
  SharedDtor();
}

void SetGuildOptionGuildCmd::SharedDtor() {
  if (board_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete board_;
  }
  if (recruit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recruit_;
  }
  if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete portrait_;
  }
  if (this != default_instance_) {
  }
}

void SetGuildOptionGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildOptionGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuildOptionGuildCmd_descriptor_;
}

const SetGuildOptionGuildCmd& SetGuildOptionGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

SetGuildOptionGuildCmd* SetGuildOptionGuildCmd::default_instance_ = NULL;

SetGuildOptionGuildCmd* SetGuildOptionGuildCmd::New() const {
  return new SetGuildOptionGuildCmd;
}

void SetGuildOptionGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 50;
    param_ = 12;
    if (has_board()) {
      if (board_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        board_->clear();
      }
    }
    if (has_recruit()) {
      if (recruit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recruit_->clear();
      }
    }
    if (has_portrait()) {
      if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        portrait_->clear();
      }
    }
  }
  jobs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGuildOptionGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SetGuildOptionGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_SETOPTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_board;
        break;
      }

      // optional string board = 3;
      case 3: {
        if (tag == 26) {
         parse_board:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_board()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->board().data(), this->board().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "board");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_recruit;
        break;
      }

      // optional string recruit = 4;
      case 4: {
        if (tag == 34) {
         parse_recruit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recruit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recruit().data(), this->recruit().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recruit");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_portrait;
        break;
      }

      // optional string portrait = 5;
      case 5: {
        if (tag == 42) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portrait()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->portrait().data(), this->portrait().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "portrait");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_jobs;
        break;
      }

      // repeated .Cmd.GuildJob jobs = 6;
      case 6: {
        if (tag == 50) {
         parse_jobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_jobs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SetGuildOptionGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SetGuildOptionGuildCmd)
  return false;
#undef DO_
}

void SetGuildOptionGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SetGuildOptionGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_SETOPTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string board = 3;
  if (has_board()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->board().data(), this->board().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "board");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->board(), output);
  }

  // optional string recruit = 4;
  if (has_recruit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recruit().data(), this->recruit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recruit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->recruit(), output);
  }

  // optional string portrait = 5;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "portrait");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->portrait(), output);
  }

  // repeated .Cmd.GuildJob jobs = 6;
  for (int i = 0; i < this->jobs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->jobs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SetGuildOptionGuildCmd)
}

::google::protobuf::uint8* SetGuildOptionGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SetGuildOptionGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_SETOPTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string board = 3;
  if (has_board()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->board().data(), this->board().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "board");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->board(), target);
  }

  // optional string recruit = 4;
  if (has_recruit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recruit().data(), this->recruit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recruit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->recruit(), target);
  }

  // optional string portrait = 5;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "portrait");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->portrait(), target);
  }

  // repeated .Cmd.GuildJob jobs = 6;
  for (int i = 0; i < this->jobs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->jobs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SetGuildOptionGuildCmd)
  return target;
}

int SetGuildOptionGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_SETOPTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string board = 3;
    if (has_board()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->board());
    }

    // optional string recruit = 4;
    if (has_recruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recruit());
    }

    // optional string portrait = 5;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portrait());
    }

  }
  // repeated .Cmd.GuildJob jobs = 6;
  total_size += 1 * this->jobs_size();
  for (int i = 0; i < this->jobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jobs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildOptionGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGuildOptionGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGuildOptionGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGuildOptionGuildCmd::MergeFrom(const SetGuildOptionGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  jobs_.MergeFrom(from.jobs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_board()) {
      set_board(from.board());
    }
    if (from.has_recruit()) {
      set_recruit(from.recruit());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGuildOptionGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGuildOptionGuildCmd::CopyFrom(const SetGuildOptionGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGuildOptionGuildCmd::IsInitialized() const {

  return true;
}

void SetGuildOptionGuildCmd::Swap(SetGuildOptionGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(board_, other->board_);
    std::swap(recruit_, other->recruit_);
    std::swap(portrait_, other->portrait_);
    jobs_.Swap(&other->jobs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGuildOptionGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuildOptionGuildCmd_descriptor_;
  metadata.reflection = SetGuildOptionGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickMemberGuildCmd::kCmdFieldNumber;
const int KickMemberGuildCmd::kParamFieldNumber;
const int KickMemberGuildCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

KickMemberGuildCmd::KickMemberGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.KickMemberGuildCmd)
}

void KickMemberGuildCmd::InitAsDefaultInstance() {
}

KickMemberGuildCmd::KickMemberGuildCmd(const KickMemberGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.KickMemberGuildCmd)
}

void KickMemberGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 13;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickMemberGuildCmd::~KickMemberGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.KickMemberGuildCmd)
  SharedDtor();
}

void KickMemberGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickMemberGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickMemberGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickMemberGuildCmd_descriptor_;
}

const KickMemberGuildCmd& KickMemberGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

KickMemberGuildCmd* KickMemberGuildCmd::default_instance_ = NULL;

KickMemberGuildCmd* KickMemberGuildCmd::New() const {
  return new KickMemberGuildCmd;
}

void KickMemberGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 13;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickMemberGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.KickMemberGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_KICKMEMBER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.KickMemberGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.KickMemberGuildCmd)
  return false;
#undef DO_
}

void KickMemberGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.KickMemberGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_KICKMEMBER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.KickMemberGuildCmd)
}

::google::protobuf::uint8* KickMemberGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.KickMemberGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_KICKMEMBER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.KickMemberGuildCmd)
  return target;
}

int KickMemberGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_KICKMEMBER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickMemberGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickMemberGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickMemberGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickMemberGuildCmd::MergeFrom(const KickMemberGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickMemberGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickMemberGuildCmd::CopyFrom(const KickMemberGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickMemberGuildCmd::IsInitialized() const {

  return true;
}

void KickMemberGuildCmd::Swap(KickMemberGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickMemberGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickMemberGuildCmd_descriptor_;
  metadata.reflection = KickMemberGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeJobGuildCmd::kCmdFieldNumber;
const int ChangeJobGuildCmd::kParamFieldNumber;
const int ChangeJobGuildCmd::kCharidFieldNumber;
const int ChangeJobGuildCmd::kJobFieldNumber;
#endif  // !_MSC_VER

ChangeJobGuildCmd::ChangeJobGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeJobGuildCmd)
}

void ChangeJobGuildCmd::InitAsDefaultInstance() {
}

ChangeJobGuildCmd::ChangeJobGuildCmd(const ChangeJobGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeJobGuildCmd)
}

void ChangeJobGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 14;
  charid_ = GOOGLE_ULONGLONG(0);
  job_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeJobGuildCmd::~ChangeJobGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeJobGuildCmd)
  SharedDtor();
}

void ChangeJobGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeJobGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeJobGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeJobGuildCmd_descriptor_;
}

const ChangeJobGuildCmd& ChangeJobGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

ChangeJobGuildCmd* ChangeJobGuildCmd::default_instance_ = NULL;

ChangeJobGuildCmd* ChangeJobGuildCmd::New() const {
  return new ChangeJobGuildCmd;
}

void ChangeJobGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeJobGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, job_);
    cmd_ = 50;
    param_ = 14;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeJobGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeJobGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CHANGEJOB];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional .Cmd.EGuildJob job = 4 [default = EGUILDJOB_MIN];
      case 4: {
        if (tag == 32) {
         parse_job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildJob_IsValid(value)) {
            set_job(static_cast< ::Cmd::EGuildJob >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeJobGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeJobGuildCmd)
  return false;
#undef DO_
}

void ChangeJobGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeJobGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CHANGEJOB];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.EGuildJob job = 4 [default = EGUILDJOB_MIN];
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->job(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeJobGuildCmd)
}

::google::protobuf::uint8* ChangeJobGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeJobGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CHANGEJOB];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.EGuildJob job = 4 [default = EGUILDJOB_MIN];
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->job(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeJobGuildCmd)
  return target;
}

int ChangeJobGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CHANGEJOB];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.EGuildJob job = 4 [default = EGUILDJOB_MIN];
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeJobGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeJobGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeJobGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeJobGuildCmd::MergeFrom(const ChangeJobGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeJobGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeJobGuildCmd::CopyFrom(const ChangeJobGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeJobGuildCmd::IsInitialized() const {

  return true;
}

void ChangeJobGuildCmd::Swap(ChangeJobGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(job_, other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeJobGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeJobGuildCmd_descriptor_;
  metadata.reflection = ChangeJobGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitGuildGuildCmd::kCmdFieldNumber;
const int ExitGuildGuildCmd::kParamFieldNumber;
#endif  // !_MSC_VER

ExitGuildGuildCmd::ExitGuildGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExitGuildGuildCmd)
}

void ExitGuildGuildCmd::InitAsDefaultInstance() {
}

ExitGuildGuildCmd::ExitGuildGuildCmd(const ExitGuildGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExitGuildGuildCmd)
}

void ExitGuildGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 15;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitGuildGuildCmd::~ExitGuildGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ExitGuildGuildCmd)
  SharedDtor();
}

void ExitGuildGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitGuildGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitGuildGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitGuildGuildCmd_descriptor_;
}

const ExitGuildGuildCmd& ExitGuildGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

ExitGuildGuildCmd* ExitGuildGuildCmd::default_instance_ = NULL;

ExitGuildGuildCmd* ExitGuildGuildCmd::New() const {
  return new ExitGuildGuildCmd;
}

void ExitGuildGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 15;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitGuildGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExitGuildGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXITGUILD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExitGuildGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExitGuildGuildCmd)
  return false;
#undef DO_
}

void ExitGuildGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExitGuildGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXITGUILD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExitGuildGuildCmd)
}

::google::protobuf::uint8* ExitGuildGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExitGuildGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXITGUILD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExitGuildGuildCmd)
  return target;
}

int ExitGuildGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXITGUILD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitGuildGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitGuildGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitGuildGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitGuildGuildCmd::MergeFrom(const ExitGuildGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitGuildGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitGuildGuildCmd::CopyFrom(const ExitGuildGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitGuildGuildCmd::IsInitialized() const {

  return true;
}

void ExitGuildGuildCmd::Swap(ExitGuildGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitGuildGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitGuildGuildCmd_descriptor_;
  metadata.reflection = ExitGuildGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeChairGuildCmd::kCmdFieldNumber;
const int ExchangeChairGuildCmd::kParamFieldNumber;
const int ExchangeChairGuildCmd::kNewcharidFieldNumber;
#endif  // !_MSC_VER

ExchangeChairGuildCmd::ExchangeChairGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExchangeChairGuildCmd)
}

void ExchangeChairGuildCmd::InitAsDefaultInstance() {
}

ExchangeChairGuildCmd::ExchangeChairGuildCmd(const ExchangeChairGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExchangeChairGuildCmd)
}

void ExchangeChairGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 16;
  newcharid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeChairGuildCmd::~ExchangeChairGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ExchangeChairGuildCmd)
  SharedDtor();
}

void ExchangeChairGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeChairGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeChairGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeChairGuildCmd_descriptor_;
}

const ExchangeChairGuildCmd& ExchangeChairGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

ExchangeChairGuildCmd* ExchangeChairGuildCmd::default_instance_ = NULL;

ExchangeChairGuildCmd* ExchangeChairGuildCmd::New() const {
  return new ExchangeChairGuildCmd;
}

void ExchangeChairGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 16;
    newcharid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeChairGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExchangeChairGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGECHAIR];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_newcharid;
        break;
      }

      // optional uint64 newcharid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_newcharid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newcharid_)));
          set_has_newcharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExchangeChairGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExchangeChairGuildCmd)
  return false;
#undef DO_
}

void ExchangeChairGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExchangeChairGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGECHAIR];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 newcharid = 3 [default = 0];
  if (has_newcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->newcharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExchangeChairGuildCmd)
}

::google::protobuf::uint8* ExchangeChairGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExchangeChairGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGECHAIR];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 newcharid = 3 [default = 0];
  if (has_newcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->newcharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExchangeChairGuildCmd)
  return target;
}

int ExchangeChairGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGECHAIR];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 newcharid = 3 [default = 0];
    if (has_newcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->newcharid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeChairGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeChairGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeChairGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeChairGuildCmd::MergeFrom(const ExchangeChairGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_newcharid()) {
      set_newcharid(from.newcharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeChairGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeChairGuildCmd::CopyFrom(const ExchangeChairGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeChairGuildCmd::IsInitialized() const {

  return true;
}

void ExchangeChairGuildCmd::Swap(ExchangeChairGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(newcharid_, other->newcharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeChairGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeChairGuildCmd_descriptor_;
  metadata.reflection = ExchangeChairGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DismissGuildCmd::kCmdFieldNumber;
const int DismissGuildCmd::kParamFieldNumber;
const int DismissGuildCmd::kSetFieldNumber;
#endif  // !_MSC_VER

DismissGuildCmd::DismissGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DismissGuildCmd)
}

void DismissGuildCmd::InitAsDefaultInstance() {
}

DismissGuildCmd::DismissGuildCmd(const DismissGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DismissGuildCmd)
}

void DismissGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 17;
  set_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DismissGuildCmd::~DismissGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DismissGuildCmd)
  SharedDtor();
}

void DismissGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DismissGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DismissGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DismissGuildCmd_descriptor_;
}

const DismissGuildCmd& DismissGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

DismissGuildCmd* DismissGuildCmd::default_instance_ = NULL;

DismissGuildCmd* DismissGuildCmd::New() const {
  return new DismissGuildCmd;
}

void DismissGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 17;
    set_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DismissGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DismissGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DISMISSGUILD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_set;
        break;
      }

      // optional bool set = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &set_)));
          set_has_set();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DismissGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DismissGuildCmd)
  return false;
#undef DO_
}

void DismissGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DismissGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DISMISSGUILD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool set = 3 [default = false];
  if (has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DismissGuildCmd)
}

::google::protobuf::uint8* DismissGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DismissGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DISMISSGUILD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool set = 3 [default = false];
  if (has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DismissGuildCmd)
  return target;
}

int DismissGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DISMISSGUILD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool set = 3 [default = false];
    if (has_set()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DismissGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DismissGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DismissGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DismissGuildCmd::MergeFrom(const DismissGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_set()) {
      set_set(from.set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DismissGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DismissGuildCmd::CopyFrom(const DismissGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DismissGuildCmd::IsInitialized() const {

  return true;
}

void DismissGuildCmd::Swap(DismissGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(set_, other->set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DismissGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DismissGuildCmd_descriptor_;
  metadata.reflection = DismissGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelupGuildCmd::kCmdFieldNumber;
const int LevelupGuildCmd::kParamFieldNumber;
#endif  // !_MSC_VER

LevelupGuildCmd::LevelupGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LevelupGuildCmd)
}

void LevelupGuildCmd::InitAsDefaultInstance() {
}

LevelupGuildCmd::LevelupGuildCmd(const LevelupGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LevelupGuildCmd)
}

void LevelupGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 18;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelupGuildCmd::~LevelupGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LevelupGuildCmd)
  SharedDtor();
}

void LevelupGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelupGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelupGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelupGuildCmd_descriptor_;
}

const LevelupGuildCmd& LevelupGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

LevelupGuildCmd* LevelupGuildCmd::default_instance_ = NULL;

LevelupGuildCmd* LevelupGuildCmd::New() const {
  return new LevelupGuildCmd;
}

void LevelupGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 18;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelupGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LevelupGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_LEVELUPGUILD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LevelupGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LevelupGuildCmd)
  return false;
#undef DO_
}

void LevelupGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LevelupGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_LEVELUPGUILD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LevelupGuildCmd)
}

::google::protobuf::uint8* LevelupGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LevelupGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_LEVELUPGUILD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LevelupGuildCmd)
  return target;
}

int LevelupGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_LEVELUPGUILD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelupGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelupGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelupGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelupGuildCmd::MergeFrom(const LevelupGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelupGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelupGuildCmd::CopyFrom(const LevelupGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelupGuildCmd::IsInitialized() const {

  return true;
}

void LevelupGuildCmd::Swap(LevelupGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelupGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelupGuildCmd_descriptor_;
  metadata.reflection = LevelupGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DonateGuildCmd::kCmdFieldNumber;
const int DonateGuildCmd::kParamFieldNumber;
const int DonateGuildCmd::kConfigidFieldNumber;
const int DonateGuildCmd::kTimeFieldNumber;
#endif  // !_MSC_VER

DonateGuildCmd::DonateGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DonateGuildCmd)
}

void DonateGuildCmd::InitAsDefaultInstance() {
}

DonateGuildCmd::DonateGuildCmd(const DonateGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DonateGuildCmd)
}

void DonateGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 19;
  configid_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DonateGuildCmd::~DonateGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DonateGuildCmd)
  SharedDtor();
}

void DonateGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DonateGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DonateGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DonateGuildCmd_descriptor_;
}

const DonateGuildCmd& DonateGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

DonateGuildCmd* DonateGuildCmd::default_instance_ = NULL;

DonateGuildCmd* DonateGuildCmd::New() const {
  return new DonateGuildCmd;
}

void DonateGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DonateGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(configid_, time_);
    cmd_ = 50;
    param_ = 19;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DonateGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DonateGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DONATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_configid;
        break;
      }

      // optional uint32 configid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_configid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DonateGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DonateGuildCmd)
  return false;
#undef DO_
}

void DonateGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DonateGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DONATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 configid = 3 [default = 0];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->configid(), output);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DonateGuildCmd)
}

::google::protobuf::uint8* DonateGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DonateGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DONATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 configid = 3 [default = 0];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->configid(), target);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DonateGuildCmd)
  return target;
}

int DonateGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DONATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 configid = 3 [default = 0];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

    // optional uint32 time = 4 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DonateGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DonateGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DonateGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DonateGuildCmd::MergeFrom(const DonateGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DonateGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DonateGuildCmd::CopyFrom(const DonateGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DonateGuildCmd::IsInitialized() const {

  return true;
}

void DonateGuildCmd::Swap(DonateGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(configid_, other->configid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DonateGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DonateGuildCmd_descriptor_;
  metadata.reflection = DonateGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DonateItem::kConfigidFieldNumber;
const int DonateItem::kCountFieldNumber;
const int DonateItem::kTimeFieldNumber;
const int DonateItem::kItemidFieldNumber;
const int DonateItem::kItemcountFieldNumber;
const int DonateItem::kContributeFieldNumber;
const int DonateItem::kMedalFieldNumber;
#endif  // !_MSC_VER

DonateItem::DonateItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DonateItem)
}

void DonateItem::InitAsDefaultInstance() {
}

DonateItem::DonateItem(const DonateItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DonateItem)
}

void DonateItem::SharedCtor() {
  _cached_size_ = 0;
  configid_ = 0u;
  count_ = 0u;
  time_ = 0u;
  itemid_ = 0u;
  itemcount_ = 0u;
  contribute_ = 0u;
  medal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DonateItem::~DonateItem() {
  // @@protoc_insertion_point(destructor:Cmd.DonateItem)
  SharedDtor();
}

void DonateItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DonateItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DonateItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DonateItem_descriptor_;
}

const DonateItem& DonateItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

DonateItem* DonateItem::default_instance_ = NULL;

DonateItem* DonateItem::New() const {
  return new DonateItem;
}

void DonateItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DonateItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(configid_, medal_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DonateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DonateItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 configid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemcount;
        break;
      }

      // optional uint32 itemcount = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_itemcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_contribute;
        break;
      }

      // optional uint32 contribute = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_medal;
        break;
      }

      // optional uint32 medal = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medal_)));
          set_has_medal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DonateItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DonateItem)
  return false;
#undef DO_
}

void DonateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DonateItem)
  // optional uint32 configid = 1 [default = 0];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->configid(), output);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional uint32 itemid = 4 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemid(), output);
  }

  // optional uint32 itemcount = 5 [default = 0];
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->itemcount(), output);
  }

  // optional uint32 contribute = 6 [default = 0];
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->contribute(), output);
  }

  // optional uint32 medal = 7 [default = 0];
  if (has_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->medal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DonateItem)
}

::google::protobuf::uint8* DonateItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DonateItem)
  // optional uint32 configid = 1 [default = 0];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->configid(), target);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional uint32 itemid = 4 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemid(), target);
  }

  // optional uint32 itemcount = 5 [default = 0];
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->itemcount(), target);
  }

  // optional uint32 contribute = 6 [default = 0];
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->contribute(), target);
  }

  // optional uint32 medal = 7 [default = 0];
  if (has_medal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->medal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DonateItem)
  return target;
}

int DonateItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 configid = 1 [default = 0];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

    // optional uint32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 itemid = 4 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 itemcount = 5 [default = 0];
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcount());
    }

    // optional uint32 contribute = 6 [default = 0];
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribute());
    }

    // optional uint32 medal = 7 [default = 0];
    if (has_medal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DonateItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DonateItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DonateItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DonateItem::MergeFrom(const DonateItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_medal()) {
      set_medal(from.medal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DonateItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DonateItem::CopyFrom(const DonateItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DonateItem::IsInitialized() const {

  return true;
}

void DonateItem::Swap(DonateItem* other) {
  if (other != this) {
    std::swap(configid_, other->configid_);
    std::swap(count_, other->count_);
    std::swap(time_, other->time_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(contribute_, other->contribute_);
    std::swap(medal_, other->medal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DonateItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DonateItem_descriptor_;
  metadata.reflection = DonateItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DonateListGuildCmd::kCmdFieldNumber;
const int DonateListGuildCmd::kParamFieldNumber;
const int DonateListGuildCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

DonateListGuildCmd::DonateListGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DonateListGuildCmd)
}

void DonateListGuildCmd::InitAsDefaultInstance() {
}

DonateListGuildCmd::DonateListGuildCmd(const DonateListGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DonateListGuildCmd)
}

void DonateListGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 25;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DonateListGuildCmd::~DonateListGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DonateListGuildCmd)
  SharedDtor();
}

void DonateListGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DonateListGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DonateListGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DonateListGuildCmd_descriptor_;
}

const DonateListGuildCmd& DonateListGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

DonateListGuildCmd* DonateListGuildCmd::default_instance_ = NULL;

DonateListGuildCmd* DonateListGuildCmd::New() const {
  return new DonateListGuildCmd;
}

void DonateListGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 25;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DonateListGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DonateListGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DONATELIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.DonateItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DonateListGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DonateListGuildCmd)
  return false;
#undef DO_
}

void DonateListGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DonateListGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DONATELIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.DonateItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DonateListGuildCmd)
}

::google::protobuf::uint8* DonateListGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DonateListGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DONATELIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.DonateItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DonateListGuildCmd)
  return target;
}

int DonateListGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DONATELIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.DonateItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DonateListGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DonateListGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DonateListGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DonateListGuildCmd::MergeFrom(const DonateListGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DonateListGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DonateListGuildCmd::CopyFrom(const DonateListGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DonateListGuildCmd::IsInitialized() const {

  return true;
}

void DonateListGuildCmd::Swap(DonateListGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DonateListGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DonateListGuildCmd_descriptor_;
  metadata.reflection = DonateListGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDonateItemGuildCmd::kCmdFieldNumber;
const int UpdateDonateItemGuildCmd::kParamFieldNumber;
const int UpdateDonateItemGuildCmd::kItemFieldNumber;
const int UpdateDonateItemGuildCmd::kDelFieldNumber;
#endif  // !_MSC_VER

UpdateDonateItemGuildCmd::UpdateDonateItemGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateDonateItemGuildCmd)
}

void UpdateDonateItemGuildCmd::InitAsDefaultInstance() {
  item_ = const_cast< ::Cmd::DonateItem*>(&::Cmd::DonateItem::default_instance());
  del_ = const_cast< ::Cmd::DonateItem*>(&::Cmd::DonateItem::default_instance());
}

UpdateDonateItemGuildCmd::UpdateDonateItemGuildCmd(const UpdateDonateItemGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateDonateItemGuildCmd)
}

void UpdateDonateItemGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 26;
  item_ = NULL;
  del_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDonateItemGuildCmd::~UpdateDonateItemGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateDonateItemGuildCmd)
  SharedDtor();
}

void UpdateDonateItemGuildCmd::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
    delete del_;
  }
}

void UpdateDonateItemGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDonateItemGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDonateItemGuildCmd_descriptor_;
}

const UpdateDonateItemGuildCmd& UpdateDonateItemGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

UpdateDonateItemGuildCmd* UpdateDonateItemGuildCmd::default_instance_ = NULL;

UpdateDonateItemGuildCmd* UpdateDonateItemGuildCmd::New() const {
  return new UpdateDonateItemGuildCmd;
}

void UpdateDonateItemGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 50;
    param_ = 26;
    if (has_item()) {
      if (item_ != NULL) item_->::Cmd::DonateItem::Clear();
    }
    if (has_del()) {
      if (del_ != NULL) del_->::Cmd::DonateItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDonateItemGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateDonateItemGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_UPDATEDONATEITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // optional .Cmd.DonateItem item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_del;
        break;
      }

      // optional .Cmd.DonateItem del = 4;
      case 4: {
        if (tag == 34) {
         parse_del:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateDonateItemGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateDonateItemGuildCmd)
  return false;
#undef DO_
}

void UpdateDonateItemGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateDonateItemGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_UPDATEDONATEITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.DonateItem item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }

  // optional .Cmd.DonateItem del = 4;
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->del(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateDonateItemGuildCmd)
}

::google::protobuf::uint8* UpdateDonateItemGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateDonateItemGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_UPDATEDONATEITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.DonateItem item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }

  // optional .Cmd.DonateItem del = 4;
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->del(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateDonateItemGuildCmd)
  return target;
}

int UpdateDonateItemGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_UPDATEDONATEITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.DonateItem item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional .Cmd.DonateItem del = 4;
    if (has_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDonateItemGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDonateItemGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDonateItemGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDonateItemGuildCmd::MergeFrom(const UpdateDonateItemGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_item()) {
      mutable_item()->::Cmd::DonateItem::MergeFrom(from.item());
    }
    if (from.has_del()) {
      mutable_del()->::Cmd::DonateItem::MergeFrom(from.del());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDonateItemGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDonateItemGuildCmd::CopyFrom(const UpdateDonateItemGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDonateItemGuildCmd::IsInitialized() const {

  return true;
}

void UpdateDonateItemGuildCmd::Swap(UpdateDonateItemGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(item_, other->item_);
    std::swap(del_, other->del_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDonateItemGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDonateItemGuildCmd_descriptor_;
  metadata.reflection = UpdateDonateItemGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DonateFrameGuildCmd::kCmdFieldNumber;
const int DonateFrameGuildCmd::kParamFieldNumber;
const int DonateFrameGuildCmd::kOpenFieldNumber;
#endif  // !_MSC_VER

DonateFrameGuildCmd::DonateFrameGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DonateFrameGuildCmd)
}

void DonateFrameGuildCmd::InitAsDefaultInstance() {
}

DonateFrameGuildCmd::DonateFrameGuildCmd(const DonateFrameGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DonateFrameGuildCmd)
}

void DonateFrameGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 27;
  open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DonateFrameGuildCmd::~DonateFrameGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DonateFrameGuildCmd)
  SharedDtor();
}

void DonateFrameGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DonateFrameGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DonateFrameGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DonateFrameGuildCmd_descriptor_;
}

const DonateFrameGuildCmd& DonateFrameGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

DonateFrameGuildCmd* DonateFrameGuildCmd::default_instance_ = NULL;

DonateFrameGuildCmd* DonateFrameGuildCmd::New() const {
  return new DonateFrameGuildCmd;
}

void DonateFrameGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 27;
    open_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DonateFrameGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DonateFrameGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DONATEFRAMESTATUS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_open;
        break;
      }

      // optional bool open = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DonateFrameGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DonateFrameGuildCmd)
  return false;
#undef DO_
}

void DonateFrameGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DonateFrameGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DONATEFRAMESTATUS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool open = 3 [default = false];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DonateFrameGuildCmd)
}

::google::protobuf::uint8* DonateFrameGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DonateFrameGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DONATEFRAMESTATUS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool open = 3 [default = false];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DonateFrameGuildCmd)
  return target;
}

int DonateFrameGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_DONATEFRAMESTATUS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool open = 3 [default = false];
    if (has_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DonateFrameGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DonateFrameGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DonateFrameGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DonateFrameGuildCmd::MergeFrom(const DonateFrameGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DonateFrameGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DonateFrameGuildCmd::CopyFrom(const DonateFrameGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DonateFrameGuildCmd::IsInitialized() const {

  return true;
}

void DonateFrameGuildCmd::Swap(DonateFrameGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DonateFrameGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DonateFrameGuildCmd_descriptor_;
  metadata.reflection = DonateFrameGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterTerritoryGuildCmd::kCmdFieldNumber;
const int EnterTerritoryGuildCmd::kParamFieldNumber;
const int EnterTerritoryGuildCmd::kHandidFieldNumber;
#endif  // !_MSC_VER

EnterTerritoryGuildCmd::EnterTerritoryGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnterTerritoryGuildCmd)
}

void EnterTerritoryGuildCmd::InitAsDefaultInstance() {
}

EnterTerritoryGuildCmd::EnterTerritoryGuildCmd(const EnterTerritoryGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnterTerritoryGuildCmd)
}

void EnterTerritoryGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 20;
  handid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterTerritoryGuildCmd::~EnterTerritoryGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EnterTerritoryGuildCmd)
  SharedDtor();
}

void EnterTerritoryGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterTerritoryGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterTerritoryGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterTerritoryGuildCmd_descriptor_;
}

const EnterTerritoryGuildCmd& EnterTerritoryGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

EnterTerritoryGuildCmd* EnterTerritoryGuildCmd::default_instance_ = NULL;

EnterTerritoryGuildCmd* EnterTerritoryGuildCmd::New() const {
  return new EnterTerritoryGuildCmd;
}

void EnterTerritoryGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 20;
    handid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterTerritoryGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnterTerritoryGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ENTERGUILDTERRITORY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_handid;
        break;
      }

      // optional uint64 handid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_handid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handid_)));
          set_has_handid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnterTerritoryGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnterTerritoryGuildCmd)
  return false;
#undef DO_
}

void EnterTerritoryGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnterTerritoryGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ENTERGUILDTERRITORY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 handid = 3 [default = 0];
  if (has_handid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->handid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnterTerritoryGuildCmd)
}

::google::protobuf::uint8* EnterTerritoryGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnterTerritoryGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ENTERGUILDTERRITORY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 handid = 3 [default = 0];
  if (has_handid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->handid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnterTerritoryGuildCmd)
  return target;
}

int EnterTerritoryGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ENTERGUILDTERRITORY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 handid = 3 [default = 0];
    if (has_handid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterTerritoryGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterTerritoryGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterTerritoryGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterTerritoryGuildCmd::MergeFrom(const EnterTerritoryGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_handid()) {
      set_handid(from.handid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterTerritoryGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterTerritoryGuildCmd::CopyFrom(const EnterTerritoryGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterTerritoryGuildCmd::IsInitialized() const {

  return true;
}

void EnterTerritoryGuildCmd::Swap(EnterTerritoryGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(handid_, other->handid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterTerritoryGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterTerritoryGuildCmd_descriptor_;
  metadata.reflection = EnterTerritoryGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrayGuildCmd::kCmdFieldNumber;
const int PrayGuildCmd::kParamFieldNumber;
const int PrayGuildCmd::kNpcidFieldNumber;
const int PrayGuildCmd::kPrayFieldNumber;
#endif  // !_MSC_VER

PrayGuildCmd::PrayGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PrayGuildCmd)
}

void PrayGuildCmd::InitAsDefaultInstance() {
}

PrayGuildCmd::PrayGuildCmd(const PrayGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PrayGuildCmd)
}

void PrayGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 21;
  npcid_ = GOOGLE_ULONGLONG(0);
  pray_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrayGuildCmd::~PrayGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PrayGuildCmd)
  SharedDtor();
}

void PrayGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrayGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrayGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrayGuildCmd_descriptor_;
}

const PrayGuildCmd& PrayGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

PrayGuildCmd* PrayGuildCmd::default_instance_ = NULL;

PrayGuildCmd* PrayGuildCmd::New() const {
  return new PrayGuildCmd;
}

void PrayGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrayGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(npcid_, pray_);
    cmd_ = 50;
    param_ = 21;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrayGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PrayGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PRAY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcid;
        break;
      }

      // optional uint64 npcid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pray;
        break;
      }

      // optional uint32 pray = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_pray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pray_)));
          set_has_pray();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PrayGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PrayGuildCmd)
  return false;
#undef DO_
}

void PrayGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PrayGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PRAY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 npcid = 3 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcid(), output);
  }

  // optional uint32 pray = 4 [default = 0];
  if (has_pray()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pray(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PrayGuildCmd)
}

::google::protobuf::uint8* PrayGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PrayGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PRAY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 npcid = 3 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcid(), target);
  }

  // optional uint32 pray = 4 [default = 0];
  if (has_pray()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pray(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PrayGuildCmd)
  return target;
}

int PrayGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PRAY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 npcid = 3 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

    // optional uint32 pray = 4 [default = 0];
    if (has_pray()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pray());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrayGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrayGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrayGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrayGuildCmd::MergeFrom(const PrayGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_pray()) {
      set_pray(from.pray());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrayGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrayGuildCmd::CopyFrom(const PrayGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrayGuildCmd::IsInitialized() const {

  return true;
}

void PrayGuildCmd::Swap(PrayGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcid_, other->npcid_);
    std::swap(pray_, other->pray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrayGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrayGuildCmd_descriptor_;
  metadata.reflection = PrayGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildInfoNtf::kCmdFieldNumber;
const int GuildInfoNtf::kParamFieldNumber;
const int GuildInfoNtf::kCharidFieldNumber;
const int GuildInfoNtf::kIdFieldNumber;
const int GuildInfoNtf::kNameFieldNumber;
const int GuildInfoNtf::kIconFieldNumber;
const int GuildInfoNtf::kJobFieldNumber;
#endif  // !_MSC_VER

GuildInfoNtf::GuildInfoNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildInfoNtf)
}

void GuildInfoNtf::InitAsDefaultInstance() {
}

GuildInfoNtf::GuildInfoNtf(const GuildInfoNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildInfoNtf)
}

void GuildInfoNtf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 22;
  charid_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildInfoNtf::~GuildInfoNtf() {
  // @@protoc_insertion_point(destructor:Cmd.GuildInfoNtf)
  SharedDtor();
}

void GuildInfoNtf::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (job_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete job_;
  }
  if (this != default_instance_) {
  }
}

void GuildInfoNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildInfoNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildInfoNtf_descriptor_;
}

const GuildInfoNtf& GuildInfoNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildInfoNtf* GuildInfoNtf::default_instance_ = NULL;

GuildInfoNtf* GuildInfoNtf::New() const {
  return new GuildInfoNtf;
}

void GuildInfoNtf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildInfoNtf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(charid_, id_);
    cmd_ = 50;
    param_ = 22;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_->clear();
      }
    }
    if (has_job()) {
      if (job_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        job_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildInfoNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildInfoNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDINFONTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint64 id = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_icon;
        break;
      }

      // optional string icon = 6;
      case 6: {
        if (tag == 50) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_job;
        break;
      }

      // optional string job = 7;
      case 7: {
        if (tag == 58) {
         parse_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->job().data(), this->job().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "job");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildInfoNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildInfoNtf)
  return false;
#undef DO_
}

void GuildInfoNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildInfoNtf)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDINFONTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 id = 4 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional string icon = 6;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->icon(), output);
  }

  // optional string job = 7;
  if (has_job()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "job");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->job(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildInfoNtf)
}

::google::protobuf::uint8* GuildInfoNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildInfoNtf)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDINFONTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 id = 4 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional string icon = 6;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->icon(), target);
  }

  // optional string job = 7;
  if (has_job()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "job");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->job(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildInfoNtf)
  return target;
}

int GuildInfoNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDINFONTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 id = 4 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string icon = 6;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string job = 7;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->job());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildInfoNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildInfoNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildInfoNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildInfoNtf::MergeFrom(const GuildInfoNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildInfoNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildInfoNtf::CopyFrom(const GuildInfoNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildInfoNtf::IsInitialized() const {

  return true;
}

void GuildInfoNtf::Swap(GuildInfoNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(job_, other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildInfoNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildInfoNtf_descriptor_;
  metadata.reflection = GuildInfoNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildPrayNtfGuildCmd::kCmdFieldNumber;
const int GuildPrayNtfGuildCmd::kParamFieldNumber;
const int GuildPrayNtfGuildCmd::kPraysFieldNumber;
#endif  // !_MSC_VER

GuildPrayNtfGuildCmd::GuildPrayNtfGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildPrayNtfGuildCmd)
}

void GuildPrayNtfGuildCmd::InitAsDefaultInstance() {
}

GuildPrayNtfGuildCmd::GuildPrayNtfGuildCmd(const GuildPrayNtfGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildPrayNtfGuildCmd)
}

void GuildPrayNtfGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 23;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildPrayNtfGuildCmd::~GuildPrayNtfGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildPrayNtfGuildCmd)
  SharedDtor();
}

void GuildPrayNtfGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildPrayNtfGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildPrayNtfGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildPrayNtfGuildCmd_descriptor_;
}

const GuildPrayNtfGuildCmd& GuildPrayNtfGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildPrayNtfGuildCmd* GuildPrayNtfGuildCmd::default_instance_ = NULL;

GuildPrayNtfGuildCmd* GuildPrayNtfGuildCmd::New() const {
  return new GuildPrayNtfGuildCmd;
}

void GuildPrayNtfGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 23;
  }
  prays_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildPrayNtfGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildPrayNtfGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDPRAYNTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_prays;
        break;
      }

      // repeated .Cmd.GuildMemberPray prays = 3;
      case 3: {
        if (tag == 26) {
         parse_prays:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prays()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_prays;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildPrayNtfGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildPrayNtfGuildCmd)
  return false;
#undef DO_
}

void GuildPrayNtfGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildPrayNtfGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDPRAYNTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GuildMemberPray prays = 3;
  for (int i = 0; i < this->prays_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prays(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildPrayNtfGuildCmd)
}

::google::protobuf::uint8* GuildPrayNtfGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildPrayNtfGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDPRAYNTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GuildMemberPray prays = 3;
  for (int i = 0; i < this->prays_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->prays(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildPrayNtfGuildCmd)
  return target;
}

int GuildPrayNtfGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILDPRAYNTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.GuildMemberPray prays = 3;
  total_size += 1 * this->prays_size();
  for (int i = 0; i < this->prays_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prays(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildPrayNtfGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildPrayNtfGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildPrayNtfGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildPrayNtfGuildCmd::MergeFrom(const GuildPrayNtfGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  prays_.MergeFrom(from.prays_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildPrayNtfGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPrayNtfGuildCmd::CopyFrom(const GuildPrayNtfGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPrayNtfGuildCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->prays())) return false;
  return true;
}

void GuildPrayNtfGuildCmd::Swap(GuildPrayNtfGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    prays_.Swap(&other->prays_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildPrayNtfGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildPrayNtfGuildCmd_descriptor_;
  metadata.reflection = GuildPrayNtfGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelupEffectGuildCmd::kCmdFieldNumber;
const int LevelupEffectGuildCmd::kParamFieldNumber;
#endif  // !_MSC_VER

LevelupEffectGuildCmd::LevelupEffectGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LevelupEffectGuildCmd)
}

void LevelupEffectGuildCmd::InitAsDefaultInstance() {
}

LevelupEffectGuildCmd::LevelupEffectGuildCmd(const LevelupEffectGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LevelupEffectGuildCmd)
}

void LevelupEffectGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 24;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelupEffectGuildCmd::~LevelupEffectGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LevelupEffectGuildCmd)
  SharedDtor();
}

void LevelupEffectGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelupEffectGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelupEffectGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelupEffectGuildCmd_descriptor_;
}

const LevelupEffectGuildCmd& LevelupEffectGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

LevelupEffectGuildCmd* LevelupEffectGuildCmd::default_instance_ = NULL;

LevelupEffectGuildCmd* LevelupEffectGuildCmd::New() const {
  return new LevelupEffectGuildCmd;
}

void LevelupEffectGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 24;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelupEffectGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LevelupEffectGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_LEVELUPEFFECT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LevelupEffectGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LevelupEffectGuildCmd)
  return false;
#undef DO_
}

void LevelupEffectGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LevelupEffectGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_LEVELUPEFFECT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LevelupEffectGuildCmd)
}

::google::protobuf::uint8* LevelupEffectGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LevelupEffectGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_LEVELUPEFFECT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LevelupEffectGuildCmd)
  return target;
}

int LevelupEffectGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_LEVELUPEFFECT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelupEffectGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelupEffectGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelupEffectGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelupEffectGuildCmd::MergeFrom(const LevelupEffectGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelupEffectGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelupEffectGuildCmd::CopyFrom(const LevelupEffectGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelupEffectGuildCmd::IsInitialized() const {

  return true;
}

void LevelupEffectGuildCmd::Swap(LevelupEffectGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelupEffectGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelupEffectGuildCmd_descriptor_;
  metadata.reflection = LevelupEffectGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPackGuildCmd::kCmdFieldNumber;
const int QueryPackGuildCmd::kParamFieldNumber;
const int QueryPackGuildCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

QueryPackGuildCmd::QueryPackGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryPackGuildCmd)
}

void QueryPackGuildCmd::InitAsDefaultInstance() {
}

QueryPackGuildCmd::QueryPackGuildCmd(const QueryPackGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryPackGuildCmd)
}

void QueryPackGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 28;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPackGuildCmd::~QueryPackGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryPackGuildCmd)
  SharedDtor();
}

void QueryPackGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryPackGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPackGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPackGuildCmd_descriptor_;
}

const QueryPackGuildCmd& QueryPackGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

QueryPackGuildCmd* QueryPackGuildCmd::default_instance_ = NULL;

QueryPackGuildCmd* QueryPackGuildCmd::New() const {
  return new QueryPackGuildCmd;
}

void QueryPackGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 28;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPackGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryPackGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERYPACK];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemData items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryPackGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryPackGuildCmd)
  return false;
#undef DO_
}

void QueryPackGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryPackGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERYPACK];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ItemData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryPackGuildCmd)
}

::google::protobuf::uint8* QueryPackGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryPackGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERYPACK];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ItemData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryPackGuildCmd)
  return target;
}

int QueryPackGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERYPACK];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ItemData items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPackGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPackGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPackGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPackGuildCmd::MergeFrom(const QueryPackGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPackGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPackGuildCmd::CopyFrom(const QueryPackGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPackGuildCmd::IsInitialized() const {

  return true;
}

void QueryPackGuildCmd::Swap(QueryPackGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPackGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPackGuildCmd_descriptor_;
  metadata.reflection = QueryPackGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackUpdateGuildCmd::kCmdFieldNumber;
const int PackUpdateGuildCmd::kParamFieldNumber;
const int PackUpdateGuildCmd::kUpdatesFieldNumber;
const int PackUpdateGuildCmd::kDelsFieldNumber;
#endif  // !_MSC_VER

PackUpdateGuildCmd::PackUpdateGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PackUpdateGuildCmd)
}

void PackUpdateGuildCmd::InitAsDefaultInstance() {
}

PackUpdateGuildCmd::PackUpdateGuildCmd(const PackUpdateGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PackUpdateGuildCmd)
}

void PackUpdateGuildCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 32;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackUpdateGuildCmd::~PackUpdateGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PackUpdateGuildCmd)
  SharedDtor();
}

void PackUpdateGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackUpdateGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackUpdateGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackUpdateGuildCmd_descriptor_;
}

const PackUpdateGuildCmd& PackUpdateGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

PackUpdateGuildCmd* PackUpdateGuildCmd::default_instance_ = NULL;

PackUpdateGuildCmd* PackUpdateGuildCmd::New() const {
  return new PackUpdateGuildCmd;
}

void PackUpdateGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 32;
  }
  updates_.Clear();
  dels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackUpdateGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PackUpdateGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PACKUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        break;
      }

      // repeated .Cmd.ItemData updates = 3;
      case 3: {
        if (tag == 26) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        if (input->ExpectTag(34)) goto parse_dels;
        break;
      }

      // repeated string dels = 4;
      case 4: {
        if (tag == 34) {
         parse_dels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dels(this->dels_size() - 1).data(),
            this->dels(this->dels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PackUpdateGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PackUpdateGuildCmd)
  return false;
#undef DO_
}

void PackUpdateGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PackUpdateGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PACKUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ItemData updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updates(i), output);
  }

  // repeated string dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->dels(i).data(), this->dels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "dels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PackUpdateGuildCmd)
}

::google::protobuf::uint8* PackUpdateGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PackUpdateGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PACKUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ItemData updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updates(i), target);
  }

  // repeated string dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dels(i).data(), this->dels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->dels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PackUpdateGuildCmd)
  return target;
}

int PackUpdateGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_PACKUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ItemData updates = 3;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated string dels = 4;
  total_size += 1 * this->dels_size();
  for (int i = 0; i < this->dels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackUpdateGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackUpdateGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackUpdateGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackUpdateGuildCmd::MergeFrom(const PackUpdateGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  dels_.MergeFrom(from.dels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackUpdateGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackUpdateGuildCmd::CopyFrom(const PackUpdateGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackUpdateGuildCmd::IsInitialized() const {

  return true;
}

void PackUpdateGuildCmd::Swap(PackUpdateGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    updates_.Swap(&other->updates_);
    dels_.Swap(&other->dels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackUpdateGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackUpdateGuildCmd_descriptor_;
  metadata.reflection = PackUpdateGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeZoneGuildCmd::kCmdFieldNumber;
const int ExchangeZoneGuildCmd::kParamFieldNumber;
const int ExchangeZoneGuildCmd::kZoneidFieldNumber;
const int ExchangeZoneGuildCmd::kSetFieldNumber;
#endif  // !_MSC_VER

ExchangeZoneGuildCmd::ExchangeZoneGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExchangeZoneGuildCmd)
}

void ExchangeZoneGuildCmd::InitAsDefaultInstance() {
}

ExchangeZoneGuildCmd::ExchangeZoneGuildCmd(const ExchangeZoneGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExchangeZoneGuildCmd)
}

void ExchangeZoneGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 29;
  zoneid_ = 0u;
  set_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeZoneGuildCmd::~ExchangeZoneGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ExchangeZoneGuildCmd)
  SharedDtor();
}

void ExchangeZoneGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeZoneGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeZoneGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeZoneGuildCmd_descriptor_;
}

const ExchangeZoneGuildCmd& ExchangeZoneGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

ExchangeZoneGuildCmd* ExchangeZoneGuildCmd::default_instance_ = NULL;

ExchangeZoneGuildCmd* ExchangeZoneGuildCmd::New() const {
  return new ExchangeZoneGuildCmd;
}

void ExchangeZoneGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExchangeZoneGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(zoneid_, set_);
    cmd_ = 50;
    param_ = 29;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeZoneGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExchangeZoneGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGEZONE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_set;
        break;
      }

      // optional bool set = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &set_)));
          set_has_set();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExchangeZoneGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExchangeZoneGuildCmd)
  return false;
#undef DO_
}

void ExchangeZoneGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExchangeZoneGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGEZONE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 zoneid = 3 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional bool set = 4 [default = false];
  if (has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExchangeZoneGuildCmd)
}

::google::protobuf::uint8* ExchangeZoneGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExchangeZoneGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGEZONE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 zoneid = 3 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional bool set = 4 [default = false];
  if (has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExchangeZoneGuildCmd)
  return target;
}

int ExchangeZoneGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGEZONE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 zoneid = 3 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional bool set = 4 [default = false];
    if (has_set()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeZoneGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeZoneGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeZoneGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeZoneGuildCmd::MergeFrom(const ExchangeZoneGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_set()) {
      set_set(from.set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeZoneGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeZoneGuildCmd::CopyFrom(const ExchangeZoneGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeZoneGuildCmd::IsInitialized() const {

  return true;
}

void ExchangeZoneGuildCmd::Swap(ExchangeZoneGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(set_, other->set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeZoneGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeZoneGuildCmd_descriptor_;
  metadata.reflection = ExchangeZoneGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeZoneNtfGuildCmd::kCmdFieldNumber;
const int ExchangeZoneNtfGuildCmd::kParamFieldNumber;
const int ExchangeZoneNtfGuildCmd::kNextzoneidFieldNumber;
const int ExchangeZoneNtfGuildCmd::kCurzoneidFieldNumber;
#endif  // !_MSC_VER

ExchangeZoneNtfGuildCmd::ExchangeZoneNtfGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExchangeZoneNtfGuildCmd)
}

void ExchangeZoneNtfGuildCmd::InitAsDefaultInstance() {
}

ExchangeZoneNtfGuildCmd::ExchangeZoneNtfGuildCmd(const ExchangeZoneNtfGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExchangeZoneNtfGuildCmd)
}

void ExchangeZoneNtfGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 30;
  nextzoneid_ = 0u;
  curzoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeZoneNtfGuildCmd::~ExchangeZoneNtfGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ExchangeZoneNtfGuildCmd)
  SharedDtor();
}

void ExchangeZoneNtfGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeZoneNtfGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeZoneNtfGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeZoneNtfGuildCmd_descriptor_;
}

const ExchangeZoneNtfGuildCmd& ExchangeZoneNtfGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

ExchangeZoneNtfGuildCmd* ExchangeZoneNtfGuildCmd::default_instance_ = NULL;

ExchangeZoneNtfGuildCmd* ExchangeZoneNtfGuildCmd::New() const {
  return new ExchangeZoneNtfGuildCmd;
}

void ExchangeZoneNtfGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExchangeZoneNtfGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(nextzoneid_, curzoneid_);
    cmd_ = 50;
    param_ = 30;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeZoneNtfGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExchangeZoneNtfGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGEZONE_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nextzoneid;
        break;
      }

      // optional uint32 nextzoneid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_nextzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextzoneid_)));
          set_has_nextzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curzoneid;
        break;
      }

      // optional uint32 curzoneid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_curzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curzoneid_)));
          set_has_curzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExchangeZoneNtfGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExchangeZoneNtfGuildCmd)
  return false;
#undef DO_
}

void ExchangeZoneNtfGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExchangeZoneNtfGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGEZONE_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 nextzoneid = 3 [default = 0];
  if (has_nextzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nextzoneid(), output);
  }

  // optional uint32 curzoneid = 4 [default = 0];
  if (has_curzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curzoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExchangeZoneNtfGuildCmd)
}

::google::protobuf::uint8* ExchangeZoneNtfGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExchangeZoneNtfGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGEZONE_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 nextzoneid = 3 [default = 0];
  if (has_nextzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nextzoneid(), target);
  }

  // optional uint32 curzoneid = 4 [default = 0];
  if (has_curzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curzoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExchangeZoneNtfGuildCmd)
  return target;
}

int ExchangeZoneNtfGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGEZONE_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 nextzoneid = 3 [default = 0];
    if (has_nextzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextzoneid());
    }

    // optional uint32 curzoneid = 4 [default = 0];
    if (has_curzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curzoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeZoneNtfGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeZoneNtfGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeZoneNtfGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeZoneNtfGuildCmd::MergeFrom(const ExchangeZoneNtfGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_nextzoneid()) {
      set_nextzoneid(from.nextzoneid());
    }
    if (from.has_curzoneid()) {
      set_curzoneid(from.curzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeZoneNtfGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeZoneNtfGuildCmd::CopyFrom(const ExchangeZoneNtfGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeZoneNtfGuildCmd::IsInitialized() const {

  return true;
}

void ExchangeZoneNtfGuildCmd::Swap(ExchangeZoneNtfGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(nextzoneid_, other->nextzoneid_);
    std::swap(curzoneid_, other->curzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeZoneNtfGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeZoneNtfGuildCmd_descriptor_;
  metadata.reflection = ExchangeZoneNtfGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeZoneAnswerGuildCmd::kCmdFieldNumber;
const int ExchangeZoneAnswerGuildCmd::kParamFieldNumber;
const int ExchangeZoneAnswerGuildCmd::kAgreeFieldNumber;
#endif  // !_MSC_VER

ExchangeZoneAnswerGuildCmd::ExchangeZoneAnswerGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExchangeZoneAnswerGuildCmd)
}

void ExchangeZoneAnswerGuildCmd::InitAsDefaultInstance() {
}

ExchangeZoneAnswerGuildCmd::ExchangeZoneAnswerGuildCmd(const ExchangeZoneAnswerGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExchangeZoneAnswerGuildCmd)
}

void ExchangeZoneAnswerGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 31;
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeZoneAnswerGuildCmd::~ExchangeZoneAnswerGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ExchangeZoneAnswerGuildCmd)
  SharedDtor();
}

void ExchangeZoneAnswerGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeZoneAnswerGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeZoneAnswerGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeZoneAnswerGuildCmd_descriptor_;
}

const ExchangeZoneAnswerGuildCmd& ExchangeZoneAnswerGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

ExchangeZoneAnswerGuildCmd* ExchangeZoneAnswerGuildCmd::default_instance_ = NULL;

ExchangeZoneAnswerGuildCmd* ExchangeZoneAnswerGuildCmd::New() const {
  return new ExchangeZoneAnswerGuildCmd;
}

void ExchangeZoneAnswerGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 31;
    agree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeZoneAnswerGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExchangeZoneAnswerGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGEZONE_ANSWER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_agree;
        break;
      }

      // optional bool agree = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExchangeZoneAnswerGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExchangeZoneAnswerGuildCmd)
  return false;
#undef DO_
}

void ExchangeZoneAnswerGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExchangeZoneAnswerGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGEZONE_ANSWER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool agree = 3 [default = false];
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->agree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExchangeZoneAnswerGuildCmd)
}

::google::protobuf::uint8* ExchangeZoneAnswerGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExchangeZoneAnswerGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGEZONE_ANSWER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool agree = 3 [default = false];
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->agree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExchangeZoneAnswerGuildCmd)
  return target;
}

int ExchangeZoneAnswerGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_EXCHANGEZONE_ANSWER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool agree = 3 [default = false];
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeZoneAnswerGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeZoneAnswerGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeZoneAnswerGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeZoneAnswerGuildCmd::MergeFrom(const ExchangeZoneAnswerGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeZoneAnswerGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeZoneAnswerGuildCmd::CopyFrom(const ExchangeZoneAnswerGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeZoneAnswerGuildCmd::IsInitialized() const {

  return true;
}

void ExchangeZoneAnswerGuildCmd::Swap(ExchangeZoneAnswerGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeZoneAnswerGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeZoneAnswerGuildCmd_descriptor_;
  metadata.reflection = ExchangeZoneAnswerGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildEvent::kGuidFieldNumber;
const int GuildEvent::kEventidFieldNumber;
const int GuildEvent::kTimeFieldNumber;
const int GuildEvent::kParamFieldNumber;
#endif  // !_MSC_VER

GuildEvent::GuildEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildEvent)
}

void GuildEvent::InitAsDefaultInstance() {
}

GuildEvent::GuildEvent(const GuildEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildEvent)
}

void GuildEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = 0u;
  eventid_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildEvent::~GuildEvent() {
  // @@protoc_insertion_point(destructor:Cmd.GuildEvent)
  SharedDtor();
}

void GuildEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildEvent_descriptor_;
}

const GuildEvent& GuildEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildEvent* GuildEvent::default_instance_ = NULL;

GuildEvent* GuildEvent::New() const {
  return new GuildEvent;
}

void GuildEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(guid_, eventid_);
    time_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eventid;
        break;
      }

      // optional uint32 eventid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_eventid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_param;
        break;
      }

      // repeated string param = 4;
      case 4: {
        if (tag == 34) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param(this->param_size() - 1).data(),
            this->param(this->param_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_param;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildEvent)
  return false;
#undef DO_
}

void GuildEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildEvent)
  // optional uint32 guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guid(), output);
  }

  // optional uint32 eventid = 2 [default = 0];
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eventid(), output);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // repeated string param = 4;
  for (int i = 0; i < this->param_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->param(i).data(), this->param(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "param");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildEvent)
}

::google::protobuf::uint8* GuildEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildEvent)
  // optional uint32 guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guid(), target);
  }

  // optional uint32 eventid = 2 [default = 0];
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eventid(), target);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // repeated string param = 4;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), this->param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildEvent)
  return target;
}

int GuildEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guid());
    }

    // optional uint32 eventid = 2 [default = 0];
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // optional uint32 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  // repeated string param = 4;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildEvent::MergeFrom(const GuildEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildEvent::CopyFrom(const GuildEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildEvent::IsInitialized() const {

  return true;
}

void GuildEvent::Swap(GuildEvent* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(eventid_, other->eventid_);
    std::swap(time_, other->time_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildEvent_descriptor_;
  metadata.reflection = GuildEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryEventListGuildCmd::kCmdFieldNumber;
const int QueryEventListGuildCmd::kParamFieldNumber;
const int QueryEventListGuildCmd::kEventsFieldNumber;
#endif  // !_MSC_VER

QueryEventListGuildCmd::QueryEventListGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryEventListGuildCmd)
}

void QueryEventListGuildCmd::InitAsDefaultInstance() {
}

QueryEventListGuildCmd::QueryEventListGuildCmd(const QueryEventListGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryEventListGuildCmd)
}

void QueryEventListGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 33;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryEventListGuildCmd::~QueryEventListGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryEventListGuildCmd)
  SharedDtor();
}

void QueryEventListGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryEventListGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryEventListGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryEventListGuildCmd_descriptor_;
}

const QueryEventListGuildCmd& QueryEventListGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

QueryEventListGuildCmd* QueryEventListGuildCmd::default_instance_ = NULL;

QueryEventListGuildCmd* QueryEventListGuildCmd::New() const {
  return new QueryEventListGuildCmd;
}

void QueryEventListGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 33;
  }
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryEventListGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryEventListGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_EVENT_LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_events;
        break;
      }

      // repeated .Cmd.GuildEvent events = 3;
      case 3: {
        if (tag == 26) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_events;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryEventListGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryEventListGuildCmd)
  return false;
#undef DO_
}

void QueryEventListGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryEventListGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_EVENT_LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GuildEvent events = 3;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryEventListGuildCmd)
}

::google::protobuf::uint8* QueryEventListGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryEventListGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_EVENT_LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GuildEvent events = 3;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryEventListGuildCmd)
  return target;
}

int QueryEventListGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_EVENT_LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.GuildEvent events = 3;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryEventListGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryEventListGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryEventListGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryEventListGuildCmd::MergeFrom(const QueryEventListGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryEventListGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryEventListGuildCmd::CopyFrom(const QueryEventListGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryEventListGuildCmd::IsInitialized() const {

  return true;
}

void QueryEventListGuildCmd::Swap(QueryEventListGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryEventListGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryEventListGuildCmd_descriptor_;
  metadata.reflection = QueryEventListGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewEventGuildCmd::kCmdFieldNumber;
const int NewEventGuildCmd::kParamFieldNumber;
const int NewEventGuildCmd::kDelFieldNumber;
const int NewEventGuildCmd::kEventFieldNumber;
#endif  // !_MSC_VER

NewEventGuildCmd::NewEventGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NewEventGuildCmd)
}

void NewEventGuildCmd::InitAsDefaultInstance() {
  event_ = const_cast< ::Cmd::GuildEvent*>(&::Cmd::GuildEvent::default_instance());
}

NewEventGuildCmd::NewEventGuildCmd(const NewEventGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NewEventGuildCmd)
}

void NewEventGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 34;
  del_ = false;
  event_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewEventGuildCmd::~NewEventGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NewEventGuildCmd)
  SharedDtor();
}

void NewEventGuildCmd::SharedDtor() {
  if (this != default_instance_) {
    delete event_;
  }
}

void NewEventGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewEventGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewEventGuildCmd_descriptor_;
}

const NewEventGuildCmd& NewEventGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

NewEventGuildCmd* NewEventGuildCmd::default_instance_ = NULL;

NewEventGuildCmd* NewEventGuildCmd::New() const {
  return new NewEventGuildCmd;
}

void NewEventGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 50;
    param_ = 34;
    del_ = false;
    if (has_event()) {
      if (event_ != NULL) event_->::Cmd::GuildEvent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewEventGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NewEventGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_NEW_EVENT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_del;
        break;
      }

      // optional bool del = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_del:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &del_)));
          set_has_del();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_event;
        break;
      }

      // optional .Cmd.GuildEvent event = 4;
      case 4: {
        if (tag == 34) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NewEventGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NewEventGuildCmd)
  return false;
#undef DO_
}

void NewEventGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NewEventGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_NEW_EVENT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool del = 3 [default = false];
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->del(), output);
  }

  // optional .Cmd.GuildEvent event = 4;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NewEventGuildCmd)
}

::google::protobuf::uint8* NewEventGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NewEventGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_NEW_EVENT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool del = 3 [default = false];
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->del(), target);
  }

  // optional .Cmd.GuildEvent event = 4;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NewEventGuildCmd)
  return target;
}

int NewEventGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_NEW_EVENT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool del = 3 [default = false];
    if (has_del()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.GuildEvent event = 4;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewEventGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewEventGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewEventGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewEventGuildCmd::MergeFrom(const NewEventGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_del()) {
      set_del(from.del());
    }
    if (from.has_event()) {
      mutable_event()->::Cmd::GuildEvent::MergeFrom(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewEventGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewEventGuildCmd::CopyFrom(const NewEventGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewEventGuildCmd::IsInitialized() const {

  return true;
}

void NewEventGuildCmd::Swap(NewEventGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(del_, other->del_);
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewEventGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewEventGuildCmd_descriptor_;
  metadata.reflection = NewEventGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildReward::kIdFieldNumber;
const int GuildReward::kNumFieldNumber;
#endif  // !_MSC_VER

GuildReward::GuildReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildReward)
}

void GuildReward::InitAsDefaultInstance() {
}

GuildReward::GuildReward(const GuildReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildReward)
}

void GuildReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildReward::~GuildReward() {
  // @@protoc_insertion_point(destructor:Cmd.GuildReward)
  SharedDtor();
}

void GuildReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildReward_descriptor_;
}

const GuildReward& GuildReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildReward* GuildReward::default_instance_ = NULL;

GuildReward* GuildReward::New() const {
  return new GuildReward;
}

void GuildReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildReward)
  return false;
#undef DO_
}

void GuildReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildReward)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 num = 2 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildReward)
}

::google::protobuf::uint8* GuildReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildReward)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildReward)
  return target;
}

int GuildReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 num = 2 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildReward::MergeFrom(const GuildReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildReward::CopyFrom(const GuildReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildReward::IsInitialized() const {

  return true;
}

void GuildReward::Swap(GuildReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildReward_descriptor_;
  metadata.reflection = GuildReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyRewardConGuildCmd::kCmdFieldNumber;
const int ApplyRewardConGuildCmd::kParamFieldNumber;
const int ApplyRewardConGuildCmd::kConfigidFieldNumber;
const int ApplyRewardConGuildCmd::kConFieldNumber;
const int ApplyRewardConGuildCmd::kAssetFieldNumber;
#endif  // !_MSC_VER

ApplyRewardConGuildCmd::ApplyRewardConGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ApplyRewardConGuildCmd)
}

void ApplyRewardConGuildCmd::InitAsDefaultInstance() {
}

ApplyRewardConGuildCmd::ApplyRewardConGuildCmd(const ApplyRewardConGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ApplyRewardConGuildCmd)
}

void ApplyRewardConGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 35;
  configid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyRewardConGuildCmd::~ApplyRewardConGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ApplyRewardConGuildCmd)
  SharedDtor();
}

void ApplyRewardConGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyRewardConGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyRewardConGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyRewardConGuildCmd_descriptor_;
}

const ApplyRewardConGuildCmd& ApplyRewardConGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

ApplyRewardConGuildCmd* ApplyRewardConGuildCmd::default_instance_ = NULL;

ApplyRewardConGuildCmd* ApplyRewardConGuildCmd::New() const {
  return new ApplyRewardConGuildCmd;
}

void ApplyRewardConGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 35;
    configid_ = 0u;
  }
  con_.Clear();
  asset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyRewardConGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ApplyRewardConGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_APPLYCONFIG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_configid;
        break;
      }

      // optional uint32 configid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_configid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_con;
        break;
      }

      // repeated .Cmd.GuildReward con = 4;
      case 4: {
        if (tag == 34) {
         parse_con:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_con()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_con;
        if (input->ExpectTag(42)) goto parse_asset;
        break;
      }

      // repeated .Cmd.GuildReward asset = 5;
      case 5: {
        if (tag == 42) {
         parse_asset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_asset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_asset;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ApplyRewardConGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ApplyRewardConGuildCmd)
  return false;
#undef DO_
}

void ApplyRewardConGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ApplyRewardConGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_APPLYCONFIG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 configid = 3 [default = 0];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->configid(), output);
  }

  // repeated .Cmd.GuildReward con = 4;
  for (int i = 0; i < this->con_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->con(i), output);
  }

  // repeated .Cmd.GuildReward asset = 5;
  for (int i = 0; i < this->asset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->asset(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ApplyRewardConGuildCmd)
}

::google::protobuf::uint8* ApplyRewardConGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ApplyRewardConGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_APPLYCONFIG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 configid = 3 [default = 0];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->configid(), target);
  }

  // repeated .Cmd.GuildReward con = 4;
  for (int i = 0; i < this->con_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->con(i), target);
  }

  // repeated .Cmd.GuildReward asset = 5;
  for (int i = 0; i < this->asset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->asset(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ApplyRewardConGuildCmd)
  return target;
}

int ApplyRewardConGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_APPLYCONFIG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 configid = 3 [default = 0];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

  }
  // repeated .Cmd.GuildReward con = 4;
  total_size += 1 * this->con_size();
  for (int i = 0; i < this->con_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->con(i));
  }

  // repeated .Cmd.GuildReward asset = 5;
  total_size += 1 * this->asset_size();
  for (int i = 0; i < this->asset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->asset(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyRewardConGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyRewardConGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyRewardConGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyRewardConGuildCmd::MergeFrom(const ApplyRewardConGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  con_.MergeFrom(from.con_);
  asset_.MergeFrom(from.asset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyRewardConGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyRewardConGuildCmd::CopyFrom(const ApplyRewardConGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyRewardConGuildCmd::IsInitialized() const {

  return true;
}

void ApplyRewardConGuildCmd::Swap(ApplyRewardConGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(configid_, other->configid_);
    con_.Swap(&other->con_);
    asset_.Swap(&other->asset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyRewardConGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyRewardConGuildCmd_descriptor_;
  metadata.reflection = ApplyRewardConGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameStatusGuildCmd::kCmdFieldNumber;
const int FrameStatusGuildCmd::kParamFieldNumber;
const int FrameStatusGuildCmd::kOpenFieldNumber;
#endif  // !_MSC_VER

FrameStatusGuildCmd::FrameStatusGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FrameStatusGuildCmd)
}

void FrameStatusGuildCmd::InitAsDefaultInstance() {
}

FrameStatusGuildCmd::FrameStatusGuildCmd(const FrameStatusGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FrameStatusGuildCmd)
}

void FrameStatusGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 37;
  open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameStatusGuildCmd::~FrameStatusGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FrameStatusGuildCmd)
  SharedDtor();
}

void FrameStatusGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameStatusGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameStatusGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameStatusGuildCmd_descriptor_;
}

const FrameStatusGuildCmd& FrameStatusGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

FrameStatusGuildCmd* FrameStatusGuildCmd::default_instance_ = NULL;

FrameStatusGuildCmd* FrameStatusGuildCmd::New() const {
  return new FrameStatusGuildCmd;
}

void FrameStatusGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 37;
    open_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameStatusGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FrameStatusGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_FRAME_STATUS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_open;
        break;
      }

      // optional bool open = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FrameStatusGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FrameStatusGuildCmd)
  return false;
#undef DO_
}

void FrameStatusGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FrameStatusGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_FRAME_STATUS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool open = 3 [default = false];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FrameStatusGuildCmd)
}

::google::protobuf::uint8* FrameStatusGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FrameStatusGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_FRAME_STATUS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool open = 3 [default = false];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FrameStatusGuildCmd)
  return target;
}

int FrameStatusGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_FRAME_STATUS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool open = 3 [default = false];
    if (has_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameStatusGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameStatusGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameStatusGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameStatusGuildCmd::MergeFrom(const FrameStatusGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameStatusGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameStatusGuildCmd::CopyFrom(const FrameStatusGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameStatusGuildCmd::IsInitialized() const {

  return true;
}

void FrameStatusGuildCmd::Swap(FrameStatusGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameStatusGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameStatusGuildCmd_descriptor_;
  metadata.reflection = FrameStatusGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyAuthGuildCmd::kCmdFieldNumber;
const int ModifyAuthGuildCmd::kParamFieldNumber;
const int ModifyAuthGuildCmd::kAddFieldNumber;
const int ModifyAuthGuildCmd::kModifyFieldNumber;
const int ModifyAuthGuildCmd::kJobFieldNumber;
const int ModifyAuthGuildCmd::kAuthFieldNumber;
#endif  // !_MSC_VER

ModifyAuthGuildCmd::ModifyAuthGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ModifyAuthGuildCmd)
}

void ModifyAuthGuildCmd::InitAsDefaultInstance() {
}

ModifyAuthGuildCmd::ModifyAuthGuildCmd(const ModifyAuthGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ModifyAuthGuildCmd)
}

void ModifyAuthGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 38;
  add_ = false;
  modify_ = 0;
  job_ = 0;
  auth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyAuthGuildCmd::~ModifyAuthGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ModifyAuthGuildCmd)
  SharedDtor();
}

void ModifyAuthGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModifyAuthGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyAuthGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyAuthGuildCmd_descriptor_;
}

const ModifyAuthGuildCmd& ModifyAuthGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

ModifyAuthGuildCmd* ModifyAuthGuildCmd::default_instance_ = NULL;

ModifyAuthGuildCmd* ModifyAuthGuildCmd::New() const {
  return new ModifyAuthGuildCmd;
}

void ModifyAuthGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ModifyAuthGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(add_, auth_);
    cmd_ = 50;
    param_ = 38;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyAuthGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ModifyAuthGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_MODIFY_AUTH];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_add;
        break;
      }

      // optional bool add = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_)));
          set_has_add();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_modify;
        break;
      }

      // optional .Cmd.EModify modify = 4 [default = EMODIFY_MIN];
      case 4: {
        if (tag == 32) {
         parse_modify:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EModify_IsValid(value)) {
            set_modify(static_cast< ::Cmd::EModify >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // optional .Cmd.EGuildJob job = 5 [default = EGUILDJOB_MIN];
      case 5: {
        if (tag == 40) {
         parse_job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildJob_IsValid(value)) {
            set_job(static_cast< ::Cmd::EGuildJob >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_auth;
        break;
      }

      // optional .Cmd.EAuth auth = 6 [default = EAUTH_MIN];
      case 6: {
        if (tag == 48) {
         parse_auth:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAuth_IsValid(value)) {
            set_auth(static_cast< ::Cmd::EAuth >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ModifyAuthGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ModifyAuthGuildCmd)
  return false;
#undef DO_
}

void ModifyAuthGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ModifyAuthGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_MODIFY_AUTH];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool add = 3 [default = false];
  if (has_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->add(), output);
  }

  // optional .Cmd.EModify modify = 4 [default = EMODIFY_MIN];
  if (has_modify()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->modify(), output);
  }

  // optional .Cmd.EGuildJob job = 5 [default = EGUILDJOB_MIN];
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->job(), output);
  }

  // optional .Cmd.EAuth auth = 6 [default = EAUTH_MIN];
  if (has_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->auth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ModifyAuthGuildCmd)
}

::google::protobuf::uint8* ModifyAuthGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ModifyAuthGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_MODIFY_AUTH];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool add = 3 [default = false];
  if (has_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->add(), target);
  }

  // optional .Cmd.EModify modify = 4 [default = EMODIFY_MIN];
  if (has_modify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->modify(), target);
  }

  // optional .Cmd.EGuildJob job = 5 [default = EGUILDJOB_MIN];
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->job(), target);
  }

  // optional .Cmd.EAuth auth = 6 [default = EAUTH_MIN];
  if (has_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->auth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ModifyAuthGuildCmd)
  return target;
}

int ModifyAuthGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_MODIFY_AUTH];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool add = 3 [default = false];
    if (has_add()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.EModify modify = 4 [default = EMODIFY_MIN];
    if (has_modify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modify());
    }

    // optional .Cmd.EGuildJob job = 5 [default = EGUILDJOB_MIN];
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job());
    }

    // optional .Cmd.EAuth auth = 6 [default = EAUTH_MIN];
    if (has_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->auth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyAuthGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyAuthGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyAuthGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyAuthGuildCmd::MergeFrom(const ModifyAuthGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_add()) {
      set_add(from.add());
    }
    if (from.has_modify()) {
      set_modify(from.modify());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_auth()) {
      set_auth(from.auth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyAuthGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyAuthGuildCmd::CopyFrom(const ModifyAuthGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyAuthGuildCmd::IsInitialized() const {

  return true;
}

void ModifyAuthGuildCmd::Swap(ModifyAuthGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(add_, other->add_);
    std::swap(modify_, other->modify_);
    std::swap(job_, other->job_);
    std::swap(auth_, other->auth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyAuthGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyAuthGuildCmd_descriptor_;
  metadata.reflection = ModifyAuthGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobUpdateGuildCmd::kCmdFieldNumber;
const int JobUpdateGuildCmd::kParamFieldNumber;
const int JobUpdateGuildCmd::kJobFieldNumber;
#endif  // !_MSC_VER

JobUpdateGuildCmd::JobUpdateGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.JobUpdateGuildCmd)
}

void JobUpdateGuildCmd::InitAsDefaultInstance() {
  job_ = const_cast< ::Cmd::GuildJob*>(&::Cmd::GuildJob::default_instance());
}

JobUpdateGuildCmd::JobUpdateGuildCmd(const JobUpdateGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.JobUpdateGuildCmd)
}

void JobUpdateGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 39;
  job_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobUpdateGuildCmd::~JobUpdateGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.JobUpdateGuildCmd)
  SharedDtor();
}

void JobUpdateGuildCmd::SharedDtor() {
  if (this != default_instance_) {
    delete job_;
  }
}

void JobUpdateGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobUpdateGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobUpdateGuildCmd_descriptor_;
}

const JobUpdateGuildCmd& JobUpdateGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

JobUpdateGuildCmd* JobUpdateGuildCmd::default_instance_ = NULL;

JobUpdateGuildCmd* JobUpdateGuildCmd::New() const {
  return new JobUpdateGuildCmd;
}

void JobUpdateGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 39;
    if (has_job()) {
      if (job_ != NULL) job_->::Cmd::GuildJob::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobUpdateGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.JobUpdateGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_JOB_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_job;
        break;
      }

      // optional .Cmd.GuildJob job = 3;
      case 3: {
        if (tag == 26) {
         parse_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.JobUpdateGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.JobUpdateGuildCmd)
  return false;
#undef DO_
}

void JobUpdateGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.JobUpdateGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_JOB_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.GuildJob job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->job(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.JobUpdateGuildCmd)
}

::google::protobuf::uint8* JobUpdateGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.JobUpdateGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_JOB_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.GuildJob job = 3;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->job(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.JobUpdateGuildCmd)
  return target;
}

int JobUpdateGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_JOB_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.GuildJob job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->job());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobUpdateGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobUpdateGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobUpdateGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobUpdateGuildCmd::MergeFrom(const JobUpdateGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_job()) {
      mutable_job()->::Cmd::GuildJob::MergeFrom(from.job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobUpdateGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobUpdateGuildCmd::CopyFrom(const JobUpdateGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobUpdateGuildCmd::IsInitialized() const {

  return true;
}

void JobUpdateGuildCmd::Swap(JobUpdateGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(job_, other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobUpdateGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobUpdateGuildCmd_descriptor_;
  metadata.reflection = JobUpdateGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenameQueryGuildCmd::kCmdFieldNumber;
const int RenameQueryGuildCmd::kParamFieldNumber;
const int RenameQueryGuildCmd::kNameFieldNumber;
const int RenameQueryGuildCmd::kCodeFieldNumber;
#endif  // !_MSC_VER

RenameQueryGuildCmd::RenameQueryGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RenameQueryGuildCmd)
}

void RenameQueryGuildCmd::InitAsDefaultInstance() {
}

RenameQueryGuildCmd::RenameQueryGuildCmd(const RenameQueryGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RenameQueryGuildCmd)
}

void RenameQueryGuildCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 40;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameQueryGuildCmd::~RenameQueryGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RenameQueryGuildCmd)
  SharedDtor();
}

void RenameQueryGuildCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RenameQueryGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameQueryGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameQueryGuildCmd_descriptor_;
}

const RenameQueryGuildCmd& RenameQueryGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

RenameQueryGuildCmd* RenameQueryGuildCmd::default_instance_ = NULL;

RenameQueryGuildCmd* RenameQueryGuildCmd::New() const {
  return new RenameQueryGuildCmd;
}

void RenameQueryGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 50;
    param_ = 40;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameQueryGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RenameQueryGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_RENAME_QUERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }

      // optional .Cmd.ERenameErrCode code = 4 [default = ERENAME_SUCCESS];
      case 4: {
        if (tag == 32) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERenameErrCode_IsValid(value)) {
            set_code(static_cast< ::Cmd::ERenameErrCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RenameQueryGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RenameQueryGuildCmd)
  return false;
#undef DO_
}

void RenameQueryGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RenameQueryGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_RENAME_QUERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .Cmd.ERenameErrCode code = 4 [default = ERENAME_SUCCESS];
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RenameQueryGuildCmd)
}

::google::protobuf::uint8* RenameQueryGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RenameQueryGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_RENAME_QUERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .Cmd.ERenameErrCode code = 4 [default = ERENAME_SUCCESS];
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RenameQueryGuildCmd)
  return target;
}

int RenameQueryGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_RENAME_QUERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Cmd.ERenameErrCode code = 4 [default = ERENAME_SUCCESS];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameQueryGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameQueryGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameQueryGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameQueryGuildCmd::MergeFrom(const RenameQueryGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameQueryGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameQueryGuildCmd::CopyFrom(const RenameQueryGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameQueryGuildCmd::IsInitialized() const {

  return true;
}

void RenameQueryGuildCmd::Swap(RenameQueryGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(name_, other->name_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameQueryGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameQueryGuildCmd_descriptor_;
  metadata.reflection = RenameQueryGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildCityInfo::kIdFieldNumber;
const int GuildCityInfo::kFlagFieldNumber;
const int GuildCityInfo::kLvFieldNumber;
const int GuildCityInfo::kMembercountFieldNumber;
const int GuildCityInfo::kNameFieldNumber;
const int GuildCityInfo::kPortraitFieldNumber;
const int GuildCityInfo::kOldguildFieldNumber;
const int GuildCityInfo::kTimesFieldNumber;
const int GuildCityInfo::kLeadernameFieldNumber;
#endif  // !_MSC_VER

GuildCityInfo::GuildCityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildCityInfo)
}

void GuildCityInfo::InitAsDefaultInstance() {
}

GuildCityInfo::GuildCityInfo(const GuildCityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildCityInfo)
}

void GuildCityInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  flag_ = 0u;
  lv_ = 0u;
  membercount_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oldguild_ = GOOGLE_ULONGLONG(0);
  times_ = 0u;
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildCityInfo::~GuildCityInfo() {
  // @@protoc_insertion_point(destructor:Cmd.GuildCityInfo)
  SharedDtor();
}

void GuildCityInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete portrait_;
  }
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leadername_;
  }
  if (this != default_instance_) {
  }
}

void GuildCityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildCityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildCityInfo_descriptor_;
}

const GuildCityInfo& GuildCityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildCityInfo* GuildCityInfo::default_instance_ = NULL;

GuildCityInfo* GuildCityInfo::New() const {
  return new GuildCityInfo;
}

void GuildCityInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildCityInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, lv_);
    ZR_(membercount_, oldguild_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_portrait()) {
      if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        portrait_->clear();
      }
    }
  }
  if (has_leadername()) {
    if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      leadername_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildCityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildCityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_membercount;
        break;
      }

      // optional uint32 membercount = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_membercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
          set_has_membercount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_portrait;
        break;
      }

      // optional string portrait = 6;
      case 6: {
        if (tag == 50) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portrait()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->portrait().data(), this->portrait().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "portrait");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_oldguild;
        break;
      }

      // optional uint64 oldguild = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_oldguild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &oldguild_)));
          set_has_oldguild();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_times;
        break;
      }

      // optional uint32 times = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_leadername;
        break;
      }

      // optional string leadername = 9;
      case 9: {
        if (tag == 74) {
         parse_leadername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leadername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildCityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildCityInfo)
  return false;
#undef DO_
}

void GuildCityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildCityInfo)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 flag = 2 [default = 0];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // optional uint32 lv = 3 [default = 0];
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lv(), output);
  }

  // optional uint32 membercount = 4 [default = 0];
  if (has_membercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->membercount(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional string portrait = 6;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "portrait");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->portrait(), output);
  }

  // optional uint64 oldguild = 7 [default = 0];
  if (has_oldguild()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->oldguild(), output);
  }

  // optional uint32 times = 8 [default = 0];
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->times(), output);
  }

  // optional string leadername = 9;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->leadername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildCityInfo)
}

::google::protobuf::uint8* GuildCityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildCityInfo)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 flag = 2 [default = 0];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  // optional uint32 lv = 3 [default = 0];
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lv(), target);
  }

  // optional uint32 membercount = 4 [default = 0];
  if (has_membercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->membercount(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional string portrait = 6;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "portrait");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->portrait(), target);
  }

  // optional uint64 oldguild = 7 [default = 0];
  if (has_oldguild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->oldguild(), target);
  }

  // optional uint32 times = 8 [default = 0];
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->times(), target);
  }

  // optional string leadername = 9;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->leadername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildCityInfo)
  return target;
}

int GuildCityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 flag = 2 [default = 0];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional uint32 lv = 3 [default = 0];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 membercount = 4 [default = 0];
    if (has_membercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->membercount());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string portrait = 6;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portrait());
    }

    // optional uint64 oldguild = 7 [default = 0];
    if (has_oldguild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->oldguild());
    }

    // optional uint32 times = 8 [default = 0];
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string leadername = 9;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildCityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildCityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildCityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildCityInfo::MergeFrom(const GuildCityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_membercount()) {
      set_membercount(from.membercount());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_oldguild()) {
      set_oldguild(from.oldguild());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildCityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildCityInfo::CopyFrom(const GuildCityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildCityInfo::IsInitialized() const {

  return true;
}

void GuildCityInfo::Swap(GuildCityInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(flag_, other->flag_);
    std::swap(lv_, other->lv_);
    std::swap(membercount_, other->membercount_);
    std::swap(name_, other->name_);
    std::swap(portrait_, other->portrait_);
    std::swap(oldguild_, other->oldguild_);
    std::swap(times_, other->times_);
    std::swap(leadername_, other->leadername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildCityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildCityInfo_descriptor_;
  metadata.reflection = GuildCityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryGuildCityInfoGuildCmd::kCmdFieldNumber;
const int QueryGuildCityInfoGuildCmd::kParamFieldNumber;
const int QueryGuildCityInfoGuildCmd::kInfosFieldNumber;
#endif  // !_MSC_VER

QueryGuildCityInfoGuildCmd::QueryGuildCityInfoGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryGuildCityInfoGuildCmd)
}

void QueryGuildCityInfoGuildCmd::InitAsDefaultInstance() {
}

QueryGuildCityInfoGuildCmd::QueryGuildCityInfoGuildCmd(const QueryGuildCityInfoGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryGuildCityInfoGuildCmd)
}

void QueryGuildCityInfoGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 41;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryGuildCityInfoGuildCmd::~QueryGuildCityInfoGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryGuildCityInfoGuildCmd)
  SharedDtor();
}

void QueryGuildCityInfoGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryGuildCityInfoGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryGuildCityInfoGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryGuildCityInfoGuildCmd_descriptor_;
}

const QueryGuildCityInfoGuildCmd& QueryGuildCityInfoGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

QueryGuildCityInfoGuildCmd* QueryGuildCityInfoGuildCmd::default_instance_ = NULL;

QueryGuildCityInfoGuildCmd* QueryGuildCityInfoGuildCmd::New() const {
  return new QueryGuildCityInfoGuildCmd;
}

void QueryGuildCityInfoGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 41;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryGuildCityInfoGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryGuildCityInfoGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_CITYINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // repeated .Cmd.GuildCityInfo infos = 3;
      case 3: {
        if (tag == 26) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryGuildCityInfoGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryGuildCityInfoGuildCmd)
  return false;
#undef DO_
}

void QueryGuildCityInfoGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryGuildCityInfoGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_CITYINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GuildCityInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryGuildCityInfoGuildCmd)
}

::google::protobuf::uint8* QueryGuildCityInfoGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryGuildCityInfoGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_CITYINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GuildCityInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryGuildCityInfoGuildCmd)
  return target;
}

int QueryGuildCityInfoGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_CITYINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.GuildCityInfo infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGuildCityInfoGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryGuildCityInfoGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryGuildCityInfoGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryGuildCityInfoGuildCmd::MergeFrom(const QueryGuildCityInfoGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryGuildCityInfoGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGuildCityInfoGuildCmd::CopyFrom(const QueryGuildCityInfoGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGuildCityInfoGuildCmd::IsInitialized() const {

  return true;
}

void QueryGuildCityInfoGuildCmd::Swap(QueryGuildCityInfoGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryGuildCityInfoGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryGuildCityInfoGuildCmd_descriptor_;
  metadata.reflection = QueryGuildCityInfoGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CityActionGuildCmd::kCmdFieldNumber;
const int CityActionGuildCmd::kParamFieldNumber;
const int CityActionGuildCmd::kActionFieldNumber;
#endif  // !_MSC_VER

CityActionGuildCmd::CityActionGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CityActionGuildCmd)
}

void CityActionGuildCmd::InitAsDefaultInstance() {
}

CityActionGuildCmd::CityActionGuildCmd(const CityActionGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CityActionGuildCmd)
}

void CityActionGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 42;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CityActionGuildCmd::~CityActionGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CityActionGuildCmd)
  SharedDtor();
}

void CityActionGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CityActionGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityActionGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityActionGuildCmd_descriptor_;
}

const CityActionGuildCmd& CityActionGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

CityActionGuildCmd* CityActionGuildCmd::default_instance_ = NULL;

CityActionGuildCmd* CityActionGuildCmd::New() const {
  return new CityActionGuildCmd;
}

void CityActionGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 42;
    action_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CityActionGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CityActionGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CITY_ACTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional .Cmd.ECityAction action = 3 [default = ECITYACTION_MIN];
      case 3: {
        if (tag == 24) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ECityAction_IsValid(value)) {
            set_action(static_cast< ::Cmd::ECityAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CityActionGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CityActionGuildCmd)
  return false;
#undef DO_
}

void CityActionGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CityActionGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CITY_ACTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ECityAction action = 3 [default = ECITYACTION_MIN];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CityActionGuildCmd)
}

::google::protobuf::uint8* CityActionGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CityActionGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CITY_ACTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ECityAction action = 3 [default = ECITYACTION_MIN];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CityActionGuildCmd)
  return target;
}

int CityActionGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CITY_ACTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ECityAction action = 3 [default = ECITYACTION_MIN];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityActionGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CityActionGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CityActionGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CityActionGuildCmd::MergeFrom(const CityActionGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CityActionGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityActionGuildCmd::CopyFrom(const CityActionGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityActionGuildCmd::IsInitialized() const {

  return true;
}

void CityActionGuildCmd::Swap(CityActionGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CityActionGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityActionGuildCmd_descriptor_;
  metadata.reflection = CityActionGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IconInfo::kIndexFieldNumber;
const int IconInfo::kStateFieldNumber;
const int IconInfo::kTimeFieldNumber;
const int IconInfo::kIsreadFieldNumber;
const int IconInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

IconInfo::IconInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.IconInfo)
}

void IconInfo::InitAsDefaultInstance() {
}

IconInfo::IconInfo(const IconInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.IconInfo)
}

void IconInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0u;
  state_ = 0;
  time_ = 0u;
  isread_ = true;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IconInfo::~IconInfo() {
  // @@protoc_insertion_point(destructor:Cmd.IconInfo)
  SharedDtor();
}

void IconInfo::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void IconInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IconInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IconInfo_descriptor_;
}

const IconInfo& IconInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

IconInfo* IconInfo::default_instance_ = NULL;

IconInfo* IconInfo::New() const {
  return new IconInfo;
}

void IconInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IconInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(index_, time_);
    isread_ = true;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IconInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.IconInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .Cmd.EIconState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EIconState_IsValid(value)) {
            set_state(static_cast< ::Cmd::EIconState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isread;
        break;
      }

      // optional bool isread = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_isread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isread_)));
          set_has_isread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_type;
        break;
      }

      // optional string type = 5;
      case 5: {
        if (tag == 42) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.IconInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.IconInfo)
  return false;
#undef DO_
}

void IconInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.IconInfo)
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional .Cmd.EIconState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional bool isread = 4 [default = true];
  if (has_isread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isread(), output);
  }

  // optional string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.IconInfo)
}

::google::protobuf::uint8* IconInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.IconInfo)
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional .Cmd.EIconState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional bool isread = 4 [default = true];
  if (has_isread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isread(), target);
  }

  // optional string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.IconInfo)
  return target;
}

int IconInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .Cmd.EIconState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bool isread = 4 [default = true];
    if (has_isread()) {
      total_size += 1 + 1;
    }

    // optional string type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IconInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IconInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IconInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IconInfo::MergeFrom(const IconInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_isread()) {
      set_isread(from.isread());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IconInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IconInfo::CopyFrom(const IconInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IconInfo::IsInitialized() const {

  return true;
}

void IconInfo::Swap(IconInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(state_, other->state_);
    std::swap(time_, other->time_);
    std::swap(isread_, other->isread_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IconInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IconInfo_descriptor_;
  metadata.reflection = IconInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildIconSyncGuildCmd::kCmdFieldNumber;
const int GuildIconSyncGuildCmd::kParamFieldNumber;
const int GuildIconSyncGuildCmd::kInfosFieldNumber;
const int GuildIconSyncGuildCmd::kDelsFieldNumber;
#endif  // !_MSC_VER

GuildIconSyncGuildCmd::GuildIconSyncGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildIconSyncGuildCmd)
}

void GuildIconSyncGuildCmd::InitAsDefaultInstance() {
}

GuildIconSyncGuildCmd::GuildIconSyncGuildCmd(const GuildIconSyncGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildIconSyncGuildCmd)
}

void GuildIconSyncGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 43;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildIconSyncGuildCmd::~GuildIconSyncGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildIconSyncGuildCmd)
  SharedDtor();
}

void GuildIconSyncGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildIconSyncGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildIconSyncGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildIconSyncGuildCmd_descriptor_;
}

const GuildIconSyncGuildCmd& GuildIconSyncGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildIconSyncGuildCmd* GuildIconSyncGuildCmd::default_instance_ = NULL;

GuildIconSyncGuildCmd* GuildIconSyncGuildCmd::New() const {
  return new GuildIconSyncGuildCmd;
}

void GuildIconSyncGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 43;
  }
  infos_.Clear();
  dels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildIconSyncGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildIconSyncGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILD_ICON_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // repeated .Cmd.IconInfo infos = 3;
      case 3: {
        if (tag == 26) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectTag(32)) goto parse_dels;
        break;
      }

      // repeated uint32 dels = 4;
      case 4: {
        if (tag == 32) {
         parse_dels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_dels())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildIconSyncGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildIconSyncGuildCmd)
  return false;
#undef DO_
}

void GuildIconSyncGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildIconSyncGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILD_ICON_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.IconInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  // repeated uint32 dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->dels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildIconSyncGuildCmd)
}

::google::protobuf::uint8* GuildIconSyncGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildIconSyncGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILD_ICON_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.IconInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  // repeated uint32 dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->dels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildIconSyncGuildCmd)
  return target;
}

int GuildIconSyncGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILD_ICON_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.IconInfo infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated uint32 dels = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->dels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dels(i));
    }
    total_size += 1 * this->dels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildIconSyncGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildIconSyncGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildIconSyncGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildIconSyncGuildCmd::MergeFrom(const GuildIconSyncGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  dels_.MergeFrom(from.dels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildIconSyncGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildIconSyncGuildCmd::CopyFrom(const GuildIconSyncGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildIconSyncGuildCmd::IsInitialized() const {

  return true;
}

void GuildIconSyncGuildCmd::Swap(GuildIconSyncGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    infos_.Swap(&other->infos_);
    dels_.Swap(&other->dels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildIconSyncGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildIconSyncGuildCmd_descriptor_;
  metadata.reflection = GuildIconSyncGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildIconAddGuildCmd::kCmdFieldNumber;
const int GuildIconAddGuildCmd::kParamFieldNumber;
const int GuildIconAddGuildCmd::kIndexFieldNumber;
const int GuildIconAddGuildCmd::kStateFieldNumber;
const int GuildIconAddGuildCmd::kCreatetimeFieldNumber;
const int GuildIconAddGuildCmd::kIsdeleteFieldNumber;
const int GuildIconAddGuildCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

GuildIconAddGuildCmd::GuildIconAddGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildIconAddGuildCmd)
}

void GuildIconAddGuildCmd::InitAsDefaultInstance() {
}

GuildIconAddGuildCmd::GuildIconAddGuildCmd(const GuildIconAddGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildIconAddGuildCmd)
}

void GuildIconAddGuildCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 44;
  index_ = 0u;
  state_ = 0;
  createtime_ = 0u;
  isdelete_ = false;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildIconAddGuildCmd::~GuildIconAddGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildIconAddGuildCmd)
  SharedDtor();
}

void GuildIconAddGuildCmd::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void GuildIconAddGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildIconAddGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildIconAddGuildCmd_descriptor_;
}

const GuildIconAddGuildCmd& GuildIconAddGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildIconAddGuildCmd* GuildIconAddGuildCmd::default_instance_ = NULL;

GuildIconAddGuildCmd* GuildIconAddGuildCmd::New() const {
  return new GuildIconAddGuildCmd;
}

void GuildIconAddGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildIconAddGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(index_, isdelete_);
    cmd_ = 50;
    param_ = 44;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildIconAddGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildIconAddGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILD_ICON_ADD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .Cmd.EIconState state = 4 [default = EICON_INIT];
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EIconState_IsValid(value)) {
            set_state(static_cast< ::Cmd::EIconState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_createtime;
        break;
      }

      // optional uint32 createtime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isdelete;
        break;
      }

      // optional bool isdelete = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_isdelete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdelete_)));
          set_has_isdelete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_type;
        break;
      }

      // optional string type = 7;
      case 7: {
        if (tag == 58) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildIconAddGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildIconAddGuildCmd)
  return false;
#undef DO_
}

void GuildIconAddGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildIconAddGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILD_ICON_ADD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 index = 3 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // optional .Cmd.EIconState state = 4 [default = EICON_INIT];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional uint32 createtime = 5 [default = 0];
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->createtime(), output);
  }

  // optional bool isdelete = 6 [default = false];
  if (has_isdelete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isdelete(), output);
  }

  // optional string type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildIconAddGuildCmd)
}

::google::protobuf::uint8* GuildIconAddGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildIconAddGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILD_ICON_ADD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 index = 3 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // optional .Cmd.EIconState state = 4 [default = EICON_INIT];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional uint32 createtime = 5 [default = 0];
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->createtime(), target);
  }

  // optional bool isdelete = 6 [default = false];
  if (has_isdelete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isdelete(), target);
  }

  // optional string type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildIconAddGuildCmd)
  return target;
}

int GuildIconAddGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILD_ICON_ADD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 index = 3 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .Cmd.EIconState state = 4 [default = EICON_INIT];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 createtime = 5 [default = 0];
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // optional bool isdelete = 6 [default = false];
    if (has_isdelete()) {
      total_size += 1 + 1;
    }

    // optional string type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildIconAddGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildIconAddGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildIconAddGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildIconAddGuildCmd::MergeFrom(const GuildIconAddGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_isdelete()) {
      set_isdelete(from.isdelete());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildIconAddGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildIconAddGuildCmd::CopyFrom(const GuildIconAddGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildIconAddGuildCmd::IsInitialized() const {

  return true;
}

void GuildIconAddGuildCmd::Swap(GuildIconAddGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(index_, other->index_);
    std::swap(state_, other->state_);
    std::swap(createtime_, other->createtime_);
    std::swap(isdelete_, other->isdelete_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildIconAddGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildIconAddGuildCmd_descriptor_;
  metadata.reflection = GuildIconAddGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildIconUploadGuildCmd::kCmdFieldNumber;
const int GuildIconUploadGuildCmd::kParamFieldNumber;
const int GuildIconUploadGuildCmd::kIndexFieldNumber;
const int GuildIconUploadGuildCmd::kPolicyFieldNumber;
const int GuildIconUploadGuildCmd::kSignatureFieldNumber;
const int GuildIconUploadGuildCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

GuildIconUploadGuildCmd::GuildIconUploadGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildIconUploadGuildCmd)
}

void GuildIconUploadGuildCmd::InitAsDefaultInstance() {
}

GuildIconUploadGuildCmd::GuildIconUploadGuildCmd(const GuildIconUploadGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildIconUploadGuildCmd)
}

void GuildIconUploadGuildCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 45;
  index_ = 0u;
  policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildIconUploadGuildCmd::~GuildIconUploadGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildIconUploadGuildCmd)
  SharedDtor();
}

void GuildIconUploadGuildCmd::SharedDtor() {
  if (policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete policy_;
  }
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void GuildIconUploadGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildIconUploadGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildIconUploadGuildCmd_descriptor_;
}

const GuildIconUploadGuildCmd& GuildIconUploadGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GuildIconUploadGuildCmd* GuildIconUploadGuildCmd::default_instance_ = NULL;

GuildIconUploadGuildCmd* GuildIconUploadGuildCmd::New() const {
  return new GuildIconUploadGuildCmd;
}

void GuildIconUploadGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    cmd_ = 50;
    param_ = 45;
    index_ = 0u;
    if (has_policy()) {
      if (policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        policy_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signature_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildIconUploadGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildIconUploadGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILD_ICON_UPLOAD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_policy;
        break;
      }

      // optional string policy = 4;
      case 4: {
        if (tag == 34) {
         parse_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->policy().data(), this->policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "policy");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_signature;
        break;
      }

      // optional string signature = 5;
      case 5: {
        if (tag == 42) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signature");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_type;
        break;
      }

      // optional string type = 6;
      case 6: {
        if (tag == 50) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildIconUploadGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildIconUploadGuildCmd)
  return false;
#undef DO_
}

void GuildIconUploadGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildIconUploadGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILD_ICON_UPLOAD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 index = 3 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // optional string policy = 4;
  if (has_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->policy(), output);
  }

  // optional string signature = 5;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->signature(), output);
  }

  // optional string type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildIconUploadGuildCmd)
}

::google::protobuf::uint8* GuildIconUploadGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildIconUploadGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILD_ICON_UPLOAD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 index = 3 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // optional string policy = 4;
  if (has_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->policy(), target);
  }

  // optional string signature = 5;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signature(), target);
  }

  // optional string type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildIconUploadGuildCmd)
  return target;
}

int GuildIconUploadGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GUILD_ICON_UPLOAD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 index = 3 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional string policy = 4;
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy());
    }

    // optional string signature = 5;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildIconUploadGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildIconUploadGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildIconUploadGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildIconUploadGuildCmd::MergeFrom(const GuildIconUploadGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_policy()) {
      set_policy(from.policy());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildIconUploadGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildIconUploadGuildCmd::CopyFrom(const GuildIconUploadGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildIconUploadGuildCmd::IsInitialized() const {

  return true;
}

void GuildIconUploadGuildCmd::Swap(GuildIconUploadGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(index_, other->index_);
    std::swap(policy_, other->policy_);
    std::swap(signature_, other->signature_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildIconUploadGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildIconUploadGuildCmd_descriptor_;
  metadata.reflection = GuildIconUploadGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenFunctionGuildCmd::kCmdFieldNumber;
const int OpenFunctionGuildCmd::kParamFieldNumber;
const int OpenFunctionGuildCmd::kFuncFieldNumber;
#endif  // !_MSC_VER

OpenFunctionGuildCmd::OpenFunctionGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OpenFunctionGuildCmd)
}

void OpenFunctionGuildCmd::InitAsDefaultInstance() {
}

OpenFunctionGuildCmd::OpenFunctionGuildCmd(const OpenFunctionGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OpenFunctionGuildCmd)
}

void OpenFunctionGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 47;
  func_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenFunctionGuildCmd::~OpenFunctionGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.OpenFunctionGuildCmd)
  SharedDtor();
}

void OpenFunctionGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenFunctionGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenFunctionGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenFunctionGuildCmd_descriptor_;
}

const OpenFunctionGuildCmd& OpenFunctionGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

OpenFunctionGuildCmd* OpenFunctionGuildCmd::default_instance_ = NULL;

OpenFunctionGuildCmd* OpenFunctionGuildCmd::New() const {
  return new OpenFunctionGuildCmd;
}

void OpenFunctionGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 47;
    func_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenFunctionGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OpenFunctionGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_OPEN_FUNCTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_func;
        break;
      }

      // optional .Cmd.EGuildFunction func = 3 [default = EGUILDFUNCTION_MIN];
      case 3: {
        if (tag == 24) {
         parse_func:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildFunction_IsValid(value)) {
            set_func(static_cast< ::Cmd::EGuildFunction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OpenFunctionGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OpenFunctionGuildCmd)
  return false;
#undef DO_
}

void OpenFunctionGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OpenFunctionGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_OPEN_FUNCTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EGuildFunction func = 3 [default = EGUILDFUNCTION_MIN];
  if (has_func()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->func(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OpenFunctionGuildCmd)
}

::google::protobuf::uint8* OpenFunctionGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OpenFunctionGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_OPEN_FUNCTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EGuildFunction func = 3 [default = EGUILDFUNCTION_MIN];
  if (has_func()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->func(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OpenFunctionGuildCmd)
  return target;
}

int OpenFunctionGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_OPEN_FUNCTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EGuildFunction func = 3 [default = EGUILDFUNCTION_MIN];
    if (has_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->func());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenFunctionGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenFunctionGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenFunctionGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenFunctionGuildCmd::MergeFrom(const OpenFunctionGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_func()) {
      set_func(from.func());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenFunctionGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenFunctionGuildCmd::CopyFrom(const OpenFunctionGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenFunctionGuildCmd::IsInitialized() const {

  return true;
}

void OpenFunctionGuildCmd::Swap(OpenFunctionGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(func_, other->func_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenFunctionGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenFunctionGuildCmd_descriptor_;
  metadata.reflection = OpenFunctionGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildGuildCmd::kCmdFieldNumber;
const int BuildGuildCmd::kParamFieldNumber;
const int BuildGuildCmd::kBuildingFieldNumber;
#endif  // !_MSC_VER

BuildGuildCmd::BuildGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuildGuildCmd)
}

void BuildGuildCmd::InitAsDefaultInstance() {
}

BuildGuildCmd::BuildGuildCmd(const BuildGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuildGuildCmd)
}

void BuildGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 48;
  building_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildGuildCmd::~BuildGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BuildGuildCmd)
  SharedDtor();
}

void BuildGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildGuildCmd_descriptor_;
}

const BuildGuildCmd& BuildGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BuildGuildCmd* BuildGuildCmd::default_instance_ = NULL;

BuildGuildCmd* BuildGuildCmd::New() const {
  return new BuildGuildCmd;
}

void BuildGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 48;
    building_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuildGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_building;
        break;
      }

      // optional .Cmd.EGuildBuilding building = 3 [default = EGUILDBUILDING_MIN];
      case 3: {
        if (tag == 24) {
         parse_building:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildBuilding_IsValid(value)) {
            set_building(static_cast< ::Cmd::EGuildBuilding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuildGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuildGuildCmd)
  return false;
#undef DO_
}

void BuildGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuildGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EGuildBuilding building = 3 [default = EGUILDBUILDING_MIN];
  if (has_building()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->building(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuildGuildCmd)
}

::google::protobuf::uint8* BuildGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuildGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EGuildBuilding building = 3 [default = EGUILDBUILDING_MIN];
  if (has_building()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->building(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuildGuildCmd)
  return target;
}

int BuildGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EGuildBuilding building = 3 [default = EGUILDBUILDING_MIN];
    if (has_building()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->building());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildGuildCmd::MergeFrom(const BuildGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_building()) {
      set_building(from.building());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildGuildCmd::CopyFrom(const BuildGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildGuildCmd::IsInitialized() const {

  return true;
}

void BuildGuildCmd::Swap(BuildGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(building_, other->building_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildGuildCmd_descriptor_;
  metadata.reflection = BuildGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubmitMaterialGuildCmd::kCmdFieldNumber;
const int SubmitMaterialGuildCmd::kParamFieldNumber;
const int SubmitMaterialGuildCmd::kBuildingFieldNumber;
const int SubmitMaterialGuildCmd::kMaterialidFieldNumber;
#endif  // !_MSC_VER

SubmitMaterialGuildCmd::SubmitMaterialGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SubmitMaterialGuildCmd)
}

void SubmitMaterialGuildCmd::InitAsDefaultInstance() {
}

SubmitMaterialGuildCmd::SubmitMaterialGuildCmd(const SubmitMaterialGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SubmitMaterialGuildCmd)
}

void SubmitMaterialGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 49;
  building_ = 0;
  materialid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmitMaterialGuildCmd::~SubmitMaterialGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SubmitMaterialGuildCmd)
  SharedDtor();
}

void SubmitMaterialGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubmitMaterialGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitMaterialGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmitMaterialGuildCmd_descriptor_;
}

const SubmitMaterialGuildCmd& SubmitMaterialGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

SubmitMaterialGuildCmd* SubmitMaterialGuildCmd::default_instance_ = NULL;

SubmitMaterialGuildCmd* SubmitMaterialGuildCmd::New() const {
  return new SubmitMaterialGuildCmd;
}

void SubmitMaterialGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubmitMaterialGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(building_, materialid_);
    cmd_ = 50;
    param_ = 49;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmitMaterialGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SubmitMaterialGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_SUBMIT_MATERIAL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_building;
        break;
      }

      // optional .Cmd.EGuildBuilding building = 3 [default = EGUILDBUILDING_MIN];
      case 3: {
        if (tag == 24) {
         parse_building:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildBuilding_IsValid(value)) {
            set_building(static_cast< ::Cmd::EGuildBuilding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_materialid;
        break;
      }

      // optional uint32 materialid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_materialid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SubmitMaterialGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SubmitMaterialGuildCmd)
  return false;
#undef DO_
}

void SubmitMaterialGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SubmitMaterialGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_SUBMIT_MATERIAL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EGuildBuilding building = 3 [default = EGUILDBUILDING_MIN];
  if (has_building()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->building(), output);
  }

  // optional uint32 materialid = 4 [default = 0];
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->materialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SubmitMaterialGuildCmd)
}

::google::protobuf::uint8* SubmitMaterialGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SubmitMaterialGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_SUBMIT_MATERIAL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EGuildBuilding building = 3 [default = EGUILDBUILDING_MIN];
  if (has_building()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->building(), target);
  }

  // optional uint32 materialid = 4 [default = 0];
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->materialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SubmitMaterialGuildCmd)
  return target;
}

int SubmitMaterialGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_SUBMIT_MATERIAL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EGuildBuilding building = 3 [default = EGUILDBUILDING_MIN];
    if (has_building()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->building());
    }

    // optional uint32 materialid = 4 [default = 0];
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->materialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitMaterialGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmitMaterialGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmitMaterialGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmitMaterialGuildCmd::MergeFrom(const SubmitMaterialGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_building()) {
      set_building(from.building());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmitMaterialGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitMaterialGuildCmd::CopyFrom(const SubmitMaterialGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitMaterialGuildCmd::IsInitialized() const {

  return true;
}

void SubmitMaterialGuildCmd::Swap(SubmitMaterialGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(building_, other->building_);
    std::swap(materialid_, other->materialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmitMaterialGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmitMaterialGuildCmd_descriptor_;
  metadata.reflection = SubmitMaterialGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingNtfGuildCmd::kCmdFieldNumber;
const int BuildingNtfGuildCmd::kParamFieldNumber;
const int BuildingNtfGuildCmd::kBuildingsFieldNumber;
#endif  // !_MSC_VER

BuildingNtfGuildCmd::BuildingNtfGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuildingNtfGuildCmd)
}

void BuildingNtfGuildCmd::InitAsDefaultInstance() {
}

BuildingNtfGuildCmd::BuildingNtfGuildCmd(const BuildingNtfGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuildingNtfGuildCmd)
}

void BuildingNtfGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 50;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingNtfGuildCmd::~BuildingNtfGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BuildingNtfGuildCmd)
  SharedDtor();
}

void BuildingNtfGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingNtfGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingNtfGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingNtfGuildCmd_descriptor_;
}

const BuildingNtfGuildCmd& BuildingNtfGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BuildingNtfGuildCmd* BuildingNtfGuildCmd::default_instance_ = NULL;

BuildingNtfGuildCmd* BuildingNtfGuildCmd::New() const {
  return new BuildingNtfGuildCmd;
}

void BuildingNtfGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 50;
  }
  buildings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingNtfGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuildingNtfGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILDING_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_buildings;
        break;
      }

      // repeated .Cmd.GuildBuilding buildings = 3;
      case 3: {
        if (tag == 26) {
         parse_buildings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_buildings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuildingNtfGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuildingNtfGuildCmd)
  return false;
#undef DO_
}

void BuildingNtfGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuildingNtfGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILDING_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GuildBuilding buildings = 3;
  for (int i = 0; i < this->buildings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buildings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuildingNtfGuildCmd)
}

::google::protobuf::uint8* BuildingNtfGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuildingNtfGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILDING_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GuildBuilding buildings = 3;
  for (int i = 0; i < this->buildings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buildings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuildingNtfGuildCmd)
  return target;
}

int BuildingNtfGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILDING_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.GuildBuilding buildings = 3;
  total_size += 1 * this->buildings_size();
  for (int i = 0; i < this->buildings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingNtfGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingNtfGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingNtfGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingNtfGuildCmd::MergeFrom(const BuildingNtfGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildings_.MergeFrom(from.buildings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingNtfGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingNtfGuildCmd::CopyFrom(const BuildingNtfGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingNtfGuildCmd::IsInitialized() const {

  return true;
}

void BuildingNtfGuildCmd::Swap(BuildingNtfGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    buildings_.Swap(&other->buildings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingNtfGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingNtfGuildCmd_descriptor_;
  metadata.reflection = BuildingNtfGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingSubmitCountGuildCmd::kCmdFieldNumber;
const int BuildingSubmitCountGuildCmd::kParamFieldNumber;
const int BuildingSubmitCountGuildCmd::kTypeFieldNumber;
const int BuildingSubmitCountGuildCmd::kCountFieldNumber;
#endif  // !_MSC_VER

BuildingSubmitCountGuildCmd::BuildingSubmitCountGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuildingSubmitCountGuildCmd)
}

void BuildingSubmitCountGuildCmd::InitAsDefaultInstance() {
}

BuildingSubmitCountGuildCmd::BuildingSubmitCountGuildCmd(const BuildingSubmitCountGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuildingSubmitCountGuildCmd)
}

void BuildingSubmitCountGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 51;
  type_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingSubmitCountGuildCmd::~BuildingSubmitCountGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BuildingSubmitCountGuildCmd)
  SharedDtor();
}

void BuildingSubmitCountGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingSubmitCountGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingSubmitCountGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingSubmitCountGuildCmd_descriptor_;
}

const BuildingSubmitCountGuildCmd& BuildingSubmitCountGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BuildingSubmitCountGuildCmd* BuildingSubmitCountGuildCmd::default_instance_ = NULL;

BuildingSubmitCountGuildCmd* BuildingSubmitCountGuildCmd::New() const {
  return new BuildingSubmitCountGuildCmd;
}

void BuildingSubmitCountGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuildingSubmitCountGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, count_);
    cmd_ = 50;
    param_ = 51;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingSubmitCountGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuildingSubmitCountGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILDING_SUBMIT_COUNT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EGuildBuilding type = 3 [default = EGUILDBUILDING_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildBuilding_IsValid(value)) {
            set_type(static_cast< ::Cmd::EGuildBuilding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuildingSubmitCountGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuildingSubmitCountGuildCmd)
  return false;
#undef DO_
}

void BuildingSubmitCountGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuildingSubmitCountGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILDING_SUBMIT_COUNT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EGuildBuilding type = 3 [default = EGUILDBUILDING_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 count = 4 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuildingSubmitCountGuildCmd)
}

::google::protobuf::uint8* BuildingSubmitCountGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuildingSubmitCountGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILDING_SUBMIT_COUNT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EGuildBuilding type = 3 [default = EGUILDBUILDING_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 count = 4 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuildingSubmitCountGuildCmd)
  return target;
}

int BuildingSubmitCountGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILDING_SUBMIT_COUNT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EGuildBuilding type = 3 [default = EGUILDBUILDING_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 count = 4 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingSubmitCountGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingSubmitCountGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingSubmitCountGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingSubmitCountGuildCmd::MergeFrom(const BuildingSubmitCountGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingSubmitCountGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingSubmitCountGuildCmd::CopyFrom(const BuildingSubmitCountGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingSubmitCountGuildCmd::IsInitialized() const {

  return true;
}

void BuildingSubmitCountGuildCmd::Swap(BuildingSubmitCountGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingSubmitCountGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingSubmitCountGuildCmd_descriptor_;
  metadata.reflection = BuildingSubmitCountGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeUpdateNtfGuildCmd::kCmdFieldNumber;
const int ChallengeUpdateNtfGuildCmd::kParamFieldNumber;
const int ChallengeUpdateNtfGuildCmd::kUpdatesFieldNumber;
const int ChallengeUpdateNtfGuildCmd::kDelsFieldNumber;
const int ChallengeUpdateNtfGuildCmd::kRefreshtimeFieldNumber;
#endif  // !_MSC_VER

ChallengeUpdateNtfGuildCmd::ChallengeUpdateNtfGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChallengeUpdateNtfGuildCmd)
}

void ChallengeUpdateNtfGuildCmd::InitAsDefaultInstance() {
}

ChallengeUpdateNtfGuildCmd::ChallengeUpdateNtfGuildCmd(const ChallengeUpdateNtfGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChallengeUpdateNtfGuildCmd)
}

void ChallengeUpdateNtfGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 52;
  refreshtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeUpdateNtfGuildCmd::~ChallengeUpdateNtfGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChallengeUpdateNtfGuildCmd)
  SharedDtor();
}

void ChallengeUpdateNtfGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChallengeUpdateNtfGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeUpdateNtfGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeUpdateNtfGuildCmd_descriptor_;
}

const ChallengeUpdateNtfGuildCmd& ChallengeUpdateNtfGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

ChallengeUpdateNtfGuildCmd* ChallengeUpdateNtfGuildCmd::default_instance_ = NULL;

ChallengeUpdateNtfGuildCmd* ChallengeUpdateNtfGuildCmd::New() const {
  return new ChallengeUpdateNtfGuildCmd;
}

void ChallengeUpdateNtfGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 19) {
    cmd_ = 50;
    param_ = 52;
    refreshtime_ = 0u;
  }
  updates_.Clear();
  dels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChallengeUpdateNtfGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChallengeUpdateNtfGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CHALLENGE_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        break;
      }

      // repeated .Cmd.GuildChallenge updates = 3;
      case 3: {
        if (tag == 26) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        if (input->ExpectTag(34)) goto parse_dels;
        break;
      }

      // repeated .Cmd.GuildChallenge dels = 4;
      case 4: {
        if (tag == 34) {
         parse_dels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dels;
        if (input->ExpectTag(40)) goto parse_refreshtime;
        break;
      }

      // optional uint32 refreshtime = 5;
      case 5: {
        if (tag == 40) {
         parse_refreshtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChallengeUpdateNtfGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChallengeUpdateNtfGuildCmd)
  return false;
#undef DO_
}

void ChallengeUpdateNtfGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChallengeUpdateNtfGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CHALLENGE_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GuildChallenge updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updates(i), output);
  }

  // repeated .Cmd.GuildChallenge dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dels(i), output);
  }

  // optional uint32 refreshtime = 5;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->refreshtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChallengeUpdateNtfGuildCmd)
}

::google::protobuf::uint8* ChallengeUpdateNtfGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChallengeUpdateNtfGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CHALLENGE_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GuildChallenge updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updates(i), target);
  }

  // repeated .Cmd.GuildChallenge dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dels(i), target);
  }

  // optional uint32 refreshtime = 5;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->refreshtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChallengeUpdateNtfGuildCmd)
  return target;
}

int ChallengeUpdateNtfGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_CHALLENGE_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 refreshtime = 5;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshtime());
    }

  }
  // repeated .Cmd.GuildChallenge updates = 3;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated .Cmd.GuildChallenge dels = 4;
  total_size += 1 * this->dels_size();
  for (int i = 0; i < this->dels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeUpdateNtfGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChallengeUpdateNtfGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChallengeUpdateNtfGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChallengeUpdateNtfGuildCmd::MergeFrom(const ChallengeUpdateNtfGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  dels_.MergeFrom(from.dels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChallengeUpdateNtfGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeUpdateNtfGuildCmd::CopyFrom(const ChallengeUpdateNtfGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeUpdateNtfGuildCmd::IsInitialized() const {

  return true;
}

void ChallengeUpdateNtfGuildCmd::Swap(ChallengeUpdateNtfGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    updates_.Swap(&other->updates_);
    dels_.Swap(&other->dels_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChallengeUpdateNtfGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeUpdateNtfGuildCmd_descriptor_;
  metadata.reflection = ChallengeUpdateNtfGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareNtfGuildCmd::kCmdFieldNumber;
const int WelfareNtfGuildCmd::kParamFieldNumber;
const int WelfareNtfGuildCmd::kWelfareFieldNumber;
#endif  // !_MSC_VER

WelfareNtfGuildCmd::WelfareNtfGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WelfareNtfGuildCmd)
}

void WelfareNtfGuildCmd::InitAsDefaultInstance() {
}

WelfareNtfGuildCmd::WelfareNtfGuildCmd(const WelfareNtfGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WelfareNtfGuildCmd)
}

void WelfareNtfGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 53;
  welfare_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareNtfGuildCmd::~WelfareNtfGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.WelfareNtfGuildCmd)
  SharedDtor();
}

void WelfareNtfGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareNtfGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareNtfGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareNtfGuildCmd_descriptor_;
}

const WelfareNtfGuildCmd& WelfareNtfGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

WelfareNtfGuildCmd* WelfareNtfGuildCmd::default_instance_ = NULL;

WelfareNtfGuildCmd* WelfareNtfGuildCmd::New() const {
  return new WelfareNtfGuildCmd;
}

void WelfareNtfGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 53;
    welfare_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareNtfGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WelfareNtfGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_WELFARE_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_welfare;
        break;
      }

      // optional bool welfare = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_welfare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &welfare_)));
          set_has_welfare();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WelfareNtfGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WelfareNtfGuildCmd)
  return false;
#undef DO_
}

void WelfareNtfGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WelfareNtfGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_WELFARE_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool welfare = 3 [default = false];
  if (has_welfare()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->welfare(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WelfareNtfGuildCmd)
}

::google::protobuf::uint8* WelfareNtfGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WelfareNtfGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_WELFARE_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool welfare = 3 [default = false];
  if (has_welfare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->welfare(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WelfareNtfGuildCmd)
  return target;
}

int WelfareNtfGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_WELFARE_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool welfare = 3 [default = false];
    if (has_welfare()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareNtfGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareNtfGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareNtfGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareNtfGuildCmd::MergeFrom(const WelfareNtfGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_welfare()) {
      set_welfare(from.welfare());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareNtfGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareNtfGuildCmd::CopyFrom(const WelfareNtfGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareNtfGuildCmd::IsInitialized() const {

  return true;
}

void WelfareNtfGuildCmd::Swap(WelfareNtfGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(welfare_, other->welfare_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareNtfGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareNtfGuildCmd_descriptor_;
  metadata.reflection = WelfareNtfGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetWelfareGuildCmd::kCmdFieldNumber;
const int GetWelfareGuildCmd::kParamFieldNumber;
#endif  // !_MSC_VER

GetWelfareGuildCmd::GetWelfareGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GetWelfareGuildCmd)
}

void GetWelfareGuildCmd::InitAsDefaultInstance() {
}

GetWelfareGuildCmd::GetWelfareGuildCmd(const GetWelfareGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GetWelfareGuildCmd)
}

void GetWelfareGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 54;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetWelfareGuildCmd::~GetWelfareGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GetWelfareGuildCmd)
  SharedDtor();
}

void GetWelfareGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetWelfareGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetWelfareGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetWelfareGuildCmd_descriptor_;
}

const GetWelfareGuildCmd& GetWelfareGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GetWelfareGuildCmd* GetWelfareGuildCmd::default_instance_ = NULL;

GetWelfareGuildCmd* GetWelfareGuildCmd::New() const {
  return new GetWelfareGuildCmd;
}

void GetWelfareGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 54;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetWelfareGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GetWelfareGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GET_WELFARE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GetWelfareGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GetWelfareGuildCmd)
  return false;
#undef DO_
}

void GetWelfareGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GetWelfareGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GET_WELFARE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GetWelfareGuildCmd)
}

::google::protobuf::uint8* GetWelfareGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GetWelfareGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GET_WELFARE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GetWelfareGuildCmd)
  return target;
}

int GetWelfareGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_GET_WELFARE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetWelfareGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetWelfareGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetWelfareGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetWelfareGuildCmd::MergeFrom(const GetWelfareGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetWelfareGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWelfareGuildCmd::CopyFrom(const GetWelfareGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWelfareGuildCmd::IsInitialized() const {

  return true;
}

void GetWelfareGuildCmd::Swap(GetWelfareGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetWelfareGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetWelfareGuildCmd_descriptor_;
  metadata.reflection = GetWelfareGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingLvupEffect::kTypeFieldNumber;
const int BuildingLvupEffect::kLevelFieldNumber;
#endif  // !_MSC_VER

BuildingLvupEffect::BuildingLvupEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuildingLvupEffect)
}

void BuildingLvupEffect::InitAsDefaultInstance() {
}

BuildingLvupEffect::BuildingLvupEffect(const BuildingLvupEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuildingLvupEffect)
}

void BuildingLvupEffect::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingLvupEffect::~BuildingLvupEffect() {
  // @@protoc_insertion_point(destructor:Cmd.BuildingLvupEffect)
  SharedDtor();
}

void BuildingLvupEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingLvupEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingLvupEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingLvupEffect_descriptor_;
}

const BuildingLvupEffect& BuildingLvupEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BuildingLvupEffect* BuildingLvupEffect::default_instance_ = NULL;

BuildingLvupEffect* BuildingLvupEffect::New() const {
  return new BuildingLvupEffect;
}

void BuildingLvupEffect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuildingLvupEffect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingLvupEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuildingLvupEffect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EGuildBuilding type = 1 [default = EGUILDBUILDING_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildBuilding_IsValid(value)) {
            set_type(static_cast< ::Cmd::EGuildBuilding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuildingLvupEffect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuildingLvupEffect)
  return false;
#undef DO_
}

void BuildingLvupEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuildingLvupEffect)
  // optional .Cmd.EGuildBuilding type = 1 [default = EGUILDBUILDING_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 level = 2 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuildingLvupEffect)
}

::google::protobuf::uint8* BuildingLvupEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuildingLvupEffect)
  // optional .Cmd.EGuildBuilding type = 1 [default = EGUILDBUILDING_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 level = 2 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuildingLvupEffect)
  return target;
}

int BuildingLvupEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EGuildBuilding type = 1 [default = EGUILDBUILDING_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingLvupEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingLvupEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingLvupEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingLvupEffect::MergeFrom(const BuildingLvupEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingLvupEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingLvupEffect::CopyFrom(const BuildingLvupEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingLvupEffect::IsInitialized() const {

  return true;
}

void BuildingLvupEffect::Swap(BuildingLvupEffect* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingLvupEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingLvupEffect_descriptor_;
  metadata.reflection = BuildingLvupEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingLvupEffGuildCmd::kCmdFieldNumber;
const int BuildingLvupEffGuildCmd::kParamFieldNumber;
const int BuildingLvupEffGuildCmd::kEffectsFieldNumber;
#endif  // !_MSC_VER

BuildingLvupEffGuildCmd::BuildingLvupEffGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuildingLvupEffGuildCmd)
}

void BuildingLvupEffGuildCmd::InitAsDefaultInstance() {
}

BuildingLvupEffGuildCmd::BuildingLvupEffGuildCmd(const BuildingLvupEffGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuildingLvupEffGuildCmd)
}

void BuildingLvupEffGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 55;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingLvupEffGuildCmd::~BuildingLvupEffGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BuildingLvupEffGuildCmd)
  SharedDtor();
}

void BuildingLvupEffGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingLvupEffGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingLvupEffGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingLvupEffGuildCmd_descriptor_;
}

const BuildingLvupEffGuildCmd& BuildingLvupEffGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BuildingLvupEffGuildCmd* BuildingLvupEffGuildCmd::default_instance_ = NULL;

BuildingLvupEffGuildCmd* BuildingLvupEffGuildCmd::New() const {
  return new BuildingLvupEffGuildCmd;
}

void BuildingLvupEffGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 55;
  }
  effects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingLvupEffGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuildingLvupEffGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILDING_LVUP_EFF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_effects;
        break;
      }

      // repeated .Cmd.BuildingLvupEffect effects = 3;
      case 3: {
        if (tag == 26) {
         parse_effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_effects;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuildingLvupEffGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuildingLvupEffGuildCmd)
  return false;
#undef DO_
}

void BuildingLvupEffGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuildingLvupEffGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILDING_LVUP_EFF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.BuildingLvupEffect effects = 3;
  for (int i = 0; i < this->effects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->effects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuildingLvupEffGuildCmd)
}

::google::protobuf::uint8* BuildingLvupEffGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuildingLvupEffGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILDING_LVUP_EFF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.BuildingLvupEffect effects = 3;
  for (int i = 0; i < this->effects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->effects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuildingLvupEffGuildCmd)
  return target;
}

int BuildingLvupEffGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_BUILDING_LVUP_EFF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.BuildingLvupEffect effects = 3;
  total_size += 1 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingLvupEffGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingLvupEffGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingLvupEffGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingLvupEffGuildCmd::MergeFrom(const BuildingLvupEffGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  effects_.MergeFrom(from.effects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingLvupEffGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingLvupEffGuildCmd::CopyFrom(const BuildingLvupEffGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingLvupEffGuildCmd::IsInitialized() const {

  return true;
}

void BuildingLvupEffGuildCmd::Swap(BuildingLvupEffGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    effects_.Swap(&other->effects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingLvupEffGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingLvupEffGuildCmd_descriptor_;
  metadata.reflection = BuildingLvupEffGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArtifactUpdateNtfGuildCmd::kCmdFieldNumber;
const int ArtifactUpdateNtfGuildCmd::kParamFieldNumber;
const int ArtifactUpdateNtfGuildCmd::kItemupdatesFieldNumber;
const int ArtifactUpdateNtfGuildCmd::kItemdelsFieldNumber;
const int ArtifactUpdateNtfGuildCmd::kDataupdatesFieldNumber;
#endif  // !_MSC_VER

ArtifactUpdateNtfGuildCmd::ArtifactUpdateNtfGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ArtifactUpdateNtfGuildCmd)
}

void ArtifactUpdateNtfGuildCmd::InitAsDefaultInstance() {
}

ArtifactUpdateNtfGuildCmd::ArtifactUpdateNtfGuildCmd(const ArtifactUpdateNtfGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ArtifactUpdateNtfGuildCmd)
}

void ArtifactUpdateNtfGuildCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 56;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtifactUpdateNtfGuildCmd::~ArtifactUpdateNtfGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ArtifactUpdateNtfGuildCmd)
  SharedDtor();
}

void ArtifactUpdateNtfGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArtifactUpdateNtfGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtifactUpdateNtfGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtifactUpdateNtfGuildCmd_descriptor_;
}

const ArtifactUpdateNtfGuildCmd& ArtifactUpdateNtfGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

ArtifactUpdateNtfGuildCmd* ArtifactUpdateNtfGuildCmd::default_instance_ = NULL;

ArtifactUpdateNtfGuildCmd* ArtifactUpdateNtfGuildCmd::New() const {
  return new ArtifactUpdateNtfGuildCmd;
}

void ArtifactUpdateNtfGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 56;
  }
  itemupdates_.Clear();
  itemdels_.Clear();
  dataupdates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtifactUpdateNtfGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ArtifactUpdateNtfGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ARTIFACT_UPDATE_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_itemupdates;
        break;
      }

      // repeated .Cmd.GuildArtifactItem itemupdates = 3;
      case 3: {
        if (tag == 26) {
         parse_itemupdates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemupdates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_itemupdates;
        if (input->ExpectTag(34)) goto parse_itemdels;
        break;
      }

      // repeated string itemdels = 4;
      case 4: {
        if (tag == 34) {
         parse_itemdels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_itemdels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemdels(this->itemdels_size() - 1).data(),
            this->itemdels(this->itemdels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemdels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_itemdels;
        if (input->ExpectTag(42)) goto parse_dataupdates;
        break;
      }

      // repeated .Cmd.GuildArtifactData dataupdates = 5;
      case 5: {
        if (tag == 42) {
         parse_dataupdates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dataupdates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dataupdates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ArtifactUpdateNtfGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ArtifactUpdateNtfGuildCmd)
  return false;
#undef DO_
}

void ArtifactUpdateNtfGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ArtifactUpdateNtfGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ARTIFACT_UPDATE_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GuildArtifactItem itemupdates = 3;
  for (int i = 0; i < this->itemupdates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->itemupdates(i), output);
  }

  // repeated string itemdels = 4;
  for (int i = 0; i < this->itemdels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->itemdels(i).data(), this->itemdels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "itemdels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->itemdels(i), output);
  }

  // repeated .Cmd.GuildArtifactData dataupdates = 5;
  for (int i = 0; i < this->dataupdates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dataupdates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ArtifactUpdateNtfGuildCmd)
}

::google::protobuf::uint8* ArtifactUpdateNtfGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ArtifactUpdateNtfGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ARTIFACT_UPDATE_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GuildArtifactItem itemupdates = 3;
  for (int i = 0; i < this->itemupdates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->itemupdates(i), target);
  }

  // repeated string itemdels = 4;
  for (int i = 0; i < this->itemdels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemdels(i).data(), this->itemdels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemdels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->itemdels(i), target);
  }

  // repeated .Cmd.GuildArtifactData dataupdates = 5;
  for (int i = 0; i < this->dataupdates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dataupdates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ArtifactUpdateNtfGuildCmd)
  return target;
}

int ArtifactUpdateNtfGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ARTIFACT_UPDATE_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.GuildArtifactItem itemupdates = 3;
  total_size += 1 * this->itemupdates_size();
  for (int i = 0; i < this->itemupdates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemupdates(i));
  }

  // repeated string itemdels = 4;
  total_size += 1 * this->itemdels_size();
  for (int i = 0; i < this->itemdels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->itemdels(i));
  }

  // repeated .Cmd.GuildArtifactData dataupdates = 5;
  total_size += 1 * this->dataupdates_size();
  for (int i = 0; i < this->dataupdates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dataupdates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtifactUpdateNtfGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtifactUpdateNtfGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArtifactUpdateNtfGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtifactUpdateNtfGuildCmd::MergeFrom(const ArtifactUpdateNtfGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemupdates_.MergeFrom(from.itemupdates_);
  itemdels_.MergeFrom(from.itemdels_);
  dataupdates_.MergeFrom(from.dataupdates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtifactUpdateNtfGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactUpdateNtfGuildCmd::CopyFrom(const ArtifactUpdateNtfGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactUpdateNtfGuildCmd::IsInitialized() const {

  return true;
}

void ArtifactUpdateNtfGuildCmd::Swap(ArtifactUpdateNtfGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    itemupdates_.Swap(&other->itemupdates_);
    itemdels_.Swap(&other->itemdels_);
    dataupdates_.Swap(&other->dataupdates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArtifactUpdateNtfGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtifactUpdateNtfGuildCmd_descriptor_;
  metadata.reflection = ArtifactUpdateNtfGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArtifactProduceGuildCmd::kCmdFieldNumber;
const int ArtifactProduceGuildCmd::kParamFieldNumber;
const int ArtifactProduceGuildCmd::kIdFieldNumber;
#endif  // !_MSC_VER

ArtifactProduceGuildCmd::ArtifactProduceGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ArtifactProduceGuildCmd)
}

void ArtifactProduceGuildCmd::InitAsDefaultInstance() {
}

ArtifactProduceGuildCmd::ArtifactProduceGuildCmd(const ArtifactProduceGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ArtifactProduceGuildCmd)
}

void ArtifactProduceGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 57;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtifactProduceGuildCmd::~ArtifactProduceGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ArtifactProduceGuildCmd)
  SharedDtor();
}

void ArtifactProduceGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArtifactProduceGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtifactProduceGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtifactProduceGuildCmd_descriptor_;
}

const ArtifactProduceGuildCmd& ArtifactProduceGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

ArtifactProduceGuildCmd* ArtifactProduceGuildCmd::default_instance_ = NULL;

ArtifactProduceGuildCmd* ArtifactProduceGuildCmd::New() const {
  return new ArtifactProduceGuildCmd;
}

void ArtifactProduceGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 57;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtifactProduceGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ArtifactProduceGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ARTIFACT_PRODUCE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ArtifactProduceGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ArtifactProduceGuildCmd)
  return false;
#undef DO_
}

void ArtifactProduceGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ArtifactProduceGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ARTIFACT_PRODUCE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ArtifactProduceGuildCmd)
}

::google::protobuf::uint8* ArtifactProduceGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ArtifactProduceGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ARTIFACT_PRODUCE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ArtifactProduceGuildCmd)
  return target;
}

int ArtifactProduceGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ARTIFACT_PRODUCE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtifactProduceGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtifactProduceGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArtifactProduceGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtifactProduceGuildCmd::MergeFrom(const ArtifactProduceGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtifactProduceGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactProduceGuildCmd::CopyFrom(const ArtifactProduceGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactProduceGuildCmd::IsInitialized() const {

  return true;
}

void ArtifactProduceGuildCmd::Swap(ArtifactProduceGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArtifactProduceGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtifactProduceGuildCmd_descriptor_;
  metadata.reflection = ArtifactProduceGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArtifactOptGuildCmd::kCmdFieldNumber;
const int ArtifactOptGuildCmd::kParamFieldNumber;
const int ArtifactOptGuildCmd::kOptFieldNumber;
const int ArtifactOptGuildCmd::kGuidFieldNumber;
const int ArtifactOptGuildCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

ArtifactOptGuildCmd::ArtifactOptGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ArtifactOptGuildCmd)
}

void ArtifactOptGuildCmd::InitAsDefaultInstance() {
}

ArtifactOptGuildCmd::ArtifactOptGuildCmd(const ArtifactOptGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ArtifactOptGuildCmd)
}

void ArtifactOptGuildCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 58;
  opt_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtifactOptGuildCmd::~ArtifactOptGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ArtifactOptGuildCmd)
  SharedDtor();
}

void ArtifactOptGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArtifactOptGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtifactOptGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtifactOptGuildCmd_descriptor_;
}

const ArtifactOptGuildCmd& ArtifactOptGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

ArtifactOptGuildCmd* ArtifactOptGuildCmd::default_instance_ = NULL;

ArtifactOptGuildCmd* ArtifactOptGuildCmd::New() const {
  return new ArtifactOptGuildCmd;
}

void ArtifactOptGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ArtifactOptGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(charid_, opt_);
    cmd_ = 50;
    param_ = 58;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  guid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtifactOptGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ArtifactOptGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ARTIFACT_OPT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opt;
        break;
      }

      // optional .Cmd.EArtifactOptType opt = 3 [default = EARTIFACTOPTTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_opt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EArtifactOptType_IsValid(value)) {
            set_opt(static_cast< ::Cmd::EArtifactOptType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guid;
        break;
      }

      // repeated string guid = 4;
      case 4: {
        if (tag == 34) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid(this->guid_size() - 1).data(),
            this->guid(this->guid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guid;
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ArtifactOptGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ArtifactOptGuildCmd)
  return false;
#undef DO_
}

void ArtifactOptGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ArtifactOptGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ARTIFACT_OPT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EArtifactOptType opt = 3 [default = EARTIFACTOPTTYPE_MIN];
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->opt(), output);
  }

  // repeated string guid = 4;
  for (int i = 0; i < this->guid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->guid(i).data(), this->guid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "guid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guid(i), output);
  }

  // optional uint64 charid = 5 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ArtifactOptGuildCmd)
}

::google::protobuf::uint8* ArtifactOptGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ArtifactOptGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ARTIFACT_OPT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EArtifactOptType opt = 3 [default = EARTIFACTOPTTYPE_MIN];
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->opt(), target);
  }

  // repeated string guid = 4;
  for (int i = 0; i < this->guid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid(i).data(), this->guid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->guid(i), target);
  }

  // optional uint64 charid = 5 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ArtifactOptGuildCmd)
  return target;
}

int ArtifactOptGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ARTIFACT_OPT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EArtifactOptType opt = 3 [default = EARTIFACTOPTTYPE_MIN];
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt());
    }

    // optional uint64 charid = 5 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated string guid = 4;
  total_size += 1 * this->guid_size();
  for (int i = 0; i < this->guid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->guid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtifactOptGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtifactOptGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArtifactOptGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtifactOptGuildCmd::MergeFrom(const ArtifactOptGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  guid_.MergeFrom(from.guid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtifactOptGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactOptGuildCmd::CopyFrom(const ArtifactOptGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactOptGuildCmd::IsInitialized() const {

  return true;
}

void ArtifactOptGuildCmd::Swap(ArtifactOptGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(opt_, other->opt_);
    guid_.Swap(&other->guid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArtifactOptGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtifactOptGuildCmd_descriptor_;
  metadata.reflection = ArtifactOptGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryGQuestGuildCmd::kCmdFieldNumber;
const int QueryGQuestGuildCmd::kParamFieldNumber;
const int QueryGQuestGuildCmd::kSubmitQuestsFieldNumber;
#endif  // !_MSC_VER

QueryGQuestGuildCmd::QueryGQuestGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryGQuestGuildCmd)
}

void QueryGQuestGuildCmd::InitAsDefaultInstance() {
}

QueryGQuestGuildCmd::QueryGQuestGuildCmd(const QueryGQuestGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryGQuestGuildCmd)
}

void QueryGQuestGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 59;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryGQuestGuildCmd::~QueryGQuestGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryGQuestGuildCmd)
  SharedDtor();
}

void QueryGQuestGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryGQuestGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryGQuestGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryGQuestGuildCmd_descriptor_;
}

const QueryGQuestGuildCmd& QueryGQuestGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

QueryGQuestGuildCmd* QueryGQuestGuildCmd::default_instance_ = NULL;

QueryGQuestGuildCmd* QueryGQuestGuildCmd::New() const {
  return new QueryGQuestGuildCmd;
}

void QueryGQuestGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 59;
  }
  submit_quests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryGQuestGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryGQuestGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_GQUEST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_submit_quests;
        break;
      }

      // repeated uint32 submit_quests = 3;
      case 3: {
        if (tag == 24) {
         parse_submit_quests:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_submit_quests())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_submit_quests())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_submit_quests;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryGQuestGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryGQuestGuildCmd)
  return false;
#undef DO_
}

void QueryGQuestGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryGQuestGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_GQUEST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 submit_quests = 3;
  for (int i = 0; i < this->submit_quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->submit_quests(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryGQuestGuildCmd)
}

::google::protobuf::uint8* QueryGQuestGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryGQuestGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_GQUEST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 submit_quests = 3;
  for (int i = 0; i < this->submit_quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->submit_quests(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryGQuestGuildCmd)
  return target;
}

int QueryGQuestGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_GQUEST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 submit_quests = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->submit_quests_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->submit_quests(i));
    }
    total_size += 1 * this->submit_quests_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGQuestGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryGQuestGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryGQuestGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryGQuestGuildCmd::MergeFrom(const QueryGQuestGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  submit_quests_.MergeFrom(from.submit_quests_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryGQuestGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGQuestGuildCmd::CopyFrom(const QueryGQuestGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGQuestGuildCmd::IsInitialized() const {

  return true;
}

void QueryGQuestGuildCmd::Swap(QueryGQuestGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    submit_quests_.Swap(&other->submit_quests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryGQuestGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryGQuestGuildCmd_descriptor_;
  metadata.reflection = QueryGQuestGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureActionGuildCmd::kCmdFieldNumber;
const int TreasureActionGuildCmd::kParamFieldNumber;
const int TreasureActionGuildCmd::kCharidFieldNumber;
const int TreasureActionGuildCmd::kGuildTreasureCountFieldNumber;
const int TreasureActionGuildCmd::kBcoinTreasureCountFieldNumber;
const int TreasureActionGuildCmd::kActionFieldNumber;
const int TreasureActionGuildCmd::kPointFieldNumber;
const int TreasureActionGuildCmd::kTreasureFieldNumber;
#endif  // !_MSC_VER

TreasureActionGuildCmd::TreasureActionGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TreasureActionGuildCmd)
}

void TreasureActionGuildCmd::InitAsDefaultInstance() {
  treasure_ = const_cast< ::Cmd::GuildTreasure*>(&::Cmd::GuildTreasure::default_instance());
}

TreasureActionGuildCmd::TreasureActionGuildCmd(const TreasureActionGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TreasureActionGuildCmd)
}

void TreasureActionGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 60;
  charid_ = GOOGLE_ULONGLONG(0);
  guild_treasure_count_ = 0u;
  bcoin_treasure_count_ = 0u;
  action_ = 0;
  point_ = 0;
  treasure_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureActionGuildCmd::~TreasureActionGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TreasureActionGuildCmd)
  SharedDtor();
}

void TreasureActionGuildCmd::SharedDtor() {
  if (this != default_instance_) {
    delete treasure_;
  }
}

void TreasureActionGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureActionGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureActionGuildCmd_descriptor_;
}

const TreasureActionGuildCmd& TreasureActionGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

TreasureActionGuildCmd* TreasureActionGuildCmd::default_instance_ = NULL;

TreasureActionGuildCmd* TreasureActionGuildCmd::New() const {
  return new TreasureActionGuildCmd;
}

void TreasureActionGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TreasureActionGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, point_);
    cmd_ = 50;
    param_ = 60;
    if (has_treasure()) {
      if (treasure_ != NULL) treasure_->::Cmd::GuildTreasure::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureActionGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TreasureActionGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_TREASURE_ACTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_guild_treasure_count;
        break;
      }

      // optional uint32 guild_treasure_count = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_guild_treasure_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_treasure_count_)));
          set_has_guild_treasure_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bcoin_treasure_count;
        break;
      }

      // optional uint32 bcoin_treasure_count = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_bcoin_treasure_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bcoin_treasure_count_)));
          set_has_bcoin_treasure_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_action;
        break;
      }

      // optional .Cmd.ETreasureAction action = 6 [default = ETREASUREACTION_MIN];
      case 6: {
        if (tag == 48) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETreasureAction_IsValid(value)) {
            set_action(static_cast< ::Cmd::ETreasureAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_point;
        break;
      }

      // optional .Cmd.ETreasurePoint point = 7 [default = ETREASUREPOINT_MIN];
      case 7: {
        if (tag == 56) {
         parse_point:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETreasurePoint_IsValid(value)) {
            set_point(static_cast< ::Cmd::ETreasurePoint >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_treasure;
        break;
      }

      // optional .Cmd.GuildTreasure treasure = 8;
      case 8: {
        if (tag == 66) {
         parse_treasure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasure()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TreasureActionGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TreasureActionGuildCmd)
  return false;
#undef DO_
}

void TreasureActionGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TreasureActionGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_TREASURE_ACTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 guild_treasure_count = 4 [default = 0];
  if (has_guild_treasure_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->guild_treasure_count(), output);
  }

  // optional uint32 bcoin_treasure_count = 5 [default = 0];
  if (has_bcoin_treasure_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bcoin_treasure_count(), output);
  }

  // optional .Cmd.ETreasureAction action = 6 [default = ETREASUREACTION_MIN];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->action(), output);
  }

  // optional .Cmd.ETreasurePoint point = 7 [default = ETREASUREPOINT_MIN];
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->point(), output);
  }

  // optional .Cmd.GuildTreasure treasure = 8;
  if (has_treasure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->treasure(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TreasureActionGuildCmd)
}

::google::protobuf::uint8* TreasureActionGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TreasureActionGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_TREASURE_ACTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 guild_treasure_count = 4 [default = 0];
  if (has_guild_treasure_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->guild_treasure_count(), target);
  }

  // optional uint32 bcoin_treasure_count = 5 [default = 0];
  if (has_bcoin_treasure_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bcoin_treasure_count(), target);
  }

  // optional .Cmd.ETreasureAction action = 6 [default = ETREASUREACTION_MIN];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->action(), target);
  }

  // optional .Cmd.ETreasurePoint point = 7 [default = ETREASUREPOINT_MIN];
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->point(), target);
  }

  // optional .Cmd.GuildTreasure treasure = 8;
  if (has_treasure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->treasure(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TreasureActionGuildCmd)
  return target;
}

int TreasureActionGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_TREASURE_ACTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 guild_treasure_count = 4 [default = 0];
    if (has_guild_treasure_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_treasure_count());
    }

    // optional uint32 bcoin_treasure_count = 5 [default = 0];
    if (has_bcoin_treasure_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bcoin_treasure_count());
    }

    // optional .Cmd.ETreasureAction action = 6 [default = ETREASUREACTION_MIN];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .Cmd.ETreasurePoint point = 7 [default = ETREASUREPOINT_MIN];
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->point());
    }

    // optional .Cmd.GuildTreasure treasure = 8;
    if (has_treasure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasure());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureActionGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureActionGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureActionGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureActionGuildCmd::MergeFrom(const TreasureActionGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guild_treasure_count()) {
      set_guild_treasure_count(from.guild_treasure_count());
    }
    if (from.has_bcoin_treasure_count()) {
      set_bcoin_treasure_count(from.bcoin_treasure_count());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_treasure()) {
      mutable_treasure()->::Cmd::GuildTreasure::MergeFrom(from.treasure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureActionGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureActionGuildCmd::CopyFrom(const TreasureActionGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureActionGuildCmd::IsInitialized() const {

  return true;
}

void TreasureActionGuildCmd::Swap(TreasureActionGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(guild_treasure_count_, other->guild_treasure_count_);
    std::swap(bcoin_treasure_count_, other->bcoin_treasure_count_);
    std::swap(action_, other->action_);
    std::swap(point_, other->point_);
    std::swap(treasure_, other->treasure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureActionGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureActionGuildCmd_descriptor_;
  metadata.reflection = TreasureActionGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingSubmitRankItem::kCharidFieldNumber;
const int BuildingSubmitRankItem::kSubmitcounttotalFieldNumber;
const int BuildingSubmitRankItem::kSubmittimeFieldNumber;
#endif  // !_MSC_VER

BuildingSubmitRankItem::BuildingSubmitRankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuildingSubmitRankItem)
}

void BuildingSubmitRankItem::InitAsDefaultInstance() {
}

BuildingSubmitRankItem::BuildingSubmitRankItem(const BuildingSubmitRankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuildingSubmitRankItem)
}

void BuildingSubmitRankItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  submitcounttotal_ = 0u;
  submittime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingSubmitRankItem::~BuildingSubmitRankItem() {
  // @@protoc_insertion_point(destructor:Cmd.BuildingSubmitRankItem)
  SharedDtor();
}

void BuildingSubmitRankItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingSubmitRankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingSubmitRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingSubmitRankItem_descriptor_;
}

const BuildingSubmitRankItem& BuildingSubmitRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

BuildingSubmitRankItem* BuildingSubmitRankItem::default_instance_ = NULL;

BuildingSubmitRankItem* BuildingSubmitRankItem::New() const {
  return new BuildingSubmitRankItem;
}

void BuildingSubmitRankItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuildingSubmitRankItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(charid_, submittime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingSubmitRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuildingSubmitRankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_submitcounttotal;
        break;
      }

      // optional uint32 submitcounttotal = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_submitcounttotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submitcounttotal_)));
          set_has_submitcounttotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_submittime;
        break;
      }

      // optional uint32 submittime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_submittime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submittime_)));
          set_has_submittime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuildingSubmitRankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuildingSubmitRankItem)
  return false;
#undef DO_
}

void BuildingSubmitRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuildingSubmitRankItem)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 submitcounttotal = 2 [default = 0];
  if (has_submitcounttotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->submitcounttotal(), output);
  }

  // optional uint32 submittime = 3 [default = 0];
  if (has_submittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->submittime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuildingSubmitRankItem)
}

::google::protobuf::uint8* BuildingSubmitRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuildingSubmitRankItem)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 submitcounttotal = 2 [default = 0];
  if (has_submitcounttotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->submitcounttotal(), target);
  }

  // optional uint32 submittime = 3 [default = 0];
  if (has_submittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->submittime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuildingSubmitRankItem)
  return target;
}

int BuildingSubmitRankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 submitcounttotal = 2 [default = 0];
    if (has_submitcounttotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->submitcounttotal());
    }

    // optional uint32 submittime = 3 [default = 0];
    if (has_submittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->submittime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingSubmitRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingSubmitRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingSubmitRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingSubmitRankItem::MergeFrom(const BuildingSubmitRankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_submitcounttotal()) {
      set_submitcounttotal(from.submitcounttotal());
    }
    if (from.has_submittime()) {
      set_submittime(from.submittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingSubmitRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingSubmitRankItem::CopyFrom(const BuildingSubmitRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingSubmitRankItem::IsInitialized() const {

  return true;
}

void BuildingSubmitRankItem::Swap(BuildingSubmitRankItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(submitcounttotal_, other->submitcounttotal_);
    std::swap(submittime_, other->submittime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingSubmitRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingSubmitRankItem_descriptor_;
  metadata.reflection = BuildingSubmitRankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryBuildingRankGuildCmd::kCmdFieldNumber;
const int QueryBuildingRankGuildCmd::kParamFieldNumber;
const int QueryBuildingRankGuildCmd::kTypeFieldNumber;
const int QueryBuildingRankGuildCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

QueryBuildingRankGuildCmd::QueryBuildingRankGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryBuildingRankGuildCmd)
}

void QueryBuildingRankGuildCmd::InitAsDefaultInstance() {
}

QueryBuildingRankGuildCmd::QueryBuildingRankGuildCmd(const QueryBuildingRankGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryBuildingRankGuildCmd)
}

void QueryBuildingRankGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 61;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryBuildingRankGuildCmd::~QueryBuildingRankGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryBuildingRankGuildCmd)
  SharedDtor();
}

void QueryBuildingRankGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryBuildingRankGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryBuildingRankGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryBuildingRankGuildCmd_descriptor_;
}

const QueryBuildingRankGuildCmd& QueryBuildingRankGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

QueryBuildingRankGuildCmd* QueryBuildingRankGuildCmd::default_instance_ = NULL;

QueryBuildingRankGuildCmd* QueryBuildingRankGuildCmd::New() const {
  return new QueryBuildingRankGuildCmd;
}

void QueryBuildingRankGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 61;
    type_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryBuildingRankGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryBuildingRankGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_BUILDING_RANK];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EGuildBuilding type = 3 [default = EGUILDBUILDING_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildBuilding_IsValid(value)) {
            set_type(static_cast< ::Cmd::EGuildBuilding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .Cmd.BuildingSubmitRankItem items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryBuildingRankGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryBuildingRankGuildCmd)
  return false;
#undef DO_
}

void QueryBuildingRankGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryBuildingRankGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_BUILDING_RANK];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EGuildBuilding type = 3 [default = EGUILDBUILDING_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .Cmd.BuildingSubmitRankItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryBuildingRankGuildCmd)
}

::google::protobuf::uint8* QueryBuildingRankGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryBuildingRankGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_BUILDING_RANK];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EGuildBuilding type = 3 [default = EGUILDBUILDING_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .Cmd.BuildingSubmitRankItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryBuildingRankGuildCmd)
  return target;
}

int QueryBuildingRankGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_BUILDING_RANK];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EGuildBuilding type = 3 [default = EGUILDBUILDING_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.BuildingSubmitRankItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryBuildingRankGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryBuildingRankGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryBuildingRankGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryBuildingRankGuildCmd::MergeFrom(const QueryBuildingRankGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryBuildingRankGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBuildingRankGuildCmd::CopyFrom(const QueryBuildingRankGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBuildingRankGuildCmd::IsInitialized() const {

  return true;
}

void QueryBuildingRankGuildCmd::Swap(QueryBuildingRankGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryBuildingRankGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryBuildingRankGuildCmd_descriptor_;
  metadata.reflection = QueryBuildingRankGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryTreasureResultGuildCmd::kCmdFieldNumber;
const int QueryTreasureResultGuildCmd::kParamFieldNumber;
const int QueryTreasureResultGuildCmd::kEventguidFieldNumber;
const int QueryTreasureResultGuildCmd::kResultFieldNumber;
#endif  // !_MSC_VER

QueryTreasureResultGuildCmd::QueryTreasureResultGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryTreasureResultGuildCmd)
}

void QueryTreasureResultGuildCmd::InitAsDefaultInstance() {
  result_ = const_cast< ::Cmd::TreasureResult*>(&::Cmd::TreasureResult::default_instance());
}

QueryTreasureResultGuildCmd::QueryTreasureResultGuildCmd(const QueryTreasureResultGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryTreasureResultGuildCmd)
}

void QueryTreasureResultGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 62;
  eventguid_ = 0u;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryTreasureResultGuildCmd::~QueryTreasureResultGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryTreasureResultGuildCmd)
  SharedDtor();
}

void QueryTreasureResultGuildCmd::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void QueryTreasureResultGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryTreasureResultGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryTreasureResultGuildCmd_descriptor_;
}

const QueryTreasureResultGuildCmd& QueryTreasureResultGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

QueryTreasureResultGuildCmd* QueryTreasureResultGuildCmd::default_instance_ = NULL;

QueryTreasureResultGuildCmd* QueryTreasureResultGuildCmd::New() const {
  return new QueryTreasureResultGuildCmd;
}

void QueryTreasureResultGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 50;
    param_ = 62;
    eventguid_ = 0u;
    if (has_result()) {
      if (result_ != NULL) result_->::Cmd::TreasureResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryTreasureResultGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryTreasureResultGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_TREASURE_QUERYRESULT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eventguid;
        break;
      }

      // optional uint32 eventguid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_eventguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventguid_)));
          set_has_eventguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // optional .Cmd.TreasureResult result = 4;
      case 4: {
        if (tag == 34) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryTreasureResultGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryTreasureResultGuildCmd)
  return false;
#undef DO_
}

void QueryTreasureResultGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryTreasureResultGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_TREASURE_QUERYRESULT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 eventguid = 3 [default = 0];
  if (has_eventguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->eventguid(), output);
  }

  // optional .Cmd.TreasureResult result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryTreasureResultGuildCmd)
}

::google::protobuf::uint8* QueryTreasureResultGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryTreasureResultGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_TREASURE_QUERYRESULT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 eventguid = 3 [default = 0];
  if (has_eventguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->eventguid(), target);
  }

  // optional .Cmd.TreasureResult result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryTreasureResultGuildCmd)
  return target;
}

int QueryTreasureResultGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_TREASURE_QUERYRESULT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 eventguid = 3 [default = 0];
    if (has_eventguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventguid());
    }

    // optional .Cmd.TreasureResult result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryTreasureResultGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryTreasureResultGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryTreasureResultGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryTreasureResultGuildCmd::MergeFrom(const QueryTreasureResultGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_eventguid()) {
      set_eventguid(from.eventguid());
    }
    if (from.has_result()) {
      mutable_result()->::Cmd::TreasureResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryTreasureResultGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryTreasureResultGuildCmd::CopyFrom(const QueryTreasureResultGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTreasureResultGuildCmd::IsInitialized() const {

  return true;
}

void QueryTreasureResultGuildCmd::Swap(QueryTreasureResultGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(eventguid_, other->eventguid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryTreasureResultGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryTreasureResultGuildCmd_descriptor_;
  metadata.reflection = QueryTreasureResultGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CityShowInfo::kCityidFieldNumber;
const int CityShowInfo::kStateFieldNumber;
const int CityShowInfo::kGuildidFieldNumber;
const int CityShowInfo::kNameFieldNumber;
const int CityShowInfo::kPortraitFieldNumber;
const int CityShowInfo::kLvFieldNumber;
const int CityShowInfo::kMembercountFieldNumber;
#endif  // !_MSC_VER

CityShowInfo::CityShowInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CityShowInfo)
}

void CityShowInfo::InitAsDefaultInstance() {
}

CityShowInfo::CityShowInfo(const CityShowInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CityShowInfo)
}

void CityShowInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cityid_ = 0u;
  state_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lv_ = 0u;
  membercount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CityShowInfo::~CityShowInfo() {
  // @@protoc_insertion_point(destructor:Cmd.CityShowInfo)
  SharedDtor();
}

void CityShowInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete portrait_;
  }
  if (this != default_instance_) {
  }
}

void CityShowInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityShowInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityShowInfo_descriptor_;
}

const CityShowInfo& CityShowInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

CityShowInfo* CityShowInfo::default_instance_ = NULL;

CityShowInfo* CityShowInfo::New() const {
  return new CityShowInfo;
}

void CityShowInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CityShowInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(cityid_, guildid_);
    ZR_(lv_, membercount_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_portrait()) {
      if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        portrait_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CityShowInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CityShowInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cityid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .Cmd.EGCityState state = 2 [default = EGCITYSTATE_MIN];
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGCityState_IsValid(value)) {
            set_state(static_cast< ::Cmd::EGCityState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_portrait;
        break;
      }

      // optional string portrait = 5;
      case 5: {
        if (tag == 42) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portrait()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->portrait().data(), this->portrait().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "portrait");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_membercount;
        break;
      }

      // optional uint32 membercount = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_membercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
          set_has_membercount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CityShowInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CityShowInfo)
  return false;
#undef DO_
}

void CityShowInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CityShowInfo)
  // optional uint32 cityid = 1 [default = 0];
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional .Cmd.EGCityState state = 2 [default = EGCITYSTATE_MIN];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string portrait = 5;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "portrait");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->portrait(), output);
  }

  // optional uint32 lv = 6 [default = 0];
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lv(), output);
  }

  // optional uint32 membercount = 7 [default = 0];
  if (has_membercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->membercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CityShowInfo)
}

::google::protobuf::uint8* CityShowInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CityShowInfo)
  // optional uint32 cityid = 1 [default = 0];
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional .Cmd.EGCityState state = 2 [default = EGCITYSTATE_MIN];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string portrait = 5;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "portrait");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->portrait(), target);
  }

  // optional uint32 lv = 6 [default = 0];
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lv(), target);
  }

  // optional uint32 membercount = 7 [default = 0];
  if (has_membercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->membercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CityShowInfo)
  return target;
}

int CityShowInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cityid = 1 [default = 0];
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional .Cmd.EGCityState state = 2 [default = EGCITYSTATE_MIN];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string portrait = 5;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portrait());
    }

    // optional uint32 lv = 6 [default = 0];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 membercount = 7 [default = 0];
    if (has_membercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->membercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityShowInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CityShowInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CityShowInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CityShowInfo::MergeFrom(const CityShowInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_membercount()) {
      set_membercount(from.membercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CityShowInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityShowInfo::CopyFrom(const CityShowInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityShowInfo::IsInitialized() const {

  return true;
}

void CityShowInfo::Swap(CityShowInfo* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(state_, other->state_);
    std::swap(guildid_, other->guildid_);
    std::swap(name_, other->name_);
    std::swap(portrait_, other->portrait_);
    std::swap(lv_, other->lv_);
    std::swap(membercount_, other->membercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CityShowInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityShowInfo_descriptor_;
  metadata.reflection = CityShowInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryGCityShowInfoGuildCmd::kCmdFieldNumber;
const int QueryGCityShowInfoGuildCmd::kParamFieldNumber;
const int QueryGCityShowInfoGuildCmd::kInfosFieldNumber;
#endif  // !_MSC_VER

QueryGCityShowInfoGuildCmd::QueryGCityShowInfoGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryGCityShowInfoGuildCmd)
}

void QueryGCityShowInfoGuildCmd::InitAsDefaultInstance() {
}

QueryGCityShowInfoGuildCmd::QueryGCityShowInfoGuildCmd(const QueryGCityShowInfoGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryGCityShowInfoGuildCmd)
}

void QueryGCityShowInfoGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 63;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryGCityShowInfoGuildCmd::~QueryGCityShowInfoGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryGCityShowInfoGuildCmd)
  SharedDtor();
}

void QueryGCityShowInfoGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryGCityShowInfoGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryGCityShowInfoGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryGCityShowInfoGuildCmd_descriptor_;
}

const QueryGCityShowInfoGuildCmd& QueryGCityShowInfoGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

QueryGCityShowInfoGuildCmd* QueryGCityShowInfoGuildCmd::default_instance_ = NULL;

QueryGCityShowInfoGuildCmd* QueryGCityShowInfoGuildCmd::New() const {
  return new QueryGCityShowInfoGuildCmd;
}

void QueryGCityShowInfoGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 50;
    param_ = 63;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryGCityShowInfoGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryGCityShowInfoGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_CITYSHOW];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // repeated .Cmd.CityShowInfo infos = 3;
      case 3: {
        if (tag == 26) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryGCityShowInfoGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryGCityShowInfoGuildCmd)
  return false;
#undef DO_
}

void QueryGCityShowInfoGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryGCityShowInfoGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_CITYSHOW];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.CityShowInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryGCityShowInfoGuildCmd)
}

::google::protobuf::uint8* QueryGCityShowInfoGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryGCityShowInfoGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_CITYSHOW];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.CityShowInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryGCityShowInfoGuildCmd)
  return target;
}

int QueryGCityShowInfoGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_QUERY_CITYSHOW];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.CityShowInfo infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGCityShowInfoGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryGCityShowInfoGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryGCityShowInfoGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryGCityShowInfoGuildCmd::MergeFrom(const QueryGCityShowInfoGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryGCityShowInfoGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGCityShowInfoGuildCmd::CopyFrom(const QueryGCityShowInfoGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGCityShowInfoGuildCmd::IsInitialized() const {

  return true;
}

void QueryGCityShowInfoGuildCmd::Swap(QueryGCityShowInfoGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryGCityShowInfoGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryGCityShowInfoGuildCmd_descriptor_;
  metadata.reflection = QueryGCityShowInfoGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgOpenFireGuildCmd::kCmdFieldNumber;
const int GvgOpenFireGuildCmd::kParamFieldNumber;
const int GvgOpenFireGuildCmd::kFireFieldNumber;
#endif  // !_MSC_VER

GvgOpenFireGuildCmd::GvgOpenFireGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgOpenFireGuildCmd)
}

void GvgOpenFireGuildCmd::InitAsDefaultInstance() {
}

GvgOpenFireGuildCmd::GvgOpenFireGuildCmd(const GvgOpenFireGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgOpenFireGuildCmd)
}

void GvgOpenFireGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 64;
  fire_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgOpenFireGuildCmd::~GvgOpenFireGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GvgOpenFireGuildCmd)
  SharedDtor();
}

void GvgOpenFireGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GvgOpenFireGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgOpenFireGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgOpenFireGuildCmd_descriptor_;
}

const GvgOpenFireGuildCmd& GvgOpenFireGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

GvgOpenFireGuildCmd* GvgOpenFireGuildCmd::default_instance_ = NULL;

GvgOpenFireGuildCmd* GvgOpenFireGuildCmd::New() const {
  return new GvgOpenFireGuildCmd;
}

void GvgOpenFireGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 64;
    fire_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgOpenFireGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgOpenFireGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_OEPN_GVG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fire;
        break;
      }

      // optional bool fire = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_fire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fire_)));
          set_has_fire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgOpenFireGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgOpenFireGuildCmd)
  return false;
#undef DO_
}

void GvgOpenFireGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgOpenFireGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_OEPN_GVG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool fire = 3 [default = false];
  if (has_fire()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fire(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgOpenFireGuildCmd)
}

::google::protobuf::uint8* GvgOpenFireGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgOpenFireGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_OEPN_GVG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool fire = 3 [default = false];
  if (has_fire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fire(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgOpenFireGuildCmd)
  return target;
}

int GvgOpenFireGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_OEPN_GVG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool fire = 3 [default = false];
    if (has_fire()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgOpenFireGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgOpenFireGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgOpenFireGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgOpenFireGuildCmd::MergeFrom(const GvgOpenFireGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_fire()) {
      set_fire(from.fire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgOpenFireGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgOpenFireGuildCmd::CopyFrom(const GvgOpenFireGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgOpenFireGuildCmd::IsInitialized() const {

  return true;
}

void GvgOpenFireGuildCmd::Swap(GvgOpenFireGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(fire_, other->fire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgOpenFireGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgOpenFireGuildCmd_descriptor_;
  metadata.reflection = GvgOpenFireGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterPunishTimeNtfGuildCmd::kCmdFieldNumber;
const int EnterPunishTimeNtfGuildCmd::kParamFieldNumber;
const int EnterPunishTimeNtfGuildCmd::kExittimeFieldNumber;
#endif  // !_MSC_VER

EnterPunishTimeNtfGuildCmd::EnterPunishTimeNtfGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnterPunishTimeNtfGuildCmd)
}

void EnterPunishTimeNtfGuildCmd::InitAsDefaultInstance() {
}

EnterPunishTimeNtfGuildCmd::EnterPunishTimeNtfGuildCmd(const EnterPunishTimeNtfGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnterPunishTimeNtfGuildCmd)
}

void EnterPunishTimeNtfGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 66;
  exittime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterPunishTimeNtfGuildCmd::~EnterPunishTimeNtfGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EnterPunishTimeNtfGuildCmd)
  SharedDtor();
}

void EnterPunishTimeNtfGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterPunishTimeNtfGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterPunishTimeNtfGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterPunishTimeNtfGuildCmd_descriptor_;
}

const EnterPunishTimeNtfGuildCmd& EnterPunishTimeNtfGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

EnterPunishTimeNtfGuildCmd* EnterPunishTimeNtfGuildCmd::default_instance_ = NULL;

EnterPunishTimeNtfGuildCmd* EnterPunishTimeNtfGuildCmd::New() const {
  return new EnterPunishTimeNtfGuildCmd;
}

void EnterPunishTimeNtfGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 50;
    param_ = 66;
    exittime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterPunishTimeNtfGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnterPunishTimeNtfGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ENTERPUNISHTIME_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exittime;
        break;
      }

      // optional uint32 exittime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_exittime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exittime_)));
          set_has_exittime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnterPunishTimeNtfGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnterPunishTimeNtfGuildCmd)
  return false;
#undef DO_
}

void EnterPunishTimeNtfGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnterPunishTimeNtfGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ENTERPUNISHTIME_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 exittime = 3 [default = 0];
  if (has_exittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exittime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnterPunishTimeNtfGuildCmd)
}

::google::protobuf::uint8* EnterPunishTimeNtfGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnterPunishTimeNtfGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ENTERPUNISHTIME_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 exittime = 3 [default = 0];
  if (has_exittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exittime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnterPunishTimeNtfGuildCmd)
  return target;
}

int EnterPunishTimeNtfGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_ENTERPUNISHTIME_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 exittime = 3 [default = 0];
    if (has_exittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exittime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterPunishTimeNtfGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterPunishTimeNtfGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterPunishTimeNtfGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterPunishTimeNtfGuildCmd::MergeFrom(const EnterPunishTimeNtfGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_exittime()) {
      set_exittime(from.exittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterPunishTimeNtfGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterPunishTimeNtfGuildCmd::CopyFrom(const EnterPunishTimeNtfGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterPunishTimeNtfGuildCmd::IsInitialized() const {

  return true;
}

void EnterPunishTimeNtfGuildCmd::Swap(EnterPunishTimeNtfGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(exittime_, other->exittime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterPunishTimeNtfGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterPunishTimeNtfGuildCmd_descriptor_;
  metadata.reflection = EnterPunishTimeNtfGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenRealtimeVoiceGuildCmd::kCmdFieldNumber;
const int OpenRealtimeVoiceGuildCmd::kParamFieldNumber;
const int OpenRealtimeVoiceGuildCmd::kCharidFieldNumber;
const int OpenRealtimeVoiceGuildCmd::kOpenFieldNumber;
#endif  // !_MSC_VER

OpenRealtimeVoiceGuildCmd::OpenRealtimeVoiceGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OpenRealtimeVoiceGuildCmd)
}

void OpenRealtimeVoiceGuildCmd::InitAsDefaultInstance() {
}

OpenRealtimeVoiceGuildCmd::OpenRealtimeVoiceGuildCmd(const OpenRealtimeVoiceGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OpenRealtimeVoiceGuildCmd)
}

void OpenRealtimeVoiceGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 50;
  param_ = 65;
  charid_ = GOOGLE_ULONGLONG(0);
  open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenRealtimeVoiceGuildCmd::~OpenRealtimeVoiceGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.OpenRealtimeVoiceGuildCmd)
  SharedDtor();
}

void OpenRealtimeVoiceGuildCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenRealtimeVoiceGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenRealtimeVoiceGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenRealtimeVoiceGuildCmd_descriptor_;
}

const OpenRealtimeVoiceGuildCmd& OpenRealtimeVoiceGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCmd_2eproto();
  return *default_instance_;
}

OpenRealtimeVoiceGuildCmd* OpenRealtimeVoiceGuildCmd::default_instance_ = NULL;

OpenRealtimeVoiceGuildCmd* OpenRealtimeVoiceGuildCmd::New() const {
  return new OpenRealtimeVoiceGuildCmd;
}

void OpenRealtimeVoiceGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpenRealtimeVoiceGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, open_);
    cmd_ = 50;
    param_ = 65;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenRealtimeVoiceGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OpenRealtimeVoiceGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_OPEN_REALTIME_VOICE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_open;
        break;
      }

      // optional bool open = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OpenRealtimeVoiceGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OpenRealtimeVoiceGuildCmd)
  return false;
#undef DO_
}

void OpenRealtimeVoiceGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OpenRealtimeVoiceGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_OPEN_REALTIME_VOICE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bool open = 4 [default = false];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OpenRealtimeVoiceGuildCmd)
}

::google::protobuf::uint8* OpenRealtimeVoiceGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OpenRealtimeVoiceGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_OPEN_REALTIME_VOICE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bool open = 4 [default = false];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OpenRealtimeVoiceGuildCmd)
  return target;
}

int OpenRealtimeVoiceGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildParam param = 2 [default = GUILDPARAM_OPEN_REALTIME_VOICE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bool open = 4 [default = false];
    if (has_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenRealtimeVoiceGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenRealtimeVoiceGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenRealtimeVoiceGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenRealtimeVoiceGuildCmd::MergeFrom(const OpenRealtimeVoiceGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenRealtimeVoiceGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenRealtimeVoiceGuildCmd::CopyFrom(const OpenRealtimeVoiceGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenRealtimeVoiceGuildCmd::IsInitialized() const {

  return true;
}

void OpenRealtimeVoiceGuildCmd::Swap(OpenRealtimeVoiceGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenRealtimeVoiceGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenRealtimeVoiceGuildCmd_descriptor_;
  metadata.reflection = OpenRealtimeVoiceGuildCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
