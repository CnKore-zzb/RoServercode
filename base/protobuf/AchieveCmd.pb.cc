// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AchieveCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AchieveCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* MaxInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaxInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserResume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserResume_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchieveQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchieveQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchieveItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchieveItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchieveSubData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchieveSubData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchieveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchieveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserResumeAchCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserResumeAchCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAchieveDataAchCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAchieveDataAchCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewAchieveNtfAchCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewAchieveNtfAchCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardGetAchCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardGetAchCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AchieveParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAchieveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAchieveSubType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AchieveCmd_2eproto() {
  protobuf_AddDesc_AchieveCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AchieveCmd.proto");
  GOOGLE_CHECK(file != NULL);
  MaxInfo_descriptor_ = file->message_type(0);
  static const int MaxInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxInfo, name_),
  };
  MaxInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaxInfo_descriptor_,
      MaxInfo::default_instance_,
      MaxInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaxInfo));
  UserResume_descriptor_ = file->message_type(1);
  static const int UserResume_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, bepro_1_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, bepro_2_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, bepro_3_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, walk_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, max_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, max_hand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, max_wheel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, max_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, max_teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, max_hands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, max_wheels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, max_chats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, max_music_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, max_save_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, max_besave_),
  };
  UserResume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserResume_descriptor_,
      UserResume::default_instance_,
      UserResume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserResume));
  AchieveQuest_descriptor_ = file->message_type(2);
  static const int AchieveQuest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveQuest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveQuest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveQuest, pre_),
  };
  AchieveQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchieveQuest_descriptor_,
      AchieveQuest::default_instance_,
      AchieveQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchieveQuest));
  AchieveItem_descriptor_ = file->message_type(3);
  static const int AchieveItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveItem, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveItem, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveItem, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveItem, quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveItem, reward_get_),
  };
  AchieveItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchieveItem_descriptor_,
      AchieveItem::default_instance_,
      AchieveItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchieveItem));
  AchieveSubData_descriptor_ = file->message_type(4);
  static const int AchieveSubData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveSubData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveSubData, items_),
  };
  AchieveSubData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchieveSubData_descriptor_,
      AchieveSubData::default_instance_,
      AchieveSubData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveSubData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveSubData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchieveSubData));
  AchieveData_descriptor_ = file->message_type(5);
  static const int AchieveData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveData, datas_),
  };
  AchieveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchieveData_descriptor_,
      AchieveData::default_instance_,
      AchieveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchieveData));
  QueryUserResumeAchCmd_descriptor_ = file->message_type(6);
  static const int QueryUserResumeAchCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserResumeAchCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserResumeAchCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserResumeAchCmd, data_),
  };
  QueryUserResumeAchCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryUserResumeAchCmd_descriptor_,
      QueryUserResumeAchCmd::default_instance_,
      QueryUserResumeAchCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserResumeAchCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserResumeAchCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryUserResumeAchCmd));
  QueryAchieveDataAchCmd_descriptor_ = file->message_type(7);
  static const int QueryAchieveDataAchCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAchieveDataAchCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAchieveDataAchCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAchieveDataAchCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAchieveDataAchCmd, items_),
  };
  QueryAchieveDataAchCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAchieveDataAchCmd_descriptor_,
      QueryAchieveDataAchCmd::default_instance_,
      QueryAchieveDataAchCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAchieveDataAchCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAchieveDataAchCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAchieveDataAchCmd));
  NewAchieveNtfAchCmd_descriptor_ = file->message_type(8);
  static const int NewAchieveNtfAchCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAchieveNtfAchCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAchieveNtfAchCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAchieveNtfAchCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAchieveNtfAchCmd, items_),
  };
  NewAchieveNtfAchCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewAchieveNtfAchCmd_descriptor_,
      NewAchieveNtfAchCmd::default_instance_,
      NewAchieveNtfAchCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAchieveNtfAchCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAchieveNtfAchCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewAchieveNtfAchCmd));
  RewardGetAchCmd_descriptor_ = file->message_type(9);
  static const int RewardGetAchCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardGetAchCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardGetAchCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardGetAchCmd, id_),
  };
  RewardGetAchCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardGetAchCmd_descriptor_,
      RewardGetAchCmd::default_instance_,
      RewardGetAchCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardGetAchCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardGetAchCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardGetAchCmd));
  AchieveParam_descriptor_ = file->enum_type(0);
  EAchieveType_descriptor_ = file->enum_type(1);
  EAchieveSubType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AchieveCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaxInfo_descriptor_, &MaxInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserResume_descriptor_, &UserResume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchieveQuest_descriptor_, &AchieveQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchieveItem_descriptor_, &AchieveItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchieveSubData_descriptor_, &AchieveSubData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchieveData_descriptor_, &AchieveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryUserResumeAchCmd_descriptor_, &QueryUserResumeAchCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAchieveDataAchCmd_descriptor_, &QueryAchieveDataAchCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewAchieveNtfAchCmd_descriptor_, &NewAchieveNtfAchCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardGetAchCmd_descriptor_, &RewardGetAchCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AchieveCmd_2eproto() {
  delete MaxInfo::default_instance_;
  delete MaxInfo_reflection_;
  delete UserResume::default_instance_;
  delete UserResume_reflection_;
  delete AchieveQuest::default_instance_;
  delete AchieveQuest_reflection_;
  delete AchieveItem::default_instance_;
  delete AchieveItem_reflection_;
  delete AchieveSubData::default_instance_;
  delete AchieveSubData_reflection_;
  delete AchieveData::default_instance_;
  delete AchieveData_reflection_;
  delete QueryUserResumeAchCmd::default_instance_;
  delete QueryUserResumeAchCmd_reflection_;
  delete QueryAchieveDataAchCmd::default_instance_;
  delete QueryAchieveDataAchCmd_reflection_;
  delete NewAchieveNtfAchCmd::default_instance_;
  delete NewAchieveNtfAchCmd_reflection_;
  delete RewardGetAchCmd::default_instance_;
  delete RewardGetAchCmd_reflection_;
}

void protobuf_AddDesc_AchieveCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020AchieveCmd.proto\022\003Cmd\032\nxCmd.proto\";\n\007M"
    "axInfo\022\017\n\004type\030\001 \001(\r:\0010\022\021\n\006charid\030\002 \001(\004:"
    "\0010\022\014\n\004name\030\003 \001(\t\"\355\002\n\nUserResume\022\025\n\ncreat"
    "etime\030\001 \001(\r:\0010\022\024\n\tlogintime\030\002 \001(\r:\0010\022\027\n\014"
    "bepro_1_time\030\003 \001(\r:\0010\022\027\n\014bepro_2_time\030\004 "
    "\001(\r:\0010\022\027\n\014bepro_3_time\030\005 \001(\r:\0010\022\030\n\rwalk_"
    "distance\030\006 \001(\004:\0010\022\020\n\010max_team\030\007 \001(\t\022\020\n\010m"
    "ax_hand\030\010 \001(\t\022\021\n\tmax_wheel\030\t \001(\t\022\020\n\010max_"
    "chat\030\n \001(\t\022\021\n\tmax_teams\030\013 \003(\t\022\021\n\tmax_han"
    "ds\030\014 \003(\t\022\022\n\nmax_wheels\030\r \003(\t\022\021\n\tmax_chat"
    "s\030\016 \003(\t\022\021\n\tmax_music\030\017 \003(\t\022\020\n\010max_save\030\020"
    " \003(\t\022\022\n\nmax_besave\030\021 \003(\t\"K\n\014AchieveQuest"
    "\022\r\n\002id\030\001 \001(\r:\0010\022\014\n\004name\030\002 \001(\t\022\036\n\003pre\030\003 \003"
    "(\0132\021.Cmd.AchieveQuest\"\225\001\n\013AchieveItem\022\r\n"
    "\002id\030\001 \001(\r:\0010\022\022\n\007process\030\002 \001(\r:\0010\022\025\n\nfini"
    "shtime\030\003 \001(\r:\0010\022\016\n\006params\030\004 \003(\004\022!\n\006quest"
    "s\030\006 \003(\0132\021.Cmd.AchieveQuest\022\031\n\nreward_get"
    "\030\005 \001(\010:\005false\"j\n\016AchieveSubData\0227\n\004type\030"
    "\001 \001(\0162\024.Cmd.EAchieveSubType:\023EACHIEVESUB"
    "TYPE_MIN\022\037\n\005items\030\002 \003(\0132\020.Cmd.AchieveIte"
    "m\"d\n\013AchieveData\0221\n\004type\030\001 \001(\0162\021.Cmd.EAc"
    "hieveType:\020EACHIEVETYPE_MIN\022\"\n\005datas\030\002 \003"
    "(\0132\023.Cmd.AchieveSubData\"\257\001\n\025QueryUserRes"
    "umeAchCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SC"
    "ENE_USER_ACHIEVE_PROTOCMD\022\?\n\005param\030\002 \001(\016"
    "2\021.Cmd.AchieveParam:\035ACHIEVEPARAM_QUERY_"
    "USERRESUME\022\035\n\004data\030\003 \001(\0132\017.Cmd.UserResum"
    "e\"\342\001\n\026QueryAchieveDataAchCmd\0226\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\033SCENE_USER_ACHIEVE_PROT"
    "OCMD\022<\n\005param\030\002 \001(\0162\021.Cmd.AchieveParam:\032"
    "ACHIEVEPARAM_QUERY_ACHDATA\0221\n\004type\030\003 \001(\016"
    "2\021.Cmd.EAchieveType:\020EACHIEVETYPE_MIN\022\037\n"
    "\005items\030\004 \003(\0132\020.Cmd.AchieveItem\"\334\001\n\023NewAc"
    "hieveNtfAchCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\033SCENE_USER_ACHIEVE_PROTOCMD\0229\n\005param\030"
    "\002 \001(\0162\021.Cmd.AchieveParam:\027ACHIEVEPARAM_N"
    "EW_ACHNTF\0221\n\004type\030\003 \001(\0162\021.Cmd.EAchieveTy"
    "pe:\020EACHIEVETYPE_MIN\022\037\n\005items\030\004 \003(\0132\020.Cm"
    "d.AchieveItem\"\223\001\n\017RewardGetAchCmd\0226\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\033SCENE_USER_ACHIEVE"
    "_PROTOCMD\0229\n\005param\030\002 \001(\0162\021.Cmd.AchievePa"
    "ram:\027ACHIEVEPARAM_REWARD_GET\022\r\n\002id\030\003 \001(\r"
    ":\0010*\213\001\n\014AchieveParam\022!\n\035ACHIEVEPARAM_QUE"
    "RY_USERRESUME\020\001\022\036\n\032ACHIEVEPARAM_QUERY_AC"
    "HDATA\020\002\022\033\n\027ACHIEVEPARAM_NEW_ACHNTF\020\003\022\033\n\027"
    "ACHIEVEPARAM_REWARD_GET\020\004*\372\001\n\014EAchieveTy"
    "pe\022\024\n\020EACHIEVETYPE_MIN\020\000\022\027\n\021EACHIEVETYPE"
    "_USER\020\340\221C\022\031\n\023EACHIEVETYPE_SOCIAL\020\200\237I\022\034\n\026"
    "EACHIEVETYPE_ADVENTURE\020\240\254O\022\031\n\023EACHIEVETY"
    "PE_BATTLE\020\300\271U\022\030\n\022EACHIEVETYPE_DRAMA\020\220\300X\022"
    "\033\n\025EACHIEVETYPE_ACTIVITY\020\340\306[\022\030\n\022EACHIEVE"
    "TYPE_OTHER\020\200\324a\022\026\n\020EACHIEVETYPE_MAX\020\201\324a*\333"
    "\010\n\017EAchieveSubType\022\027\n\023EACHIEVESUBTYPE_MI"
    "N\020\000\022\035\n\027EACHIEVESUBTYPE_LEVELUP\020\310\231C\022\032\n\024EA"
    "CHIEVESUBTYPE_ATTR\020\260\241C\022 \n\032EACHIEVESUBTYP"
    "E_PROFESSION\020\230\251C\022\034\n\026EACHIEVESUBTYPE_FRIE"
    "ND\020\350\246I\022\034\n\026EACHIEVESUBTYPE_SOCIAL\020\320\256I\022\033\n\025"
    "EACHIEVESUBTYPE_GUILD\020\270\266I\022\031\n\023EACHIEVESUB"
    "TYPE_PET\020\240\276I\022\032\n\024EACHIEVESUBTYPE_FOOD\020\210\306I"
    "\022\033\n\025EACHIEVESUBTYPE_TUTOR\020\360\315I\022\035\n\027EACHIEV"
    "ESUBTYPE_WEDDING\020\330\325I\022\031\n\023EACHIEVESUBTYPE_"
    "MAP\020\210\264O\022\035\n\027EACHIEVESUBTYPE_SCENERY\020\360\273O\022#"
    "\n\035EACHIEVESUBTYPE_MONSTER_PHOTO\020\330\303O\022\031\n\023E"
    "ACHIEVESUBTYPE_NPC\020\300\313O\022\036\n\030EACHIEVESUBTYP"
    "E_PORTRAIT\020\250\323O\022\033\n\025EACHIEVESUBTYPE_TITLE\020"
    "\220\333O\022\"\n\034EACHIEVESUBTYPE_MONSTER_KILL\020\250\301U\022"
    "\032\n\024EACHIEVESUBTYPE_HELP\020\220\311U\022\031\n\023EACHIEVES"
    "UBTYPE_CAT\020\370\320U\022\032\n\024EACHIEVESUBTYPE_DEAD\020\340"
    "\330U\022\031\n\023EACHIEVESUBTYPE_PVP\020\310\340U\022\034\n\026EACHIEV"
    "ESUBTYPE_CCRAST\020\370\307X\022\033\n\025EACHIEVESUBTYPE_Q"
    "UEST\020\340\317X\022\031\n\023EACHIEVESUBTYPE_TOY\020\310\327X\022 \n\032E"
    "ACHIEVESUBTYPE_TOYFACTORY\020\260\337X\022\035\n\027EACHIEV"
    "ESUBTYPE_TIANJIN\020\224\340X\022\032\n\024EACHIEVESUBTYPE_"
    "YUNO\020\370\340X\022\036\n\030EACHIEVESUBTYPE_DEADCITY\020\334\341X"
    "\022!\n\033EACHIEVESUBTYPE_DRAMA_OTHER\020\230\347X\022\032\n\024E"
    "ACHIEVESUBTYPE_BCAT\020\310\316[\022\032\n\024EACHIEVESUBTY"
    "PE_LINK\020\260\326[\022\033\n\025EACHIEVESUBTYPE_EQUIP\020\350\333a"
    "\022\033\n\025EACHIEVESUBTYPE_DAILY\020\320\343a\022\035\n\027EACHIEV"
    "ESUBTYPE_CONSUME\020\270\353a\022\032\n\024EACHIEVESUBTYPE_"
    "FUNC\020\240\363a\022\032\n\023EACHIEVESUBTYPE_MAX\020\341\236\217\002", 3196);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AchieveCmd.proto", &protobuf_RegisterTypes);
  MaxInfo::default_instance_ = new MaxInfo();
  UserResume::default_instance_ = new UserResume();
  AchieveQuest::default_instance_ = new AchieveQuest();
  AchieveItem::default_instance_ = new AchieveItem();
  AchieveSubData::default_instance_ = new AchieveSubData();
  AchieveData::default_instance_ = new AchieveData();
  QueryUserResumeAchCmd::default_instance_ = new QueryUserResumeAchCmd();
  QueryAchieveDataAchCmd::default_instance_ = new QueryAchieveDataAchCmd();
  NewAchieveNtfAchCmd::default_instance_ = new NewAchieveNtfAchCmd();
  RewardGetAchCmd::default_instance_ = new RewardGetAchCmd();
  MaxInfo::default_instance_->InitAsDefaultInstance();
  UserResume::default_instance_->InitAsDefaultInstance();
  AchieveQuest::default_instance_->InitAsDefaultInstance();
  AchieveItem::default_instance_->InitAsDefaultInstance();
  AchieveSubData::default_instance_->InitAsDefaultInstance();
  AchieveData::default_instance_->InitAsDefaultInstance();
  QueryUserResumeAchCmd::default_instance_->InitAsDefaultInstance();
  QueryAchieveDataAchCmd::default_instance_->InitAsDefaultInstance();
  NewAchieveNtfAchCmd::default_instance_->InitAsDefaultInstance();
  RewardGetAchCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AchieveCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AchieveCmd_2eproto {
  StaticDescriptorInitializer_AchieveCmd_2eproto() {
    protobuf_AddDesc_AchieveCmd_2eproto();
  }
} static_descriptor_initializer_AchieveCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* AchieveParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchieveParam_descriptor_;
}
bool AchieveParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAchieveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAchieveType_descriptor_;
}
bool EAchieveType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1100000:
    case 1200000:
    case 1300000:
    case 1400000:
    case 1450000:
    case 1500000:
    case 1600000:
    case 1600001:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAchieveSubType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAchieveSubType_descriptor_;
}
bool EAchieveSubType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1101000:
    case 1102000:
    case 1103000:
    case 1201000:
    case 1202000:
    case 1203000:
    case 1204000:
    case 1205000:
    case 1206000:
    case 1207000:
    case 1301000:
    case 1302000:
    case 1303000:
    case 1304000:
    case 1305000:
    case 1306000:
    case 1401000:
    case 1402000:
    case 1403000:
    case 1404000:
    case 1405000:
    case 1451000:
    case 1452000:
    case 1453000:
    case 1454000:
    case 1454100:
    case 1454200:
    case 1454300:
    case 1455000:
    case 1501000:
    case 1502000:
    case 1601000:
    case 1602000:
    case 1603000:
    case 1604000:
    case 4444001:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MaxInfo::kTypeFieldNumber;
const int MaxInfo::kCharidFieldNumber;
const int MaxInfo::kNameFieldNumber;
#endif  // !_MSC_VER

MaxInfo::MaxInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MaxInfo)
}

void MaxInfo::InitAsDefaultInstance() {
}

MaxInfo::MaxInfo(const MaxInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MaxInfo)
}

void MaxInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaxInfo::~MaxInfo() {
  // @@protoc_insertion_point(destructor:Cmd.MaxInfo)
  SharedDtor();
}

void MaxInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MaxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaxInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxInfo_descriptor_;
}

const MaxInfo& MaxInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchieveCmd_2eproto();
  return *default_instance_;
}

MaxInfo* MaxInfo::default_instance_ = NULL;

MaxInfo* MaxInfo::New() const {
  return new MaxInfo;
}

void MaxInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 0u;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MaxInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MaxInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MaxInfo)
  return false;
#undef DO_
}

void MaxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MaxInfo)
  // optional uint32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 charid = 2 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MaxInfo)
}

::google::protobuf::uint8* MaxInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MaxInfo)
  // optional uint32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 charid = 2 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MaxInfo)
  return target;
}

int MaxInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 charid = 2 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaxInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaxInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaxInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaxInfo::MergeFrom(const MaxInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaxInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxInfo::CopyFrom(const MaxInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxInfo::IsInitialized() const {

  return true;
}

void MaxInfo::Swap(MaxInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaxInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaxInfo_descriptor_;
  metadata.reflection = MaxInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserResume::kCreatetimeFieldNumber;
const int UserResume::kLogintimeFieldNumber;
const int UserResume::kBepro1TimeFieldNumber;
const int UserResume::kBepro2TimeFieldNumber;
const int UserResume::kBepro3TimeFieldNumber;
const int UserResume::kWalkDistanceFieldNumber;
const int UserResume::kMaxTeamFieldNumber;
const int UserResume::kMaxHandFieldNumber;
const int UserResume::kMaxWheelFieldNumber;
const int UserResume::kMaxChatFieldNumber;
const int UserResume::kMaxTeamsFieldNumber;
const int UserResume::kMaxHandsFieldNumber;
const int UserResume::kMaxWheelsFieldNumber;
const int UserResume::kMaxChatsFieldNumber;
const int UserResume::kMaxMusicFieldNumber;
const int UserResume::kMaxSaveFieldNumber;
const int UserResume::kMaxBesaveFieldNumber;
#endif  // !_MSC_VER

UserResume::UserResume()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserResume)
}

void UserResume::InitAsDefaultInstance() {
}

UserResume::UserResume(const UserResume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserResume)
}

void UserResume::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  createtime_ = 0u;
  logintime_ = 0u;
  bepro_1_time_ = 0u;
  bepro_2_time_ = 0u;
  bepro_3_time_ = 0u;
  walk_distance_ = GOOGLE_ULONGLONG(0);
  max_team_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_hand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_wheel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_chat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserResume::~UserResume() {
  // @@protoc_insertion_point(destructor:Cmd.UserResume)
  SharedDtor();
}

void UserResume::SharedDtor() {
  if (max_team_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete max_team_;
  }
  if (max_hand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete max_hand_;
  }
  if (max_wheel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete max_wheel_;
  }
  if (max_chat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete max_chat_;
  }
  if (this != default_instance_) {
  }
}

void UserResume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserResume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserResume_descriptor_;
}

const UserResume& UserResume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchieveCmd_2eproto();
  return *default_instance_;
}

UserResume* UserResume::default_instance_ = NULL;

UserResume* UserResume::New() const {
  return new UserResume;
}

void UserResume::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserResume*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(createtime_, walk_distance_);
    bepro_3_time_ = 0u;
    if (has_max_team()) {
      if (max_team_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        max_team_->clear();
      }
    }
    if (has_max_hand()) {
      if (max_hand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        max_hand_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_max_wheel()) {
      if (max_wheel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        max_wheel_->clear();
      }
    }
    if (has_max_chat()) {
      if (max_chat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        max_chat_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  max_teams_.Clear();
  max_hands_.Clear();
  max_wheels_.Clear();
  max_chats_.Clear();
  max_music_.Clear();
  max_save_.Clear();
  max_besave_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserResume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserResume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 createtime = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_logintime;
        break;
      }

      // optional uint32 logintime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_logintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bepro_1_time;
        break;
      }

      // optional uint32 bepro_1_time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_bepro_1_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bepro_1_time_)));
          set_has_bepro_1_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bepro_2_time;
        break;
      }

      // optional uint32 bepro_2_time = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_bepro_2_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bepro_2_time_)));
          set_has_bepro_2_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bepro_3_time;
        break;
      }

      // optional uint32 bepro_3_time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_bepro_3_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bepro_3_time_)));
          set_has_bepro_3_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_walk_distance;
        break;
      }

      // optional uint64 walk_distance = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_walk_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &walk_distance_)));
          set_has_walk_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_max_team;
        break;
      }

      // optional string max_team = 7;
      case 7: {
        if (tag == 58) {
         parse_max_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_team()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max_team().data(), this->max_team().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "max_team");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_max_hand;
        break;
      }

      // optional string max_hand = 8;
      case 8: {
        if (tag == 66) {
         parse_max_hand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_hand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max_hand().data(), this->max_hand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "max_hand");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_max_wheel;
        break;
      }

      // optional string max_wheel = 9;
      case 9: {
        if (tag == 74) {
         parse_max_wheel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_wheel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max_wheel().data(), this->max_wheel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "max_wheel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_max_chat;
        break;
      }

      // optional string max_chat = 10;
      case 10: {
        if (tag == 82) {
         parse_max_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_chat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max_chat().data(), this->max_chat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "max_chat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_max_teams;
        break;
      }

      // repeated string max_teams = 11;
      case 11: {
        if (tag == 90) {
         parse_max_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_max_teams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max_teams(this->max_teams_size() - 1).data(),
            this->max_teams(this->max_teams_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "max_teams");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_max_teams;
        if (input->ExpectTag(98)) goto parse_max_hands;
        break;
      }

      // repeated string max_hands = 12;
      case 12: {
        if (tag == 98) {
         parse_max_hands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_max_hands()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max_hands(this->max_hands_size() - 1).data(),
            this->max_hands(this->max_hands_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "max_hands");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_max_hands;
        if (input->ExpectTag(106)) goto parse_max_wheels;
        break;
      }

      // repeated string max_wheels = 13;
      case 13: {
        if (tag == 106) {
         parse_max_wheels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_max_wheels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max_wheels(this->max_wheels_size() - 1).data(),
            this->max_wheels(this->max_wheels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "max_wheels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_max_wheels;
        if (input->ExpectTag(114)) goto parse_max_chats;
        break;
      }

      // repeated string max_chats = 14;
      case 14: {
        if (tag == 114) {
         parse_max_chats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_max_chats()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max_chats(this->max_chats_size() - 1).data(),
            this->max_chats(this->max_chats_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "max_chats");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_max_chats;
        if (input->ExpectTag(122)) goto parse_max_music;
        break;
      }

      // repeated string max_music = 15;
      case 15: {
        if (tag == 122) {
         parse_max_music:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_max_music()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max_music(this->max_music_size() - 1).data(),
            this->max_music(this->max_music_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "max_music");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_max_music;
        if (input->ExpectTag(130)) goto parse_max_save;
        break;
      }

      // repeated string max_save = 16;
      case 16: {
        if (tag == 130) {
         parse_max_save:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_max_save()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max_save(this->max_save_size() - 1).data(),
            this->max_save(this->max_save_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "max_save");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_max_save;
        if (input->ExpectTag(138)) goto parse_max_besave;
        break;
      }

      // repeated string max_besave = 17;
      case 17: {
        if (tag == 138) {
         parse_max_besave:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_max_besave()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max_besave(this->max_besave_size() - 1).data(),
            this->max_besave(this->max_besave_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "max_besave");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_max_besave;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserResume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserResume)
  return false;
#undef DO_
}

void UserResume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserResume)
  // optional uint32 createtime = 1 [default = 0];
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->createtime(), output);
  }

  // optional uint32 logintime = 2 [default = 0];
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logintime(), output);
  }

  // optional uint32 bepro_1_time = 3 [default = 0];
  if (has_bepro_1_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bepro_1_time(), output);
  }

  // optional uint32 bepro_2_time = 4 [default = 0];
  if (has_bepro_2_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bepro_2_time(), output);
  }

  // optional uint32 bepro_3_time = 5 [default = 0];
  if (has_bepro_3_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bepro_3_time(), output);
  }

  // optional uint64 walk_distance = 6 [default = 0];
  if (has_walk_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->walk_distance(), output);
  }

  // optional string max_team = 7;
  if (has_max_team()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_team().data(), this->max_team().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_team");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->max_team(), output);
  }

  // optional string max_hand = 8;
  if (has_max_hand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_hand().data(), this->max_hand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_hand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->max_hand(), output);
  }

  // optional string max_wheel = 9;
  if (has_max_wheel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_wheel().data(), this->max_wheel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_wheel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->max_wheel(), output);
  }

  // optional string max_chat = 10;
  if (has_max_chat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_chat().data(), this->max_chat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_chat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->max_chat(), output);
  }

  // repeated string max_teams = 11;
  for (int i = 0; i < this->max_teams_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->max_teams(i).data(), this->max_teams(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "max_teams");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->max_teams(i), output);
  }

  // repeated string max_hands = 12;
  for (int i = 0; i < this->max_hands_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->max_hands(i).data(), this->max_hands(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "max_hands");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->max_hands(i), output);
  }

  // repeated string max_wheels = 13;
  for (int i = 0; i < this->max_wheels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->max_wheels(i).data(), this->max_wheels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "max_wheels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->max_wheels(i), output);
  }

  // repeated string max_chats = 14;
  for (int i = 0; i < this->max_chats_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->max_chats(i).data(), this->max_chats(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "max_chats");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->max_chats(i), output);
  }

  // repeated string max_music = 15;
  for (int i = 0; i < this->max_music_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->max_music(i).data(), this->max_music(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "max_music");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->max_music(i), output);
  }

  // repeated string max_save = 16;
  for (int i = 0; i < this->max_save_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->max_save(i).data(), this->max_save(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "max_save");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->max_save(i), output);
  }

  // repeated string max_besave = 17;
  for (int i = 0; i < this->max_besave_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->max_besave(i).data(), this->max_besave(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "max_besave");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->max_besave(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserResume)
}

::google::protobuf::uint8* UserResume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserResume)
  // optional uint32 createtime = 1 [default = 0];
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->createtime(), target);
  }

  // optional uint32 logintime = 2 [default = 0];
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logintime(), target);
  }

  // optional uint32 bepro_1_time = 3 [default = 0];
  if (has_bepro_1_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bepro_1_time(), target);
  }

  // optional uint32 bepro_2_time = 4 [default = 0];
  if (has_bepro_2_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bepro_2_time(), target);
  }

  // optional uint32 bepro_3_time = 5 [default = 0];
  if (has_bepro_3_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bepro_3_time(), target);
  }

  // optional uint64 walk_distance = 6 [default = 0];
  if (has_walk_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->walk_distance(), target);
  }

  // optional string max_team = 7;
  if (has_max_team()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_team().data(), this->max_team().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_team");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->max_team(), target);
  }

  // optional string max_hand = 8;
  if (has_max_hand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_hand().data(), this->max_hand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_hand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->max_hand(), target);
  }

  // optional string max_wheel = 9;
  if (has_max_wheel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_wheel().data(), this->max_wheel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_wheel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->max_wheel(), target);
  }

  // optional string max_chat = 10;
  if (has_max_chat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_chat().data(), this->max_chat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_chat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->max_chat(), target);
  }

  // repeated string max_teams = 11;
  for (int i = 0; i < this->max_teams_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_teams(i).data(), this->max_teams(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_teams");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->max_teams(i), target);
  }

  // repeated string max_hands = 12;
  for (int i = 0; i < this->max_hands_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_hands(i).data(), this->max_hands(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_hands");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->max_hands(i), target);
  }

  // repeated string max_wheels = 13;
  for (int i = 0; i < this->max_wheels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_wheels(i).data(), this->max_wheels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_wheels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->max_wheels(i), target);
  }

  // repeated string max_chats = 14;
  for (int i = 0; i < this->max_chats_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_chats(i).data(), this->max_chats(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_chats");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->max_chats(i), target);
  }

  // repeated string max_music = 15;
  for (int i = 0; i < this->max_music_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_music(i).data(), this->max_music(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_music");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->max_music(i), target);
  }

  // repeated string max_save = 16;
  for (int i = 0; i < this->max_save_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_save(i).data(), this->max_save(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_save");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->max_save(i), target);
  }

  // repeated string max_besave = 17;
  for (int i = 0; i < this->max_besave_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_besave(i).data(), this->max_besave(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_besave");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->max_besave(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserResume)
  return target;
}

int UserResume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 createtime = 1 [default = 0];
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // optional uint32 logintime = 2 [default = 0];
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logintime());
    }

    // optional uint32 bepro_1_time = 3 [default = 0];
    if (has_bepro_1_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bepro_1_time());
    }

    // optional uint32 bepro_2_time = 4 [default = 0];
    if (has_bepro_2_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bepro_2_time());
    }

    // optional uint32 bepro_3_time = 5 [default = 0];
    if (has_bepro_3_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bepro_3_time());
    }

    // optional uint64 walk_distance = 6 [default = 0];
    if (has_walk_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->walk_distance());
    }

    // optional string max_team = 7;
    if (has_max_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->max_team());
    }

    // optional string max_hand = 8;
    if (has_max_hand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->max_hand());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string max_wheel = 9;
    if (has_max_wheel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->max_wheel());
    }

    // optional string max_chat = 10;
    if (has_max_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->max_chat());
    }

  }
  // repeated string max_teams = 11;
  total_size += 1 * this->max_teams_size();
  for (int i = 0; i < this->max_teams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->max_teams(i));
  }

  // repeated string max_hands = 12;
  total_size += 1 * this->max_hands_size();
  for (int i = 0; i < this->max_hands_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->max_hands(i));
  }

  // repeated string max_wheels = 13;
  total_size += 1 * this->max_wheels_size();
  for (int i = 0; i < this->max_wheels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->max_wheels(i));
  }

  // repeated string max_chats = 14;
  total_size += 1 * this->max_chats_size();
  for (int i = 0; i < this->max_chats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->max_chats(i));
  }

  // repeated string max_music = 15;
  total_size += 1 * this->max_music_size();
  for (int i = 0; i < this->max_music_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->max_music(i));
  }

  // repeated string max_save = 16;
  total_size += 2 * this->max_save_size();
  for (int i = 0; i < this->max_save_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->max_save(i));
  }

  // repeated string max_besave = 17;
  total_size += 2 * this->max_besave_size();
  for (int i = 0; i < this->max_besave_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->max_besave(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserResume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserResume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserResume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserResume::MergeFrom(const UserResume& from) {
  GOOGLE_CHECK_NE(&from, this);
  max_teams_.MergeFrom(from.max_teams_);
  max_hands_.MergeFrom(from.max_hands_);
  max_wheels_.MergeFrom(from.max_wheels_);
  max_chats_.MergeFrom(from.max_chats_);
  max_music_.MergeFrom(from.max_music_);
  max_save_.MergeFrom(from.max_save_);
  max_besave_.MergeFrom(from.max_besave_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_bepro_1_time()) {
      set_bepro_1_time(from.bepro_1_time());
    }
    if (from.has_bepro_2_time()) {
      set_bepro_2_time(from.bepro_2_time());
    }
    if (from.has_bepro_3_time()) {
      set_bepro_3_time(from.bepro_3_time());
    }
    if (from.has_walk_distance()) {
      set_walk_distance(from.walk_distance());
    }
    if (from.has_max_team()) {
      set_max_team(from.max_team());
    }
    if (from.has_max_hand()) {
      set_max_hand(from.max_hand());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_wheel()) {
      set_max_wheel(from.max_wheel());
    }
    if (from.has_max_chat()) {
      set_max_chat(from.max_chat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserResume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserResume::CopyFrom(const UserResume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserResume::IsInitialized() const {

  return true;
}

void UserResume::Swap(UserResume* other) {
  if (other != this) {
    std::swap(createtime_, other->createtime_);
    std::swap(logintime_, other->logintime_);
    std::swap(bepro_1_time_, other->bepro_1_time_);
    std::swap(bepro_2_time_, other->bepro_2_time_);
    std::swap(bepro_3_time_, other->bepro_3_time_);
    std::swap(walk_distance_, other->walk_distance_);
    std::swap(max_team_, other->max_team_);
    std::swap(max_hand_, other->max_hand_);
    std::swap(max_wheel_, other->max_wheel_);
    std::swap(max_chat_, other->max_chat_);
    max_teams_.Swap(&other->max_teams_);
    max_hands_.Swap(&other->max_hands_);
    max_wheels_.Swap(&other->max_wheels_);
    max_chats_.Swap(&other->max_chats_);
    max_music_.Swap(&other->max_music_);
    max_save_.Swap(&other->max_save_);
    max_besave_.Swap(&other->max_besave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserResume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserResume_descriptor_;
  metadata.reflection = UserResume_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchieveQuest::kIdFieldNumber;
const int AchieveQuest::kNameFieldNumber;
const int AchieveQuest::kPreFieldNumber;
#endif  // !_MSC_VER

AchieveQuest::AchieveQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AchieveQuest)
}

void AchieveQuest::InitAsDefaultInstance() {
}

AchieveQuest::AchieveQuest(const AchieveQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AchieveQuest)
}

void AchieveQuest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchieveQuest::~AchieveQuest() {
  // @@protoc_insertion_point(destructor:Cmd.AchieveQuest)
  SharedDtor();
}

void AchieveQuest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AchieveQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchieveQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchieveQuest_descriptor_;
}

const AchieveQuest& AchieveQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchieveCmd_2eproto();
  return *default_instance_;
}

AchieveQuest* AchieveQuest::default_instance_ = NULL;

AchieveQuest* AchieveQuest::New() const {
  return new AchieveQuest;
}

void AchieveQuest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  pre_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchieveQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AchieveQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pre;
        break;
      }

      // repeated .Cmd.AchieveQuest pre = 3;
      case 3: {
        if (tag == 26) {
         parse_pre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pre()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pre;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AchieveQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AchieveQuest)
  return false;
#undef DO_
}

void AchieveQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AchieveQuest)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .Cmd.AchieveQuest pre = 3;
  for (int i = 0; i < this->pre_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pre(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AchieveQuest)
}

::google::protobuf::uint8* AchieveQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AchieveQuest)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .Cmd.AchieveQuest pre = 3;
  for (int i = 0; i < this->pre_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pre(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AchieveQuest)
  return target;
}

int AchieveQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Cmd.AchieveQuest pre = 3;
  total_size += 1 * this->pre_size();
  for (int i = 0; i < this->pre_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pre(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchieveQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchieveQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchieveQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchieveQuest::MergeFrom(const AchieveQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  pre_.MergeFrom(from.pre_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchieveQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchieveQuest::CopyFrom(const AchieveQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchieveQuest::IsInitialized() const {

  return true;
}

void AchieveQuest::Swap(AchieveQuest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    pre_.Swap(&other->pre_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchieveQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchieveQuest_descriptor_;
  metadata.reflection = AchieveQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchieveItem::kIdFieldNumber;
const int AchieveItem::kProcessFieldNumber;
const int AchieveItem::kFinishtimeFieldNumber;
const int AchieveItem::kParamsFieldNumber;
const int AchieveItem::kQuestsFieldNumber;
const int AchieveItem::kRewardGetFieldNumber;
#endif  // !_MSC_VER

AchieveItem::AchieveItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AchieveItem)
}

void AchieveItem::InitAsDefaultInstance() {
}

AchieveItem::AchieveItem(const AchieveItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AchieveItem)
}

void AchieveItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  process_ = 0u;
  finishtime_ = 0u;
  reward_get_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchieveItem::~AchieveItem() {
  // @@protoc_insertion_point(destructor:Cmd.AchieveItem)
  SharedDtor();
}

void AchieveItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchieveItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchieveItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchieveItem_descriptor_;
}

const AchieveItem& AchieveItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchieveCmd_2eproto();
  return *default_instance_;
}

AchieveItem* AchieveItem::default_instance_ = NULL;

AchieveItem* AchieveItem::New() const {
  return new AchieveItem;
}

void AchieveItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AchieveItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, process_);
  ZR_(finishtime_, reward_get_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  params_.Clear();
  quests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchieveItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AchieveItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_process;
        break;
      }

      // optional uint32 process = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_finishtime;
        break;
      }

      // optional uint32 finishtime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_finishtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_params;
        break;
      }

      // repeated uint64 params = 4;
      case 4: {
        if (tag == 32) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_params())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_params())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_params;
        if (input->ExpectTag(40)) goto parse_reward_get;
        break;
      }

      // optional bool reward_get = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_reward_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reward_get_)));
          set_has_reward_get();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_quests;
        break;
      }

      // repeated .Cmd.AchieveQuest quests = 6;
      case 6: {
        if (tag == 50) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_quests;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AchieveItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AchieveItem)
  return false;
#undef DO_
}

void AchieveItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AchieveItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 process = 2 [default = 0];
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->process(), output);
  }

  // optional uint32 finishtime = 3 [default = 0];
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finishtime(), output);
  }

  // repeated uint64 params = 4;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->params(i), output);
  }

  // optional bool reward_get = 5 [default = false];
  if (has_reward_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->reward_get(), output);
  }

  // repeated .Cmd.AchieveQuest quests = 6;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->quests(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AchieveItem)
}

::google::protobuf::uint8* AchieveItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AchieveItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 process = 2 [default = 0];
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->process(), target);
  }

  // optional uint32 finishtime = 3 [default = 0];
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finishtime(), target);
  }

  // repeated uint64 params = 4;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->params(i), target);
  }

  // optional bool reward_get = 5 [default = false];
  if (has_reward_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->reward_get(), target);
  }

  // repeated .Cmd.AchieveQuest quests = 6;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->quests(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AchieveItem)
  return target;
}

int AchieveItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 process = 2 [default = 0];
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process());
    }

    // optional uint32 finishtime = 3 [default = 0];
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishtime());
    }

    // optional bool reward_get = 5 [default = false];
    if (has_reward_get()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 params = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }

  // repeated .Cmd.AchieveQuest quests = 6;
  total_size += 1 * this->quests_size();
  for (int i = 0; i < this->quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchieveItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchieveItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchieveItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchieveItem::MergeFrom(const AchieveItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  quests_.MergeFrom(from.quests_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_reward_get()) {
      set_reward_get(from.reward_get());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchieveItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchieveItem::CopyFrom(const AchieveItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchieveItem::IsInitialized() const {

  return true;
}

void AchieveItem::Swap(AchieveItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(process_, other->process_);
    std::swap(finishtime_, other->finishtime_);
    params_.Swap(&other->params_);
    quests_.Swap(&other->quests_);
    std::swap(reward_get_, other->reward_get_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchieveItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchieveItem_descriptor_;
  metadata.reflection = AchieveItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchieveSubData::kTypeFieldNumber;
const int AchieveSubData::kItemsFieldNumber;
#endif  // !_MSC_VER

AchieveSubData::AchieveSubData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AchieveSubData)
}

void AchieveSubData::InitAsDefaultInstance() {
}

AchieveSubData::AchieveSubData(const AchieveSubData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AchieveSubData)
}

void AchieveSubData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchieveSubData::~AchieveSubData() {
  // @@protoc_insertion_point(destructor:Cmd.AchieveSubData)
  SharedDtor();
}

void AchieveSubData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchieveSubData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchieveSubData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchieveSubData_descriptor_;
}

const AchieveSubData& AchieveSubData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchieveCmd_2eproto();
  return *default_instance_;
}

AchieveSubData* AchieveSubData::default_instance_ = NULL;

AchieveSubData* AchieveSubData::New() const {
  return new AchieveSubData;
}

void AchieveSubData::Clear() {
  type_ = 0;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchieveSubData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AchieveSubData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EAchieveSubType type = 1 [default = EACHIEVESUBTYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAchieveSubType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EAchieveSubType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .Cmd.AchieveItem items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AchieveSubData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AchieveSubData)
  return false;
#undef DO_
}

void AchieveSubData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AchieveSubData)
  // optional .Cmd.EAchieveSubType type = 1 [default = EACHIEVESUBTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .Cmd.AchieveItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AchieveSubData)
}

::google::protobuf::uint8* AchieveSubData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AchieveSubData)
  // optional .Cmd.EAchieveSubType type = 1 [default = EACHIEVESUBTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .Cmd.AchieveItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AchieveSubData)
  return target;
}

int AchieveSubData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EAchieveSubType type = 1 [default = EACHIEVESUBTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.AchieveItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchieveSubData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchieveSubData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchieveSubData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchieveSubData::MergeFrom(const AchieveSubData& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchieveSubData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchieveSubData::CopyFrom(const AchieveSubData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchieveSubData::IsInitialized() const {

  return true;
}

void AchieveSubData::Swap(AchieveSubData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchieveSubData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchieveSubData_descriptor_;
  metadata.reflection = AchieveSubData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchieveData::kTypeFieldNumber;
const int AchieveData::kDatasFieldNumber;
#endif  // !_MSC_VER

AchieveData::AchieveData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AchieveData)
}

void AchieveData::InitAsDefaultInstance() {
}

AchieveData::AchieveData(const AchieveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AchieveData)
}

void AchieveData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchieveData::~AchieveData() {
  // @@protoc_insertion_point(destructor:Cmd.AchieveData)
  SharedDtor();
}

void AchieveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchieveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchieveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchieveData_descriptor_;
}

const AchieveData& AchieveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchieveCmd_2eproto();
  return *default_instance_;
}

AchieveData* AchieveData::default_instance_ = NULL;

AchieveData* AchieveData::New() const {
  return new AchieveData;
}

void AchieveData::Clear() {
  type_ = 0;
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchieveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AchieveData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EAchieveType type = 1 [default = EACHIEVETYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAchieveType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EAchieveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }

      // repeated .Cmd.AchieveSubData datas = 2;
      case 2: {
        if (tag == 18) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AchieveData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AchieveData)
  return false;
#undef DO_
}

void AchieveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AchieveData)
  // optional .Cmd.EAchieveType type = 1 [default = EACHIEVETYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .Cmd.AchieveSubData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AchieveData)
}

::google::protobuf::uint8* AchieveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AchieveData)
  // optional .Cmd.EAchieveType type = 1 [default = EACHIEVETYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .Cmd.AchieveSubData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AchieveData)
  return target;
}

int AchieveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EAchieveType type = 1 [default = EACHIEVETYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.AchieveSubData datas = 2;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchieveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchieveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchieveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchieveData::MergeFrom(const AchieveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchieveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchieveData::CopyFrom(const AchieveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchieveData::IsInitialized() const {

  return true;
}

void AchieveData::Swap(AchieveData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchieveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchieveData_descriptor_;
  metadata.reflection = AchieveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryUserResumeAchCmd::kCmdFieldNumber;
const int QueryUserResumeAchCmd::kParamFieldNumber;
const int QueryUserResumeAchCmd::kDataFieldNumber;
#endif  // !_MSC_VER

QueryUserResumeAchCmd::QueryUserResumeAchCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryUserResumeAchCmd)
}

void QueryUserResumeAchCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::UserResume*>(&::Cmd::UserResume::default_instance());
}

QueryUserResumeAchCmd::QueryUserResumeAchCmd(const QueryUserResumeAchCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryUserResumeAchCmd)
}

void QueryUserResumeAchCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 17;
  param_ = 1;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUserResumeAchCmd::~QueryUserResumeAchCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryUserResumeAchCmd)
  SharedDtor();
}

void QueryUserResumeAchCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void QueryUserResumeAchCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserResumeAchCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserResumeAchCmd_descriptor_;
}

const QueryUserResumeAchCmd& QueryUserResumeAchCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchieveCmd_2eproto();
  return *default_instance_;
}

QueryUserResumeAchCmd* QueryUserResumeAchCmd::default_instance_ = NULL;

QueryUserResumeAchCmd* QueryUserResumeAchCmd::New() const {
  return new QueryUserResumeAchCmd;
}

void QueryUserResumeAchCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 17;
    param_ = 1;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::UserResume::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryUserResumeAchCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryUserResumeAchCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_QUERY_USERRESUME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AchieveParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AchieveParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.UserResume data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryUserResumeAchCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryUserResumeAchCmd)
  return false;
#undef DO_
}

void QueryUserResumeAchCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryUserResumeAchCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_QUERY_USERRESUME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.UserResume data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryUserResumeAchCmd)
}

::google::protobuf::uint8* QueryUserResumeAchCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryUserResumeAchCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_QUERY_USERRESUME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.UserResume data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryUserResumeAchCmd)
  return target;
}

int QueryUserResumeAchCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_QUERY_USERRESUME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.UserResume data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserResumeAchCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryUserResumeAchCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryUserResumeAchCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryUserResumeAchCmd::MergeFrom(const QueryUserResumeAchCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::UserResume::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryUserResumeAchCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserResumeAchCmd::CopyFrom(const QueryUserResumeAchCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserResumeAchCmd::IsInitialized() const {

  return true;
}

void QueryUserResumeAchCmd::Swap(QueryUserResumeAchCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryUserResumeAchCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserResumeAchCmd_descriptor_;
  metadata.reflection = QueryUserResumeAchCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryAchieveDataAchCmd::kCmdFieldNumber;
const int QueryAchieveDataAchCmd::kParamFieldNumber;
const int QueryAchieveDataAchCmd::kTypeFieldNumber;
const int QueryAchieveDataAchCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

QueryAchieveDataAchCmd::QueryAchieveDataAchCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryAchieveDataAchCmd)
}

void QueryAchieveDataAchCmd::InitAsDefaultInstance() {
}

QueryAchieveDataAchCmd::QueryAchieveDataAchCmd(const QueryAchieveDataAchCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryAchieveDataAchCmd)
}

void QueryAchieveDataAchCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 17;
  param_ = 2;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAchieveDataAchCmd::~QueryAchieveDataAchCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryAchieveDataAchCmd)
  SharedDtor();
}

void QueryAchieveDataAchCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryAchieveDataAchCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAchieveDataAchCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAchieveDataAchCmd_descriptor_;
}

const QueryAchieveDataAchCmd& QueryAchieveDataAchCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchieveCmd_2eproto();
  return *default_instance_;
}

QueryAchieveDataAchCmd* QueryAchieveDataAchCmd::default_instance_ = NULL;

QueryAchieveDataAchCmd* QueryAchieveDataAchCmd::New() const {
  return new QueryAchieveDataAchCmd;
}

void QueryAchieveDataAchCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 17;
    param_ = 2;
    type_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAchieveDataAchCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryAchieveDataAchCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_QUERY_ACHDATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AchieveParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AchieveParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EAchieveType type = 3 [default = EACHIEVETYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAchieveType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EAchieveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .Cmd.AchieveItem items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryAchieveDataAchCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryAchieveDataAchCmd)
  return false;
#undef DO_
}

void QueryAchieveDataAchCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryAchieveDataAchCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_QUERY_ACHDATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EAchieveType type = 3 [default = EACHIEVETYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .Cmd.AchieveItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryAchieveDataAchCmd)
}

::google::protobuf::uint8* QueryAchieveDataAchCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryAchieveDataAchCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_QUERY_ACHDATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EAchieveType type = 3 [default = EACHIEVETYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .Cmd.AchieveItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryAchieveDataAchCmd)
  return target;
}

int QueryAchieveDataAchCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_QUERY_ACHDATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EAchieveType type = 3 [default = EACHIEVETYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.AchieveItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAchieveDataAchCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAchieveDataAchCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAchieveDataAchCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAchieveDataAchCmd::MergeFrom(const QueryAchieveDataAchCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAchieveDataAchCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAchieveDataAchCmd::CopyFrom(const QueryAchieveDataAchCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAchieveDataAchCmd::IsInitialized() const {

  return true;
}

void QueryAchieveDataAchCmd::Swap(QueryAchieveDataAchCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAchieveDataAchCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAchieveDataAchCmd_descriptor_;
  metadata.reflection = QueryAchieveDataAchCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewAchieveNtfAchCmd::kCmdFieldNumber;
const int NewAchieveNtfAchCmd::kParamFieldNumber;
const int NewAchieveNtfAchCmd::kTypeFieldNumber;
const int NewAchieveNtfAchCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

NewAchieveNtfAchCmd::NewAchieveNtfAchCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NewAchieveNtfAchCmd)
}

void NewAchieveNtfAchCmd::InitAsDefaultInstance() {
}

NewAchieveNtfAchCmd::NewAchieveNtfAchCmd(const NewAchieveNtfAchCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NewAchieveNtfAchCmd)
}

void NewAchieveNtfAchCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 17;
  param_ = 3;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewAchieveNtfAchCmd::~NewAchieveNtfAchCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NewAchieveNtfAchCmd)
  SharedDtor();
}

void NewAchieveNtfAchCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewAchieveNtfAchCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewAchieveNtfAchCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewAchieveNtfAchCmd_descriptor_;
}

const NewAchieveNtfAchCmd& NewAchieveNtfAchCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchieveCmd_2eproto();
  return *default_instance_;
}

NewAchieveNtfAchCmd* NewAchieveNtfAchCmd::default_instance_ = NULL;

NewAchieveNtfAchCmd* NewAchieveNtfAchCmd::New() const {
  return new NewAchieveNtfAchCmd;
}

void NewAchieveNtfAchCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 17;
    param_ = 3;
    type_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewAchieveNtfAchCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NewAchieveNtfAchCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_NEW_ACHNTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AchieveParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AchieveParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EAchieveType type = 3 [default = EACHIEVETYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAchieveType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EAchieveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .Cmd.AchieveItem items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NewAchieveNtfAchCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NewAchieveNtfAchCmd)
  return false;
#undef DO_
}

void NewAchieveNtfAchCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NewAchieveNtfAchCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_NEW_ACHNTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EAchieveType type = 3 [default = EACHIEVETYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .Cmd.AchieveItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NewAchieveNtfAchCmd)
}

::google::protobuf::uint8* NewAchieveNtfAchCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NewAchieveNtfAchCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_NEW_ACHNTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EAchieveType type = 3 [default = EACHIEVETYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .Cmd.AchieveItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NewAchieveNtfAchCmd)
  return target;
}

int NewAchieveNtfAchCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_NEW_ACHNTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EAchieveType type = 3 [default = EACHIEVETYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.AchieveItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewAchieveNtfAchCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewAchieveNtfAchCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewAchieveNtfAchCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewAchieveNtfAchCmd::MergeFrom(const NewAchieveNtfAchCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewAchieveNtfAchCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewAchieveNtfAchCmd::CopyFrom(const NewAchieveNtfAchCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewAchieveNtfAchCmd::IsInitialized() const {

  return true;
}

void NewAchieveNtfAchCmd::Swap(NewAchieveNtfAchCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewAchieveNtfAchCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewAchieveNtfAchCmd_descriptor_;
  metadata.reflection = NewAchieveNtfAchCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardGetAchCmd::kCmdFieldNumber;
const int RewardGetAchCmd::kParamFieldNumber;
const int RewardGetAchCmd::kIdFieldNumber;
#endif  // !_MSC_VER

RewardGetAchCmd::RewardGetAchCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RewardGetAchCmd)
}

void RewardGetAchCmd::InitAsDefaultInstance() {
}

RewardGetAchCmd::RewardGetAchCmd(const RewardGetAchCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RewardGetAchCmd)
}

void RewardGetAchCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 17;
  param_ = 4;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardGetAchCmd::~RewardGetAchCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RewardGetAchCmd)
  SharedDtor();
}

void RewardGetAchCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardGetAchCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardGetAchCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardGetAchCmd_descriptor_;
}

const RewardGetAchCmd& RewardGetAchCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchieveCmd_2eproto();
  return *default_instance_;
}

RewardGetAchCmd* RewardGetAchCmd::default_instance_ = NULL;

RewardGetAchCmd* RewardGetAchCmd::New() const {
  return new RewardGetAchCmd;
}

void RewardGetAchCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 17;
    param_ = 4;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardGetAchCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RewardGetAchCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_REWARD_GET];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AchieveParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AchieveParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RewardGetAchCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RewardGetAchCmd)
  return false;
#undef DO_
}

void RewardGetAchCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RewardGetAchCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_REWARD_GET];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RewardGetAchCmd)
}

::google::protobuf::uint8* RewardGetAchCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RewardGetAchCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_REWARD_GET];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RewardGetAchCmd)
  return target;
}

int RewardGetAchCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_REWARD_GET];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardGetAchCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardGetAchCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardGetAchCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardGetAchCmd::MergeFrom(const RewardGetAchCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardGetAchCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardGetAchCmd::CopyFrom(const RewardGetAchCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardGetAchCmd::IsInitialized() const {

  return true;
}

void RewardGetAchCmd::Swap(RewardGetAchCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardGetAchCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardGetAchCmd_descriptor_;
  metadata.reflection = RewardGetAchCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
