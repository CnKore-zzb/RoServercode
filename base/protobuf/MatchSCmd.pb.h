// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatchSCmd.proto

#ifndef PROTOBUF_MatchSCmd_2eproto__INCLUDED
#define PROTOBUF_MatchSCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "MatchCCmd.pb.h"
#include "SceneMap.pb.h"
#include "SceneUser2.pb.h"
#include "ProtoCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MatchSCmd_2eproto();
void protobuf_AssignDesc_MatchSCmd_2eproto();
void protobuf_ShutdownFile_MatchSCmd_2eproto();

class SessionForwardCCmdMatch;
class SessionForwardSCmdMatch;
class SessionForwardMatchScene;
class SessionForwardMatchTeam;
class SessionForwardTeamMatch;
class RegPvpZoneMatch;
class EnterPvpMapSCmdMatch;
class LeavePvpMap;
class NtfJoinRoom;
class NtfLeaveRoom;
class CreateTeamMatchSCmd;
class PvpTeamMemberUpdateSCmd;
class PvpMemberDataUpdateSCmd;
class ApplyTeamMatchSCmd;
class SyncTeamInfoMatchSCmd;
class SyncRaidSceneMatchSCmd;
class SuperGvgRoomData;
class TeamPwsUserCurScore;
class TeamPwsRoomData;
class SyncRoomSceneMatchSCmd;
class KickTeamMatchSCmd;
class KickUserFromPvpMatchSCmd;
class ResetPvpMatchSCmd;
class SwitchPvpMathcSCmd;
class ActivityMatchSCmd;
class CheckCanBuyMatchSCmd;
class AddBuyCntMatchSCmd;
class QuerySoldCntMatchSCmd;
class JoinSuperGvgMatchSCmd;
class SuperGvgRetMatchSCmd;
class ClearMvpCDMatchSCmd;
class TutorOptMatchSCmd;
class TutorBlackUpdateMatchSCmd;
class UserBoothReqMatchSCmd;
class UserBoothNTFMatchSCmd;
class JoinTeamPwsMatchSCmd;
class ExitTeamPwsMatchSCmd;
class SceneGMTestMatchSCmd;
class MatchScoreData;
class UpdateScoreMatchSCmd;
class SyncUserScoreMatchSCmd;
class UserLeaveRaidMatchSCmd;
class ConfirmTeamMatchSCmd;

enum MatchSParam {
  MATCHSPARAM_SESSION_FORWARD_CCMD_MATCH = 1,
  MATCHSPARAM_SESSION_FORWARD_SCMD_MATCH = 2,
  MATCHSPARAM_SESSION_FORWARD_MATCH_SCENE = 3,
  MATCHSPARAM_SESSION_FORWARD_MATCH_TEAM = 4,
  MATCHSPARAM_SESSION_FORWARD_TEAM_MATCH = 5,
  MATCHSPARAM_REG_PVP_ZONE = 13,
  MATCHSPARAM_ENTER_PVP_MAP = 14,
  MATCHSPARAM_LOAD_LUA = 15,
  MATCHSPARAM_LEAVE_PVP_MAP = 16,
  MATCHSPARAM_NTF_JOIN_ROOM = 17,
  MATCHSPARAM_NTF_LEAVE_ROOM = 18,
  MATCHSPARAM_CREATE_TEAM = 19,
  MATCHSPARAM_PVP_MEMBERUPDATE = 20,
  MATCHSPARAM_PVP_MEMBERDATAUPDATE = 21,
  MATCHSPARAM_APPLY_TEAM = 22,
  MATCHSPARAM_SYNC_TEAM_INFO = 23,
  MATCHSPARAM_SYNC_RAIDSCENE = 24,
  MATCHSPARAM_KICK_TEAM = 25,
  MATCHSPARAM_KICK_USER = 26,
  MATCHSPARAM_RESET_PVP = 27,
  MATCHSPARAM_SWITCH_PVP = 28,
  MATCHSPARAM_POLLY_ACTIVITY = 29,
  MATCHSPARAM_CHECK_CAN_BUY = 30,
  MATCHSPARAM_ADD_BUY_CNT = 31,
  MATCHSPARAM_QUERY_SOLD_CNT = 32,
  MATCHSPARAM_SYNC_ROOMINFO = 33,
  MATCHSPARAM_SUPERGVG_JOIN = 34,
  MATCHSPARAM_SUPERGVG_RET = 35,
  MATCHSPARAM_CLEAR_MVPCD = 36,
  MATCHSPARAM_TUTOR_OPT = 37,
  MATCHSPARAM_TUTOR_BLACK_UPDATE = 40,
  MATCHSPARAM_USER_BOOTH_REQ = 38,
  MATCHSPARAM_USER_BOOTH_NTF = 39,
  MATCHSPARAM_JOIN_TEAMPWS = 41,
  MATCHSPARAM_LEAVE_TEAMPWS = 42,
  MATCHSPARAM_SCENE_GM_TEST = 43,
  MATCHSPARAM_UPDATE_SCORE = 44,
  MATCHSPARAM_SYNC_SCORE = 45,
  MATCHSPARAM_USER_FORCE_LEAVE = 46,
  MATCHSPARAM_CONFIRM_TEAMMATCH = 47
};
bool MatchSParam_IsValid(int value);
const MatchSParam MatchSParam_MIN = MATCHSPARAM_SESSION_FORWARD_CCMD_MATCH;
const MatchSParam MatchSParam_MAX = MATCHSPARAM_CONFIRM_TEAMMATCH;
const int MatchSParam_ARRAYSIZE = MatchSParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatchSParam_descriptor();
inline const ::std::string& MatchSParam_Name(MatchSParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchSParam_descriptor(), value);
}
inline bool MatchSParam_Parse(
    const ::std::string& name, MatchSParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchSParam>(
    MatchSParam_descriptor(), name, value);
}
enum ETutorOpt {
  ETUTOROPT_APPLY = 1,
  ETUTOROPT_AGREE = 2
};
bool ETutorOpt_IsValid(int value);
const ETutorOpt ETutorOpt_MIN = ETUTOROPT_APPLY;
const ETutorOpt ETutorOpt_MAX = ETUTOROPT_AGREE;
const int ETutorOpt_ARRAYSIZE = ETutorOpt_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETutorOpt_descriptor();
inline const ::std::string& ETutorOpt_Name(ETutorOpt value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETutorOpt_descriptor(), value);
}
inline bool ETutorOpt_Parse(
    const ::std::string& name, ETutorOpt* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETutorOpt>(
    ETutorOpt_descriptor(), name, value);
}
enum ESceneGMMatchType {
  EMATCHGM_JOINTEAMPWS = 1
};
bool ESceneGMMatchType_IsValid(int value);
const ESceneGMMatchType ESceneGMMatchType_MIN = EMATCHGM_JOINTEAMPWS;
const ESceneGMMatchType ESceneGMMatchType_MAX = EMATCHGM_JOINTEAMPWS;
const int ESceneGMMatchType_ARRAYSIZE = ESceneGMMatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESceneGMMatchType_descriptor();
inline const ::std::string& ESceneGMMatchType_Name(ESceneGMMatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESceneGMMatchType_descriptor(), value);
}
inline bool ESceneGMMatchType_Parse(
    const ::std::string& name, ESceneGMMatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESceneGMMatchType>(
    ESceneGMMatchType_descriptor(), name, value);
}
// ===================================================================

class SessionForwardCCmdMatch : public ::google::protobuf::Message {
 public:
  SessionForwardCCmdMatch();
  virtual ~SessionForwardCCmdMatch();

  SessionForwardCCmdMatch(const SessionForwardCCmdMatch& from);

  inline SessionForwardCCmdMatch& operator=(const SessionForwardCCmdMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionForwardCCmdMatch& default_instance();

  void Swap(SessionForwardCCmdMatch* other);

  // implements Message ----------------------------------------------

  SessionForwardCCmdMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionForwardCCmdMatch& from);
  void MergeFrom(const SessionForwardCCmdMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_CCMD_MATCH];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 6;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 6;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SessionForwardCCmdMatch)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* data_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 len_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static SessionForwardCCmdMatch* default_instance_;
};
// -------------------------------------------------------------------

class SessionForwardSCmdMatch : public ::google::protobuf::Message {
 public:
  SessionForwardSCmdMatch();
  virtual ~SessionForwardSCmdMatch();

  SessionForwardSCmdMatch(const SessionForwardSCmdMatch& from);

  inline SessionForwardSCmdMatch& operator=(const SessionForwardSCmdMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionForwardSCmdMatch& default_instance();

  void Swap(SessionForwardSCmdMatch* other);

  // implements Message ----------------------------------------------

  SessionForwardSCmdMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionForwardSCmdMatch& from);
  void MergeFrom(const SessionForwardSCmdMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_SCMD_MATCH];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 7;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 7;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SessionForwardSCmdMatch)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 len_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static SessionForwardSCmdMatch* default_instance_;
};
// -------------------------------------------------------------------

class SessionForwardMatchScene : public ::google::protobuf::Message {
 public:
  SessionForwardMatchScene();
  virtual ~SessionForwardMatchScene();

  SessionForwardMatchScene(const SessionForwardMatchScene& from);

  inline SessionForwardMatchScene& operator=(const SessionForwardMatchScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionForwardMatchScene& default_instance();

  void Swap(SessionForwardMatchScene* other);

  // implements Message ----------------------------------------------

  SessionForwardMatchScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionForwardMatchScene& from);
  void MergeFrom(const SessionForwardMatchScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_MATCH_SCENE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 5;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 5;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SessionForwardMatchScene)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* data_;
  ::google::protobuf::uint32 len_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static SessionForwardMatchScene* default_instance_;
};
// -------------------------------------------------------------------

class SessionForwardMatchTeam : public ::google::protobuf::Message {
 public:
  SessionForwardMatchTeam();
  virtual ~SessionForwardMatchTeam();

  SessionForwardMatchTeam(const SessionForwardMatchTeam& from);

  inline SessionForwardMatchTeam& operator=(const SessionForwardMatchTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionForwardMatchTeam& default_instance();

  void Swap(SessionForwardMatchTeam* other);

  // implements Message ----------------------------------------------

  SessionForwardMatchTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionForwardMatchTeam& from);
  void MergeFrom(const SessionForwardMatchTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_MATCH_TEAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 4;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 4;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SessionForwardMatchTeam)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* data_;
  ::google::protobuf::uint32 len_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static SessionForwardMatchTeam* default_instance_;
};
// -------------------------------------------------------------------

class SessionForwardTeamMatch : public ::google::protobuf::Message {
 public:
  SessionForwardTeamMatch();
  virtual ~SessionForwardTeamMatch();

  SessionForwardTeamMatch(const SessionForwardTeamMatch& from);

  inline SessionForwardTeamMatch& operator=(const SessionForwardTeamMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionForwardTeamMatch& default_instance();

  void Swap(SessionForwardTeamMatch* other);

  // implements Message ----------------------------------------------

  SessionForwardTeamMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionForwardTeamMatch& from);
  void MergeFrom(const SessionForwardTeamMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_TEAM_MATCH];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 4;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 4;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SessionForwardTeamMatch)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* data_;
  ::google::protobuf::uint32 len_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static SessionForwardTeamMatch* default_instance_;
};
// -------------------------------------------------------------------

class RegPvpZoneMatch : public ::google::protobuf::Message {
 public:
  RegPvpZoneMatch();
  virtual ~RegPvpZoneMatch();

  RegPvpZoneMatch(const RegPvpZoneMatch& from);

  inline RegPvpZoneMatch& operator=(const RegPvpZoneMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegPvpZoneMatch& default_instance();

  void Swap(RegPvpZoneMatch* other);

  // implements Message ----------------------------------------------

  RegPvpZoneMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegPvpZoneMatch& from);
  void MergeFrom(const RegPvpZoneMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_REG_PVP_ZONE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint32 category = 3;
  inline bool has_category() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 3;
  inline ::google::protobuf::uint32 category() const;
  inline void set_category(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.RegPvpZoneMatch)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_category();
  inline void clear_has_category();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 category_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static RegPvpZoneMatch* default_instance_;
};
// -------------------------------------------------------------------

class EnterPvpMapSCmdMatch : public ::google::protobuf::Message {
 public:
  EnterPvpMapSCmdMatch();
  virtual ~EnterPvpMapSCmdMatch();

  EnterPvpMapSCmdMatch(const EnterPvpMapSCmdMatch& from);

  inline EnterPvpMapSCmdMatch& operator=(const EnterPvpMapSCmdMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterPvpMapSCmdMatch& default_instance();

  void Swap(EnterPvpMapSCmdMatch* other);

  // implements Message ----------------------------------------------

  EnterPvpMapSCmdMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterPvpMapSCmdMatch& from);
  void MergeFrom(const EnterPvpMapSCmdMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_ENTER_PVP_MAP];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint32 dest_zoneid = 3;
  inline bool has_dest_zoneid() const;
  inline void clear_dest_zoneid();
  static const int kDestZoneidFieldNumber = 3;
  inline ::google::protobuf::uint32 dest_zoneid() const;
  inline void set_dest_zoneid(::google::protobuf::uint32 value);

  // optional uint32 raidid = 4;
  inline bool has_raidid() const;
  inline void clear_raidid();
  static const int kRaididFieldNumber = 4;
  inline ::google::protobuf::uint32 raidid() const;
  inline void set_raidid(::google::protobuf::uint32 value);

  // optional uint64 room_guid = 5;
  inline bool has_room_guid() const;
  inline void clear_room_guid();
  static const int kRoomGuidFieldNumber = 5;
  inline ::google::protobuf::uint64 room_guid() const;
  inline void set_room_guid(::google::protobuf::uint64 value);

  // optional uint64 charid = 6;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 6;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 colorindex = 7;
  inline bool has_colorindex() const;
  inline void clear_colorindex();
  static const int kColorindexFieldNumber = 7;
  inline ::google::protobuf::uint32 colorindex() const;
  inline void set_colorindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.EnterPvpMapSCmdMatch)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_dest_zoneid();
  inline void clear_has_dest_zoneid();
  inline void set_has_raidid();
  inline void clear_has_raidid();
  inline void set_has_room_guid();
  inline void clear_has_room_guid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_colorindex();
  inline void clear_has_colorindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 dest_zoneid_;
  ::google::protobuf::uint32 raidid_;
  ::google::protobuf::uint64 room_guid_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 colorindex_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static EnterPvpMapSCmdMatch* default_instance_;
};
// -------------------------------------------------------------------

class LeavePvpMap : public ::google::protobuf::Message {
 public:
  LeavePvpMap();
  virtual ~LeavePvpMap();

  LeavePvpMap(const LeavePvpMap& from);

  inline LeavePvpMap& operator=(const LeavePvpMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeavePvpMap& default_instance();

  void Swap(LeavePvpMap* other);

  // implements Message ----------------------------------------------

  LeavePvpMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeavePvpMap& from);
  void MergeFrom(const LeavePvpMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_LEAVE_PVP_MAP];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 roomid = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 originzoneid = 5;
  inline bool has_originzoneid() const;
  inline void clear_originzoneid();
  static const int kOriginzoneidFieldNumber = 5;
  inline ::google::protobuf::uint32 originzoneid() const;
  inline void set_originzoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.LeavePvpMap)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_originzoneid();
  inline void clear_has_originzoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 originzoneid_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static LeavePvpMap* default_instance_;
};
// -------------------------------------------------------------------

class NtfJoinRoom : public ::google::protobuf::Message {
 public:
  NtfJoinRoom();
  virtual ~NtfJoinRoom();

  NtfJoinRoom(const NtfJoinRoom& from);

  inline NtfJoinRoom& operator=(const NtfJoinRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfJoinRoom& default_instance();

  void Swap(NtfJoinRoom* other);

  // implements Message ----------------------------------------------

  NtfJoinRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfJoinRoom& from);
  void MergeFrom(const NtfJoinRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_NTF_JOIN_ROOM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 roomid = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 teamid = 5;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 5;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional bool success = 6;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 6;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfJoinRoom)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 teamid_;
  bool success_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfJoinRoom* default_instance_;
};
// -------------------------------------------------------------------

class NtfLeaveRoom : public ::google::protobuf::Message {
 public:
  NtfLeaveRoom();
  virtual ~NtfLeaveRoom();

  NtfLeaveRoom(const NtfLeaveRoom& from);

  inline NtfLeaveRoom& operator=(const NtfLeaveRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfLeaveRoom& default_instance();

  void Swap(NtfLeaveRoom* other);

  // implements Message ----------------------------------------------

  NtfLeaveRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfLeaveRoom& from);
  void MergeFrom(const NtfLeaveRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_NTF_LEAVE_ROOM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 roomid = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional uint64 teamid = 4;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 4;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfLeaveRoom)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 teamid_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfLeaveRoom* default_instance_;
};
// -------------------------------------------------------------------

class CreateTeamMatchSCmd : public ::google::protobuf::Message {
 public:
  CreateTeamMatchSCmd();
  virtual ~CreateTeamMatchSCmd();

  CreateTeamMatchSCmd(const CreateTeamMatchSCmd& from);

  inline CreateTeamMatchSCmd& operator=(const CreateTeamMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateTeamMatchSCmd& default_instance();

  void Swap(CreateTeamMatchSCmd* other);

  // implements Message ----------------------------------------------

  CreateTeamMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateTeamMatchSCmd& from);
  void MergeFrom(const CreateTeamMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CREATE_TEAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 teamid = 3;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 3;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 roomid = 4;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 4;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional uint64 charid = 5;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 5;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 zoneid = 7;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 7;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint64 new_teamid = 8;
  inline bool has_new_teamid() const;
  inline void clear_new_teamid();
  static const int kNewTeamidFieldNumber = 8;
  inline ::google::protobuf::uint64 new_teamid() const;
  inline void set_new_teamid(::google::protobuf::uint64 value);

  // optional .Cmd.EPvpType pvptype = 9;
  inline bool has_pvptype() const;
  inline void clear_pvptype();
  static const int kPvptypeFieldNumber = 9;
  inline ::Cmd::EPvpType pvptype() const;
  inline void set_pvptype(::Cmd::EPvpType value);

  // @@protoc_insertion_point(class_scope:Cmd.CreateTeamMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_new_teamid();
  inline void clear_has_new_teamid();
  inline void set_has_pvptype();
  inline void clear_has_pvptype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  ::google::protobuf::uint64 new_teamid_;
  ::google::protobuf::uint32 zoneid_;
  int pvptype_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static CreateTeamMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class PvpTeamMemberUpdateSCmd : public ::google::protobuf::Message {
 public:
  PvpTeamMemberUpdateSCmd();
  virtual ~PvpTeamMemberUpdateSCmd();

  PvpTeamMemberUpdateSCmd(const PvpTeamMemberUpdateSCmd& from);

  inline PvpTeamMemberUpdateSCmd& operator=(const PvpTeamMemberUpdateSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpTeamMemberUpdateSCmd& default_instance();

  void Swap(PvpTeamMemberUpdateSCmd* other);

  // implements Message ----------------------------------------------

  PvpTeamMemberUpdateSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpTeamMemberUpdateSCmd& from);
  void MergeFrom(const PvpTeamMemberUpdateSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_PVP_MEMBERUPDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional .Cmd.MatchTeamMemUpdateInfo data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::Cmd::MatchTeamMemUpdateInfo& data() const;
  inline ::Cmd::MatchTeamMemUpdateInfo* mutable_data();
  inline ::Cmd::MatchTeamMemUpdateInfo* release_data();
  inline void set_allocated_data(::Cmd::MatchTeamMemUpdateInfo* data);

  // @@protoc_insertion_point(class_scope:Cmd.PvpTeamMemberUpdateSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::MatchTeamMemUpdateInfo* data_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static PvpTeamMemberUpdateSCmd* default_instance_;
};
// -------------------------------------------------------------------

class PvpMemberDataUpdateSCmd : public ::google::protobuf::Message {
 public:
  PvpMemberDataUpdateSCmd();
  virtual ~PvpMemberDataUpdateSCmd();

  PvpMemberDataUpdateSCmd(const PvpMemberDataUpdateSCmd& from);

  inline PvpMemberDataUpdateSCmd& operator=(const PvpMemberDataUpdateSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpMemberDataUpdateSCmd& default_instance();

  void Swap(PvpMemberDataUpdateSCmd* other);

  // implements Message ----------------------------------------------

  PvpMemberDataUpdateSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpMemberDataUpdateSCmd& from);
  void MergeFrom(const PvpMemberDataUpdateSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_PVP_MEMBERDATAUPDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional .Cmd.MatchTeamMemDataUpdateInfo data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::Cmd::MatchTeamMemDataUpdateInfo& data() const;
  inline ::Cmd::MatchTeamMemDataUpdateInfo* mutable_data();
  inline ::Cmd::MatchTeamMemDataUpdateInfo* release_data();
  inline void set_allocated_data(::Cmd::MatchTeamMemDataUpdateInfo* data);

  // @@protoc_insertion_point(class_scope:Cmd.PvpMemberDataUpdateSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::MatchTeamMemDataUpdateInfo* data_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static PvpMemberDataUpdateSCmd* default_instance_;
};
// -------------------------------------------------------------------

class ApplyTeamMatchSCmd : public ::google::protobuf::Message {
 public:
  ApplyTeamMatchSCmd();
  virtual ~ApplyTeamMatchSCmd();

  ApplyTeamMatchSCmd(const ApplyTeamMatchSCmd& from);

  inline ApplyTeamMatchSCmd& operator=(const ApplyTeamMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyTeamMatchSCmd& default_instance();

  void Swap(ApplyTeamMatchSCmd* other);

  // implements Message ----------------------------------------------

  ApplyTeamMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplyTeamMatchSCmd& from);
  void MergeFrom(const ApplyTeamMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_APPLY_TEAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 teamid = 3;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 3;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 charid = 5;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 5;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 7;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 7;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ApplyTeamMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static ApplyTeamMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class SyncTeamInfoMatchSCmd : public ::google::protobuf::Message {
 public:
  SyncTeamInfoMatchSCmd();
  virtual ~SyncTeamInfoMatchSCmd();

  SyncTeamInfoMatchSCmd(const SyncTeamInfoMatchSCmd& from);

  inline SyncTeamInfoMatchSCmd& operator=(const SyncTeamInfoMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncTeamInfoMatchSCmd& default_instance();

  void Swap(SyncTeamInfoMatchSCmd* other);

  // implements Message ----------------------------------------------

  SyncTeamInfoMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncTeamInfoMatchSCmd& from);
  void MergeFrom(const SyncTeamInfoMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_TEAM_INFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 teamid = 3;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 3;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SyncTeamInfoMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static SyncTeamInfoMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class SyncRaidSceneMatchSCmd : public ::google::protobuf::Message {
 public:
  SyncRaidSceneMatchSCmd();
  virtual ~SyncRaidSceneMatchSCmd();

  SyncRaidSceneMatchSCmd(const SyncRaidSceneMatchSCmd& from);

  inline SyncRaidSceneMatchSCmd& operator=(const SyncRaidSceneMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncRaidSceneMatchSCmd& default_instance();

  void Swap(SyncRaidSceneMatchSCmd* other);

  // implements Message ----------------------------------------------

  SyncRaidSceneMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncRaidSceneMatchSCmd& from);
  void MergeFrom(const SyncRaidSceneMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_RAIDSCENE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 roomid = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional bool open = 4;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 4;
  inline bool open() const;
  inline void set_open(bool value);

  // optional uint32 sceneid = 5;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 5;
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);

  // optional uint32 count = 6;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 6;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 7;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 7;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SyncRaidSceneMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  bool open_;
  ::google::protobuf::uint32 sceneid_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static SyncRaidSceneMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class SuperGvgRoomData : public ::google::protobuf::Message {
 public:
  SuperGvgRoomData();
  virtual ~SuperGvgRoomData();

  SuperGvgRoomData(const SuperGvgRoomData& from);

  inline SuperGvgRoomData& operator=(const SuperGvgRoomData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuperGvgRoomData& default_instance();

  void Swap(SuperGvgRoomData* other);

  // implements Message ----------------------------------------------

  SuperGvgRoomData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SuperGvgRoomData& from);
  void MergeFrom(const SuperGvgRoomData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 guildid = 1 [default = 0];
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional uint32 color = 2 [default = 0];
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);

  // optional string guildname = 3;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 3;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional string guildicon = 4;
  inline bool has_guildicon() const;
  inline void clear_guildicon();
  static const int kGuildiconFieldNumber = 4;
  inline const ::std::string& guildicon() const;
  inline void set_guildicon(const ::std::string& value);
  inline void set_guildicon(const char* value);
  inline void set_guildicon(const char* value, size_t size);
  inline ::std::string* mutable_guildicon();
  inline ::std::string* release_guildicon();
  inline void set_allocated_guildicon(::std::string* guildicon);

  // optional uint32 firecount = 5;
  inline bool has_firecount() const;
  inline void clear_firecount();
  static const int kFirecountFieldNumber = 5;
  inline ::google::protobuf::uint32 firecount() const;
  inline void set_firecount(::google::protobuf::uint32 value);

  // optional uint32 firescore = 6;
  inline bool has_firescore() const;
  inline void clear_firescore();
  static const int kFirescoreFieldNumber = 6;
  inline ::google::protobuf::uint32 firescore() const;
  inline void set_firescore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SuperGvgRoomData)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_guildicon();
  inline void clear_has_guildicon();
  inline void set_has_firecount();
  inline void clear_has_firecount();
  inline void set_has_firescore();
  inline void clear_has_firescore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::google::protobuf::uint32 color_;
  ::google::protobuf::uint32 firecount_;
  ::std::string* guildicon_;
  ::google::protobuf::uint32 firescore_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static SuperGvgRoomData* default_instance_;
};
// -------------------------------------------------------------------

class TeamPwsUserCurScore : public ::google::protobuf::Message {
 public:
  TeamPwsUserCurScore();
  virtual ~TeamPwsUserCurScore();

  TeamPwsUserCurScore(const TeamPwsUserCurScore& from);

  inline TeamPwsUserCurScore& operator=(const TeamPwsUserCurScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamPwsUserCurScore& default_instance();

  void Swap(TeamPwsUserCurScore* other);

  // implements Message ----------------------------------------------

  TeamPwsUserCurScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamPwsUserCurScore& from);
  void MergeFrom(const TeamPwsUserCurScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.TeamPwsUserCurScore)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 score_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static TeamPwsUserCurScore* default_instance_;
};
// -------------------------------------------------------------------

class TeamPwsRoomData : public ::google::protobuf::Message {
 public:
  TeamPwsRoomData();
  virtual ~TeamPwsRoomData();

  TeamPwsRoomData(const TeamPwsRoomData& from);

  inline TeamPwsRoomData& operator=(const TeamPwsRoomData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamPwsRoomData& default_instance();

  void Swap(TeamPwsRoomData* other);

  // implements Message ----------------------------------------------

  TeamPwsRoomData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamPwsRoomData& from);
  void MergeFrom(const TeamPwsRoomData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 teamid = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 1;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint32 color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);

  // repeated .Cmd.TeamPwsUserCurScore users = 3;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 3;
  inline const ::Cmd::TeamPwsUserCurScore& users(int index) const;
  inline ::Cmd::TeamPwsUserCurScore* mutable_users(int index);
  inline ::Cmd::TeamPwsUserCurScore* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsUserCurScore >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsUserCurScore >*
      mutable_users();

  // @@protoc_insertion_point(class_scope:Cmd.TeamPwsRoomData)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsUserCurScore > users_;
  ::google::protobuf::uint32 color_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static TeamPwsRoomData* default_instance_;
};
// -------------------------------------------------------------------

class SyncRoomSceneMatchSCmd : public ::google::protobuf::Message {
 public:
  SyncRoomSceneMatchSCmd();
  virtual ~SyncRoomSceneMatchSCmd();

  SyncRoomSceneMatchSCmd(const SyncRoomSceneMatchSCmd& from);

  inline SyncRoomSceneMatchSCmd& operator=(const SyncRoomSceneMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncRoomSceneMatchSCmd& default_instance();

  void Swap(SyncRoomSceneMatchSCmd* other);

  // implements Message ----------------------------------------------

  SyncRoomSceneMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncRoomSceneMatchSCmd& from);
  void MergeFrom(const SyncRoomSceneMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_ROOMINFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 roomid = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional uint32 sceneid = 4;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 4;
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 5;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 5;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 roomsize = 6 [default = 0];
  inline bool has_roomsize() const;
  inline void clear_roomsize();
  static const int kRoomsizeFieldNumber = 6;
  inline ::google::protobuf::uint32 roomsize() const;
  inline void set_roomsize(::google::protobuf::uint32 value);

  // repeated .Cmd.SuperGvgRoomData sugvgdata = 7;
  inline int sugvgdata_size() const;
  inline void clear_sugvgdata();
  static const int kSugvgdataFieldNumber = 7;
  inline const ::Cmd::SuperGvgRoomData& sugvgdata(int index) const;
  inline ::Cmd::SuperGvgRoomData* mutable_sugvgdata(int index);
  inline ::Cmd::SuperGvgRoomData* add_sugvgdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SuperGvgRoomData >&
      sugvgdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SuperGvgRoomData >*
      mutable_sugvgdata();

  // optional uint32 level = 8 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 raidtime = 9 [default = 0];
  inline bool has_raidtime() const;
  inline void clear_raidtime();
  static const int kRaidtimeFieldNumber = 9;
  inline ::google::protobuf::uint32 raidtime() const;
  inline void set_raidtime(::google::protobuf::uint32 value);

  // repeated .Cmd.TeamPwsRoomData pwsdata = 10;
  inline int pwsdata_size() const;
  inline void clear_pwsdata();
  static const int kPwsdataFieldNumber = 10;
  inline const ::Cmd::TeamPwsRoomData& pwsdata(int index) const;
  inline ::Cmd::TeamPwsRoomData* mutable_pwsdata(int index);
  inline ::Cmd::TeamPwsRoomData* add_pwsdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsRoomData >&
      pwsdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsRoomData >*
      mutable_pwsdata();

  // optional .Cmd.EPvpType pvptype = 11 [default = EPVPTYPE_MIN];
  inline bool has_pvptype() const;
  inline void clear_pvptype();
  static const int kPvptypeFieldNumber = 11;
  inline ::Cmd::EPvpType pvptype() const;
  inline void set_pvptype(::Cmd::EPvpType value);

  // @@protoc_insertion_point(class_scope:Cmd.SyncRoomSceneMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_roomsize();
  inline void clear_has_roomsize();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_raidtime();
  inline void clear_has_raidtime();
  inline void set_has_pvptype();
  inline void clear_has_pvptype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 sceneid_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SuperGvgRoomData > sugvgdata_;
  ::google::protobuf::uint32 roomsize_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsRoomData > pwsdata_;
  ::google::protobuf::uint32 raidtime_;
  int pvptype_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static SyncRoomSceneMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class KickTeamMatchSCmd : public ::google::protobuf::Message {
 public:
  KickTeamMatchSCmd();
  virtual ~KickTeamMatchSCmd();

  KickTeamMatchSCmd(const KickTeamMatchSCmd& from);

  inline KickTeamMatchSCmd& operator=(const KickTeamMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickTeamMatchSCmd& default_instance();

  void Swap(KickTeamMatchSCmd* other);

  // implements Message ----------------------------------------------

  KickTeamMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickTeamMatchSCmd& from);
  void MergeFrom(const KickTeamMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_KICK_TEAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 teamid = 3;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 3;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 charid = 5;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 5;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 roomid = 6;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 6;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 7;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 7;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.KickTeamMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static KickTeamMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class KickUserFromPvpMatchSCmd : public ::google::protobuf::Message {
 public:
  KickUserFromPvpMatchSCmd();
  virtual ~KickUserFromPvpMatchSCmd();

  KickUserFromPvpMatchSCmd(const KickUserFromPvpMatchSCmd& from);

  inline KickUserFromPvpMatchSCmd& operator=(const KickUserFromPvpMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickUserFromPvpMatchSCmd& default_instance();

  void Swap(KickUserFromPvpMatchSCmd* other);

  // implements Message ----------------------------------------------

  KickUserFromPvpMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickUserFromPvpMatchSCmd& from);
  void MergeFrom(const KickUserFromPvpMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_KICK_USER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // required uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // required uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.KickUserFromPvpMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static KickUserFromPvpMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class ResetPvpMatchSCmd : public ::google::protobuf::Message {
 public:
  ResetPvpMatchSCmd();
  virtual ~ResetPvpMatchSCmd();

  ResetPvpMatchSCmd(const ResetPvpMatchSCmd& from);

  inline ResetPvpMatchSCmd& operator=(const ResetPvpMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetPvpMatchSCmd& default_instance();

  void Swap(ResetPvpMatchSCmd* other);

  // implements Message ----------------------------------------------

  ResetPvpMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResetPvpMatchSCmd& from);
  void MergeFrom(const ResetPvpMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_RESET_PVP];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // @@protoc_insertion_point(class_scope:Cmd.ResetPvpMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static ResetPvpMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class SwitchPvpMathcSCmd : public ::google::protobuf::Message {
 public:
  SwitchPvpMathcSCmd();
  virtual ~SwitchPvpMathcSCmd();

  SwitchPvpMathcSCmd(const SwitchPvpMathcSCmd& from);

  inline SwitchPvpMathcSCmd& operator=(const SwitchPvpMathcSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SwitchPvpMathcSCmd& default_instance();

  void Swap(SwitchPvpMathcSCmd* other);

  // implements Message ----------------------------------------------

  SwitchPvpMathcSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SwitchPvpMathcSCmd& from);
  void MergeFrom(const SwitchPvpMathcSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SWITCH_PVP];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional bool open = 3 [default = false];
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 3;
  inline bool open() const;
  inline void set_open(bool value);

  // required .Cmd.EPvpType etype = 4;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 4;
  inline ::Cmd::EPvpType etype() const;
  inline void set_etype(::Cmd::EPvpType value);

  // @@protoc_insertion_point(class_scope:Cmd.SwitchPvpMathcSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  bool open_;
  int etype_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static SwitchPvpMathcSCmd* default_instance_;
};
// -------------------------------------------------------------------

class ActivityMatchSCmd : public ::google::protobuf::Message {
 public:
  ActivityMatchSCmd();
  virtual ~ActivityMatchSCmd();

  ActivityMatchSCmd(const ActivityMatchSCmd& from);

  inline ActivityMatchSCmd& operator=(const ActivityMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityMatchSCmd& default_instance();

  void Swap(ActivityMatchSCmd* other);

  // implements Message ----------------------------------------------

  ActivityMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityMatchSCmd& from);
  void MergeFrom(const ActivityMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_POLLY_ACTIVITY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional bool open = 3;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 3;
  inline bool open() const;
  inline void set_open(bool value);

  // optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_POLLY];
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 4;
  inline ::Cmd::EPvpType etype() const;
  inline void set_etype(::Cmd::EPvpType value);

  // optional bool server_restart = 5 [default = false];
  inline bool has_server_restart() const;
  inline void clear_server_restart();
  static const int kServerRestartFieldNumber = 5;
  inline bool server_restart() const;
  inline void set_server_restart(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.ActivityMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_server_restart();
  inline void clear_has_server_restart();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int etype_;
  bool open_;
  bool server_restart_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static ActivityMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class CheckCanBuyMatchSCmd : public ::google::protobuf::Message {
 public:
  CheckCanBuyMatchSCmd();
  virtual ~CheckCanBuyMatchSCmd();

  CheckCanBuyMatchSCmd(const CheckCanBuyMatchSCmd& from);

  inline CheckCanBuyMatchSCmd& operator=(const CheckCanBuyMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckCanBuyMatchSCmd& default_instance();

  void Swap(CheckCanBuyMatchSCmd* other);

  // implements Message ----------------------------------------------

  CheckCanBuyMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckCanBuyMatchSCmd& from);
  void MergeFrom(const CheckCanBuyMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CHECK_CAN_BUY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint32 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 count = 4 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 price = 5 [default = 0];
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 5;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional uint32 price2 = 6 [default = 0];
  inline bool has_price2() const;
  inline void clear_price2();
  static const int kPrice2FieldNumber = 6;
  inline ::google::protobuf::uint32 price2() const;
  inline void set_price2(::google::protobuf::uint32 value);

  // optional bool success = 7;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 7;
  inline bool success() const;
  inline void set_success(bool value);

  // optional uint64 charid = 8;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 8;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 9;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 9;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.CheckCanBuyMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_price2();
  inline void clear_has_price2();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 price_;
  ::google::protobuf::uint32 price2_;
  ::google::protobuf::uint64 charid_;
  bool success_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static CheckCanBuyMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class AddBuyCntMatchSCmd : public ::google::protobuf::Message {
 public:
  AddBuyCntMatchSCmd();
  virtual ~AddBuyCntMatchSCmd();

  AddBuyCntMatchSCmd(const AddBuyCntMatchSCmd& from);

  inline AddBuyCntMatchSCmd& operator=(const AddBuyCntMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddBuyCntMatchSCmd& default_instance();

  void Swap(AddBuyCntMatchSCmd* other);

  // implements Message ----------------------------------------------

  AddBuyCntMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddBuyCntMatchSCmd& from);
  void MergeFrom(const AddBuyCntMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_ADD_BUY_CNT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint64 charid = 5;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 5;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 6;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 6;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.AddBuyCntMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static AddBuyCntMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class QuerySoldCntMatchSCmd : public ::google::protobuf::Message {
 public:
  QuerySoldCntMatchSCmd();
  virtual ~QuerySoldCntMatchSCmd();

  QuerySoldCntMatchSCmd(const QuerySoldCntMatchSCmd& from);

  inline QuerySoldCntMatchSCmd& operator=(const QuerySoldCntMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuerySoldCntMatchSCmd& default_instance();

  void Swap(QuerySoldCntMatchSCmd* other);

  // implements Message ----------------------------------------------

  QuerySoldCntMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuerySoldCntMatchSCmd& from);
  void MergeFrom(const QuerySoldCntMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_QUERY_SOLD_CNT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.QuerySoldCntMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static QuerySoldCntMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class JoinSuperGvgMatchSCmd : public ::google::protobuf::Message {
 public:
  JoinSuperGvgMatchSCmd();
  virtual ~JoinSuperGvgMatchSCmd();

  JoinSuperGvgMatchSCmd(const JoinSuperGvgMatchSCmd& from);

  inline JoinSuperGvgMatchSCmd& operator=(const JoinSuperGvgMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinSuperGvgMatchSCmd& default_instance();

  void Swap(JoinSuperGvgMatchSCmd* other);

  // implements Message ----------------------------------------------

  JoinSuperGvgMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinSuperGvgMatchSCmd& from);
  void MergeFrom(const JoinSuperGvgMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SUPERGVG_JOIN];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // required uint64 guildid = 3;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 3;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // required uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional string guildname = 5;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 5;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional string guildicon = 6;
  inline bool has_guildicon() const;
  inline void clear_guildicon();
  static const int kGuildiconFieldNumber = 6;
  inline const ::std::string& guildicon() const;
  inline void set_guildicon(const ::std::string& value);
  inline void set_guildicon(const char* value);
  inline void set_guildicon(const char* value, size_t size);
  inline ::std::string* mutable_guildicon();
  inline ::std::string* release_guildicon();
  inline void set_allocated_guildicon(::std::string* guildicon);

  // optional uint32 firecount = 7;
  inline bool has_firecount() const;
  inline void clear_firecount();
  static const int kFirecountFieldNumber = 7;
  inline ::google::protobuf::uint32 firecount() const;
  inline void set_firecount(::google::protobuf::uint32 value);

  // optional uint32 firescore = 8;
  inline bool has_firescore() const;
  inline void clear_firescore();
  static const int kFirescoreFieldNumber = 8;
  inline ::google::protobuf::uint32 firescore() const;
  inline void set_firescore(::google::protobuf::uint32 value);

  // optional uint32 begintime = 9 [default = 0];
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBegintimeFieldNumber = 9;
  inline ::google::protobuf::uint32 begintime() const;
  inline void set_begintime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.JoinSuperGvgMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_guildicon();
  inline void clear_has_guildicon();
  inline void set_has_firecount();
  inline void clear_has_firecount();
  inline void set_has_firescore();
  inline void clear_has_firescore();
  inline void set_has_begintime();
  inline void clear_has_begintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 firecount_;
  ::std::string* guildicon_;
  ::google::protobuf::uint32 firescore_;
  ::google::protobuf::uint32 begintime_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static JoinSuperGvgMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class SuperGvgRetMatchSCmd : public ::google::protobuf::Message {
 public:
  SuperGvgRetMatchSCmd();
  virtual ~SuperGvgRetMatchSCmd();

  SuperGvgRetMatchSCmd(const SuperGvgRetMatchSCmd& from);

  inline SuperGvgRetMatchSCmd& operator=(const SuperGvgRetMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuperGvgRetMatchSCmd& default_instance();

  void Swap(SuperGvgRetMatchSCmd* other);

  // implements Message ----------------------------------------------

  SuperGvgRetMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SuperGvgRetMatchSCmd& from);
  void MergeFrom(const SuperGvgRetMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SUPERGVG_RET];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional bool ret = 3 [default = false];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline bool ret() const;
  inline void set_ret(bool value);

  // optional uint64 guildid = 4 [default = 0];
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 4;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.SuperGvgRetMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 guildid_;
  bool ret_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static SuperGvgRetMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class ClearMvpCDMatchSCmd : public ::google::protobuf::Message {
 public:
  ClearMvpCDMatchSCmd();
  virtual ~ClearMvpCDMatchSCmd();

  ClearMvpCDMatchSCmd(const ClearMvpCDMatchSCmd& from);

  inline ClearMvpCDMatchSCmd& operator=(const ClearMvpCDMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearMvpCDMatchSCmd& default_instance();

  void Swap(ClearMvpCDMatchSCmd* other);

  // implements Message ----------------------------------------------

  ClearMvpCDMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearMvpCDMatchSCmd& from);
  void MergeFrom(const ClearMvpCDMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CLEAR_MVPCD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // required uint64 roomid = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint64 teamid = 4;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 4;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ClearMvpCDMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 teamid_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static ClearMvpCDMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class TutorOptMatchSCmd : public ::google::protobuf::Message {
 public:
  TutorOptMatchSCmd();
  virtual ~TutorOptMatchSCmd();

  TutorOptMatchSCmd(const TutorOptMatchSCmd& from);

  inline TutorOptMatchSCmd& operator=(const TutorOptMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TutorOptMatchSCmd& default_instance();

  void Swap(TutorOptMatchSCmd* other);

  // implements Message ----------------------------------------------

  TutorOptMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TutorOptMatchSCmd& from);
  void MergeFrom(const TutorOptMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_TUTOR_OPT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 tutorid = 3 [default = 0];
  inline bool has_tutorid() const;
  inline void clear_tutorid();
  static const int kTutoridFieldNumber = 3;
  inline ::google::protobuf::uint64 tutorid() const;
  inline void set_tutorid(::google::protobuf::uint64 value);

  // optional uint64 studentid = 4 [default = 0];
  inline bool has_studentid() const;
  inline void clear_studentid();
  static const int kStudentidFieldNumber = 4;
  inline ::google::protobuf::uint64 studentid() const;
  inline void set_studentid(::google::protobuf::uint64 value);

  // optional .Cmd.ETutorOpt opt = 5 [default = ETUTOROPT_APPLY];
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 5;
  inline ::Cmd::ETutorOpt opt() const;
  inline void set_opt(::Cmd::ETutorOpt value);

  // optional bool ret = 6 [default = false];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 6;
  inline bool ret() const;
  inline void set_ret(bool value);

  // optional bool result = 7 [default = false];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 7;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.TutorOptMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_tutorid();
  inline void clear_has_tutorid();
  inline void set_has_studentid();
  inline void clear_has_studentid();
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 tutorid_;
  ::google::protobuf::uint64 studentid_;
  int opt_;
  bool ret_;
  bool result_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static TutorOptMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class TutorBlackUpdateMatchSCmd : public ::google::protobuf::Message {
 public:
  TutorBlackUpdateMatchSCmd();
  virtual ~TutorBlackUpdateMatchSCmd();

  TutorBlackUpdateMatchSCmd(const TutorBlackUpdateMatchSCmd& from);

  inline TutorBlackUpdateMatchSCmd& operator=(const TutorBlackUpdateMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TutorBlackUpdateMatchSCmd& default_instance();

  void Swap(TutorBlackUpdateMatchSCmd* other);

  // implements Message ----------------------------------------------

  TutorBlackUpdateMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TutorBlackUpdateMatchSCmd& from);
  void MergeFrom(const TutorBlackUpdateMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_TUTOR_BLACK_UPDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // repeated uint64 blackids = 4;
  inline int blackids_size() const;
  inline void clear_blackids();
  static const int kBlackidsFieldNumber = 4;
  inline ::google::protobuf::uint64 blackids(int index) const;
  inline void set_blackids(int index, ::google::protobuf::uint64 value);
  inline void add_blackids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      blackids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_blackids();

  // @@protoc_insertion_point(class_scope:Cmd.TutorBlackUpdateMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > blackids_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static TutorBlackUpdateMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class UserBoothReqMatchSCmd : public ::google::protobuf::Message {
 public:
  UserBoothReqMatchSCmd();
  virtual ~UserBoothReqMatchSCmd();

  UserBoothReqMatchSCmd(const UserBoothReqMatchSCmd& from);

  inline UserBoothReqMatchSCmd& operator=(const UserBoothReqMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserBoothReqMatchSCmd& default_instance();

  void Swap(UserBoothReqMatchSCmd* other);

  // implements Message ----------------------------------------------

  UserBoothReqMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserBoothReqMatchSCmd& from);
  void MergeFrom(const UserBoothReqMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_BOOTH_REQ];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint32 zoneid = 3;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 3;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 sceneid = 4;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 4;
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);

  // optional .Cmd.MapUser user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::Cmd::MapUser& user() const;
  inline ::Cmd::MapUser* mutable_user();
  inline ::Cmd::MapUser* release_user();
  inline void set_allocated_user(::Cmd::MapUser* user);

  // optional .Cmd.EBoothOper oper = 6 [default = EBOOTHOPER_OPEN];
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 6;
  inline ::Cmd::EBoothOper oper() const;
  inline void set_oper(::Cmd::EBoothOper value);

  // @@protoc_insertion_point(class_scope:Cmd.UserBoothReqMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_oper();
  inline void clear_has_oper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 sceneid_;
  ::Cmd::MapUser* user_;
  int oper_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static UserBoothReqMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class UserBoothNTFMatchSCmd : public ::google::protobuf::Message {
 public:
  UserBoothNTFMatchSCmd();
  virtual ~UserBoothNTFMatchSCmd();

  UserBoothNTFMatchSCmd(const UserBoothNTFMatchSCmd& from);

  inline UserBoothNTFMatchSCmd& operator=(const UserBoothNTFMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserBoothNTFMatchSCmd& default_instance();

  void Swap(UserBoothNTFMatchSCmd* other);

  // implements Message ----------------------------------------------

  UserBoothNTFMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserBoothNTFMatchSCmd& from);
  void MergeFrom(const UserBoothNTFMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_BOOTH_NTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint32 zoneid = 3;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 3;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 sceneid = 4;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 4;
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);

  // optional .Cmd.MapUser user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::Cmd::MapUser& user() const;
  inline ::Cmd::MapUser* mutable_user();
  inline ::Cmd::MapUser* release_user();
  inline void set_allocated_user(::Cmd::MapUser* user);

  // optional .Cmd.EBoothOper oper = 6 [default = EBOOTHOPER_OPEN];
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 6;
  inline ::Cmd::EBoothOper oper() const;
  inline void set_oper(::Cmd::EBoothOper value);

  // @@protoc_insertion_point(class_scope:Cmd.UserBoothNTFMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_oper();
  inline void clear_has_oper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 sceneid_;
  ::Cmd::MapUser* user_;
  int oper_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static UserBoothNTFMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class JoinTeamPwsMatchSCmd : public ::google::protobuf::Message {
 public:
  JoinTeamPwsMatchSCmd();
  virtual ~JoinTeamPwsMatchSCmd();

  JoinTeamPwsMatchSCmd(const JoinTeamPwsMatchSCmd& from);

  inline JoinTeamPwsMatchSCmd& operator=(const JoinTeamPwsMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinTeamPwsMatchSCmd& default_instance();

  void Swap(JoinTeamPwsMatchSCmd* other);

  // implements Message ----------------------------------------------

  JoinTeamPwsMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinTeamPwsMatchSCmd& from);
  void MergeFrom(const JoinTeamPwsMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_JOIN_TEAMPWS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // required uint64 teamid = 3;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 3;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // required uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint64 leaderid = 5;
  inline bool has_leaderid() const;
  inline void clear_leaderid();
  static const int kLeaderidFieldNumber = 5;
  inline ::google::protobuf::uint64 leaderid() const;
  inline void set_leaderid(::google::protobuf::uint64 value);

  // repeated uint64 members = 6;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 6;
  inline ::google::protobuf::uint64 members(int index) const;
  inline void set_members(int index, ::google::protobuf::uint64 value);
  inline void add_members(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      members() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_members();

  // optional uint32 avescore = 7 [default = 0];
  inline bool has_avescore() const;
  inline void clear_avescore();
  static const int kAvescoreFieldNumber = 7;
  inline ::google::protobuf::uint32 avescore() const;
  inline void set_avescore(::google::protobuf::uint32 value);

  // optional .Cmd.EPvpType etype = 8 [default = EPVPTYPE_TEAMPWS];
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 8;
  inline ::Cmd::EPvpType etype() const;
  inline void set_etype(::Cmd::EPvpType value);

  // optional uint32 roomid = 9 [default = 0];
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 9;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.JoinTeamPwsMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_leaderid();
  inline void clear_has_leaderid();
  inline void set_has_avescore();
  inline void clear_has_avescore();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 leaderid_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 avescore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > members_;
  int etype_;
  ::google::protobuf::uint32 roomid_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static JoinTeamPwsMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class ExitTeamPwsMatchSCmd : public ::google::protobuf::Message {
 public:
  ExitTeamPwsMatchSCmd();
  virtual ~ExitTeamPwsMatchSCmd();

  ExitTeamPwsMatchSCmd(const ExitTeamPwsMatchSCmd& from);

  inline ExitTeamPwsMatchSCmd& operator=(const ExitTeamPwsMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitTeamPwsMatchSCmd& default_instance();

  void Swap(ExitTeamPwsMatchSCmd* other);

  // implements Message ----------------------------------------------

  ExitTeamPwsMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExitTeamPwsMatchSCmd& from);
  void MergeFrom(const ExitTeamPwsMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_LEAVE_TEAMPWS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // required uint64 teamid = 3;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 3;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // required uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional .Cmd.EPvpType etype = 5 [default = EPVPTYPE_TEAMPWS];
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 5;
  inline ::Cmd::EPvpType etype() const;
  inline void set_etype(::Cmd::EPvpType value);

  // @@protoc_insertion_point(class_scope:Cmd.ExitTeamPwsMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint32 zoneid_;
  int etype_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static ExitTeamPwsMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class SceneGMTestMatchSCmd : public ::google::protobuf::Message {
 public:
  SceneGMTestMatchSCmd();
  virtual ~SceneGMTestMatchSCmd();

  SceneGMTestMatchSCmd(const SceneGMTestMatchSCmd& from);

  inline SceneGMTestMatchSCmd& operator=(const SceneGMTestMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneGMTestMatchSCmd& default_instance();

  void Swap(SceneGMTestMatchSCmd* other);

  // implements Message ----------------------------------------------

  SceneGMTestMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneGMTestMatchSCmd& from);
  void MergeFrom(const SceneGMTestMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SCENE_GM_TEST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional .Cmd.ESceneGMMatchType etype = 3;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 3;
  inline ::Cmd::ESceneGMMatchType etype() const;
  inline void set_etype(::Cmd::ESceneGMMatchType value);

  // optional uint32 frequency = 4 [default = 0];
  inline bool has_frequency() const;
  inline void clear_frequency();
  static const int kFrequencyFieldNumber = 4;
  inline ::google::protobuf::uint32 frequency() const;
  inline void set_frequency(::google::protobuf::uint32 value);

  // optional uint32 interval = 5 [default = 0];
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 5;
  inline ::google::protobuf::uint32 interval() const;
  inline void set_interval(::google::protobuf::uint32 value);

  // optional uint32 lasttime = 6 [default = 0];
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLasttimeFieldNumber = 6;
  inline ::google::protobuf::uint32 lasttime() const;
  inline void set_lasttime(::google::protobuf::uint32 value);

  // repeated uint32 params = 7;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 7;
  inline ::google::protobuf::uint32 params(int index) const;
  inline void set_params(int index, ::google::protobuf::uint32 value);
  inline void add_params(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      params() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_params();

  // @@protoc_insertion_point(class_scope:Cmd.SceneGMTestMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_frequency();
  inline void clear_has_frequency();
  inline void set_has_interval();
  inline void clear_has_interval();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int etype_;
  ::google::protobuf::uint32 frequency_;
  ::google::protobuf::uint32 interval_;
  ::google::protobuf::uint32 lasttime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > params_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static SceneGMTestMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class MatchScoreData : public ::google::protobuf::Message {
 public:
  MatchScoreData();
  virtual ~MatchScoreData();

  MatchScoreData(const MatchScoreData& from);

  inline MatchScoreData& operator=(const MatchScoreData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchScoreData& default_instance();

  void Swap(MatchScoreData* other);

  // implements Message ----------------------------------------------

  MatchScoreData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchScoreData& from);
  void MergeFrom(const MatchScoreData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // required int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .Cmd.UserPortraitData portrait = 4;
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 4;
  inline const ::Cmd::UserPortraitData& portrait() const;
  inline ::Cmd::UserPortraitData* mutable_portrait();
  inline ::Cmd::UserPortraitData* release_portrait();
  inline void set_allocated_portrait(::Cmd::UserPortraitData* portrait);

  // optional .Cmd.EProfession profession = 5;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 5;
  inline ::Cmd::EProfession profession() const;
  inline void set_profession(::Cmd::EProfession value);

  // @@protoc_insertion_point(class_scope:Cmd.MatchScoreData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_profession();
  inline void clear_has_profession();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  ::google::protobuf::int32 score_;
  int profession_;
  ::Cmd::UserPortraitData* portrait_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static MatchScoreData* default_instance_;
};
// -------------------------------------------------------------------

class UpdateScoreMatchSCmd : public ::google::protobuf::Message {
 public:
  UpdateScoreMatchSCmd();
  virtual ~UpdateScoreMatchSCmd();

  UpdateScoreMatchSCmd(const UpdateScoreMatchSCmd& from);

  inline UpdateScoreMatchSCmd& operator=(const UpdateScoreMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateScoreMatchSCmd& default_instance();

  void Swap(UpdateScoreMatchSCmd* other);

  // implements Message ----------------------------------------------

  UpdateScoreMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateScoreMatchSCmd& from);
  void MergeFrom(const UpdateScoreMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_UPDATE_SCORE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional .Cmd.EPvpType etype = 3;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 3;
  inline ::Cmd::EPvpType etype() const;
  inline void set_etype(::Cmd::EPvpType value);

  // repeated .Cmd.MatchScoreData userscores = 5;
  inline int userscores_size() const;
  inline void clear_userscores();
  static const int kUserscoresFieldNumber = 5;
  inline const ::Cmd::MatchScoreData& userscores(int index) const;
  inline ::Cmd::MatchScoreData* mutable_userscores(int index);
  inline ::Cmd::MatchScoreData* add_userscores();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MatchScoreData >&
      userscores() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MatchScoreData >*
      mutable_userscores();

  // @@protoc_insertion_point(class_scope:Cmd.UpdateScoreMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MatchScoreData > userscores_;
  int etype_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static UpdateScoreMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class SyncUserScoreMatchSCmd : public ::google::protobuf::Message {
 public:
  SyncUserScoreMatchSCmd();
  virtual ~SyncUserScoreMatchSCmd();

  SyncUserScoreMatchSCmd(const SyncUserScoreMatchSCmd& from);

  inline SyncUserScoreMatchSCmd& operator=(const SyncUserScoreMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncUserScoreMatchSCmd& default_instance();

  void Swap(SyncUserScoreMatchSCmd* other);

  // implements Message ----------------------------------------------

  SyncUserScoreMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncUserScoreMatchSCmd& from);
  void MergeFrom(const SyncUserScoreMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_SCORE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional .Cmd.EPvpType etype = 3;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 3;
  inline ::Cmd::EPvpType etype() const;
  inline void set_etype(::Cmd::EPvpType value);

  // required uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // required uint32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 season = 6;
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 6;
  inline ::google::protobuf::uint32 season() const;
  inline void set_season(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SyncUserScoreMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_season();
  inline void clear_has_season();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  int etype_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 season_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static SyncUserScoreMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class UserLeaveRaidMatchSCmd : public ::google::protobuf::Message {
 public:
  UserLeaveRaidMatchSCmd();
  virtual ~UserLeaveRaidMatchSCmd();

  UserLeaveRaidMatchSCmd(const UserLeaveRaidMatchSCmd& from);

  inline UserLeaveRaidMatchSCmd& operator=(const UserLeaveRaidMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLeaveRaidMatchSCmd& default_instance();

  void Swap(UserLeaveRaidMatchSCmd* other);

  // implements Message ----------------------------------------------

  UserLeaveRaidMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLeaveRaidMatchSCmd& from);
  void MergeFrom(const UserLeaveRaidMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_FORCE_LEAVE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.EPvpType etype = 4;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 4;
  inline ::Cmd::EPvpType etype() const;
  inline void set_etype(::Cmd::EPvpType value);

  // @@protoc_insertion_point(class_scope:Cmd.UserLeaveRaidMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  int etype_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static UserLeaveRaidMatchSCmd* default_instance_;
};
// -------------------------------------------------------------------

class ConfirmTeamMatchSCmd : public ::google::protobuf::Message {
 public:
  ConfirmTeamMatchSCmd();
  virtual ~ConfirmTeamMatchSCmd();

  ConfirmTeamMatchSCmd(const ConfirmTeamMatchSCmd& from);

  inline ConfirmTeamMatchSCmd& operator=(const ConfirmTeamMatchSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfirmTeamMatchSCmd& default_instance();

  void Swap(ConfirmTeamMatchSCmd* other);

  // implements Message ----------------------------------------------

  ConfirmTeamMatchSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfirmTeamMatchSCmd& from);
  void MergeFrom(const ConfirmTeamMatchSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CONFIRM_TEAMMATCH];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchSParam param() const;
  inline void set_param(::Cmd::MatchSParam value);

  // required uint64 teamid = 3;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 3;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional .Cmd.EPvpType etype = 4;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 4;
  inline ::Cmd::EPvpType etype() const;
  inline void set_etype(::Cmd::EPvpType value);

  // @@protoc_insertion_point(class_scope:Cmd.ConfirmTeamMatchSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 teamid_;
  int etype_;
  friend void  protobuf_AddDesc_MatchSCmd_2eproto();
  friend void protobuf_AssignDesc_MatchSCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchSCmd_2eproto();

  void InitAsDefaultInstance();
  static ConfirmTeamMatchSCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// SessionForwardCCmdMatch

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool SessionForwardCCmdMatch::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionForwardCCmdMatch::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionForwardCCmdMatch::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionForwardCCmdMatch::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command SessionForwardCCmdMatch::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardCCmdMatch.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SessionForwardCCmdMatch::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardCCmdMatch.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_CCMD_MATCH];
inline bool SessionForwardCCmdMatch::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionForwardCCmdMatch::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionForwardCCmdMatch::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionForwardCCmdMatch::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::MatchSParam SessionForwardCCmdMatch::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardCCmdMatch.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void SessionForwardCCmdMatch::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardCCmdMatch.param)
}

// optional uint64 charid = 3;
inline bool SessionForwardCCmdMatch::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionForwardCCmdMatch::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionForwardCCmdMatch::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionForwardCCmdMatch::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SessionForwardCCmdMatch::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardCCmdMatch.charid)
  return charid_;
}
inline void SessionForwardCCmdMatch::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardCCmdMatch.charid)
}

// optional uint32 zoneid = 4;
inline bool SessionForwardCCmdMatch::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionForwardCCmdMatch::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionForwardCCmdMatch::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionForwardCCmdMatch::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 SessionForwardCCmdMatch::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardCCmdMatch.zoneid)
  return zoneid_;
}
inline void SessionForwardCCmdMatch::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardCCmdMatch.zoneid)
}

// optional bytes data = 5;
inline bool SessionForwardCCmdMatch::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SessionForwardCCmdMatch::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SessionForwardCCmdMatch::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SessionForwardCCmdMatch::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& SessionForwardCCmdMatch::data() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardCCmdMatch.data)
  return *data_;
}
inline void SessionForwardCCmdMatch::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardCCmdMatch.data)
}
inline void SessionForwardCCmdMatch::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SessionForwardCCmdMatch.data)
}
inline void SessionForwardCCmdMatch::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SessionForwardCCmdMatch.data)
}
inline ::std::string* SessionForwardCCmdMatch::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SessionForwardCCmdMatch.data)
  return data_;
}
inline ::std::string* SessionForwardCCmdMatch::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionForwardCCmdMatch::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SessionForwardCCmdMatch.data)
}

// optional uint32 len = 6;
inline bool SessionForwardCCmdMatch::has_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SessionForwardCCmdMatch::set_has_len() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SessionForwardCCmdMatch::clear_has_len() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SessionForwardCCmdMatch::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 SessionForwardCCmdMatch::len() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardCCmdMatch.len)
  return len_;
}
inline void SessionForwardCCmdMatch::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardCCmdMatch.len)
}

// -------------------------------------------------------------------

// SessionForwardSCmdMatch

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool SessionForwardSCmdMatch::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionForwardSCmdMatch::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionForwardSCmdMatch::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionForwardSCmdMatch::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command SessionForwardSCmdMatch::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardSCmdMatch.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SessionForwardSCmdMatch::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardSCmdMatch.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_SCMD_MATCH];
inline bool SessionForwardSCmdMatch::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionForwardSCmdMatch::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionForwardSCmdMatch::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionForwardSCmdMatch::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::MatchSParam SessionForwardSCmdMatch::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardSCmdMatch.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void SessionForwardSCmdMatch::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardSCmdMatch.param)
}

// optional uint64 charid = 3;
inline bool SessionForwardSCmdMatch::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionForwardSCmdMatch::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionForwardSCmdMatch::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionForwardSCmdMatch::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SessionForwardSCmdMatch::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardSCmdMatch.charid)
  return charid_;
}
inline void SessionForwardSCmdMatch::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardSCmdMatch.charid)
}

// optional uint32 zoneid = 4;
inline bool SessionForwardSCmdMatch::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionForwardSCmdMatch::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionForwardSCmdMatch::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionForwardSCmdMatch::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 SessionForwardSCmdMatch::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardSCmdMatch.zoneid)
  return zoneid_;
}
inline void SessionForwardSCmdMatch::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardSCmdMatch.zoneid)
}

// optional string name = 5;
inline bool SessionForwardSCmdMatch::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SessionForwardSCmdMatch::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SessionForwardSCmdMatch::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SessionForwardSCmdMatch::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SessionForwardSCmdMatch::name() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardSCmdMatch.name)
  return *name_;
}
inline void SessionForwardSCmdMatch::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardSCmdMatch.name)
}
inline void SessionForwardSCmdMatch::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SessionForwardSCmdMatch.name)
}
inline void SessionForwardSCmdMatch::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SessionForwardSCmdMatch.name)
}
inline ::std::string* SessionForwardSCmdMatch::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SessionForwardSCmdMatch.name)
  return name_;
}
inline ::std::string* SessionForwardSCmdMatch::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionForwardSCmdMatch::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SessionForwardSCmdMatch.name)
}

// optional bytes data = 6;
inline bool SessionForwardSCmdMatch::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SessionForwardSCmdMatch::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SessionForwardSCmdMatch::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SessionForwardSCmdMatch::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& SessionForwardSCmdMatch::data() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardSCmdMatch.data)
  return *data_;
}
inline void SessionForwardSCmdMatch::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardSCmdMatch.data)
}
inline void SessionForwardSCmdMatch::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SessionForwardSCmdMatch.data)
}
inline void SessionForwardSCmdMatch::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SessionForwardSCmdMatch.data)
}
inline ::std::string* SessionForwardSCmdMatch::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SessionForwardSCmdMatch.data)
  return data_;
}
inline ::std::string* SessionForwardSCmdMatch::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionForwardSCmdMatch::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SessionForwardSCmdMatch.data)
}

// optional uint32 len = 7;
inline bool SessionForwardSCmdMatch::has_len() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SessionForwardSCmdMatch::set_has_len() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SessionForwardSCmdMatch::clear_has_len() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SessionForwardSCmdMatch::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 SessionForwardSCmdMatch::len() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardSCmdMatch.len)
  return len_;
}
inline void SessionForwardSCmdMatch::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardSCmdMatch.len)
}

// -------------------------------------------------------------------

// SessionForwardMatchScene

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool SessionForwardMatchScene::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionForwardMatchScene::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionForwardMatchScene::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionForwardMatchScene::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command SessionForwardMatchScene::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardMatchScene.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SessionForwardMatchScene::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardMatchScene.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_MATCH_SCENE];
inline bool SessionForwardMatchScene::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionForwardMatchScene::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionForwardMatchScene::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionForwardMatchScene::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::MatchSParam SessionForwardMatchScene::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardMatchScene.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void SessionForwardMatchScene::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardMatchScene.param)
}

// optional uint64 charid = 3;
inline bool SessionForwardMatchScene::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionForwardMatchScene::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionForwardMatchScene::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionForwardMatchScene::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SessionForwardMatchScene::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardMatchScene.charid)
  return charid_;
}
inline void SessionForwardMatchScene::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardMatchScene.charid)
}

// optional bytes data = 4;
inline bool SessionForwardMatchScene::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionForwardMatchScene::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionForwardMatchScene::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionForwardMatchScene::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& SessionForwardMatchScene::data() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardMatchScene.data)
  return *data_;
}
inline void SessionForwardMatchScene::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardMatchScene.data)
}
inline void SessionForwardMatchScene::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SessionForwardMatchScene.data)
}
inline void SessionForwardMatchScene::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SessionForwardMatchScene.data)
}
inline ::std::string* SessionForwardMatchScene::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SessionForwardMatchScene.data)
  return data_;
}
inline ::std::string* SessionForwardMatchScene::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionForwardMatchScene::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SessionForwardMatchScene.data)
}

// optional uint32 len = 5;
inline bool SessionForwardMatchScene::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SessionForwardMatchScene::set_has_len() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SessionForwardMatchScene::clear_has_len() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SessionForwardMatchScene::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 SessionForwardMatchScene::len() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardMatchScene.len)
  return len_;
}
inline void SessionForwardMatchScene::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardMatchScene.len)
}

// -------------------------------------------------------------------

// SessionForwardMatchTeam

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool SessionForwardMatchTeam::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionForwardMatchTeam::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionForwardMatchTeam::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionForwardMatchTeam::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command SessionForwardMatchTeam::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardMatchTeam.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SessionForwardMatchTeam::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardMatchTeam.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_MATCH_TEAM];
inline bool SessionForwardMatchTeam::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionForwardMatchTeam::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionForwardMatchTeam::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionForwardMatchTeam::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::MatchSParam SessionForwardMatchTeam::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardMatchTeam.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void SessionForwardMatchTeam::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardMatchTeam.param)
}

// optional bytes data = 3;
inline bool SessionForwardMatchTeam::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionForwardMatchTeam::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionForwardMatchTeam::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionForwardMatchTeam::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& SessionForwardMatchTeam::data() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardMatchTeam.data)
  return *data_;
}
inline void SessionForwardMatchTeam::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardMatchTeam.data)
}
inline void SessionForwardMatchTeam::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SessionForwardMatchTeam.data)
}
inline void SessionForwardMatchTeam::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SessionForwardMatchTeam.data)
}
inline ::std::string* SessionForwardMatchTeam::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SessionForwardMatchTeam.data)
  return data_;
}
inline ::std::string* SessionForwardMatchTeam::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionForwardMatchTeam::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SessionForwardMatchTeam.data)
}

// optional uint32 len = 4;
inline bool SessionForwardMatchTeam::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionForwardMatchTeam::set_has_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionForwardMatchTeam::clear_has_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionForwardMatchTeam::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 SessionForwardMatchTeam::len() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardMatchTeam.len)
  return len_;
}
inline void SessionForwardMatchTeam::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardMatchTeam.len)
}

// -------------------------------------------------------------------

// SessionForwardTeamMatch

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool SessionForwardTeamMatch::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionForwardTeamMatch::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionForwardTeamMatch::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionForwardTeamMatch::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command SessionForwardTeamMatch::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardTeamMatch.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SessionForwardTeamMatch::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardTeamMatch.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_TEAM_MATCH];
inline bool SessionForwardTeamMatch::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionForwardTeamMatch::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionForwardTeamMatch::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionForwardTeamMatch::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::MatchSParam SessionForwardTeamMatch::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardTeamMatch.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void SessionForwardTeamMatch::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardTeamMatch.param)
}

// optional bytes data = 3;
inline bool SessionForwardTeamMatch::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionForwardTeamMatch::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionForwardTeamMatch::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionForwardTeamMatch::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& SessionForwardTeamMatch::data() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardTeamMatch.data)
  return *data_;
}
inline void SessionForwardTeamMatch::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardTeamMatch.data)
}
inline void SessionForwardTeamMatch::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SessionForwardTeamMatch.data)
}
inline void SessionForwardTeamMatch::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SessionForwardTeamMatch.data)
}
inline ::std::string* SessionForwardTeamMatch::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SessionForwardTeamMatch.data)
  return data_;
}
inline ::std::string* SessionForwardTeamMatch::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionForwardTeamMatch::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SessionForwardTeamMatch.data)
}

// optional uint32 len = 4;
inline bool SessionForwardTeamMatch::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionForwardTeamMatch::set_has_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionForwardTeamMatch::clear_has_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionForwardTeamMatch::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 SessionForwardTeamMatch::len() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardTeamMatch.len)
  return len_;
}
inline void SessionForwardTeamMatch::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardTeamMatch.len)
}

// -------------------------------------------------------------------

// RegPvpZoneMatch

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool RegPvpZoneMatch::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegPvpZoneMatch::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegPvpZoneMatch::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegPvpZoneMatch::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command RegPvpZoneMatch::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RegPvpZoneMatch.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RegPvpZoneMatch::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegPvpZoneMatch.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_REG_PVP_ZONE];
inline bool RegPvpZoneMatch::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegPvpZoneMatch::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegPvpZoneMatch::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegPvpZoneMatch::clear_param() {
  param_ = 13;
  clear_has_param();
}
inline ::Cmd::MatchSParam RegPvpZoneMatch::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RegPvpZoneMatch.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void RegPvpZoneMatch::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegPvpZoneMatch.param)
}

// optional uint32 category = 3;
inline bool RegPvpZoneMatch::has_category() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegPvpZoneMatch::set_has_category() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegPvpZoneMatch::clear_has_category() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegPvpZoneMatch::clear_category() {
  category_ = 0u;
  clear_has_category();
}
inline ::google::protobuf::uint32 RegPvpZoneMatch::category() const {
  // @@protoc_insertion_point(field_get:Cmd.RegPvpZoneMatch.category)
  return category_;
}
inline void RegPvpZoneMatch::set_category(::google::protobuf::uint32 value) {
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegPvpZoneMatch.category)
}

// optional uint32 zoneid = 4;
inline bool RegPvpZoneMatch::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegPvpZoneMatch::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegPvpZoneMatch::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegPvpZoneMatch::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 RegPvpZoneMatch::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.RegPvpZoneMatch.zoneid)
  return zoneid_;
}
inline void RegPvpZoneMatch::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegPvpZoneMatch.zoneid)
}

// -------------------------------------------------------------------

// EnterPvpMapSCmdMatch

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool EnterPvpMapSCmdMatch::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterPvpMapSCmdMatch::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterPvpMapSCmdMatch::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterPvpMapSCmdMatch::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command EnterPvpMapSCmdMatch::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterPvpMapSCmdMatch.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EnterPvpMapSCmdMatch::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterPvpMapSCmdMatch.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_ENTER_PVP_MAP];
inline bool EnterPvpMapSCmdMatch::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterPvpMapSCmdMatch::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterPvpMapSCmdMatch::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterPvpMapSCmdMatch::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::MatchSParam EnterPvpMapSCmdMatch::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterPvpMapSCmdMatch.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void EnterPvpMapSCmdMatch::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterPvpMapSCmdMatch.param)
}

// optional uint32 dest_zoneid = 3;
inline bool EnterPvpMapSCmdMatch::has_dest_zoneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterPvpMapSCmdMatch::set_has_dest_zoneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterPvpMapSCmdMatch::clear_has_dest_zoneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterPvpMapSCmdMatch::clear_dest_zoneid() {
  dest_zoneid_ = 0u;
  clear_has_dest_zoneid();
}
inline ::google::protobuf::uint32 EnterPvpMapSCmdMatch::dest_zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterPvpMapSCmdMatch.dest_zoneid)
  return dest_zoneid_;
}
inline void EnterPvpMapSCmdMatch::set_dest_zoneid(::google::protobuf::uint32 value) {
  set_has_dest_zoneid();
  dest_zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterPvpMapSCmdMatch.dest_zoneid)
}

// optional uint32 raidid = 4;
inline bool EnterPvpMapSCmdMatch::has_raidid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnterPvpMapSCmdMatch::set_has_raidid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnterPvpMapSCmdMatch::clear_has_raidid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnterPvpMapSCmdMatch::clear_raidid() {
  raidid_ = 0u;
  clear_has_raidid();
}
inline ::google::protobuf::uint32 EnterPvpMapSCmdMatch::raidid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterPvpMapSCmdMatch.raidid)
  return raidid_;
}
inline void EnterPvpMapSCmdMatch::set_raidid(::google::protobuf::uint32 value) {
  set_has_raidid();
  raidid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterPvpMapSCmdMatch.raidid)
}

// optional uint64 room_guid = 5;
inline bool EnterPvpMapSCmdMatch::has_room_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnterPvpMapSCmdMatch::set_has_room_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EnterPvpMapSCmdMatch::clear_has_room_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EnterPvpMapSCmdMatch::clear_room_guid() {
  room_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_room_guid();
}
inline ::google::protobuf::uint64 EnterPvpMapSCmdMatch::room_guid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterPvpMapSCmdMatch.room_guid)
  return room_guid_;
}
inline void EnterPvpMapSCmdMatch::set_room_guid(::google::protobuf::uint64 value) {
  set_has_room_guid();
  room_guid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterPvpMapSCmdMatch.room_guid)
}

// optional uint64 charid = 6;
inline bool EnterPvpMapSCmdMatch::has_charid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EnterPvpMapSCmdMatch::set_has_charid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EnterPvpMapSCmdMatch::clear_has_charid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EnterPvpMapSCmdMatch::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 EnterPvpMapSCmdMatch::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterPvpMapSCmdMatch.charid)
  return charid_;
}
inline void EnterPvpMapSCmdMatch::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterPvpMapSCmdMatch.charid)
}

// optional uint32 colorindex = 7;
inline bool EnterPvpMapSCmdMatch::has_colorindex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EnterPvpMapSCmdMatch::set_has_colorindex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EnterPvpMapSCmdMatch::clear_has_colorindex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EnterPvpMapSCmdMatch::clear_colorindex() {
  colorindex_ = 0u;
  clear_has_colorindex();
}
inline ::google::protobuf::uint32 EnterPvpMapSCmdMatch::colorindex() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterPvpMapSCmdMatch.colorindex)
  return colorindex_;
}
inline void EnterPvpMapSCmdMatch::set_colorindex(::google::protobuf::uint32 value) {
  set_has_colorindex();
  colorindex_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterPvpMapSCmdMatch.colorindex)
}

// -------------------------------------------------------------------

// LeavePvpMap

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool LeavePvpMap::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeavePvpMap::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeavePvpMap::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeavePvpMap::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command LeavePvpMap::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.LeavePvpMap.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void LeavePvpMap::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LeavePvpMap.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_LEAVE_PVP_MAP];
inline bool LeavePvpMap::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeavePvpMap::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeavePvpMap::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeavePvpMap::clear_param() {
  param_ = 16;
  clear_has_param();
}
inline ::Cmd::MatchSParam LeavePvpMap::param() const {
  // @@protoc_insertion_point(field_get:Cmd.LeavePvpMap.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void LeavePvpMap::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LeavePvpMap.param)
}

// optional uint64 roomid = 3;
inline bool LeavePvpMap::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LeavePvpMap::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LeavePvpMap::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LeavePvpMap::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 LeavePvpMap::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.LeavePvpMap.roomid)
  return roomid_;
}
inline void LeavePvpMap::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LeavePvpMap.roomid)
}

// optional uint64 charid = 4;
inline bool LeavePvpMap::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LeavePvpMap::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LeavePvpMap::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LeavePvpMap::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 LeavePvpMap::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.LeavePvpMap.charid)
  return charid_;
}
inline void LeavePvpMap::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LeavePvpMap.charid)
}

// optional uint32 originzoneid = 5;
inline bool LeavePvpMap::has_originzoneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LeavePvpMap::set_has_originzoneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LeavePvpMap::clear_has_originzoneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LeavePvpMap::clear_originzoneid() {
  originzoneid_ = 0u;
  clear_has_originzoneid();
}
inline ::google::protobuf::uint32 LeavePvpMap::originzoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.LeavePvpMap.originzoneid)
  return originzoneid_;
}
inline void LeavePvpMap::set_originzoneid(::google::protobuf::uint32 value) {
  set_has_originzoneid();
  originzoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LeavePvpMap.originzoneid)
}

// -------------------------------------------------------------------

// NtfJoinRoom

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool NtfJoinRoom::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfJoinRoom::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfJoinRoom::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfJoinRoom::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command NtfJoinRoom::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfJoinRoom.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfJoinRoom::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfJoinRoom.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_NTF_JOIN_ROOM];
inline bool NtfJoinRoom::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfJoinRoom::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfJoinRoom::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfJoinRoom::clear_param() {
  param_ = 17;
  clear_has_param();
}
inline ::Cmd::MatchSParam NtfJoinRoom::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfJoinRoom.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void NtfJoinRoom::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfJoinRoom.param)
}

// optional uint64 roomid = 3;
inline bool NtfJoinRoom::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfJoinRoom::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfJoinRoom::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfJoinRoom::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 NtfJoinRoom::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfJoinRoom.roomid)
  return roomid_;
}
inline void NtfJoinRoom::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfJoinRoom.roomid)
}

// optional uint64 charid = 4;
inline bool NtfJoinRoom::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtfJoinRoom::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtfJoinRoom::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtfJoinRoom::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 NtfJoinRoom::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfJoinRoom.charid)
  return charid_;
}
inline void NtfJoinRoom::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfJoinRoom.charid)
}

// optional uint64 teamid = 5;
inline bool NtfJoinRoom::has_teamid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NtfJoinRoom::set_has_teamid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NtfJoinRoom::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NtfJoinRoom::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 NtfJoinRoom::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfJoinRoom.teamid)
  return teamid_;
}
inline void NtfJoinRoom::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfJoinRoom.teamid)
}

// optional bool success = 6;
inline bool NtfJoinRoom::has_success() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NtfJoinRoom::set_has_success() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NtfJoinRoom::clear_has_success() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NtfJoinRoom::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool NtfJoinRoom::success() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfJoinRoom.success)
  return success_;
}
inline void NtfJoinRoom::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfJoinRoom.success)
}

// -------------------------------------------------------------------

// NtfLeaveRoom

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool NtfLeaveRoom::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfLeaveRoom::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfLeaveRoom::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfLeaveRoom::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command NtfLeaveRoom::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfLeaveRoom.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfLeaveRoom::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfLeaveRoom.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_NTF_LEAVE_ROOM];
inline bool NtfLeaveRoom::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfLeaveRoom::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfLeaveRoom::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfLeaveRoom::clear_param() {
  param_ = 18;
  clear_has_param();
}
inline ::Cmd::MatchSParam NtfLeaveRoom::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfLeaveRoom.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void NtfLeaveRoom::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfLeaveRoom.param)
}

// optional uint64 roomid = 3;
inline bool NtfLeaveRoom::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfLeaveRoom::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfLeaveRoom::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfLeaveRoom::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 NtfLeaveRoom::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfLeaveRoom.roomid)
  return roomid_;
}
inline void NtfLeaveRoom::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfLeaveRoom.roomid)
}

// optional uint64 teamid = 4;
inline bool NtfLeaveRoom::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtfLeaveRoom::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtfLeaveRoom::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtfLeaveRoom::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 NtfLeaveRoom::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfLeaveRoom.teamid)
  return teamid_;
}
inline void NtfLeaveRoom::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfLeaveRoom.teamid)
}

// -------------------------------------------------------------------

// CreateTeamMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool CreateTeamMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateTeamMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateTeamMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateTeamMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command CreateTeamMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateTeamMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CreateTeamMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateTeamMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CREATE_TEAM];
inline bool CreateTeamMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateTeamMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateTeamMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateTeamMatchSCmd::clear_param() {
  param_ = 19;
  clear_has_param();
}
inline ::Cmd::MatchSParam CreateTeamMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateTeamMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void CreateTeamMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateTeamMatchSCmd.param)
}

// optional uint64 teamid = 3;
inline bool CreateTeamMatchSCmd::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateTeamMatchSCmd::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateTeamMatchSCmd::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateTeamMatchSCmd::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 CreateTeamMatchSCmd::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateTeamMatchSCmd.teamid)
  return teamid_;
}
inline void CreateTeamMatchSCmd::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateTeamMatchSCmd.teamid)
}

// optional uint64 roomid = 4;
inline bool CreateTeamMatchSCmd::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateTeamMatchSCmd::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateTeamMatchSCmd::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateTeamMatchSCmd::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 CreateTeamMatchSCmd::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateTeamMatchSCmd.roomid)
  return roomid_;
}
inline void CreateTeamMatchSCmd::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateTeamMatchSCmd.roomid)
}

// optional uint64 charid = 5;
inline bool CreateTeamMatchSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateTeamMatchSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateTeamMatchSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateTeamMatchSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 CreateTeamMatchSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateTeamMatchSCmd.charid)
  return charid_;
}
inline void CreateTeamMatchSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateTeamMatchSCmd.charid)
}

// optional string name = 6;
inline bool CreateTeamMatchSCmd::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateTeamMatchSCmd::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateTeamMatchSCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateTeamMatchSCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CreateTeamMatchSCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateTeamMatchSCmd.name)
  return *name_;
}
inline void CreateTeamMatchSCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CreateTeamMatchSCmd.name)
}
inline void CreateTeamMatchSCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CreateTeamMatchSCmd.name)
}
inline void CreateTeamMatchSCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CreateTeamMatchSCmd.name)
}
inline ::std::string* CreateTeamMatchSCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CreateTeamMatchSCmd.name)
  return name_;
}
inline ::std::string* CreateTeamMatchSCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateTeamMatchSCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CreateTeamMatchSCmd.name)
}

// optional uint32 zoneid = 7;
inline bool CreateTeamMatchSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateTeamMatchSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateTeamMatchSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateTeamMatchSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 CreateTeamMatchSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateTeamMatchSCmd.zoneid)
  return zoneid_;
}
inline void CreateTeamMatchSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateTeamMatchSCmd.zoneid)
}

// optional uint64 new_teamid = 8;
inline bool CreateTeamMatchSCmd::has_new_teamid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreateTeamMatchSCmd::set_has_new_teamid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreateTeamMatchSCmd::clear_has_new_teamid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreateTeamMatchSCmd::clear_new_teamid() {
  new_teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_new_teamid();
}
inline ::google::protobuf::uint64 CreateTeamMatchSCmd::new_teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateTeamMatchSCmd.new_teamid)
  return new_teamid_;
}
inline void CreateTeamMatchSCmd::set_new_teamid(::google::protobuf::uint64 value) {
  set_has_new_teamid();
  new_teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateTeamMatchSCmd.new_teamid)
}

// optional .Cmd.EPvpType pvptype = 9;
inline bool CreateTeamMatchSCmd::has_pvptype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreateTeamMatchSCmd::set_has_pvptype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CreateTeamMatchSCmd::clear_has_pvptype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CreateTeamMatchSCmd::clear_pvptype() {
  pvptype_ = 0;
  clear_has_pvptype();
}
inline ::Cmd::EPvpType CreateTeamMatchSCmd::pvptype() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateTeamMatchSCmd.pvptype)
  return static_cast< ::Cmd::EPvpType >(pvptype_);
}
inline void CreateTeamMatchSCmd::set_pvptype(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_pvptype();
  pvptype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateTeamMatchSCmd.pvptype)
}

// -------------------------------------------------------------------

// PvpTeamMemberUpdateSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool PvpTeamMemberUpdateSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpTeamMemberUpdateSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpTeamMemberUpdateSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpTeamMemberUpdateSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command PvpTeamMemberUpdateSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpTeamMemberUpdateSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PvpTeamMemberUpdateSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PvpTeamMemberUpdateSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_PVP_MEMBERUPDATE];
inline bool PvpTeamMemberUpdateSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpTeamMemberUpdateSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpTeamMemberUpdateSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpTeamMemberUpdateSCmd::clear_param() {
  param_ = 20;
  clear_has_param();
}
inline ::Cmd::MatchSParam PvpTeamMemberUpdateSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpTeamMemberUpdateSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void PvpTeamMemberUpdateSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PvpTeamMemberUpdateSCmd.param)
}

// optional .Cmd.MatchTeamMemUpdateInfo data = 3;
inline bool PvpTeamMemberUpdateSCmd::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpTeamMemberUpdateSCmd::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpTeamMemberUpdateSCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpTeamMemberUpdateSCmd::clear_data() {
  if (data_ != NULL) data_->::Cmd::MatchTeamMemUpdateInfo::Clear();
  clear_has_data();
}
inline const ::Cmd::MatchTeamMemUpdateInfo& PvpTeamMemberUpdateSCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpTeamMemberUpdateSCmd.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::MatchTeamMemUpdateInfo* PvpTeamMemberUpdateSCmd::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::MatchTeamMemUpdateInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.PvpTeamMemberUpdateSCmd.data)
  return data_;
}
inline ::Cmd::MatchTeamMemUpdateInfo* PvpTeamMemberUpdateSCmd::release_data() {
  clear_has_data();
  ::Cmd::MatchTeamMemUpdateInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void PvpTeamMemberUpdateSCmd::set_allocated_data(::Cmd::MatchTeamMemUpdateInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PvpTeamMemberUpdateSCmd.data)
}

// -------------------------------------------------------------------

// PvpMemberDataUpdateSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool PvpMemberDataUpdateSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpMemberDataUpdateSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpMemberDataUpdateSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpMemberDataUpdateSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command PvpMemberDataUpdateSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpMemberDataUpdateSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PvpMemberDataUpdateSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PvpMemberDataUpdateSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_PVP_MEMBERDATAUPDATE];
inline bool PvpMemberDataUpdateSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpMemberDataUpdateSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpMemberDataUpdateSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpMemberDataUpdateSCmd::clear_param() {
  param_ = 21;
  clear_has_param();
}
inline ::Cmd::MatchSParam PvpMemberDataUpdateSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpMemberDataUpdateSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void PvpMemberDataUpdateSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PvpMemberDataUpdateSCmd.param)
}

// optional .Cmd.MatchTeamMemDataUpdateInfo data = 3;
inline bool PvpMemberDataUpdateSCmd::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpMemberDataUpdateSCmd::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpMemberDataUpdateSCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpMemberDataUpdateSCmd::clear_data() {
  if (data_ != NULL) data_->::Cmd::MatchTeamMemDataUpdateInfo::Clear();
  clear_has_data();
}
inline const ::Cmd::MatchTeamMemDataUpdateInfo& PvpMemberDataUpdateSCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpMemberDataUpdateSCmd.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::MatchTeamMemDataUpdateInfo* PvpMemberDataUpdateSCmd::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::MatchTeamMemDataUpdateInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.PvpMemberDataUpdateSCmd.data)
  return data_;
}
inline ::Cmd::MatchTeamMemDataUpdateInfo* PvpMemberDataUpdateSCmd::release_data() {
  clear_has_data();
  ::Cmd::MatchTeamMemDataUpdateInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void PvpMemberDataUpdateSCmd::set_allocated_data(::Cmd::MatchTeamMemDataUpdateInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PvpMemberDataUpdateSCmd.data)
}

// -------------------------------------------------------------------

// ApplyTeamMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool ApplyTeamMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApplyTeamMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ApplyTeamMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ApplyTeamMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command ApplyTeamMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ApplyTeamMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ApplyTeamMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ApplyTeamMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_APPLY_TEAM];
inline bool ApplyTeamMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApplyTeamMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ApplyTeamMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ApplyTeamMatchSCmd::clear_param() {
  param_ = 22;
  clear_has_param();
}
inline ::Cmd::MatchSParam ApplyTeamMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ApplyTeamMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void ApplyTeamMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ApplyTeamMatchSCmd.param)
}

// optional uint64 teamid = 3;
inline bool ApplyTeamMatchSCmd::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ApplyTeamMatchSCmd::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ApplyTeamMatchSCmd::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ApplyTeamMatchSCmd::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 ApplyTeamMatchSCmd::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.ApplyTeamMatchSCmd.teamid)
  return teamid_;
}
inline void ApplyTeamMatchSCmd::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ApplyTeamMatchSCmd.teamid)
}

// optional uint64 charid = 5;
inline bool ApplyTeamMatchSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ApplyTeamMatchSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ApplyTeamMatchSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ApplyTeamMatchSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ApplyTeamMatchSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ApplyTeamMatchSCmd.charid)
  return charid_;
}
inline void ApplyTeamMatchSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ApplyTeamMatchSCmd.charid)
}

// optional uint32 zoneid = 7;
inline bool ApplyTeamMatchSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ApplyTeamMatchSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ApplyTeamMatchSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ApplyTeamMatchSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 ApplyTeamMatchSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.ApplyTeamMatchSCmd.zoneid)
  return zoneid_;
}
inline void ApplyTeamMatchSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ApplyTeamMatchSCmd.zoneid)
}

// -------------------------------------------------------------------

// SyncTeamInfoMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool SyncTeamInfoMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncTeamInfoMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncTeamInfoMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncTeamInfoMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command SyncTeamInfoMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncTeamInfoMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SyncTeamInfoMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncTeamInfoMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_TEAM_INFO];
inline bool SyncTeamInfoMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncTeamInfoMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncTeamInfoMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncTeamInfoMatchSCmd::clear_param() {
  param_ = 23;
  clear_has_param();
}
inline ::Cmd::MatchSParam SyncTeamInfoMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncTeamInfoMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void SyncTeamInfoMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncTeamInfoMatchSCmd.param)
}

// optional uint64 teamid = 3;
inline bool SyncTeamInfoMatchSCmd::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncTeamInfoMatchSCmd::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncTeamInfoMatchSCmd::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncTeamInfoMatchSCmd::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 SyncTeamInfoMatchSCmd::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncTeamInfoMatchSCmd.teamid)
  return teamid_;
}
inline void SyncTeamInfoMatchSCmd::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncTeamInfoMatchSCmd.teamid)
}

// optional uint64 charid = 4;
inline bool SyncTeamInfoMatchSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncTeamInfoMatchSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncTeamInfoMatchSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncTeamInfoMatchSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SyncTeamInfoMatchSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncTeamInfoMatchSCmd.charid)
  return charid_;
}
inline void SyncTeamInfoMatchSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncTeamInfoMatchSCmd.charid)
}

// optional uint32 index = 5;
inline bool SyncTeamInfoMatchSCmd::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncTeamInfoMatchSCmd::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SyncTeamInfoMatchSCmd::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SyncTeamInfoMatchSCmd::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 SyncTeamInfoMatchSCmd::index() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncTeamInfoMatchSCmd.index)
  return index_;
}
inline void SyncTeamInfoMatchSCmd::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncTeamInfoMatchSCmd.index)
}

// -------------------------------------------------------------------

// SyncRaidSceneMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool SyncRaidSceneMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncRaidSceneMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncRaidSceneMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncRaidSceneMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command SyncRaidSceneMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRaidSceneMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SyncRaidSceneMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRaidSceneMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_RAIDSCENE];
inline bool SyncRaidSceneMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncRaidSceneMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncRaidSceneMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncRaidSceneMatchSCmd::clear_param() {
  param_ = 24;
  clear_has_param();
}
inline ::Cmd::MatchSParam SyncRaidSceneMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRaidSceneMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void SyncRaidSceneMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRaidSceneMatchSCmd.param)
}

// optional uint64 roomid = 3;
inline bool SyncRaidSceneMatchSCmd::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncRaidSceneMatchSCmd::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncRaidSceneMatchSCmd::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncRaidSceneMatchSCmd::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 SyncRaidSceneMatchSCmd::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRaidSceneMatchSCmd.roomid)
  return roomid_;
}
inline void SyncRaidSceneMatchSCmd::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRaidSceneMatchSCmd.roomid)
}

// optional bool open = 4;
inline bool SyncRaidSceneMatchSCmd::has_open() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncRaidSceneMatchSCmd::set_has_open() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncRaidSceneMatchSCmd::clear_has_open() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncRaidSceneMatchSCmd::clear_open() {
  open_ = false;
  clear_has_open();
}
inline bool SyncRaidSceneMatchSCmd::open() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRaidSceneMatchSCmd.open)
  return open_;
}
inline void SyncRaidSceneMatchSCmd::set_open(bool value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRaidSceneMatchSCmd.open)
}

// optional uint32 sceneid = 5;
inline bool SyncRaidSceneMatchSCmd::has_sceneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncRaidSceneMatchSCmd::set_has_sceneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SyncRaidSceneMatchSCmd::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SyncRaidSceneMatchSCmd::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 SyncRaidSceneMatchSCmd::sceneid() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRaidSceneMatchSCmd.sceneid)
  return sceneid_;
}
inline void SyncRaidSceneMatchSCmd::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRaidSceneMatchSCmd.sceneid)
}

// optional uint32 count = 6;
inline bool SyncRaidSceneMatchSCmd::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SyncRaidSceneMatchSCmd::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SyncRaidSceneMatchSCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SyncRaidSceneMatchSCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 SyncRaidSceneMatchSCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRaidSceneMatchSCmd.count)
  return count_;
}
inline void SyncRaidSceneMatchSCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRaidSceneMatchSCmd.count)
}

// optional uint32 zoneid = 7;
inline bool SyncRaidSceneMatchSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SyncRaidSceneMatchSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SyncRaidSceneMatchSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SyncRaidSceneMatchSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 SyncRaidSceneMatchSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRaidSceneMatchSCmd.zoneid)
  return zoneid_;
}
inline void SyncRaidSceneMatchSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRaidSceneMatchSCmd.zoneid)
}

// -------------------------------------------------------------------

// SuperGvgRoomData

// optional uint64 guildid = 1 [default = 0];
inline bool SuperGvgRoomData::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuperGvgRoomData::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuperGvgRoomData::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuperGvgRoomData::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 SuperGvgRoomData::guildid() const {
  // @@protoc_insertion_point(field_get:Cmd.SuperGvgRoomData.guildid)
  return guildid_;
}
inline void SuperGvgRoomData::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SuperGvgRoomData.guildid)
}

// optional uint32 color = 2 [default = 0];
inline bool SuperGvgRoomData::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuperGvgRoomData::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuperGvgRoomData::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuperGvgRoomData::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 SuperGvgRoomData::color() const {
  // @@protoc_insertion_point(field_get:Cmd.SuperGvgRoomData.color)
  return color_;
}
inline void SuperGvgRoomData::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SuperGvgRoomData.color)
}

// optional string guildname = 3;
inline bool SuperGvgRoomData::has_guildname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuperGvgRoomData::set_has_guildname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuperGvgRoomData::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuperGvgRoomData::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& SuperGvgRoomData::guildname() const {
  // @@protoc_insertion_point(field_get:Cmd.SuperGvgRoomData.guildname)
  return *guildname_;
}
inline void SuperGvgRoomData::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SuperGvgRoomData.guildname)
}
inline void SuperGvgRoomData::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SuperGvgRoomData.guildname)
}
inline void SuperGvgRoomData::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SuperGvgRoomData.guildname)
}
inline ::std::string* SuperGvgRoomData::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SuperGvgRoomData.guildname)
  return guildname_;
}
inline ::std::string* SuperGvgRoomData::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SuperGvgRoomData::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SuperGvgRoomData.guildname)
}

// optional string guildicon = 4;
inline bool SuperGvgRoomData::has_guildicon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SuperGvgRoomData::set_has_guildicon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SuperGvgRoomData::clear_has_guildicon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SuperGvgRoomData::clear_guildicon() {
  if (guildicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildicon_->clear();
  }
  clear_has_guildicon();
}
inline const ::std::string& SuperGvgRoomData::guildicon() const {
  // @@protoc_insertion_point(field_get:Cmd.SuperGvgRoomData.guildicon)
  return *guildicon_;
}
inline void SuperGvgRoomData::set_guildicon(const ::std::string& value) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SuperGvgRoomData.guildicon)
}
inline void SuperGvgRoomData::set_guildicon(const char* value) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SuperGvgRoomData.guildicon)
}
inline void SuperGvgRoomData::set_guildicon(const char* value, size_t size) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SuperGvgRoomData.guildicon)
}
inline ::std::string* SuperGvgRoomData::mutable_guildicon() {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildicon_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SuperGvgRoomData.guildicon)
  return guildicon_;
}
inline ::std::string* SuperGvgRoomData::release_guildicon() {
  clear_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildicon_;
    guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SuperGvgRoomData::set_allocated_guildicon(::std::string* guildicon) {
  if (guildicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildicon_;
  }
  if (guildicon) {
    set_has_guildicon();
    guildicon_ = guildicon;
  } else {
    clear_has_guildicon();
    guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SuperGvgRoomData.guildicon)
}

// optional uint32 firecount = 5;
inline bool SuperGvgRoomData::has_firecount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SuperGvgRoomData::set_has_firecount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SuperGvgRoomData::clear_has_firecount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SuperGvgRoomData::clear_firecount() {
  firecount_ = 0u;
  clear_has_firecount();
}
inline ::google::protobuf::uint32 SuperGvgRoomData::firecount() const {
  // @@protoc_insertion_point(field_get:Cmd.SuperGvgRoomData.firecount)
  return firecount_;
}
inline void SuperGvgRoomData::set_firecount(::google::protobuf::uint32 value) {
  set_has_firecount();
  firecount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SuperGvgRoomData.firecount)
}

// optional uint32 firescore = 6;
inline bool SuperGvgRoomData::has_firescore() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SuperGvgRoomData::set_has_firescore() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SuperGvgRoomData::clear_has_firescore() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SuperGvgRoomData::clear_firescore() {
  firescore_ = 0u;
  clear_has_firescore();
}
inline ::google::protobuf::uint32 SuperGvgRoomData::firescore() const {
  // @@protoc_insertion_point(field_get:Cmd.SuperGvgRoomData.firescore)
  return firescore_;
}
inline void SuperGvgRoomData::set_firescore(::google::protobuf::uint32 value) {
  set_has_firescore();
  firescore_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SuperGvgRoomData.firescore)
}

// -------------------------------------------------------------------

// TeamPwsUserCurScore

// optional uint64 charid = 1;
inline bool TeamPwsUserCurScore::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamPwsUserCurScore::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamPwsUserCurScore::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamPwsUserCurScore::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 TeamPwsUserCurScore::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsUserCurScore.charid)
  return charid_;
}
inline void TeamPwsUserCurScore::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsUserCurScore.charid)
}

// optional uint32 score = 2;
inline bool TeamPwsUserCurScore::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamPwsUserCurScore::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamPwsUserCurScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamPwsUserCurScore::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TeamPwsUserCurScore::score() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsUserCurScore.score)
  return score_;
}
inline void TeamPwsUserCurScore::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsUserCurScore.score)
}

// -------------------------------------------------------------------

// TeamPwsRoomData

// optional uint64 teamid = 1;
inline bool TeamPwsRoomData::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamPwsRoomData::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamPwsRoomData::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamPwsRoomData::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TeamPwsRoomData::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsRoomData.teamid)
  return teamid_;
}
inline void TeamPwsRoomData::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsRoomData.teamid)
}

// optional uint32 color = 2;
inline bool TeamPwsRoomData::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamPwsRoomData::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamPwsRoomData::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamPwsRoomData::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 TeamPwsRoomData::color() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsRoomData.color)
  return color_;
}
inline void TeamPwsRoomData::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsRoomData.color)
}

// repeated .Cmd.TeamPwsUserCurScore users = 3;
inline int TeamPwsRoomData::users_size() const {
  return users_.size();
}
inline void TeamPwsRoomData::clear_users() {
  users_.Clear();
}
inline const ::Cmd::TeamPwsUserCurScore& TeamPwsRoomData::users(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsRoomData.users)
  return users_.Get(index);
}
inline ::Cmd::TeamPwsUserCurScore* TeamPwsRoomData::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.TeamPwsRoomData.users)
  return users_.Mutable(index);
}
inline ::Cmd::TeamPwsUserCurScore* TeamPwsRoomData::add_users() {
  // @@protoc_insertion_point(field_add:Cmd.TeamPwsRoomData.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsUserCurScore >&
TeamPwsRoomData::users() const {
  // @@protoc_insertion_point(field_list:Cmd.TeamPwsRoomData.users)
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsUserCurScore >*
TeamPwsRoomData::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.TeamPwsRoomData.users)
  return &users_;
}

// -------------------------------------------------------------------

// SyncRoomSceneMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool SyncRoomSceneMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncRoomSceneMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncRoomSceneMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncRoomSceneMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command SyncRoomSceneMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRoomSceneMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SyncRoomSceneMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRoomSceneMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_ROOMINFO];
inline bool SyncRoomSceneMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncRoomSceneMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncRoomSceneMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncRoomSceneMatchSCmd::clear_param() {
  param_ = 33;
  clear_has_param();
}
inline ::Cmd::MatchSParam SyncRoomSceneMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRoomSceneMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void SyncRoomSceneMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRoomSceneMatchSCmd.param)
}

// optional uint64 roomid = 3;
inline bool SyncRoomSceneMatchSCmd::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncRoomSceneMatchSCmd::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncRoomSceneMatchSCmd::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncRoomSceneMatchSCmd::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 SyncRoomSceneMatchSCmd::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRoomSceneMatchSCmd.roomid)
  return roomid_;
}
inline void SyncRoomSceneMatchSCmd::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRoomSceneMatchSCmd.roomid)
}

// optional uint32 sceneid = 4;
inline bool SyncRoomSceneMatchSCmd::has_sceneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncRoomSceneMatchSCmd::set_has_sceneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncRoomSceneMatchSCmd::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncRoomSceneMatchSCmd::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 SyncRoomSceneMatchSCmd::sceneid() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRoomSceneMatchSCmd.sceneid)
  return sceneid_;
}
inline void SyncRoomSceneMatchSCmd::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRoomSceneMatchSCmd.sceneid)
}

// optional uint32 zoneid = 5;
inline bool SyncRoomSceneMatchSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncRoomSceneMatchSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SyncRoomSceneMatchSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SyncRoomSceneMatchSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 SyncRoomSceneMatchSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRoomSceneMatchSCmd.zoneid)
  return zoneid_;
}
inline void SyncRoomSceneMatchSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRoomSceneMatchSCmd.zoneid)
}

// optional uint32 roomsize = 6 [default = 0];
inline bool SyncRoomSceneMatchSCmd::has_roomsize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SyncRoomSceneMatchSCmd::set_has_roomsize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SyncRoomSceneMatchSCmd::clear_has_roomsize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SyncRoomSceneMatchSCmd::clear_roomsize() {
  roomsize_ = 0u;
  clear_has_roomsize();
}
inline ::google::protobuf::uint32 SyncRoomSceneMatchSCmd::roomsize() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRoomSceneMatchSCmd.roomsize)
  return roomsize_;
}
inline void SyncRoomSceneMatchSCmd::set_roomsize(::google::protobuf::uint32 value) {
  set_has_roomsize();
  roomsize_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRoomSceneMatchSCmd.roomsize)
}

// repeated .Cmd.SuperGvgRoomData sugvgdata = 7;
inline int SyncRoomSceneMatchSCmd::sugvgdata_size() const {
  return sugvgdata_.size();
}
inline void SyncRoomSceneMatchSCmd::clear_sugvgdata() {
  sugvgdata_.Clear();
}
inline const ::Cmd::SuperGvgRoomData& SyncRoomSceneMatchSCmd::sugvgdata(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRoomSceneMatchSCmd.sugvgdata)
  return sugvgdata_.Get(index);
}
inline ::Cmd::SuperGvgRoomData* SyncRoomSceneMatchSCmd::mutable_sugvgdata(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.SyncRoomSceneMatchSCmd.sugvgdata)
  return sugvgdata_.Mutable(index);
}
inline ::Cmd::SuperGvgRoomData* SyncRoomSceneMatchSCmd::add_sugvgdata() {
  // @@protoc_insertion_point(field_add:Cmd.SyncRoomSceneMatchSCmd.sugvgdata)
  return sugvgdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SuperGvgRoomData >&
SyncRoomSceneMatchSCmd::sugvgdata() const {
  // @@protoc_insertion_point(field_list:Cmd.SyncRoomSceneMatchSCmd.sugvgdata)
  return sugvgdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SuperGvgRoomData >*
SyncRoomSceneMatchSCmd::mutable_sugvgdata() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SyncRoomSceneMatchSCmd.sugvgdata)
  return &sugvgdata_;
}

// optional uint32 level = 8 [default = 0];
inline bool SyncRoomSceneMatchSCmd::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SyncRoomSceneMatchSCmd::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SyncRoomSceneMatchSCmd::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SyncRoomSceneMatchSCmd::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 SyncRoomSceneMatchSCmd::level() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRoomSceneMatchSCmd.level)
  return level_;
}
inline void SyncRoomSceneMatchSCmd::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRoomSceneMatchSCmd.level)
}

// optional uint32 raidtime = 9 [default = 0];
inline bool SyncRoomSceneMatchSCmd::has_raidtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SyncRoomSceneMatchSCmd::set_has_raidtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SyncRoomSceneMatchSCmd::clear_has_raidtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SyncRoomSceneMatchSCmd::clear_raidtime() {
  raidtime_ = 0u;
  clear_has_raidtime();
}
inline ::google::protobuf::uint32 SyncRoomSceneMatchSCmd::raidtime() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRoomSceneMatchSCmd.raidtime)
  return raidtime_;
}
inline void SyncRoomSceneMatchSCmd::set_raidtime(::google::protobuf::uint32 value) {
  set_has_raidtime();
  raidtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRoomSceneMatchSCmd.raidtime)
}

// repeated .Cmd.TeamPwsRoomData pwsdata = 10;
inline int SyncRoomSceneMatchSCmd::pwsdata_size() const {
  return pwsdata_.size();
}
inline void SyncRoomSceneMatchSCmd::clear_pwsdata() {
  pwsdata_.Clear();
}
inline const ::Cmd::TeamPwsRoomData& SyncRoomSceneMatchSCmd::pwsdata(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRoomSceneMatchSCmd.pwsdata)
  return pwsdata_.Get(index);
}
inline ::Cmd::TeamPwsRoomData* SyncRoomSceneMatchSCmd::mutable_pwsdata(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.SyncRoomSceneMatchSCmd.pwsdata)
  return pwsdata_.Mutable(index);
}
inline ::Cmd::TeamPwsRoomData* SyncRoomSceneMatchSCmd::add_pwsdata() {
  // @@protoc_insertion_point(field_add:Cmd.SyncRoomSceneMatchSCmd.pwsdata)
  return pwsdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsRoomData >&
SyncRoomSceneMatchSCmd::pwsdata() const {
  // @@protoc_insertion_point(field_list:Cmd.SyncRoomSceneMatchSCmd.pwsdata)
  return pwsdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsRoomData >*
SyncRoomSceneMatchSCmd::mutable_pwsdata() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SyncRoomSceneMatchSCmd.pwsdata)
  return &pwsdata_;
}

// optional .Cmd.EPvpType pvptype = 11 [default = EPVPTYPE_MIN];
inline bool SyncRoomSceneMatchSCmd::has_pvptype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SyncRoomSceneMatchSCmd::set_has_pvptype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SyncRoomSceneMatchSCmd::clear_has_pvptype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SyncRoomSceneMatchSCmd::clear_pvptype() {
  pvptype_ = 0;
  clear_has_pvptype();
}
inline ::Cmd::EPvpType SyncRoomSceneMatchSCmd::pvptype() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncRoomSceneMatchSCmd.pvptype)
  return static_cast< ::Cmd::EPvpType >(pvptype_);
}
inline void SyncRoomSceneMatchSCmd::set_pvptype(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_pvptype();
  pvptype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncRoomSceneMatchSCmd.pvptype)
}

// -------------------------------------------------------------------

// KickTeamMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool KickTeamMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickTeamMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickTeamMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickTeamMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command KickTeamMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.KickTeamMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void KickTeamMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickTeamMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_KICK_TEAM];
inline bool KickTeamMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KickTeamMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KickTeamMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KickTeamMatchSCmd::clear_param() {
  param_ = 25;
  clear_has_param();
}
inline ::Cmd::MatchSParam KickTeamMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.KickTeamMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void KickTeamMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickTeamMatchSCmd.param)
}

// optional uint64 teamid = 3;
inline bool KickTeamMatchSCmd::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KickTeamMatchSCmd::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KickTeamMatchSCmd::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KickTeamMatchSCmd::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 KickTeamMatchSCmd::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.KickTeamMatchSCmd.teamid)
  return teamid_;
}
inline void KickTeamMatchSCmd::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickTeamMatchSCmd.teamid)
}

// optional uint64 charid = 5;
inline bool KickTeamMatchSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KickTeamMatchSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KickTeamMatchSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KickTeamMatchSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 KickTeamMatchSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.KickTeamMatchSCmd.charid)
  return charid_;
}
inline void KickTeamMatchSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickTeamMatchSCmd.charid)
}

// optional uint64 roomid = 6;
inline bool KickTeamMatchSCmd::has_roomid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KickTeamMatchSCmd::set_has_roomid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KickTeamMatchSCmd::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KickTeamMatchSCmd::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 KickTeamMatchSCmd::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.KickTeamMatchSCmd.roomid)
  return roomid_;
}
inline void KickTeamMatchSCmd::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickTeamMatchSCmd.roomid)
}

// optional uint32 zoneid = 7;
inline bool KickTeamMatchSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KickTeamMatchSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KickTeamMatchSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KickTeamMatchSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 KickTeamMatchSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.KickTeamMatchSCmd.zoneid)
  return zoneid_;
}
inline void KickTeamMatchSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickTeamMatchSCmd.zoneid)
}

// -------------------------------------------------------------------

// KickUserFromPvpMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool KickUserFromPvpMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickUserFromPvpMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickUserFromPvpMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickUserFromPvpMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command KickUserFromPvpMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.KickUserFromPvpMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void KickUserFromPvpMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickUserFromPvpMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_KICK_USER];
inline bool KickUserFromPvpMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KickUserFromPvpMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KickUserFromPvpMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KickUserFromPvpMatchSCmd::clear_param() {
  param_ = 26;
  clear_has_param();
}
inline ::Cmd::MatchSParam KickUserFromPvpMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.KickUserFromPvpMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void KickUserFromPvpMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickUserFromPvpMatchSCmd.param)
}

// required uint64 charid = 3;
inline bool KickUserFromPvpMatchSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KickUserFromPvpMatchSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KickUserFromPvpMatchSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KickUserFromPvpMatchSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 KickUserFromPvpMatchSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.KickUserFromPvpMatchSCmd.charid)
  return charid_;
}
inline void KickUserFromPvpMatchSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickUserFromPvpMatchSCmd.charid)
}

// required uint32 zoneid = 4;
inline bool KickUserFromPvpMatchSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KickUserFromPvpMatchSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KickUserFromPvpMatchSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KickUserFromPvpMatchSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 KickUserFromPvpMatchSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.KickUserFromPvpMatchSCmd.zoneid)
  return zoneid_;
}
inline void KickUserFromPvpMatchSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickUserFromPvpMatchSCmd.zoneid)
}

// -------------------------------------------------------------------

// ResetPvpMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool ResetPvpMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResetPvpMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResetPvpMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResetPvpMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command ResetPvpMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ResetPvpMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ResetPvpMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ResetPvpMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_RESET_PVP];
inline bool ResetPvpMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResetPvpMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResetPvpMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResetPvpMatchSCmd::clear_param() {
  param_ = 27;
  clear_has_param();
}
inline ::Cmd::MatchSParam ResetPvpMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ResetPvpMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void ResetPvpMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ResetPvpMatchSCmd.param)
}

// -------------------------------------------------------------------

// SwitchPvpMathcSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool SwitchPvpMathcSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SwitchPvpMathcSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SwitchPvpMathcSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SwitchPvpMathcSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command SwitchPvpMathcSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SwitchPvpMathcSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SwitchPvpMathcSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SwitchPvpMathcSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SWITCH_PVP];
inline bool SwitchPvpMathcSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SwitchPvpMathcSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SwitchPvpMathcSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SwitchPvpMathcSCmd::clear_param() {
  param_ = 28;
  clear_has_param();
}
inline ::Cmd::MatchSParam SwitchPvpMathcSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SwitchPvpMathcSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void SwitchPvpMathcSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SwitchPvpMathcSCmd.param)
}

// optional bool open = 3 [default = false];
inline bool SwitchPvpMathcSCmd::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SwitchPvpMathcSCmd::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SwitchPvpMathcSCmd::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SwitchPvpMathcSCmd::clear_open() {
  open_ = false;
  clear_has_open();
}
inline bool SwitchPvpMathcSCmd::open() const {
  // @@protoc_insertion_point(field_get:Cmd.SwitchPvpMathcSCmd.open)
  return open_;
}
inline void SwitchPvpMathcSCmd::set_open(bool value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SwitchPvpMathcSCmd.open)
}

// required .Cmd.EPvpType etype = 4;
inline bool SwitchPvpMathcSCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SwitchPvpMathcSCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SwitchPvpMathcSCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SwitchPvpMathcSCmd::clear_etype() {
  etype_ = 0;
  clear_has_etype();
}
inline ::Cmd::EPvpType SwitchPvpMathcSCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.SwitchPvpMathcSCmd.etype)
  return static_cast< ::Cmd::EPvpType >(etype_);
}
inline void SwitchPvpMathcSCmd::set_etype(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SwitchPvpMathcSCmd.etype)
}

// -------------------------------------------------------------------

// ActivityMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool ActivityMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command ActivityMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ActivityMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActivityMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_POLLY_ACTIVITY];
inline bool ActivityMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityMatchSCmd::clear_param() {
  param_ = 29;
  clear_has_param();
}
inline ::Cmd::MatchSParam ActivityMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void ActivityMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActivityMatchSCmd.param)
}

// optional bool open = 3;
inline bool ActivityMatchSCmd::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityMatchSCmd::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityMatchSCmd::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityMatchSCmd::clear_open() {
  open_ = false;
  clear_has_open();
}
inline bool ActivityMatchSCmd::open() const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityMatchSCmd.open)
  return open_;
}
inline void ActivityMatchSCmd::set_open(bool value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActivityMatchSCmd.open)
}

// optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_POLLY];
inline bool ActivityMatchSCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityMatchSCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActivityMatchSCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActivityMatchSCmd::clear_etype() {
  etype_ = 4;
  clear_has_etype();
}
inline ::Cmd::EPvpType ActivityMatchSCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityMatchSCmd.etype)
  return static_cast< ::Cmd::EPvpType >(etype_);
}
inline void ActivityMatchSCmd::set_etype(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActivityMatchSCmd.etype)
}

// optional bool server_restart = 5 [default = false];
inline bool ActivityMatchSCmd::has_server_restart() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActivityMatchSCmd::set_has_server_restart() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ActivityMatchSCmd::clear_has_server_restart() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ActivityMatchSCmd::clear_server_restart() {
  server_restart_ = false;
  clear_has_server_restart();
}
inline bool ActivityMatchSCmd::server_restart() const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityMatchSCmd.server_restart)
  return server_restart_;
}
inline void ActivityMatchSCmd::set_server_restart(bool value) {
  set_has_server_restart();
  server_restart_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActivityMatchSCmd.server_restart)
}

// -------------------------------------------------------------------

// CheckCanBuyMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool CheckCanBuyMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckCanBuyMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckCanBuyMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckCanBuyMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command CheckCanBuyMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckCanBuyMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CheckCanBuyMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckCanBuyMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CHECK_CAN_BUY];
inline bool CheckCanBuyMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckCanBuyMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckCanBuyMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckCanBuyMatchSCmd::clear_param() {
  param_ = 30;
  clear_has_param();
}
inline ::Cmd::MatchSParam CheckCanBuyMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckCanBuyMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void CheckCanBuyMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckCanBuyMatchSCmd.param)
}

// optional uint32 id = 3 [default = 0];
inline bool CheckCanBuyMatchSCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckCanBuyMatchSCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckCanBuyMatchSCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckCanBuyMatchSCmd::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CheckCanBuyMatchSCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckCanBuyMatchSCmd.id)
  return id_;
}
inline void CheckCanBuyMatchSCmd::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckCanBuyMatchSCmd.id)
}

// optional uint32 count = 4 [default = 0];
inline bool CheckCanBuyMatchSCmd::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckCanBuyMatchSCmd::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckCanBuyMatchSCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckCanBuyMatchSCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 CheckCanBuyMatchSCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckCanBuyMatchSCmd.count)
  return count_;
}
inline void CheckCanBuyMatchSCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckCanBuyMatchSCmd.count)
}

// optional uint32 price = 5 [default = 0];
inline bool CheckCanBuyMatchSCmd::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CheckCanBuyMatchSCmd::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CheckCanBuyMatchSCmd::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CheckCanBuyMatchSCmd::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 CheckCanBuyMatchSCmd::price() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckCanBuyMatchSCmd.price)
  return price_;
}
inline void CheckCanBuyMatchSCmd::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckCanBuyMatchSCmd.price)
}

// optional uint32 price2 = 6 [default = 0];
inline bool CheckCanBuyMatchSCmd::has_price2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CheckCanBuyMatchSCmd::set_has_price2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CheckCanBuyMatchSCmd::clear_has_price2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CheckCanBuyMatchSCmd::clear_price2() {
  price2_ = 0u;
  clear_has_price2();
}
inline ::google::protobuf::uint32 CheckCanBuyMatchSCmd::price2() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckCanBuyMatchSCmd.price2)
  return price2_;
}
inline void CheckCanBuyMatchSCmd::set_price2(::google::protobuf::uint32 value) {
  set_has_price2();
  price2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckCanBuyMatchSCmd.price2)
}

// optional bool success = 7;
inline bool CheckCanBuyMatchSCmd::has_success() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CheckCanBuyMatchSCmd::set_has_success() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CheckCanBuyMatchSCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CheckCanBuyMatchSCmd::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool CheckCanBuyMatchSCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckCanBuyMatchSCmd.success)
  return success_;
}
inline void CheckCanBuyMatchSCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckCanBuyMatchSCmd.success)
}

// optional uint64 charid = 8;
inline bool CheckCanBuyMatchSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CheckCanBuyMatchSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CheckCanBuyMatchSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CheckCanBuyMatchSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 CheckCanBuyMatchSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckCanBuyMatchSCmd.charid)
  return charid_;
}
inline void CheckCanBuyMatchSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckCanBuyMatchSCmd.charid)
}

// optional uint32 zoneid = 9;
inline bool CheckCanBuyMatchSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CheckCanBuyMatchSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CheckCanBuyMatchSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CheckCanBuyMatchSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 CheckCanBuyMatchSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckCanBuyMatchSCmd.zoneid)
  return zoneid_;
}
inline void CheckCanBuyMatchSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckCanBuyMatchSCmd.zoneid)
}

// -------------------------------------------------------------------

// AddBuyCntMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool AddBuyCntMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddBuyCntMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddBuyCntMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddBuyCntMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command AddBuyCntMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AddBuyCntMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AddBuyCntMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddBuyCntMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_ADD_BUY_CNT];
inline bool AddBuyCntMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddBuyCntMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddBuyCntMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddBuyCntMatchSCmd::clear_param() {
  param_ = 31;
  clear_has_param();
}
inline ::Cmd::MatchSParam AddBuyCntMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AddBuyCntMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void AddBuyCntMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddBuyCntMatchSCmd.param)
}

// optional uint32 id = 3;
inline bool AddBuyCntMatchSCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddBuyCntMatchSCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddBuyCntMatchSCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddBuyCntMatchSCmd::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AddBuyCntMatchSCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.AddBuyCntMatchSCmd.id)
  return id_;
}
inline void AddBuyCntMatchSCmd::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddBuyCntMatchSCmd.id)
}

// optional uint32 count = 4;
inline bool AddBuyCntMatchSCmd::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddBuyCntMatchSCmd::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddBuyCntMatchSCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddBuyCntMatchSCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 AddBuyCntMatchSCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.AddBuyCntMatchSCmd.count)
  return count_;
}
inline void AddBuyCntMatchSCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddBuyCntMatchSCmd.count)
}

// optional uint64 charid = 5;
inline bool AddBuyCntMatchSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddBuyCntMatchSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddBuyCntMatchSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AddBuyCntMatchSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 AddBuyCntMatchSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.AddBuyCntMatchSCmd.charid)
  return charid_;
}
inline void AddBuyCntMatchSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddBuyCntMatchSCmd.charid)
}

// optional uint32 zoneid = 6;
inline bool AddBuyCntMatchSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AddBuyCntMatchSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AddBuyCntMatchSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AddBuyCntMatchSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 AddBuyCntMatchSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.AddBuyCntMatchSCmd.zoneid)
  return zoneid_;
}
inline void AddBuyCntMatchSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddBuyCntMatchSCmd.zoneid)
}

// -------------------------------------------------------------------

// QuerySoldCntMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool QuerySoldCntMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuerySoldCntMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuerySoldCntMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuerySoldCntMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command QuerySoldCntMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuerySoldCntMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuerySoldCntMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuerySoldCntMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_QUERY_SOLD_CNT];
inline bool QuerySoldCntMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuerySoldCntMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuerySoldCntMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuerySoldCntMatchSCmd::clear_param() {
  param_ = 32;
  clear_has_param();
}
inline ::Cmd::MatchSParam QuerySoldCntMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuerySoldCntMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void QuerySoldCntMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuerySoldCntMatchSCmd.param)
}

// optional uint64 charid = 3;
inline bool QuerySoldCntMatchSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuerySoldCntMatchSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuerySoldCntMatchSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuerySoldCntMatchSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 QuerySoldCntMatchSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuerySoldCntMatchSCmd.charid)
  return charid_;
}
inline void QuerySoldCntMatchSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuerySoldCntMatchSCmd.charid)
}

// optional uint32 zoneid = 4;
inline bool QuerySoldCntMatchSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuerySoldCntMatchSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuerySoldCntMatchSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuerySoldCntMatchSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 QuerySoldCntMatchSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuerySoldCntMatchSCmd.zoneid)
  return zoneid_;
}
inline void QuerySoldCntMatchSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuerySoldCntMatchSCmd.zoneid)
}

// -------------------------------------------------------------------

// JoinSuperGvgMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool JoinSuperGvgMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinSuperGvgMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinSuperGvgMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinSuperGvgMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command JoinSuperGvgMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinSuperGvgMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void JoinSuperGvgMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinSuperGvgMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SUPERGVG_JOIN];
inline bool JoinSuperGvgMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinSuperGvgMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinSuperGvgMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinSuperGvgMatchSCmd::clear_param() {
  param_ = 34;
  clear_has_param();
}
inline ::Cmd::MatchSParam JoinSuperGvgMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinSuperGvgMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void JoinSuperGvgMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinSuperGvgMatchSCmd.param)
}

// required uint64 guildid = 3;
inline bool JoinSuperGvgMatchSCmd::has_guildid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JoinSuperGvgMatchSCmd::set_has_guildid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JoinSuperGvgMatchSCmd::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JoinSuperGvgMatchSCmd::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 JoinSuperGvgMatchSCmd::guildid() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinSuperGvgMatchSCmd.guildid)
  return guildid_;
}
inline void JoinSuperGvgMatchSCmd::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinSuperGvgMatchSCmd.guildid)
}

// required uint32 zoneid = 4;
inline bool JoinSuperGvgMatchSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JoinSuperGvgMatchSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JoinSuperGvgMatchSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JoinSuperGvgMatchSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 JoinSuperGvgMatchSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinSuperGvgMatchSCmd.zoneid)
  return zoneid_;
}
inline void JoinSuperGvgMatchSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinSuperGvgMatchSCmd.zoneid)
}

// optional string guildname = 5;
inline bool JoinSuperGvgMatchSCmd::has_guildname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JoinSuperGvgMatchSCmd::set_has_guildname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JoinSuperGvgMatchSCmd::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JoinSuperGvgMatchSCmd::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& JoinSuperGvgMatchSCmd::guildname() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinSuperGvgMatchSCmd.guildname)
  return *guildname_;
}
inline void JoinSuperGvgMatchSCmd::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.JoinSuperGvgMatchSCmd.guildname)
}
inline void JoinSuperGvgMatchSCmd::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.JoinSuperGvgMatchSCmd.guildname)
}
inline void JoinSuperGvgMatchSCmd::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.JoinSuperGvgMatchSCmd.guildname)
}
inline ::std::string* JoinSuperGvgMatchSCmd::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.JoinSuperGvgMatchSCmd.guildname)
  return guildname_;
}
inline ::std::string* JoinSuperGvgMatchSCmd::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void JoinSuperGvgMatchSCmd::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.JoinSuperGvgMatchSCmd.guildname)
}

// optional string guildicon = 6;
inline bool JoinSuperGvgMatchSCmd::has_guildicon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JoinSuperGvgMatchSCmd::set_has_guildicon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JoinSuperGvgMatchSCmd::clear_has_guildicon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JoinSuperGvgMatchSCmd::clear_guildicon() {
  if (guildicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildicon_->clear();
  }
  clear_has_guildicon();
}
inline const ::std::string& JoinSuperGvgMatchSCmd::guildicon() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinSuperGvgMatchSCmd.guildicon)
  return *guildicon_;
}
inline void JoinSuperGvgMatchSCmd::set_guildicon(const ::std::string& value) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.JoinSuperGvgMatchSCmd.guildicon)
}
inline void JoinSuperGvgMatchSCmd::set_guildicon(const char* value) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.JoinSuperGvgMatchSCmd.guildicon)
}
inline void JoinSuperGvgMatchSCmd::set_guildicon(const char* value, size_t size) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.JoinSuperGvgMatchSCmd.guildicon)
}
inline ::std::string* JoinSuperGvgMatchSCmd::mutable_guildicon() {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildicon_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.JoinSuperGvgMatchSCmd.guildicon)
  return guildicon_;
}
inline ::std::string* JoinSuperGvgMatchSCmd::release_guildicon() {
  clear_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildicon_;
    guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void JoinSuperGvgMatchSCmd::set_allocated_guildicon(::std::string* guildicon) {
  if (guildicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildicon_;
  }
  if (guildicon) {
    set_has_guildicon();
    guildicon_ = guildicon;
  } else {
    clear_has_guildicon();
    guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.JoinSuperGvgMatchSCmd.guildicon)
}

// optional uint32 firecount = 7;
inline bool JoinSuperGvgMatchSCmd::has_firecount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JoinSuperGvgMatchSCmd::set_has_firecount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JoinSuperGvgMatchSCmd::clear_has_firecount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JoinSuperGvgMatchSCmd::clear_firecount() {
  firecount_ = 0u;
  clear_has_firecount();
}
inline ::google::protobuf::uint32 JoinSuperGvgMatchSCmd::firecount() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinSuperGvgMatchSCmd.firecount)
  return firecount_;
}
inline void JoinSuperGvgMatchSCmd::set_firecount(::google::protobuf::uint32 value) {
  set_has_firecount();
  firecount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinSuperGvgMatchSCmd.firecount)
}

// optional uint32 firescore = 8;
inline bool JoinSuperGvgMatchSCmd::has_firescore() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JoinSuperGvgMatchSCmd::set_has_firescore() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JoinSuperGvgMatchSCmd::clear_has_firescore() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JoinSuperGvgMatchSCmd::clear_firescore() {
  firescore_ = 0u;
  clear_has_firescore();
}
inline ::google::protobuf::uint32 JoinSuperGvgMatchSCmd::firescore() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinSuperGvgMatchSCmd.firescore)
  return firescore_;
}
inline void JoinSuperGvgMatchSCmd::set_firescore(::google::protobuf::uint32 value) {
  set_has_firescore();
  firescore_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinSuperGvgMatchSCmd.firescore)
}

// optional uint32 begintime = 9 [default = 0];
inline bool JoinSuperGvgMatchSCmd::has_begintime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JoinSuperGvgMatchSCmd::set_has_begintime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JoinSuperGvgMatchSCmd::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JoinSuperGvgMatchSCmd::clear_begintime() {
  begintime_ = 0u;
  clear_has_begintime();
}
inline ::google::protobuf::uint32 JoinSuperGvgMatchSCmd::begintime() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinSuperGvgMatchSCmd.begintime)
  return begintime_;
}
inline void JoinSuperGvgMatchSCmd::set_begintime(::google::protobuf::uint32 value) {
  set_has_begintime();
  begintime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinSuperGvgMatchSCmd.begintime)
}

// -------------------------------------------------------------------

// SuperGvgRetMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool SuperGvgRetMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuperGvgRetMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuperGvgRetMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuperGvgRetMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command SuperGvgRetMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SuperGvgRetMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SuperGvgRetMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SuperGvgRetMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SUPERGVG_RET];
inline bool SuperGvgRetMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuperGvgRetMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuperGvgRetMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuperGvgRetMatchSCmd::clear_param() {
  param_ = 35;
  clear_has_param();
}
inline ::Cmd::MatchSParam SuperGvgRetMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SuperGvgRetMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void SuperGvgRetMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SuperGvgRetMatchSCmd.param)
}

// optional bool ret = 3 [default = false];
inline bool SuperGvgRetMatchSCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuperGvgRetMatchSCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuperGvgRetMatchSCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuperGvgRetMatchSCmd::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool SuperGvgRetMatchSCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.SuperGvgRetMatchSCmd.ret)
  return ret_;
}
inline void SuperGvgRetMatchSCmd::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SuperGvgRetMatchSCmd.ret)
}

// optional uint64 guildid = 4 [default = 0];
inline bool SuperGvgRetMatchSCmd::has_guildid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SuperGvgRetMatchSCmd::set_has_guildid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SuperGvgRetMatchSCmd::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SuperGvgRetMatchSCmd::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 SuperGvgRetMatchSCmd::guildid() const {
  // @@protoc_insertion_point(field_get:Cmd.SuperGvgRetMatchSCmd.guildid)
  return guildid_;
}
inline void SuperGvgRetMatchSCmd::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SuperGvgRetMatchSCmd.guildid)
}

// -------------------------------------------------------------------

// ClearMvpCDMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool ClearMvpCDMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClearMvpCDMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClearMvpCDMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClearMvpCDMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command ClearMvpCDMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ClearMvpCDMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ClearMvpCDMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClearMvpCDMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CLEAR_MVPCD];
inline bool ClearMvpCDMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClearMvpCDMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClearMvpCDMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClearMvpCDMatchSCmd::clear_param() {
  param_ = 36;
  clear_has_param();
}
inline ::Cmd::MatchSParam ClearMvpCDMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ClearMvpCDMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void ClearMvpCDMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClearMvpCDMatchSCmd.param)
}

// required uint64 roomid = 3;
inline bool ClearMvpCDMatchSCmd::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClearMvpCDMatchSCmd::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClearMvpCDMatchSCmd::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClearMvpCDMatchSCmd::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 ClearMvpCDMatchSCmd::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.ClearMvpCDMatchSCmd.roomid)
  return roomid_;
}
inline void ClearMvpCDMatchSCmd::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClearMvpCDMatchSCmd.roomid)
}

// required uint64 teamid = 4;
inline bool ClearMvpCDMatchSCmd::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClearMvpCDMatchSCmd::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClearMvpCDMatchSCmd::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClearMvpCDMatchSCmd::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 ClearMvpCDMatchSCmd::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.ClearMvpCDMatchSCmd.teamid)
  return teamid_;
}
inline void ClearMvpCDMatchSCmd::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClearMvpCDMatchSCmd.teamid)
}

// -------------------------------------------------------------------

// TutorOptMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool TutorOptMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TutorOptMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TutorOptMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TutorOptMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command TutorOptMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorOptMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TutorOptMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorOptMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_TUTOR_OPT];
inline bool TutorOptMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TutorOptMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TutorOptMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TutorOptMatchSCmd::clear_param() {
  param_ = 37;
  clear_has_param();
}
inline ::Cmd::MatchSParam TutorOptMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorOptMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void TutorOptMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorOptMatchSCmd.param)
}

// optional uint64 tutorid = 3 [default = 0];
inline bool TutorOptMatchSCmd::has_tutorid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TutorOptMatchSCmd::set_has_tutorid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TutorOptMatchSCmd::clear_has_tutorid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TutorOptMatchSCmd::clear_tutorid() {
  tutorid_ = GOOGLE_ULONGLONG(0);
  clear_has_tutorid();
}
inline ::google::protobuf::uint64 TutorOptMatchSCmd::tutorid() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorOptMatchSCmd.tutorid)
  return tutorid_;
}
inline void TutorOptMatchSCmd::set_tutorid(::google::protobuf::uint64 value) {
  set_has_tutorid();
  tutorid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorOptMatchSCmd.tutorid)
}

// optional uint64 studentid = 4 [default = 0];
inline bool TutorOptMatchSCmd::has_studentid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TutorOptMatchSCmd::set_has_studentid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TutorOptMatchSCmd::clear_has_studentid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TutorOptMatchSCmd::clear_studentid() {
  studentid_ = GOOGLE_ULONGLONG(0);
  clear_has_studentid();
}
inline ::google::protobuf::uint64 TutorOptMatchSCmd::studentid() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorOptMatchSCmd.studentid)
  return studentid_;
}
inline void TutorOptMatchSCmd::set_studentid(::google::protobuf::uint64 value) {
  set_has_studentid();
  studentid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorOptMatchSCmd.studentid)
}

// optional .Cmd.ETutorOpt opt = 5 [default = ETUTOROPT_APPLY];
inline bool TutorOptMatchSCmd::has_opt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TutorOptMatchSCmd::set_has_opt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TutorOptMatchSCmd::clear_has_opt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TutorOptMatchSCmd::clear_opt() {
  opt_ = 1;
  clear_has_opt();
}
inline ::Cmd::ETutorOpt TutorOptMatchSCmd::opt() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorOptMatchSCmd.opt)
  return static_cast< ::Cmd::ETutorOpt >(opt_);
}
inline void TutorOptMatchSCmd::set_opt(::Cmd::ETutorOpt value) {
  assert(::Cmd::ETutorOpt_IsValid(value));
  set_has_opt();
  opt_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorOptMatchSCmd.opt)
}

// optional bool ret = 6 [default = false];
inline bool TutorOptMatchSCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TutorOptMatchSCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TutorOptMatchSCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TutorOptMatchSCmd::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool TutorOptMatchSCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorOptMatchSCmd.ret)
  return ret_;
}
inline void TutorOptMatchSCmd::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorOptMatchSCmd.ret)
}

// optional bool result = 7 [default = false];
inline bool TutorOptMatchSCmd::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TutorOptMatchSCmd::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TutorOptMatchSCmd::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TutorOptMatchSCmd::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool TutorOptMatchSCmd::result() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorOptMatchSCmd.result)
  return result_;
}
inline void TutorOptMatchSCmd::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorOptMatchSCmd.result)
}

// -------------------------------------------------------------------

// TutorBlackUpdateMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool TutorBlackUpdateMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TutorBlackUpdateMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TutorBlackUpdateMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TutorBlackUpdateMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command TutorBlackUpdateMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorBlackUpdateMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TutorBlackUpdateMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorBlackUpdateMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_TUTOR_BLACK_UPDATE];
inline bool TutorBlackUpdateMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TutorBlackUpdateMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TutorBlackUpdateMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TutorBlackUpdateMatchSCmd::clear_param() {
  param_ = 40;
  clear_has_param();
}
inline ::Cmd::MatchSParam TutorBlackUpdateMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorBlackUpdateMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void TutorBlackUpdateMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorBlackUpdateMatchSCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool TutorBlackUpdateMatchSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TutorBlackUpdateMatchSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TutorBlackUpdateMatchSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TutorBlackUpdateMatchSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 TutorBlackUpdateMatchSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorBlackUpdateMatchSCmd.charid)
  return charid_;
}
inline void TutorBlackUpdateMatchSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorBlackUpdateMatchSCmd.charid)
}

// repeated uint64 blackids = 4;
inline int TutorBlackUpdateMatchSCmd::blackids_size() const {
  return blackids_.size();
}
inline void TutorBlackUpdateMatchSCmd::clear_blackids() {
  blackids_.Clear();
}
inline ::google::protobuf::uint64 TutorBlackUpdateMatchSCmd::blackids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.TutorBlackUpdateMatchSCmd.blackids)
  return blackids_.Get(index);
}
inline void TutorBlackUpdateMatchSCmd::set_blackids(int index, ::google::protobuf::uint64 value) {
  blackids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.TutorBlackUpdateMatchSCmd.blackids)
}
inline void TutorBlackUpdateMatchSCmd::add_blackids(::google::protobuf::uint64 value) {
  blackids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.TutorBlackUpdateMatchSCmd.blackids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TutorBlackUpdateMatchSCmd::blackids() const {
  // @@protoc_insertion_point(field_list:Cmd.TutorBlackUpdateMatchSCmd.blackids)
  return blackids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TutorBlackUpdateMatchSCmd::mutable_blackids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.TutorBlackUpdateMatchSCmd.blackids)
  return &blackids_;
}

// -------------------------------------------------------------------

// UserBoothReqMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool UserBoothReqMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserBoothReqMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserBoothReqMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserBoothReqMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command UserBoothReqMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBoothReqMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UserBoothReqMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBoothReqMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_BOOTH_REQ];
inline bool UserBoothReqMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserBoothReqMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserBoothReqMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserBoothReqMatchSCmd::clear_param() {
  param_ = 38;
  clear_has_param();
}
inline ::Cmd::MatchSParam UserBoothReqMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBoothReqMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void UserBoothReqMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBoothReqMatchSCmd.param)
}

// optional uint32 zoneid = 3;
inline bool UserBoothReqMatchSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserBoothReqMatchSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserBoothReqMatchSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserBoothReqMatchSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 UserBoothReqMatchSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBoothReqMatchSCmd.zoneid)
  return zoneid_;
}
inline void UserBoothReqMatchSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBoothReqMatchSCmd.zoneid)
}

// optional uint32 sceneid = 4;
inline bool UserBoothReqMatchSCmd::has_sceneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserBoothReqMatchSCmd::set_has_sceneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserBoothReqMatchSCmd::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserBoothReqMatchSCmd::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 UserBoothReqMatchSCmd::sceneid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBoothReqMatchSCmd.sceneid)
  return sceneid_;
}
inline void UserBoothReqMatchSCmd::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBoothReqMatchSCmd.sceneid)
}

// optional .Cmd.MapUser user = 5;
inline bool UserBoothReqMatchSCmd::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserBoothReqMatchSCmd::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserBoothReqMatchSCmd::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserBoothReqMatchSCmd::clear_user() {
  if (user_ != NULL) user_->::Cmd::MapUser::Clear();
  clear_has_user();
}
inline const ::Cmd::MapUser& UserBoothReqMatchSCmd::user() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBoothReqMatchSCmd.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::Cmd::MapUser* UserBoothReqMatchSCmd::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::Cmd::MapUser;
  // @@protoc_insertion_point(field_mutable:Cmd.UserBoothReqMatchSCmd.user)
  return user_;
}
inline ::Cmd::MapUser* UserBoothReqMatchSCmd::release_user() {
  clear_has_user();
  ::Cmd::MapUser* temp = user_;
  user_ = NULL;
  return temp;
}
inline void UserBoothReqMatchSCmd::set_allocated_user(::Cmd::MapUser* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserBoothReqMatchSCmd.user)
}

// optional .Cmd.EBoothOper oper = 6 [default = EBOOTHOPER_OPEN];
inline bool UserBoothReqMatchSCmd::has_oper() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserBoothReqMatchSCmd::set_has_oper() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserBoothReqMatchSCmd::clear_has_oper() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserBoothReqMatchSCmd::clear_oper() {
  oper_ = 0;
  clear_has_oper();
}
inline ::Cmd::EBoothOper UserBoothReqMatchSCmd::oper() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBoothReqMatchSCmd.oper)
  return static_cast< ::Cmd::EBoothOper >(oper_);
}
inline void UserBoothReqMatchSCmd::set_oper(::Cmd::EBoothOper value) {
  assert(::Cmd::EBoothOper_IsValid(value));
  set_has_oper();
  oper_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBoothReqMatchSCmd.oper)
}

// -------------------------------------------------------------------

// UserBoothNTFMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool UserBoothNTFMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserBoothNTFMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserBoothNTFMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserBoothNTFMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command UserBoothNTFMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBoothNTFMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UserBoothNTFMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBoothNTFMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_BOOTH_NTF];
inline bool UserBoothNTFMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserBoothNTFMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserBoothNTFMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserBoothNTFMatchSCmd::clear_param() {
  param_ = 39;
  clear_has_param();
}
inline ::Cmd::MatchSParam UserBoothNTFMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBoothNTFMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void UserBoothNTFMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBoothNTFMatchSCmd.param)
}

// optional uint32 zoneid = 3;
inline bool UserBoothNTFMatchSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserBoothNTFMatchSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserBoothNTFMatchSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserBoothNTFMatchSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 UserBoothNTFMatchSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBoothNTFMatchSCmd.zoneid)
  return zoneid_;
}
inline void UserBoothNTFMatchSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBoothNTFMatchSCmd.zoneid)
}

// optional uint32 sceneid = 4;
inline bool UserBoothNTFMatchSCmd::has_sceneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserBoothNTFMatchSCmd::set_has_sceneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserBoothNTFMatchSCmd::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserBoothNTFMatchSCmd::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 UserBoothNTFMatchSCmd::sceneid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBoothNTFMatchSCmd.sceneid)
  return sceneid_;
}
inline void UserBoothNTFMatchSCmd::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBoothNTFMatchSCmd.sceneid)
}

// optional .Cmd.MapUser user = 5;
inline bool UserBoothNTFMatchSCmd::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserBoothNTFMatchSCmd::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserBoothNTFMatchSCmd::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserBoothNTFMatchSCmd::clear_user() {
  if (user_ != NULL) user_->::Cmd::MapUser::Clear();
  clear_has_user();
}
inline const ::Cmd::MapUser& UserBoothNTFMatchSCmd::user() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBoothNTFMatchSCmd.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::Cmd::MapUser* UserBoothNTFMatchSCmd::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::Cmd::MapUser;
  // @@protoc_insertion_point(field_mutable:Cmd.UserBoothNTFMatchSCmd.user)
  return user_;
}
inline ::Cmd::MapUser* UserBoothNTFMatchSCmd::release_user() {
  clear_has_user();
  ::Cmd::MapUser* temp = user_;
  user_ = NULL;
  return temp;
}
inline void UserBoothNTFMatchSCmd::set_allocated_user(::Cmd::MapUser* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserBoothNTFMatchSCmd.user)
}

// optional .Cmd.EBoothOper oper = 6 [default = EBOOTHOPER_OPEN];
inline bool UserBoothNTFMatchSCmd::has_oper() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserBoothNTFMatchSCmd::set_has_oper() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserBoothNTFMatchSCmd::clear_has_oper() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserBoothNTFMatchSCmd::clear_oper() {
  oper_ = 0;
  clear_has_oper();
}
inline ::Cmd::EBoothOper UserBoothNTFMatchSCmd::oper() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBoothNTFMatchSCmd.oper)
  return static_cast< ::Cmd::EBoothOper >(oper_);
}
inline void UserBoothNTFMatchSCmd::set_oper(::Cmd::EBoothOper value) {
  assert(::Cmd::EBoothOper_IsValid(value));
  set_has_oper();
  oper_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBoothNTFMatchSCmd.oper)
}

// -------------------------------------------------------------------

// JoinTeamPwsMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool JoinTeamPwsMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinTeamPwsMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinTeamPwsMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinTeamPwsMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command JoinTeamPwsMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinTeamPwsMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void JoinTeamPwsMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinTeamPwsMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_JOIN_TEAMPWS];
inline bool JoinTeamPwsMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinTeamPwsMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinTeamPwsMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinTeamPwsMatchSCmd::clear_param() {
  param_ = 41;
  clear_has_param();
}
inline ::Cmd::MatchSParam JoinTeamPwsMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinTeamPwsMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void JoinTeamPwsMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinTeamPwsMatchSCmd.param)
}

// required uint64 teamid = 3;
inline bool JoinTeamPwsMatchSCmd::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JoinTeamPwsMatchSCmd::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JoinTeamPwsMatchSCmd::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JoinTeamPwsMatchSCmd::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 JoinTeamPwsMatchSCmd::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinTeamPwsMatchSCmd.teamid)
  return teamid_;
}
inline void JoinTeamPwsMatchSCmd::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinTeamPwsMatchSCmd.teamid)
}

// required uint32 zoneid = 4;
inline bool JoinTeamPwsMatchSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JoinTeamPwsMatchSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JoinTeamPwsMatchSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JoinTeamPwsMatchSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 JoinTeamPwsMatchSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinTeamPwsMatchSCmd.zoneid)
  return zoneid_;
}
inline void JoinTeamPwsMatchSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinTeamPwsMatchSCmd.zoneid)
}

// required uint64 leaderid = 5;
inline bool JoinTeamPwsMatchSCmd::has_leaderid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JoinTeamPwsMatchSCmd::set_has_leaderid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JoinTeamPwsMatchSCmd::clear_has_leaderid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JoinTeamPwsMatchSCmd::clear_leaderid() {
  leaderid_ = GOOGLE_ULONGLONG(0);
  clear_has_leaderid();
}
inline ::google::protobuf::uint64 JoinTeamPwsMatchSCmd::leaderid() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinTeamPwsMatchSCmd.leaderid)
  return leaderid_;
}
inline void JoinTeamPwsMatchSCmd::set_leaderid(::google::protobuf::uint64 value) {
  set_has_leaderid();
  leaderid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinTeamPwsMatchSCmd.leaderid)
}

// repeated uint64 members = 6;
inline int JoinTeamPwsMatchSCmd::members_size() const {
  return members_.size();
}
inline void JoinTeamPwsMatchSCmd::clear_members() {
  members_.Clear();
}
inline ::google::protobuf::uint64 JoinTeamPwsMatchSCmd::members(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.JoinTeamPwsMatchSCmd.members)
  return members_.Get(index);
}
inline void JoinTeamPwsMatchSCmd::set_members(int index, ::google::protobuf::uint64 value) {
  members_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.JoinTeamPwsMatchSCmd.members)
}
inline void JoinTeamPwsMatchSCmd::add_members(::google::protobuf::uint64 value) {
  members_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.JoinTeamPwsMatchSCmd.members)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
JoinTeamPwsMatchSCmd::members() const {
  // @@protoc_insertion_point(field_list:Cmd.JoinTeamPwsMatchSCmd.members)
  return members_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
JoinTeamPwsMatchSCmd::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.JoinTeamPwsMatchSCmd.members)
  return &members_;
}

// optional uint32 avescore = 7 [default = 0];
inline bool JoinTeamPwsMatchSCmd::has_avescore() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JoinTeamPwsMatchSCmd::set_has_avescore() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JoinTeamPwsMatchSCmd::clear_has_avescore() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JoinTeamPwsMatchSCmd::clear_avescore() {
  avescore_ = 0u;
  clear_has_avescore();
}
inline ::google::protobuf::uint32 JoinTeamPwsMatchSCmd::avescore() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinTeamPwsMatchSCmd.avescore)
  return avescore_;
}
inline void JoinTeamPwsMatchSCmd::set_avescore(::google::protobuf::uint32 value) {
  set_has_avescore();
  avescore_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinTeamPwsMatchSCmd.avescore)
}

// optional .Cmd.EPvpType etype = 8 [default = EPVPTYPE_TEAMPWS];
inline bool JoinTeamPwsMatchSCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JoinTeamPwsMatchSCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JoinTeamPwsMatchSCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JoinTeamPwsMatchSCmd::clear_etype() {
  etype_ = 8;
  clear_has_etype();
}
inline ::Cmd::EPvpType JoinTeamPwsMatchSCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinTeamPwsMatchSCmd.etype)
  return static_cast< ::Cmd::EPvpType >(etype_);
}
inline void JoinTeamPwsMatchSCmd::set_etype(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinTeamPwsMatchSCmd.etype)
}

// optional uint32 roomid = 9 [default = 0];
inline bool JoinTeamPwsMatchSCmd::has_roomid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JoinTeamPwsMatchSCmd::set_has_roomid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JoinTeamPwsMatchSCmd::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JoinTeamPwsMatchSCmd::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 JoinTeamPwsMatchSCmd::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinTeamPwsMatchSCmd.roomid)
  return roomid_;
}
inline void JoinTeamPwsMatchSCmd::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinTeamPwsMatchSCmd.roomid)
}

// -------------------------------------------------------------------

// ExitTeamPwsMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool ExitTeamPwsMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExitTeamPwsMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExitTeamPwsMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExitTeamPwsMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command ExitTeamPwsMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitTeamPwsMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ExitTeamPwsMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitTeamPwsMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_LEAVE_TEAMPWS];
inline bool ExitTeamPwsMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExitTeamPwsMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExitTeamPwsMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExitTeamPwsMatchSCmd::clear_param() {
  param_ = 42;
  clear_has_param();
}
inline ::Cmd::MatchSParam ExitTeamPwsMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitTeamPwsMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void ExitTeamPwsMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitTeamPwsMatchSCmd.param)
}

// required uint64 teamid = 3;
inline bool ExitTeamPwsMatchSCmd::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExitTeamPwsMatchSCmd::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExitTeamPwsMatchSCmd::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExitTeamPwsMatchSCmd::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 ExitTeamPwsMatchSCmd::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitTeamPwsMatchSCmd.teamid)
  return teamid_;
}
inline void ExitTeamPwsMatchSCmd::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitTeamPwsMatchSCmd.teamid)
}

// required uint32 zoneid = 4;
inline bool ExitTeamPwsMatchSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExitTeamPwsMatchSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExitTeamPwsMatchSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExitTeamPwsMatchSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 ExitTeamPwsMatchSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitTeamPwsMatchSCmd.zoneid)
  return zoneid_;
}
inline void ExitTeamPwsMatchSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitTeamPwsMatchSCmd.zoneid)
}

// optional .Cmd.EPvpType etype = 5 [default = EPVPTYPE_TEAMPWS];
inline bool ExitTeamPwsMatchSCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExitTeamPwsMatchSCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExitTeamPwsMatchSCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExitTeamPwsMatchSCmd::clear_etype() {
  etype_ = 8;
  clear_has_etype();
}
inline ::Cmd::EPvpType ExitTeamPwsMatchSCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitTeamPwsMatchSCmd.etype)
  return static_cast< ::Cmd::EPvpType >(etype_);
}
inline void ExitTeamPwsMatchSCmd::set_etype(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitTeamPwsMatchSCmd.etype)
}

// -------------------------------------------------------------------

// SceneGMTestMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool SceneGMTestMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneGMTestMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneGMTestMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneGMTestMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command SceneGMTestMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SceneGMTestMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SceneGMTestMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SceneGMTestMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SCENE_GM_TEST];
inline bool SceneGMTestMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneGMTestMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneGMTestMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneGMTestMatchSCmd::clear_param() {
  param_ = 43;
  clear_has_param();
}
inline ::Cmd::MatchSParam SceneGMTestMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SceneGMTestMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void SceneGMTestMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SceneGMTestMatchSCmd.param)
}

// optional .Cmd.ESceneGMMatchType etype = 3;
inline bool SceneGMTestMatchSCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneGMTestMatchSCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SceneGMTestMatchSCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SceneGMTestMatchSCmd::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::Cmd::ESceneGMMatchType SceneGMTestMatchSCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.SceneGMTestMatchSCmd.etype)
  return static_cast< ::Cmd::ESceneGMMatchType >(etype_);
}
inline void SceneGMTestMatchSCmd::set_etype(::Cmd::ESceneGMMatchType value) {
  assert(::Cmd::ESceneGMMatchType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SceneGMTestMatchSCmd.etype)
}

// optional uint32 frequency = 4 [default = 0];
inline bool SceneGMTestMatchSCmd::has_frequency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SceneGMTestMatchSCmd::set_has_frequency() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SceneGMTestMatchSCmd::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SceneGMTestMatchSCmd::clear_frequency() {
  frequency_ = 0u;
  clear_has_frequency();
}
inline ::google::protobuf::uint32 SceneGMTestMatchSCmd::frequency() const {
  // @@protoc_insertion_point(field_get:Cmd.SceneGMTestMatchSCmd.frequency)
  return frequency_;
}
inline void SceneGMTestMatchSCmd::set_frequency(::google::protobuf::uint32 value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SceneGMTestMatchSCmd.frequency)
}

// optional uint32 interval = 5 [default = 0];
inline bool SceneGMTestMatchSCmd::has_interval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SceneGMTestMatchSCmd::set_has_interval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SceneGMTestMatchSCmd::clear_has_interval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SceneGMTestMatchSCmd::clear_interval() {
  interval_ = 0u;
  clear_has_interval();
}
inline ::google::protobuf::uint32 SceneGMTestMatchSCmd::interval() const {
  // @@protoc_insertion_point(field_get:Cmd.SceneGMTestMatchSCmd.interval)
  return interval_;
}
inline void SceneGMTestMatchSCmd::set_interval(::google::protobuf::uint32 value) {
  set_has_interval();
  interval_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SceneGMTestMatchSCmd.interval)
}

// optional uint32 lasttime = 6 [default = 0];
inline bool SceneGMTestMatchSCmd::has_lasttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SceneGMTestMatchSCmd::set_has_lasttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SceneGMTestMatchSCmd::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SceneGMTestMatchSCmd::clear_lasttime() {
  lasttime_ = 0u;
  clear_has_lasttime();
}
inline ::google::protobuf::uint32 SceneGMTestMatchSCmd::lasttime() const {
  // @@protoc_insertion_point(field_get:Cmd.SceneGMTestMatchSCmd.lasttime)
  return lasttime_;
}
inline void SceneGMTestMatchSCmd::set_lasttime(::google::protobuf::uint32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SceneGMTestMatchSCmd.lasttime)
}

// repeated uint32 params = 7;
inline int SceneGMTestMatchSCmd::params_size() const {
  return params_.size();
}
inline void SceneGMTestMatchSCmd::clear_params() {
  params_.Clear();
}
inline ::google::protobuf::uint32 SceneGMTestMatchSCmd::params(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SceneGMTestMatchSCmd.params)
  return params_.Get(index);
}
inline void SceneGMTestMatchSCmd::set_params(int index, ::google::protobuf::uint32 value) {
  params_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.SceneGMTestMatchSCmd.params)
}
inline void SceneGMTestMatchSCmd::add_params(::google::protobuf::uint32 value) {
  params_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.SceneGMTestMatchSCmd.params)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SceneGMTestMatchSCmd::params() const {
  // @@protoc_insertion_point(field_list:Cmd.SceneGMTestMatchSCmd.params)
  return params_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SceneGMTestMatchSCmd::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SceneGMTestMatchSCmd.params)
  return &params_;
}

// -------------------------------------------------------------------

// MatchScoreData

// required uint64 charid = 1;
inline bool MatchScoreData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchScoreData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchScoreData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchScoreData::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 MatchScoreData::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchScoreData.charid)
  return charid_;
}
inline void MatchScoreData::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatchScoreData.charid)
}

// required int32 score = 2;
inline bool MatchScoreData::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchScoreData::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchScoreData::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchScoreData::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 MatchScoreData::score() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchScoreData.score)
  return score_;
}
inline void MatchScoreData::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatchScoreData.score)
}

// optional string name = 3;
inline bool MatchScoreData::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchScoreData::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchScoreData::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchScoreData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MatchScoreData::name() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchScoreData.name)
  return *name_;
}
inline void MatchScoreData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MatchScoreData.name)
}
inline void MatchScoreData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MatchScoreData.name)
}
inline void MatchScoreData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MatchScoreData.name)
}
inline ::std::string* MatchScoreData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MatchScoreData.name)
  return name_;
}
inline ::std::string* MatchScoreData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MatchScoreData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MatchScoreData.name)
}

// optional .Cmd.UserPortraitData portrait = 4;
inline bool MatchScoreData::has_portrait() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchScoreData::set_has_portrait() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchScoreData::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchScoreData::clear_portrait() {
  if (portrait_ != NULL) portrait_->::Cmd::UserPortraitData::Clear();
  clear_has_portrait();
}
inline const ::Cmd::UserPortraitData& MatchScoreData::portrait() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchScoreData.portrait)
  return portrait_ != NULL ? *portrait_ : *default_instance_->portrait_;
}
inline ::Cmd::UserPortraitData* MatchScoreData::mutable_portrait() {
  set_has_portrait();
  if (portrait_ == NULL) portrait_ = new ::Cmd::UserPortraitData;
  // @@protoc_insertion_point(field_mutable:Cmd.MatchScoreData.portrait)
  return portrait_;
}
inline ::Cmd::UserPortraitData* MatchScoreData::release_portrait() {
  clear_has_portrait();
  ::Cmd::UserPortraitData* temp = portrait_;
  portrait_ = NULL;
  return temp;
}
inline void MatchScoreData::set_allocated_portrait(::Cmd::UserPortraitData* portrait) {
  delete portrait_;
  portrait_ = portrait;
  if (portrait) {
    set_has_portrait();
  } else {
    clear_has_portrait();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MatchScoreData.portrait)
}

// optional .Cmd.EProfession profession = 5;
inline bool MatchScoreData::has_profession() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchScoreData::set_has_profession() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchScoreData::clear_has_profession() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchScoreData::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::Cmd::EProfession MatchScoreData::profession() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchScoreData.profession)
  return static_cast< ::Cmd::EProfession >(profession_);
}
inline void MatchScoreData::set_profession(::Cmd::EProfession value) {
  assert(::Cmd::EProfession_IsValid(value));
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatchScoreData.profession)
}

// -------------------------------------------------------------------

// UpdateScoreMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool UpdateScoreMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateScoreMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateScoreMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateScoreMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateScoreMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateScoreMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateScoreMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateScoreMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_UPDATE_SCORE];
inline bool UpdateScoreMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateScoreMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateScoreMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateScoreMatchSCmd::clear_param() {
  param_ = 44;
  clear_has_param();
}
inline ::Cmd::MatchSParam UpdateScoreMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateScoreMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void UpdateScoreMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateScoreMatchSCmd.param)
}

// optional .Cmd.EPvpType etype = 3;
inline bool UpdateScoreMatchSCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateScoreMatchSCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateScoreMatchSCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateScoreMatchSCmd::clear_etype() {
  etype_ = 0;
  clear_has_etype();
}
inline ::Cmd::EPvpType UpdateScoreMatchSCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateScoreMatchSCmd.etype)
  return static_cast< ::Cmd::EPvpType >(etype_);
}
inline void UpdateScoreMatchSCmd::set_etype(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateScoreMatchSCmd.etype)
}

// repeated .Cmd.MatchScoreData userscores = 5;
inline int UpdateScoreMatchSCmd::userscores_size() const {
  return userscores_.size();
}
inline void UpdateScoreMatchSCmd::clear_userscores() {
  userscores_.Clear();
}
inline const ::Cmd::MatchScoreData& UpdateScoreMatchSCmd::userscores(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateScoreMatchSCmd.userscores)
  return userscores_.Get(index);
}
inline ::Cmd::MatchScoreData* UpdateScoreMatchSCmd::mutable_userscores(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateScoreMatchSCmd.userscores)
  return userscores_.Mutable(index);
}
inline ::Cmd::MatchScoreData* UpdateScoreMatchSCmd::add_userscores() {
  // @@protoc_insertion_point(field_add:Cmd.UpdateScoreMatchSCmd.userscores)
  return userscores_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MatchScoreData >&
UpdateScoreMatchSCmd::userscores() const {
  // @@protoc_insertion_point(field_list:Cmd.UpdateScoreMatchSCmd.userscores)
  return userscores_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MatchScoreData >*
UpdateScoreMatchSCmd::mutable_userscores() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UpdateScoreMatchSCmd.userscores)
  return &userscores_;
}

// -------------------------------------------------------------------

// SyncUserScoreMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool SyncUserScoreMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncUserScoreMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncUserScoreMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncUserScoreMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command SyncUserScoreMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncUserScoreMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SyncUserScoreMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncUserScoreMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_SCORE];
inline bool SyncUserScoreMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncUserScoreMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncUserScoreMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncUserScoreMatchSCmd::clear_param() {
  param_ = 45;
  clear_has_param();
}
inline ::Cmd::MatchSParam SyncUserScoreMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncUserScoreMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void SyncUserScoreMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncUserScoreMatchSCmd.param)
}

// optional .Cmd.EPvpType etype = 3;
inline bool SyncUserScoreMatchSCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncUserScoreMatchSCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncUserScoreMatchSCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncUserScoreMatchSCmd::clear_etype() {
  etype_ = 0;
  clear_has_etype();
}
inline ::Cmd::EPvpType SyncUserScoreMatchSCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncUserScoreMatchSCmd.etype)
  return static_cast< ::Cmd::EPvpType >(etype_);
}
inline void SyncUserScoreMatchSCmd::set_etype(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncUserScoreMatchSCmd.etype)
}

// required uint64 charid = 4;
inline bool SyncUserScoreMatchSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncUserScoreMatchSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncUserScoreMatchSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncUserScoreMatchSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SyncUserScoreMatchSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncUserScoreMatchSCmd.charid)
  return charid_;
}
inline void SyncUserScoreMatchSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncUserScoreMatchSCmd.charid)
}

// required uint32 score = 5;
inline bool SyncUserScoreMatchSCmd::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncUserScoreMatchSCmd::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SyncUserScoreMatchSCmd::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SyncUserScoreMatchSCmd::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 SyncUserScoreMatchSCmd::score() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncUserScoreMatchSCmd.score)
  return score_;
}
inline void SyncUserScoreMatchSCmd::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncUserScoreMatchSCmd.score)
}

// optional uint32 season = 6;
inline bool SyncUserScoreMatchSCmd::has_season() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SyncUserScoreMatchSCmd::set_has_season() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SyncUserScoreMatchSCmd::clear_has_season() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SyncUserScoreMatchSCmd::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 SyncUserScoreMatchSCmd::season() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncUserScoreMatchSCmd.season)
  return season_;
}
inline void SyncUserScoreMatchSCmd::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncUserScoreMatchSCmd.season)
}

// -------------------------------------------------------------------

// UserLeaveRaidMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool UserLeaveRaidMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLeaveRaidMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLeaveRaidMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLeaveRaidMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command UserLeaveRaidMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UserLeaveRaidMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UserLeaveRaidMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserLeaveRaidMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_FORCE_LEAVE];
inline bool UserLeaveRaidMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLeaveRaidMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLeaveRaidMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLeaveRaidMatchSCmd::clear_param() {
  param_ = 46;
  clear_has_param();
}
inline ::Cmd::MatchSParam UserLeaveRaidMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UserLeaveRaidMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void UserLeaveRaidMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserLeaveRaidMatchSCmd.param)
}

// optional uint64 charid = 3;
inline bool UserLeaveRaidMatchSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLeaveRaidMatchSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLeaveRaidMatchSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLeaveRaidMatchSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 UserLeaveRaidMatchSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserLeaveRaidMatchSCmd.charid)
  return charid_;
}
inline void UserLeaveRaidMatchSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserLeaveRaidMatchSCmd.charid)
}

// optional .Cmd.EPvpType etype = 4;
inline bool UserLeaveRaidMatchSCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserLeaveRaidMatchSCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserLeaveRaidMatchSCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserLeaveRaidMatchSCmd::clear_etype() {
  etype_ = 0;
  clear_has_etype();
}
inline ::Cmd::EPvpType UserLeaveRaidMatchSCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.UserLeaveRaidMatchSCmd.etype)
  return static_cast< ::Cmd::EPvpType >(etype_);
}
inline void UserLeaveRaidMatchSCmd::set_etype(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserLeaveRaidMatchSCmd.etype)
}

// -------------------------------------------------------------------

// ConfirmTeamMatchSCmd

// optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
inline bool ConfirmTeamMatchSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfirmTeamMatchSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfirmTeamMatchSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfirmTeamMatchSCmd::clear_cmd() {
  cmd_ = 212;
  clear_has_cmd();
}
inline ::Cmd::Command ConfirmTeamMatchSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ConfirmTeamMatchSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ConfirmTeamMatchSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConfirmTeamMatchSCmd.cmd)
}

// optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CONFIRM_TEAMMATCH];
inline bool ConfirmTeamMatchSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfirmTeamMatchSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfirmTeamMatchSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfirmTeamMatchSCmd::clear_param() {
  param_ = 47;
  clear_has_param();
}
inline ::Cmd::MatchSParam ConfirmTeamMatchSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ConfirmTeamMatchSCmd.param)
  return static_cast< ::Cmd::MatchSParam >(param_);
}
inline void ConfirmTeamMatchSCmd::set_param(::Cmd::MatchSParam value) {
  assert(::Cmd::MatchSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConfirmTeamMatchSCmd.param)
}

// required uint64 teamid = 3;
inline bool ConfirmTeamMatchSCmd::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfirmTeamMatchSCmd::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfirmTeamMatchSCmd::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfirmTeamMatchSCmd::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 ConfirmTeamMatchSCmd::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.ConfirmTeamMatchSCmd.teamid)
  return teamid_;
}
inline void ConfirmTeamMatchSCmd::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConfirmTeamMatchSCmd.teamid)
}

// optional .Cmd.EPvpType etype = 4;
inline bool ConfirmTeamMatchSCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfirmTeamMatchSCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfirmTeamMatchSCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfirmTeamMatchSCmd::clear_etype() {
  etype_ = 0;
  clear_has_etype();
}
inline ::Cmd::EPvpType ConfirmTeamMatchSCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.ConfirmTeamMatchSCmd.etype)
  return static_cast< ::Cmd::EPvpType >(etype_);
}
inline void ConfirmTeamMatchSCmd::set_etype(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConfirmTeamMatchSCmd.etype)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::MatchSParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::MatchSParam>() {
  return ::Cmd::MatchSParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ETutorOpt> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ETutorOpt>() {
  return ::Cmd::ETutorOpt_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ESceneGMMatchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ESceneGMMatchType>() {
  return ::Cmd::ESceneGMMatchType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MatchSCmd_2eproto__INCLUDED
