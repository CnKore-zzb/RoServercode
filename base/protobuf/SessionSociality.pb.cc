// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SessionSociality.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SessionSociality.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* SocialData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuerySocialData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuerySocialData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocialUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocialDataItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialDataItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocialDataUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialDataUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameStatusSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameStatusSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseGiftCodeSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseGiftCodeSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateQuerySocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateQuerySocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateTakeSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateTakeSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryDataNtfSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryDataNtfSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperActivityUrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperActivityUrl_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperActivityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperSubActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperSubActivityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperSubActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperSubActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperActivityNtfSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperActivityNtfSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Recall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Recall_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryRecallListSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryRecallListSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecallFriendSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecallFriendSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRelationResultSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRelationResultSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryChargeVirginCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryChargeVirginCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserInfoCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SocialityParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESocialRelation_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESocialData_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EOperateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EOperateState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SessionSociality_2eproto() {
  protobuf_AddDesc_SessionSociality_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SessionSociality.proto");
  GOOGLE_CHECK(file != NULL);
  SocialData_descriptor_ = file->message_type(0);
  static const int SocialData_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, mouth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, eye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, profic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, adventurelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, adventureexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, appellation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, blink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, recall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, canrecall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, guildportrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, createtime_),
  };
  SocialData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialData_descriptor_,
      SocialData::default_instance_,
      SocialData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialData));
  QuerySocialData_descriptor_ = file->message_type(1);
  static const int QuerySocialData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySocialData, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySocialData, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySocialData, datas_),
  };
  QuerySocialData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuerySocialData_descriptor_,
      QuerySocialData::default_instance_,
      QuerySocialData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySocialData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySocialData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuerySocialData));
  FindUser_descriptor_ = file->message_type(2);
  static const int FindUser_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindUser, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindUser, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindUser, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindUser, datas_),
  };
  FindUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindUser_descriptor_,
      FindUser::default_instance_,
      FindUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindUser));
  SocialUpdate_descriptor_ = file->message_type(3);
  static const int SocialUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialUpdate, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialUpdate, dels_),
  };
  SocialUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialUpdate_descriptor_,
      SocialUpdate::default_instance_,
      SocialUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialUpdate));
  SocialDataItem_descriptor_ = file->message_type(4);
  static const int SocialDataItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataItem, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataItem, data_),
  };
  SocialDataItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialDataItem_descriptor_,
      SocialDataItem::default_instance_,
      SocialDataItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialDataItem));
  SocialDataUpdate_descriptor_ = file->message_type(5);
  static const int SocialDataUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataUpdate, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataUpdate, items_),
  };
  SocialDataUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialDataUpdate_descriptor_,
      SocialDataUpdate::default_instance_,
      SocialDataUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialDataUpdate));
  FrameStatusSocialCmd_descriptor_ = file->message_type(6);
  static const int FrameStatusSocialCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStatusSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStatusSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStatusSocialCmd, open_),
  };
  FrameStatusSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameStatusSocialCmd_descriptor_,
      FrameStatusSocialCmd::default_instance_,
      FrameStatusSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStatusSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStatusSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameStatusSocialCmd));
  UseGiftCodeSocialCmd_descriptor_ = file->message_type(7);
  static const int UseGiftCodeSocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseGiftCodeSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseGiftCodeSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseGiftCodeSocialCmd, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseGiftCodeSocialCmd, ret_),
  };
  UseGiftCodeSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseGiftCodeSocialCmd_descriptor_,
      UseGiftCodeSocialCmd::default_instance_,
      UseGiftCodeSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseGiftCodeSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseGiftCodeSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseGiftCodeSocialCmd));
  OperateQuerySocialCmd_descriptor_ = file->message_type(8);
  static const int OperateQuerySocialCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateQuerySocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateQuerySocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateQuerySocialCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateQuerySocialCmd, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateQuerySocialCmd, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateQuerySocialCmd, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateQuerySocialCmd, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateQuerySocialCmd, param4_),
  };
  OperateQuerySocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateQuerySocialCmd_descriptor_,
      OperateQuerySocialCmd::default_instance_,
      OperateQuerySocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateQuerySocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateQuerySocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateQuerySocialCmd));
  OperateTakeSocialCmd_descriptor_ = file->message_type(9);
  static const int OperateTakeSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateTakeSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateTakeSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateTakeSocialCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateTakeSocialCmd, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateTakeSocialCmd, subkey_),
  };
  OperateTakeSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateTakeSocialCmd_descriptor_,
      OperateTakeSocialCmd::default_instance_,
      OperateTakeSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateTakeSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateTakeSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateTakeSocialCmd));
  QueryDataNtfSocialCmd_descriptor_ = file->message_type(10);
  static const int QueryDataNtfSocialCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDataNtfSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDataNtfSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDataNtfSocialCmd, relations_),
  };
  QueryDataNtfSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryDataNtfSocialCmd_descriptor_,
      QueryDataNtfSocialCmd::default_instance_,
      QueryDataNtfSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDataNtfSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDataNtfSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryDataNtfSocialCmd));
  OperActivityUrl_descriptor_ = file->message_type(11);
  static const int OperActivityUrl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivityUrl, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivityUrl, url_),
  };
  OperActivityUrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperActivityUrl_descriptor_,
      OperActivityUrl::default_instance_,
      OperActivityUrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivityUrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivityUrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperActivityUrl));
  OperActivityData_descriptor_ = file->message_type(12);
  static const int OperActivityData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivityData, iconurls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivityData, urls_),
  };
  OperActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperActivityData_descriptor_,
      OperActivityData::default_instance_,
      OperActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperActivityData));
  OperSubActivityData_descriptor_ = file->message_type(13);
  static const int OperSubActivityData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivityData, picurls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivityData, urls_),
  };
  OperSubActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperSubActivityData_descriptor_,
      OperSubActivityData::default_instance_,
      OperSubActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperSubActivityData));
  OperSubActivity_descriptor_ = file->message_type(14);
  static const int OperSubActivity_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivity, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivity, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivity, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivity, pathid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivity, pathtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivity, pathevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivity, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivity, pic_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivity, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivity, data_),
  };
  OperSubActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperSubActivity_descriptor_,
      OperSubActivity::default_instance_,
      OperSubActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperSubActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperSubActivity));
  OperActivity_descriptor_ = file->message_type(15);
  static const int OperActivity_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivity, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivity, iconurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivity, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivity, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivity, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivity, countdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivity, sub_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivity, data_),
  };
  OperActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperActivity_descriptor_,
      OperActivity::default_instance_,
      OperActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperActivity));
  OperActivityNtfSocialCmd_descriptor_ = file->message_type(16);
  static const int OperActivityNtfSocialCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivityNtfSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivityNtfSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivityNtfSocialCmd, activity_),
  };
  OperActivityNtfSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperActivityNtfSocialCmd_descriptor_,
      OperActivityNtfSocialCmd::default_instance_,
      OperActivityNtfSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivityNtfSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperActivityNtfSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperActivityNtfSocialCmd));
  AddRelation_descriptor_ = file->message_type(17);
  static const int AddRelation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelation, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelation, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelation, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelation, relation_),
  };
  AddRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRelation_descriptor_,
      AddRelation::default_instance_,
      AddRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRelation));
  RemoveRelation_descriptor_ = file->message_type(18);
  static const int RemoveRelation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRelation, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRelation, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRelation, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRelation, relation_),
  };
  RemoveRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveRelation_descriptor_,
      RemoveRelation::default_instance_,
      RemoveRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveRelation));
  Recall_descriptor_ = file->message_type(19);
  static const int Recall_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recall, charid_),
  };
  Recall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Recall_descriptor_,
      Recall::default_instance_,
      Recall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Recall));
  QueryRecallListSocialCmd_descriptor_ = file->message_type(20);
  static const int QueryRecallListSocialCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRecallListSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRecallListSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRecallListSocialCmd, items_),
  };
  QueryRecallListSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryRecallListSocialCmd_descriptor_,
      QueryRecallListSocialCmd::default_instance_,
      QueryRecallListSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRecallListSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRecallListSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryRecallListSocialCmd));
  RecallFriendSocialCmd_descriptor_ = file->message_type(21);
  static const int RecallFriendSocialCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallFriendSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallFriendSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallFriendSocialCmd, charid_),
  };
  RecallFriendSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecallFriendSocialCmd_descriptor_,
      RecallFriendSocialCmd::default_instance_,
      RecallFriendSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallFriendSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallFriendSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecallFriendSocialCmd));
  AddRelationResultSocialCmd_descriptor_ = file->message_type(22);
  static const int AddRelationResultSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationResultSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationResultSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationResultSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationResultSocialCmd, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationResultSocialCmd, success_),
  };
  AddRelationResultSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRelationResultSocialCmd_descriptor_,
      AddRelationResultSocialCmd::default_instance_,
      AddRelationResultSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationResultSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationResultSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRelationResultSocialCmd));
  QueryChargeVirginCmd_descriptor_ = file->message_type(23);
  static const int QueryChargeVirginCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChargeVirginCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChargeVirginCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChargeVirginCmd, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChargeVirginCmd, del_),
  };
  QueryChargeVirginCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryChargeVirginCmd_descriptor_,
      QueryChargeVirginCmd::default_instance_,
      QueryChargeVirginCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChargeVirginCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChargeVirginCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryChargeVirginCmd));
  QueryUserInfoCmd_descriptor_ = file->message_type(24);
  static const int QueryUserInfoCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoCmd, data_),
  };
  QueryUserInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryUserInfoCmd_descriptor_,
      QueryUserInfoCmd::default_instance_,
      QueryUserInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryUserInfoCmd));
  SocialityParam_descriptor_ = file->enum_type(0);
  ESocialRelation_descriptor_ = file->enum_type(1);
  ESocialData_descriptor_ = file->enum_type(2);
  EOperateType_descriptor_ = file->enum_type(3);
  EOperateState_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SessionSociality_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialData_descriptor_, &SocialData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuerySocialData_descriptor_, &QuerySocialData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindUser_descriptor_, &FindUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialUpdate_descriptor_, &SocialUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialDataItem_descriptor_, &SocialDataItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialDataUpdate_descriptor_, &SocialDataUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameStatusSocialCmd_descriptor_, &FrameStatusSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseGiftCodeSocialCmd_descriptor_, &UseGiftCodeSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateQuerySocialCmd_descriptor_, &OperateQuerySocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateTakeSocialCmd_descriptor_, &OperateTakeSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryDataNtfSocialCmd_descriptor_, &QueryDataNtfSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperActivityUrl_descriptor_, &OperActivityUrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperActivityData_descriptor_, &OperActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperSubActivityData_descriptor_, &OperSubActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperSubActivity_descriptor_, &OperSubActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperActivity_descriptor_, &OperActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperActivityNtfSocialCmd_descriptor_, &OperActivityNtfSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRelation_descriptor_, &AddRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveRelation_descriptor_, &RemoveRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Recall_descriptor_, &Recall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryRecallListSocialCmd_descriptor_, &QueryRecallListSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecallFriendSocialCmd_descriptor_, &RecallFriendSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRelationResultSocialCmd_descriptor_, &AddRelationResultSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryChargeVirginCmd_descriptor_, &QueryChargeVirginCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryUserInfoCmd_descriptor_, &QueryUserInfoCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SessionSociality_2eproto() {
  delete SocialData::default_instance_;
  delete SocialData_reflection_;
  delete QuerySocialData::default_instance_;
  delete QuerySocialData_reflection_;
  delete FindUser::default_instance_;
  delete FindUser_reflection_;
  delete SocialUpdate::default_instance_;
  delete SocialUpdate_reflection_;
  delete SocialDataItem::default_instance_;
  delete SocialDataItem_reflection_;
  delete SocialDataUpdate::default_instance_;
  delete SocialDataUpdate_reflection_;
  delete FrameStatusSocialCmd::default_instance_;
  delete FrameStatusSocialCmd_reflection_;
  delete UseGiftCodeSocialCmd::default_instance_;
  delete UseGiftCodeSocialCmd_reflection_;
  delete OperateQuerySocialCmd::default_instance_;
  delete OperateQuerySocialCmd_reflection_;
  delete OperateTakeSocialCmd::default_instance_;
  delete OperateTakeSocialCmd_reflection_;
  delete QueryDataNtfSocialCmd::default_instance_;
  delete QueryDataNtfSocialCmd_reflection_;
  delete OperActivityUrl::default_instance_;
  delete OperActivityUrl_reflection_;
  delete OperActivityData::default_instance_;
  delete OperActivityData_reflection_;
  delete OperSubActivityData::default_instance_;
  delete OperSubActivityData_reflection_;
  delete OperSubActivity::default_instance_;
  delete OperSubActivity_reflection_;
  delete OperActivity::default_instance_;
  delete OperActivity_reflection_;
  delete OperActivityNtfSocialCmd::default_instance_;
  delete OperActivityNtfSocialCmd_reflection_;
  delete AddRelation::default_instance_;
  delete AddRelation_reflection_;
  delete RemoveRelation::default_instance_;
  delete RemoveRelation_reflection_;
  delete Recall::default_instance_;
  delete Recall_reflection_;
  delete QueryRecallListSocialCmd::default_instance_;
  delete QueryRecallListSocialCmd_reflection_;
  delete RecallFriendSocialCmd::default_instance_;
  delete RecallFriendSocialCmd_reflection_;
  delete AddRelationResultSocialCmd::default_instance_;
  delete AddRelationResultSocialCmd_reflection_;
  delete QueryChargeVirginCmd::default_instance_;
  delete QueryChargeVirginCmd_reflection_;
  delete QueryUserInfoCmd::default_instance_;
  delete QueryUserInfoCmd_reflection_;
}

void protobuf_AddDesc_SessionSociality_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026SessionSociality.proto\022\003Cmd\032\nxCmd.prot"
    "o\032\021ProtoCommon.proto\"\207\005\n\nSocialData\022\017\n\004g"
    "uid\030\001 \001(\004:\0010\022\020\n\005accid\030\002 \001(\004:\0010\022\020\n\005level\030"
    "\003 \001(\r:\0010\022\026\n\013offlinetime\030\004 \001(\r:\0010\022\023\n\010rela"
    "tion\030\005 \001(\r:\0010\022\023\n\010portrait\030\006 \001(\r:\0010\022\020\n\005fr"
    "ame\030\007 \001(\r:\0010\022\017\n\004hair\030\010 \001(\r:\0010\022\024\n\thaircol"
    "or\030\t \001(\r:\0010\022\017\n\004body\030\n \001(\r:\0010\022\017\n\004head\030\013 \001"
    "(\r:\0010\022\017\n\004face\030\014 \001(\r:\0010\022\020\n\005mouth\030\r \001(\r:\0010"
    "\022\016\n\003eye\030\016 \001(\r:\0010\022\021\n\006profic\030\017 \001(\r:\0010\022\026\n\013a"
    "dventurelv\030\020 \001(\r:\0010\022\027\n\014adventureexp\030\021 \001("
    "\r:\0010\022\026\n\013appellation\030\022 \001(\r:\0010\022\020\n\005mapid\030\023 "
    "\001(\r:\0010\022\021\n\006zoneid\030\024 \001(\r:\0010\0225\n\nprofession\030"
    "\025 \001(\0162\020.Cmd.EProfession:\017EPROFESSION_MIN"
    "\022)\n\006gender\030\026 \001(\0162\014.Cmd.EGender:\013EGENDER_"
    "MIN\022\024\n\005blink\030\027 \001(\010:\005false\022\025\n\006recall\030\030 \001("
    "\010:\005false\022\030\n\tcanrecall\030\031 \001(\010:\005false\022\014\n\004na"
    "me\030\032 \001(\t\022\021\n\tguildname\030\033 \001(\t\022\025\n\rguildport"
    "rait\030\034 \001(\t\022\022\n\ncreatetime\030\035 \001(\t\"\253\001\n\017Query"
    "SocialData\022:\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\037S"
    "ESSION_USER_SOCIALITY_PROTOCMD\022<\n\005param\030"
    "\002 \001(\0162\023.Cmd.SocialityParam:\030SOCIALITYPAR"
    "AM_QUERYDATA\022\036\n\005datas\030\004 \003(\0132\017.Cmd.Social"
    "Data\"\264\001\n\010FindUser\022:\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\037SESSION_USER_SOCIALITY_PROTOCMD\022;\n"
    "\005param\030\002 \001(\0162\023.Cmd.SocialityParam:\027SOCIA"
    "LITYPARAM_FINDUSER\022\017\n\007keyword\030\003 \001(\t\022\036\n\005d"
    "atas\030\004 \003(\0132\017.Cmd.SocialData\"\265\001\n\014SocialUp"
    "date\022:\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\037SESSION"
    "_USER_SOCIALITY_PROTOCMD\0229\n\005param\030\002 \001(\0162"
    "\023.Cmd.SocialityParam:\025SOCIALITYPARAM_UPD"
    "ATE\022 \n\007updates\030\004 \003(\0132\017.Cmd.SocialData\022\014\n"
    "\004dels\030\005 \003(\004\"a\n\016SocialDataItem\022/\n\004type\030\001 "
    "\001(\0162\020.Cmd.ESocialData:\017ESOCIALDATA_MIN\022\020"
    "\n\005value\030\002 \001(\r:\0010\022\014\n\004data\030\003 \001(\t\"\302\001\n\020Socia"
    "lDataUpdate\022:\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\037"
    "SESSION_USER_SOCIALITY_PROTOCMD\022=\n\005param"
    "\030\002 \001(\0162\023.Cmd.SocialityParam:\031SOCIALITYPA"
    "RAM_UPDATEDATA\022\017\n\004guid\030\003 \001(\004:\0010\022\"\n\005items"
    "\030\004 \003(\0132\023.Cmd.SocialDataItem\"\247\001\n\024FrameSta"
    "tusSocialCmd\022:\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\037SESSION_USER_SOCIALITY_PROTOCMD\022>\n\005para"
    "m\030\002 \001(\0162\023.Cmd.SocialityParam:\032SOCIALITYP"
    "ARAM_FRAMESTATUS\022\023\n\004open\030\003 \001(\010:\005false\"\257\001"
    "\n\024UseGiftCodeSocialCmd\022:\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\037SESSION_USER_SOCIALITY_PROTOC"
    "MD\022@\n\005param\030\002 \001(\0162\023.Cmd.SocialityParam:\034"
    "SOCIALITYPARAM_USE_GIFT_CODE\022\014\n\004code\030\003 \001"
    "(\t\022\013\n\003ret\030\004 \001(\010\"\231\002\n\025OperateQuerySocialCm"
    "d\022:\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\037SESSION_US"
    "ER_SOCIALITY_PROTOCMD\022@\n\005param\030\002 \001(\0162\023.C"
    "md.SocialityParam:\034SOCIALITYPARAM_OPERAT"
    "E_QUERY\022\037\n\004type\030\003 \001(\0162\021.Cmd.EOperateType"
    "\022!\n\005state\030\004 \001(\0162\022.Cmd.EOperateState\022\016\n\006p"
    "aram1\030\005 \001(\r\022\016\n\006param2\030\006 \001(\r\022\016\n\006param3\030\007 "
    "\001(\r\022\016\n\006param4\030\010 \003(\r\"\347\001\n\024OperateTakeSocia"
    "lCmd\022:\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\037SESSION"
    "_USER_SOCIALITY_PROTOCMD\022\?\n\005param\030\002 \001(\0162"
    "\023.Cmd.SocialityParam:\033SOCIALITYPARAM_OPE"
    "RATE_TAKE\022\037\n\004type\030\003 \001(\0162\021.Cmd.EOperateTy"
    "pe\022!\n\005state\030\004 \001(\0162\022.Cmd.EOperateState\022\016\n"
    "\006subkey\030\005 \001(\r\"\271\001\n\025QueryDataNtfSocialCmd\022"
    ":\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\037SESSION_USER"
    "_SOCIALITY_PROTOCMD\022@\n\005param\030\002 \001(\0162\023.Cmd"
    ".SocialityParam:\034SOCIALITYPARAM_QUERYDAT"
    "A_NTF\022\"\n\trelations\030\003 \003(\0132\017.Cmd.SocialDat"
    "a\"3\n\017OperActivityUrl\022\023\n\010language\030\001 \001(\r:\001"
    "0\022\013\n\003url\030\002 \001(\t\"^\n\020OperActivityData\022&\n\010ic"
    "onurls\030\001 \003(\0132\024.Cmd.OperActivityUrl\022\"\n\004ur"
    "ls\030\002 \003(\0132\024.Cmd.OperActivityUrl\"`\n\023OperSu"
    "bActivityData\022%\n\007picurls\030\001 \003(\0132\024.Cmd.Ope"
    "rActivityUrl\022\"\n\004urls\030\002 \003(\0132\024.Cmd.OperAct"
    "ivityUrl\"\355\001\n\017OperSubActivity\022\r\n\002id\030\001 \001(\004"
    ":\0010\022\014\n\004name\030\002 \001(\t\022\024\n\tbegintime\030\004 \001(\r:\0010\022"
    "\022\n\007endtime\030\005 \001(\r:\0010\022\021\n\006pathid\030\006 \001(\r:\0010\022\023"
    "\n\010pathtype\030\007 \001(\r:\0010\022\021\n\tpathevent\030\010 \001(\t\022\013"
    "\n\003url\030\t \001(\t\022\017\n\007pic_url\030\n \001(\t\022\022\n\007groupid\030"
    "\013 \001(\004:\0010\022&\n\004data\030\014 \001(\0132\030.Cmd.OperSubActi"
    "vityData\"\336\001\n\014OperActivity\022\r\n\002id\030\001 \001(\r:\0010"
    "\022\014\n\004name\030\002 \001(\t\022\017\n\007iconurl\030\003 \001(\t\022\024\n\tbegin"
    "time\030\004 \001(\r:\0010\022\022\n\007endtime\030\005 \001(\r:\0010\022\013\n\003url"
    "\030\006 \001(\t\022\030\n\tcountdown\030\007 \001(\010:\005false\022*\n\014sub_"
    "activity\030\010 \003(\0132\024.Cmd.OperSubActivity\022#\n\004"
    "data\030\t \001(\0132\025.Cmd.OperActivityData\"\301\001\n\030Op"
    "erActivityNtfSocialCmd\022:\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\037SESSION_USER_SOCIALITY_PROTOC"
    "MD\022D\n\005param\030\002 \001(\0162\023.Cmd.SocialityParam: "
    "SOCIALITYPARAM_OPER_ACTIVITY_NTF\022#\n\010acti"
    "vity\030\003 \003(\0132\021.Cmd.OperActivity\"\326\001\n\013AddRel"
    "ation\022:\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\037SESSIO"
    "N_USER_SOCIALITY_PROTOCMD\022>\n\005param\030\002 \001(\016"
    "2\023.Cmd.SocialityParam:\032SOCIALITYPARAM_AD"
    "DRELATION\022\016\n\006charid\030\003 \003(\004\022;\n\010relation\030\004 "
    "\001(\0162\024.Cmd.ESocialRelation:\023ESOCIALRELATI"
    "ON_MIN\"\337\001\n\016RemoveRelation\022:\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\037SESSION_USER_SOCIALITY_PRO"
    "TOCMD\022A\n\005param\030\002 \001(\0162\023.Cmd.SocialityPara"
    "m:\035SOCIALITYPARAM_REMOVERELATION\022\021\n\006char"
    "id\030\003 \001(\004:\0010\022;\n\010relation\030\004 \001(\0162\024.Cmd.ESoc"
    "ialRelation:\023ESOCIALRELATION_MIN\"\033\n\006Reca"
    "ll\022\021\n\006charid\030\001 \001(\004:\0010\"\270\001\n\030QueryRecallLis"
    "tSocialCmd\022:\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\037S"
    "ESSION_USER_SOCIALITY_PROTOCMD\022D\n\005param\030"
    "\002 \001(\0162\023.Cmd.SocialityParam: SOCIALITYPAR"
    "AM_QUERY_RECALL_LIST\022\032\n\005items\030\003 \003(\0132\013.Cm"
    "d.Recall\"\250\001\n\025RecallFriendSocialCmd\022:\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\037SESSION_USER_SOCI"
    "ALITY_PROTOCMD\022@\n\005param\030\002 \001(\0162\023.Cmd.Soci"
    "alityParam:\034SOCIALITYPARAM_RECALL_FRIEND"
    "\022\021\n\006charid\030\003 \001(\004:\0010\"\210\002\n\032AddRelationResul"
    "tSocialCmd\022:\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\037S"
    "ESSION_USER_SOCIALITY_PROTOCMD\022F\n\005param\030"
    "\002 \001(\0162\023.Cmd.SocialityParam:\"SOCIALITYPAR"
    "AM_ADD_RELATION_RESULT\022\021\n\006charid\030\003 \001(\004:\001"
    "0\022;\n\010relation\030\004 \001(\0162\024.Cmd.ESocialRelatio"
    "n:\023ESOCIALRELATION_MIN\022\026\n\007success\030\005 \001(\010:"
    "\005false\"\271\001\n\024QueryChargeVirginCmd\022:\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\037SESSION_USER_SOCIALI"
    "TY_PROTOCMD\022F\n\005param\030\002 \001(\0162\023.Cmd.Sociali"
    "tyParam:\"SOCIALITYPARAM_QUERY_CHARGE_VIR"
    "GIN\022\r\n\005datas\030\003 \003(\004\022\016\n\003del\030\004 \001(\004:\0010\"\304\001\n\020Q"
    "ueryUserInfoCmd\022:\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\037SESSION_USER_SOCIALITY_PROTOCMD\022B\n\005p"
    "aram\030\002 \001(\0162\023.Cmd.SocialityParam:\036SOCIALI"
    "TYPARAM_QUERY_USER_INFO\022\021\n\006charid\030\003 \001(\004:"
    "\0010\022\035\n\004data\030\004 \001(\0132\017.Cmd.SocialData*\321\004\n\016So"
    "cialityParam\022\034\n\030SOCIALITYPARAM_QUERYDATA"
    "\020\001\022\033\n\027SOCIALITYPARAM_FINDUSER\020\002\022\031\n\025SOCIA"
    "LITYPARAM_UPDATE\020\003\022\035\n\031SOCIALITYPARAM_UPD"
    "ATEDATA\020\004\022\036\n\032SOCIALITYPARAM_FRAMESTATUS\020"
    "\005\022 \n\034SOCIALITYPARAM_USE_GIFT_CODE\020\006\022 \n\034S"
    "OCIALITYPARAM_OPERATE_QUERY\020\007\022\037\n\033SOCIALI"
    "TYPARAM_OPERATE_TAKE\020\010\022 \n\034SOCIALITYPARAM"
    "_QUERYDATA_NTF\020\t\022$\n SOCIALITYPARAM_OPER_"
    "ACTIVITY_NTF\020\n\022\036\n\032SOCIALITYPARAM_ADDRELA"
    "TION\020\013\022!\n\035SOCIALITYPARAM_REMOVERELATION\020"
    "\014\022$\n SOCIALITYPARAM_QUERY_RECALL_LIST\020\r\022"
    " \n\034SOCIALITYPARAM_RECALL_FRIEND\020\016\022&\n\"SOC"
    "IALITYPARAM_ADD_RELATION_RESULT\020\017\022&\n\"SOC"
    "IALITYPARAM_QUERY_CHARGE_VIRGIN\020\020\022\"\n\036SOC"
    "IALITYPARAM_QUERY_USER_INFO\020\021*\267\004\n\017ESocia"
    "lRelation\022\027\n\023ESOCIALRELATION_MIN\020\001\022\032\n\026ES"
    "OCIALRELATION_FRIEND\020\002\022\031\n\025ESOCIALRELATIO"
    "N_MERRY\020\004\022\030\n\024ESOCIALRELATION_CHAT\020\010\022\030\n\024E"
    "SOCIALRELATION_TEAM\020\020\022\031\n\025ESOCIALRELATION"
    "_APPLY\020 \022\031\n\025ESOCIALRELATION_BLACK\020@\022\"\n\035E"
    "SOCIALRELATION_BLACK_FOREVER\020\200\001\022\032\n\025ESOCI"
    "ALRELATION_TUTOR\020\200\002\022 \n\033ESOCIALRELATION_T"
    "UTOR_APPLY\020\200\004\022\034\n\027ESOCIALRELATION_STUDENT"
    "\020\200\010\022\"\n\035ESOCIALRELATION_STUDENT_APPLY\020\200\020\022"
    "#\n\036ESOCIALRELATION_STUDENT_RECENT\020\200 \022!\n\034"
    "ESOCIALRELATION_TUTOR_PUNISH\020\200@\022%\n\037ESOCI"
    "ALRELATION_TUTOR_CLASSMATE\020\200\200\001\022\034\n\026ESOCIA"
    "LRELATION_RECALL\020\200\200\002\022\036\n\030ESOCIALRELATION_"
    "BERECALL\020\200\200\004\022\031\n\023ESOCIALRELATION_MAX\020\201\200\004*"
    "\315\005\n\013ESocialData\022\023\n\017ESOCIALDATA_MIN\020\001\022\025\n\021"
    "ESOCIALDATA_LEVEL\020\002\022\033\n\027ESOCIALDATA_OFFLI"
    "NETIME\020\003\022\030\n\024ESOCIALDATA_RELATION\020\004\022\032\n\026ES"
    "OCIALDATA_PROFESSION\020\005\022\030\n\024ESOCIALDATA_PO"
    "RTRAIT\020\006\022\025\n\021ESOCIALDATA_FRAME\020\007\022\024\n\020ESOCI"
    "ALDATA_HAIR\020\010\022\031\n\025ESOCIALDATA_HAIRCOLOR\020\t"
    "\022\024\n\020ESOCIALDATA_BODY\020\n\022\033\n\027ESOCIALDATA_AD"
    "VENTURELV\020\013\022\034\n\030ESOCIALDATA_ADVENTUREEXP\020"
    "\014\022\033\n\027ESOCIALDATA_APPELLATION\020\r\022\026\n\022ESOCIA"
    "LDATA_GENDER\020\016\022\031\n\025ESOCIALDATA_GUILDNAME\020"
    "\017\022\035\n\031ESOCIALDATA_GUILDPORTRAIT\020\020\022\025\n\021ESOC"
    "IALDATA_BLINK\020\022\022\026\n\022ESOCIALDATA_ZONEID\020\023\022"
    "\024\n\020ESOCIALDATA_NAME\020\024\022\032\n\026ESOCIALDATA_CRE"
    "ATETIME\020\025\022\024\n\020ESOCIALDATA_HEAD\020\026\022\024\n\020ESOCI"
    "ALDATA_FACE\020\027\022\025\n\021ESOCIALDATA_MOUTH\020\030\022\034\n\030"
    "ESOCIALDATA_TUTOR_PROFIC\020\031\022\023\n\017ESOCIALDAT"
    "A_EYE\020\032\022\026\n\022ESOCIALDATA_RECALL\020\033\022\031\n\025ESOCI"
    "ALDATA_CANRECALL\020\034\022\023\n\017ESOCIALDATA_MAX\020\035*"
    "\330\001\n\014EOperateType\022\027\n\023EOperateType_Summer\020"
    "\001\022\027\n\023EOperateType_Autumn\020\002\022\027\n\023EOperateTy"
    "pe_Charge\020\003\022\027\n\023EOperateType_CodeBW\020\004\022\027\n\023"
    "EOperateType_CodeMX\020\005\022\027\n\023EOperateType_Re"
    "dBag\020\006\022\026\n\022EOperateType_Phone\020\007\022\032\n\026EOpera"
    "teType_MonthCard\020\010*t\n\rEOperateState\022\026\n\022E"
    "OperateState_None\020\001\022\026\n\022EOperateState_Tok"
    "e\020\002\022\031\n\025EOperateState_CanTake\020\003\022\030\n\024EOpera"
    "teState_Expire\020\004", 7216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SessionSociality.proto", &protobuf_RegisterTypes);
  SocialData::default_instance_ = new SocialData();
  QuerySocialData::default_instance_ = new QuerySocialData();
  FindUser::default_instance_ = new FindUser();
  SocialUpdate::default_instance_ = new SocialUpdate();
  SocialDataItem::default_instance_ = new SocialDataItem();
  SocialDataUpdate::default_instance_ = new SocialDataUpdate();
  FrameStatusSocialCmd::default_instance_ = new FrameStatusSocialCmd();
  UseGiftCodeSocialCmd::default_instance_ = new UseGiftCodeSocialCmd();
  OperateQuerySocialCmd::default_instance_ = new OperateQuerySocialCmd();
  OperateTakeSocialCmd::default_instance_ = new OperateTakeSocialCmd();
  QueryDataNtfSocialCmd::default_instance_ = new QueryDataNtfSocialCmd();
  OperActivityUrl::default_instance_ = new OperActivityUrl();
  OperActivityData::default_instance_ = new OperActivityData();
  OperSubActivityData::default_instance_ = new OperSubActivityData();
  OperSubActivity::default_instance_ = new OperSubActivity();
  OperActivity::default_instance_ = new OperActivity();
  OperActivityNtfSocialCmd::default_instance_ = new OperActivityNtfSocialCmd();
  AddRelation::default_instance_ = new AddRelation();
  RemoveRelation::default_instance_ = new RemoveRelation();
  Recall::default_instance_ = new Recall();
  QueryRecallListSocialCmd::default_instance_ = new QueryRecallListSocialCmd();
  RecallFriendSocialCmd::default_instance_ = new RecallFriendSocialCmd();
  AddRelationResultSocialCmd::default_instance_ = new AddRelationResultSocialCmd();
  QueryChargeVirginCmd::default_instance_ = new QueryChargeVirginCmd();
  QueryUserInfoCmd::default_instance_ = new QueryUserInfoCmd();
  SocialData::default_instance_->InitAsDefaultInstance();
  QuerySocialData::default_instance_->InitAsDefaultInstance();
  FindUser::default_instance_->InitAsDefaultInstance();
  SocialUpdate::default_instance_->InitAsDefaultInstance();
  SocialDataItem::default_instance_->InitAsDefaultInstance();
  SocialDataUpdate::default_instance_->InitAsDefaultInstance();
  FrameStatusSocialCmd::default_instance_->InitAsDefaultInstance();
  UseGiftCodeSocialCmd::default_instance_->InitAsDefaultInstance();
  OperateQuerySocialCmd::default_instance_->InitAsDefaultInstance();
  OperateTakeSocialCmd::default_instance_->InitAsDefaultInstance();
  QueryDataNtfSocialCmd::default_instance_->InitAsDefaultInstance();
  OperActivityUrl::default_instance_->InitAsDefaultInstance();
  OperActivityData::default_instance_->InitAsDefaultInstance();
  OperSubActivityData::default_instance_->InitAsDefaultInstance();
  OperSubActivity::default_instance_->InitAsDefaultInstance();
  OperActivity::default_instance_->InitAsDefaultInstance();
  OperActivityNtfSocialCmd::default_instance_->InitAsDefaultInstance();
  AddRelation::default_instance_->InitAsDefaultInstance();
  RemoveRelation::default_instance_->InitAsDefaultInstance();
  Recall::default_instance_->InitAsDefaultInstance();
  QueryRecallListSocialCmd::default_instance_->InitAsDefaultInstance();
  RecallFriendSocialCmd::default_instance_->InitAsDefaultInstance();
  AddRelationResultSocialCmd::default_instance_->InitAsDefaultInstance();
  QueryChargeVirginCmd::default_instance_->InitAsDefaultInstance();
  QueryUserInfoCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SessionSociality_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SessionSociality_2eproto {
  StaticDescriptorInitializer_SessionSociality_2eproto() {
    protobuf_AddDesc_SessionSociality_2eproto();
  }
} static_descriptor_initializer_SessionSociality_2eproto_;
const ::google::protobuf::EnumDescriptor* SocialityParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialityParam_descriptor_;
}
bool SocialityParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESocialRelation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESocialRelation_descriptor_;
}
bool ESocialRelation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 65537:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESocialData_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESocialData_descriptor_;
}
bool ESocialData_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EOperateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EOperateType_descriptor_;
}
bool EOperateType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EOperateState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EOperateState_descriptor_;
}
bool EOperateState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SocialData::kGuidFieldNumber;
const int SocialData::kAccidFieldNumber;
const int SocialData::kLevelFieldNumber;
const int SocialData::kOfflinetimeFieldNumber;
const int SocialData::kRelationFieldNumber;
const int SocialData::kPortraitFieldNumber;
const int SocialData::kFrameFieldNumber;
const int SocialData::kHairFieldNumber;
const int SocialData::kHaircolorFieldNumber;
const int SocialData::kBodyFieldNumber;
const int SocialData::kHeadFieldNumber;
const int SocialData::kFaceFieldNumber;
const int SocialData::kMouthFieldNumber;
const int SocialData::kEyeFieldNumber;
const int SocialData::kProficFieldNumber;
const int SocialData::kAdventurelvFieldNumber;
const int SocialData::kAdventureexpFieldNumber;
const int SocialData::kAppellationFieldNumber;
const int SocialData::kMapidFieldNumber;
const int SocialData::kZoneidFieldNumber;
const int SocialData::kProfessionFieldNumber;
const int SocialData::kGenderFieldNumber;
const int SocialData::kBlinkFieldNumber;
const int SocialData::kRecallFieldNumber;
const int SocialData::kCanrecallFieldNumber;
const int SocialData::kNameFieldNumber;
const int SocialData::kGuildnameFieldNumber;
const int SocialData::kGuildportraitFieldNumber;
const int SocialData::kCreatetimeFieldNumber;
#endif  // !_MSC_VER

SocialData::SocialData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SocialData)
}

void SocialData::InitAsDefaultInstance() {
}

SocialData::SocialData(const SocialData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SocialData)
}

void SocialData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  offlinetime_ = 0u;
  relation_ = 0u;
  portrait_ = 0u;
  frame_ = 0u;
  hair_ = 0u;
  haircolor_ = 0u;
  body_ = 0u;
  head_ = 0u;
  face_ = 0u;
  mouth_ = 0u;
  eye_ = 0u;
  profic_ = 0u;
  adventurelv_ = 0u;
  adventureexp_ = 0u;
  appellation_ = 0u;
  mapid_ = 0u;
  zoneid_ = 0u;
  profession_ = 0;
  gender_ = 0;
  blink_ = false;
  recall_ = false;
  canrecall_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildportrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialData::~SocialData() {
  // @@protoc_insertion_point(destructor:Cmd.SocialData)
  SharedDtor();
}

void SocialData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildportrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildportrait_;
  }
  if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createtime_;
  }
  if (this != default_instance_) {
  }
}

void SocialData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialData_descriptor_;
}

const SocialData& SocialData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

SocialData* SocialData::default_instance_ = NULL;

SocialData* SocialData::New() const {
  return new SocialData;
}

void SocialData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SocialData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(guid_, hair_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(haircolor_, adventurelv_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(adventureexp_, gender_);
    ZR_(blink_, recall_);
  }
  if (_has_bits_[24 / 32] & 520093696) {
    canrecall_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_guildportrait()) {
      if (guildportrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildportrait_->clear();
      }
    }
    if (has_createtime()) {
      if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        createtime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SocialData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_offlinetime;
        break;
      }

      // optional uint32 offlinetime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_offlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_relation;
        break;
      }

      // optional uint32 relation = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_relation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relation_)));
          set_has_relation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_portrait;
        break;
      }

      // optional uint32 portrait = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portrait_)));
          set_has_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_frame;
        break;
      }

      // optional uint32 frame = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hair;
        break;
      }

      // optional uint32 hair = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_haircolor;
        break;
      }

      // optional uint32 haircolor = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_body;
        break;
      }

      // optional uint32 body = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_head;
        break;
      }

      // optional uint32 head = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_face;
        break;
      }

      // optional uint32 face = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mouth;
        break;
      }

      // optional uint32 mouth = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_mouth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouth_)));
          set_has_mouth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_eye;
        break;
      }

      // optional uint32 eye = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_eye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eye_)));
          set_has_eye();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_profic;
        break;
      }

      // optional uint32 profic = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_profic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profic_)));
          set_has_profic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_adventurelv;
        break;
      }

      // optional uint32 adventurelv = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_adventurelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adventurelv_)));
          set_has_adventurelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_adventureexp;
        break;
      }

      // optional uint32 adventureexp = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_adventureexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adventureexp_)));
          set_has_adventureexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_appellation;
        break;
      }

      // optional uint32 appellation = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_appellation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appellation_)));
          set_has_appellation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_profession;
        break;
      }

      // optional .Cmd.EProfession profession = 21 [default = EPROFESSION_MIN];
      case 21: {
        if (tag == 168) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_profession(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_gender;
        break;
      }

      // optional .Cmd.EGender gender = 22 [default = EGENDER_MIN];
      case 22: {
        if (tag == 176) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGender_IsValid(value)) {
            set_gender(static_cast< ::Cmd::EGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_blink;
        break;
      }

      // optional bool blink = 23 [default = false];
      case 23: {
        if (tag == 184) {
         parse_blink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blink_)));
          set_has_blink();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_recall;
        break;
      }

      // optional bool recall = 24 [default = false];
      case 24: {
        if (tag == 192) {
         parse_recall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recall_)));
          set_has_recall();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_canrecall;
        break;
      }

      // optional bool canrecall = 25 [default = false];
      case 25: {
        if (tag == 200) {
         parse_canrecall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canrecall_)));
          set_has_canrecall();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_name;
        break;
      }

      // optional string name = 26;
      case 26: {
        if (tag == 210) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_guildname;
        break;
      }

      // optional string guildname = 27;
      case 27: {
        if (tag == 218) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_guildportrait;
        break;
      }

      // optional string guildportrait = 28;
      case 28: {
        if (tag == 226) {
         parse_guildportrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildportrait()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildportrait().data(), this->guildportrait().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildportrait");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_createtime;
        break;
      }

      // optional string createtime = 29;
      case 29: {
        if (tag == 234) {
         parse_createtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->createtime().data(), this->createtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "createtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SocialData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SocialData)
  return false;
#undef DO_
}

void SocialData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SocialData)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional uint64 accid = 2 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accid(), output);
  }

  // optional uint32 level = 3 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 offlinetime = 4 [default = 0];
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offlinetime(), output);
  }

  // optional uint32 relation = 5 [default = 0];
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->relation(), output);
  }

  // optional uint32 portrait = 6 [default = 0];
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->portrait(), output);
  }

  // optional uint32 frame = 7 [default = 0];
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->frame(), output);
  }

  // optional uint32 hair = 8 [default = 0];
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hair(), output);
  }

  // optional uint32 haircolor = 9 [default = 0];
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->haircolor(), output);
  }

  // optional uint32 body = 10 [default = 0];
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->body(), output);
  }

  // optional uint32 head = 11 [default = 0];
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->head(), output);
  }

  // optional uint32 face = 12 [default = 0];
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->face(), output);
  }

  // optional uint32 mouth = 13 [default = 0];
  if (has_mouth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->mouth(), output);
  }

  // optional uint32 eye = 14 [default = 0];
  if (has_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->eye(), output);
  }

  // optional uint32 profic = 15 [default = 0];
  if (has_profic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->profic(), output);
  }

  // optional uint32 adventurelv = 16 [default = 0];
  if (has_adventurelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->adventurelv(), output);
  }

  // optional uint32 adventureexp = 17 [default = 0];
  if (has_adventureexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->adventureexp(), output);
  }

  // optional uint32 appellation = 18 [default = 0];
  if (has_appellation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->appellation(), output);
  }

  // optional uint32 mapid = 19 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->mapid(), output);
  }

  // optional uint32 zoneid = 20 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->zoneid(), output);
  }

  // optional .Cmd.EProfession profession = 21 [default = EPROFESSION_MIN];
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->profession(), output);
  }

  // optional .Cmd.EGender gender = 22 [default = EGENDER_MIN];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->gender(), output);
  }

  // optional bool blink = 23 [default = false];
  if (has_blink()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->blink(), output);
  }

  // optional bool recall = 24 [default = false];
  if (has_recall()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->recall(), output);
  }

  // optional bool canrecall = 25 [default = false];
  if (has_canrecall()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->canrecall(), output);
  }

  // optional string name = 26;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->name(), output);
  }

  // optional string guildname = 27;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->guildname(), output);
  }

  // optional string guildportrait = 28;
  if (has_guildportrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildportrait().data(), this->guildportrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildportrait");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->guildportrait(), output);
  }

  // optional string createtime = 29;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SocialData)
}

::google::protobuf::uint8* SocialData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SocialData)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional uint64 accid = 2 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accid(), target);
  }

  // optional uint32 level = 3 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 offlinetime = 4 [default = 0];
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->offlinetime(), target);
  }

  // optional uint32 relation = 5 [default = 0];
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->relation(), target);
  }

  // optional uint32 portrait = 6 [default = 0];
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->portrait(), target);
  }

  // optional uint32 frame = 7 [default = 0];
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->frame(), target);
  }

  // optional uint32 hair = 8 [default = 0];
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hair(), target);
  }

  // optional uint32 haircolor = 9 [default = 0];
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->haircolor(), target);
  }

  // optional uint32 body = 10 [default = 0];
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->body(), target);
  }

  // optional uint32 head = 11 [default = 0];
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->head(), target);
  }

  // optional uint32 face = 12 [default = 0];
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->face(), target);
  }

  // optional uint32 mouth = 13 [default = 0];
  if (has_mouth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->mouth(), target);
  }

  // optional uint32 eye = 14 [default = 0];
  if (has_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->eye(), target);
  }

  // optional uint32 profic = 15 [default = 0];
  if (has_profic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->profic(), target);
  }

  // optional uint32 adventurelv = 16 [default = 0];
  if (has_adventurelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->adventurelv(), target);
  }

  // optional uint32 adventureexp = 17 [default = 0];
  if (has_adventureexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->adventureexp(), target);
  }

  // optional uint32 appellation = 18 [default = 0];
  if (has_appellation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->appellation(), target);
  }

  // optional uint32 mapid = 19 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->mapid(), target);
  }

  // optional uint32 zoneid = 20 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->zoneid(), target);
  }

  // optional .Cmd.EProfession profession = 21 [default = EPROFESSION_MIN];
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->profession(), target);
  }

  // optional .Cmd.EGender gender = 22 [default = EGENDER_MIN];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->gender(), target);
  }

  // optional bool blink = 23 [default = false];
  if (has_blink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->blink(), target);
  }

  // optional bool recall = 24 [default = false];
  if (has_recall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->recall(), target);
  }

  // optional bool canrecall = 25 [default = false];
  if (has_canrecall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->canrecall(), target);
  }

  // optional string name = 26;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->name(), target);
  }

  // optional string guildname = 27;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->guildname(), target);
  }

  // optional string guildportrait = 28;
  if (has_guildportrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildportrait().data(), this->guildportrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildportrait");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->guildportrait(), target);
  }

  // optional string createtime = 29;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SocialData)
  return target;
}

int SocialData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint64 accid = 2 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint32 level = 3 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 offlinetime = 4 [default = 0];
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offlinetime());
    }

    // optional uint32 relation = 5 [default = 0];
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relation());
    }

    // optional uint32 portrait = 6 [default = 0];
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portrait());
    }

    // optional uint32 frame = 7 [default = 0];
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame());
    }

    // optional uint32 hair = 8 [default = 0];
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hair());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 haircolor = 9 [default = 0];
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haircolor());
    }

    // optional uint32 body = 10 [default = 0];
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

    // optional uint32 head = 11 [default = 0];
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head());
    }

    // optional uint32 face = 12 [default = 0];
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

    // optional uint32 mouth = 13 [default = 0];
    if (has_mouth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouth());
    }

    // optional uint32 eye = 14 [default = 0];
    if (has_eye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eye());
    }

    // optional uint32 profic = 15 [default = 0];
    if (has_profic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profic());
    }

    // optional uint32 adventurelv = 16 [default = 0];
    if (has_adventurelv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adventurelv());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 adventureexp = 17 [default = 0];
    if (has_adventureexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adventureexp());
    }

    // optional uint32 appellation = 18 [default = 0];
    if (has_appellation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appellation());
    }

    // optional uint32 mapid = 19 [default = 0];
    if (has_mapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 zoneid = 20 [default = 0];
    if (has_zoneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional .Cmd.EProfession profession = 21 [default = EPROFESSION_MIN];
    if (has_profession()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

    // optional .Cmd.EGender gender = 22 [default = EGENDER_MIN];
    if (has_gender()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional bool blink = 23 [default = false];
    if (has_blink()) {
      total_size += 2 + 1;
    }

    // optional bool recall = 24 [default = false];
    if (has_recall()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool canrecall = 25 [default = false];
    if (has_canrecall()) {
      total_size += 2 + 1;
    }

    // optional string name = 26;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string guildname = 27;
    if (has_guildname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string guildportrait = 28;
    if (has_guildportrait()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildportrait());
    }

    // optional string createtime = 29;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialData::MergeFrom(const SocialData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_mouth()) {
      set_mouth(from.mouth());
    }
    if (from.has_eye()) {
      set_eye(from.eye());
    }
    if (from.has_profic()) {
      set_profic(from.profic());
    }
    if (from.has_adventurelv()) {
      set_adventurelv(from.adventurelv());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_adventureexp()) {
      set_adventureexp(from.adventureexp());
    }
    if (from.has_appellation()) {
      set_appellation(from.appellation());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_blink()) {
      set_blink(from.blink());
    }
    if (from.has_recall()) {
      set_recall(from.recall());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_canrecall()) {
      set_canrecall(from.canrecall());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildportrait()) {
      set_guildportrait(from.guildportrait());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialData::CopyFrom(const SocialData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialData::IsInitialized() const {

  return true;
}

void SocialData::Swap(SocialData* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(accid_, other->accid_);
    std::swap(level_, other->level_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(relation_, other->relation_);
    std::swap(portrait_, other->portrait_);
    std::swap(frame_, other->frame_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(body_, other->body_);
    std::swap(head_, other->head_);
    std::swap(face_, other->face_);
    std::swap(mouth_, other->mouth_);
    std::swap(eye_, other->eye_);
    std::swap(profic_, other->profic_);
    std::swap(adventurelv_, other->adventurelv_);
    std::swap(adventureexp_, other->adventureexp_);
    std::swap(appellation_, other->appellation_);
    std::swap(mapid_, other->mapid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(profession_, other->profession_);
    std::swap(gender_, other->gender_);
    std::swap(blink_, other->blink_);
    std::swap(recall_, other->recall_);
    std::swap(canrecall_, other->canrecall_);
    std::swap(name_, other->name_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildportrait_, other->guildportrait_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialData_descriptor_;
  metadata.reflection = SocialData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuerySocialData::kCmdFieldNumber;
const int QuerySocialData::kParamFieldNumber;
const int QuerySocialData::kDatasFieldNumber;
#endif  // !_MSC_VER

QuerySocialData::QuerySocialData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuerySocialData)
}

void QuerySocialData::InitAsDefaultInstance() {
}

QuerySocialData::QuerySocialData(const QuerySocialData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuerySocialData)
}

void QuerySocialData::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuerySocialData::~QuerySocialData() {
  // @@protoc_insertion_point(destructor:Cmd.QuerySocialData)
  SharedDtor();
}

void QuerySocialData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuerySocialData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySocialData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuerySocialData_descriptor_;
}

const QuerySocialData& QuerySocialData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

QuerySocialData* QuerySocialData::default_instance_ = NULL;

QuerySocialData* QuerySocialData::New() const {
  return new QuerySocialData;
}

void QuerySocialData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 56;
    param_ = 1;
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuerySocialData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuerySocialData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERYDATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        break;
      }

      // repeated .Cmd.SocialData datas = 4;
      case 4: {
        if (tag == 34) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuerySocialData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuerySocialData)
  return false;
#undef DO_
}

void QuerySocialData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuerySocialData)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERYDATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SocialData datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuerySocialData)
}

::google::protobuf::uint8* QuerySocialData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuerySocialData)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERYDATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SocialData datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuerySocialData)
  return target;
}

int QuerySocialData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERYDATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.SocialData datas = 4;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySocialData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuerySocialData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuerySocialData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuerySocialData::MergeFrom(const QuerySocialData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuerySocialData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySocialData::CopyFrom(const QuerySocialData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySocialData::IsInitialized() const {

  return true;
}

void QuerySocialData::Swap(QuerySocialData* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuerySocialData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuerySocialData_descriptor_;
  metadata.reflection = QuerySocialData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindUser::kCmdFieldNumber;
const int FindUser::kParamFieldNumber;
const int FindUser::kKeywordFieldNumber;
const int FindUser::kDatasFieldNumber;
#endif  // !_MSC_VER

FindUser::FindUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FindUser)
}

void FindUser::InitAsDefaultInstance() {
}

FindUser::FindUser(const FindUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FindUser)
}

void FindUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 2;
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindUser::~FindUser() {
  // @@protoc_insertion_point(destructor:Cmd.FindUser)
  SharedDtor();
}

void FindUser::SharedDtor() {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyword_;
  }
  if (this != default_instance_) {
  }
}

void FindUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindUser_descriptor_;
}

const FindUser& FindUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

FindUser* FindUser::default_instance_ = NULL;

FindUser* FindUser::New() const {
  return new FindUser;
}

void FindUser::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 56;
    param_ = 2;
    if (has_keyword()) {
      if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keyword_->clear();
      }
    }
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FindUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_FINDUSER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keyword;
        break;
      }

      // optional string keyword = 3;
      case 3: {
        if (tag == 26) {
         parse_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        break;
      }

      // repeated .Cmd.SocialData datas = 4;
      case 4: {
        if (tag == 34) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FindUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FindUser)
  return false;
#undef DO_
}

void FindUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FindUser)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_FINDUSER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string keyword = 3;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->keyword(), output);
  }

  // repeated .Cmd.SocialData datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FindUser)
}

::google::protobuf::uint8* FindUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FindUser)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_FINDUSER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string keyword = 3;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->keyword(), target);
  }

  // repeated .Cmd.SocialData datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FindUser)
  return target;
}

int FindUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_FINDUSER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string keyword = 3;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

  }
  // repeated .Cmd.SocialData datas = 4;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindUser::MergeFrom(const FindUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindUser::CopyFrom(const FindUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindUser::IsInitialized() const {

  return true;
}

void FindUser::Swap(FindUser* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(keyword_, other->keyword_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindUser_descriptor_;
  metadata.reflection = FindUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocialUpdate::kCmdFieldNumber;
const int SocialUpdate::kParamFieldNumber;
const int SocialUpdate::kUpdatesFieldNumber;
const int SocialUpdate::kDelsFieldNumber;
#endif  // !_MSC_VER

SocialUpdate::SocialUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SocialUpdate)
}

void SocialUpdate::InitAsDefaultInstance() {
}

SocialUpdate::SocialUpdate(const SocialUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SocialUpdate)
}

void SocialUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialUpdate::~SocialUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.SocialUpdate)
  SharedDtor();
}

void SocialUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SocialUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialUpdate_descriptor_;
}

const SocialUpdate& SocialUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

SocialUpdate* SocialUpdate::default_instance_ = NULL;

SocialUpdate* SocialUpdate::New() const {
  return new SocialUpdate;
}

void SocialUpdate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 56;
    param_ = 3;
  }
  updates_.Clear();
  dels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SocialUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updates;
        break;
      }

      // repeated .Cmd.SocialData updates = 4;
      case 4: {
        if (tag == 34) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updates;
        if (input->ExpectTag(40)) goto parse_dels;
        break;
      }

      // repeated uint64 dels = 5;
      case 5: {
        if (tag == 40) {
         parse_dels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_dels())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_dels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SocialUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SocialUpdate)
  return false;
#undef DO_
}

void SocialUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SocialUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SocialData updates = 4;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->updates(i), output);
  }

  // repeated uint64 dels = 5;
  for (int i = 0; i < this->dels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->dels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SocialUpdate)
}

::google::protobuf::uint8* SocialUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SocialUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SocialData updates = 4;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->updates(i), target);
  }

  // repeated uint64 dels = 5;
  for (int i = 0; i < this->dels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->dels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SocialUpdate)
  return target;
}

int SocialUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.SocialData updates = 4;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated uint64 dels = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->dels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->dels(i));
    }
    total_size += 1 * this->dels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialUpdate::MergeFrom(const SocialUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  dels_.MergeFrom(from.dels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialUpdate::CopyFrom(const SocialUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialUpdate::IsInitialized() const {

  return true;
}

void SocialUpdate::Swap(SocialUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    updates_.Swap(&other->updates_);
    dels_.Swap(&other->dels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialUpdate_descriptor_;
  metadata.reflection = SocialUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocialDataItem::kTypeFieldNumber;
const int SocialDataItem::kValueFieldNumber;
const int SocialDataItem::kDataFieldNumber;
#endif  // !_MSC_VER

SocialDataItem::SocialDataItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SocialDataItem)
}

void SocialDataItem::InitAsDefaultInstance() {
}

SocialDataItem::SocialDataItem(const SocialDataItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SocialDataItem)
}

void SocialDataItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  value_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialDataItem::~SocialDataItem() {
  // @@protoc_insertion_point(destructor:Cmd.SocialDataItem)
  SharedDtor();
}

void SocialDataItem::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void SocialDataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialDataItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialDataItem_descriptor_;
}

const SocialDataItem& SocialDataItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

SocialDataItem* SocialDataItem::default_instance_ = NULL;

SocialDataItem* SocialDataItem::New() const {
  return new SocialDataItem;
}

void SocialDataItem::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 1;
    value_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialDataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SocialDataItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ESocialData type = 1 [default = ESOCIALDATA_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESocialData_IsValid(value)) {
            set_type(static_cast< ::Cmd::ESocialData >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SocialDataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SocialDataItem)
  return false;
#undef DO_
}

void SocialDataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SocialDataItem)
  // optional .Cmd.ESocialData type = 1 [default = ESOCIALDATA_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SocialDataItem)
}

::google::protobuf::uint8* SocialDataItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SocialDataItem)
  // optional .Cmd.ESocialData type = 1 [default = ESOCIALDATA_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SocialDataItem)
  return target;
}

int SocialDataItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ESocialData type = 1 [default = ESOCIALDATA_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialDataItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialDataItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialDataItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialDataItem::MergeFrom(const SocialDataItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialDataItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialDataItem::CopyFrom(const SocialDataItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialDataItem::IsInitialized() const {

  return true;
}

void SocialDataItem::Swap(SocialDataItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialDataItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialDataItem_descriptor_;
  metadata.reflection = SocialDataItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocialDataUpdate::kCmdFieldNumber;
const int SocialDataUpdate::kParamFieldNumber;
const int SocialDataUpdate::kGuidFieldNumber;
const int SocialDataUpdate::kItemsFieldNumber;
#endif  // !_MSC_VER

SocialDataUpdate::SocialDataUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SocialDataUpdate)
}

void SocialDataUpdate::InitAsDefaultInstance() {
}

SocialDataUpdate::SocialDataUpdate(const SocialDataUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SocialDataUpdate)
}

void SocialDataUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 4;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialDataUpdate::~SocialDataUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.SocialDataUpdate)
  SharedDtor();
}

void SocialDataUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SocialDataUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialDataUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialDataUpdate_descriptor_;
}

const SocialDataUpdate& SocialDataUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

SocialDataUpdate* SocialDataUpdate::default_instance_ = NULL;

SocialDataUpdate* SocialDataUpdate::New() const {
  return new SocialDataUpdate;
}

void SocialDataUpdate::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 56;
    param_ = 4;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialDataUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SocialDataUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_UPDATEDATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .Cmd.SocialDataItem items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SocialDataUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SocialDataUpdate)
  return false;
#undef DO_
}

void SocialDataUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SocialDataUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_UPDATEDATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  // repeated .Cmd.SocialDataItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SocialDataUpdate)
}

::google::protobuf::uint8* SocialDataUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SocialDataUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_UPDATEDATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  // repeated .Cmd.SocialDataItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SocialDataUpdate)
  return target;
}

int SocialDataUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_UPDATEDATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guid = 3 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  // repeated .Cmd.SocialDataItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialDataUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialDataUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialDataUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialDataUpdate::MergeFrom(const SocialDataUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialDataUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialDataUpdate::CopyFrom(const SocialDataUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialDataUpdate::IsInitialized() const {

  return true;
}

void SocialDataUpdate::Swap(SocialDataUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialDataUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialDataUpdate_descriptor_;
  metadata.reflection = SocialDataUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameStatusSocialCmd::kCmdFieldNumber;
const int FrameStatusSocialCmd::kParamFieldNumber;
const int FrameStatusSocialCmd::kOpenFieldNumber;
#endif  // !_MSC_VER

FrameStatusSocialCmd::FrameStatusSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FrameStatusSocialCmd)
}

void FrameStatusSocialCmd::InitAsDefaultInstance() {
}

FrameStatusSocialCmd::FrameStatusSocialCmd(const FrameStatusSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FrameStatusSocialCmd)
}

void FrameStatusSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 5;
  open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameStatusSocialCmd::~FrameStatusSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FrameStatusSocialCmd)
  SharedDtor();
}

void FrameStatusSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameStatusSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameStatusSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameStatusSocialCmd_descriptor_;
}

const FrameStatusSocialCmd& FrameStatusSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

FrameStatusSocialCmd* FrameStatusSocialCmd::default_instance_ = NULL;

FrameStatusSocialCmd* FrameStatusSocialCmd::New() const {
  return new FrameStatusSocialCmd;
}

void FrameStatusSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 56;
    param_ = 5;
    open_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameStatusSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FrameStatusSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_FRAMESTATUS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_open;
        break;
      }

      // optional bool open = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FrameStatusSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FrameStatusSocialCmd)
  return false;
#undef DO_
}

void FrameStatusSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FrameStatusSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_FRAMESTATUS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool open = 3 [default = false];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FrameStatusSocialCmd)
}

::google::protobuf::uint8* FrameStatusSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FrameStatusSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_FRAMESTATUS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool open = 3 [default = false];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FrameStatusSocialCmd)
  return target;
}

int FrameStatusSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_FRAMESTATUS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool open = 3 [default = false];
    if (has_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameStatusSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameStatusSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameStatusSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameStatusSocialCmd::MergeFrom(const FrameStatusSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameStatusSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameStatusSocialCmd::CopyFrom(const FrameStatusSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameStatusSocialCmd::IsInitialized() const {

  return true;
}

void FrameStatusSocialCmd::Swap(FrameStatusSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameStatusSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameStatusSocialCmd_descriptor_;
  metadata.reflection = FrameStatusSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseGiftCodeSocialCmd::kCmdFieldNumber;
const int UseGiftCodeSocialCmd::kParamFieldNumber;
const int UseGiftCodeSocialCmd::kCodeFieldNumber;
const int UseGiftCodeSocialCmd::kRetFieldNumber;
#endif  // !_MSC_VER

UseGiftCodeSocialCmd::UseGiftCodeSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UseGiftCodeSocialCmd)
}

void UseGiftCodeSocialCmd::InitAsDefaultInstance() {
}

UseGiftCodeSocialCmd::UseGiftCodeSocialCmd(const UseGiftCodeSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UseGiftCodeSocialCmd)
}

void UseGiftCodeSocialCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 6;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseGiftCodeSocialCmd::~UseGiftCodeSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UseGiftCodeSocialCmd)
  SharedDtor();
}

void UseGiftCodeSocialCmd::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void UseGiftCodeSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseGiftCodeSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseGiftCodeSocialCmd_descriptor_;
}

const UseGiftCodeSocialCmd& UseGiftCodeSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

UseGiftCodeSocialCmd* UseGiftCodeSocialCmd::default_instance_ = NULL;

UseGiftCodeSocialCmd* UseGiftCodeSocialCmd::New() const {
  return new UseGiftCodeSocialCmd;
}

void UseGiftCodeSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 56;
    param_ = 6;
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
    ret_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseGiftCodeSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UseGiftCodeSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_USE_GIFT_CODE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_code;
        break;
      }

      // optional string code = 3;
      case 3: {
        if (tag == 26) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional bool ret = 4;
      case 4: {
        if (tag == 32) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UseGiftCodeSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UseGiftCodeSocialCmd)
  return false;
#undef DO_
}

void UseGiftCodeSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UseGiftCodeSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_USE_GIFT_CODE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->code(), output);
  }

  // optional bool ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UseGiftCodeSocialCmd)
}

::google::protobuf::uint8* UseGiftCodeSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UseGiftCodeSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_USE_GIFT_CODE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code(), target);
  }

  // optional bool ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UseGiftCodeSocialCmd)
  return target;
}

int UseGiftCodeSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_USE_GIFT_CODE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional bool ret = 4;
    if (has_ret()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseGiftCodeSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseGiftCodeSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseGiftCodeSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseGiftCodeSocialCmd::MergeFrom(const UseGiftCodeSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseGiftCodeSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseGiftCodeSocialCmd::CopyFrom(const UseGiftCodeSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseGiftCodeSocialCmd::IsInitialized() const {

  return true;
}

void UseGiftCodeSocialCmd::Swap(UseGiftCodeSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(code_, other->code_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseGiftCodeSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseGiftCodeSocialCmd_descriptor_;
  metadata.reflection = UseGiftCodeSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateQuerySocialCmd::kCmdFieldNumber;
const int OperateQuerySocialCmd::kParamFieldNumber;
const int OperateQuerySocialCmd::kTypeFieldNumber;
const int OperateQuerySocialCmd::kStateFieldNumber;
const int OperateQuerySocialCmd::kParam1FieldNumber;
const int OperateQuerySocialCmd::kParam2FieldNumber;
const int OperateQuerySocialCmd::kParam3FieldNumber;
const int OperateQuerySocialCmd::kParam4FieldNumber;
#endif  // !_MSC_VER

OperateQuerySocialCmd::OperateQuerySocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OperateQuerySocialCmd)
}

void OperateQuerySocialCmd::InitAsDefaultInstance() {
}

OperateQuerySocialCmd::OperateQuerySocialCmd(const OperateQuerySocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OperateQuerySocialCmd)
}

void OperateQuerySocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 7;
  type_ = 1;
  state_ = 1;
  param1_ = 0u;
  param2_ = 0u;
  param3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateQuerySocialCmd::~OperateQuerySocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.OperateQuerySocialCmd)
  SharedDtor();
}

void OperateQuerySocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperateQuerySocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateQuerySocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateQuerySocialCmd_descriptor_;
}

const OperateQuerySocialCmd& OperateQuerySocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

OperateQuerySocialCmd* OperateQuerySocialCmd::default_instance_ = NULL;

OperateQuerySocialCmd* OperateQuerySocialCmd::New() const {
  return new OperateQuerySocialCmd;
}

void OperateQuerySocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OperateQuerySocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(param1_, param2_);
    cmd_ = 56;
    param_ = 7;
    type_ = 1;
    state_ = 1;
    param3_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  param4_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateQuerySocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OperateQuerySocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_OPERATE_QUERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EOperateType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EOperateType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EOperateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .Cmd.EOperateState state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EOperateState_IsValid(value)) {
            set_state(static_cast< ::Cmd::EOperateState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_param1;
        break;
      }

      // optional uint32 param1 = 5;
      case 5: {
        if (tag == 40) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_param2;
        break;
      }

      // optional uint32 param2 = 6;
      case 6: {
        if (tag == 48) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_param3;
        break;
      }

      // optional uint32 param3 = 7;
      case 7: {
        if (tag == 56) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_param4;
        break;
      }

      // repeated uint32 param4 = 8;
      case 8: {
        if (tag == 64) {
         parse_param4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_param4())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param4())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_param4;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OperateQuerySocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OperateQuerySocialCmd)
  return false;
#undef DO_
}

void OperateQuerySocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OperateQuerySocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_OPERATE_QUERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EOperateType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .Cmd.EOperateState state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional uint32 param1 = 5;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->param1(), output);
  }

  // optional uint32 param2 = 6;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->param2(), output);
  }

  // optional uint32 param3 = 7;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->param3(), output);
  }

  // repeated uint32 param4 = 8;
  for (int i = 0; i < this->param4_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->param4(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OperateQuerySocialCmd)
}

::google::protobuf::uint8* OperateQuerySocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OperateQuerySocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_OPERATE_QUERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EOperateType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .Cmd.EOperateState state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional uint32 param1 = 5;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->param1(), target);
  }

  // optional uint32 param2 = 6;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->param2(), target);
  }

  // optional uint32 param3 = 7;
  if (has_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->param3(), target);
  }

  // repeated uint32 param4 = 8;
  for (int i = 0; i < this->param4_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->param4(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OperateQuerySocialCmd)
  return target;
}

int OperateQuerySocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_OPERATE_QUERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EOperateType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Cmd.EOperateState state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 param1 = 5;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param1());
    }

    // optional uint32 param2 = 6;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param2());
    }

    // optional uint32 param3 = 7;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param3());
    }

  }
  // repeated uint32 param4 = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->param4_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->param4(i));
    }
    total_size += 1 * this->param4_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateQuerySocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateQuerySocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateQuerySocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateQuerySocialCmd::MergeFrom(const OperateQuerySocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  param4_.MergeFrom(from.param4_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateQuerySocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateQuerySocialCmd::CopyFrom(const OperateQuerySocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateQuerySocialCmd::IsInitialized() const {

  return true;
}

void OperateQuerySocialCmd::Swap(OperateQuerySocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    param4_.Swap(&other->param4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateQuerySocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateQuerySocialCmd_descriptor_;
  metadata.reflection = OperateQuerySocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateTakeSocialCmd::kCmdFieldNumber;
const int OperateTakeSocialCmd::kParamFieldNumber;
const int OperateTakeSocialCmd::kTypeFieldNumber;
const int OperateTakeSocialCmd::kStateFieldNumber;
const int OperateTakeSocialCmd::kSubkeyFieldNumber;
#endif  // !_MSC_VER

OperateTakeSocialCmd::OperateTakeSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OperateTakeSocialCmd)
}

void OperateTakeSocialCmd::InitAsDefaultInstance() {
}

OperateTakeSocialCmd::OperateTakeSocialCmd(const OperateTakeSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OperateTakeSocialCmd)
}

void OperateTakeSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 8;
  type_ = 1;
  state_ = 1;
  subkey_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateTakeSocialCmd::~OperateTakeSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.OperateTakeSocialCmd)
  SharedDtor();
}

void OperateTakeSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperateTakeSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateTakeSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateTakeSocialCmd_descriptor_;
}

const OperateTakeSocialCmd& OperateTakeSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

OperateTakeSocialCmd* OperateTakeSocialCmd::default_instance_ = NULL;

OperateTakeSocialCmd* OperateTakeSocialCmd::New() const {
  return new OperateTakeSocialCmd;
}

void OperateTakeSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 56;
    param_ = 8;
    type_ = 1;
    state_ = 1;
    subkey_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateTakeSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OperateTakeSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_OPERATE_TAKE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EOperateType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EOperateType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EOperateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .Cmd.EOperateState state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EOperateState_IsValid(value)) {
            set_state(static_cast< ::Cmd::EOperateState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_subkey;
        break;
      }

      // optional uint32 subkey = 5;
      case 5: {
        if (tag == 40) {
         parse_subkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subkey_)));
          set_has_subkey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OperateTakeSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OperateTakeSocialCmd)
  return false;
#undef DO_
}

void OperateTakeSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OperateTakeSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_OPERATE_TAKE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EOperateType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .Cmd.EOperateState state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional uint32 subkey = 5;
  if (has_subkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->subkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OperateTakeSocialCmd)
}

::google::protobuf::uint8* OperateTakeSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OperateTakeSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_OPERATE_TAKE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EOperateType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .Cmd.EOperateState state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional uint32 subkey = 5;
  if (has_subkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->subkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OperateTakeSocialCmd)
  return target;
}

int OperateTakeSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_OPERATE_TAKE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EOperateType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Cmd.EOperateState state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 subkey = 5;
    if (has_subkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateTakeSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateTakeSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateTakeSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateTakeSocialCmd::MergeFrom(const OperateTakeSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_subkey()) {
      set_subkey(from.subkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateTakeSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateTakeSocialCmd::CopyFrom(const OperateTakeSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateTakeSocialCmd::IsInitialized() const {

  return true;
}

void OperateTakeSocialCmd::Swap(OperateTakeSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(subkey_, other->subkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateTakeSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateTakeSocialCmd_descriptor_;
  metadata.reflection = OperateTakeSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryDataNtfSocialCmd::kCmdFieldNumber;
const int QueryDataNtfSocialCmd::kParamFieldNumber;
const int QueryDataNtfSocialCmd::kRelationsFieldNumber;
#endif  // !_MSC_VER

QueryDataNtfSocialCmd::QueryDataNtfSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryDataNtfSocialCmd)
}

void QueryDataNtfSocialCmd::InitAsDefaultInstance() {
}

QueryDataNtfSocialCmd::QueryDataNtfSocialCmd(const QueryDataNtfSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryDataNtfSocialCmd)
}

void QueryDataNtfSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 9;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryDataNtfSocialCmd::~QueryDataNtfSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryDataNtfSocialCmd)
  SharedDtor();
}

void QueryDataNtfSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryDataNtfSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryDataNtfSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDataNtfSocialCmd_descriptor_;
}

const QueryDataNtfSocialCmd& QueryDataNtfSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

QueryDataNtfSocialCmd* QueryDataNtfSocialCmd::default_instance_ = NULL;

QueryDataNtfSocialCmd* QueryDataNtfSocialCmd::New() const {
  return new QueryDataNtfSocialCmd;
}

void QueryDataNtfSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 56;
    param_ = 9;
  }
  relations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryDataNtfSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryDataNtfSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERYDATA_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_relations;
        break;
      }

      // repeated .Cmd.SocialData relations = 3;
      case 3: {
        if (tag == 26) {
         parse_relations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_relations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryDataNtfSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryDataNtfSocialCmd)
  return false;
#undef DO_
}

void QueryDataNtfSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryDataNtfSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERYDATA_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SocialData relations = 3;
  for (int i = 0; i < this->relations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->relations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryDataNtfSocialCmd)
}

::google::protobuf::uint8* QueryDataNtfSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryDataNtfSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERYDATA_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SocialData relations = 3;
  for (int i = 0; i < this->relations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->relations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryDataNtfSocialCmd)
  return target;
}

int QueryDataNtfSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERYDATA_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.SocialData relations = 3;
  total_size += 1 * this->relations_size();
  for (int i = 0; i < this->relations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryDataNtfSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryDataNtfSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryDataNtfSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryDataNtfSocialCmd::MergeFrom(const QueryDataNtfSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  relations_.MergeFrom(from.relations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryDataNtfSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDataNtfSocialCmd::CopyFrom(const QueryDataNtfSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDataNtfSocialCmd::IsInitialized() const {

  return true;
}

void QueryDataNtfSocialCmd::Swap(QueryDataNtfSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    relations_.Swap(&other->relations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryDataNtfSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryDataNtfSocialCmd_descriptor_;
  metadata.reflection = QueryDataNtfSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperActivityUrl::kLanguageFieldNumber;
const int OperActivityUrl::kUrlFieldNumber;
#endif  // !_MSC_VER

OperActivityUrl::OperActivityUrl()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OperActivityUrl)
}

void OperActivityUrl::InitAsDefaultInstance() {
}

OperActivityUrl::OperActivityUrl(const OperActivityUrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OperActivityUrl)
}

void OperActivityUrl::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  language_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperActivityUrl::~OperActivityUrl() {
  // @@protoc_insertion_point(destructor:Cmd.OperActivityUrl)
  SharedDtor();
}

void OperActivityUrl::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void OperActivityUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperActivityUrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperActivityUrl_descriptor_;
}

const OperActivityUrl& OperActivityUrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

OperActivityUrl* OperActivityUrl::default_instance_ = NULL;

OperActivityUrl* OperActivityUrl::New() const {
  return new OperActivityUrl;
}

void OperActivityUrl::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    language_ = 0u;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperActivityUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OperActivityUrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 language = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_)));
          set_has_language();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2;
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OperActivityUrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OperActivityUrl)
  return false;
#undef DO_
}

void OperActivityUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OperActivityUrl)
  // optional uint32 language = 1 [default = 0];
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->language(), output);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OperActivityUrl)
}

::google::protobuf::uint8* OperActivityUrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OperActivityUrl)
  // optional uint32 language = 1 [default = 0];
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->language(), target);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OperActivityUrl)
  return target;
}

int OperActivityUrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 language = 1 [default = 0];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperActivityUrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperActivityUrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperActivityUrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperActivityUrl::MergeFrom(const OperActivityUrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperActivityUrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperActivityUrl::CopyFrom(const OperActivityUrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperActivityUrl::IsInitialized() const {

  return true;
}

void OperActivityUrl::Swap(OperActivityUrl* other) {
  if (other != this) {
    std::swap(language_, other->language_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperActivityUrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperActivityUrl_descriptor_;
  metadata.reflection = OperActivityUrl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperActivityData::kIconurlsFieldNumber;
const int OperActivityData::kUrlsFieldNumber;
#endif  // !_MSC_VER

OperActivityData::OperActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OperActivityData)
}

void OperActivityData::InitAsDefaultInstance() {
}

OperActivityData::OperActivityData(const OperActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OperActivityData)
}

void OperActivityData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperActivityData::~OperActivityData() {
  // @@protoc_insertion_point(destructor:Cmd.OperActivityData)
  SharedDtor();
}

void OperActivityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperActivityData_descriptor_;
}

const OperActivityData& OperActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

OperActivityData* OperActivityData::default_instance_ = NULL;

OperActivityData* OperActivityData::New() const {
  return new OperActivityData;
}

void OperActivityData::Clear() {
  iconurls_.Clear();
  urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OperActivityData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.OperActivityUrl iconurls = 1;
      case 1: {
        if (tag == 10) {
         parse_iconurls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iconurls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_iconurls;
        if (input->ExpectTag(18)) goto parse_urls;
        break;
      }

      // repeated .Cmd.OperActivityUrl urls = 2;
      case 2: {
        if (tag == 18) {
         parse_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_urls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_urls;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OperActivityData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OperActivityData)
  return false;
#undef DO_
}

void OperActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OperActivityData)
  // repeated .Cmd.OperActivityUrl iconurls = 1;
  for (int i = 0; i < this->iconurls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iconurls(i), output);
  }

  // repeated .Cmd.OperActivityUrl urls = 2;
  for (int i = 0; i < this->urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->urls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OperActivityData)
}

::google::protobuf::uint8* OperActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OperActivityData)
  // repeated .Cmd.OperActivityUrl iconurls = 1;
  for (int i = 0; i < this->iconurls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iconurls(i), target);
  }

  // repeated .Cmd.OperActivityUrl urls = 2;
  for (int i = 0; i < this->urls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->urls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OperActivityData)
  return target;
}

int OperActivityData::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.OperActivityUrl iconurls = 1;
  total_size += 1 * this->iconurls_size();
  for (int i = 0; i < this->iconurls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iconurls(i));
  }

  // repeated .Cmd.OperActivityUrl urls = 2;
  total_size += 1 * this->urls_size();
  for (int i = 0; i < this->urls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->urls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperActivityData::MergeFrom(const OperActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  iconurls_.MergeFrom(from.iconurls_);
  urls_.MergeFrom(from.urls_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperActivityData::CopyFrom(const OperActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperActivityData::IsInitialized() const {

  return true;
}

void OperActivityData::Swap(OperActivityData* other) {
  if (other != this) {
    iconurls_.Swap(&other->iconurls_);
    urls_.Swap(&other->urls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperActivityData_descriptor_;
  metadata.reflection = OperActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperSubActivityData::kPicurlsFieldNumber;
const int OperSubActivityData::kUrlsFieldNumber;
#endif  // !_MSC_VER

OperSubActivityData::OperSubActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OperSubActivityData)
}

void OperSubActivityData::InitAsDefaultInstance() {
}

OperSubActivityData::OperSubActivityData(const OperSubActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OperSubActivityData)
}

void OperSubActivityData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperSubActivityData::~OperSubActivityData() {
  // @@protoc_insertion_point(destructor:Cmd.OperSubActivityData)
  SharedDtor();
}

void OperSubActivityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperSubActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperSubActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperSubActivityData_descriptor_;
}

const OperSubActivityData& OperSubActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

OperSubActivityData* OperSubActivityData::default_instance_ = NULL;

OperSubActivityData* OperSubActivityData::New() const {
  return new OperSubActivityData;
}

void OperSubActivityData::Clear() {
  picurls_.Clear();
  urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperSubActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OperSubActivityData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.OperActivityUrl picurls = 1;
      case 1: {
        if (tag == 10) {
         parse_picurls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_picurls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_picurls;
        if (input->ExpectTag(18)) goto parse_urls;
        break;
      }

      // repeated .Cmd.OperActivityUrl urls = 2;
      case 2: {
        if (tag == 18) {
         parse_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_urls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_urls;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OperSubActivityData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OperSubActivityData)
  return false;
#undef DO_
}

void OperSubActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OperSubActivityData)
  // repeated .Cmd.OperActivityUrl picurls = 1;
  for (int i = 0; i < this->picurls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->picurls(i), output);
  }

  // repeated .Cmd.OperActivityUrl urls = 2;
  for (int i = 0; i < this->urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->urls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OperSubActivityData)
}

::google::protobuf::uint8* OperSubActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OperSubActivityData)
  // repeated .Cmd.OperActivityUrl picurls = 1;
  for (int i = 0; i < this->picurls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->picurls(i), target);
  }

  // repeated .Cmd.OperActivityUrl urls = 2;
  for (int i = 0; i < this->urls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->urls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OperSubActivityData)
  return target;
}

int OperSubActivityData::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.OperActivityUrl picurls = 1;
  total_size += 1 * this->picurls_size();
  for (int i = 0; i < this->picurls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->picurls(i));
  }

  // repeated .Cmd.OperActivityUrl urls = 2;
  total_size += 1 * this->urls_size();
  for (int i = 0; i < this->urls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->urls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperSubActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperSubActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperSubActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperSubActivityData::MergeFrom(const OperSubActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  picurls_.MergeFrom(from.picurls_);
  urls_.MergeFrom(from.urls_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperSubActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperSubActivityData::CopyFrom(const OperSubActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperSubActivityData::IsInitialized() const {

  return true;
}

void OperSubActivityData::Swap(OperSubActivityData* other) {
  if (other != this) {
    picurls_.Swap(&other->picurls_);
    urls_.Swap(&other->urls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperSubActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperSubActivityData_descriptor_;
  metadata.reflection = OperSubActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperSubActivity::kIdFieldNumber;
const int OperSubActivity::kNameFieldNumber;
const int OperSubActivity::kBegintimeFieldNumber;
const int OperSubActivity::kEndtimeFieldNumber;
const int OperSubActivity::kPathidFieldNumber;
const int OperSubActivity::kPathtypeFieldNumber;
const int OperSubActivity::kPatheventFieldNumber;
const int OperSubActivity::kUrlFieldNumber;
const int OperSubActivity::kPicUrlFieldNumber;
const int OperSubActivity::kGroupidFieldNumber;
const int OperSubActivity::kDataFieldNumber;
#endif  // !_MSC_VER

OperSubActivity::OperSubActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OperSubActivity)
}

void OperSubActivity::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::OperSubActivityData*>(&::Cmd::OperSubActivityData::default_instance());
}

OperSubActivity::OperSubActivity(const OperSubActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OperSubActivity)
}

void OperSubActivity::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begintime_ = 0u;
  endtime_ = 0u;
  pathid_ = 0u;
  pathtype_ = 0u;
  pathevent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pic_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperSubActivity::~OperSubActivity() {
  // @@protoc_insertion_point(destructor:Cmd.OperSubActivity)
  SharedDtor();
}

void OperSubActivity::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (pathevent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pathevent_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (pic_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pic_url_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void OperSubActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperSubActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperSubActivity_descriptor_;
}

const OperSubActivity& OperSubActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

OperSubActivity* OperSubActivity::default_instance_ = NULL;

OperSubActivity* OperSubActivity::New() const {
  return new OperSubActivity;
}

void OperSubActivity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OperSubActivity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(begintime_, pathtype_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_pathevent()) {
      if (pathevent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pathevent_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_pic_url()) {
      if (pic_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pic_url_->clear();
      }
    }
    groupid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::OperSubActivityData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperSubActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OperSubActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_begintime;
        break;
      }

      // optional uint32 begintime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pathid;
        break;
      }

      // optional uint32 pathid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_pathid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pathid_)));
          set_has_pathid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pathtype;
        break;
      }

      // optional uint32 pathtype = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_pathtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pathtype_)));
          set_has_pathtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_pathevent;
        break;
      }

      // optional string pathevent = 8;
      case 8: {
        if (tag == 66) {
         parse_pathevent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pathevent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pathevent().data(), this->pathevent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pathevent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_url;
        break;
      }

      // optional string url = 9;
      case 9: {
        if (tag == 74) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_pic_url;
        break;
      }

      // optional string pic_url = 10;
      case 10: {
        if (tag == 82) {
         parse_pic_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pic_url().data(), this->pic_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pic_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_groupid;
        break;
      }

      // optional uint64 groupid = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_data;
        break;
      }

      // optional .Cmd.OperSubActivityData data = 12;
      case 12: {
        if (tag == 98) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OperSubActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OperSubActivity)
  return false;
#undef DO_
}

void OperSubActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OperSubActivity)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 begintime = 4 [default = 0];
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->begintime(), output);
  }

  // optional uint32 endtime = 5 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endtime(), output);
  }

  // optional uint32 pathid = 6 [default = 0];
  if (has_pathid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pathid(), output);
  }

  // optional uint32 pathtype = 7 [default = 0];
  if (has_pathtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pathtype(), output);
  }

  // optional string pathevent = 8;
  if (has_pathevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pathevent().data(), this->pathevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pathevent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->pathevent(), output);
  }

  // optional string url = 9;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->url(), output);
  }

  // optional string pic_url = 10;
  if (has_pic_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pic_url().data(), this->pic_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pic_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->pic_url(), output);
  }

  // optional uint64 groupid = 11 [default = 0];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->groupid(), output);
  }

  // optional .Cmd.OperSubActivityData data = 12;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OperSubActivity)
}

::google::protobuf::uint8* OperSubActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OperSubActivity)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 begintime = 4 [default = 0];
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->begintime(), target);
  }

  // optional uint32 endtime = 5 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endtime(), target);
  }

  // optional uint32 pathid = 6 [default = 0];
  if (has_pathid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pathid(), target);
  }

  // optional uint32 pathtype = 7 [default = 0];
  if (has_pathtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pathtype(), target);
  }

  // optional string pathevent = 8;
  if (has_pathevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pathevent().data(), this->pathevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pathevent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->pathevent(), target);
  }

  // optional string url = 9;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->url(), target);
  }

  // optional string pic_url = 10;
  if (has_pic_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pic_url().data(), this->pic_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pic_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pic_url(), target);
  }

  // optional uint64 groupid = 11 [default = 0];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->groupid(), target);
  }

  // optional .Cmd.OperSubActivityData data = 12;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OperSubActivity)
  return target;
}

int OperSubActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 begintime = 4 [default = 0];
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

    // optional uint32 endtime = 5 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 pathid = 6 [default = 0];
    if (has_pathid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pathid());
    }

    // optional uint32 pathtype = 7 [default = 0];
    if (has_pathtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pathtype());
    }

    // optional string pathevent = 8;
    if (has_pathevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pathevent());
    }

    // optional string url = 9;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string pic_url = 10;
    if (has_pic_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic_url());
    }

    // optional uint64 groupid = 11 [default = 0];
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // optional .Cmd.OperSubActivityData data = 12;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperSubActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperSubActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperSubActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperSubActivity::MergeFrom(const OperSubActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_pathid()) {
      set_pathid(from.pathid());
    }
    if (from.has_pathtype()) {
      set_pathtype(from.pathtype());
    }
    if (from.has_pathevent()) {
      set_pathevent(from.pathevent());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pic_url()) {
      set_pic_url(from.pic_url());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::OperSubActivityData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperSubActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperSubActivity::CopyFrom(const OperSubActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperSubActivity::IsInitialized() const {

  return true;
}

void OperSubActivity::Swap(OperSubActivity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(pathid_, other->pathid_);
    std::swap(pathtype_, other->pathtype_);
    std::swap(pathevent_, other->pathevent_);
    std::swap(url_, other->url_);
    std::swap(pic_url_, other->pic_url_);
    std::swap(groupid_, other->groupid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperSubActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperSubActivity_descriptor_;
  metadata.reflection = OperSubActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperActivity::kIdFieldNumber;
const int OperActivity::kNameFieldNumber;
const int OperActivity::kIconurlFieldNumber;
const int OperActivity::kBegintimeFieldNumber;
const int OperActivity::kEndtimeFieldNumber;
const int OperActivity::kUrlFieldNumber;
const int OperActivity::kCountdownFieldNumber;
const int OperActivity::kSubActivityFieldNumber;
const int OperActivity::kDataFieldNumber;
#endif  // !_MSC_VER

OperActivity::OperActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OperActivity)
}

void OperActivity::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::OperActivityData*>(&::Cmd::OperActivityData::default_instance());
}

OperActivity::OperActivity(const OperActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OperActivity)
}

void OperActivity::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begintime_ = 0u;
  endtime_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countdown_ = false;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperActivity::~OperActivity() {
  // @@protoc_insertion_point(destructor:Cmd.OperActivity)
  SharedDtor();
}

void OperActivity::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (iconurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iconurl_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void OperActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperActivity_descriptor_;
}

const OperActivity& OperActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

OperActivity* OperActivity::default_instance_ = NULL;

OperActivity* OperActivity::New() const {
  return new OperActivity;
}

void OperActivity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OperActivity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, begintime_);
    ZR_(endtime_, countdown_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_iconurl()) {
      if (iconurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iconurl_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  if (has_data()) {
    if (data_ != NULL) data_->::Cmd::OperActivityData::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  sub_activity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OperActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_iconurl;
        break;
      }

      // optional string iconurl = 3;
      case 3: {
        if (tag == 26) {
         parse_iconurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iconurl().data(), this->iconurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iconurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_begintime;
        break;
      }

      // optional uint32 begintime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_url;
        break;
      }

      // optional string url = 6;
      case 6: {
        if (tag == 50) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_countdown;
        break;
      }

      // optional bool countdown = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_countdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sub_activity;
        break;
      }

      // repeated .Cmd.OperSubActivity sub_activity = 8;
      case 8: {
        if (tag == 66) {
         parse_sub_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sub_activity;
        if (input->ExpectTag(74)) goto parse_data;
        break;
      }

      // optional .Cmd.OperActivityData data = 9;
      case 9: {
        if (tag == 74) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OperActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OperActivity)
  return false;
#undef DO_
}

void OperActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OperActivity)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string iconurl = 3;
  if (has_iconurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iconurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->iconurl(), output);
  }

  // optional uint32 begintime = 4 [default = 0];
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->begintime(), output);
  }

  // optional uint32 endtime = 5 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endtime(), output);
  }

  // optional string url = 6;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->url(), output);
  }

  // optional bool countdown = 7 [default = false];
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->countdown(), output);
  }

  // repeated .Cmd.OperSubActivity sub_activity = 8;
  for (int i = 0; i < this->sub_activity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sub_activity(i), output);
  }

  // optional .Cmd.OperActivityData data = 9;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OperActivity)
}

::google::protobuf::uint8* OperActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OperActivity)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string iconurl = 3;
  if (has_iconurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iconurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->iconurl(), target);
  }

  // optional uint32 begintime = 4 [default = 0];
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->begintime(), target);
  }

  // optional uint32 endtime = 5 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endtime(), target);
  }

  // optional string url = 6;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->url(), target);
  }

  // optional bool countdown = 7 [default = false];
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->countdown(), target);
  }

  // repeated .Cmd.OperSubActivity sub_activity = 8;
  for (int i = 0; i < this->sub_activity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->sub_activity(i), target);
  }

  // optional .Cmd.OperActivityData data = 9;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OperActivity)
  return target;
}

int OperActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string iconurl = 3;
    if (has_iconurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconurl());
    }

    // optional uint32 begintime = 4 [default = 0];
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

    // optional uint32 endtime = 5 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional string url = 6;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bool countdown = 7 [default = false];
    if (has_countdown()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.OperActivityData data = 9;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  // repeated .Cmd.OperSubActivity sub_activity = 8;
  total_size += 1 * this->sub_activity_size();
  for (int i = 0; i < this->sub_activity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub_activity(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperActivity::MergeFrom(const OperActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_activity_.MergeFrom(from.sub_activity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_iconurl()) {
      set_iconurl(from.iconurl());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Cmd::OperActivityData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperActivity::CopyFrom(const OperActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperActivity::IsInitialized() const {

  return true;
}

void OperActivity::Swap(OperActivity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(iconurl_, other->iconurl_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(url_, other->url_);
    std::swap(countdown_, other->countdown_);
    sub_activity_.Swap(&other->sub_activity_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperActivity_descriptor_;
  metadata.reflection = OperActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperActivityNtfSocialCmd::kCmdFieldNumber;
const int OperActivityNtfSocialCmd::kParamFieldNumber;
const int OperActivityNtfSocialCmd::kActivityFieldNumber;
#endif  // !_MSC_VER

OperActivityNtfSocialCmd::OperActivityNtfSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OperActivityNtfSocialCmd)
}

void OperActivityNtfSocialCmd::InitAsDefaultInstance() {
}

OperActivityNtfSocialCmd::OperActivityNtfSocialCmd(const OperActivityNtfSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OperActivityNtfSocialCmd)
}

void OperActivityNtfSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperActivityNtfSocialCmd::~OperActivityNtfSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.OperActivityNtfSocialCmd)
  SharedDtor();
}

void OperActivityNtfSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperActivityNtfSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperActivityNtfSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperActivityNtfSocialCmd_descriptor_;
}

const OperActivityNtfSocialCmd& OperActivityNtfSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

OperActivityNtfSocialCmd* OperActivityNtfSocialCmd::default_instance_ = NULL;

OperActivityNtfSocialCmd* OperActivityNtfSocialCmd::New() const {
  return new OperActivityNtfSocialCmd;
}

void OperActivityNtfSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 56;
    param_ = 10;
  }
  activity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperActivityNtfSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OperActivityNtfSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_OPER_ACTIVITY_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_activity;
        break;
      }

      // repeated .Cmd.OperActivity activity = 3;
      case 3: {
        if (tag == 26) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_activity;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OperActivityNtfSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OperActivityNtfSocialCmd)
  return false;
#undef DO_
}

void OperActivityNtfSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OperActivityNtfSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_OPER_ACTIVITY_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.OperActivity activity = 3;
  for (int i = 0; i < this->activity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->activity(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OperActivityNtfSocialCmd)
}

::google::protobuf::uint8* OperActivityNtfSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OperActivityNtfSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_OPER_ACTIVITY_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.OperActivity activity = 3;
  for (int i = 0; i < this->activity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->activity(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OperActivityNtfSocialCmd)
  return target;
}

int OperActivityNtfSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_OPER_ACTIVITY_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.OperActivity activity = 3;
  total_size += 1 * this->activity_size();
  for (int i = 0; i < this->activity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activity(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperActivityNtfSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperActivityNtfSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperActivityNtfSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperActivityNtfSocialCmd::MergeFrom(const OperActivityNtfSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  activity_.MergeFrom(from.activity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperActivityNtfSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperActivityNtfSocialCmd::CopyFrom(const OperActivityNtfSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperActivityNtfSocialCmd::IsInitialized() const {

  return true;
}

void OperActivityNtfSocialCmd::Swap(OperActivityNtfSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    activity_.Swap(&other->activity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperActivityNtfSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperActivityNtfSocialCmd_descriptor_;
  metadata.reflection = OperActivityNtfSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddRelation::kCmdFieldNumber;
const int AddRelation::kParamFieldNumber;
const int AddRelation::kCharidFieldNumber;
const int AddRelation::kRelationFieldNumber;
#endif  // !_MSC_VER

AddRelation::AddRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddRelation)
}

void AddRelation::InitAsDefaultInstance() {
}

AddRelation::AddRelation(const AddRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddRelation)
}

void AddRelation::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 11;
  relation_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRelation::~AddRelation() {
  // @@protoc_insertion_point(destructor:Cmd.AddRelation)
  SharedDtor();
}

void AddRelation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRelation_descriptor_;
}

const AddRelation& AddRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

AddRelation* AddRelation::default_instance_ = NULL;

AddRelation* AddRelation::New() const {
  return new AddRelation;
}

void AddRelation::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 56;
    param_ = 11;
    relation_ = 1;
  }
  charid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddRelation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_ADDRELATION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // repeated uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_charid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_charid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        if (input->ExpectTag(32)) goto parse_relation;
        break;
      }

      // optional .Cmd.ESocialRelation relation = 4 [default = ESOCIALRELATION_MIN];
      case 4: {
        if (tag == 32) {
         parse_relation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESocialRelation_IsValid(value)) {
            set_relation(static_cast< ::Cmd::ESocialRelation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddRelation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddRelation)
  return false;
#undef DO_
}

void AddRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddRelation)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_ADDRELATION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint64 charid = 3;
  for (int i = 0; i < this->charid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->charid(i), output);
  }

  // optional .Cmd.ESocialRelation relation = 4 [default = ESOCIALRELATION_MIN];
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->relation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddRelation)
}

::google::protobuf::uint8* AddRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddRelation)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_ADDRELATION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint64 charid = 3;
  for (int i = 0; i < this->charid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->charid(i), target);
  }

  // optional .Cmd.ESocialRelation relation = 4 [default = ESOCIALRELATION_MIN];
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->relation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddRelation)
  return target;
}

int AddRelation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_ADDRELATION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ESocialRelation relation = 4 [default = ESOCIALRELATION_MIN];
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->relation());
    }

  }
  // repeated uint64 charid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->charid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->charid(i));
    }
    total_size += 1 * this->charid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRelation::MergeFrom(const AddRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  charid_.MergeFrom(from.charid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRelation::CopyFrom(const AddRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRelation::IsInitialized() const {

  return true;
}

void AddRelation::Swap(AddRelation* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    charid_.Swap(&other->charid_);
    std::swap(relation_, other->relation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRelation_descriptor_;
  metadata.reflection = AddRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveRelation::kCmdFieldNumber;
const int RemoveRelation::kParamFieldNumber;
const int RemoveRelation::kCharidFieldNumber;
const int RemoveRelation::kRelationFieldNumber;
#endif  // !_MSC_VER

RemoveRelation::RemoveRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RemoveRelation)
}

void RemoveRelation::InitAsDefaultInstance() {
}

RemoveRelation::RemoveRelation(const RemoveRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RemoveRelation)
}

void RemoveRelation::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 12;
  charid_ = GOOGLE_ULONGLONG(0);
  relation_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveRelation::~RemoveRelation() {
  // @@protoc_insertion_point(destructor:Cmd.RemoveRelation)
  SharedDtor();
}

void RemoveRelation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveRelation_descriptor_;
}

const RemoveRelation& RemoveRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

RemoveRelation* RemoveRelation::default_instance_ = NULL;

RemoveRelation* RemoveRelation::New() const {
  return new RemoveRelation;
}

void RemoveRelation::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 56;
    param_ = 12;
    charid_ = GOOGLE_ULONGLONG(0);
    relation_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RemoveRelation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_REMOVERELATION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_relation;
        break;
      }

      // optional .Cmd.ESocialRelation relation = 4 [default = ESOCIALRELATION_MIN];
      case 4: {
        if (tag == 32) {
         parse_relation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESocialRelation_IsValid(value)) {
            set_relation(static_cast< ::Cmd::ESocialRelation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RemoveRelation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RemoveRelation)
  return false;
#undef DO_
}

void RemoveRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RemoveRelation)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_REMOVERELATION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.ESocialRelation relation = 4 [default = ESOCIALRELATION_MIN];
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->relation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RemoveRelation)
}

::google::protobuf::uint8* RemoveRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RemoveRelation)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_REMOVERELATION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.ESocialRelation relation = 4 [default = ESOCIALRELATION_MIN];
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->relation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RemoveRelation)
  return target;
}

int RemoveRelation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_REMOVERELATION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.ESocialRelation relation = 4 [default = ESOCIALRELATION_MIN];
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->relation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveRelation::MergeFrom(const RemoveRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveRelation::CopyFrom(const RemoveRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRelation::IsInitialized() const {

  return true;
}

void RemoveRelation::Swap(RemoveRelation* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(relation_, other->relation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveRelation_descriptor_;
  metadata.reflection = RemoveRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Recall::kCharidFieldNumber;
#endif  // !_MSC_VER

Recall::Recall()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.Recall)
}

void Recall::InitAsDefaultInstance() {
}

Recall::Recall(const Recall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.Recall)
}

void Recall::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Recall::~Recall() {
  // @@protoc_insertion_point(destructor:Cmd.Recall)
  SharedDtor();
}

void Recall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Recall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Recall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Recall_descriptor_;
}

const Recall& Recall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

Recall* Recall::default_instance_ = NULL;

Recall* Recall::New() const {
  return new Recall;
}

void Recall::Clear() {
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Recall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.Recall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.Recall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.Recall)
  return false;
#undef DO_
}

void Recall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.Recall)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.Recall)
}

::google::protobuf::uint8* Recall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.Recall)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.Recall)
  return target;
}

int Recall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Recall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Recall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Recall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Recall::MergeFrom(const Recall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Recall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Recall::CopyFrom(const Recall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recall::IsInitialized() const {

  return true;
}

void Recall::Swap(Recall* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Recall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Recall_descriptor_;
  metadata.reflection = Recall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryRecallListSocialCmd::kCmdFieldNumber;
const int QueryRecallListSocialCmd::kParamFieldNumber;
const int QueryRecallListSocialCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

QueryRecallListSocialCmd::QueryRecallListSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryRecallListSocialCmd)
}

void QueryRecallListSocialCmd::InitAsDefaultInstance() {
}

QueryRecallListSocialCmd::QueryRecallListSocialCmd(const QueryRecallListSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryRecallListSocialCmd)
}

void QueryRecallListSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 13;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRecallListSocialCmd::~QueryRecallListSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryRecallListSocialCmd)
  SharedDtor();
}

void QueryRecallListSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryRecallListSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryRecallListSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryRecallListSocialCmd_descriptor_;
}

const QueryRecallListSocialCmd& QueryRecallListSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

QueryRecallListSocialCmd* QueryRecallListSocialCmd::default_instance_ = NULL;

QueryRecallListSocialCmd* QueryRecallListSocialCmd::New() const {
  return new QueryRecallListSocialCmd;
}

void QueryRecallListSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 56;
    param_ = 13;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryRecallListSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryRecallListSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERY_RECALL_LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.Recall items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryRecallListSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryRecallListSocialCmd)
  return false;
#undef DO_
}

void QueryRecallListSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryRecallListSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERY_RECALL_LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.Recall items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryRecallListSocialCmd)
}

::google::protobuf::uint8* QueryRecallListSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryRecallListSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERY_RECALL_LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.Recall items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryRecallListSocialCmd)
  return target;
}

int QueryRecallListSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERY_RECALL_LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.Recall items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRecallListSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryRecallListSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryRecallListSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryRecallListSocialCmd::MergeFrom(const QueryRecallListSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryRecallListSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRecallListSocialCmd::CopyFrom(const QueryRecallListSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRecallListSocialCmd::IsInitialized() const {

  return true;
}

void QueryRecallListSocialCmd::Swap(QueryRecallListSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryRecallListSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryRecallListSocialCmd_descriptor_;
  metadata.reflection = QueryRecallListSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecallFriendSocialCmd::kCmdFieldNumber;
const int RecallFriendSocialCmd::kParamFieldNumber;
const int RecallFriendSocialCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

RecallFriendSocialCmd::RecallFriendSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RecallFriendSocialCmd)
}

void RecallFriendSocialCmd::InitAsDefaultInstance() {
}

RecallFriendSocialCmd::RecallFriendSocialCmd(const RecallFriendSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RecallFriendSocialCmd)
}

void RecallFriendSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 14;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecallFriendSocialCmd::~RecallFriendSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RecallFriendSocialCmd)
  SharedDtor();
}

void RecallFriendSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecallFriendSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecallFriendSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecallFriendSocialCmd_descriptor_;
}

const RecallFriendSocialCmd& RecallFriendSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

RecallFriendSocialCmd* RecallFriendSocialCmd::default_instance_ = NULL;

RecallFriendSocialCmd* RecallFriendSocialCmd::New() const {
  return new RecallFriendSocialCmd;
}

void RecallFriendSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 56;
    param_ = 14;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecallFriendSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RecallFriendSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_RECALL_FRIEND];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RecallFriendSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RecallFriendSocialCmd)
  return false;
#undef DO_
}

void RecallFriendSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RecallFriendSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_RECALL_FRIEND];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RecallFriendSocialCmd)
}

::google::protobuf::uint8* RecallFriendSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RecallFriendSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_RECALL_FRIEND];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RecallFriendSocialCmd)
  return target;
}

int RecallFriendSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_RECALL_FRIEND];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecallFriendSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecallFriendSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecallFriendSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecallFriendSocialCmd::MergeFrom(const RecallFriendSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecallFriendSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecallFriendSocialCmd::CopyFrom(const RecallFriendSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecallFriendSocialCmd::IsInitialized() const {

  return true;
}

void RecallFriendSocialCmd::Swap(RecallFriendSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecallFriendSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecallFriendSocialCmd_descriptor_;
  metadata.reflection = RecallFriendSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddRelationResultSocialCmd::kCmdFieldNumber;
const int AddRelationResultSocialCmd::kParamFieldNumber;
const int AddRelationResultSocialCmd::kCharidFieldNumber;
const int AddRelationResultSocialCmd::kRelationFieldNumber;
const int AddRelationResultSocialCmd::kSuccessFieldNumber;
#endif  // !_MSC_VER

AddRelationResultSocialCmd::AddRelationResultSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddRelationResultSocialCmd)
}

void AddRelationResultSocialCmd::InitAsDefaultInstance() {
}

AddRelationResultSocialCmd::AddRelationResultSocialCmd(const AddRelationResultSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddRelationResultSocialCmd)
}

void AddRelationResultSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 15;
  charid_ = GOOGLE_ULONGLONG(0);
  relation_ = 1;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRelationResultSocialCmd::~AddRelationResultSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AddRelationResultSocialCmd)
  SharedDtor();
}

void AddRelationResultSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddRelationResultSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRelationResultSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRelationResultSocialCmd_descriptor_;
}

const AddRelationResultSocialCmd& AddRelationResultSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

AddRelationResultSocialCmd* AddRelationResultSocialCmd::default_instance_ = NULL;

AddRelationResultSocialCmd* AddRelationResultSocialCmd::New() const {
  return new AddRelationResultSocialCmd;
}

void AddRelationResultSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 56;
    param_ = 15;
    charid_ = GOOGLE_ULONGLONG(0);
    relation_ = 1;
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRelationResultSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddRelationResultSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_ADD_RELATION_RESULT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_relation;
        break;
      }

      // optional .Cmd.ESocialRelation relation = 4 [default = ESOCIALRELATION_MIN];
      case 4: {
        if (tag == 32) {
         parse_relation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESocialRelation_IsValid(value)) {
            set_relation(static_cast< ::Cmd::ESocialRelation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_success;
        break;
      }

      // optional bool success = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddRelationResultSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddRelationResultSocialCmd)
  return false;
#undef DO_
}

void AddRelationResultSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddRelationResultSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_ADD_RELATION_RESULT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.ESocialRelation relation = 4 [default = ESOCIALRELATION_MIN];
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->relation(), output);
  }

  // optional bool success = 5 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddRelationResultSocialCmd)
}

::google::protobuf::uint8* AddRelationResultSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddRelationResultSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_ADD_RELATION_RESULT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.ESocialRelation relation = 4 [default = ESOCIALRELATION_MIN];
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->relation(), target);
  }

  // optional bool success = 5 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddRelationResultSocialCmd)
  return target;
}

int AddRelationResultSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_ADD_RELATION_RESULT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.ESocialRelation relation = 4 [default = ESOCIALRELATION_MIN];
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->relation());
    }

    // optional bool success = 5 [default = false];
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRelationResultSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRelationResultSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRelationResultSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRelationResultSocialCmd::MergeFrom(const AddRelationResultSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRelationResultSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRelationResultSocialCmd::CopyFrom(const AddRelationResultSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRelationResultSocialCmd::IsInitialized() const {

  return true;
}

void AddRelationResultSocialCmd::Swap(AddRelationResultSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(relation_, other->relation_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRelationResultSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRelationResultSocialCmd_descriptor_;
  metadata.reflection = AddRelationResultSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryChargeVirginCmd::kCmdFieldNumber;
const int QueryChargeVirginCmd::kParamFieldNumber;
const int QueryChargeVirginCmd::kDatasFieldNumber;
const int QueryChargeVirginCmd::kDelFieldNumber;
#endif  // !_MSC_VER

QueryChargeVirginCmd::QueryChargeVirginCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryChargeVirginCmd)
}

void QueryChargeVirginCmd::InitAsDefaultInstance() {
}

QueryChargeVirginCmd::QueryChargeVirginCmd(const QueryChargeVirginCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryChargeVirginCmd)
}

void QueryChargeVirginCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 16;
  del_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryChargeVirginCmd::~QueryChargeVirginCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryChargeVirginCmd)
  SharedDtor();
}

void QueryChargeVirginCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryChargeVirginCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryChargeVirginCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryChargeVirginCmd_descriptor_;
}

const QueryChargeVirginCmd& QueryChargeVirginCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

QueryChargeVirginCmd* QueryChargeVirginCmd::default_instance_ = NULL;

QueryChargeVirginCmd* QueryChargeVirginCmd::New() const {
  return new QueryChargeVirginCmd;
}

void QueryChargeVirginCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 56;
    param_ = 16;
    del_ = GOOGLE_ULONGLONG(0);
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryChargeVirginCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryChargeVirginCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERY_CHARGE_VIRGIN];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_datas;
        break;
      }

      // repeated uint64 datas = 3;
      case 3: {
        if (tag == 24) {
         parse_datas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_datas())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_datas())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_datas;
        if (input->ExpectTag(32)) goto parse_del;
        break;
      }

      // optional uint64 del = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_del:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &del_)));
          set_has_del();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryChargeVirginCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryChargeVirginCmd)
  return false;
#undef DO_
}

void QueryChargeVirginCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryChargeVirginCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERY_CHARGE_VIRGIN];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint64 datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->datas(i), output);
  }

  // optional uint64 del = 4 [default = 0];
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->del(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryChargeVirginCmd)
}

::google::protobuf::uint8* QueryChargeVirginCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryChargeVirginCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERY_CHARGE_VIRGIN];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint64 datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->datas(i), target);
  }

  // optional uint64 del = 4 [default = 0];
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->del(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryChargeVirginCmd)
  return target;
}

int QueryChargeVirginCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERY_CHARGE_VIRGIN];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 del = 4 [default = 0];
    if (has_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->del());
    }

  }
  // repeated uint64 datas = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->datas_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->datas(i));
    }
    total_size += 1 * this->datas_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryChargeVirginCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryChargeVirginCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryChargeVirginCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryChargeVirginCmd::MergeFrom(const QueryChargeVirginCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_del()) {
      set_del(from.del());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryChargeVirginCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryChargeVirginCmd::CopyFrom(const QueryChargeVirginCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChargeVirginCmd::IsInitialized() const {

  return true;
}

void QueryChargeVirginCmd::Swap(QueryChargeVirginCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    datas_.Swap(&other->datas_);
    std::swap(del_, other->del_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryChargeVirginCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryChargeVirginCmd_descriptor_;
  metadata.reflection = QueryChargeVirginCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryUserInfoCmd::kCmdFieldNumber;
const int QueryUserInfoCmd::kParamFieldNumber;
const int QueryUserInfoCmd::kCharidFieldNumber;
const int QueryUserInfoCmd::kDataFieldNumber;
#endif  // !_MSC_VER

QueryUserInfoCmd::QueryUserInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryUserInfoCmd)
}

void QueryUserInfoCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::SocialData*>(&::Cmd::SocialData::default_instance());
}

QueryUserInfoCmd::QueryUserInfoCmd(const QueryUserInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryUserInfoCmd)
}

void QueryUserInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 56;
  param_ = 17;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUserInfoCmd::~QueryUserInfoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryUserInfoCmd)
  SharedDtor();
}

void QueryUserInfoCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void QueryUserInfoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserInfoCmd_descriptor_;
}

const QueryUserInfoCmd& QueryUserInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionSociality_2eproto();
  return *default_instance_;
}

QueryUserInfoCmd* QueryUserInfoCmd::default_instance_ = NULL;

QueryUserInfoCmd* QueryUserInfoCmd::New() const {
  return new QueryUserInfoCmd;
}

void QueryUserInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 56;
    param_ = 17;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::SocialData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryUserInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryUserInfoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERY_USER_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .Cmd.SocialData data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryUserInfoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryUserInfoCmd)
  return false;
#undef DO_
}

void QueryUserInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryUserInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERY_USER_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.SocialData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryUserInfoCmd)
}

::google::protobuf::uint8* QueryUserInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryUserInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERY_USER_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.SocialData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryUserInfoCmd)
  return target;
}

int QueryUserInfoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_SOCIALITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialityParam param = 2 [default = SOCIALITYPARAM_QUERY_USER_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.SocialData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryUserInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryUserInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryUserInfoCmd::MergeFrom(const QueryUserInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::SocialData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryUserInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserInfoCmd::CopyFrom(const QueryUserInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserInfoCmd::IsInitialized() const {

  return true;
}

void QueryUserInfoCmd::Swap(QueryUserInfoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryUserInfoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserInfoCmd_descriptor_;
  metadata.reflection = QueryUserInfoCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
