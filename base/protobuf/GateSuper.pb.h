// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GateSuper.proto

#ifndef PROTOBUF_GateSuper_2eproto__INCLUDED
#define PROTOBUF_GateSuper_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GateSuper_2eproto();
void protobuf_AssignDesc_GateSuper_2eproto();
void protobuf_ShutdownFile_GateSuper_2eproto();

class GateToSuperUserNum;
class PushMsgGateSuperCmd;
class AlterMsgGateSuperCmd;
class PushTyrantDbGateSuperCmd;
class ForwardToGateUserCmd;

enum GateParam {
  GATE_SUPER_USERNUM_CMD = 1,
  GATEPARAM_PUSHOVER_MSG = 2,
  GATEPARAM_ALTER_MSG = 3,
  GATEPARAM_PUSH_TYRANT_DB = 4,
  GATEPARAM_FORWARD_TO_GATEUSER = 5
};
bool GateParam_IsValid(int value);
const GateParam GateParam_MIN = GATE_SUPER_USERNUM_CMD;
const GateParam GateParam_MAX = GATEPARAM_FORWARD_TO_GATEUSER;
const int GateParam_ARRAYSIZE = GateParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* GateParam_descriptor();
inline const ::std::string& GateParam_Name(GateParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    GateParam_descriptor(), value);
}
inline bool GateParam_Parse(
    const ::std::string& name, GateParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GateParam>(
    GateParam_descriptor(), name, value);
}
enum EPushMsg {
  EPUSHMSG_MIN = 0,
  EPUSHMSG_MSG = 1,
  EPUSHMSG_CORE_DUMP = 2,
  EPUSHMSG_SHOP_SELL = 3,
  EPUSHMSG_MESSAGE_STAT = 4,
  EPUSHMSG_TEMP_PACK_FULL = 5,
  EPUSHMSG_MAX = 6
};
bool EPushMsg_IsValid(int value);
const EPushMsg EPushMsg_MIN = EPUSHMSG_MIN;
const EPushMsg EPushMsg_MAX = EPUSHMSG_MAX;
const int EPushMsg_ARRAYSIZE = EPushMsg_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPushMsg_descriptor();
inline const ::std::string& EPushMsg_Name(EPushMsg value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPushMsg_descriptor(), value);
}
inline bool EPushMsg_Parse(
    const ::std::string& name, EPushMsg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPushMsg>(
    EPushMsg_descriptor(), name, value);
}
// ===================================================================

class GateToSuperUserNum : public ::google::protobuf::Message {
 public:
  GateToSuperUserNum();
  virtual ~GateToSuperUserNum();

  GateToSuperUserNum(const GateToSuperUserNum& from);

  inline GateToSuperUserNum& operator=(const GateToSuperUserNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateToSuperUserNum& default_instance();

  void Swap(GateToSuperUserNum* other);

  // implements Message ----------------------------------------------

  GateToSuperUserNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateToSuperUserNum& from);
  void MergeFrom(const GateToSuperUserNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = GATE_SUPER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.GateParam param = 2 [default = GATE_SUPER_USERNUM_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::GateParam param() const;
  inline void set_param(::Cmd::GateParam value);

  // optional uint32 num = 3 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.GateToSuperUserNum)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_GateSuper_2eproto();
  friend void protobuf_AssignDesc_GateSuper_2eproto();
  friend void protobuf_ShutdownFile_GateSuper_2eproto();

  void InitAsDefaultInstance();
  static GateToSuperUserNum* default_instance_;
};
// -------------------------------------------------------------------

class PushMsgGateSuperCmd : public ::google::protobuf::Message {
 public:
  PushMsgGateSuperCmd();
  virtual ~PushMsgGateSuperCmd();

  PushMsgGateSuperCmd(const PushMsgGateSuperCmd& from);

  inline PushMsgGateSuperCmd& operator=(const PushMsgGateSuperCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushMsgGateSuperCmd& default_instance();

  void Swap(PushMsgGateSuperCmd* other);

  // implements Message ----------------------------------------------

  PushMsgGateSuperCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushMsgGateSuperCmd& from);
  void MergeFrom(const PushMsgGateSuperCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = GATE_SUPER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.GateParam param = 2 [default = GATEPARAM_PUSHOVER_MSG];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::GateParam param() const;
  inline void set_param(::Cmd::GateParam value);

  // optional .Cmd.EPushMsg type = 3 [default = EPUSHMSG_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPushMsg type() const;
  inline void set_type(::Cmd::EPushMsg value);

  // optional string title = 4;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 4;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string msg = 5;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 5;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:Cmd.PushMsgGateSuperCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* title_;
  ::std::string* msg_;
  int type_;
  friend void  protobuf_AddDesc_GateSuper_2eproto();
  friend void protobuf_AssignDesc_GateSuper_2eproto();
  friend void protobuf_ShutdownFile_GateSuper_2eproto();

  void InitAsDefaultInstance();
  static PushMsgGateSuperCmd* default_instance_;
};
// -------------------------------------------------------------------

class AlterMsgGateSuperCmd : public ::google::protobuf::Message {
 public:
  AlterMsgGateSuperCmd();
  virtual ~AlterMsgGateSuperCmd();

  AlterMsgGateSuperCmd(const AlterMsgGateSuperCmd& from);

  inline AlterMsgGateSuperCmd& operator=(const AlterMsgGateSuperCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlterMsgGateSuperCmd& default_instance();

  void Swap(AlterMsgGateSuperCmd* other);

  // implements Message ----------------------------------------------

  AlterMsgGateSuperCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlterMsgGateSuperCmd& from);
  void MergeFrom(const AlterMsgGateSuperCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = GATE_SUPER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.GateParam param = 2 [default = GATEPARAM_ALTER_MSG];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::GateParam param() const;
  inline void set_param(::Cmd::GateParam value);

  // optional .Cmd.EPushMsg event = 3 [default = EPUSHMSG_MIN];
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 3;
  inline ::Cmd::EPushMsg event() const;
  inline void set_event(::Cmd::EPushMsg value);

  // optional string title = 4;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 4;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string msg = 5;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 5;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:Cmd.AlterMsgGateSuperCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* title_;
  ::std::string* msg_;
  int event_;
  friend void  protobuf_AddDesc_GateSuper_2eproto();
  friend void protobuf_AssignDesc_GateSuper_2eproto();
  friend void protobuf_ShutdownFile_GateSuper_2eproto();

  void InitAsDefaultInstance();
  static AlterMsgGateSuperCmd* default_instance_;
};
// -------------------------------------------------------------------

class PushTyrantDbGateSuperCmd : public ::google::protobuf::Message {
 public:
  PushTyrantDbGateSuperCmd();
  virtual ~PushTyrantDbGateSuperCmd();

  PushTyrantDbGateSuperCmd(const PushTyrantDbGateSuperCmd& from);

  inline PushTyrantDbGateSuperCmd& operator=(const PushTyrantDbGateSuperCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushTyrantDbGateSuperCmd& default_instance();

  void Swap(PushTyrantDbGateSuperCmd* other);

  // implements Message ----------------------------------------------

  PushTyrantDbGateSuperCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushTyrantDbGateSuperCmd& from);
  void MergeFrom(const PushTyrantDbGateSuperCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = GATE_SUPER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.GateParam param = 2 [default = GATEPARAM_PUSH_TYRANT_DB];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::GateParam param() const;
  inline void set_param(::Cmd::GateParam value);

  // optional uint32 accid = 3;
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 3;
  inline ::google::protobuf::uint32 accid() const;
  inline void set_accid(::google::protobuf::uint32 value);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string orderid = 5;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 5;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // optional uint32 amount = 6;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 6;
  inline ::google::protobuf::uint32 amount() const;
  inline void set_amount(::google::protobuf::uint32 value);

  // optional uint32 itemcount = 7;
  inline bool has_itemcount() const;
  inline void clear_itemcount();
  static const int kItemcountFieldNumber = 7;
  inline ::google::protobuf::uint32 itemcount() const;
  inline void set_itemcount(::google::protobuf::uint32 value);

  // optional string productid = 8;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductidFieldNumber = 8;
  inline const ::std::string& productid() const;
  inline void set_productid(const ::std::string& value);
  inline void set_productid(const char* value);
  inline void set_productid(const char* value, size_t size);
  inline ::std::string* mutable_productid();
  inline ::std::string* release_productid();
  inline void set_allocated_productid(::std::string* productid);

  // optional string chargetype = 9;
  inline bool has_chargetype() const;
  inline void clear_chargetype();
  static const int kChargetypeFieldNumber = 9;
  inline const ::std::string& chargetype() const;
  inline void set_chargetype(const ::std::string& value);
  inline void set_chargetype(const char* value);
  inline void set_chargetype(const char* value, size_t size);
  inline ::std::string* mutable_chargetype();
  inline ::std::string* release_chargetype();
  inline void set_allocated_chargetype(::std::string* chargetype);

  // @@protoc_insertion_point(class_scope:Cmd.PushTyrantDbGateSuperCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_itemcount();
  inline void clear_has_itemcount();
  inline void set_has_productid();
  inline void clear_has_productid();
  inline void set_has_chargetype();
  inline void clear_has_chargetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 accid_;
  ::google::protobuf::uint32 amount_;
  ::std::string* orderid_;
  ::std::string* productid_;
  ::std::string* chargetype_;
  ::google::protobuf::uint32 itemcount_;
  friend void  protobuf_AddDesc_GateSuper_2eproto();
  friend void protobuf_AssignDesc_GateSuper_2eproto();
  friend void protobuf_ShutdownFile_GateSuper_2eproto();

  void InitAsDefaultInstance();
  static PushTyrantDbGateSuperCmd* default_instance_;
};
// -------------------------------------------------------------------

class ForwardToGateUserCmd : public ::google::protobuf::Message {
 public:
  ForwardToGateUserCmd();
  virtual ~ForwardToGateUserCmd();

  ForwardToGateUserCmd(const ForwardToGateUserCmd& from);

  inline ForwardToGateUserCmd& operator=(const ForwardToGateUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardToGateUserCmd& default_instance();

  void Swap(ForwardToGateUserCmd* other);

  // implements Message ----------------------------------------------

  ForwardToGateUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardToGateUserCmd& from);
  void MergeFrom(const ForwardToGateUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = GATE_SUPER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.GateParam param = 2 [default = GATEPARAM_FORWARD_TO_GATEUSER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::GateParam param() const;
  inline void set_param(::Cmd::GateParam value);

  // repeated uint64 accids = 3;
  inline int accids_size() const;
  inline void clear_accids();
  static const int kAccidsFieldNumber = 3;
  inline ::google::protobuf::uint64 accids(int index) const;
  inline void set_accids(int index, ::google::protobuf::uint64 value);
  inline void add_accids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      accids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_accids();

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Cmd.ForwardToGateUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > accids_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_GateSuper_2eproto();
  friend void protobuf_AssignDesc_GateSuper_2eproto();
  friend void protobuf_ShutdownFile_GateSuper_2eproto();

  void InitAsDefaultInstance();
  static ForwardToGateUserCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// GateToSuperUserNum

// optional .Cmd.Command cmd = 1 [default = GATE_SUPER_PROTOCMD];
inline bool GateToSuperUserNum::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateToSuperUserNum::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateToSuperUserNum::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateToSuperUserNum::clear_cmd() {
  cmd_ = 205;
  clear_has_cmd();
}
inline ::Cmd::Command GateToSuperUserNum::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GateToSuperUserNum.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GateToSuperUserNum::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GateToSuperUserNum.cmd)
}

// optional .Cmd.GateParam param = 2 [default = GATE_SUPER_USERNUM_CMD];
inline bool GateToSuperUserNum::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateToSuperUserNum::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateToSuperUserNum::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateToSuperUserNum::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::GateParam GateToSuperUserNum::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GateToSuperUserNum.param)
  return static_cast< ::Cmd::GateParam >(param_);
}
inline void GateToSuperUserNum::set_param(::Cmd::GateParam value) {
  assert(::Cmd::GateParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GateToSuperUserNum.param)
}

// optional uint32 num = 3 [default = 0];
inline bool GateToSuperUserNum::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateToSuperUserNum::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateToSuperUserNum::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateToSuperUserNum::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 GateToSuperUserNum::num() const {
  // @@protoc_insertion_point(field_get:Cmd.GateToSuperUserNum.num)
  return num_;
}
inline void GateToSuperUserNum::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GateToSuperUserNum.num)
}

// -------------------------------------------------------------------

// PushMsgGateSuperCmd

// optional .Cmd.Command cmd = 1 [default = GATE_SUPER_PROTOCMD];
inline bool PushMsgGateSuperCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushMsgGateSuperCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushMsgGateSuperCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushMsgGateSuperCmd::clear_cmd() {
  cmd_ = 205;
  clear_has_cmd();
}
inline ::Cmd::Command PushMsgGateSuperCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PushMsgGateSuperCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PushMsgGateSuperCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PushMsgGateSuperCmd.cmd)
}

// optional .Cmd.GateParam param = 2 [default = GATEPARAM_PUSHOVER_MSG];
inline bool PushMsgGateSuperCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushMsgGateSuperCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushMsgGateSuperCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushMsgGateSuperCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::GateParam PushMsgGateSuperCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PushMsgGateSuperCmd.param)
  return static_cast< ::Cmd::GateParam >(param_);
}
inline void PushMsgGateSuperCmd::set_param(::Cmd::GateParam value) {
  assert(::Cmd::GateParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PushMsgGateSuperCmd.param)
}

// optional .Cmd.EPushMsg type = 3 [default = EPUSHMSG_MIN];
inline bool PushMsgGateSuperCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PushMsgGateSuperCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PushMsgGateSuperCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PushMsgGateSuperCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPushMsg PushMsgGateSuperCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.PushMsgGateSuperCmd.type)
  return static_cast< ::Cmd::EPushMsg >(type_);
}
inline void PushMsgGateSuperCmd::set_type(::Cmd::EPushMsg value) {
  assert(::Cmd::EPushMsg_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PushMsgGateSuperCmd.type)
}

// optional string title = 4;
inline bool PushMsgGateSuperCmd::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PushMsgGateSuperCmd::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PushMsgGateSuperCmd::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PushMsgGateSuperCmd::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& PushMsgGateSuperCmd::title() const {
  // @@protoc_insertion_point(field_get:Cmd.PushMsgGateSuperCmd.title)
  return *title_;
}
inline void PushMsgGateSuperCmd::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PushMsgGateSuperCmd.title)
}
inline void PushMsgGateSuperCmd::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PushMsgGateSuperCmd.title)
}
inline void PushMsgGateSuperCmd::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PushMsgGateSuperCmd.title)
}
inline ::std::string* PushMsgGateSuperCmd::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PushMsgGateSuperCmd.title)
  return title_;
}
inline ::std::string* PushMsgGateSuperCmd::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PushMsgGateSuperCmd::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PushMsgGateSuperCmd.title)
}

// optional string msg = 5;
inline bool PushMsgGateSuperCmd::has_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PushMsgGateSuperCmd::set_has_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PushMsgGateSuperCmd::clear_has_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PushMsgGateSuperCmd::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& PushMsgGateSuperCmd::msg() const {
  // @@protoc_insertion_point(field_get:Cmd.PushMsgGateSuperCmd.msg)
  return *msg_;
}
inline void PushMsgGateSuperCmd::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PushMsgGateSuperCmd.msg)
}
inline void PushMsgGateSuperCmd::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PushMsgGateSuperCmd.msg)
}
inline void PushMsgGateSuperCmd::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PushMsgGateSuperCmd.msg)
}
inline ::std::string* PushMsgGateSuperCmd::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PushMsgGateSuperCmd.msg)
  return msg_;
}
inline ::std::string* PushMsgGateSuperCmd::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PushMsgGateSuperCmd::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PushMsgGateSuperCmd.msg)
}

// -------------------------------------------------------------------

// AlterMsgGateSuperCmd

// optional .Cmd.Command cmd = 1 [default = GATE_SUPER_PROTOCMD];
inline bool AlterMsgGateSuperCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlterMsgGateSuperCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlterMsgGateSuperCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlterMsgGateSuperCmd::clear_cmd() {
  cmd_ = 205;
  clear_has_cmd();
}
inline ::Cmd::Command AlterMsgGateSuperCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AlterMsgGateSuperCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AlterMsgGateSuperCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AlterMsgGateSuperCmd.cmd)
}

// optional .Cmd.GateParam param = 2 [default = GATEPARAM_ALTER_MSG];
inline bool AlterMsgGateSuperCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlterMsgGateSuperCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlterMsgGateSuperCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlterMsgGateSuperCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::GateParam AlterMsgGateSuperCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AlterMsgGateSuperCmd.param)
  return static_cast< ::Cmd::GateParam >(param_);
}
inline void AlterMsgGateSuperCmd::set_param(::Cmd::GateParam value) {
  assert(::Cmd::GateParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AlterMsgGateSuperCmd.param)
}

// optional .Cmd.EPushMsg event = 3 [default = EPUSHMSG_MIN];
inline bool AlterMsgGateSuperCmd::has_event() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlterMsgGateSuperCmd::set_has_event() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlterMsgGateSuperCmd::clear_has_event() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlterMsgGateSuperCmd::clear_event() {
  event_ = 0;
  clear_has_event();
}
inline ::Cmd::EPushMsg AlterMsgGateSuperCmd::event() const {
  // @@protoc_insertion_point(field_get:Cmd.AlterMsgGateSuperCmd.event)
  return static_cast< ::Cmd::EPushMsg >(event_);
}
inline void AlterMsgGateSuperCmd::set_event(::Cmd::EPushMsg value) {
  assert(::Cmd::EPushMsg_IsValid(value));
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AlterMsgGateSuperCmd.event)
}

// optional string title = 4;
inline bool AlterMsgGateSuperCmd::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlterMsgGateSuperCmd::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlterMsgGateSuperCmd::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlterMsgGateSuperCmd::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& AlterMsgGateSuperCmd::title() const {
  // @@protoc_insertion_point(field_get:Cmd.AlterMsgGateSuperCmd.title)
  return *title_;
}
inline void AlterMsgGateSuperCmd::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AlterMsgGateSuperCmd.title)
}
inline void AlterMsgGateSuperCmd::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AlterMsgGateSuperCmd.title)
}
inline void AlterMsgGateSuperCmd::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AlterMsgGateSuperCmd.title)
}
inline ::std::string* AlterMsgGateSuperCmd::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AlterMsgGateSuperCmd.title)
  return title_;
}
inline ::std::string* AlterMsgGateSuperCmd::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlterMsgGateSuperCmd::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AlterMsgGateSuperCmd.title)
}

// optional string msg = 5;
inline bool AlterMsgGateSuperCmd::has_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlterMsgGateSuperCmd::set_has_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlterMsgGateSuperCmd::clear_has_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlterMsgGateSuperCmd::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& AlterMsgGateSuperCmd::msg() const {
  // @@protoc_insertion_point(field_get:Cmd.AlterMsgGateSuperCmd.msg)
  return *msg_;
}
inline void AlterMsgGateSuperCmd::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AlterMsgGateSuperCmd.msg)
}
inline void AlterMsgGateSuperCmd::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AlterMsgGateSuperCmd.msg)
}
inline void AlterMsgGateSuperCmd::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AlterMsgGateSuperCmd.msg)
}
inline ::std::string* AlterMsgGateSuperCmd::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AlterMsgGateSuperCmd.msg)
  return msg_;
}
inline ::std::string* AlterMsgGateSuperCmd::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlterMsgGateSuperCmd::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AlterMsgGateSuperCmd.msg)
}

// -------------------------------------------------------------------

// PushTyrantDbGateSuperCmd

// optional .Cmd.Command cmd = 1 [default = GATE_SUPER_PROTOCMD];
inline bool PushTyrantDbGateSuperCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushTyrantDbGateSuperCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushTyrantDbGateSuperCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushTyrantDbGateSuperCmd::clear_cmd() {
  cmd_ = 205;
  clear_has_cmd();
}
inline ::Cmd::Command PushTyrantDbGateSuperCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PushTyrantDbGateSuperCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PushTyrantDbGateSuperCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PushTyrantDbGateSuperCmd.cmd)
}

// optional .Cmd.GateParam param = 2 [default = GATEPARAM_PUSH_TYRANT_DB];
inline bool PushTyrantDbGateSuperCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushTyrantDbGateSuperCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushTyrantDbGateSuperCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushTyrantDbGateSuperCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::GateParam PushTyrantDbGateSuperCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PushTyrantDbGateSuperCmd.param)
  return static_cast< ::Cmd::GateParam >(param_);
}
inline void PushTyrantDbGateSuperCmd::set_param(::Cmd::GateParam value) {
  assert(::Cmd::GateParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PushTyrantDbGateSuperCmd.param)
}

// optional uint32 accid = 3;
inline bool PushTyrantDbGateSuperCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PushTyrantDbGateSuperCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PushTyrantDbGateSuperCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PushTyrantDbGateSuperCmd::clear_accid() {
  accid_ = 0u;
  clear_has_accid();
}
inline ::google::protobuf::uint32 PushTyrantDbGateSuperCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.PushTyrantDbGateSuperCmd.accid)
  return accid_;
}
inline void PushTyrantDbGateSuperCmd::set_accid(::google::protobuf::uint32 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PushTyrantDbGateSuperCmd.accid)
}

// optional uint64 charid = 4;
inline bool PushTyrantDbGateSuperCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PushTyrantDbGateSuperCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PushTyrantDbGateSuperCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PushTyrantDbGateSuperCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 PushTyrantDbGateSuperCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.PushTyrantDbGateSuperCmd.charid)
  return charid_;
}
inline void PushTyrantDbGateSuperCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PushTyrantDbGateSuperCmd.charid)
}

// optional string orderid = 5;
inline bool PushTyrantDbGateSuperCmd::has_orderid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PushTyrantDbGateSuperCmd::set_has_orderid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PushTyrantDbGateSuperCmd::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PushTyrantDbGateSuperCmd::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& PushTyrantDbGateSuperCmd::orderid() const {
  // @@protoc_insertion_point(field_get:Cmd.PushTyrantDbGateSuperCmd.orderid)
  return *orderid_;
}
inline void PushTyrantDbGateSuperCmd::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PushTyrantDbGateSuperCmd.orderid)
}
inline void PushTyrantDbGateSuperCmd::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PushTyrantDbGateSuperCmd.orderid)
}
inline void PushTyrantDbGateSuperCmd::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PushTyrantDbGateSuperCmd.orderid)
}
inline ::std::string* PushTyrantDbGateSuperCmd::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orderid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PushTyrantDbGateSuperCmd.orderid)
  return orderid_;
}
inline ::std::string* PushTyrantDbGateSuperCmd::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PushTyrantDbGateSuperCmd::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PushTyrantDbGateSuperCmd.orderid)
}

// optional uint32 amount = 6;
inline bool PushTyrantDbGateSuperCmd::has_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PushTyrantDbGateSuperCmd::set_has_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PushTyrantDbGateSuperCmd::clear_has_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PushTyrantDbGateSuperCmd::clear_amount() {
  amount_ = 0u;
  clear_has_amount();
}
inline ::google::protobuf::uint32 PushTyrantDbGateSuperCmd::amount() const {
  // @@protoc_insertion_point(field_get:Cmd.PushTyrantDbGateSuperCmd.amount)
  return amount_;
}
inline void PushTyrantDbGateSuperCmd::set_amount(::google::protobuf::uint32 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PushTyrantDbGateSuperCmd.amount)
}

// optional uint32 itemcount = 7;
inline bool PushTyrantDbGateSuperCmd::has_itemcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PushTyrantDbGateSuperCmd::set_has_itemcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PushTyrantDbGateSuperCmd::clear_has_itemcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PushTyrantDbGateSuperCmd::clear_itemcount() {
  itemcount_ = 0u;
  clear_has_itemcount();
}
inline ::google::protobuf::uint32 PushTyrantDbGateSuperCmd::itemcount() const {
  // @@protoc_insertion_point(field_get:Cmd.PushTyrantDbGateSuperCmd.itemcount)
  return itemcount_;
}
inline void PushTyrantDbGateSuperCmd::set_itemcount(::google::protobuf::uint32 value) {
  set_has_itemcount();
  itemcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PushTyrantDbGateSuperCmd.itemcount)
}

// optional string productid = 8;
inline bool PushTyrantDbGateSuperCmd::has_productid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PushTyrantDbGateSuperCmd::set_has_productid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PushTyrantDbGateSuperCmd::clear_has_productid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PushTyrantDbGateSuperCmd::clear_productid() {
  if (productid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    productid_->clear();
  }
  clear_has_productid();
}
inline const ::std::string& PushTyrantDbGateSuperCmd::productid() const {
  // @@protoc_insertion_point(field_get:Cmd.PushTyrantDbGateSuperCmd.productid)
  return *productid_;
}
inline void PushTyrantDbGateSuperCmd::set_productid(const ::std::string& value) {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    productid_ = new ::std::string;
  }
  productid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PushTyrantDbGateSuperCmd.productid)
}
inline void PushTyrantDbGateSuperCmd::set_productid(const char* value) {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    productid_ = new ::std::string;
  }
  productid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PushTyrantDbGateSuperCmd.productid)
}
inline void PushTyrantDbGateSuperCmd::set_productid(const char* value, size_t size) {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    productid_ = new ::std::string;
  }
  productid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PushTyrantDbGateSuperCmd.productid)
}
inline ::std::string* PushTyrantDbGateSuperCmd::mutable_productid() {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    productid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PushTyrantDbGateSuperCmd.productid)
  return productid_;
}
inline ::std::string* PushTyrantDbGateSuperCmd::release_productid() {
  clear_has_productid();
  if (productid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = productid_;
    productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PushTyrantDbGateSuperCmd::set_allocated_productid(::std::string* productid) {
  if (productid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete productid_;
  }
  if (productid) {
    set_has_productid();
    productid_ = productid;
  } else {
    clear_has_productid();
    productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PushTyrantDbGateSuperCmd.productid)
}

// optional string chargetype = 9;
inline bool PushTyrantDbGateSuperCmd::has_chargetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PushTyrantDbGateSuperCmd::set_has_chargetype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PushTyrantDbGateSuperCmd::clear_has_chargetype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PushTyrantDbGateSuperCmd::clear_chargetype() {
  if (chargetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chargetype_->clear();
  }
  clear_has_chargetype();
}
inline const ::std::string& PushTyrantDbGateSuperCmd::chargetype() const {
  // @@protoc_insertion_point(field_get:Cmd.PushTyrantDbGateSuperCmd.chargetype)
  return *chargetype_;
}
inline void PushTyrantDbGateSuperCmd::set_chargetype(const ::std::string& value) {
  set_has_chargetype();
  if (chargetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chargetype_ = new ::std::string;
  }
  chargetype_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PushTyrantDbGateSuperCmd.chargetype)
}
inline void PushTyrantDbGateSuperCmd::set_chargetype(const char* value) {
  set_has_chargetype();
  if (chargetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chargetype_ = new ::std::string;
  }
  chargetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PushTyrantDbGateSuperCmd.chargetype)
}
inline void PushTyrantDbGateSuperCmd::set_chargetype(const char* value, size_t size) {
  set_has_chargetype();
  if (chargetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chargetype_ = new ::std::string;
  }
  chargetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PushTyrantDbGateSuperCmd.chargetype)
}
inline ::std::string* PushTyrantDbGateSuperCmd::mutable_chargetype() {
  set_has_chargetype();
  if (chargetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chargetype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PushTyrantDbGateSuperCmd.chargetype)
  return chargetype_;
}
inline ::std::string* PushTyrantDbGateSuperCmd::release_chargetype() {
  clear_has_chargetype();
  if (chargetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = chargetype_;
    chargetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PushTyrantDbGateSuperCmd::set_allocated_chargetype(::std::string* chargetype) {
  if (chargetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chargetype_;
  }
  if (chargetype) {
    set_has_chargetype();
    chargetype_ = chargetype;
  } else {
    clear_has_chargetype();
    chargetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PushTyrantDbGateSuperCmd.chargetype)
}

// -------------------------------------------------------------------

// ForwardToGateUserCmd

// optional .Cmd.Command cmd = 1 [default = GATE_SUPER_PROTOCMD];
inline bool ForwardToGateUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardToGateUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardToGateUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardToGateUserCmd::clear_cmd() {
  cmd_ = 205;
  clear_has_cmd();
}
inline ::Cmd::Command ForwardToGateUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardToGateUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ForwardToGateUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardToGateUserCmd.cmd)
}

// optional .Cmd.GateParam param = 2 [default = GATEPARAM_FORWARD_TO_GATEUSER];
inline bool ForwardToGateUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForwardToGateUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForwardToGateUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForwardToGateUserCmd::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::GateParam ForwardToGateUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardToGateUserCmd.param)
  return static_cast< ::Cmd::GateParam >(param_);
}
inline void ForwardToGateUserCmd::set_param(::Cmd::GateParam value) {
  assert(::Cmd::GateParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardToGateUserCmd.param)
}

// repeated uint64 accids = 3;
inline int ForwardToGateUserCmd::accids_size() const {
  return accids_.size();
}
inline void ForwardToGateUserCmd::clear_accids() {
  accids_.Clear();
}
inline ::google::protobuf::uint64 ForwardToGateUserCmd::accids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardToGateUserCmd.accids)
  return accids_.Get(index);
}
inline void ForwardToGateUserCmd::set_accids(int index, ::google::protobuf::uint64 value) {
  accids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.ForwardToGateUserCmd.accids)
}
inline void ForwardToGateUserCmd::add_accids(::google::protobuf::uint64 value) {
  accids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.ForwardToGateUserCmd.accids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ForwardToGateUserCmd::accids() const {
  // @@protoc_insertion_point(field_list:Cmd.ForwardToGateUserCmd.accids)
  return accids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ForwardToGateUserCmd::mutable_accids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ForwardToGateUserCmd.accids)
  return &accids_;
}

// optional bytes data = 4;
inline bool ForwardToGateUserCmd::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ForwardToGateUserCmd::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ForwardToGateUserCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ForwardToGateUserCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ForwardToGateUserCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardToGateUserCmd.data)
  return *data_;
}
inline void ForwardToGateUserCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ForwardToGateUserCmd.data)
}
inline void ForwardToGateUserCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ForwardToGateUserCmd.data)
}
inline void ForwardToGateUserCmd::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ForwardToGateUserCmd.data)
}
inline ::std::string* ForwardToGateUserCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ForwardToGateUserCmd.data)
  return data_;
}
inline ::std::string* ForwardToGateUserCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardToGateUserCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ForwardToGateUserCmd.data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::GateParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::GateParam>() {
  return ::Cmd::GateParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EPushMsg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EPushMsg>() {
  return ::Cmd::EPushMsg_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GateSuper_2eproto__INCLUDED
