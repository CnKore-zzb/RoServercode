// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LogCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* LoginLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeFlagLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeFlagLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncomeLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncomeLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsumeLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsumeLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropsLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropsLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckpointLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckpointLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatSearchCond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatSearchCond_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatLogRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatLogRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryChatLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryChatLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipUpLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipUpLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocailLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocailLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManualLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManualLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompleteLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompleteLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemOperLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemOperLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DojoLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DojoLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnchantLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnchantLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildPrayLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildPrayLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseSkillLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseSkillLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActiveLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActiveLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteCharLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteCharLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComposeLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComposeLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* JumpzoneLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JumpzoneLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeAdjustPriceLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeAdjustPriceLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradePriceLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradePriceLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetChangeLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetChangeLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetAdventureLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetAdventureLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* InactiveUserLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InactiveUserLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeUntakeLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeUntakeLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreditLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreditLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeGiveLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeGiveLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuotaLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuotaLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildItemLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildItemLogCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EChatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPriceStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPetChangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPetAdventureLogType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECreditType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGiveEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ELogGiveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuotaOptType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_LogCmd_2eproto() {
  protobuf_AddDesc_LogCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LogCmd.proto");
  GOOGLE_CHECK(file != NULL);
  LoginLogCmd_descriptor_ = file->message_type(0);
  static const int LoginLogCmd_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, guest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, teamtimelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, isnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, zoneid_),
  };
  LoginLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginLogCmd_descriptor_,
      LoginLogCmd::default_instance_,
      LoginLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginLogCmd));
  AccountLogCmd_descriptor_ = file->message_type(1);
  static const int AccountLogCmd_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogCmd, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogCmd, guest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogCmd, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogCmd, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogCmd, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogCmd, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogCmd, logid_),
  };
  AccountLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLogCmd_descriptor_,
      AccountLogCmd::default_instance_,
      AccountLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLogCmd));
  CreateLogCmd_descriptor_ = file->message_type(2);
  static const int CreateLogCmd_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, guest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, logid_),
  };
  CreateLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateLogCmd_descriptor_,
      CreateLogCmd::default_instance_,
      CreateLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateLogCmd));
  ChangeFlagLogCmd_descriptor_ = file->message_type(3);
  static const int ChangeFlagLogCmd_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFlagLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFlagLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFlagLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFlagLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFlagLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFlagLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFlagLogCmd, falg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFlagLogCmd, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFlagLogCmd, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFlagLogCmd, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFlagLogCmd, logid_),
  };
  ChangeFlagLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeFlagLogCmd_descriptor_,
      ChangeFlagLogCmd::default_instance_,
      ChangeFlagLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFlagLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFlagLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeFlagLogCmd));
  ChargeLogCmd_descriptor_ = file->message_type(4);
  static const int ChargeLogCmd_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, provider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, logid_),
  };
  ChargeLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeLogCmd_descriptor_,
      ChargeLogCmd::default_instance_,
      ChargeLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeLogCmd));
  EventLogCmd_descriptor_ = file->message_type(5);
  static const int EventLogCmd_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, microtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, logid_),
  };
  EventLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventLogCmd_descriptor_,
      EventLogCmd::default_instance_,
      EventLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventLogCmd));
  IncomeLogCmd_descriptor_ = file->message_type(6);
  static const int IncomeLogCmd_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, microtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, coin_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, count_),
  };
  IncomeLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncomeLogCmd_descriptor_,
      IncomeLogCmd::default_instance_,
      IncomeLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncomeLogCmd));
  ConsumeLogCmd_descriptor_ = file->message_type(7);
  static const int ConsumeLogCmd_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, microtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, coin_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, chargecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, remaincharge_),
  };
  ConsumeLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsumeLogCmd_descriptor_,
      ConsumeLogCmd::default_instance_,
      ConsumeLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsumeLogCmd));
  ItemLogCmd_descriptor_ = file->message_type(8);
  static const int ItemLogCmd_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, microtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, from_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, amount2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, count_),
  };
  ItemLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemLogCmd_descriptor_,
      ItemLogCmd::default_instance_,
      ItemLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemLogCmd));
  PropsLogCmd_descriptor_ = file->message_type(9);
  static const int PropsLogCmd_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, microtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, iteminfo_),
  };
  PropsLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropsLogCmd_descriptor_,
      PropsLogCmd::default_instance_,
      PropsLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropsLogCmd));
  TransactionLogCmd_descriptor_ = file->message_type(10);
  static const int TransactionLogCmd_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, from_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, from_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, to_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, to_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, fee2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, logid_),
  };
  TransactionLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionLogCmd_descriptor_,
      TransactionLogCmd::default_instance_,
      TransactionLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionLogCmd));
  ChatLogCmd_descriptor_ = file->message_type(11);
  static const int ChatLogCmd_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, from_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, from_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, from_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, to_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, to_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, to_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, voicelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, logid_),
  };
  ChatLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatLogCmd_descriptor_,
      ChatLogCmd::default_instance_,
      ChatLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatLogCmd));
  LevelLogCmd_descriptor_ = file->message_type(12);
  static const int LevelLogCmd_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, costtime_),
  };
  LevelLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelLogCmd_descriptor_,
      LevelLogCmd::default_instance_,
      LevelLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelLogCmd));
  OnlineLogCmd_descriptor_ = file->message_type(13);
  static const int OnlineLogCmd_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineLogCmd, count_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineLogCmd, count_web_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineLogCmd, count_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineLogCmd, count_ios_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineLogCmd, count_android_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineLogCmd, lineid_),
  };
  OnlineLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineLogCmd_descriptor_,
      OnlineLogCmd::default_instance_,
      OnlineLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineLogCmd));
  SnapshotLogCmd_descriptor_ = file->message_type(14);
  static const int SnapshotLogCmd_offsets_[1] = {
  };
  SnapshotLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotLogCmd_descriptor_,
      SnapshotLogCmd::default_instance_,
      SnapshotLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotLogCmd));
  CheckpointLogCmd_descriptor_ = file->message_type(15);
  static const int CheckpointLogCmd_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, cpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, isfirst_),
  };
  CheckpointLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckpointLogCmd_descriptor_,
      CheckpointLogCmd::default_instance_,
      CheckpointLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckpointLogCmd));
  RankLogCmd_descriptor_ = file->message_type(16);
  static const int RankLogCmd_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLogCmd, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLogCmd, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLogCmd, logid_),
  };
  RankLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankLogCmd_descriptor_,
      RankLogCmd::default_instance_,
      RankLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankLogCmd));
  ChatSearchCond_descriptor_ = file->message_type(17);
  static const int ChatSearchCond_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSearchCond, who_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSearchCond, fromtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSearchCond, totime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSearchCond, chattype_),
  };
  ChatSearchCond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatSearchCond_descriptor_,
      ChatSearchCond::default_instance_,
      ChatSearchCond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSearchCond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSearchCond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatSearchCond));
  ChatLogRes_descriptor_ = file->message_type(18);
  static const int ChatLogRes_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogRes, sendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogRes, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogRes, recvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogRes, recvname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogRes, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogRes, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogRes, voicelen_),
  };
  ChatLogRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatLogRes_descriptor_,
      ChatLogRes::default_instance_,
      ChatLogRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatLogRes));
  QueryChatLogCmd_descriptor_ = file->message_type(19);
  static const int QueryChatLogCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatLogCmd, cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatLogCmd, res_),
  };
  QueryChatLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryChatLogCmd_descriptor_,
      QueryChatLogCmd::default_instance_,
      QueryChatLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryChatLogCmd));
  ChangeLogCmd_descriptor_ = file->message_type(20);
  static const int ChangeLogCmd_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, logid_),
  };
  ChangeLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeLogCmd_descriptor_,
      ChangeLogCmd::default_instance_,
      ChangeLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeLogCmd));
  EquipLogCmd_descriptor_ = file->message_type(21);
  static const int EquipLogCmd_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, old_equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, old_equipgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, old_strengthlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, old_refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, old_isdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, new_equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, new_equipgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, new_strengthlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, new_refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, new_isdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, logid_),
  };
  EquipLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipLogCmd_descriptor_,
      EquipLogCmd::default_instance_,
      EquipLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipLogCmd));
  CardLogCmd_descriptor_ = file->message_type(22);
  static const int CardLogCmd_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, equipgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, cardgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, useslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, maxslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, logid_),
  };
  CardLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardLogCmd_descriptor_,
      CardLogCmd::default_instance_,
      CardLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardLogCmd));
  EquipUpLogCmd_descriptor_ = file->message_type(23);
  static const int EquipUpLogCmd_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, equipguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, old_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, new_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, isfail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, cost_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, cost_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, isdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, logid_),
  };
  EquipUpLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipUpLogCmd_descriptor_,
      EquipUpLogCmd::default_instance_,
      EquipUpLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipUpLogCmd));
  SocailLogCmd_descriptor_ = file->message_type(24);
  static const int SocailLogCmd_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, inid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, otherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, logid_),
  };
  SocailLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocailLogCmd_descriptor_,
      SocailLogCmd::default_instance_,
      SocailLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocailLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocailLogCmd));
  QuestLogCmd_descriptor_ = file->message_type(25);
  static const int QuestLogCmd_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, baseexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, jobexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, rewarditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, lineid_),
  };
  QuestLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestLogCmd_descriptor_,
      QuestLogCmd::default_instance_,
      QuestLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestLogCmd));
  ManualLogCmd_descriptor_ = file->message_type(26);
  static const int ManualLogCmd_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, what_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, logid_),
  };
  ManualLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManualLogCmd_descriptor_,
      ManualLogCmd::default_instance_,
      ManualLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManualLogCmd));
  CompleteLogCmd_descriptor_ = file->message_type(27);
  static const int CompleteLogCmd_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, today_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, reward_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, logid_),
  };
  CompleteLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompleteLogCmd_descriptor_,
      CompleteLogCmd::default_instance_,
      CompleteLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompleteLogCmd));
  TowerLogCmd_descriptor_ = file->message_type(28);
  static const int TowerLogCmd_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, curlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, maxlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, logid_),
  };
  TowerLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerLogCmd_descriptor_,
      TowerLogCmd::default_instance_,
      TowerLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerLogCmd));
  ItemOperLogCmd_descriptor_ = file->message_type(29);
  static const int ItemOperLogCmd_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, logid_),
  };
  ItemOperLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemOperLogCmd_descriptor_,
      ItemOperLogCmd::default_instance_,
      ItemOperLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemOperLogCmd));
  KillLogCmd_descriptor_ = file->message_type(30);
  static const int KillLogCmd_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, monstergid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, monstergroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, baseexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, jobexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, ismvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, killtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, lineid_),
  };
  KillLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillLogCmd_descriptor_,
      KillLogCmd::default_instance_,
      KillLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillLogCmd));
  RewardLogCmd_descriptor_ = file->message_type(31);
  static const int RewardLogCmd_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, rewarditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, logid_),
  };
  RewardLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardLogCmd_descriptor_,
      RewardLogCmd::default_instance_,
      RewardLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardLogCmd));
  MailLogCmd_descriptor_ = file->message_type(32);
  static const int MailLogCmd_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, sysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, rewarditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, logid_),
  };
  MailLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailLogCmd_descriptor_,
      MailLogCmd::default_instance_,
      MailLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailLogCmd));
  DojoLogCmd_descriptor_ = file->message_type(33);
  static const int DojoLogCmd_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, dojoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, passtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, logid_),
  };
  DojoLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DojoLogCmd_descriptor_,
      DojoLogCmd::default_instance_,
      DojoLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DojoLogCmd));
  EnchantLogCmd_descriptor_ = file->message_type(34);
  static const int EnchantLogCmd_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, equipguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, enchanttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, oldattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, newattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, oldbufid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, newbufid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, costitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, costitemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, costmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, logid_),
  };
  EnchantLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnchantLogCmd_descriptor_,
      EnchantLogCmd::default_instance_,
      EnchantLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnchantLogCmd));
  GuildPrayLogCmd_descriptor_ = file->message_type(35);
  static const int GuildPrayLogCmd_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, prayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, addattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, costmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, costcon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, logid_),
  };
  GuildPrayLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildPrayLogCmd_descriptor_,
      GuildPrayLogCmd::default_instance_,
      GuildPrayLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildPrayLogCmd));
  UseSkillLogCmd_descriptor_ = file->message_type(36);
  static const int UseSkillLogCmd_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillLogCmd, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillLogCmd, logid_),
  };
  UseSkillLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseSkillLogCmd_descriptor_,
      UseSkillLogCmd::default_instance_,
      UseSkillLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseSkillLogCmd));
  ActiveLogCmd_descriptor_ = file->message_type(37);
  static const int ActiveLogCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveLogCmd, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveLogCmd, cdkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveLogCmd, logid_),
  };
  ActiveLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActiveLogCmd_descriptor_,
      ActiveLogCmd::default_instance_,
      ActiveLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActiveLogCmd));
  TradeLogCmd_descriptor_ = file->message_type(38);
  static const int TradeLogCmd_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, moneycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, otherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, strotherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, spend_quota_),
  };
  TradeLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeLogCmd_descriptor_,
      TradeLogCmd::default_instance_,
      TradeLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeLogCmd));
  DeleteCharLogCmd_descriptor_ = file->message_type(39);
  static const int DeleteCharLogCmd_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharLogCmd, logid_),
  };
  DeleteCharLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteCharLogCmd_descriptor_,
      DeleteCharLogCmd::default_instance_,
      DeleteCharLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteCharLogCmd));
  ComposeLogCmd_descriptor_ = file->message_type(40);
  static const int ComposeLogCmd_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeLogCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeLogCmd, itemguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeLogCmd, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeLogCmd, logid_),
  };
  ComposeLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComposeLogCmd_descriptor_,
      ComposeLogCmd::default_instance_,
      ComposeLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComposeLogCmd));
  JumpzoneLogCmd_descriptor_ = file->message_type(41);
  static const int JumpzoneLogCmd_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, oldzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, newzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, isfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, logid_),
  };
  JumpzoneLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JumpzoneLogCmd_descriptor_,
      JumpzoneLogCmd::default_instance_,
      JumpzoneLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpzoneLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JumpzoneLogCmd));
  TeamLogCmd_descriptor_ = file->message_type(42);
  static const int TeamLogCmd_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, ispay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, inid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, otherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, logid_),
  };
  TeamLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamLogCmd_descriptor_,
      TeamLogCmd::default_instance_,
      TeamLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamLogCmd));
  TradeAdjustPriceLogCmd_descriptor_ = file->message_type(43);
  static const int TradeAdjustPriceLogCmd_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, sold_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, kt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, qk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, up_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, down_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, new_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, old_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, real_price_),
  };
  TradeAdjustPriceLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeAdjustPriceLogCmd_descriptor_,
      TradeAdjustPriceLogCmd::default_instance_,
      TradeAdjustPriceLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAdjustPriceLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeAdjustPriceLogCmd));
  TradePriceLogCmd_descriptor_ = file->message_type(44);
  static const int TradePriceLogCmd_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceLogCmd, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceLogCmd, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceLogCmd, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceLogCmd, logid_),
  };
  TradePriceLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradePriceLogCmd_descriptor_,
      TradePriceLogCmd::default_instance_,
      TradePriceLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradePriceLogCmd));
  PetChangeLogCmd_descriptor_ = file->message_type(45);
  static const int PetChangeLogCmd_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, skill_before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, skill_after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, logid_),
  };
  PetChangeLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetChangeLogCmd_descriptor_,
      PetChangeLogCmd::default_instance_,
      PetChangeLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetChangeLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetChangeLogCmd));
  PetAdventureLogCmd_descriptor_ = file->message_type(46);
  static const int PetAdventureLogCmd_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, logid_),
  };
  PetAdventureLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetAdventureLogCmd_descriptor_,
      PetAdventureLogCmd::default_instance_,
      PetAdventureLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetAdventureLogCmd));
  InactiveUserLogCmd_descriptor_ = file->message_type(47);
  static const int InactiveUserLogCmd_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, left_zeny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, send_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, guildid_),
  };
  InactiveUserLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InactiveUserLogCmd_descriptor_,
      InactiveUserLogCmd::default_instance_,
      InactiveUserLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InactiveUserLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InactiveUserLogCmd));
  TradeUntakeLogCmd_descriptor_ = file->message_type(48);
  static const int TradeUntakeLogCmd_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUntakeLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUntakeLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUntakeLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUntakeLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUntakeLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUntakeLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUntakeLogCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUntakeLogCmd, zeny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUntakeLogCmd, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUntakeLogCmd, logid_),
  };
  TradeUntakeLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeUntakeLogCmd_descriptor_,
      TradeUntakeLogCmd::default_instance_,
      TradeUntakeLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUntakeLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUntakeLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeUntakeLogCmd));
  CreditLogCmd_descriptor_ = file->message_type(49);
  static const int CreditLogCmd_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditLogCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditLogCmd, before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditLogCmd, after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditLogCmd, logid_),
  };
  CreditLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreditLogCmd_descriptor_,
      CreditLogCmd::default_instance_,
      CreditLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreditLogCmd));
  TradeGiveLogCmd_descriptor_ = file->message_type(50);
  static const int TradeGiveLogCmd_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, otherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, othername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, givetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, givetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, itemcount_),
  };
  TradeGiveLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeGiveLogCmd_descriptor_,
      TradeGiveLogCmd::default_instance_,
      TradeGiveLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGiveLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeGiveLogCmd));
  QuotaLogCmd_descriptor_ = file->message_type(51);
  static const int QuotaLogCmd_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLogCmd, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLogCmd, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLogCmd, opttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLogCmd, quotatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLogCmd, changed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLogCmd, quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLogCmd, lock_),
  };
  QuotaLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuotaLogCmd_descriptor_,
      QuotaLogCmd::default_instance_,
      QuotaLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuotaLogCmd));
  GuildItemLogCmd_descriptor_ = file->message_type(52);
  static const int GuildItemLogCmd_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildItemLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildItemLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildItemLogCmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildItemLogCmd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildItemLogCmd, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildItemLogCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildItemLogCmd, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildItemLogCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildItemLogCmd, changed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildItemLogCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildItemLogCmd, type_),
  };
  GuildItemLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildItemLogCmd_descriptor_,
      GuildItemLogCmd::default_instance_,
      GuildItemLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildItemLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildItemLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildItemLogCmd));
  LogParam_descriptor_ = file->enum_type(0);
  EChatType_descriptor_ = file->enum_type(1);
  EPriceStatus_descriptor_ = file->enum_type(2);
  EPetChangeType_descriptor_ = file->enum_type(3);
  EPetAdventureLogType_descriptor_ = file->enum_type(4);
  ECreditType_descriptor_ = file->enum_type(5);
  EGiveEvent_descriptor_ = file->enum_type(6);
  ELogGiveType_descriptor_ = file->enum_type(7);
  EQuotaOptType_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LogCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginLogCmd_descriptor_, &LoginLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLogCmd_descriptor_, &AccountLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateLogCmd_descriptor_, &CreateLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeFlagLogCmd_descriptor_, &ChangeFlagLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeLogCmd_descriptor_, &ChargeLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventLogCmd_descriptor_, &EventLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncomeLogCmd_descriptor_, &IncomeLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsumeLogCmd_descriptor_, &ConsumeLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemLogCmd_descriptor_, &ItemLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropsLogCmd_descriptor_, &PropsLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionLogCmd_descriptor_, &TransactionLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatLogCmd_descriptor_, &ChatLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelLogCmd_descriptor_, &LevelLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineLogCmd_descriptor_, &OnlineLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotLogCmd_descriptor_, &SnapshotLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckpointLogCmd_descriptor_, &CheckpointLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankLogCmd_descriptor_, &RankLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatSearchCond_descriptor_, &ChatSearchCond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatLogRes_descriptor_, &ChatLogRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryChatLogCmd_descriptor_, &QueryChatLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeLogCmd_descriptor_, &ChangeLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipLogCmd_descriptor_, &EquipLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardLogCmd_descriptor_, &CardLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipUpLogCmd_descriptor_, &EquipUpLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocailLogCmd_descriptor_, &SocailLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestLogCmd_descriptor_, &QuestLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManualLogCmd_descriptor_, &ManualLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompleteLogCmd_descriptor_, &CompleteLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerLogCmd_descriptor_, &TowerLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemOperLogCmd_descriptor_, &ItemOperLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillLogCmd_descriptor_, &KillLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardLogCmd_descriptor_, &RewardLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailLogCmd_descriptor_, &MailLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DojoLogCmd_descriptor_, &DojoLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnchantLogCmd_descriptor_, &EnchantLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildPrayLogCmd_descriptor_, &GuildPrayLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseSkillLogCmd_descriptor_, &UseSkillLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActiveLogCmd_descriptor_, &ActiveLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeLogCmd_descriptor_, &TradeLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteCharLogCmd_descriptor_, &DeleteCharLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComposeLogCmd_descriptor_, &ComposeLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JumpzoneLogCmd_descriptor_, &JumpzoneLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamLogCmd_descriptor_, &TeamLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeAdjustPriceLogCmd_descriptor_, &TradeAdjustPriceLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradePriceLogCmd_descriptor_, &TradePriceLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetChangeLogCmd_descriptor_, &PetChangeLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetAdventureLogCmd_descriptor_, &PetAdventureLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InactiveUserLogCmd_descriptor_, &InactiveUserLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeUntakeLogCmd_descriptor_, &TradeUntakeLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreditLogCmd_descriptor_, &CreditLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeGiveLogCmd_descriptor_, &TradeGiveLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuotaLogCmd_descriptor_, &QuotaLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildItemLogCmd_descriptor_, &GuildItemLogCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LogCmd_2eproto() {
  delete LoginLogCmd::default_instance_;
  delete LoginLogCmd_reflection_;
  delete AccountLogCmd::default_instance_;
  delete AccountLogCmd_reflection_;
  delete CreateLogCmd::default_instance_;
  delete CreateLogCmd_reflection_;
  delete ChangeFlagLogCmd::default_instance_;
  delete ChangeFlagLogCmd_reflection_;
  delete ChargeLogCmd::default_instance_;
  delete ChargeLogCmd_reflection_;
  delete EventLogCmd::default_instance_;
  delete EventLogCmd_reflection_;
  delete IncomeLogCmd::default_instance_;
  delete IncomeLogCmd_reflection_;
  delete ConsumeLogCmd::default_instance_;
  delete ConsumeLogCmd_reflection_;
  delete ItemLogCmd::default_instance_;
  delete ItemLogCmd_reflection_;
  delete PropsLogCmd::default_instance_;
  delete PropsLogCmd_reflection_;
  delete TransactionLogCmd::default_instance_;
  delete TransactionLogCmd_reflection_;
  delete ChatLogCmd::default_instance_;
  delete ChatLogCmd_reflection_;
  delete LevelLogCmd::default_instance_;
  delete LevelLogCmd_reflection_;
  delete OnlineLogCmd::default_instance_;
  delete OnlineLogCmd_reflection_;
  delete SnapshotLogCmd::default_instance_;
  delete SnapshotLogCmd_reflection_;
  delete CheckpointLogCmd::default_instance_;
  delete CheckpointLogCmd_reflection_;
  delete RankLogCmd::default_instance_;
  delete RankLogCmd_reflection_;
  delete ChatSearchCond::default_instance_;
  delete ChatSearchCond_reflection_;
  delete ChatLogRes::default_instance_;
  delete ChatLogRes_reflection_;
  delete QueryChatLogCmd::default_instance_;
  delete QueryChatLogCmd_reflection_;
  delete ChangeLogCmd::default_instance_;
  delete ChangeLogCmd_reflection_;
  delete EquipLogCmd::default_instance_;
  delete EquipLogCmd_reflection_;
  delete CardLogCmd::default_instance_;
  delete CardLogCmd_reflection_;
  delete EquipUpLogCmd::default_instance_;
  delete EquipUpLogCmd_reflection_;
  delete SocailLogCmd::default_instance_;
  delete SocailLogCmd_reflection_;
  delete QuestLogCmd::default_instance_;
  delete QuestLogCmd_reflection_;
  delete ManualLogCmd::default_instance_;
  delete ManualLogCmd_reflection_;
  delete CompleteLogCmd::default_instance_;
  delete CompleteLogCmd_reflection_;
  delete TowerLogCmd::default_instance_;
  delete TowerLogCmd_reflection_;
  delete ItemOperLogCmd::default_instance_;
  delete ItemOperLogCmd_reflection_;
  delete KillLogCmd::default_instance_;
  delete KillLogCmd_reflection_;
  delete RewardLogCmd::default_instance_;
  delete RewardLogCmd_reflection_;
  delete MailLogCmd::default_instance_;
  delete MailLogCmd_reflection_;
  delete DojoLogCmd::default_instance_;
  delete DojoLogCmd_reflection_;
  delete EnchantLogCmd::default_instance_;
  delete EnchantLogCmd_reflection_;
  delete GuildPrayLogCmd::default_instance_;
  delete GuildPrayLogCmd_reflection_;
  delete UseSkillLogCmd::default_instance_;
  delete UseSkillLogCmd_reflection_;
  delete ActiveLogCmd::default_instance_;
  delete ActiveLogCmd_reflection_;
  delete TradeLogCmd::default_instance_;
  delete TradeLogCmd_reflection_;
  delete DeleteCharLogCmd::default_instance_;
  delete DeleteCharLogCmd_reflection_;
  delete ComposeLogCmd::default_instance_;
  delete ComposeLogCmd_reflection_;
  delete JumpzoneLogCmd::default_instance_;
  delete JumpzoneLogCmd_reflection_;
  delete TeamLogCmd::default_instance_;
  delete TeamLogCmd_reflection_;
  delete TradeAdjustPriceLogCmd::default_instance_;
  delete TradeAdjustPriceLogCmd_reflection_;
  delete TradePriceLogCmd::default_instance_;
  delete TradePriceLogCmd_reflection_;
  delete PetChangeLogCmd::default_instance_;
  delete PetChangeLogCmd_reflection_;
  delete PetAdventureLogCmd::default_instance_;
  delete PetAdventureLogCmd_reflection_;
  delete InactiveUserLogCmd::default_instance_;
  delete InactiveUserLogCmd_reflection_;
  delete TradeUntakeLogCmd::default_instance_;
  delete TradeUntakeLogCmd_reflection_;
  delete CreditLogCmd::default_instance_;
  delete CreditLogCmd_reflection_;
  delete TradeGiveLogCmd::default_instance_;
  delete TradeGiveLogCmd_reflection_;
  delete QuotaLogCmd::default_instance_;
  delete QuotaLogCmd_reflection_;
  delete GuildItemLogCmd::default_instance_;
  delete GuildItemLogCmd_reflection_;
}

void protobuf_AddDesc_LogCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014LogCmd.proto\022\003Cmd\032\nxCmd.proto\032\017SceneIt"
    "em.proto\"\270\003\n\013LoginLogCmd\022\'\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\014LOG_PROTOCMD\022+\n\005param\030\002 \001(\016"
    "2\r.Cmd.LogParam:\rLOGIN_LOG_CMD\022\013\n\003cid\030\003 "
    "\001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007account"
    "\030\006 \001(\t\022\013\n\003pid\030\007 \001(\004\022\014\n\004time\030\010 \001(\r\022\n\n\002ip\030"
    "\t \001(\t\022\014\n\004type\030\n \001(\r\022\r\n\005ispay\030\013 \001(\r\022\r\n\005le"
    "vel\030\014 \001(\r\022\013\n\003vip\030\r \001(\r\022\014\n\004mark\030\016 \003(\r\022\014\n\004"
    "sign\030\017 \001(\t\022\016\n\006device\030\020 \001(\t\022\r\n\005guest\030\021 \001("
    "\r\022\013\n\003mac\030\022 \001(\t\022\r\n\005agent\030\023 \001(\t\022\r\n\005mapid\030\024"
    " \001(\r\022\022\n\nonlinetime\030\025 \001(\r\022\023\n\013teamtimelen\030"
    "\026 \001(\r\022\r\n\005isnew\030\027 \001(\r\022\r\n\005logid\030\030 \001(\t\022\016\n\006z"
    "oneid\030\031 \001(\r\"\206\002\n\rAccountLogCmd\022\'\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\014LOG_PROTOCMD\022-\n\005param\030"
    "\002 \001(\0162\r.Cmd.LogParam:\017ACCOUNT_LOG_CMD\022\013\n"
    "\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\017\n\007account\030\005 \001(\t"
    "\022\014\n\004time\030\006 \001(\r\022\n\n\002ip\030\007 \001(\t\022\r\n\005guest\030\010 \001("
    "\r\022\016\n\006device\030\t \001(\t\022\013\n\003mac\030\n \001(\t\022\016\n\006source"
    "\030\013 \001(\t\022\r\n\005agent\030\014 \001(\t\022\r\n\005logid\030\r \001(\t\"\320\002\n"
    "\014CreateLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\014LOG_PROTOCMD\022,\n\005param\030\002 \001(\0162\r.Cmd.LogP"
    "aram:\016CREATE_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid"
    "\030\004 \001(\r\022\017\n\007account\030\005 \001(\t\022\013\n\003pid\030\006 \001(\004\022\014\n\004"
    "time\030\007 \001(\r\022\n\n\002ip\030\010 \001(\t\022\014\n\004name\030\t \001(\t\022\r\n\005"
    "guest\030\n \001(\r\022\016\n\006device\030\013 \001(\t\022\013\n\003mac\030\014 \001(\t"
    "\022\016\n\006source\030\r \001(\t\022\r\n\005agent\030\016 \001(\t\022\016\n\006gende"
    "r\030\017 \001(\r\022\014\n\004hair\030\020 \001(\r\022\021\n\thaircolor\030\021 \001(\r"
    "\022\r\n\005logid\030\022 \001(\t\"\352\001\n\020ChangeFlagLogCmd\022\'\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\014LOG_PROTOCMD\0221\n"
    "\005param\030\002 \001(\0162\r.Cmd.LogParam:\023CHANGE_FLAG"
    "_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003pi"
    "d\030\005 \001(\004\022\014\n\004time\030\006 \001(\r\022\014\n\004falg\030\007 \001(\t\022\014\n\004f"
    "rom\030\010 \001(\t\022\n\n\002to\030\t \001(\t\022\016\n\006param1\030\n \001(\004\022\r\n"
    "\005logid\030\013 \001(\t\"\213\003\n\014ChargeLogCmd\022\'\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\014LOG_PROTOCMD\022,\n\005param\030"
    "\002 \001(\0162\r.Cmd.LogParam:\016CHARGE_LOG_CMD\022\013\n\003"
    "cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007a"
    "ccount\030\006 \001(\t\022\013\n\003pid\030\007 \001(\004\022\014\n\004time\030\010 \001(\r\022"
    "\n\n\002ip\030\t \001(\t\022\013\n\003oid\030\n \001(\t\022\014\n\004type\030\013 \001(\t\022\r"
    "\n\005level\030\014 \001(\r\022\016\n\006amount\030\r \001(\002\022\r\n\005coins\030\016"
    " \001(\r\022\014\n\004mark\030\017 \003(\r\022\014\n\004name\030\020 \001(\t\022\016\n\006devi"
    "ce\030\021 \001(\t\022\r\n\005ctime\030\022 \001(\r\022\020\n\010currency\030\023 \001("
    "\t\022\020\n\010provider\030\024 \001(\t\022\016\n\006itemid\030\025 \001(\r\022\r\n\005l"
    "ogid\030\026 \001(\t\"\260\002\n\013EventLogCmd\022\'\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\014LOG_PROTOCMD\022+\n\005param\030\002 \001"
    "(\0162\r.Cmd.LogParam:\rEVENT_LOG_CMD\022\013\n\003cid\030"
    "\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007accou"
    "nt\030\006 \001(\t\022\013\n\003pid\030\007 \001(\004\022\014\n\004time\030\010 \001(\r\022\021\n\tm"
    "icrotime\030\t \001(\001\022\013\n\003eid\030\n \001(\004\022\r\n\005ispay\030\013 \001"
    "(\r\022\014\n\004type\030\014 \001(\r\022\017\n\007subtype\030\r \001(\r\022\r\n\005cou"
    "nt\030\016 \001(\r\022\014\n\004mark\030\017 \003(\r\022\r\n\005logid\030\020 \001(\t\"\342\002"
    "\n\014IncomeLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\014LOG_PROTOCMD\022,\n\005param\030\002 \001(\0162\r.Cmd.Log"
    "Param:\016INCOME_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003si"
    "d\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007account\030\006 \001(\t\022\013\n"
    "\003pid\030\007 \001(\004\022\014\n\004time\030\010 \001(\r\022\021\n\tmicrotime\030\t "
    "\001(\001\022\013\n\003eid\030\n \001(\004\022\r\n\005ispay\030\013 \001(\r\022\r\n\005value"
    "\030\014 \001(\004\022\021\n\tcoin_type\030\r \001(\r\022\014\n\004type\030\016 \001(\r\022"
    "\r\n\005after\030\017 \001(\004\022\014\n\004mark\030\020 \003(\r\022\r\n\005logid\030\021 "
    "\001(\t\022\016\n\006source\030\022 \001(\r\022\r\n\005count\030\023 \001(\r\"\235\003\n\rC"
    "onsumeLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\014LOG_PROTOCMD\022-\n\005param\030\002 \001(\0162\r.Cmd.LogPa"
    "ram:\017CONSUME_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid"
    "\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007account\030\006 \001(\t\022\013\n\003"
    "pid\030\007 \001(\004\022\014\n\004time\030\010 \001(\r\022\021\n\tmicrotime\030\t \001"
    "(\001\022\013\n\003eid\030\n \001(\004\022\r\n\005ispay\030\013 \001(\r\022\r\n\005value\030"
    "\014 \001(\004\022\021\n\tcoin_type\030\r \001(\r\022\014\n\004type\030\016 \001(\r\022\r"
    "\n\005after\030\017 \001(\004\022\014\n\004mark\030\020 \003(\r\022\r\n\005logid\030\021 \001"
    "(\t\022\014\n\004kind\030\022 \001(\r\022\016\n\006source\030\023 \001(\r\022\r\n\005coun"
    "t\030\024 \001(\r\022\023\n\013chargecount\030\025 \001(\004\022\024\n\014remainch"
    "arge\030\026 \001(\004\"\216\003\n\nItemLogCmd\022\'\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\014LOG_PROTOCMD\022*\n\005param\030\002 \001("
    "\0162\r.Cmd.LogParam:\014ITEM_LOG_CMD\022\013\n\003cid\030\003 "
    "\001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007account"
    "\030\006 \001(\t\022\013\n\003pid\030\007 \001(\004\022\013\n\003eid\030\010 \001(\004\022\014\n\004time"
    "\030\t \001(\r\022\021\n\tmicrotime\030\n \001(\001\022\r\n\005logid\030\013 \001(\t"
    "\022\r\n\005ispay\030\014 \001(\r\022\014\n\004type\030\r \001(\r\022\016\n\006itemid\030"
    "\016 \001(\r\022\r\n\005value\030\017 \001(\r\022\020\n\010from_pid\030\020 \001(\004\022\r"
    "\n\005after\030\021 \001(\r\022\016\n\006amount\030\022 \001(\r\022\017\n\007amount2"
    "\030\023 \001(\r\022\014\n\004mark\030\024 \003(\r\022\016\n\006source\030\025 \001(\r\022\r\n\005"
    "count\030\026 \001(\r\"\357\002\n\013PropsLogCmd\022\'\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\014LOG_PROTOCMD\022+\n\005param\030\002 "
    "\001(\0162\r.Cmd.LogParam:\rPROPS_LOG_CMD\022\013\n\003cid"
    "\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007acco"
    "unt\030\006 \001(\t\022\013\n\003pid\030\007 \001(\004\022\013\n\003eid\030\010 \001(\004\022\014\n\004t"
    "ime\030\t \001(\r\022\021\n\tmicrotime\030\n \001(\001\022\r\n\005logid\030\013 "
    "\001(\t\022\r\n\005ispay\030\014 \001(\r\022\016\n\006itemid\030\r \001(\r\022\r\n\005va"
    "lue\030\016 \001(\r\022\014\n\004type\030\017 \001(\r\022\r\n\005after\030\020 \001(\r\022\014"
    "\n\004mark\030\021 \003(\r\022\016\n\006source\030\022 \001(\r\022\r\n\005count\030\023 "
    "\001(\r\022\020\n\010iteminfo\030\024 \001(\t\"\343\002\n\021TransactionLog"
    "Cmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\014LOG_PROT"
    "OCMD\0221\n\005param\030\002 \001(\0162\r.Cmd.LogParam:\023TRAN"
    "SACTION_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001("
    "\r\022\013\n\003hid\030\005 \001(\r\022\024\n\014from_account\030\006 \001(\t\022\020\n\010"
    "from_pid\030\007 \001(\004\022\022\n\nto_account\030\010 \001(\t\022\016\n\006to"
    "_pid\030\t \001(\004\022\013\n\003eid\030\n \001(\004\022\014\n\004time\030\013 \001(\r\022\r\n"
    "\005ispay\030\014 \001(\r\022\016\n\006itemid\030\r \001(\r\022\r\n\005value\030\016 "
    "\001(\r\022\014\n\004mark\030\017 \003(\r\022\013\n\003fee\030\020 \001(\r\022\014\n\004fee2\030\021"
    " \001(\r\022\r\n\005logid\030\022 \001(\t\"\240\003\n\nChatLogCmd\022\'\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\014LOG_PROTOCMD\022*\n\005p"
    "aram\030\002 \001(\0162\r.Cmd.LogParam:\014CHAT_LOG_CMD\022"
    "\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\024"
    "\n\014from_account\030\006 \001(\t\022\021\n\tfrom_name\030\007 \001(\t\022"
    "\020\n\010from_pid\030\010 \001(\004\022\022\n\nto_account\030\t \001(\t\022\017\n"
    "\007to_name\030\n \001(\t\022\016\n\006to_pid\030\013 \001(\004\022\014\n\004type\030\014"
    " \001(\r\022\014\n\004time\030\r \001(\r\022\r\n\005ispay\030\016 \001(\r\022\017\n\007con"
    "tent\030\017 \001(\t\022\013\n\003vip\030\020 \001(\r\022\r\n\005level\030\021 \001(\r\022\013"
    "\n\003eid\030\022 \001(\004\022 \n\010chattype\030\023 \001(\0162\016.Cmd.ECha"
    "tType\022\020\n\010voicelen\030\024 \001(\r\022\r\n\005logid\030\025 \001(\t\"\234"
    "\002\n\013LevelLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\014LOG_PROTOCMD\022+\n\005param\030\002 \001(\0162\r.Cmd.Log"
    "Param:\rLEVEL_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid"
    "\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007account\030\006 \001(\t\022\013\n\003"
    "pid\030\007 \001(\004\022\014\n\004time\030\010 \001(\r\022\014\n\004from\030\t \001(\r\022\n\n"
    "\002to\030\n \001(\r\022\r\n\005ispay\030\013 \001(\r\022\014\n\004type\030\014 \001(\r\022\014"
    "\n\004mark\030\r \003(\r\022\r\n\005logid\030\016 \001(\t\022\020\n\010costtime\030"
    "\017 \001(\r\"\222\002\n\014OnlineLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\014LOG_PROTOCMD\022,\n\005param\030\002 \001(\0162\r"
    ".Cmd.LogParam:\016ONLINE_LOG_CMD\022\013\n\003cid\030\003 \001"
    "(\r\022\013\n\003sid\030\004 \001(\r\022\014\n\004time\030\005 \001(\r\022\021\n\tcount_a"
    "ll\030\006 \001(\r\022\021\n\tcount_web\030\007 \001(\r\022\024\n\014count_cli"
    "ent\030\010 \001(\r\022\021\n\tcount_ios\030\t \001(\r\022\025\n\rcount_an"
    "droid\030\n \001(\r\022\r\n\005logid\030\013 \001(\t\022\016\n\006lineid\030\014 \001"
    "(\r\"\020\n\016SnapshotLogCmd\"\303\002\n\020CheckpointLogCm"
    "d\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\014LOG_PROTOC"
    "MD\0220\n\005param\030\002 \001(\0162\r.Cmd.LogParam:\022CHECKP"
    "OINT_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013"
    "\n\003hid\030\005 \001(\r\022\017\n\007account\030\006 \001(\t\022\013\n\003pid\030\007 \001("
    "\004\022\013\n\003eid\030\010 \001(\004\022\014\n\004time\030\t \001(\r\022\014\n\004type\030\n \001"
    "(\r\022\014\n\004cpid\030\013 \001(\r\022\016\n\006result\030\014 \001(\r\022\014\n\004star"
    "\030\r \001(\r\022\r\n\005ispay\030\016 \001(\r\022\013\n\003vip\030\017 \001(\r\022\r\n\005lo"
    "gid\030\020 \001(\t\022\017\n\007isfirst\030\021 \001(\r\"\335\001\n\nRankLogCm"
    "d\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\014LOG_PROTOC"
    "MD\022*\n\005param\030\002 \001(\0162\r.Cmd.LogParam:\014RANK_L"
    "OG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030"
    "\005 \001(\r\022\014\n\004type\030\006 \001(\r\022\013\n\003pid\030\007 \001(\004\022\r\n\005valu"
    "e\030\010 \001(\r\022\014\n\004date\030\t \001(\r\022\014\n\004time\030\n \001(\r\022\r\n\005l"
    "ogid\030\013 \001(\t\"a\n\016ChatSearchCond\022\013\n\003who\030\001 \001("
    "\004\022\020\n\010fromtime\030\002 \001(\r\022\016\n\006totime\030\003 \001(\r\022 \n\010c"
    "hattype\030\004 \001(\0162\016.Cmd.EChatType\"\207\001\n\nChatLo"
    "gRes\022\016\n\006sendid\030\001 \001(\004\022\020\n\010sendname\030\002 \001(\t\022\016"
    "\n\006recvid\030\003 \001(\004\022\020\n\010recvname\030\004 \001(\t\022\022\n\ncrea"
    "tetime\030\005 \001(\r\022\017\n\007content\030\006 \001(\t\022\020\n\010voicele"
    "n\030\007 \001(\r\"\255\001\n\017QueryChatLogCmd\022\'\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\014LOG_PROTOCMD\0220\n\005param\030\002 "
    "\001(\0162\r.Cmd.LogParam:\022QUERY_CHAT_LOG_CMD\022!"
    "\n\004cond\030\003 \001(\0132\023.Cmd.ChatSearchCond\022\034\n\003res"
    "\030\004 \003(\0132\017.Cmd.ChatLogRes\"\270\002\n\014ChangeLogCmd"
    "\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\014LOG_PROTOCM"
    "D\022,\n\005param\030\002 \001(\0162\r.Cmd.LogParam:\016CHANGE_"
    "LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid"
    "\030\005 \001(\r\022\017\n\007account\030\006 \001(\t\022\013\n\003pid\030\007 \001(\004\022\r\n\005"
    "ispay\030\010 \001(\r\022\014\n\004time\030\t \001(\r\022\013\n\003eid\030\n \001(\004\022\r"
    "\n\005etype\030\013 \001(\r\022\014\n\004flag\030\014 \001(\r\022\014\n\004from\030\r \001("
    "\t\022\n\n\002to\030\016 \001(\t\022\016\n\006param1\030\017 \001(\004\022\014\n\004mark\030\020 "
    "\003(\r\022\r\n\005logid\030\021 \001(\t\"\352\003\n\013EquipLogCmd\022\'\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\014LOG_PROTOCMD\022+\n\005p"
    "aram\030\002 \001(\0162\r.Cmd.LogParam:\rEQUIP_LOG_CMD"
    "\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022"
    "\017\n\007account\030\006 \001(\t\022\013\n\003pid\030\007 \001(\004\022\r\n\005ispay\030\010"
    " \001(\r\022\014\n\004time\030\t \001(\r\022\013\n\003eid\030\n \001(\004\022\r\n\005etype"
    "\030\013 \001(\r\022\014\n\004type\030\014 \001(\r\022\023\n\013old_equipid\030\r \001("
    "\r\022\024\n\014old_equipgid\030\016 \001(\t\022\026\n\016old_strengthl"
    "v\030\017 \001(\r\022\024\n\014old_refinelv\030\020 \001(\r\022\024\n\014old_isd"
    "amage\030\021 \001(\005\022\023\n\013new_equipid\030\022 \001(\r\022\024\n\014new_"
    "equipgid\030\023 \001(\t\022\026\n\016new_strengthlv\030\024 \001(\r\022\024"
    "\n\014new_refinelv\030\025 \001(\r\022\024\n\014new_isdamage\030\026 \001"
    "(\005\022\014\n\004mark\030\027 \003(\r\022\r\n\005logid\030\030 \001(\t\"\360\002\n\nCard"
    "LogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\014LOG_P"
    "ROTOCMD\022*\n\005param\030\002 \001(\0162\r.Cmd.LogParam:\014C"
    "ARD_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n"
    "\003hid\030\005 \001(\r\022\017\n\007account\030\006 \001(\t\022\013\n\003pid\030\007 \001(\004"
    "\022\r\n\005ispay\030\010 \001(\r\022\014\n\004time\030\t \001(\r\022\013\n\003eid\030\n \001"
    "(\004\022\r\n\005etype\030\013 \001(\r\022\017\n\007equipid\030\r \001(\r\022\020\n\010eq"
    "uipgid\030\016 \001(\t\022\014\n\004type\030\017 \001(\r\022\016\n\006cardid\030\020 \001"
    "(\r\022\017\n\007cardgid\030\021 \001(\t\022\017\n\007useslot\030\022 \001(\r\022\017\n\007"
    "maxslot\030\023 \001(\r\022\014\n\004mark\030\024 \003(\r\022\r\n\005logid\030\025 \001"
    "(\t\"\254\003\n\rEquipUpLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\014LOG_PROTOCMD\022-\n\005param\030\002 \001(\0162\r.C"
    "md.LogParam:\017EQUIPUP_LOG_CMD\022\013\n\003cid\030\003 \001("
    "\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007account\030\006"
    " \001(\t\022\013\n\003pid\030\007 \001(\004\022\r\n\005ispay\030\010 \001(\r\022\014\n\004time"
    "\030\t \001(\r\022\013\n\003eid\030\n \001(\004\022\r\n\005etype\030\013 \001(\r\022\014\n\004ty"
    "pe\030\014 \001(\r\022\017\n\007equipid\030\r \001(\r\022\021\n\tequipguid\030\016"
    " \001(\t\022\r\n\005count\030\017 \001(\r\022\016\n\006old_lv\030\020 \001(\r\022\016\n\006n"
    "ew_lv\030\021 \001(\r\022\016\n\006isfail\030\022 \001(\005\022\022\n\ncost_mone"
    "y\030\023 \001(\t\022\021\n\tcost_item\030\024 \001(\t\022\020\n\010isdamage\030\025"
    " \001(\005\022\014\n\004mark\030\026 \003(\r\022\r\n\005logid\030\027 \001(\t\"\315\002\n\014So"
    "cailLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\014L"
    "OG_PROTOCMD\022,\n\005param\030\002 \001(\0162\r.Cmd.LogPara"
    "m:\016SOCIAL_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 "
    "\001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007account\030\006 \001(\t\022\013\n\003pid"
    "\030\007 \001(\004\022\r\n\005ispay\030\010 \001(\r\022\014\n\004time\030\t \001(\r\022\013\n\003e"
    "id\030\n \001(\004\022\r\n\005etype\030\013 \001(\r\022\014\n\004type\030\014 \001(\r\022\014\n"
    "\004inid\030\r \001(\004\022\017\n\007otherid\030\016 \001(\004\022\016\n\006param1\030\017"
    " \001(\004\022\016\n\006param2\030\020 \001(\004\022\014\n\004mark\030\022 \003(\r\022\r\n\005lo"
    "gid\030\023 \001(\t\"\203\003\n\013QuestLogCmd\022\'\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\014LOG_PROTOCMD\022+\n\005param\030\002 \001("
    "\0162\r.Cmd.LogParam:\rQUEST_LOG_CMD\022\013\n\003cid\030\003"
    " \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007accoun"
    "t\030\006 \001(\t\022\013\n\003pid\030\007 \001(\004\022\r\n\005ispay\030\010 \001(\r\022\014\n\004t"
    "ime\030\t \001(\r\022\013\n\003eid\030\n \001(\004\022\r\n\005etype\030\013 \001(\r\022\017\n"
    "\007questid\030\014 \001(\004\022\014\n\004type\030\r \001(\r\022\020\n\010targetid"
    "\030\016 \001(\004\022\017\n\007baseexp\030\017 \001(\r\022\016\n\006jobexp\030\020 \001(\r\022"
    "\022\n\nrewarditem\030\021 \001(\t\022\r\n\005level\030\022 \001(\r\022\014\n\004ma"
    "rk\030\023 \003(\r\022\r\n\005logid\030\024 \001(\t\022\016\n\006lineid\030\025 \001(\r\""
    "\270\002\n\014ManualLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\014LOG_PROTOCMD\022,\n\005param\030\002 \001(\0162\r.Cmd.L"
    "ogParam:\016MANUAL_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003"
    "sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007account\030\006 \001(\t\022"
    "\013\n\003pid\030\007 \001(\004\022\r\n\005ispay\030\010 \001(\r\022\014\n\004time\030\t \001("
    "\r\022\013\n\003eid\030\n \001(\004\022\r\n\005etype\030\013 \001(\r\022\014\n\004type\030\014 "
    "\001(\r\022\n\n\002by\030\r \001(\r\022\014\n\004what\030\016 \001(\004\022\016\n\006param1\030"
    "\017 \001(\004\022\014\n\004mark\030\022 \003(\r\022\r\n\005logid\030\023 \001(\t\"\363\002\n\016C"
    "ompleteLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\014LOG_PROTOCMD\022.\n\005param\030\002 \001(\0162\r.Cmd.LogP"
    "aram:\020COMPLETE_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003s"
    "id\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007account\030\006 \001(\t\022\013"
    "\n\003pid\030\007 \001(\004\022\r\n\005ispay\030\010 \001(\r\022\014\n\004time\030\t \001(\r"
    "\022\013\n\003eid\030\n \001(\004\022\r\n\005etype\030\013 \001(\r\022\014\n\004type\030\014 \001"
    "(\r\022\020\n\010targetid\030\r \001(\004\022\023\n\013today_count\030\016 \001("
    "\r\022\023\n\013reward_type\030\017 \001(\r\022\024\n\014reward_count\030\020"
    " \001(\r\022\r\n\005level\030\021 \001(\r\022\014\n\004mark\030\022 \003(\r\022\r\n\005log"
    "id\030\023 \001(\t\"\317\002\n\013TowerLogCmd\022\'\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\014LOG_PROTOCMD\022+\n\005param\030\002 \001(\016"
    "2\r.Cmd.LogParam:\rTOWER_LOG_CMD\022\013\n\003cid\030\003 "
    "\001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007account"
    "\030\006 \001(\t\022\013\n\003pid\030\007 \001(\004\022\r\n\005ispay\030\010 \001(\r\022\014\n\004ti"
    "me\030\t \001(\r\022\013\n\003eid\030\n \001(\004\022\r\n\005etype\030\013 \001(\r\022\014\n\004"
    "type\030\014 \001(\r\022\020\n\010curLayer\030\r \001(\r\022\020\n\010maxLayer"
    "\030\016 \001(\r\022\016\n\006teamId\030\017 \001(\004\022\r\n\005level\030\020 \001(\r\022\014\n"
    "\004mark\030\022 \003(\r\022\r\n\005logid\030\023 \001(\t\"\261\002\n\016ItemOperL"
    "ogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\014LOG_PR"
    "OTOCMD\022.\n\005param\030\002 \001(\0162\r.Cmd.LogParam:\020IT"
    "EMOPER_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r"
    "\022\013\n\003hid\030\005 \001(\r\022\017\n\007account\030\006 \001(\t\022\013\n\003pid\030\007 "
    "\001(\004\022\r\n\005ispay\030\010 \001(\r\022\014\n\004time\030\t \001(\r\022\013\n\003eid\030"
    "\n \001(\004\022\r\n\005etype\030\013 \001(\r\022\014\n\004type\030\014 \001(\r\022\016\n\006it"
    "emid\030\r \001(\r\022\r\n\005count\030\016 \001(\r\022\014\n\004mark\030\017 \003(\r\022"
    "\r\n\005logid\030\020 \001(\t\"\250\003\n\nKillLogCmd\022\'\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\014LOG_PROTOCMD\022*\n\005param\030"
    "\002 \001(\0162\r.Cmd.LogParam:\014KILL_LOG_CMD\022\013\n\003ci"
    "d\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007acc"
    "ount\030\006 \001(\t\022\013\n\003pid\030\007 \001(\004\022\r\n\005ispay\030\010 \001(\r\022\014"
    "\n\004time\030\t \001(\r\022\013\n\003eid\030\n \001(\004\022\r\n\005etype\030\013 \001(\r"
    "\022\021\n\tmonsterid\030\014 \001(\r\022\022\n\nmonstergid\030\r \001(\004\022"
    "\024\n\014monstergroup\030\016 \001(\r\022\017\n\007baseexp\030\017 \001(\r\022\016"
    "\n\006jobexp\030\020 \001(\r\022\r\n\005ismvp\030\021 \001(\005\022\014\n\004mark\030\022 "
    "\003(\r\022\014\n\004type\030\023 \001(\r\022\r\n\005level\030\024 \001(\r\022\020\n\010kill"
    "type\030\025 \001(\r\022\r\n\005logid\030\026 \001(\t\022\016\n\006lineid\030\027 \001("
    "\r\"\264\002\n\014RewardLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\014LOG_PROTOCMD\022,\n\005param\030\002 \001(\0162\r.Cmd"
    ".LogParam:\016REWARD_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013"
    "\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007account\030\006 \001("
    "\t\022\013\n\003pid\030\007 \001(\004\022\r\n\005ispay\030\010 \001(\r\022\014\n\004time\030\t "
    "\001(\r\022\013\n\003eid\030\n \001(\004\022\r\n\005etype\030\013 \001(\r\022\n\n\002id\030\014 "
    "\001(\r\022\022\n\nprofession\030\r \001(\r\022\022\n\nrewarditem\030\016 "
    "\001(\t\022\014\n\004mark\030\017 \003(\r\022\r\n\005logid\030\020 \001(\t\"\314\002\n\nMai"
    "lLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\014LOG_"
    "PROTOCMD\022*\n\005param\030\002 \001(\0162\r.Cmd.LogParam:\014"
    "MAIL_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013"
    "\n\003hid\030\005 \001(\r\022\017\n\007account\030\006 \001(\t\022\013\n\003pid\030\007 \001("
    "\004\022\r\n\005ispay\030\010 \001(\r\022\014\n\004time\030\t \001(\r\022\013\n\003eid\030\n "
    "\001(\004\022\r\n\005etype\030\013 \001(\r\022\n\n\002id\030\014 \001(\004\022\r\n\005sysid\030"
    "\r \001(\004\022\020\n\010mailtype\030\016 \001(\r\022\r\n\005title\030\017 \001(\t\022\022"
    "\n\nrewarditem\030\020 \001(\t\022\014\n\004mark\030\021 \003(\r\022\r\n\005logi"
    "d\030\022 \001(\t\"\274\002\n\nDojoLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\014LOG_PROTOCMD\022*\n\005param\030\002 \001(\0162\r"
    ".Cmd.LogParam:\014DOJO_LOG_CMD\022\013\n\003cid\030\003 \001(\r"
    "\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007account\030\006 "
    "\001(\t\022\013\n\003pid\030\007 \001(\004\022\r\n\005ispay\030\010 \001(\r\022\014\n\004time\030"
    "\t \001(\r\022\013\n\003eid\030\n \001(\004\022\r\n\005etype\030\013 \001(\r\022\016\n\006doj"
    "oid\030\014 \001(\r\022\r\n\005mapid\030\r \001(\r\022\020\n\010passtype\030\016 \001"
    "(\r\022\r\n\005level\030\017 \001(\r\022\014\n\004mark\030\020 \003(\r\022\r\n\005logid"
    "\030\021 \001(\t\"\276\003\n\rEnchantLogCmd\022\'\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\014LOG_PROTOCMD\022-\n\005param\030\002 \001(\016"
    "2\r.Cmd.LogParam:\017ENCHANT_LOG_CMD\022\013\n\003cid\030"
    "\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007accou"
    "nt\030\006 \001(\t\022\013\n\003pid\030\007 \001(\004\022\r\n\005ispay\030\010 \001(\r\022\014\n\004"
    "time\030\t \001(\r\022\013\n\003eid\030\n \001(\004\022\r\n\005etype\030\013 \001(\r\022\021"
    "\n\tequipguid\030\014 \001(\t\022\016\n\006itemid\030\027 \001(\r\022\023\n\013enc"
    "hanttype\030\r \001(\r\022\017\n\007oldattr\030\016 \001(\t\022\017\n\007newat"
    "tr\030\017 \001(\t\022\020\n\010oldbufid\030\020 \001(\t\022\020\n\010newbufid\030\021"
    " \001(\t\022\022\n\ncostitemid\030\022 \001(\r\022\025\n\rcostitemcoun"
    "t\030\023 \001(\r\022\021\n\tcostmoney\030\024 \001(\r\022\014\n\004mark\030\025 \003(\r"
    "\022\r\n\005logid\030\026 \001(\t\"\335\002\n\017GuildPrayLogCmd\022\'\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\014LOG_PROTOCMD\022/\n\005"
    "param\030\002 \001(\0162\r.Cmd.LogParam:\021GUILDPRAY_LO"
    "G_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005"
    " \001(\r\022\017\n\007account\030\006 \001(\t\022\013\n\003pid\030\007 \001(\004\022\r\n\005is"
    "pay\030\010 \001(\r\022\014\n\004time\030\t \001(\r\022\013\n\003eid\030\n \001(\004\022\r\n\005"
    "etype\030\013 \001(\r\022\016\n\006prayid\030\014 \001(\r\022\017\n\007addattr\030\r"
    " \001(\r\022\020\n\010costitem\030\016 \001(\r\022\021\n\tcostmoney\030\017 \001("
    "\r\022\017\n\007costcon\030\020 \001(\r\022\014\n\004mark\030\021 \003(\r\022\r\n\005logi"
    "d\030\022 \001(\t\"\207\002\n\016UseSkillLogCmd\022\'\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\014LOG_PROTOCMD\022.\n\005param\030\002 \001"
    "(\0162\r.Cmd.LogParam:\020USESKILL_LOG_CMD\022\013\n\003c"
    "id\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022\017\n\007ac"
    "count\030\006 \001(\t\022\013\n\003pid\030\007 \001(\004\022\r\n\005ispay\030\010 \001(\r\022"
    "\014\n\004time\030\t \001(\r\022\013\n\003eid\030\n \001(\004\022\r\n\005etype\030\013 \001("
    "\r\022\017\n\007skillid\030\014 \001(\r\022\r\n\005logid\030\r \001(\t\"\263\001\n\014Ac"
    "tiveLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\014L"
    "OG_PROTOCMD\022,\n\005param\030\002 \001(\0162\r.Cmd.LogPara"
    "m:\016ACTIVE_LOG_CMD\022\017\n\007channel\030\003 \001(\t\022\r\n\005cd"
    "key\030\004 \001(\t\022\017\n\007account\030\005 \001(\t\022\014\n\004time\030\006 \001(\r"
    "\022\r\n\005logid\030\007 \001(\t\"\323\002\n\013TradeLogCmd\022\'\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\014LOG_PROTOCMD\022+\n\005para"
    "m\030\002 \001(\0162\r.Cmd.LogParam:\rTRADE_LOG_CMD\022\013\n"
    "\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003pid\030\005 \001(\004\022\014\n\004"
    "time\030\006 \001(\r\022\014\n\004type\030\007 \001(\r\022\016\n\006itemid\030\010 \001(\r"
    "\022\r\n\005count\030\t \001(\r\022\r\n\005price\030\n \001(\r\022\013\n\003tax\030\013 "
    "\001(\r\022\022\n\nmoneycount\030\014 \001(\r\022\020\n\010iteminfo\030\r \001("
    "\t\022\017\n\007otherid\030\016 \001(\004\022\r\n\005logid\030\017 \001(\t\022\022\n\nstr"
    "otherid\030\020 \001(\t\022\026\n\013spend_quota\030\021 \001(\004:\0010\"\337\001"
    "\n\020DeleteCharLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\014LOG_PROTOCMD\0221\n\005param\030\002 \001(\0162\r.Cmd"
    ".LogParam:\023DELETE_CHAR_LOG_CMD\022\013\n\003cid\030\003 "
    "\001(\r\022\013\n\003sid\030\004 \001(\r\022\017\n\007account\030\005 \001(\t\022\013\n\003pid"
    "\030\006 \001(\004\022\014\n\004time\030\007 \001(\r\022\013\n\003eid\030\010 \001(\004\022\r\n\005ety"
    "pe\030\t \001(\r\022\r\n\005logid\030\n \001(\t\"\210\002\n\rComposeLogCm"
    "d\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\014LOG_PROTOC"
    "MD\022-\n\005param\030\002 \001(\0162\r.Cmd.LogParam:\017COMPOS"
    "E_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\017\n\007a"
    "ccount\030\005 \001(\t\022\013\n\003pid\030\006 \001(\004\022\014\n\004time\030\007 \001(\r\022"
    "\013\n\003eid\030\010 \001(\004\022\r\n\005etype\030\t \001(\r\022\016\n\006itemid\030\n "
    "\001(\r\022\020\n\010itemguid\030\013 \001(\t\022\014\n\004cost\030\014 \001(\t\022\r\n\005l"
    "ogid\030\r \001(\t\"\237\002\n\016JumpzoneLogCmd\022\'\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\014LOG_PROTOCMD\022.\n\005param\030"
    "\002 \001(\0162\r.Cmd.LogParam:\020JUMPZONE_LOG_CMD\022\013"
    "\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\017\n\007account\030\005 \001("
    "\t\022\013\n\003pid\030\006 \001(\004\022\014\n\004time\030\007 \001(\r\022\013\n\003eid\030\010 \001("
    "\004\022\r\n\005etype\030\t \001(\r\022\021\n\toldzoneid\030\n \001(\r\022\021\n\tn"
    "ewzoneid\030\013 \001(\r\022\017\n\007isfirst\030\014 \001(\r\022\014\n\004cost\030"
    "\r \001(\t\022\r\n\005logid\030\016 \001(\t\"\215\002\n\nTeamLogCmd\022\'\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\014LOG_PROTOCMD\022*\n\005"
    "param\030\002 \001(\0162\r.Cmd.LogParam:\014TEAM_LOG_CMD"
    "\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003hid\030\005 \001(\r\022"
    "\017\n\007account\030\006 \001(\t\022\013\n\003pid\030\007 \001(\004\022\r\n\005ispay\030\010"
    " \001(\r\022\014\n\004time\030\t \001(\r\022\013\n\003eid\030\n \001(\004\022\r\n\005etype"
    "\030\013 \001(\r\022\014\n\004inid\030\014 \001(\004\022\017\n\007otherid\030\r \001(\004\022\r\n"
    "\005logid\030\016 \001(\t\"\263\003\n\026TradeAdjustPriceLogCmd\022"
    "\'\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\014LOG_PROTOCMD"
    "\0228\n\005param\030\002 \001(\0162\r.Cmd.LogParam:\032TRADE_AD"
    "JUST_PRICE_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004"
    " \001(\r\022\013\n\003pid\030\005 \001(\004\022\014\n\004time\030\006 \001(\r\022\017\n\007item_"
    "id\030\007 \001(\r\022\t\n\001t\030\010 \001(\r\022\t\n\001k\030\t \001(\r\022\022\n\nsold_c"
    "ount\030\n \001(\r\022\n\n\002kt\030\013 \001(\r\022\n\n\002qk\030\014 \001(\r\022\t\n\001r\030"
    "\r \001(\002\022\020\n\010up_ratio\030\016 \001(\002\022\022\n\ndown_ratio\030\017 "
    "\001(\002\022\021\n\tnew_price\030\020 \001(\002\022\021\n\told_price\030\021 \001("
    "\002\022\021\n\tlast_time\030\022 \001(\r\022!\n\006status\030\023 \001(\0162\021.C"
    "md.EPriceStatus\022\r\n\005logid\030\024 \001(\t\022\022\n\nreal_p"
    "rice\030\025 \001(\r\"\335\001\n\020TradePriceLogCmd\022\'\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\014LOG_PROTOCMD\0221\n\005para"
    "m\030\002 \001(\0162\r.Cmd.LogParam:\023TRADE_PRICE_LOG_"
    "CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003pid\030\005 \001"
    "(\004\022\014\n\004time\030\006 \001(\r\022\017\n\007item_id\030\007 \001(\r\022\t\n\001k\030\010"
    " \001(\r\022\r\n\005price\030\t \001(\002\022\r\n\005logid\030\n \001(\t\"\353\002\n\017P"
    "etChangeLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\014LOG_PROTOCMD\0220\n\005param\030\002 \001(\0162\r.Cmd.Log"
    "Param:\022PET_CHANGE_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013"
    "\n\003sid\030\004 \001(\r\022\017\n\007account\030\020 \001(\t\022\013\n\003pid\030\005 \001("
    "\004\022\014\n\004time\030\006 \001(\r\022\013\n\003eid\030\007 \001(\004\022\r\n\005etype\030\010 "
    "\001(\r\022!\n\004type\030\t \001(\0162\023.Cmd.EPetChangeType\022\021"
    "\n\tmonsterid\030\n \001(\r\022\014\n\004name\030\013 \001(\t\022\016\n\006befor"
    "e\030\014 \001(\r\022\r\n\005after\030\r \001(\r\022\024\n\014skill_before\030\016"
    " \001(\t\022\023\n\013skill_after\030\017 \001(\t\022\r\n\005logid\030\021 \001(\t"
    "\"\265\002\n\022PetAdventureLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\014LOG_PROTOCMD\0223\n\005param\030\002 \001(\0162"
    "\r.Cmd.LogParam:\025PET_ADVENTURE_LOG_CMD\022\013\n"
    "\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\017\n\007account\030\r \001(\t"
    "\022\013\n\003pid\030\005 \001(\004\022\014\n\004time\030\006 \001(\r\022\013\n\003eid\030\007 \001(\004"
    "\022\r\n\005etype\030\010 \001(\r\022\'\n\004type\030\t \001(\0162\031.Cmd.EPet"
    "AdventureLogType\022\n\n\002id\030\n \001(\r\022\r\n\005names\030\013 "
    "\001(\t\022\014\n\004cond\030\014 \001(\r\022\r\n\005logid\030\016 \001(\t\"\315\002\n\022Ina"
    "ctiveUserLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\014LOG_PROTOCMD\0223\n\005param\030\002 \001(\0162\r.Cmd.Lo"
    "gParam:\025INACTIVE_USER_LOG_CMD\022\013\n\003cid\030\003 \001"
    "(\r\022\013\n\003sid\030\004 \001(\r\022\017\n\007account\030\005 \001(\t\022\013\n\003pid\030"
    "\006 \001(\004\022\014\n\004time\030\007 \001(\r\022\014\n\004name\030\010 \001(\t\022\013\n\003job"
    "\030\t \001(\r\022\r\n\005level\030\n \001(\r\022\021\n\tleft_zeny\030\013 \001(\004"
    "\022\r\n\005mapid\030\014 \001(\r\022\023\n\013create_time\030\016 \001(\r\022\022\n\n"
    "send_count\030\017 \001(\r\022\r\n\005logid\030\020 \001(\t\022\017\n\007guild"
    "id\030\021 \001(\004\"\343\001\n\021TradeUntakeLogCmd\022\'\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\014LOG_PROTOCMD\0222\n\005param"
    "\030\002 \001(\0162\r.Cmd.LogParam:\024TRADE_UNTAKE_LOG_"
    "CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003pid\030\005 \001"
    "(\004\022\014\n\004time\030\006 \001(\r\022\014\n\004name\030\007 \001(\t\022\014\n\004zeny\030\010"
    " \001(\004\022\021\n\tguildname\030\t \001(\t\022\r\n\005logid\030\013 \001(\t\"\366"
    "\001\n\014CreditLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\014LOG_PROTOCMD\022,\n\005param\030\002 \001(\0162\r.Cmd.Lo"
    "gParam:\016CREDIT_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003s"
    "id\030\004 \001(\r\022\013\n\003pid\030\005 \001(\004\022\014\n\004time\030\006 \001(\r\022\014\n\004n"
    "ame\030\007 \001(\t\022\036\n\004type\030\010 \001(\0162\020.Cmd.ECreditTyp"
    "e\022\016\n\006before\030\t \001(\004\022\r\n\005after\030\n \001(\004\022\r\n\005logi"
    "d\030\013 \001(\t\"\375\002\n\017TradeGiveLogCmd\022\'\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\014LOG_PROTOCMD\0220\n\005param\030\002 "
    "\001(\0162\r.Cmd.LogParam:\022TRADE_GIVE_LOG_CMD\022\013"
    "\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003pid\030\005 \001(\004\022\014\n"
    "\004time\030\006 \001(\r\022\036\n\005event\030\007 \001(\0162\017.Cmd.EGiveEv"
    "ent\022\016\n\006itemid\030\010 \001(\r\022\r\n\005quota\030\t \001(\004\022\020\n\010it"
    "eminfo\030\n \001(\t\022\017\n\007otherid\030\013 \001(\004\022\r\n\005logid\030\014"
    " \001(\t\022\014\n\004name\030\r \001(\t\022\021\n\tothername\030\016 \001(\t\022\020\n"
    "\010givetime\030\017 \001(\r\022#\n\010givetype\030\020 \001(\0162\021.Cmd."
    "ELogGiveType\022\021\n\titemcount\030\021 \001(\r\"\257\002\n\013Quot"
    "aLogCmd\022\'\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\014LOG_"
    "PROTOCMD\022+\n\005param\030\002 \001(\0162\r.Cmd.LogParam:\r"
    "QUOTA_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022"
    "\017\n\007account\030\005 \001(\t\022\013\n\003pid\030\006 \001(\004\022\014\n\004time\030\007 "
    "\001(\r\022\r\n\005logid\030\010 \001(\t\022#\n\007opttype\030\t \001(\0162\022.Cm"
    "d.EQuotaOptType\022\"\n\tquotatype\030\n \001(\0162\017.Cmd"
    ".EQuotaType\022\017\n\007changed\030\013 \001(\004\022\r\n\005quota\030\014 "
    "\001(\004\022\014\n\004lock\030\r \001(\004\"\356\001\n\017GuildItemLogCmd\022\'\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\014LOG_PROTOCMD\0220"
    "\n\005param\030\002 \001(\0162\r.Cmd.LogParam:\022GUILD_ITEM"
    "_LOG_CMD\022\013\n\003cid\030\003 \001(\r\022\013\n\003sid\030\004 \001(\r\022\013\n\003gi"
    "d\030\005 \001(\004\022\014\n\004time\030\006 \001(\r\022\r\n\005logid\030\007 \001(\t\022\016\n\006"
    "itemid\030\010 \001(\r\022\017\n\007changed\030\t \001(\003\022\r\n\005count\030\n"
    " \001(\r\022\014\n\004type\030\013 \001(\r*\352\010\n\010LogParam\022\021\n\rLOGIN"
    "_LOG_CMD\020\001\022\023\n\017ACCOUNT_LOG_CMD\020\002\022\022\n\016CREAT"
    "E_LOG_CMD\020\003\022\027\n\023CHANGE_FLAG_LOG_CMD\020\004\022\022\n\016"
    "CHARGE_LOG_CMD\020\005\022\021\n\rEVENT_LOG_CMD\020\006\022\022\n\016I"
    "NCOME_LOG_CMD\020\007\022\023\n\017CONSUME_LOG_CMD\020\010\022\020\n\014"
    "ITEM_LOG_CMD\020\t\022\021\n\rPROPS_LOG_CMD\020\n\022\027\n\023TRA"
    "NSACTION_LOG_CMD\020\013\022\020\n\014CHAT_LOG_CMD\020\014\022\021\n\r"
    "LEVEL_LOG_CMD\020\r\022\022\n\016ONLINE_LOG_CMD\020\016\022\024\n\020S"
    "NAPSHOT_LOG_CMD\020\017\022\026\n\022CHECKPOINT_LOG_CMD\020"
    "\020\022\020\n\014RANK_LOG_CMD\020\021\022\026\n\022QUERY_CHAT_LOG_CM"
    "D\020\022\022\020\n\014CARD_LOG_CMD\020\036\022\021\n\rEQUIP_LOG_CMD\020\037"
    "\022\020\n\014HAND_LOG_CMD\020 \022\022\n\016SOCIAL_LOG_CMD\020!\022\021"
    "\n\rQUEST_LOG_CMD\020\"\022\024\n\020COMPLETE_LOG_CMD\020#\022"
    "\017\n\013BUY_LOG_CMD\020$\022\022\n\016MANUAL_LOG_CMD\020%\022\020\n\014"
    "KILL_LOG_CMD\020&\022\022\n\016CHANGE_LOG_CMD\020\'\022\024\n\020IT"
    "EMOPER_LOG_CMD\020(\022\023\n\017EQUIPUP_LOG_CMD\020)\022\021\n"
    "\rTOWER_LOG_CMD\020*\022\022\n\016REWARD_LOG_CMD\020+\022\020\n\014"
    "MAIL_LOG_CMD\020,\022\020\n\014DOJO_LOG_CMD\020-\022\023\n\017ENCH"
    "ANT_LOG_CMD\020.\022\025\n\021GUILDPRAY_LOG_CMD\020/\022\024\n\020"
    "USESKILL_LOG_CMD\0200\022\022\n\016ACTIVE_LOG_CMD\0201\022\021"
    "\n\rTRADE_LOG_CMD\0202\022\027\n\023DELETE_CHAR_LOG_CMD"
    "\0203\022\023\n\017COMPOSE_LOG_CMD\0204\022\024\n\020JUMPZONE_LOG_"
    "CMD\0205\022\020\n\014TEAM_LOG_CMD\0206\022\036\n\032TRADE_ADJUST_"
    "PRICE_LOG_CMD\0207\022\027\n\023TRADE_PRICE_LOG_CMD\0208"
    "\022\026\n\022PET_CHANGE_LOG_CMD\0209\022\031\n\025PET_ADVENTUR"
    "E_LOG_CMD\020:\022\031\n\025INACTIVE_USER_LOG_CMD\020<\022\030"
    "\n\024TRADE_UNTAKE_LOG_CMD\020;\022\022\n\016CREDIT_LOG_C"
    "MD\020=\022\026\n\022TRADE_GIVE_LOG_CMD\020>\022\021\n\rQUOTA_LO"
    "G_CMD\020\?\022\026\n\022GUILD_ITEM_LOG_CMD\020@*3\n\tEChat"
    "Type\022\021\n\rECHATTYPE_STR\020\000\022\023\n\017ECHATTYPE_VOI"
    "CE\020\001*\243\001\n\014EPriceStatus\022\031\n\025EPriceStatus_No"
    "Change\020\000\022\023\n\017EPriceStatus_Up\020\001\022\025\n\021EPriceS"
    "tatus_Down\020\002\022\027\n\023EPriceStatus_Bottom\020\003\022\030\n"
    "\024EPriceStatus_Premium\020\004\022\031\n\025EPriceStatus_"
    "MaxPrice\020\005*Z\n\016EPetChangeType\022\025\n\021EPetChan"
    "geType_Lv\020\001\022\027\n\023EPetChangeType_Good\020\002\022\030\n\024"
    "EPetChangeType_Skill\020\003*U\n\024EPetAdventureL"
    "ogType\022\036\n\032EPetAdventureLogType_Start\020\001\022\035"
    "\n\031EPetAdventureLogType_Take\020\002*L\n\013ECredit"
    "Type\022\023\n\017ECreditType_Add\020\001\022\023\n\017ECreditType"
    "_Dec\020\002\022\023\n\017ECreditType_Set\020\003*O\n\nEGiveEven"
    "t\022\023\n\017EGiveEvent_Give\020\001\022\025\n\021EGiveEvent_Acc"
    "ept\020\002\022\025\n\021EGiveEvent_Refuse\020\003*@\n\014ELogGive"
    "Type\022\026\n\022ELogGiveType_Trade\020\000\022\030\n\024ELogGive"
    "Type_Lottery\020\001*o\n\rEQuotaOptType\022\025\n\021EQuot"
    "aOptType_Add\020\001\022\025\n\021EQuotaOptType_Sub\020\002\022\026\n"
    "\022EQuotaOptType_Lock\020\003\022\030\n\024EQuotaOptType_U"
    "nlock\020\004", 18567);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LogCmd.proto", &protobuf_RegisterTypes);
  LoginLogCmd::default_instance_ = new LoginLogCmd();
  AccountLogCmd::default_instance_ = new AccountLogCmd();
  CreateLogCmd::default_instance_ = new CreateLogCmd();
  ChangeFlagLogCmd::default_instance_ = new ChangeFlagLogCmd();
  ChargeLogCmd::default_instance_ = new ChargeLogCmd();
  EventLogCmd::default_instance_ = new EventLogCmd();
  IncomeLogCmd::default_instance_ = new IncomeLogCmd();
  ConsumeLogCmd::default_instance_ = new ConsumeLogCmd();
  ItemLogCmd::default_instance_ = new ItemLogCmd();
  PropsLogCmd::default_instance_ = new PropsLogCmd();
  TransactionLogCmd::default_instance_ = new TransactionLogCmd();
  ChatLogCmd::default_instance_ = new ChatLogCmd();
  LevelLogCmd::default_instance_ = new LevelLogCmd();
  OnlineLogCmd::default_instance_ = new OnlineLogCmd();
  SnapshotLogCmd::default_instance_ = new SnapshotLogCmd();
  CheckpointLogCmd::default_instance_ = new CheckpointLogCmd();
  RankLogCmd::default_instance_ = new RankLogCmd();
  ChatSearchCond::default_instance_ = new ChatSearchCond();
  ChatLogRes::default_instance_ = new ChatLogRes();
  QueryChatLogCmd::default_instance_ = new QueryChatLogCmd();
  ChangeLogCmd::default_instance_ = new ChangeLogCmd();
  EquipLogCmd::default_instance_ = new EquipLogCmd();
  CardLogCmd::default_instance_ = new CardLogCmd();
  EquipUpLogCmd::default_instance_ = new EquipUpLogCmd();
  SocailLogCmd::default_instance_ = new SocailLogCmd();
  QuestLogCmd::default_instance_ = new QuestLogCmd();
  ManualLogCmd::default_instance_ = new ManualLogCmd();
  CompleteLogCmd::default_instance_ = new CompleteLogCmd();
  TowerLogCmd::default_instance_ = new TowerLogCmd();
  ItemOperLogCmd::default_instance_ = new ItemOperLogCmd();
  KillLogCmd::default_instance_ = new KillLogCmd();
  RewardLogCmd::default_instance_ = new RewardLogCmd();
  MailLogCmd::default_instance_ = new MailLogCmd();
  DojoLogCmd::default_instance_ = new DojoLogCmd();
  EnchantLogCmd::default_instance_ = new EnchantLogCmd();
  GuildPrayLogCmd::default_instance_ = new GuildPrayLogCmd();
  UseSkillLogCmd::default_instance_ = new UseSkillLogCmd();
  ActiveLogCmd::default_instance_ = new ActiveLogCmd();
  TradeLogCmd::default_instance_ = new TradeLogCmd();
  DeleteCharLogCmd::default_instance_ = new DeleteCharLogCmd();
  ComposeLogCmd::default_instance_ = new ComposeLogCmd();
  JumpzoneLogCmd::default_instance_ = new JumpzoneLogCmd();
  TeamLogCmd::default_instance_ = new TeamLogCmd();
  TradeAdjustPriceLogCmd::default_instance_ = new TradeAdjustPriceLogCmd();
  TradePriceLogCmd::default_instance_ = new TradePriceLogCmd();
  PetChangeLogCmd::default_instance_ = new PetChangeLogCmd();
  PetAdventureLogCmd::default_instance_ = new PetAdventureLogCmd();
  InactiveUserLogCmd::default_instance_ = new InactiveUserLogCmd();
  TradeUntakeLogCmd::default_instance_ = new TradeUntakeLogCmd();
  CreditLogCmd::default_instance_ = new CreditLogCmd();
  TradeGiveLogCmd::default_instance_ = new TradeGiveLogCmd();
  QuotaLogCmd::default_instance_ = new QuotaLogCmd();
  GuildItemLogCmd::default_instance_ = new GuildItemLogCmd();
  LoginLogCmd::default_instance_->InitAsDefaultInstance();
  AccountLogCmd::default_instance_->InitAsDefaultInstance();
  CreateLogCmd::default_instance_->InitAsDefaultInstance();
  ChangeFlagLogCmd::default_instance_->InitAsDefaultInstance();
  ChargeLogCmd::default_instance_->InitAsDefaultInstance();
  EventLogCmd::default_instance_->InitAsDefaultInstance();
  IncomeLogCmd::default_instance_->InitAsDefaultInstance();
  ConsumeLogCmd::default_instance_->InitAsDefaultInstance();
  ItemLogCmd::default_instance_->InitAsDefaultInstance();
  PropsLogCmd::default_instance_->InitAsDefaultInstance();
  TransactionLogCmd::default_instance_->InitAsDefaultInstance();
  ChatLogCmd::default_instance_->InitAsDefaultInstance();
  LevelLogCmd::default_instance_->InitAsDefaultInstance();
  OnlineLogCmd::default_instance_->InitAsDefaultInstance();
  SnapshotLogCmd::default_instance_->InitAsDefaultInstance();
  CheckpointLogCmd::default_instance_->InitAsDefaultInstance();
  RankLogCmd::default_instance_->InitAsDefaultInstance();
  ChatSearchCond::default_instance_->InitAsDefaultInstance();
  ChatLogRes::default_instance_->InitAsDefaultInstance();
  QueryChatLogCmd::default_instance_->InitAsDefaultInstance();
  ChangeLogCmd::default_instance_->InitAsDefaultInstance();
  EquipLogCmd::default_instance_->InitAsDefaultInstance();
  CardLogCmd::default_instance_->InitAsDefaultInstance();
  EquipUpLogCmd::default_instance_->InitAsDefaultInstance();
  SocailLogCmd::default_instance_->InitAsDefaultInstance();
  QuestLogCmd::default_instance_->InitAsDefaultInstance();
  ManualLogCmd::default_instance_->InitAsDefaultInstance();
  CompleteLogCmd::default_instance_->InitAsDefaultInstance();
  TowerLogCmd::default_instance_->InitAsDefaultInstance();
  ItemOperLogCmd::default_instance_->InitAsDefaultInstance();
  KillLogCmd::default_instance_->InitAsDefaultInstance();
  RewardLogCmd::default_instance_->InitAsDefaultInstance();
  MailLogCmd::default_instance_->InitAsDefaultInstance();
  DojoLogCmd::default_instance_->InitAsDefaultInstance();
  EnchantLogCmd::default_instance_->InitAsDefaultInstance();
  GuildPrayLogCmd::default_instance_->InitAsDefaultInstance();
  UseSkillLogCmd::default_instance_->InitAsDefaultInstance();
  ActiveLogCmd::default_instance_->InitAsDefaultInstance();
  TradeLogCmd::default_instance_->InitAsDefaultInstance();
  DeleteCharLogCmd::default_instance_->InitAsDefaultInstance();
  ComposeLogCmd::default_instance_->InitAsDefaultInstance();
  JumpzoneLogCmd::default_instance_->InitAsDefaultInstance();
  TeamLogCmd::default_instance_->InitAsDefaultInstance();
  TradeAdjustPriceLogCmd::default_instance_->InitAsDefaultInstance();
  TradePriceLogCmd::default_instance_->InitAsDefaultInstance();
  PetChangeLogCmd::default_instance_->InitAsDefaultInstance();
  PetAdventureLogCmd::default_instance_->InitAsDefaultInstance();
  InactiveUserLogCmd::default_instance_->InitAsDefaultInstance();
  TradeUntakeLogCmd::default_instance_->InitAsDefaultInstance();
  CreditLogCmd::default_instance_->InitAsDefaultInstance();
  TradeGiveLogCmd::default_instance_->InitAsDefaultInstance();
  QuotaLogCmd::default_instance_->InitAsDefaultInstance();
  GuildItemLogCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LogCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LogCmd_2eproto {
  StaticDescriptorInitializer_LogCmd_2eproto() {
    protobuf_AddDesc_LogCmd_2eproto();
  }
} static_descriptor_initializer_LogCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* LogParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogParam_descriptor_;
}
bool LogParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChatType_descriptor_;
}
bool EChatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPriceStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPriceStatus_descriptor_;
}
bool EPriceStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPetChangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPetChangeType_descriptor_;
}
bool EPetChangeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPetAdventureLogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPetAdventureLogType_descriptor_;
}
bool EPetAdventureLogType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECreditType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECreditType_descriptor_;
}
bool ECreditType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGiveEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGiveEvent_descriptor_;
}
bool EGiveEvent_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELogGiveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELogGiveType_descriptor_;
}
bool ELogGiveType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQuotaOptType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuotaOptType_descriptor_;
}
bool EQuotaOptType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LoginLogCmd::kCmdFieldNumber;
const int LoginLogCmd::kParamFieldNumber;
const int LoginLogCmd::kCidFieldNumber;
const int LoginLogCmd::kSidFieldNumber;
const int LoginLogCmd::kHidFieldNumber;
const int LoginLogCmd::kAccountFieldNumber;
const int LoginLogCmd::kPidFieldNumber;
const int LoginLogCmd::kTimeFieldNumber;
const int LoginLogCmd::kIpFieldNumber;
const int LoginLogCmd::kTypeFieldNumber;
const int LoginLogCmd::kIspayFieldNumber;
const int LoginLogCmd::kLevelFieldNumber;
const int LoginLogCmd::kVipFieldNumber;
const int LoginLogCmd::kMarkFieldNumber;
const int LoginLogCmd::kSignFieldNumber;
const int LoginLogCmd::kDeviceFieldNumber;
const int LoginLogCmd::kGuestFieldNumber;
const int LoginLogCmd::kMacFieldNumber;
const int LoginLogCmd::kAgentFieldNumber;
const int LoginLogCmd::kMapidFieldNumber;
const int LoginLogCmd::kOnlinetimeFieldNumber;
const int LoginLogCmd::kTeamtimelenFieldNumber;
const int LoginLogCmd::kIsnewFieldNumber;
const int LoginLogCmd::kLogidFieldNumber;
const int LoginLogCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

LoginLogCmd::LoginLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LoginLogCmd)
}

void LoginLogCmd::InitAsDefaultInstance() {
}

LoginLogCmd::LoginLogCmd(const LoginLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LoginLogCmd)
}

void LoginLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 1;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  ispay_ = 0u;
  level_ = 0u;
  vip_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guest_ = 0u;
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapid_ = 0u;
  onlinetime_ = 0u;
  teamtimelen_ = 0u;
  isnew_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginLogCmd::~LoginLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LoginLogCmd)
  SharedDtor();
}

void LoginLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete agent_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void LoginLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginLogCmd_descriptor_;
}

const LoginLogCmd& LoginLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

LoginLogCmd* LoginLogCmd::default_instance_ = NULL;

LoginLogCmd* LoginLogCmd::New() const {
  return new LoginLogCmd;
}

void LoginLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 1;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 57088) {
    ZR_(type_, vip_);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(guest_, mapid_);
    ZR_(onlinetime_, teamtimelen_);
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        agent_->clear();
      }
    }
    isnew_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }
  zoneid_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LoginLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = LOGIN_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // optional uint32 time = 8;
      case 8: {
        if (tag == 64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ip;
        break;
      }

      // optional string ip = 9;
      case 9: {
        if (tag == 74) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // optional uint32 type = 10;
      case 10: {
        if (tag == 80) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 11;
      case 11: {
        if (tag == 88) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_level;
        break;
      }

      // optional uint32 level = 12;
      case 12: {
        if (tag == 96) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_vip;
        break;
      }

      // optional uint32 vip = 13;
      case 13: {
        if (tag == 104) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 14;
      case 14: {
        if (tag == 112) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_mark())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_mark;
        if (input->ExpectTag(122)) goto parse_sign;
        break;
      }

      // optional string sign = 15;
      case 15: {
        if (tag == 122) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_device;
        break;
      }

      // optional string device = 16;
      case 16: {
        if (tag == 130) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_guest;
        break;
      }

      // optional uint32 guest = 17;
      case 17: {
        if (tag == 136) {
         parse_guest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guest_)));
          set_has_guest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_mac;
        break;
      }

      // optional string mac = 18;
      case 18: {
        if (tag == 146) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_agent;
        break;
      }

      // optional string agent = 19;
      case 19: {
        if (tag == 154) {
         parse_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->agent().data(), this->agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "agent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 20;
      case 20: {
        if (tag == 160) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_onlinetime;
        break;
      }

      // optional uint32 onlinetime = 21;
      case 21: {
        if (tag == 168) {
         parse_onlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_teamtimelen;
        break;
      }

      // optional uint32 teamtimelen = 22;
      case 22: {
        if (tag == 176) {
         parse_teamtimelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamtimelen_)));
          set_has_teamtimelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_isnew;
        break;
      }

      // optional uint32 isnew = 23;
      case 23: {
        if (tag == 184) {
         parse_isnew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isnew_)));
          set_has_isnew();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_logid;
        break;
      }

      // optional string logid = 24;
      case 24: {
        if (tag == 194) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 25;
      case 25: {
        if (tag == 200) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LoginLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LoginLogCmd)
  return false;
#undef DO_
}

void LoginLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LoginLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = LOGIN_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->time(), output);
  }

  // optional string ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ip(), output);
  }

  // optional uint32 type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->type(), output);
  }

  // optional uint32 ispay = 11;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ispay(), output);
  }

  // optional uint32 level = 12;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->level(), output);
  }

  // optional uint32 vip = 13;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->vip(), output);
  }

  // repeated uint32 mark = 14;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->mark(i), output);
  }

  // optional string sign = 15;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->sign(), output);
  }

  // optional string device = 16;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->device(), output);
  }

  // optional uint32 guest = 17;
  if (has_guest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->guest(), output);
  }

  // optional string mac = 18;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->mac(), output);
  }

  // optional string agent = 19;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->agent(), output);
  }

  // optional uint32 mapid = 20;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->mapid(), output);
  }

  // optional uint32 onlinetime = 21;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->onlinetime(), output);
  }

  // optional uint32 teamtimelen = 22;
  if (has_teamtimelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->teamtimelen(), output);
  }

  // optional uint32 isnew = 23;
  if (has_isnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->isnew(), output);
  }

  // optional string logid = 24;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->logid(), output);
  }

  // optional uint32 zoneid = 25;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LoginLogCmd)
}

::google::protobuf::uint8* LoginLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LoginLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = LOGIN_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->time(), target);
  }

  // optional string ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ip(), target);
  }

  // optional uint32 type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->type(), target);
  }

  // optional uint32 ispay = 11;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ispay(), target);
  }

  // optional uint32 level = 12;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->level(), target);
  }

  // optional uint32 vip = 13;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->vip(), target);
  }

  // repeated uint32 mark = 14;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->mark(i), target);
  }

  // optional string sign = 15;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->sign(), target);
  }

  // optional string device = 16;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->device(), target);
  }

  // optional uint32 guest = 17;
  if (has_guest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->guest(), target);
  }

  // optional string mac = 18;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->mac(), target);
  }

  // optional string agent = 19;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->agent(), target);
  }

  // optional uint32 mapid = 20;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->mapid(), target);
  }

  // optional uint32 onlinetime = 21;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->onlinetime(), target);
  }

  // optional uint32 teamtimelen = 22;
  if (has_teamtimelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->teamtimelen(), target);
  }

  // optional uint32 isnew = 23;
  if (has_isnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->isnew(), target);
  }

  // optional string logid = 24;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->logid(), target);
  }

  // optional uint32 zoneid = 25;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LoginLogCmd)
  return target;
}

int LoginLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = LOGIN_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ip = 9;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 ispay = 11;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

    // optional uint32 level = 12;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 vip = 13;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // optional string sign = 15;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string device = 16;
    if (has_device()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 guest = 17;
    if (has_guest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guest());
    }

    // optional string mac = 18;
    if (has_mac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional string agent = 19;
    if (has_agent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent());
    }

    // optional uint32 mapid = 20;
    if (has_mapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 onlinetime = 21;
    if (has_onlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinetime());
    }

    // optional uint32 teamtimelen = 22;
    if (has_teamtimelen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamtimelen());
    }

    // optional uint32 isnew = 23;
    if (has_isnew()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isnew());
    }

    // optional string logid = 24;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 zoneid = 25;
    if (has_zoneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  // repeated uint32 mark = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 1 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginLogCmd::MergeFrom(const LoginLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_guest()) {
      set_guest(from.guest());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_teamtimelen()) {
      set_teamtimelen(from.teamtimelen());
    }
    if (from.has_isnew()) {
      set_isnew(from.isnew());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginLogCmd::CopyFrom(const LoginLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginLogCmd::IsInitialized() const {

  return true;
}

void LoginLogCmd::Swap(LoginLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(ip_, other->ip_);
    std::swap(type_, other->type_);
    std::swap(ispay_, other->ispay_);
    std::swap(level_, other->level_);
    std::swap(vip_, other->vip_);
    mark_.Swap(&other->mark_);
    std::swap(sign_, other->sign_);
    std::swap(device_, other->device_);
    std::swap(guest_, other->guest_);
    std::swap(mac_, other->mac_);
    std::swap(agent_, other->agent_);
    std::swap(mapid_, other->mapid_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(teamtimelen_, other->teamtimelen_);
    std::swap(isnew_, other->isnew_);
    std::swap(logid_, other->logid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginLogCmd_descriptor_;
  metadata.reflection = LoginLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLogCmd::kCmdFieldNumber;
const int AccountLogCmd::kParamFieldNumber;
const int AccountLogCmd::kCidFieldNumber;
const int AccountLogCmd::kSidFieldNumber;
const int AccountLogCmd::kAccountFieldNumber;
const int AccountLogCmd::kTimeFieldNumber;
const int AccountLogCmd::kIpFieldNumber;
const int AccountLogCmd::kGuestFieldNumber;
const int AccountLogCmd::kDeviceFieldNumber;
const int AccountLogCmd::kMacFieldNumber;
const int AccountLogCmd::kSourceFieldNumber;
const int AccountLogCmd::kAgentFieldNumber;
const int AccountLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

AccountLogCmd::AccountLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AccountLogCmd)
}

void AccountLogCmd::InitAsDefaultInstance() {
}

AccountLogCmd::AccountLogCmd(const AccountLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AccountLogCmd)
}

void AccountLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 2;
  cid_ = 0u;
  sid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guest_ = 0u;
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLogCmd::~AccountLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AccountLogCmd)
  SharedDtor();
}

void AccountLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete agent_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void AccountLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLogCmd_descriptor_;
}

const AccountLogCmd& AccountLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

AccountLogCmd* AccountLogCmd::default_instance_ = NULL;

AccountLogCmd* AccountLogCmd::New() const {
  return new AccountLogCmd;
}

void AccountLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AccountLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(time_, guest_);
    cmd_ = 204;
    param_ = 2;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        agent_->clear();
      }
    }
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AccountLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = ACCOUNT_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }

      // optional string account = 5;
      case 5: {
        if (tag == 42) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ip;
        break;
      }

      // optional string ip = 7;
      case 7: {
        if (tag == 58) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_guest;
        break;
      }

      // optional uint32 guest = 8;
      case 8: {
        if (tag == 64) {
         parse_guest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guest_)));
          set_has_guest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_device;
        break;
      }

      // optional string device = 9;
      case 9: {
        if (tag == 74) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_mac;
        break;
      }

      // optional string mac = 10;
      case 10: {
        if (tag == 82) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_source;
        break;
      }

      // optional string source = 11;
      case 11: {
        if (tag == 90) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_agent;
        break;
      }

      // optional string agent = 12;
      case 12: {
        if (tag == 98) {
         parse_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->agent().data(), this->agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "agent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_logid;
        break;
      }

      // optional string logid = 13;
      case 13: {
        if (tag == 106) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AccountLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AccountLogCmd)
  return false;
#undef DO_
}

void AccountLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AccountLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = ACCOUNT_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->account(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional string ip = 7;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ip(), output);
  }

  // optional uint32 guest = 8;
  if (has_guest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->guest(), output);
  }

  // optional string device = 9;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->device(), output);
  }

  // optional string mac = 10;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->mac(), output);
  }

  // optional string source = 11;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->source(), output);
  }

  // optional string agent = 12;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->agent(), output);
  }

  // optional string logid = 13;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AccountLogCmd)
}

::google::protobuf::uint8* AccountLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AccountLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = ACCOUNT_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional string ip = 7;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ip(), target);
  }

  // optional uint32 guest = 8;
  if (has_guest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->guest(), target);
  }

  // optional string device = 9;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->device(), target);
  }

  // optional string mac = 10;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mac(), target);
  }

  // optional string source = 11;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->source(), target);
  }

  // optional string agent = 12;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->agent(), target);
  }

  // optional string logid = 13;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AccountLogCmd)
  return target;
}

int AccountLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = ACCOUNT_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional string account = 5;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string ip = 7;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 guest = 8;
    if (has_guest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guest());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string device = 9;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional string mac = 10;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional string source = 11;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string agent = 12;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent());
    }

    // optional string logid = 13;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLogCmd::MergeFrom(const AccountLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_guest()) {
      set_guest(from.guest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLogCmd::CopyFrom(const AccountLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLogCmd::IsInitialized() const {

  return true;
}

void AccountLogCmd::Swap(AccountLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(account_, other->account_);
    std::swap(time_, other->time_);
    std::swap(ip_, other->ip_);
    std::swap(guest_, other->guest_);
    std::swap(device_, other->device_);
    std::swap(mac_, other->mac_);
    std::swap(source_, other->source_);
    std::swap(agent_, other->agent_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLogCmd_descriptor_;
  metadata.reflection = AccountLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateLogCmd::kCmdFieldNumber;
const int CreateLogCmd::kParamFieldNumber;
const int CreateLogCmd::kCidFieldNumber;
const int CreateLogCmd::kSidFieldNumber;
const int CreateLogCmd::kAccountFieldNumber;
const int CreateLogCmd::kPidFieldNumber;
const int CreateLogCmd::kTimeFieldNumber;
const int CreateLogCmd::kIpFieldNumber;
const int CreateLogCmd::kNameFieldNumber;
const int CreateLogCmd::kGuestFieldNumber;
const int CreateLogCmd::kDeviceFieldNumber;
const int CreateLogCmd::kMacFieldNumber;
const int CreateLogCmd::kSourceFieldNumber;
const int CreateLogCmd::kAgentFieldNumber;
const int CreateLogCmd::kGenderFieldNumber;
const int CreateLogCmd::kHairFieldNumber;
const int CreateLogCmd::kHaircolorFieldNumber;
const int CreateLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

CreateLogCmd::CreateLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CreateLogCmd)
}

void CreateLogCmd::InitAsDefaultInstance() {
}

CreateLogCmd::CreateLogCmd(const CreateLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CreateLogCmd)
}

void CreateLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 3;
  cid_ = 0u;
  sid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guest_ = 0u;
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0u;
  hair_ = 0u;
  haircolor_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateLogCmd::~CreateLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CreateLogCmd)
  SharedDtor();
}

void CreateLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete agent_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void CreateLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateLogCmd_descriptor_;
}

const CreateLogCmd& CreateLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

CreateLogCmd* CreateLogCmd::default_instance_ = NULL;

CreateLogCmd* CreateLogCmd::New() const {
  return new CreateLogCmd;
}

void CreateLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    cmd_ = 204;
    param_ = 3;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    pid_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(gender_, hair_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    guest_ = 0u;
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        agent_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    haircolor_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CreateLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = CREATE_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }

      // optional string account = 5;
      case 5: {
        if (tag == 42) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 6;
      case 6: {
        if (tag == 48) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional uint32 time = 7;
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ip;
        break;
      }

      // optional string ip = 8;
      case 8: {
        if (tag == 66) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }

      // optional string name = 9;
      case 9: {
        if (tag == 74) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_guest;
        break;
      }

      // optional uint32 guest = 10;
      case 10: {
        if (tag == 80) {
         parse_guest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guest_)));
          set_has_guest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_device;
        break;
      }

      // optional string device = 11;
      case 11: {
        if (tag == 90) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_mac;
        break;
      }

      // optional string mac = 12;
      case 12: {
        if (tag == 98) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_source;
        break;
      }

      // optional string source = 13;
      case 13: {
        if (tag == 106) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_agent;
        break;
      }

      // optional string agent = 14;
      case 14: {
        if (tag == 114) {
         parse_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->agent().data(), this->agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "agent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 15;
      case 15: {
        if (tag == 120) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_hair;
        break;
      }

      // optional uint32 hair = 16;
      case 16: {
        if (tag == 128) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_haircolor;
        break;
      }

      // optional uint32 haircolor = 17;
      case 17: {
        if (tag == 136) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_logid;
        break;
      }

      // optional string logid = 18;
      case 18: {
        if (tag == 146) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CreateLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CreateLogCmd)
  return false;
#undef DO_
}

void CreateLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CreateLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = CREATE_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->account(), output);
  }

  // optional uint64 pid = 6;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pid(), output);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time(), output);
  }

  // optional string ip = 8;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ip(), output);
  }

  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->name(), output);
  }

  // optional uint32 guest = 10;
  if (has_guest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->guest(), output);
  }

  // optional string device = 11;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->device(), output);
  }

  // optional string mac = 12;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->mac(), output);
  }

  // optional string source = 13;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->source(), output);
  }

  // optional string agent = 14;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->agent(), output);
  }

  // optional uint32 gender = 15;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->gender(), output);
  }

  // optional uint32 hair = 16;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->hair(), output);
  }

  // optional uint32 haircolor = 17;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->haircolor(), output);
  }

  // optional string logid = 18;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CreateLogCmd)
}

::google::protobuf::uint8* CreateLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CreateLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = CREATE_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account(), target);
  }

  // optional uint64 pid = 6;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->pid(), target);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time(), target);
  }

  // optional string ip = 8;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ip(), target);
  }

  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }

  // optional uint32 guest = 10;
  if (has_guest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->guest(), target);
  }

  // optional string device = 11;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->device(), target);
  }

  // optional string mac = 12;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->mac(), target);
  }

  // optional string source = 13;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->source(), target);
  }

  // optional string agent = 14;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->agent(), target);
  }

  // optional uint32 gender = 15;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->gender(), target);
  }

  // optional uint32 hair = 16;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->hair(), target);
  }

  // optional uint32 haircolor = 17;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->haircolor(), target);
  }

  // optional string logid = 18;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CreateLogCmd)
  return target;
}

int CreateLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = CREATE_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional string account = 5;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 6;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string ip = 8;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 guest = 10;
    if (has_guest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guest());
    }

    // optional string device = 11;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional string mac = 12;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional string source = 13;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string agent = 14;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent());
    }

    // optional uint32 gender = 15;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint32 hair = 16;
    if (has_hair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hair());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 haircolor = 17;
    if (has_haircolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haircolor());
    }

    // optional string logid = 18;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateLogCmd::MergeFrom(const CreateLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guest()) {
      set_guest(from.guest());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateLogCmd::CopyFrom(const CreateLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateLogCmd::IsInitialized() const {

  return true;
}

void CreateLogCmd::Swap(CreateLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(ip_, other->ip_);
    std::swap(name_, other->name_);
    std::swap(guest_, other->guest_);
    std::swap(device_, other->device_);
    std::swap(mac_, other->mac_);
    std::swap(source_, other->source_);
    std::swap(agent_, other->agent_);
    std::swap(gender_, other->gender_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateLogCmd_descriptor_;
  metadata.reflection = CreateLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeFlagLogCmd::kCmdFieldNumber;
const int ChangeFlagLogCmd::kParamFieldNumber;
const int ChangeFlagLogCmd::kCidFieldNumber;
const int ChangeFlagLogCmd::kSidFieldNumber;
const int ChangeFlagLogCmd::kPidFieldNumber;
const int ChangeFlagLogCmd::kTimeFieldNumber;
const int ChangeFlagLogCmd::kFalgFieldNumber;
const int ChangeFlagLogCmd::kFromFieldNumber;
const int ChangeFlagLogCmd::kToFieldNumber;
const int ChangeFlagLogCmd::kParam1FieldNumber;
const int ChangeFlagLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

ChangeFlagLogCmd::ChangeFlagLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeFlagLogCmd)
}

void ChangeFlagLogCmd::InitAsDefaultInstance() {
}

ChangeFlagLogCmd::ChangeFlagLogCmd(const ChangeFlagLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeFlagLogCmd)
}

void ChangeFlagLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 4;
  cid_ = 0u;
  sid_ = 0u;
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  falg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param1_ = GOOGLE_ULONGLONG(0);
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeFlagLogCmd::~ChangeFlagLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeFlagLogCmd)
  SharedDtor();
}

void ChangeFlagLogCmd::SharedDtor() {
  if (falg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete falg_;
  }
  if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void ChangeFlagLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeFlagLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeFlagLogCmd_descriptor_;
}

const ChangeFlagLogCmd& ChangeFlagLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

ChangeFlagLogCmd* ChangeFlagLogCmd::default_instance_ = NULL;

ChangeFlagLogCmd* ChangeFlagLogCmd::New() const {
  return new ChangeFlagLogCmd;
}

void ChangeFlagLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeFlagLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, pid_);
    cmd_ = 204;
    param_ = 4;
    time_ = 0u;
    if (has_falg()) {
      if (falg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        falg_->clear();
      }
    }
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_->clear();
      }
    }
    param1_ = GOOGLE_ULONGLONG(0);
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeFlagLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeFlagLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = CHANGE_FLAG_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 5;
      case 5: {
        if (tag == 40) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_falg;
        break;
      }

      // optional string falg = 7;
      case 7: {
        if (tag == 58) {
         parse_falg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_falg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->falg().data(), this->falg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "falg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_from;
        break;
      }

      // optional string from = 8;
      case 8: {
        if (tag == 66) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_to;
        break;
      }

      // optional string to = 9;
      case 9: {
        if (tag == 74) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "to");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_param1;
        break;
      }

      // optional uint64 param1 = 10;
      case 10: {
        if (tag == 80) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_logid;
        break;
      }

      // optional string logid = 11;
      case 11: {
        if (tag == 90) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeFlagLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeFlagLogCmd)
  return false;
#undef DO_
}

void ChangeFlagLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeFlagLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = CHANGE_FLAG_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->pid(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional string falg = 7;
  if (has_falg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->falg().data(), this->falg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "falg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->falg(), output);
  }

  // optional string from = 8;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->from(), output);
  }

  // optional string to = 9;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->to(), output);
  }

  // optional uint64 param1 = 10;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->param1(), output);
  }

  // optional string logid = 11;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeFlagLogCmd)
}

::google::protobuf::uint8* ChangeFlagLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeFlagLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = CHANGE_FLAG_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->pid(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional string falg = 7;
  if (has_falg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->falg().data(), this->falg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "falg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->falg(), target);
  }

  // optional string from = 8;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->from(), target);
  }

  // optional string to = 9;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->to(), target);
  }

  // optional uint64 param1 = 10;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->param1(), target);
  }

  // optional string logid = 11;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeFlagLogCmd)
  return target;
}

int ChangeFlagLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = CHANGE_FLAG_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint64 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string falg = 7;
    if (has_falg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->falg());
    }

    // optional string from = 8;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string to = 9;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

    // optional uint64 param1 = 10;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param1());
    }

    // optional string logid = 11;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeFlagLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeFlagLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeFlagLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeFlagLogCmd::MergeFrom(const ChangeFlagLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_falg()) {
      set_falg(from.falg());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeFlagLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFlagLogCmd::CopyFrom(const ChangeFlagLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFlagLogCmd::IsInitialized() const {

  return true;
}

void ChangeFlagLogCmd::Swap(ChangeFlagLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(falg_, other->falg_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(param1_, other->param1_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeFlagLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeFlagLogCmd_descriptor_;
  metadata.reflection = ChangeFlagLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeLogCmd::kCmdFieldNumber;
const int ChargeLogCmd::kParamFieldNumber;
const int ChargeLogCmd::kCidFieldNumber;
const int ChargeLogCmd::kSidFieldNumber;
const int ChargeLogCmd::kHidFieldNumber;
const int ChargeLogCmd::kAccountFieldNumber;
const int ChargeLogCmd::kPidFieldNumber;
const int ChargeLogCmd::kTimeFieldNumber;
const int ChargeLogCmd::kIpFieldNumber;
const int ChargeLogCmd::kOidFieldNumber;
const int ChargeLogCmd::kTypeFieldNumber;
const int ChargeLogCmd::kLevelFieldNumber;
const int ChargeLogCmd::kAmountFieldNumber;
const int ChargeLogCmd::kCoinsFieldNumber;
const int ChargeLogCmd::kMarkFieldNumber;
const int ChargeLogCmd::kNameFieldNumber;
const int ChargeLogCmd::kDeviceFieldNumber;
const int ChargeLogCmd::kCtimeFieldNumber;
const int ChargeLogCmd::kCurrencyFieldNumber;
const int ChargeLogCmd::kProviderFieldNumber;
const int ChargeLogCmd::kItemidFieldNumber;
const int ChargeLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

ChargeLogCmd::ChargeLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChargeLogCmd)
}

void ChargeLogCmd::InitAsDefaultInstance() {
}

ChargeLogCmd::ChargeLogCmd(const ChargeLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChargeLogCmd)
}

void ChargeLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 5;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  amount_ = 0;
  coins_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ctime_ = 0u;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemid_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeLogCmd::~ChargeLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChargeLogCmd)
  SharedDtor();
}

void ChargeLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (oid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oid_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currency_;
  }
  if (provider_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete provider_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void ChargeLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeLogCmd_descriptor_;
}

const ChargeLogCmd& ChargeLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

ChargeLogCmd* ChargeLogCmd::default_instance_ = NULL;

ChargeLogCmd* ChargeLogCmd::New() const {
  return new ChargeLogCmd;
}

void ChargeLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChargeLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 5;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 48896) {
    ZR_(level_, amount_);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_oid()) {
      if (oid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        oid_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    coins_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 4128768) {
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_->clear();
      }
    }
    ctime_ = 0u;
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currency_->clear();
      }
    }
    if (has_provider()) {
      if (provider_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        provider_->clear();
      }
    }
    itemid_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChargeLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = CHARGE_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // optional uint32 time = 8;
      case 8: {
        if (tag == 64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ip;
        break;
      }

      // optional string ip = 9;
      case 9: {
        if (tag == 74) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_oid;
        break;
      }

      // optional string oid = 10;
      case 10: {
        if (tag == 82) {
         parse_oid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oid().data(), this->oid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_type;
        break;
      }

      // optional string type = 11;
      case 11: {
        if (tag == 90) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_level;
        break;
      }

      // optional uint32 level = 12;
      case 12: {
        if (tag == 96) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_amount;
        break;
      }

      // optional float amount = 13;
      case 13: {
        if (tag == 109) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_coins;
        break;
      }

      // optional uint32 coins = 14;
      case 14: {
        if (tag == 112) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 15;
      case 15: {
        if (tag == 120) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_mark())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_mark;
        if (input->ExpectTag(130)) goto parse_name;
        break;
      }

      // optional string name = 16;
      case 16: {
        if (tag == 130) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_device;
        break;
      }

      // optional string device = 17;
      case 17: {
        if (tag == 138) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_ctime;
        break;
      }

      // optional uint32 ctime = 18;
      case 18: {
        if (tag == 144) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_currency;
        break;
      }

      // optional string currency = 19;
      case 19: {
        if (tag == 154) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currency");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_provider;
        break;
      }

      // optional string provider = 20;
      case 20: {
        if (tag == 162) {
         parse_provider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->provider().data(), this->provider().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "provider");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 21;
      case 21: {
        if (tag == 168) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_logid;
        break;
      }

      // optional string logid = 22;
      case 22: {
        if (tag == 178) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChargeLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChargeLogCmd)
  return false;
#undef DO_
}

void ChargeLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChargeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = CHARGE_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->time(), output);
  }

  // optional string ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ip(), output);
  }

  // optional string oid = 10;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oid().data(), this->oid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->oid(), output);
  }

  // optional string type = 11;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->type(), output);
  }

  // optional uint32 level = 12;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->level(), output);
  }

  // optional float amount = 13;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->amount(), output);
  }

  // optional uint32 coins = 14;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->coins(), output);
  }

  // repeated uint32 mark = 15;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->mark(i), output);
  }

  // optional string name = 16;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->name(), output);
  }

  // optional string device = 17;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->device(), output);
  }

  // optional uint32 ctime = 18;
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->ctime(), output);
  }

  // optional string currency = 19;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->currency(), output);
  }

  // optional string provider = 20;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->provider().data(), this->provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "provider");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->provider(), output);
  }

  // optional uint32 itemid = 21;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->itemid(), output);
  }

  // optional string logid = 22;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChargeLogCmd)
}

::google::protobuf::uint8* ChargeLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChargeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = CHARGE_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->time(), target);
  }

  // optional string ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ip(), target);
  }

  // optional string oid = 10;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oid().data(), this->oid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->oid(), target);
  }

  // optional string type = 11;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->type(), target);
  }

  // optional uint32 level = 12;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->level(), target);
  }

  // optional float amount = 13;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->amount(), target);
  }

  // optional uint32 coins = 14;
  if (has_coins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->coins(), target);
  }

  // repeated uint32 mark = 15;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->mark(i), target);
  }

  // optional string name = 16;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->name(), target);
  }

  // optional string device = 17;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->device(), target);
  }

  // optional uint32 ctime = 18;
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->ctime(), target);
  }

  // optional string currency = 19;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->currency(), target);
  }

  // optional string provider = 20;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->provider().data(), this->provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "provider");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->provider(), target);
  }

  // optional uint32 itemid = 21;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->itemid(), target);
  }

  // optional string logid = 22;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChargeLogCmd)
  return target;
}

int ChargeLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = CHARGE_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ip = 9;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string oid = 10;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oid());
    }

    // optional string type = 11;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional uint32 level = 12;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional float amount = 13;
    if (has_amount()) {
      total_size += 1 + 4;
    }

    // optional uint32 coins = 14;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coins());
    }

    // optional string name = 16;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string device = 17;
    if (has_device()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional uint32 ctime = 18;
    if (has_ctime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ctime());
    }

    // optional string currency = 19;
    if (has_currency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional string provider = 20;
    if (has_provider()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provider());
    }

    // optional uint32 itemid = 21;
    if (has_itemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional string logid = 22;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 1 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeLogCmd::MergeFrom(const ChargeLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_oid()) {
      set_oid(from.oid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_provider()) {
      set_provider(from.provider());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeLogCmd::CopyFrom(const ChargeLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeLogCmd::IsInitialized() const {

  return true;
}

void ChargeLogCmd::Swap(ChargeLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(ip_, other->ip_);
    std::swap(oid_, other->oid_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(amount_, other->amount_);
    std::swap(coins_, other->coins_);
    mark_.Swap(&other->mark_);
    std::swap(name_, other->name_);
    std::swap(device_, other->device_);
    std::swap(ctime_, other->ctime_);
    std::swap(currency_, other->currency_);
    std::swap(provider_, other->provider_);
    std::swap(itemid_, other->itemid_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeLogCmd_descriptor_;
  metadata.reflection = ChargeLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventLogCmd::kCmdFieldNumber;
const int EventLogCmd::kParamFieldNumber;
const int EventLogCmd::kCidFieldNumber;
const int EventLogCmd::kSidFieldNumber;
const int EventLogCmd::kHidFieldNumber;
const int EventLogCmd::kAccountFieldNumber;
const int EventLogCmd::kPidFieldNumber;
const int EventLogCmd::kTimeFieldNumber;
const int EventLogCmd::kMicrotimeFieldNumber;
const int EventLogCmd::kEidFieldNumber;
const int EventLogCmd::kIspayFieldNumber;
const int EventLogCmd::kTypeFieldNumber;
const int EventLogCmd::kSubtypeFieldNumber;
const int EventLogCmd::kCountFieldNumber;
const int EventLogCmd::kMarkFieldNumber;
const int EventLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

EventLogCmd::EventLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EventLogCmd)
}

void EventLogCmd::InitAsDefaultInstance() {
}

EventLogCmd::EventLogCmd(const EventLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EventLogCmd)
}

void EventLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 6;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  microtime_ = 0;
  eid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  type_ = 0u;
  subtype_ = 0u;
  count_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventLogCmd::~EventLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EventLogCmd)
  SharedDtor();
}

void EventLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void EventLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventLogCmd_descriptor_;
}

const EventLogCmd& EventLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

EventLogCmd* EventLogCmd::default_instance_ = NULL;

EventLogCmd* EventLogCmd::New() const {
  return new EventLogCmd;
}

void EventLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EventLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 6;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 48896) {
    ZR_(microtime_, count_);
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EventLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = EVENT_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // optional uint32 time = 8;
      case 8: {
        if (tag == 64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_microtime;
        break;
      }

      // optional double microtime = 9;
      case 9: {
        if (tag == 73) {
         parse_microtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &microtime_)));
          set_has_microtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 11;
      case 11: {
        if (tag == 88) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional uint32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_subtype;
        break;
      }

      // optional uint32 subtype = 13;
      case 13: {
        if (tag == 104) {
         parse_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_count;
        break;
      }

      // optional uint32 count = 14;
      case 14: {
        if (tag == 112) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 15;
      case 15: {
        if (tag == 120) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_mark())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_mark;
        if (input->ExpectTag(130)) goto parse_logid;
        break;
      }

      // optional string logid = 16;
      case 16: {
        if (tag == 130) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EventLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EventLogCmd)
  return false;
#undef DO_
}

void EventLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EventLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = EVENT_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->time(), output);
  }

  // optional double microtime = 9;
  if (has_microtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->microtime(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 ispay = 11;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ispay(), output);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }

  // optional uint32 subtype = 13;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->subtype(), output);
  }

  // optional uint32 count = 14;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->count(), output);
  }

  // repeated uint32 mark = 15;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->mark(i), output);
  }

  // optional string logid = 16;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EventLogCmd)
}

::google::protobuf::uint8* EventLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EventLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = EVENT_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->time(), target);
  }

  // optional double microtime = 9;
  if (has_microtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->microtime(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 ispay = 11;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ispay(), target);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->type(), target);
  }

  // optional uint32 subtype = 13;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->subtype(), target);
  }

  // optional uint32 count = 14;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->count(), target);
  }

  // repeated uint32 mark = 15;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->mark(i), target);
  }

  // optional string logid = 16;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EventLogCmd)
  return target;
}

int EventLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = EVENT_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double microtime = 9;
    if (has_microtime()) {
      total_size += 1 + 8;
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 ispay = 11;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

    // optional uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 subtype = 13;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subtype());
    }

    // optional uint32 count = 14;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional string logid = 16;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 1 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventLogCmd::MergeFrom(const EventLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_microtime()) {
      set_microtime(from.microtime());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventLogCmd::CopyFrom(const EventLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventLogCmd::IsInitialized() const {

  return true;
}

void EventLogCmd::Swap(EventLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(microtime_, other->microtime_);
    std::swap(eid_, other->eid_);
    std::swap(ispay_, other->ispay_);
    std::swap(type_, other->type_);
    std::swap(subtype_, other->subtype_);
    std::swap(count_, other->count_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventLogCmd_descriptor_;
  metadata.reflection = EventLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncomeLogCmd::kCmdFieldNumber;
const int IncomeLogCmd::kParamFieldNumber;
const int IncomeLogCmd::kCidFieldNumber;
const int IncomeLogCmd::kSidFieldNumber;
const int IncomeLogCmd::kHidFieldNumber;
const int IncomeLogCmd::kAccountFieldNumber;
const int IncomeLogCmd::kPidFieldNumber;
const int IncomeLogCmd::kTimeFieldNumber;
const int IncomeLogCmd::kMicrotimeFieldNumber;
const int IncomeLogCmd::kEidFieldNumber;
const int IncomeLogCmd::kIspayFieldNumber;
const int IncomeLogCmd::kValueFieldNumber;
const int IncomeLogCmd::kCoinTypeFieldNumber;
const int IncomeLogCmd::kTypeFieldNumber;
const int IncomeLogCmd::kAfterFieldNumber;
const int IncomeLogCmd::kMarkFieldNumber;
const int IncomeLogCmd::kLogidFieldNumber;
const int IncomeLogCmd::kSourceFieldNumber;
const int IncomeLogCmd::kCountFieldNumber;
#endif  // !_MSC_VER

IncomeLogCmd::IncomeLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.IncomeLogCmd)
}

void IncomeLogCmd::InitAsDefaultInstance() {
}

IncomeLogCmd::IncomeLogCmd(const IncomeLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.IncomeLogCmd)
}

void IncomeLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 7;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  microtime_ = 0;
  eid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  value_ = GOOGLE_ULONGLONG(0);
  coin_type_ = 0u;
  type_ = 0u;
  after_ = GOOGLE_ULONGLONG(0);
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncomeLogCmd::~IncomeLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.IncomeLogCmd)
  SharedDtor();
}

void IncomeLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void IncomeLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncomeLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncomeLogCmd_descriptor_;
}

const IncomeLogCmd& IncomeLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

IncomeLogCmd* IncomeLogCmd::default_instance_ = NULL;

IncomeLogCmd* IncomeLogCmd::New() const {
  return new IncomeLogCmd;
}

void IncomeLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IncomeLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 7;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(microtime_, after_);
    type_ = 0u;
  }
  if (_has_bits_[16 / 32] & 458752) {
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
    source_ = 0u;
    count_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncomeLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.IncomeLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = INCOME_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // optional uint32 time = 8;
      case 8: {
        if (tag == 64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_microtime;
        break;
      }

      // optional double microtime = 9;
      case 9: {
        if (tag == 73) {
         parse_microtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &microtime_)));
          set_has_microtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 11;
      case 11: {
        if (tag == 88) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_value;
        break;
      }

      // optional uint64 value = 12;
      case 12: {
        if (tag == 96) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_coin_type;
        break;
      }

      // optional uint32 coin_type = 13;
      case 13: {
        if (tag == 104) {
         parse_coin_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_type_)));
          set_has_coin_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_type;
        break;
      }

      // optional uint32 type = 14;
      case 14: {
        if (tag == 112) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_after;
        break;
      }

      // optional uint64 after = 15;
      case 15: {
        if (tag == 120) {
         parse_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &after_)));
          set_has_after();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 16;
      case 16: {
        if (tag == 128) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_mark())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_mark;
        if (input->ExpectTag(138)) goto parse_logid;
        break;
      }

      // optional string logid = 17;
      case 17: {
        if (tag == 138) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_source;
        break;
      }

      // optional uint32 source = 18;
      case 18: {
        if (tag == 144) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_count;
        break;
      }

      // optional uint32 count = 19;
      case 19: {
        if (tag == 152) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.IncomeLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.IncomeLogCmd)
  return false;
#undef DO_
}

void IncomeLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.IncomeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = INCOME_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->time(), output);
  }

  // optional double microtime = 9;
  if (has_microtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->microtime(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 ispay = 11;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ispay(), output);
  }

  // optional uint64 value = 12;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->value(), output);
  }

  // optional uint32 coin_type = 13;
  if (has_coin_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->coin_type(), output);
  }

  // optional uint32 type = 14;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->type(), output);
  }

  // optional uint64 after = 15;
  if (has_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->after(), output);
  }

  // repeated uint32 mark = 16;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->mark(i), output);
  }

  // optional string logid = 17;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->logid(), output);
  }

  // optional uint32 source = 18;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->source(), output);
  }

  // optional uint32 count = 19;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.IncomeLogCmd)
}

::google::protobuf::uint8* IncomeLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.IncomeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = INCOME_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->time(), target);
  }

  // optional double microtime = 9;
  if (has_microtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->microtime(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 ispay = 11;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ispay(), target);
  }

  // optional uint64 value = 12;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->value(), target);
  }

  // optional uint32 coin_type = 13;
  if (has_coin_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->coin_type(), target);
  }

  // optional uint32 type = 14;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->type(), target);
  }

  // optional uint64 after = 15;
  if (has_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->after(), target);
  }

  // repeated uint32 mark = 16;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->mark(i), target);
  }

  // optional string logid = 17;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->logid(), target);
  }

  // optional uint32 source = 18;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->source(), target);
  }

  // optional uint32 count = 19;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.IncomeLogCmd)
  return target;
}

int IncomeLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = INCOME_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double microtime = 9;
    if (has_microtime()) {
      total_size += 1 + 8;
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 ispay = 11;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

    // optional uint64 value = 12;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional uint32 coin_type = 13;
    if (has_coin_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin_type());
    }

    // optional uint32 type = 14;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 after = 15;
    if (has_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->after());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string logid = 17;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

    // optional uint32 source = 18;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source());
    }

    // optional uint32 count = 19;
    if (has_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated uint32 mark = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncomeLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncomeLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncomeLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncomeLogCmd::MergeFrom(const IncomeLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_microtime()) {
      set_microtime(from.microtime());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_coin_type()) {
      set_coin_type(from.coin_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_after()) {
      set_after(from.after());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncomeLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncomeLogCmd::CopyFrom(const IncomeLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomeLogCmd::IsInitialized() const {

  return true;
}

void IncomeLogCmd::Swap(IncomeLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(microtime_, other->microtime_);
    std::swap(eid_, other->eid_);
    std::swap(ispay_, other->ispay_);
    std::swap(value_, other->value_);
    std::swap(coin_type_, other->coin_type_);
    std::swap(type_, other->type_);
    std::swap(after_, other->after_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(source_, other->source_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncomeLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncomeLogCmd_descriptor_;
  metadata.reflection = IncomeLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConsumeLogCmd::kCmdFieldNumber;
const int ConsumeLogCmd::kParamFieldNumber;
const int ConsumeLogCmd::kCidFieldNumber;
const int ConsumeLogCmd::kSidFieldNumber;
const int ConsumeLogCmd::kHidFieldNumber;
const int ConsumeLogCmd::kAccountFieldNumber;
const int ConsumeLogCmd::kPidFieldNumber;
const int ConsumeLogCmd::kTimeFieldNumber;
const int ConsumeLogCmd::kMicrotimeFieldNumber;
const int ConsumeLogCmd::kEidFieldNumber;
const int ConsumeLogCmd::kIspayFieldNumber;
const int ConsumeLogCmd::kValueFieldNumber;
const int ConsumeLogCmd::kCoinTypeFieldNumber;
const int ConsumeLogCmd::kTypeFieldNumber;
const int ConsumeLogCmd::kAfterFieldNumber;
const int ConsumeLogCmd::kMarkFieldNumber;
const int ConsumeLogCmd::kLogidFieldNumber;
const int ConsumeLogCmd::kKindFieldNumber;
const int ConsumeLogCmd::kSourceFieldNumber;
const int ConsumeLogCmd::kCountFieldNumber;
const int ConsumeLogCmd::kChargecountFieldNumber;
const int ConsumeLogCmd::kRemainchargeFieldNumber;
#endif  // !_MSC_VER

ConsumeLogCmd::ConsumeLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ConsumeLogCmd)
}

void ConsumeLogCmd::InitAsDefaultInstance() {
}

ConsumeLogCmd::ConsumeLogCmd(const ConsumeLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ConsumeLogCmd)
}

void ConsumeLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 8;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  microtime_ = 0;
  eid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  value_ = GOOGLE_ULONGLONG(0);
  coin_type_ = 0u;
  type_ = 0u;
  after_ = GOOGLE_ULONGLONG(0);
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_ = 0u;
  source_ = 0u;
  count_ = 0u;
  chargecount_ = GOOGLE_ULONGLONG(0);
  remaincharge_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsumeLogCmd::~ConsumeLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ConsumeLogCmd)
  SharedDtor();
}

void ConsumeLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void ConsumeLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsumeLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsumeLogCmd_descriptor_;
}

const ConsumeLogCmd& ConsumeLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

ConsumeLogCmd* ConsumeLogCmd::default_instance_ = NULL;

ConsumeLogCmd* ConsumeLogCmd::New() const {
  return new ConsumeLogCmd;
}

void ConsumeLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConsumeLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 8;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(microtime_, after_);
    type_ = 0u;
  }
  if (_has_bits_[16 / 32] & 4128768) {
    ZR_(source_, remaincharge_);
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
    kind_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsumeLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ConsumeLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = CONSUME_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // optional uint32 time = 8;
      case 8: {
        if (tag == 64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_microtime;
        break;
      }

      // optional double microtime = 9;
      case 9: {
        if (tag == 73) {
         parse_microtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &microtime_)));
          set_has_microtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 11;
      case 11: {
        if (tag == 88) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_value;
        break;
      }

      // optional uint64 value = 12;
      case 12: {
        if (tag == 96) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_coin_type;
        break;
      }

      // optional uint32 coin_type = 13;
      case 13: {
        if (tag == 104) {
         parse_coin_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_type_)));
          set_has_coin_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_type;
        break;
      }

      // optional uint32 type = 14;
      case 14: {
        if (tag == 112) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_after;
        break;
      }

      // optional uint64 after = 15;
      case 15: {
        if (tag == 120) {
         parse_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &after_)));
          set_has_after();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 16;
      case 16: {
        if (tag == 128) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_mark())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_mark;
        if (input->ExpectTag(138)) goto parse_logid;
        break;
      }

      // optional string logid = 17;
      case 17: {
        if (tag == 138) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_kind;
        break;
      }

      // optional uint32 kind = 18;
      case 18: {
        if (tag == 144) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_source;
        break;
      }

      // optional uint32 source = 19;
      case 19: {
        if (tag == 152) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_count;
        break;
      }

      // optional uint32 count = 20;
      case 20: {
        if (tag == 160) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_chargecount;
        break;
      }

      // optional uint64 chargecount = 21;
      case 21: {
        if (tag == 168) {
         parse_chargecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chargecount_)));
          set_has_chargecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_remaincharge;
        break;
      }

      // optional uint64 remaincharge = 22;
      case 22: {
        if (tag == 176) {
         parse_remaincharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remaincharge_)));
          set_has_remaincharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ConsumeLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ConsumeLogCmd)
  return false;
#undef DO_
}

void ConsumeLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ConsumeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = CONSUME_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->time(), output);
  }

  // optional double microtime = 9;
  if (has_microtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->microtime(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 ispay = 11;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ispay(), output);
  }

  // optional uint64 value = 12;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->value(), output);
  }

  // optional uint32 coin_type = 13;
  if (has_coin_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->coin_type(), output);
  }

  // optional uint32 type = 14;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->type(), output);
  }

  // optional uint64 after = 15;
  if (has_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->after(), output);
  }

  // repeated uint32 mark = 16;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->mark(i), output);
  }

  // optional string logid = 17;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->logid(), output);
  }

  // optional uint32 kind = 18;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->kind(), output);
  }

  // optional uint32 source = 19;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->source(), output);
  }

  // optional uint32 count = 20;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->count(), output);
  }

  // optional uint64 chargecount = 21;
  if (has_chargecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->chargecount(), output);
  }

  // optional uint64 remaincharge = 22;
  if (has_remaincharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->remaincharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ConsumeLogCmd)
}

::google::protobuf::uint8* ConsumeLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ConsumeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = CONSUME_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->time(), target);
  }

  // optional double microtime = 9;
  if (has_microtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->microtime(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 ispay = 11;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ispay(), target);
  }

  // optional uint64 value = 12;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->value(), target);
  }

  // optional uint32 coin_type = 13;
  if (has_coin_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->coin_type(), target);
  }

  // optional uint32 type = 14;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->type(), target);
  }

  // optional uint64 after = 15;
  if (has_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->after(), target);
  }

  // repeated uint32 mark = 16;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->mark(i), target);
  }

  // optional string logid = 17;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->logid(), target);
  }

  // optional uint32 kind = 18;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->kind(), target);
  }

  // optional uint32 source = 19;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->source(), target);
  }

  // optional uint32 count = 20;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->count(), target);
  }

  // optional uint64 chargecount = 21;
  if (has_chargecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->chargecount(), target);
  }

  // optional uint64 remaincharge = 22;
  if (has_remaincharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->remaincharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ConsumeLogCmd)
  return target;
}

int ConsumeLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = CONSUME_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double microtime = 9;
    if (has_microtime()) {
      total_size += 1 + 8;
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 ispay = 11;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

    // optional uint64 value = 12;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional uint32 coin_type = 13;
    if (has_coin_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin_type());
    }

    // optional uint32 type = 14;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 after = 15;
    if (has_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->after());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string logid = 17;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

    // optional uint32 kind = 18;
    if (has_kind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

    // optional uint32 source = 19;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source());
    }

    // optional uint32 count = 20;
    if (has_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint64 chargecount = 21;
    if (has_chargecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chargecount());
    }

    // optional uint64 remaincharge = 22;
    if (has_remaincharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->remaincharge());
    }

  }
  // repeated uint32 mark = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsumeLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsumeLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsumeLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsumeLogCmd::MergeFrom(const ConsumeLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_microtime()) {
      set_microtime(from.microtime());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_coin_type()) {
      set_coin_type(from.coin_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_after()) {
      set_after(from.after());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_chargecount()) {
      set_chargecount(from.chargecount());
    }
    if (from.has_remaincharge()) {
      set_remaincharge(from.remaincharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsumeLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsumeLogCmd::CopyFrom(const ConsumeLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumeLogCmd::IsInitialized() const {

  return true;
}

void ConsumeLogCmd::Swap(ConsumeLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(microtime_, other->microtime_);
    std::swap(eid_, other->eid_);
    std::swap(ispay_, other->ispay_);
    std::swap(value_, other->value_);
    std::swap(coin_type_, other->coin_type_);
    std::swap(type_, other->type_);
    std::swap(after_, other->after_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(kind_, other->kind_);
    std::swap(source_, other->source_);
    std::swap(count_, other->count_);
    std::swap(chargecount_, other->chargecount_);
    std::swap(remaincharge_, other->remaincharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsumeLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsumeLogCmd_descriptor_;
  metadata.reflection = ConsumeLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemLogCmd::kCmdFieldNumber;
const int ItemLogCmd::kParamFieldNumber;
const int ItemLogCmd::kCidFieldNumber;
const int ItemLogCmd::kSidFieldNumber;
const int ItemLogCmd::kHidFieldNumber;
const int ItemLogCmd::kAccountFieldNumber;
const int ItemLogCmd::kPidFieldNumber;
const int ItemLogCmd::kEidFieldNumber;
const int ItemLogCmd::kTimeFieldNumber;
const int ItemLogCmd::kMicrotimeFieldNumber;
const int ItemLogCmd::kLogidFieldNumber;
const int ItemLogCmd::kIspayFieldNumber;
const int ItemLogCmd::kTypeFieldNumber;
const int ItemLogCmd::kItemidFieldNumber;
const int ItemLogCmd::kValueFieldNumber;
const int ItemLogCmd::kFromPidFieldNumber;
const int ItemLogCmd::kAfterFieldNumber;
const int ItemLogCmd::kAmountFieldNumber;
const int ItemLogCmd::kAmount2FieldNumber;
const int ItemLogCmd::kMarkFieldNumber;
const int ItemLogCmd::kSourceFieldNumber;
const int ItemLogCmd::kCountFieldNumber;
#endif  // !_MSC_VER

ItemLogCmd::ItemLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ItemLogCmd)
}

void ItemLogCmd::InitAsDefaultInstance() {
}

ItemLogCmd::ItemLogCmd(const ItemLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ItemLogCmd)
}

void ItemLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 9;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  eid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  microtime_ = 0;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ispay_ = 0u;
  type_ = 0u;
  itemid_ = 0u;
  value_ = 0u;
  from_pid_ = GOOGLE_ULONGLONG(0);
  after_ = 0u;
  amount_ = 0u;
  amount2_ = 0u;
  source_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemLogCmd::~ItemLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ItemLogCmd)
  SharedDtor();
}

void ItemLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void ItemLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemLogCmd_descriptor_;
}

const ItemLogCmd& ItemLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

ItemLogCmd* ItemLogCmd::default_instance_ = NULL;

ItemLogCmd* ItemLogCmd::New() const {
  return new ItemLogCmd;
}

void ItemLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(pid_, hid_);
    cmd_ = 204;
    param_ = 9;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    eid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(ispay_, from_pid_);
    time_ = 0u;
    microtime_ = 0;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 3604480) {
    ZR_(after_, amount_);
    ZR_(amount2_, count_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ItemLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = ITEM_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 8;
      case 8: {
        if (tag == 64) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_microtime;
        break;
      }

      // optional double microtime = 10;
      case 10: {
        if (tag == 81) {
         parse_microtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &microtime_)));
          set_has_microtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_logid;
        break;
      }

      // optional string logid = 11;
      case 11: {
        if (tag == 90) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 12;
      case 12: {
        if (tag == 96) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_type;
        break;
      }

      // optional uint32 type = 13;
      case 13: {
        if (tag == 104) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 14;
      case 14: {
        if (tag == 112) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_value;
        break;
      }

      // optional uint32 value = 15;
      case 15: {
        if (tag == 120) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_from_pid;
        break;
      }

      // optional uint64 from_pid = 16;
      case 16: {
        if (tag == 128) {
         parse_from_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_pid_)));
          set_has_from_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_after;
        break;
      }

      // optional uint32 after = 17;
      case 17: {
        if (tag == 136) {
         parse_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &after_)));
          set_has_after();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_amount;
        break;
      }

      // optional uint32 amount = 18;
      case 18: {
        if (tag == 144) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_amount2;
        break;
      }

      // optional uint32 amount2 = 19;
      case 19: {
        if (tag == 152) {
         parse_amount2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amount2_)));
          set_has_amount2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 20;
      case 20: {
        if (tag == 160) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160, input, this->mutable_mark())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_mark;
        if (input->ExpectTag(168)) goto parse_source;
        break;
      }

      // optional uint32 source = 21;
      case 21: {
        if (tag == 168) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_count;
        break;
      }

      // optional uint32 count = 22;
      case 22: {
        if (tag == 176) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ItemLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ItemLogCmd)
  return false;
#undef DO_
}

void ItemLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ItemLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = ITEM_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint64 eid = 8;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->eid(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional double microtime = 10;
  if (has_microtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->microtime(), output);
  }

  // optional string logid = 11;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->logid(), output);
  }

  // optional uint32 ispay = 12;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ispay(), output);
  }

  // optional uint32 type = 13;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->type(), output);
  }

  // optional uint32 itemid = 14;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->itemid(), output);
  }

  // optional uint32 value = 15;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->value(), output);
  }

  // optional uint64 from_pid = 16;
  if (has_from_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->from_pid(), output);
  }

  // optional uint32 after = 17;
  if (has_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->after(), output);
  }

  // optional uint32 amount = 18;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->amount(), output);
  }

  // optional uint32 amount2 = 19;
  if (has_amount2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->amount2(), output);
  }

  // repeated uint32 mark = 20;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->mark(i), output);
  }

  // optional uint32 source = 21;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->source(), output);
  }

  // optional uint32 count = 22;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ItemLogCmd)
}

::google::protobuf::uint8* ItemLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ItemLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = ITEM_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint64 eid = 8;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->eid(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional double microtime = 10;
  if (has_microtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->microtime(), target);
  }

  // optional string logid = 11;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->logid(), target);
  }

  // optional uint32 ispay = 12;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ispay(), target);
  }

  // optional uint32 type = 13;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->type(), target);
  }

  // optional uint32 itemid = 14;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->itemid(), target);
  }

  // optional uint32 value = 15;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->value(), target);
  }

  // optional uint64 from_pid = 16;
  if (has_from_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->from_pid(), target);
  }

  // optional uint32 after = 17;
  if (has_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->after(), target);
  }

  // optional uint32 amount = 18;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->amount(), target);
  }

  // optional uint32 amount2 = 19;
  if (has_amount2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->amount2(), target);
  }

  // repeated uint32 mark = 20;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(20, this->mark(i), target);
  }

  // optional uint32 source = 21;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->source(), target);
  }

  // optional uint32 count = 22;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ItemLogCmd)
  return target;
}

int ItemLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = ITEM_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint64 eid = 8;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional double microtime = 10;
    if (has_microtime()) {
      total_size += 1 + 8;
    }

    // optional string logid = 11;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

    // optional uint32 ispay = 12;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

    // optional uint32 type = 13;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 itemid = 14;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 value = 15;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint64 from_pid = 16;
    if (has_from_pid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_pid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 after = 17;
    if (has_after()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->after());
    }

    // optional uint32 amount = 18;
    if (has_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amount());
    }

    // optional uint32 amount2 = 19;
    if (has_amount2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amount2());
    }

    // optional uint32 source = 21;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source());
    }

    // optional uint32 count = 22;
    if (has_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated uint32 mark = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemLogCmd::MergeFrom(const ItemLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_microtime()) {
      set_microtime(from.microtime());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_from_pid()) {
      set_from_pid(from.from_pid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_after()) {
      set_after(from.after());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_amount2()) {
      set_amount2(from.amount2());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemLogCmd::CopyFrom(const ItemLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemLogCmd::IsInitialized() const {

  return true;
}

void ItemLogCmd::Swap(ItemLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(eid_, other->eid_);
    std::swap(time_, other->time_);
    std::swap(microtime_, other->microtime_);
    std::swap(logid_, other->logid_);
    std::swap(ispay_, other->ispay_);
    std::swap(type_, other->type_);
    std::swap(itemid_, other->itemid_);
    std::swap(value_, other->value_);
    std::swap(from_pid_, other->from_pid_);
    std::swap(after_, other->after_);
    std::swap(amount_, other->amount_);
    std::swap(amount2_, other->amount2_);
    mark_.Swap(&other->mark_);
    std::swap(source_, other->source_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemLogCmd_descriptor_;
  metadata.reflection = ItemLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropsLogCmd::kCmdFieldNumber;
const int PropsLogCmd::kParamFieldNumber;
const int PropsLogCmd::kCidFieldNumber;
const int PropsLogCmd::kSidFieldNumber;
const int PropsLogCmd::kHidFieldNumber;
const int PropsLogCmd::kAccountFieldNumber;
const int PropsLogCmd::kPidFieldNumber;
const int PropsLogCmd::kEidFieldNumber;
const int PropsLogCmd::kTimeFieldNumber;
const int PropsLogCmd::kMicrotimeFieldNumber;
const int PropsLogCmd::kLogidFieldNumber;
const int PropsLogCmd::kIspayFieldNumber;
const int PropsLogCmd::kItemidFieldNumber;
const int PropsLogCmd::kValueFieldNumber;
const int PropsLogCmd::kTypeFieldNumber;
const int PropsLogCmd::kAfterFieldNumber;
const int PropsLogCmd::kMarkFieldNumber;
const int PropsLogCmd::kSourceFieldNumber;
const int PropsLogCmd::kCountFieldNumber;
const int PropsLogCmd::kIteminfoFieldNumber;
#endif  // !_MSC_VER

PropsLogCmd::PropsLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PropsLogCmd)
}

void PropsLogCmd::InitAsDefaultInstance() {
}

PropsLogCmd::PropsLogCmd(const PropsLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PropsLogCmd)
}

void PropsLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 10;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  eid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  microtime_ = 0;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ispay_ = 0u;
  itemid_ = 0u;
  value_ = 0u;
  type_ = 0u;
  after_ = 0u;
  source_ = 0u;
  count_ = 0u;
  iteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropsLogCmd::~PropsLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PropsLogCmd)
  SharedDtor();
}

void PropsLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iteminfo_;
  }
  if (this != default_instance_) {
  }
}

void PropsLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropsLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropsLogCmd_descriptor_;
}

const PropsLogCmd& PropsLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

PropsLogCmd* PropsLogCmd::default_instance_ = NULL;

PropsLogCmd* PropsLogCmd::New() const {
  return new PropsLogCmd;
}

void PropsLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PropsLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(pid_, hid_);
    cmd_ = 204;
    param_ = 10;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    eid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(ispay_, type_);
    time_ = 0u;
    microtime_ = 0;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
    after_ = 0u;
  }
  if (_has_bits_[16 / 32] & 917504) {
    source_ = 0u;
    count_ = 0u;
    if (has_iteminfo()) {
      if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iteminfo_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropsLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PropsLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = PROPS_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 8;
      case 8: {
        if (tag == 64) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_microtime;
        break;
      }

      // optional double microtime = 10;
      case 10: {
        if (tag == 81) {
         parse_microtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &microtime_)));
          set_has_microtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_logid;
        break;
      }

      // optional string logid = 11;
      case 11: {
        if (tag == 90) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 12;
      case 12: {
        if (tag == 96) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 13;
      case 13: {
        if (tag == 104) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_value;
        break;
      }

      // optional uint32 value = 14;
      case 14: {
        if (tag == 112) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_type;
        break;
      }

      // optional uint32 type = 15;
      case 15: {
        if (tag == 120) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_after;
        break;
      }

      // optional uint32 after = 16;
      case 16: {
        if (tag == 128) {
         parse_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &after_)));
          set_has_after();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 17;
      case 17: {
        if (tag == 136) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_mark())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_mark;
        if (input->ExpectTag(144)) goto parse_source;
        break;
      }

      // optional uint32 source = 18;
      case 18: {
        if (tag == 144) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_count;
        break;
      }

      // optional uint32 count = 19;
      case 19: {
        if (tag == 152) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_iteminfo;
        break;
      }

      // optional string iteminfo = 20;
      case 20: {
        if (tag == 162) {
         parse_iteminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iteminfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iteminfo().data(), this->iteminfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iteminfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PropsLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PropsLogCmd)
  return false;
#undef DO_
}

void PropsLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PropsLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = PROPS_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint64 eid = 8;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->eid(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional double microtime = 10;
  if (has_microtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->microtime(), output);
  }

  // optional string logid = 11;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->logid(), output);
  }

  // optional uint32 ispay = 12;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ispay(), output);
  }

  // optional uint32 itemid = 13;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->itemid(), output);
  }

  // optional uint32 value = 14;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->value(), output);
  }

  // optional uint32 type = 15;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->type(), output);
  }

  // optional uint32 after = 16;
  if (has_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->after(), output);
  }

  // repeated uint32 mark = 17;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->mark(i), output);
  }

  // optional uint32 source = 18;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->source(), output);
  }

  // optional uint32 count = 19;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->count(), output);
  }

  // optional string iteminfo = 20;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iteminfo().data(), this->iteminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iteminfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PropsLogCmd)
}

::google::protobuf::uint8* PropsLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PropsLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = PROPS_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint64 eid = 8;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->eid(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional double microtime = 10;
  if (has_microtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->microtime(), target);
  }

  // optional string logid = 11;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->logid(), target);
  }

  // optional uint32 ispay = 12;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ispay(), target);
  }

  // optional uint32 itemid = 13;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->itemid(), target);
  }

  // optional uint32 value = 14;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->value(), target);
  }

  // optional uint32 type = 15;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->type(), target);
  }

  // optional uint32 after = 16;
  if (has_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->after(), target);
  }

  // repeated uint32 mark = 17;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->mark(i), target);
  }

  // optional uint32 source = 18;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->source(), target);
  }

  // optional uint32 count = 19;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->count(), target);
  }

  // optional string iteminfo = 20;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iteminfo().data(), this->iteminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iteminfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PropsLogCmd)
  return target;
}

int PropsLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = PROPS_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint64 eid = 8;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional double microtime = 10;
    if (has_microtime()) {
      total_size += 1 + 8;
    }

    // optional string logid = 11;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

    // optional uint32 ispay = 12;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

    // optional uint32 itemid = 13;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 value = 14;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 type = 15;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 after = 16;
    if (has_after()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->after());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional uint32 source = 18;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source());
    }

    // optional uint32 count = 19;
    if (has_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional string iteminfo = 20;
    if (has_iteminfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iteminfo());
    }

  }
  // repeated uint32 mark = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropsLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropsLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropsLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropsLogCmd::MergeFrom(const PropsLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_microtime()) {
      set_microtime(from.microtime());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_after()) {
      set_after(from.after());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_iteminfo()) {
      set_iteminfo(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropsLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropsLogCmd::CopyFrom(const PropsLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropsLogCmd::IsInitialized() const {

  return true;
}

void PropsLogCmd::Swap(PropsLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(eid_, other->eid_);
    std::swap(time_, other->time_);
    std::swap(microtime_, other->microtime_);
    std::swap(logid_, other->logid_);
    std::swap(ispay_, other->ispay_);
    std::swap(itemid_, other->itemid_);
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(after_, other->after_);
    mark_.Swap(&other->mark_);
    std::swap(source_, other->source_);
    std::swap(count_, other->count_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropsLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropsLogCmd_descriptor_;
  metadata.reflection = PropsLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionLogCmd::kCmdFieldNumber;
const int TransactionLogCmd::kParamFieldNumber;
const int TransactionLogCmd::kCidFieldNumber;
const int TransactionLogCmd::kSidFieldNumber;
const int TransactionLogCmd::kHidFieldNumber;
const int TransactionLogCmd::kFromAccountFieldNumber;
const int TransactionLogCmd::kFromPidFieldNumber;
const int TransactionLogCmd::kToAccountFieldNumber;
const int TransactionLogCmd::kToPidFieldNumber;
const int TransactionLogCmd::kEidFieldNumber;
const int TransactionLogCmd::kTimeFieldNumber;
const int TransactionLogCmd::kIspayFieldNumber;
const int TransactionLogCmd::kItemidFieldNumber;
const int TransactionLogCmd::kValueFieldNumber;
const int TransactionLogCmd::kMarkFieldNumber;
const int TransactionLogCmd::kFeeFieldNumber;
const int TransactionLogCmd::kFee2FieldNumber;
const int TransactionLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

TransactionLogCmd::TransactionLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TransactionLogCmd)
}

void TransactionLogCmd::InitAsDefaultInstance() {
}

TransactionLogCmd::TransactionLogCmd(const TransactionLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TransactionLogCmd)
}

void TransactionLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 11;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  from_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_pid_ = GOOGLE_ULONGLONG(0);
  to_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_pid_ = GOOGLE_ULONGLONG(0);
  eid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ispay_ = 0u;
  itemid_ = 0u;
  value_ = 0u;
  fee_ = 0u;
  fee2_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionLogCmd::~TransactionLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TransactionLogCmd)
  SharedDtor();
}

void TransactionLogCmd::SharedDtor() {
  if (from_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_account_;
  }
  if (to_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void TransactionLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionLogCmd_descriptor_;
}

const TransactionLogCmd& TransactionLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

TransactionLogCmd* TransactionLogCmd::default_instance_ = NULL;

TransactionLogCmd* TransactionLogCmd::New() const {
  return new TransactionLogCmd;
}

void TransactionLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TransactionLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    cmd_ = 204;
    param_ = 11;
    hid_ = 0u;
    if (has_from_account()) {
      if (from_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_account_->clear();
      }
    }
    from_pid_ = GOOGLE_ULONGLONG(0);
    if (has_to_account()) {
      if (to_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 48896) {
    ZR_(time_, itemid_);
    ZR_(value_, fee_);
  }
  if (_has_bits_[16 / 32] & 196608) {
    fee2_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TransactionLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = TRANSACTION_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_from_account;
        break;
      }

      // optional string from_account = 6;
      case 6: {
        if (tag == 50) {
         parse_from_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_account().data(), this->from_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from_account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_from_pid;
        break;
      }

      // optional uint64 from_pid = 7;
      case 7: {
        if (tag == 56) {
         parse_from_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_pid_)));
          set_has_from_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_to_account;
        break;
      }

      // optional string to_account = 8;
      case 8: {
        if (tag == 66) {
         parse_to_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_account().data(), this->to_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "to_account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_to_pid;
        break;
      }

      // optional uint64 to_pid = 9;
      case 9: {
        if (tag == 72) {
         parse_to_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_pid_)));
          set_has_to_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_time;
        break;
      }

      // optional uint32 time = 11;
      case 11: {
        if (tag == 88) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 12;
      case 12: {
        if (tag == 96) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 13;
      case 13: {
        if (tag == 104) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_value;
        break;
      }

      // optional uint32 value = 14;
      case 14: {
        if (tag == 112) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 15;
      case 15: {
        if (tag == 120) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_mark())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_mark;
        if (input->ExpectTag(128)) goto parse_fee;
        break;
      }

      // optional uint32 fee = 16;
      case 16: {
        if (tag == 128) {
         parse_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fee_)));
          set_has_fee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_fee2;
        break;
      }

      // optional uint32 fee2 = 17;
      case 17: {
        if (tag == 136) {
         parse_fee2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fee2_)));
          set_has_fee2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_logid;
        break;
      }

      // optional string logid = 18;
      case 18: {
        if (tag == 146) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TransactionLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TransactionLogCmd)
  return false;
#undef DO_
}

void TransactionLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TransactionLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = TRANSACTION_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string from_account = 6;
  if (has_from_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_account().data(), this->from_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->from_account(), output);
  }

  // optional uint64 from_pid = 7;
  if (has_from_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->from_pid(), output);
  }

  // optional string to_account = 8;
  if (has_to_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_account().data(), this->to_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->to_account(), output);
  }

  // optional uint64 to_pid = 9;
  if (has_to_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->to_pid(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 time = 11;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->time(), output);
  }

  // optional uint32 ispay = 12;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ispay(), output);
  }

  // optional uint32 itemid = 13;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->itemid(), output);
  }

  // optional uint32 value = 14;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->value(), output);
  }

  // repeated uint32 mark = 15;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->mark(i), output);
  }

  // optional uint32 fee = 16;
  if (has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fee(), output);
  }

  // optional uint32 fee2 = 17;
  if (has_fee2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fee2(), output);
  }

  // optional string logid = 18;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TransactionLogCmd)
}

::google::protobuf::uint8* TransactionLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TransactionLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = TRANSACTION_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string from_account = 6;
  if (has_from_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_account().data(), this->from_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->from_account(), target);
  }

  // optional uint64 from_pid = 7;
  if (has_from_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->from_pid(), target);
  }

  // optional string to_account = 8;
  if (has_to_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_account().data(), this->to_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->to_account(), target);
  }

  // optional uint64 to_pid = 9;
  if (has_to_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->to_pid(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 time = 11;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->time(), target);
  }

  // optional uint32 ispay = 12;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ispay(), target);
  }

  // optional uint32 itemid = 13;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->itemid(), target);
  }

  // optional uint32 value = 14;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->value(), target);
  }

  // repeated uint32 mark = 15;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->mark(i), target);
  }

  // optional uint32 fee = 16;
  if (has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fee(), target);
  }

  // optional uint32 fee2 = 17;
  if (has_fee2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fee2(), target);
  }

  // optional string logid = 18;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TransactionLogCmd)
  return target;
}

int TransactionLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = TRANSACTION_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string from_account = 6;
    if (has_from_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_account());
    }

    // optional uint64 from_pid = 7;
    if (has_from_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_pid());
    }

    // optional string to_account = 8;
    if (has_to_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_account());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 to_pid = 9;
    if (has_to_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_pid());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 time = 11;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 ispay = 12;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

    // optional uint32 itemid = 13;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 value = 14;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 fee = 16;
    if (has_fee()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fee());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 fee2 = 17;
    if (has_fee2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fee2());
    }

    // optional string logid = 18;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 1 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionLogCmd::MergeFrom(const TransactionLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_from_account()) {
      set_from_account(from.from_account());
    }
    if (from.has_from_pid()) {
      set_from_pid(from.from_pid());
    }
    if (from.has_to_account()) {
      set_to_account(from.to_account());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_to_pid()) {
      set_to_pid(from.to_pid());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_fee()) {
      set_fee(from.fee());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fee2()) {
      set_fee2(from.fee2());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionLogCmd::CopyFrom(const TransactionLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionLogCmd::IsInitialized() const {

  return true;
}

void TransactionLogCmd::Swap(TransactionLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(from_account_, other->from_account_);
    std::swap(from_pid_, other->from_pid_);
    std::swap(to_account_, other->to_account_);
    std::swap(to_pid_, other->to_pid_);
    std::swap(eid_, other->eid_);
    std::swap(time_, other->time_);
    std::swap(ispay_, other->ispay_);
    std::swap(itemid_, other->itemid_);
    std::swap(value_, other->value_);
    mark_.Swap(&other->mark_);
    std::swap(fee_, other->fee_);
    std::swap(fee2_, other->fee2_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionLogCmd_descriptor_;
  metadata.reflection = TransactionLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatLogCmd::kCmdFieldNumber;
const int ChatLogCmd::kParamFieldNumber;
const int ChatLogCmd::kCidFieldNumber;
const int ChatLogCmd::kSidFieldNumber;
const int ChatLogCmd::kHidFieldNumber;
const int ChatLogCmd::kFromAccountFieldNumber;
const int ChatLogCmd::kFromNameFieldNumber;
const int ChatLogCmd::kFromPidFieldNumber;
const int ChatLogCmd::kToAccountFieldNumber;
const int ChatLogCmd::kToNameFieldNumber;
const int ChatLogCmd::kToPidFieldNumber;
const int ChatLogCmd::kTypeFieldNumber;
const int ChatLogCmd::kTimeFieldNumber;
const int ChatLogCmd::kIspayFieldNumber;
const int ChatLogCmd::kContentFieldNumber;
const int ChatLogCmd::kVipFieldNumber;
const int ChatLogCmd::kLevelFieldNumber;
const int ChatLogCmd::kEidFieldNumber;
const int ChatLogCmd::kChattypeFieldNumber;
const int ChatLogCmd::kVoicelenFieldNumber;
const int ChatLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

ChatLogCmd::ChatLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatLogCmd)
}

void ChatLogCmd::InitAsDefaultInstance() {
}

ChatLogCmd::ChatLogCmd(const ChatLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatLogCmd)
}

void ChatLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 12;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  from_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_pid_ = GOOGLE_ULONGLONG(0);
  to_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_pid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  time_ = 0u;
  ispay_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vip_ = 0u;
  level_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  chattype_ = 0;
  voicelen_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatLogCmd::~ChatLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChatLogCmd)
  SharedDtor();
}

void ChatLogCmd::SharedDtor() {
  if (from_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_account_;
  }
  if (from_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_name_;
  }
  if (to_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_account_;
  }
  if (to_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_name_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void ChatLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatLogCmd_descriptor_;
}

const ChatLogCmd& ChatLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

ChatLogCmd* ChatLogCmd::default_instance_ = NULL;

ChatLogCmd* ChatLogCmd::New() const {
  return new ChatLogCmd;
}

void ChatLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(from_pid_, hid_);
    cmd_ = 204;
    param_ = 12;
    if (has_from_account()) {
      if (from_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_account_->clear();
      }
    }
    if (has_from_name()) {
      if (from_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(to_pid_, ispay_);
    if (has_to_account()) {
      if (to_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_account_->clear();
      }
    }
    if (has_to_name()) {
      if (to_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_name_->clear();
      }
    }
    type_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    vip_ = 0u;
  }
  if (_has_bits_[16 / 32] & 2031616) {
    ZR_(level_, voicelen_);
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = CHAT_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_from_account;
        break;
      }

      // optional string from_account = 6;
      case 6: {
        if (tag == 50) {
         parse_from_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_account().data(), this->from_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from_account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_from_name;
        break;
      }

      // optional string from_name = 7;
      case 7: {
        if (tag == 58) {
         parse_from_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_name().data(), this->from_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_from_pid;
        break;
      }

      // optional uint64 from_pid = 8;
      case 8: {
        if (tag == 64) {
         parse_from_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_pid_)));
          set_has_from_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_to_account;
        break;
      }

      // optional string to_account = 9;
      case 9: {
        if (tag == 74) {
         parse_to_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_account().data(), this->to_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "to_account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_to_name;
        break;
      }

      // optional string to_name = 10;
      case 10: {
        if (tag == 82) {
         parse_to_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_name().data(), this->to_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "to_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_to_pid;
        break;
      }

      // optional uint64 to_pid = 11;
      case 11: {
        if (tag == 88) {
         parse_to_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_pid_)));
          set_has_to_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional uint32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_time;
        break;
      }

      // optional uint32 time = 13;
      case 13: {
        if (tag == 104) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 14;
      case 14: {
        if (tag == 112) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_content;
        break;
      }

      // optional string content = 15;
      case 15: {
        if (tag == 122) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_vip;
        break;
      }

      // optional uint32 vip = 16;
      case 16: {
        if (tag == 128) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_level;
        break;
      }

      // optional uint32 level = 17;
      case 17: {
        if (tag == 136) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 18;
      case 18: {
        if (tag == 144) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_chattype;
        break;
      }

      // optional .Cmd.EChatType chattype = 19;
      case 19: {
        if (tag == 152) {
         parse_chattype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatType_IsValid(value)) {
            set_chattype(static_cast< ::Cmd::EChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_voicelen;
        break;
      }

      // optional uint32 voicelen = 20;
      case 20: {
        if (tag == 160) {
         parse_voicelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voicelen_)));
          set_has_voicelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_logid;
        break;
      }

      // optional string logid = 21;
      case 21: {
        if (tag == 170) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatLogCmd)
  return false;
#undef DO_
}

void ChatLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = CHAT_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string from_account = 6;
  if (has_from_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_account().data(), this->from_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->from_account(), output);
  }

  // optional string from_name = 7;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->from_name(), output);
  }

  // optional uint64 from_pid = 8;
  if (has_from_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->from_pid(), output);
  }

  // optional string to_account = 9;
  if (has_to_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_account().data(), this->to_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->to_account(), output);
  }

  // optional string to_name = 10;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->to_name(), output);
  }

  // optional uint64 to_pid = 11;
  if (has_to_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->to_pid(), output);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }

  // optional uint32 time = 13;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->time(), output);
  }

  // optional uint32 ispay = 14;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->ispay(), output);
  }

  // optional string content = 15;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->content(), output);
  }

  // optional uint32 vip = 16;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->vip(), output);
  }

  // optional uint32 level = 17;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->level(), output);
  }

  // optional uint64 eid = 18;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->eid(), output);
  }

  // optional .Cmd.EChatType chattype = 19;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->chattype(), output);
  }

  // optional uint32 voicelen = 20;
  if (has_voicelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->voicelen(), output);
  }

  // optional string logid = 21;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatLogCmd)
}

::google::protobuf::uint8* ChatLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = CHAT_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string from_account = 6;
  if (has_from_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_account().data(), this->from_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->from_account(), target);
  }

  // optional string from_name = 7;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->from_name(), target);
  }

  // optional uint64 from_pid = 8;
  if (has_from_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->from_pid(), target);
  }

  // optional string to_account = 9;
  if (has_to_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_account().data(), this->to_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->to_account(), target);
  }

  // optional string to_name = 10;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->to_name(), target);
  }

  // optional uint64 to_pid = 11;
  if (has_to_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->to_pid(), target);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->type(), target);
  }

  // optional uint32 time = 13;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->time(), target);
  }

  // optional uint32 ispay = 14;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->ispay(), target);
  }

  // optional string content = 15;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->content(), target);
  }

  // optional uint32 vip = 16;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->vip(), target);
  }

  // optional uint32 level = 17;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->level(), target);
  }

  // optional uint64 eid = 18;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->eid(), target);
  }

  // optional .Cmd.EChatType chattype = 19;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->chattype(), target);
  }

  // optional uint32 voicelen = 20;
  if (has_voicelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->voicelen(), target);
  }

  // optional string logid = 21;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatLogCmd)
  return target;
}

int ChatLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = CHAT_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string from_account = 6;
    if (has_from_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_account());
    }

    // optional string from_name = 7;
    if (has_from_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_name());
    }

    // optional uint64 from_pid = 8;
    if (has_from_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_pid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string to_account = 9;
    if (has_to_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_account());
    }

    // optional string to_name = 10;
    if (has_to_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_name());
    }

    // optional uint64 to_pid = 11;
    if (has_to_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_pid());
    }

    // optional uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 time = 13;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 ispay = 14;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

    // optional string content = 15;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint32 vip = 16;
    if (has_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 level = 17;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 eid = 18;
    if (has_eid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional .Cmd.EChatType chattype = 19;
    if (has_chattype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
    }

    // optional uint32 voicelen = 20;
    if (has_voicelen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voicelen());
    }

    // optional string logid = 21;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatLogCmd::MergeFrom(const ChatLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_from_account()) {
      set_from_account(from.from_account());
    }
    if (from.has_from_name()) {
      set_from_name(from.from_name());
    }
    if (from.has_from_pid()) {
      set_from_pid(from.from_pid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_to_account()) {
      set_to_account(from.to_account());
    }
    if (from.has_to_name()) {
      set_to_name(from.to_name());
    }
    if (from.has_to_pid()) {
      set_to_pid(from.to_pid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_voicelen()) {
      set_voicelen(from.voicelen());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatLogCmd::CopyFrom(const ChatLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatLogCmd::IsInitialized() const {

  return true;
}

void ChatLogCmd::Swap(ChatLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(from_account_, other->from_account_);
    std::swap(from_name_, other->from_name_);
    std::swap(from_pid_, other->from_pid_);
    std::swap(to_account_, other->to_account_);
    std::swap(to_name_, other->to_name_);
    std::swap(to_pid_, other->to_pid_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(ispay_, other->ispay_);
    std::swap(content_, other->content_);
    std::swap(vip_, other->vip_);
    std::swap(level_, other->level_);
    std::swap(eid_, other->eid_);
    std::swap(chattype_, other->chattype_);
    std::swap(voicelen_, other->voicelen_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatLogCmd_descriptor_;
  metadata.reflection = ChatLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelLogCmd::kCmdFieldNumber;
const int LevelLogCmd::kParamFieldNumber;
const int LevelLogCmd::kCidFieldNumber;
const int LevelLogCmd::kSidFieldNumber;
const int LevelLogCmd::kHidFieldNumber;
const int LevelLogCmd::kAccountFieldNumber;
const int LevelLogCmd::kPidFieldNumber;
const int LevelLogCmd::kTimeFieldNumber;
const int LevelLogCmd::kFromFieldNumber;
const int LevelLogCmd::kToFieldNumber;
const int LevelLogCmd::kIspayFieldNumber;
const int LevelLogCmd::kTypeFieldNumber;
const int LevelLogCmd::kMarkFieldNumber;
const int LevelLogCmd::kLogidFieldNumber;
const int LevelLogCmd::kCosttimeFieldNumber;
#endif  // !_MSC_VER

LevelLogCmd::LevelLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LevelLogCmd)
}

void LevelLogCmd::InitAsDefaultInstance() {
}

LevelLogCmd::LevelLogCmd(const LevelLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LevelLogCmd)
}

void LevelLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 13;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  from_ = 0u;
  to_ = 0u;
  ispay_ = 0u;
  type_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  costtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelLogCmd::~LevelLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LevelLogCmd)
  SharedDtor();
}

void LevelLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void LevelLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelLogCmd_descriptor_;
}

const LevelLogCmd& LevelLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

LevelLogCmd* LevelLogCmd::default_instance_ = NULL;

LevelLogCmd* LevelLogCmd::New() const {
  return new LevelLogCmd;
}

void LevelLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LevelLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 13;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 28416) {
    ZR_(from_, type_);
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
    costtime_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LevelLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = LEVEL_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // optional uint32 time = 8;
      case 8: {
        if (tag == 64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_from;
        break;
      }

      // optional uint32 from = 9;
      case 9: {
        if (tag == 72) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_to;
        break;
      }

      // optional uint32 to = 10;
      case 10: {
        if (tag == 80) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 11;
      case 11: {
        if (tag == 88) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional uint32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 13;
      case 13: {
        if (tag == 104) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_mark())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mark;
        if (input->ExpectTag(114)) goto parse_logid;
        break;
      }

      // optional string logid = 14;
      case 14: {
        if (tag == 114) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_costtime;
        break;
      }

      // optional uint32 costtime = 15;
      case 15: {
        if (tag == 120) {
         parse_costtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costtime_)));
          set_has_costtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LevelLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LevelLogCmd)
  return false;
#undef DO_
}

void LevelLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LevelLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = LEVEL_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->time(), output);
  }

  // optional uint32 from = 9;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->from(), output);
  }

  // optional uint32 to = 10;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->to(), output);
  }

  // optional uint32 ispay = 11;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ispay(), output);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }

  // repeated uint32 mark = 13;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->mark(i), output);
  }

  // optional string logid = 14;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->logid(), output);
  }

  // optional uint32 costtime = 15;
  if (has_costtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->costtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LevelLogCmd)
}

::google::protobuf::uint8* LevelLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LevelLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = LEVEL_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->time(), target);
  }

  // optional uint32 from = 9;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->from(), target);
  }

  // optional uint32 to = 10;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->to(), target);
  }

  // optional uint32 ispay = 11;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ispay(), target);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->type(), target);
  }

  // repeated uint32 mark = 13;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->mark(i), target);
  }

  // optional string logid = 14;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->logid(), target);
  }

  // optional uint32 costtime = 15;
  if (has_costtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->costtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LevelLogCmd)
  return target;
}

int LevelLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = LEVEL_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 from = 9;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from());
    }

    // optional uint32 to = 10;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to());
    }

    // optional uint32 ispay = 11;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

    // optional uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string logid = 14;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

    // optional uint32 costtime = 15;
    if (has_costtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costtime());
    }

  }
  // repeated uint32 mark = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 1 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelLogCmd::MergeFrom(const LevelLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_costtime()) {
      set_costtime(from.costtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelLogCmd::CopyFrom(const LevelLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelLogCmd::IsInitialized() const {

  return true;
}

void LevelLogCmd::Swap(LevelLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(ispay_, other->ispay_);
    std::swap(type_, other->type_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(costtime_, other->costtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelLogCmd_descriptor_;
  metadata.reflection = LevelLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineLogCmd::kCmdFieldNumber;
const int OnlineLogCmd::kParamFieldNumber;
const int OnlineLogCmd::kCidFieldNumber;
const int OnlineLogCmd::kSidFieldNumber;
const int OnlineLogCmd::kTimeFieldNumber;
const int OnlineLogCmd::kCountAllFieldNumber;
const int OnlineLogCmd::kCountWebFieldNumber;
const int OnlineLogCmd::kCountClientFieldNumber;
const int OnlineLogCmd::kCountIosFieldNumber;
const int OnlineLogCmd::kCountAndroidFieldNumber;
const int OnlineLogCmd::kLogidFieldNumber;
const int OnlineLogCmd::kLineidFieldNumber;
#endif  // !_MSC_VER

OnlineLogCmd::OnlineLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OnlineLogCmd)
}

void OnlineLogCmd::InitAsDefaultInstance() {
}

OnlineLogCmd::OnlineLogCmd(const OnlineLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OnlineLogCmd)
}

void OnlineLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 14;
  cid_ = 0u;
  sid_ = 0u;
  time_ = 0u;
  count_all_ = 0u;
  count_web_ = 0u;
  count_client_ = 0u;
  count_ios_ = 0u;
  count_android_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lineid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineLogCmd::~OnlineLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.OnlineLogCmd)
  SharedDtor();
}

void OnlineLogCmd::SharedDtor() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void OnlineLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineLogCmd_descriptor_;
}

const OnlineLogCmd& OnlineLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

OnlineLogCmd* OnlineLogCmd::default_instance_ = NULL;

OnlineLogCmd* OnlineLogCmd::New() const {
  return new OnlineLogCmd;
}

void OnlineLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OnlineLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, count_client_);
    cmd_ = 204;
    param_ = 14;
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(count_ios_, count_android_);
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
    lineid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OnlineLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = ONLINE_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5;
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count_all;
        break;
      }

      // optional uint32 count_all = 6;
      case 6: {
        if (tag == 48) {
         parse_count_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_all_)));
          set_has_count_all();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_count_web;
        break;
      }

      // optional uint32 count_web = 7;
      case 7: {
        if (tag == 56) {
         parse_count_web:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_web_)));
          set_has_count_web();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_count_client;
        break;
      }

      // optional uint32 count_client = 8;
      case 8: {
        if (tag == 64) {
         parse_count_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_client_)));
          set_has_count_client();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_count_ios;
        break;
      }

      // optional uint32 count_ios = 9;
      case 9: {
        if (tag == 72) {
         parse_count_ios:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_ios_)));
          set_has_count_ios();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_count_android;
        break;
      }

      // optional uint32 count_android = 10;
      case 10: {
        if (tag == 80) {
         parse_count_android:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_android_)));
          set_has_count_android();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_logid;
        break;
      }

      // optional string logid = 11;
      case 11: {
        if (tag == 90) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_lineid;
        break;
      }

      // optional uint32 lineid = 12;
      case 12: {
        if (tag == 96) {
         parse_lineid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lineid_)));
          set_has_lineid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OnlineLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OnlineLogCmd)
  return false;
#undef DO_
}

void OnlineLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OnlineLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = ONLINE_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional uint32 count_all = 6;
  if (has_count_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count_all(), output);
  }

  // optional uint32 count_web = 7;
  if (has_count_web()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->count_web(), output);
  }

  // optional uint32 count_client = 8;
  if (has_count_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->count_client(), output);
  }

  // optional uint32 count_ios = 9;
  if (has_count_ios()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->count_ios(), output);
  }

  // optional uint32 count_android = 10;
  if (has_count_android()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->count_android(), output);
  }

  // optional string logid = 11;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->logid(), output);
  }

  // optional uint32 lineid = 12;
  if (has_lineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->lineid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OnlineLogCmd)
}

::google::protobuf::uint8* OnlineLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OnlineLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = ONLINE_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional uint32 count_all = 6;
  if (has_count_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count_all(), target);
  }

  // optional uint32 count_web = 7;
  if (has_count_web()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->count_web(), target);
  }

  // optional uint32 count_client = 8;
  if (has_count_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->count_client(), target);
  }

  // optional uint32 count_ios = 9;
  if (has_count_ios()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->count_ios(), target);
  }

  // optional uint32 count_android = 10;
  if (has_count_android()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->count_android(), target);
  }

  // optional string logid = 11;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->logid(), target);
  }

  // optional uint32 lineid = 12;
  if (has_lineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->lineid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OnlineLogCmd)
  return target;
}

int OnlineLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = ONLINE_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 count_all = 6;
    if (has_count_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_all());
    }

    // optional uint32 count_web = 7;
    if (has_count_web()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_web());
    }

    // optional uint32 count_client = 8;
    if (has_count_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_client());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 count_ios = 9;
    if (has_count_ios()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_ios());
    }

    // optional uint32 count_android = 10;
    if (has_count_android()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_android());
    }

    // optional string logid = 11;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

    // optional uint32 lineid = 12;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lineid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineLogCmd::MergeFrom(const OnlineLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_count_all()) {
      set_count_all(from.count_all());
    }
    if (from.has_count_web()) {
      set_count_web(from.count_web());
    }
    if (from.has_count_client()) {
      set_count_client(from.count_client());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_count_ios()) {
      set_count_ios(from.count_ios());
    }
    if (from.has_count_android()) {
      set_count_android(from.count_android());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_lineid()) {
      set_lineid(from.lineid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineLogCmd::CopyFrom(const OnlineLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineLogCmd::IsInitialized() const {

  return true;
}

void OnlineLogCmd::Swap(OnlineLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(time_, other->time_);
    std::swap(count_all_, other->count_all_);
    std::swap(count_web_, other->count_web_);
    std::swap(count_client_, other->count_client_);
    std::swap(count_ios_, other->count_ios_);
    std::swap(count_android_, other->count_android_);
    std::swap(logid_, other->logid_);
    std::swap(lineid_, other->lineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineLogCmd_descriptor_;
  metadata.reflection = OnlineLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SnapshotLogCmd::SnapshotLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SnapshotLogCmd)
}

void SnapshotLogCmd::InitAsDefaultInstance() {
}

SnapshotLogCmd::SnapshotLogCmd(const SnapshotLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SnapshotLogCmd)
}

void SnapshotLogCmd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotLogCmd::~SnapshotLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SnapshotLogCmd)
  SharedDtor();
}

void SnapshotLogCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapshotLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotLogCmd_descriptor_;
}

const SnapshotLogCmd& SnapshotLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

SnapshotLogCmd* SnapshotLogCmd::default_instance_ = NULL;

SnapshotLogCmd* SnapshotLogCmd::New() const {
  return new SnapshotLogCmd;
}

void SnapshotLogCmd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SnapshotLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SnapshotLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SnapshotLogCmd)
  return false;
#undef DO_
}

void SnapshotLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SnapshotLogCmd)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SnapshotLogCmd)
}

::google::protobuf::uint8* SnapshotLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SnapshotLogCmd)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SnapshotLogCmd)
  return target;
}

int SnapshotLogCmd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotLogCmd::MergeFrom(const SnapshotLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotLogCmd::CopyFrom(const SnapshotLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotLogCmd::IsInitialized() const {

  return true;
}

void SnapshotLogCmd::Swap(SnapshotLogCmd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotLogCmd_descriptor_;
  metadata.reflection = SnapshotLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckpointLogCmd::kCmdFieldNumber;
const int CheckpointLogCmd::kParamFieldNumber;
const int CheckpointLogCmd::kCidFieldNumber;
const int CheckpointLogCmd::kSidFieldNumber;
const int CheckpointLogCmd::kHidFieldNumber;
const int CheckpointLogCmd::kAccountFieldNumber;
const int CheckpointLogCmd::kPidFieldNumber;
const int CheckpointLogCmd::kEidFieldNumber;
const int CheckpointLogCmd::kTimeFieldNumber;
const int CheckpointLogCmd::kTypeFieldNumber;
const int CheckpointLogCmd::kCpidFieldNumber;
const int CheckpointLogCmd::kResultFieldNumber;
const int CheckpointLogCmd::kStarFieldNumber;
const int CheckpointLogCmd::kIspayFieldNumber;
const int CheckpointLogCmd::kVipFieldNumber;
const int CheckpointLogCmd::kLogidFieldNumber;
const int CheckpointLogCmd::kIsfirstFieldNumber;
#endif  // !_MSC_VER

CheckpointLogCmd::CheckpointLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CheckpointLogCmd)
}

void CheckpointLogCmd::InitAsDefaultInstance() {
}

CheckpointLogCmd::CheckpointLogCmd(const CheckpointLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CheckpointLogCmd)
}

void CheckpointLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 16;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  eid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  type_ = 0u;
  cpid_ = 0u;
  result_ = 0u;
  star_ = 0u;
  ispay_ = 0u;
  vip_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isfirst_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckpointLogCmd::~CheckpointLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CheckpointLogCmd)
  SharedDtor();
}

void CheckpointLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void CheckpointLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckpointLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckpointLogCmd_descriptor_;
}

const CheckpointLogCmd& CheckpointLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

CheckpointLogCmd* CheckpointLogCmd::default_instance_ = NULL;

CheckpointLogCmd* CheckpointLogCmd::New() const {
  return new CheckpointLogCmd;
}

void CheckpointLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CheckpointLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(pid_, hid_);
    cmd_ = 204;
    param_ = 16;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    eid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(type_, vip_);
    time_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }
  isfirst_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckpointLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CheckpointLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = CHECKPOINT_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 8;
      case 8: {
        if (tag == 64) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // optional uint32 type = 10;
      case 10: {
        if (tag == 80) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cpid;
        break;
      }

      // optional uint32 cpid = 11;
      case 11: {
        if (tag == 88) {
         parse_cpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpid_)));
          set_has_cpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_result;
        break;
      }

      // optional uint32 result = 12;
      case 12: {
        if (tag == 96) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_star;
        break;
      }

      // optional uint32 star = 13;
      case 13: {
        if (tag == 104) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 14;
      case 14: {
        if (tag == 112) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_vip;
        break;
      }

      // optional uint32 vip = 15;
      case 15: {
        if (tag == 120) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_logid;
        break;
      }

      // optional string logid = 16;
      case 16: {
        if (tag == 130) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_isfirst;
        break;
      }

      // optional uint32 isfirst = 17;
      case 17: {
        if (tag == 136) {
         parse_isfirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfirst_)));
          set_has_isfirst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CheckpointLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CheckpointLogCmd)
  return false;
#undef DO_
}

void CheckpointLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CheckpointLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = CHECKPOINT_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint64 eid = 8;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->eid(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint32 type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->type(), output);
  }

  // optional uint32 cpid = 11;
  if (has_cpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cpid(), output);
  }

  // optional uint32 result = 12;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->result(), output);
  }

  // optional uint32 star = 13;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->star(), output);
  }

  // optional uint32 ispay = 14;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->ispay(), output);
  }

  // optional uint32 vip = 15;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->vip(), output);
  }

  // optional string logid = 16;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->logid(), output);
  }

  // optional uint32 isfirst = 17;
  if (has_isfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->isfirst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CheckpointLogCmd)
}

::google::protobuf::uint8* CheckpointLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CheckpointLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = CHECKPOINT_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint64 eid = 8;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->eid(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint32 type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->type(), target);
  }

  // optional uint32 cpid = 11;
  if (has_cpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cpid(), target);
  }

  // optional uint32 result = 12;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->result(), target);
  }

  // optional uint32 star = 13;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->star(), target);
  }

  // optional uint32 ispay = 14;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->ispay(), target);
  }

  // optional uint32 vip = 15;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->vip(), target);
  }

  // optional string logid = 16;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->logid(), target);
  }

  // optional uint32 isfirst = 17;
  if (has_isfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->isfirst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CheckpointLogCmd)
  return target;
}

int CheckpointLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = CHECKPOINT_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint64 eid = 8;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 cpid = 11;
    if (has_cpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpid());
    }

    // optional uint32 result = 12;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 star = 13;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 ispay = 14;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

    // optional uint32 vip = 15;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // optional string logid = 16;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 isfirst = 17;
    if (has_isfirst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfirst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckpointLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckpointLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckpointLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckpointLogCmd::MergeFrom(const CheckpointLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cpid()) {
      set_cpid(from.cpid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_isfirst()) {
      set_isfirst(from.isfirst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckpointLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckpointLogCmd::CopyFrom(const CheckpointLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckpointLogCmd::IsInitialized() const {

  return true;
}

void CheckpointLogCmd::Swap(CheckpointLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(eid_, other->eid_);
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(cpid_, other->cpid_);
    std::swap(result_, other->result_);
    std::swap(star_, other->star_);
    std::swap(ispay_, other->ispay_);
    std::swap(vip_, other->vip_);
    std::swap(logid_, other->logid_);
    std::swap(isfirst_, other->isfirst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckpointLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckpointLogCmd_descriptor_;
  metadata.reflection = CheckpointLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankLogCmd::kCmdFieldNumber;
const int RankLogCmd::kParamFieldNumber;
const int RankLogCmd::kCidFieldNumber;
const int RankLogCmd::kSidFieldNumber;
const int RankLogCmd::kHidFieldNumber;
const int RankLogCmd::kTypeFieldNumber;
const int RankLogCmd::kPidFieldNumber;
const int RankLogCmd::kValueFieldNumber;
const int RankLogCmd::kDateFieldNumber;
const int RankLogCmd::kTimeFieldNumber;
const int RankLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

RankLogCmd::RankLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RankLogCmd)
}

void RankLogCmd::InitAsDefaultInstance() {
}

RankLogCmd::RankLogCmd(const RankLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RankLogCmd)
}

void RankLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 17;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  type_ = 0u;
  pid_ = GOOGLE_ULONGLONG(0);
  value_ = 0u;
  date_ = 0u;
  time_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankLogCmd::~RankLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RankLogCmd)
  SharedDtor();
}

void RankLogCmd::SharedDtor() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void RankLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankLogCmd_descriptor_;
}

const RankLogCmd& RankLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

RankLogCmd* RankLogCmd::default_instance_ = NULL;

RankLogCmd* RankLogCmd::New() const {
  return new RankLogCmd;
}

void RankLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RankLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, value_);
    cmd_ = 204;
    param_ = 17;
  }
  if (_has_bits_[8 / 32] & 1792) {
    date_ = 0u;
    time_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RankLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = RANK_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional uint32 type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_value;
        break;
      }

      // optional uint32 value = 8;
      case 8: {
        if (tag == 64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_date;
        break;
      }

      // optional uint32 date = 9;
      case 9: {
        if (tag == 72) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_time;
        break;
      }

      // optional uint32 time = 10;
      case 10: {
        if (tag == 80) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_logid;
        break;
      }

      // optional string logid = 11;
      case 11: {
        if (tag == 90) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RankLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RankLogCmd)
  return false;
#undef DO_
}

void RankLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RankLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = RANK_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional uint32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 value = 8;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->value(), output);
  }

  // optional uint32 date = 9;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->date(), output);
  }

  // optional uint32 time = 10;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->time(), output);
  }

  // optional string logid = 11;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RankLogCmd)
}

::google::protobuf::uint8* RankLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RankLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = RANK_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional uint32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 value = 8;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->value(), target);
  }

  // optional uint32 date = 9;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->date(), target);
  }

  // optional uint32 time = 10;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->time(), target);
  }

  // optional string logid = 11;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RankLogCmd)
  return target;
}

int RankLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = RANK_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 value = 8;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 date = 9;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }

    // optional uint32 time = 10;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string logid = 11;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankLogCmd::MergeFrom(const RankLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankLogCmd::CopyFrom(const RankLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankLogCmd::IsInitialized() const {

  return true;
}

void RankLogCmd::Swap(RankLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(type_, other->type_);
    std::swap(pid_, other->pid_);
    std::swap(value_, other->value_);
    std::swap(date_, other->date_);
    std::swap(time_, other->time_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankLogCmd_descriptor_;
  metadata.reflection = RankLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatSearchCond::kWhoFieldNumber;
const int ChatSearchCond::kFromtimeFieldNumber;
const int ChatSearchCond::kTotimeFieldNumber;
const int ChatSearchCond::kChattypeFieldNumber;
#endif  // !_MSC_VER

ChatSearchCond::ChatSearchCond()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatSearchCond)
}

void ChatSearchCond::InitAsDefaultInstance() {
}

ChatSearchCond::ChatSearchCond(const ChatSearchCond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatSearchCond)
}

void ChatSearchCond::SharedCtor() {
  _cached_size_ = 0;
  who_ = GOOGLE_ULONGLONG(0);
  fromtime_ = 0u;
  totime_ = 0u;
  chattype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatSearchCond::~ChatSearchCond() {
  // @@protoc_insertion_point(destructor:Cmd.ChatSearchCond)
  SharedDtor();
}

void ChatSearchCond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatSearchCond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatSearchCond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatSearchCond_descriptor_;
}

const ChatSearchCond& ChatSearchCond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

ChatSearchCond* ChatSearchCond::default_instance_ = NULL;

ChatSearchCond* ChatSearchCond::New() const {
  return new ChatSearchCond;
}

void ChatSearchCond::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatSearchCond*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(who_, chattype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatSearchCond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatSearchCond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 who = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &who_)));
          set_has_who();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fromtime;
        break;
      }

      // optional uint32 fromtime = 2;
      case 2: {
        if (tag == 16) {
         parse_fromtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromtime_)));
          set_has_fromtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totime;
        break;
      }

      // optional uint32 totime = 3;
      case 3: {
        if (tag == 24) {
         parse_totime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totime_)));
          set_has_totime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chattype;
        break;
      }

      // optional .Cmd.EChatType chattype = 4;
      case 4: {
        if (tag == 32) {
         parse_chattype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatType_IsValid(value)) {
            set_chattype(static_cast< ::Cmd::EChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatSearchCond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatSearchCond)
  return false;
#undef DO_
}

void ChatSearchCond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatSearchCond)
  // optional uint64 who = 1;
  if (has_who()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->who(), output);
  }

  // optional uint32 fromtime = 2;
  if (has_fromtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fromtime(), output);
  }

  // optional uint32 totime = 3;
  if (has_totime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totime(), output);
  }

  // optional .Cmd.EChatType chattype = 4;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->chattype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatSearchCond)
}

::google::protobuf::uint8* ChatSearchCond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatSearchCond)
  // optional uint64 who = 1;
  if (has_who()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->who(), target);
  }

  // optional uint32 fromtime = 2;
  if (has_fromtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fromtime(), target);
  }

  // optional uint32 totime = 3;
  if (has_totime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totime(), target);
  }

  // optional .Cmd.EChatType chattype = 4;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->chattype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatSearchCond)
  return target;
}

int ChatSearchCond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 who = 1;
    if (has_who()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->who());
    }

    // optional uint32 fromtime = 2;
    if (has_fromtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromtime());
    }

    // optional uint32 totime = 3;
    if (has_totime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totime());
    }

    // optional .Cmd.EChatType chattype = 4;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatSearchCond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatSearchCond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatSearchCond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatSearchCond::MergeFrom(const ChatSearchCond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_who()) {
      set_who(from.who());
    }
    if (from.has_fromtime()) {
      set_fromtime(from.fromtime());
    }
    if (from.has_totime()) {
      set_totime(from.totime());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatSearchCond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatSearchCond::CopyFrom(const ChatSearchCond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatSearchCond::IsInitialized() const {

  return true;
}

void ChatSearchCond::Swap(ChatSearchCond* other) {
  if (other != this) {
    std::swap(who_, other->who_);
    std::swap(fromtime_, other->fromtime_);
    std::swap(totime_, other->totime_);
    std::swap(chattype_, other->chattype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatSearchCond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatSearchCond_descriptor_;
  metadata.reflection = ChatSearchCond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatLogRes::kSendidFieldNumber;
const int ChatLogRes::kSendnameFieldNumber;
const int ChatLogRes::kRecvidFieldNumber;
const int ChatLogRes::kRecvnameFieldNumber;
const int ChatLogRes::kCreatetimeFieldNumber;
const int ChatLogRes::kContentFieldNumber;
const int ChatLogRes::kVoicelenFieldNumber;
#endif  // !_MSC_VER

ChatLogRes::ChatLogRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatLogRes)
}

void ChatLogRes::InitAsDefaultInstance() {
}

ChatLogRes::ChatLogRes(const ChatLogRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatLogRes)
}

void ChatLogRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sendid_ = GOOGLE_ULONGLONG(0);
  sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recvid_ = GOOGLE_ULONGLONG(0);
  recvname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voicelen_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatLogRes::~ChatLogRes() {
  // @@protoc_insertion_point(destructor:Cmd.ChatLogRes)
  SharedDtor();
}

void ChatLogRes::SharedDtor() {
  if (sendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendname_;
  }
  if (recvname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recvname_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ChatLogRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatLogRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatLogRes_descriptor_;
}

const ChatLogRes& ChatLogRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

ChatLogRes* ChatLogRes::default_instance_ = NULL;

ChatLogRes* ChatLogRes::New() const {
  return new ChatLogRes;
}

void ChatLogRes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatLogRes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(createtime_, voicelen_);
    sendid_ = GOOGLE_ULONGLONG(0);
    if (has_sendname()) {
      if (sendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sendname_->clear();
      }
    }
    recvid_ = GOOGLE_ULONGLONG(0);
    if (has_recvname()) {
      if (recvname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recvname_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatLogRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatLogRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sendid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendid_)));
          set_has_sendid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sendname;
        break;
      }

      // optional string sendname = 2;
      case 2: {
        if (tag == 18) {
         parse_sendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendname().data(), this->sendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recvid;
        break;
      }

      // optional uint64 recvid = 3;
      case 3: {
        if (tag == 24) {
         parse_recvid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvid_)));
          set_has_recvid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_recvname;
        break;
      }

      // optional string recvname = 4;
      case 4: {
        if (tag == 34) {
         parse_recvname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recvname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recvname().data(), this->recvname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recvname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_createtime;
        break;
      }

      // optional uint32 createtime = 5;
      case 5: {
        if (tag == 40) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (tag == 50) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_voicelen;
        break;
      }

      // optional uint32 voicelen = 7;
      case 7: {
        if (tag == 56) {
         parse_voicelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voicelen_)));
          set_has_voicelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatLogRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatLogRes)
  return false;
#undef DO_
}

void ChatLogRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatLogRes)
  // optional uint64 sendid = 1;
  if (has_sendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sendid(), output);
  }

  // optional string sendname = 2;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sendname(), output);
  }

  // optional uint64 recvid = 3;
  if (has_recvid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->recvid(), output);
  }

  // optional string recvname = 4;
  if (has_recvname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recvname().data(), this->recvname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recvname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->recvname(), output);
  }

  // optional uint32 createtime = 5;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->createtime(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->content(), output);
  }

  // optional uint32 voicelen = 7;
  if (has_voicelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->voicelen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatLogRes)
}

::google::protobuf::uint8* ChatLogRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatLogRes)
  // optional uint64 sendid = 1;
  if (has_sendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sendid(), target);
  }

  // optional string sendname = 2;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sendname(), target);
  }

  // optional uint64 recvid = 3;
  if (has_recvid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->recvid(), target);
  }

  // optional string recvname = 4;
  if (has_recvname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recvname().data(), this->recvname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recvname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->recvname(), target);
  }

  // optional uint32 createtime = 5;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->createtime(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional uint32 voicelen = 7;
  if (has_voicelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->voicelen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatLogRes)
  return target;
}

int ChatLogRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sendid = 1;
    if (has_sendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendid());
    }

    // optional string sendname = 2;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendname());
    }

    // optional uint64 recvid = 3;
    if (has_recvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvid());
    }

    // optional string recvname = 4;
    if (has_recvname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recvname());
    }

    // optional uint32 createtime = 5;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint32 voicelen = 7;
    if (has_voicelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voicelen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatLogRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatLogRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatLogRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatLogRes::MergeFrom(const ChatLogRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendid()) {
      set_sendid(from.sendid());
    }
    if (from.has_sendname()) {
      set_sendname(from.sendname());
    }
    if (from.has_recvid()) {
      set_recvid(from.recvid());
    }
    if (from.has_recvname()) {
      set_recvname(from.recvname());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_voicelen()) {
      set_voicelen(from.voicelen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatLogRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatLogRes::CopyFrom(const ChatLogRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatLogRes::IsInitialized() const {

  return true;
}

void ChatLogRes::Swap(ChatLogRes* other) {
  if (other != this) {
    std::swap(sendid_, other->sendid_);
    std::swap(sendname_, other->sendname_);
    std::swap(recvid_, other->recvid_);
    std::swap(recvname_, other->recvname_);
    std::swap(createtime_, other->createtime_);
    std::swap(content_, other->content_);
    std::swap(voicelen_, other->voicelen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatLogRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatLogRes_descriptor_;
  metadata.reflection = ChatLogRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryChatLogCmd::kCmdFieldNumber;
const int QueryChatLogCmd::kParamFieldNumber;
const int QueryChatLogCmd::kCondFieldNumber;
const int QueryChatLogCmd::kResFieldNumber;
#endif  // !_MSC_VER

QueryChatLogCmd::QueryChatLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryChatLogCmd)
}

void QueryChatLogCmd::InitAsDefaultInstance() {
  cond_ = const_cast< ::Cmd::ChatSearchCond*>(&::Cmd::ChatSearchCond::default_instance());
}

QueryChatLogCmd::QueryChatLogCmd(const QueryChatLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryChatLogCmd)
}

void QueryChatLogCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 18;
  cond_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryChatLogCmd::~QueryChatLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryChatLogCmd)
  SharedDtor();
}

void QueryChatLogCmd::SharedDtor() {
  if (this != default_instance_) {
    delete cond_;
  }
}

void QueryChatLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryChatLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryChatLogCmd_descriptor_;
}

const QueryChatLogCmd& QueryChatLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

QueryChatLogCmd* QueryChatLogCmd::default_instance_ = NULL;

QueryChatLogCmd* QueryChatLogCmd::New() const {
  return new QueryChatLogCmd;
}

void QueryChatLogCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 204;
    param_ = 18;
    if (has_cond()) {
      if (cond_ != NULL) cond_->::Cmd::ChatSearchCond::Clear();
    }
  }
  res_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryChatLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryChatLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = QUERY_CHAT_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cond;
        break;
      }

      // optional .Cmd.ChatSearchCond cond = 3;
      case 3: {
        if (tag == 26) {
         parse_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cond()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_res;
        break;
      }

      // repeated .Cmd.ChatLogRes res = 4;
      case 4: {
        if (tag == 34) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_res;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryChatLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryChatLogCmd)
  return false;
#undef DO_
}

void QueryChatLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryChatLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = QUERY_CHAT_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ChatSearchCond cond = 3;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cond(), output);
  }

  // repeated .Cmd.ChatLogRes res = 4;
  for (int i = 0; i < this->res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->res(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryChatLogCmd)
}

::google::protobuf::uint8* QueryChatLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryChatLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = QUERY_CHAT_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ChatSearchCond cond = 3;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cond(), target);
  }

  // repeated .Cmd.ChatLogRes res = 4;
  for (int i = 0; i < this->res_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->res(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryChatLogCmd)
  return target;
}

int QueryChatLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = QUERY_CHAT_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ChatSearchCond cond = 3;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cond());
    }

  }
  // repeated .Cmd.ChatLogRes res = 4;
  total_size += 1 * this->res_size();
  for (int i = 0; i < this->res_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->res(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryChatLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryChatLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryChatLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryChatLogCmd::MergeFrom(const QueryChatLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  res_.MergeFrom(from.res_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cond()) {
      mutable_cond()->::Cmd::ChatSearchCond::MergeFrom(from.cond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryChatLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryChatLogCmd::CopyFrom(const QueryChatLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChatLogCmd::IsInitialized() const {

  return true;
}

void QueryChatLogCmd::Swap(QueryChatLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cond_, other->cond_);
    res_.Swap(&other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryChatLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryChatLogCmd_descriptor_;
  metadata.reflection = QueryChatLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeLogCmd::kCmdFieldNumber;
const int ChangeLogCmd::kParamFieldNumber;
const int ChangeLogCmd::kCidFieldNumber;
const int ChangeLogCmd::kSidFieldNumber;
const int ChangeLogCmd::kHidFieldNumber;
const int ChangeLogCmd::kAccountFieldNumber;
const int ChangeLogCmd::kPidFieldNumber;
const int ChangeLogCmd::kIspayFieldNumber;
const int ChangeLogCmd::kTimeFieldNumber;
const int ChangeLogCmd::kEidFieldNumber;
const int ChangeLogCmd::kEtypeFieldNumber;
const int ChangeLogCmd::kFlagFieldNumber;
const int ChangeLogCmd::kFromFieldNumber;
const int ChangeLogCmd::kToFieldNumber;
const int ChangeLogCmd::kParam1FieldNumber;
const int ChangeLogCmd::kMarkFieldNumber;
const int ChangeLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

ChangeLogCmd::ChangeLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeLogCmd)
}

void ChangeLogCmd::InitAsDefaultInstance() {
}

ChangeLogCmd::ChangeLogCmd(const ChangeLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeLogCmd)
}

void ChangeLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 39;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  flag_ = 0u;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param1_ = GOOGLE_ULONGLONG(0);
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeLogCmd::~ChangeLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeLogCmd)
  SharedDtor();
}

void ChangeLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void ChangeLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeLogCmd_descriptor_;
}

const ChangeLogCmd& ChangeLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

ChangeLogCmd* ChangeLogCmd::default_instance_ = NULL;

ChangeLogCmd* ChangeLogCmd::New() const {
  return new ChangeLogCmd;
}

void ChangeLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 39;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(eid_, etype_);
    flag_ = 0u;
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_->clear();
      }
    }
    param1_ = GOOGLE_ULONGLONG(0);
  }
  if (has_logid()) {
    if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      logid_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = CHANGE_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 12;
      case 12: {
        if (tag == 96) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_from;
        break;
      }

      // optional string from = 13;
      case 13: {
        if (tag == 106) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_to;
        break;
      }

      // optional string to = 14;
      case 14: {
        if (tag == 114) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "to");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_param1;
        break;
      }

      // optional uint64 param1 = 15;
      case 15: {
        if (tag == 120) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 16;
      case 16: {
        if (tag == 128) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_mark())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_mark;
        if (input->ExpectTag(138)) goto parse_logid;
        break;
      }

      // optional string logid = 17;
      case 17: {
        if (tag == 138) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeLogCmd)
  return false;
#undef DO_
}

void ChangeLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = CHANGE_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint32 flag = 12;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->flag(), output);
  }

  // optional string from = 13;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->from(), output);
  }

  // optional string to = 14;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->to(), output);
  }

  // optional uint64 param1 = 15;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->param1(), output);
  }

  // repeated uint32 mark = 16;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->mark(i), output);
  }

  // optional string logid = 17;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeLogCmd)
}

::google::protobuf::uint8* ChangeLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = CHANGE_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint32 flag = 12;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->flag(), target);
  }

  // optional string from = 13;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->from(), target);
  }

  // optional string to = 14;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->to(), target);
  }

  // optional uint64 param1 = 15;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->param1(), target);
  }

  // repeated uint32 mark = 16;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->mark(i), target);
  }

  // optional string logid = 17;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeLogCmd)
  return target;
}

int ChangeLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = CHANGE_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 flag = 12;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional string from = 13;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // optional string to = 14;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

    // optional uint64 param1 = 15;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param1());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string logid = 17;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeLogCmd::MergeFrom(const ChangeLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeLogCmd::CopyFrom(const ChangeLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLogCmd::IsInitialized() const {

  return true;
}

void ChangeLogCmd::Swap(ChangeLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(flag_, other->flag_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(param1_, other->param1_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeLogCmd_descriptor_;
  metadata.reflection = ChangeLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipLogCmd::kCmdFieldNumber;
const int EquipLogCmd::kParamFieldNumber;
const int EquipLogCmd::kCidFieldNumber;
const int EquipLogCmd::kSidFieldNumber;
const int EquipLogCmd::kHidFieldNumber;
const int EquipLogCmd::kAccountFieldNumber;
const int EquipLogCmd::kPidFieldNumber;
const int EquipLogCmd::kIspayFieldNumber;
const int EquipLogCmd::kTimeFieldNumber;
const int EquipLogCmd::kEidFieldNumber;
const int EquipLogCmd::kEtypeFieldNumber;
const int EquipLogCmd::kTypeFieldNumber;
const int EquipLogCmd::kOldEquipidFieldNumber;
const int EquipLogCmd::kOldEquipgidFieldNumber;
const int EquipLogCmd::kOldStrengthlvFieldNumber;
const int EquipLogCmd::kOldRefinelvFieldNumber;
const int EquipLogCmd::kOldIsdamageFieldNumber;
const int EquipLogCmd::kNewEquipidFieldNumber;
const int EquipLogCmd::kNewEquipgidFieldNumber;
const int EquipLogCmd::kNewStrengthlvFieldNumber;
const int EquipLogCmd::kNewRefinelvFieldNumber;
const int EquipLogCmd::kNewIsdamageFieldNumber;
const int EquipLogCmd::kMarkFieldNumber;
const int EquipLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

EquipLogCmd::EquipLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipLogCmd)
}

void EquipLogCmd::InitAsDefaultInstance() {
}

EquipLogCmd::EquipLogCmd(const EquipLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipLogCmd)
}

void EquipLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 31;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  type_ = 0u;
  old_equipid_ = 0u;
  old_equipgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_strengthlv_ = 0u;
  old_refinelv_ = 0u;
  old_isdamage_ = 0;
  new_equipid_ = 0u;
  new_equipgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_strengthlv_ = 0u;
  new_refinelv_ = 0u;
  new_isdamage_ = 0;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipLogCmd::~EquipLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EquipLogCmd)
  SharedDtor();
}

void EquipLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (old_equipgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete old_equipgid_;
  }
  if (new_equipgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_equipgid_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void EquipLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipLogCmd_descriptor_;
}

const EquipLogCmd& EquipLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

EquipLogCmd* EquipLogCmd::default_instance_ = NULL;

EquipLogCmd* EquipLogCmd::New() const {
  return new EquipLogCmd;
}

void EquipLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 31;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(eid_, old_equipid_);
    ZR_(old_strengthlv_, old_refinelv_);
    if (has_old_equipgid()) {
      if (old_equipgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        old_equipgid_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 12517376) {
    ZR_(old_isdamage_, new_equipid_);
    ZR_(new_strengthlv_, new_refinelv_);
    if (has_new_equipgid()) {
      if (new_equipgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        new_equipgid_->clear();
      }
    }
    new_isdamage_ = 0;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = EQUIP_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional uint32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_old_equipid;
        break;
      }

      // optional uint32 old_equipid = 13;
      case 13: {
        if (tag == 104) {
         parse_old_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_equipid_)));
          set_has_old_equipid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_old_equipgid;
        break;
      }

      // optional string old_equipgid = 14;
      case 14: {
        if (tag == 114) {
         parse_old_equipgid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_equipgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->old_equipgid().data(), this->old_equipgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "old_equipgid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_old_strengthlv;
        break;
      }

      // optional uint32 old_strengthlv = 15;
      case 15: {
        if (tag == 120) {
         parse_old_strengthlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_strengthlv_)));
          set_has_old_strengthlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_old_refinelv;
        break;
      }

      // optional uint32 old_refinelv = 16;
      case 16: {
        if (tag == 128) {
         parse_old_refinelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_refinelv_)));
          set_has_old_refinelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_old_isdamage;
        break;
      }

      // optional int32 old_isdamage = 17;
      case 17: {
        if (tag == 136) {
         parse_old_isdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_isdamage_)));
          set_has_old_isdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_new_equipid;
        break;
      }

      // optional uint32 new_equipid = 18;
      case 18: {
        if (tag == 144) {
         parse_new_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_equipid_)));
          set_has_new_equipid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_new_equipgid;
        break;
      }

      // optional string new_equipgid = 19;
      case 19: {
        if (tag == 154) {
         parse_new_equipgid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_equipgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new_equipgid().data(), this->new_equipgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_equipgid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_new_strengthlv;
        break;
      }

      // optional uint32 new_strengthlv = 20;
      case 20: {
        if (tag == 160) {
         parse_new_strengthlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_strengthlv_)));
          set_has_new_strengthlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_new_refinelv;
        break;
      }

      // optional uint32 new_refinelv = 21;
      case 21: {
        if (tag == 168) {
         parse_new_refinelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_refinelv_)));
          set_has_new_refinelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_new_isdamage;
        break;
      }

      // optional int32 new_isdamage = 22;
      case 22: {
        if (tag == 176) {
         parse_new_isdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_isdamage_)));
          set_has_new_isdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 23;
      case 23: {
        if (tag == 184) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 184, input, this->mutable_mark())));
        } else if (tag == 186) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_mark;
        if (input->ExpectTag(194)) goto parse_logid;
        break;
      }

      // optional string logid = 24;
      case 24: {
        if (tag == 194) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipLogCmd)
  return false;
#undef DO_
}

void EquipLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = EQUIP_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }

  // optional uint32 old_equipid = 13;
  if (has_old_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->old_equipid(), output);
  }

  // optional string old_equipgid = 14;
  if (has_old_equipgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_equipgid().data(), this->old_equipgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "old_equipgid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->old_equipgid(), output);
  }

  // optional uint32 old_strengthlv = 15;
  if (has_old_strengthlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->old_strengthlv(), output);
  }

  // optional uint32 old_refinelv = 16;
  if (has_old_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->old_refinelv(), output);
  }

  // optional int32 old_isdamage = 17;
  if (has_old_isdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->old_isdamage(), output);
  }

  // optional uint32 new_equipid = 18;
  if (has_new_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->new_equipid(), output);
  }

  // optional string new_equipgid = 19;
  if (has_new_equipgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_equipgid().data(), this->new_equipgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_equipgid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->new_equipgid(), output);
  }

  // optional uint32 new_strengthlv = 20;
  if (has_new_strengthlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->new_strengthlv(), output);
  }

  // optional uint32 new_refinelv = 21;
  if (has_new_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->new_refinelv(), output);
  }

  // optional int32 new_isdamage = 22;
  if (has_new_isdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->new_isdamage(), output);
  }

  // repeated uint32 mark = 23;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      23, this->mark(i), output);
  }

  // optional string logid = 24;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipLogCmd)
}

::google::protobuf::uint8* EquipLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = EQUIP_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->type(), target);
  }

  // optional uint32 old_equipid = 13;
  if (has_old_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->old_equipid(), target);
  }

  // optional string old_equipgid = 14;
  if (has_old_equipgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_equipgid().data(), this->old_equipgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "old_equipgid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->old_equipgid(), target);
  }

  // optional uint32 old_strengthlv = 15;
  if (has_old_strengthlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->old_strengthlv(), target);
  }

  // optional uint32 old_refinelv = 16;
  if (has_old_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->old_refinelv(), target);
  }

  // optional int32 old_isdamage = 17;
  if (has_old_isdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->old_isdamage(), target);
  }

  // optional uint32 new_equipid = 18;
  if (has_new_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->new_equipid(), target);
  }

  // optional string new_equipgid = 19;
  if (has_new_equipgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_equipgid().data(), this->new_equipgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_equipgid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->new_equipgid(), target);
  }

  // optional uint32 new_strengthlv = 20;
  if (has_new_strengthlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->new_strengthlv(), target);
  }

  // optional uint32 new_refinelv = 21;
  if (has_new_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->new_refinelv(), target);
  }

  // optional int32 new_isdamage = 22;
  if (has_new_isdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->new_isdamage(), target);
  }

  // repeated uint32 mark = 23;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(23, this->mark(i), target);
  }

  // optional string logid = 24;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipLogCmd)
  return target;
}

int EquipLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = EQUIP_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 old_equipid = 13;
    if (has_old_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_equipid());
    }

    // optional string old_equipgid = 14;
    if (has_old_equipgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_equipgid());
    }

    // optional uint32 old_strengthlv = 15;
    if (has_old_strengthlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_strengthlv());
    }

    // optional uint32 old_refinelv = 16;
    if (has_old_refinelv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_refinelv());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 old_isdamage = 17;
    if (has_old_isdamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_isdamage());
    }

    // optional uint32 new_equipid = 18;
    if (has_new_equipid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_equipid());
    }

    // optional string new_equipgid = 19;
    if (has_new_equipgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_equipgid());
    }

    // optional uint32 new_strengthlv = 20;
    if (has_new_strengthlv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_strengthlv());
    }

    // optional uint32 new_refinelv = 21;
    if (has_new_refinelv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_refinelv());
    }

    // optional int32 new_isdamage = 22;
    if (has_new_isdamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_isdamage());
    }

    // optional string logid = 24;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipLogCmd::MergeFrom(const EquipLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_old_equipid()) {
      set_old_equipid(from.old_equipid());
    }
    if (from.has_old_equipgid()) {
      set_old_equipgid(from.old_equipgid());
    }
    if (from.has_old_strengthlv()) {
      set_old_strengthlv(from.old_strengthlv());
    }
    if (from.has_old_refinelv()) {
      set_old_refinelv(from.old_refinelv());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_old_isdamage()) {
      set_old_isdamage(from.old_isdamage());
    }
    if (from.has_new_equipid()) {
      set_new_equipid(from.new_equipid());
    }
    if (from.has_new_equipgid()) {
      set_new_equipgid(from.new_equipgid());
    }
    if (from.has_new_strengthlv()) {
      set_new_strengthlv(from.new_strengthlv());
    }
    if (from.has_new_refinelv()) {
      set_new_refinelv(from.new_refinelv());
    }
    if (from.has_new_isdamage()) {
      set_new_isdamage(from.new_isdamage());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipLogCmd::CopyFrom(const EquipLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipLogCmd::IsInitialized() const {

  return true;
}

void EquipLogCmd::Swap(EquipLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(type_, other->type_);
    std::swap(old_equipid_, other->old_equipid_);
    std::swap(old_equipgid_, other->old_equipgid_);
    std::swap(old_strengthlv_, other->old_strengthlv_);
    std::swap(old_refinelv_, other->old_refinelv_);
    std::swap(old_isdamage_, other->old_isdamage_);
    std::swap(new_equipid_, other->new_equipid_);
    std::swap(new_equipgid_, other->new_equipgid_);
    std::swap(new_strengthlv_, other->new_strengthlv_);
    std::swap(new_refinelv_, other->new_refinelv_);
    std::swap(new_isdamage_, other->new_isdamage_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipLogCmd_descriptor_;
  metadata.reflection = EquipLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardLogCmd::kCmdFieldNumber;
const int CardLogCmd::kParamFieldNumber;
const int CardLogCmd::kCidFieldNumber;
const int CardLogCmd::kSidFieldNumber;
const int CardLogCmd::kHidFieldNumber;
const int CardLogCmd::kAccountFieldNumber;
const int CardLogCmd::kPidFieldNumber;
const int CardLogCmd::kIspayFieldNumber;
const int CardLogCmd::kTimeFieldNumber;
const int CardLogCmd::kEidFieldNumber;
const int CardLogCmd::kEtypeFieldNumber;
const int CardLogCmd::kEquipidFieldNumber;
const int CardLogCmd::kEquipgidFieldNumber;
const int CardLogCmd::kTypeFieldNumber;
const int CardLogCmd::kCardidFieldNumber;
const int CardLogCmd::kCardgidFieldNumber;
const int CardLogCmd::kUseslotFieldNumber;
const int CardLogCmd::kMaxslotFieldNumber;
const int CardLogCmd::kMarkFieldNumber;
const int CardLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

CardLogCmd::CardLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CardLogCmd)
}

void CardLogCmd::InitAsDefaultInstance() {
}

CardLogCmd::CardLogCmd(const CardLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CardLogCmd)
}

void CardLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 30;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  equipid_ = 0u;
  equipgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  cardid_ = 0u;
  cardgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useslot_ = 0u;
  maxslot_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardLogCmd::~CardLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CardLogCmd)
  SharedDtor();
}

void CardLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (equipgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete equipgid_;
  }
  if (cardgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cardgid_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void CardLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardLogCmd_descriptor_;
}

const CardLogCmd& CardLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

CardLogCmd* CardLogCmd::default_instance_ = NULL;

CardLogCmd* CardLogCmd::New() const {
  return new CardLogCmd;
}

void CardLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CardLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 30;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(eid_, etype_);
    ZR_(equipid_, type_);
    if (has_equipgid()) {
      if (equipgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        equipgid_->clear();
      }
    }
    cardid_ = 0u;
    if (has_cardgid()) {
      if (cardgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cardgid_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 720896) {
    useslot_ = 0u;
    maxslot_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CardLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = CARD_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_equipid;
        break;
      }

      // optional uint32 equipid = 13;
      case 13: {
        if (tag == 104) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_equipgid;
        break;
      }

      // optional string equipgid = 14;
      case 14: {
        if (tag == 114) {
         parse_equipgid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->equipgid().data(), this->equipgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "equipgid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_type;
        break;
      }

      // optional uint32 type = 15;
      case 15: {
        if (tag == 120) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_cardid;
        break;
      }

      // optional uint32 cardid = 16;
      case 16: {
        if (tag == 128) {
         parse_cardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_cardgid;
        break;
      }

      // optional string cardgid = 17;
      case 17: {
        if (tag == 138) {
         parse_cardgid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cardgid().data(), this->cardgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cardgid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_useslot;
        break;
      }

      // optional uint32 useslot = 18;
      case 18: {
        if (tag == 144) {
         parse_useslot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &useslot_)));
          set_has_useslot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_maxslot;
        break;
      }

      // optional uint32 maxslot = 19;
      case 19: {
        if (tag == 152) {
         parse_maxslot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxslot_)));
          set_has_maxslot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 20;
      case 20: {
        if (tag == 160) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160, input, this->mutable_mark())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_mark;
        if (input->ExpectTag(170)) goto parse_logid;
        break;
      }

      // optional string logid = 21;
      case 21: {
        if (tag == 170) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CardLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CardLogCmd)
  return false;
#undef DO_
}

void CardLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CardLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = CARD_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint32 equipid = 13;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->equipid(), output);
  }

  // optional string equipgid = 14;
  if (has_equipgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->equipgid().data(), this->equipgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "equipgid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->equipgid(), output);
  }

  // optional uint32 type = 15;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->type(), output);
  }

  // optional uint32 cardid = 16;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->cardid(), output);
  }

  // optional string cardgid = 17;
  if (has_cardgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cardgid().data(), this->cardgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cardgid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->cardgid(), output);
  }

  // optional uint32 useslot = 18;
  if (has_useslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->useslot(), output);
  }

  // optional uint32 maxslot = 19;
  if (has_maxslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->maxslot(), output);
  }

  // repeated uint32 mark = 20;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->mark(i), output);
  }

  // optional string logid = 21;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CardLogCmd)
}

::google::protobuf::uint8* CardLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CardLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = CARD_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint32 equipid = 13;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->equipid(), target);
  }

  // optional string equipgid = 14;
  if (has_equipgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->equipgid().data(), this->equipgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "equipgid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->equipgid(), target);
  }

  // optional uint32 type = 15;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->type(), target);
  }

  // optional uint32 cardid = 16;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->cardid(), target);
  }

  // optional string cardgid = 17;
  if (has_cardgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cardgid().data(), this->cardgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cardgid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->cardgid(), target);
  }

  // optional uint32 useslot = 18;
  if (has_useslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->useslot(), target);
  }

  // optional uint32 maxslot = 19;
  if (has_maxslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->maxslot(), target);
  }

  // repeated uint32 mark = 20;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(20, this->mark(i), target);
  }

  // optional string logid = 21;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CardLogCmd)
  return target;
}

int CardLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = CARD_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 equipid = 13;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipid());
    }

    // optional string equipgid = 14;
    if (has_equipgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipgid());
    }

    // optional uint32 type = 15;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 cardid = 16;
    if (has_cardid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }

    // optional string cardgid = 17;
    if (has_cardgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardgid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 useslot = 18;
    if (has_useslot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->useslot());
    }

    // optional uint32 maxslot = 19;
    if (has_maxslot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxslot());
    }

    // optional string logid = 21;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardLogCmd::MergeFrom(const CardLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_equipgid()) {
      set_equipgid(from.equipgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_cardgid()) {
      set_cardgid(from.cardgid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_useslot()) {
      set_useslot(from.useslot());
    }
    if (from.has_maxslot()) {
      set_maxslot(from.maxslot());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardLogCmd::CopyFrom(const CardLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardLogCmd::IsInitialized() const {

  return true;
}

void CardLogCmd::Swap(CardLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(equipid_, other->equipid_);
    std::swap(equipgid_, other->equipgid_);
    std::swap(type_, other->type_);
    std::swap(cardid_, other->cardid_);
    std::swap(cardgid_, other->cardgid_);
    std::swap(useslot_, other->useslot_);
    std::swap(maxslot_, other->maxslot_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardLogCmd_descriptor_;
  metadata.reflection = CardLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipUpLogCmd::kCmdFieldNumber;
const int EquipUpLogCmd::kParamFieldNumber;
const int EquipUpLogCmd::kCidFieldNumber;
const int EquipUpLogCmd::kSidFieldNumber;
const int EquipUpLogCmd::kHidFieldNumber;
const int EquipUpLogCmd::kAccountFieldNumber;
const int EquipUpLogCmd::kPidFieldNumber;
const int EquipUpLogCmd::kIspayFieldNumber;
const int EquipUpLogCmd::kTimeFieldNumber;
const int EquipUpLogCmd::kEidFieldNumber;
const int EquipUpLogCmd::kEtypeFieldNumber;
const int EquipUpLogCmd::kTypeFieldNumber;
const int EquipUpLogCmd::kEquipidFieldNumber;
const int EquipUpLogCmd::kEquipguidFieldNumber;
const int EquipUpLogCmd::kCountFieldNumber;
const int EquipUpLogCmd::kOldLvFieldNumber;
const int EquipUpLogCmd::kNewLvFieldNumber;
const int EquipUpLogCmd::kIsfailFieldNumber;
const int EquipUpLogCmd::kCostMoneyFieldNumber;
const int EquipUpLogCmd::kCostItemFieldNumber;
const int EquipUpLogCmd::kIsdamageFieldNumber;
const int EquipUpLogCmd::kMarkFieldNumber;
const int EquipUpLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

EquipUpLogCmd::EquipUpLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipUpLogCmd)
}

void EquipUpLogCmd::InitAsDefaultInstance() {
}

EquipUpLogCmd::EquipUpLogCmd(const EquipUpLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipUpLogCmd)
}

void EquipUpLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 41;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  type_ = 0u;
  equipid_ = 0u;
  equipguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
  old_lv_ = 0u;
  new_lv_ = 0u;
  isfail_ = 0;
  cost_money_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cost_item_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isdamage_ = 0;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipUpLogCmd::~EquipUpLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EquipUpLogCmd)
  SharedDtor();
}

void EquipUpLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (equipguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete equipguid_;
  }
  if (cost_money_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cost_money_;
  }
  if (cost_item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cost_item_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void EquipUpLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipUpLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipUpLogCmd_descriptor_;
}

const EquipUpLogCmd& EquipUpLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

EquipUpLogCmd* EquipUpLogCmd::default_instance_ = NULL;

EquipUpLogCmd* EquipUpLogCmd::New() const {
  return new EquipUpLogCmd;
}

void EquipUpLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipUpLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 41;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(eid_, equipid_);
    ZR_(count_, old_lv_);
    if (has_equipguid()) {
      if (equipguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        equipguid_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 6225920) {
    ZR_(new_lv_, isfail_);
    if (has_cost_money()) {
      if (cost_money_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cost_money_->clear();
      }
    }
    if (has_cost_item()) {
      if (cost_item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cost_item_->clear();
      }
    }
    isdamage_ = 0;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipUpLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipUpLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = EQUIPUP_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional uint32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_equipid;
        break;
      }

      // optional uint32 equipid = 13;
      case 13: {
        if (tag == 104) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_equipguid;
        break;
      }

      // optional string equipguid = 14;
      case 14: {
        if (tag == 114) {
         parse_equipguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->equipguid().data(), this->equipguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "equipguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_count;
        break;
      }

      // optional uint32 count = 15;
      case 15: {
        if (tag == 120) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_old_lv;
        break;
      }

      // optional uint32 old_lv = 16;
      case 16: {
        if (tag == 128) {
         parse_old_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_lv_)));
          set_has_old_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_new_lv;
        break;
      }

      // optional uint32 new_lv = 17;
      case 17: {
        if (tag == 136) {
         parse_new_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_lv_)));
          set_has_new_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_isfail;
        break;
      }

      // optional int32 isfail = 18;
      case 18: {
        if (tag == 144) {
         parse_isfail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfail_)));
          set_has_isfail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_cost_money;
        break;
      }

      // optional string cost_money = 19;
      case 19: {
        if (tag == 154) {
         parse_cost_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cost_money()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cost_money().data(), this->cost_money().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cost_money");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_cost_item;
        break;
      }

      // optional string cost_item = 20;
      case 20: {
        if (tag == 162) {
         parse_cost_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cost_item()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cost_item().data(), this->cost_item().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cost_item");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_isdamage;
        break;
      }

      // optional int32 isdamage = 21;
      case 21: {
        if (tag == 168) {
         parse_isdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdamage_)));
          set_has_isdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 22;
      case 22: {
        if (tag == 176) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176, input, this->mutable_mark())));
        } else if (tag == 178) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_mark;
        if (input->ExpectTag(186)) goto parse_logid;
        break;
      }

      // optional string logid = 23;
      case 23: {
        if (tag == 186) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipUpLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipUpLogCmd)
  return false;
#undef DO_
}

void EquipUpLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipUpLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = EQUIPUP_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }

  // optional uint32 equipid = 13;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->equipid(), output);
  }

  // optional string equipguid = 14;
  if (has_equipguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->equipguid().data(), this->equipguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "equipguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->equipguid(), output);
  }

  // optional uint32 count = 15;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->count(), output);
  }

  // optional uint32 old_lv = 16;
  if (has_old_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->old_lv(), output);
  }

  // optional uint32 new_lv = 17;
  if (has_new_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->new_lv(), output);
  }

  // optional int32 isfail = 18;
  if (has_isfail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->isfail(), output);
  }

  // optional string cost_money = 19;
  if (has_cost_money()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cost_money().data(), this->cost_money().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cost_money");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->cost_money(), output);
  }

  // optional string cost_item = 20;
  if (has_cost_item()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cost_item().data(), this->cost_item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cost_item");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->cost_item(), output);
  }

  // optional int32 isdamage = 21;
  if (has_isdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->isdamage(), output);
  }

  // repeated uint32 mark = 22;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->mark(i), output);
  }

  // optional string logid = 23;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipUpLogCmd)
}

::google::protobuf::uint8* EquipUpLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipUpLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = EQUIPUP_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->type(), target);
  }

  // optional uint32 equipid = 13;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->equipid(), target);
  }

  // optional string equipguid = 14;
  if (has_equipguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->equipguid().data(), this->equipguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "equipguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->equipguid(), target);
  }

  // optional uint32 count = 15;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->count(), target);
  }

  // optional uint32 old_lv = 16;
  if (has_old_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->old_lv(), target);
  }

  // optional uint32 new_lv = 17;
  if (has_new_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->new_lv(), target);
  }

  // optional int32 isfail = 18;
  if (has_isfail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->isfail(), target);
  }

  // optional string cost_money = 19;
  if (has_cost_money()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cost_money().data(), this->cost_money().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cost_money");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->cost_money(), target);
  }

  // optional string cost_item = 20;
  if (has_cost_item()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cost_item().data(), this->cost_item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cost_item");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->cost_item(), target);
  }

  // optional int32 isdamage = 21;
  if (has_isdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->isdamage(), target);
  }

  // repeated uint32 mark = 22;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(22, this->mark(i), target);
  }

  // optional string logid = 23;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipUpLogCmd)
  return target;
}

int EquipUpLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = EQUIPUP_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 equipid = 13;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipid());
    }

    // optional string equipguid = 14;
    if (has_equipguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipguid());
    }

    // optional uint32 count = 15;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 old_lv = 16;
    if (has_old_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_lv());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 new_lv = 17;
    if (has_new_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_lv());
    }

    // optional int32 isfail = 18;
    if (has_isfail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfail());
    }

    // optional string cost_money = 19;
    if (has_cost_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cost_money());
    }

    // optional string cost_item = 20;
    if (has_cost_item()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cost_item());
    }

    // optional int32 isdamage = 21;
    if (has_isdamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdamage());
    }

    // optional string logid = 23;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipUpLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipUpLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipUpLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipUpLogCmd::MergeFrom(const EquipUpLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_equipguid()) {
      set_equipguid(from.equipguid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_old_lv()) {
      set_old_lv(from.old_lv());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_new_lv()) {
      set_new_lv(from.new_lv());
    }
    if (from.has_isfail()) {
      set_isfail(from.isfail());
    }
    if (from.has_cost_money()) {
      set_cost_money(from.cost_money());
    }
    if (from.has_cost_item()) {
      set_cost_item(from.cost_item());
    }
    if (from.has_isdamage()) {
      set_isdamage(from.isdamage());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipUpLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipUpLogCmd::CopyFrom(const EquipUpLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipUpLogCmd::IsInitialized() const {

  return true;
}

void EquipUpLogCmd::Swap(EquipUpLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(type_, other->type_);
    std::swap(equipid_, other->equipid_);
    std::swap(equipguid_, other->equipguid_);
    std::swap(count_, other->count_);
    std::swap(old_lv_, other->old_lv_);
    std::swap(new_lv_, other->new_lv_);
    std::swap(isfail_, other->isfail_);
    std::swap(cost_money_, other->cost_money_);
    std::swap(cost_item_, other->cost_item_);
    std::swap(isdamage_, other->isdamage_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipUpLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipUpLogCmd_descriptor_;
  metadata.reflection = EquipUpLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocailLogCmd::kCmdFieldNumber;
const int SocailLogCmd::kParamFieldNumber;
const int SocailLogCmd::kCidFieldNumber;
const int SocailLogCmd::kSidFieldNumber;
const int SocailLogCmd::kHidFieldNumber;
const int SocailLogCmd::kAccountFieldNumber;
const int SocailLogCmd::kPidFieldNumber;
const int SocailLogCmd::kIspayFieldNumber;
const int SocailLogCmd::kTimeFieldNumber;
const int SocailLogCmd::kEidFieldNumber;
const int SocailLogCmd::kEtypeFieldNumber;
const int SocailLogCmd::kTypeFieldNumber;
const int SocailLogCmd::kInidFieldNumber;
const int SocailLogCmd::kOtheridFieldNumber;
const int SocailLogCmd::kParam1FieldNumber;
const int SocailLogCmd::kParam2FieldNumber;
const int SocailLogCmd::kMarkFieldNumber;
const int SocailLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

SocailLogCmd::SocailLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SocailLogCmd)
}

void SocailLogCmd::InitAsDefaultInstance() {
}

SocailLogCmd::SocailLogCmd(const SocailLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SocailLogCmd)
}

void SocailLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 33;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  type_ = 0u;
  inid_ = GOOGLE_ULONGLONG(0);
  otherid_ = GOOGLE_ULONGLONG(0);
  param1_ = GOOGLE_ULONGLONG(0);
  param2_ = GOOGLE_ULONGLONG(0);
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocailLogCmd::~SocailLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SocailLogCmd)
  SharedDtor();
}

void SocailLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void SocailLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocailLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocailLogCmd_descriptor_;
}

const SocailLogCmd& SocailLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

SocailLogCmd* SocailLogCmd::default_instance_ = NULL;

SocailLogCmd* SocailLogCmd::New() const {
  return new SocailLogCmd;
}

void SocailLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SocailLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 33;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(eid_, param2_);
    type_ = 0u;
  }
  if (has_logid()) {
    if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      logid_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocailLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SocailLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = SOCIAL_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional uint32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_inid;
        break;
      }

      // optional uint64 inid = 13;
      case 13: {
        if (tag == 104) {
         parse_inid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inid_)));
          set_has_inid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_otherid;
        break;
      }

      // optional uint64 otherid = 14;
      case 14: {
        if (tag == 112) {
         parse_otherid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_param1;
        break;
      }

      // optional uint64 param1 = 15;
      case 15: {
        if (tag == 120) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_param2;
        break;
      }

      // optional uint64 param2 = 16;
      case 16: {
        if (tag == 128) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 18;
      case 18: {
        if (tag == 144) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_mark())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_mark;
        if (input->ExpectTag(154)) goto parse_logid;
        break;
      }

      // optional string logid = 19;
      case 19: {
        if (tag == 154) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SocailLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SocailLogCmd)
  return false;
#undef DO_
}

void SocailLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SocailLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = SOCIAL_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }

  // optional uint64 inid = 13;
  if (has_inid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->inid(), output);
  }

  // optional uint64 otherid = 14;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->otherid(), output);
  }

  // optional uint64 param1 = 15;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->param1(), output);
  }

  // optional uint64 param2 = 16;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->param2(), output);
  }

  // repeated uint32 mark = 18;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->mark(i), output);
  }

  // optional string logid = 19;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SocailLogCmd)
}

::google::protobuf::uint8* SocailLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SocailLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = SOCIAL_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->type(), target);
  }

  // optional uint64 inid = 13;
  if (has_inid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->inid(), target);
  }

  // optional uint64 otherid = 14;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->otherid(), target);
  }

  // optional uint64 param1 = 15;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->param1(), target);
  }

  // optional uint64 param2 = 16;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->param2(), target);
  }

  // repeated uint32 mark = 18;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->mark(i), target);
  }

  // optional string logid = 19;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SocailLogCmd)
  return target;
}

int SocailLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = SOCIAL_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 inid = 13;
    if (has_inid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inid());
    }

    // optional uint64 otherid = 14;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->otherid());
    }

    // optional uint64 param1 = 15;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param1());
    }

    // optional uint64 param2 = 16;
    if (has_param2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param2());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional string logid = 19;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocailLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocailLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocailLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocailLogCmd::MergeFrom(const SocailLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_inid()) {
      set_inid(from.inid());
    }
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocailLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocailLogCmd::CopyFrom(const SocailLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocailLogCmd::IsInitialized() const {

  return true;
}

void SocailLogCmd::Swap(SocailLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(type_, other->type_);
    std::swap(inid_, other->inid_);
    std::swap(otherid_, other->otherid_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocailLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocailLogCmd_descriptor_;
  metadata.reflection = SocailLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestLogCmd::kCmdFieldNumber;
const int QuestLogCmd::kParamFieldNumber;
const int QuestLogCmd::kCidFieldNumber;
const int QuestLogCmd::kSidFieldNumber;
const int QuestLogCmd::kHidFieldNumber;
const int QuestLogCmd::kAccountFieldNumber;
const int QuestLogCmd::kPidFieldNumber;
const int QuestLogCmd::kIspayFieldNumber;
const int QuestLogCmd::kTimeFieldNumber;
const int QuestLogCmd::kEidFieldNumber;
const int QuestLogCmd::kEtypeFieldNumber;
const int QuestLogCmd::kQuestidFieldNumber;
const int QuestLogCmd::kTypeFieldNumber;
const int QuestLogCmd::kTargetidFieldNumber;
const int QuestLogCmd::kBaseexpFieldNumber;
const int QuestLogCmd::kJobexpFieldNumber;
const int QuestLogCmd::kRewarditemFieldNumber;
const int QuestLogCmd::kLevelFieldNumber;
const int QuestLogCmd::kMarkFieldNumber;
const int QuestLogCmd::kLogidFieldNumber;
const int QuestLogCmd::kLineidFieldNumber;
#endif  // !_MSC_VER

QuestLogCmd::QuestLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestLogCmd)
}

void QuestLogCmd::InitAsDefaultInstance() {
}

QuestLogCmd::QuestLogCmd(const QuestLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestLogCmd)
}

void QuestLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 34;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  questid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  targetid_ = GOOGLE_ULONGLONG(0);
  baseexp_ = 0u;
  jobexp_ = 0u;
  rewarditem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lineid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestLogCmd::~QuestLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QuestLogCmd)
  SharedDtor();
}

void QuestLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (rewarditem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewarditem_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void QuestLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestLogCmd_descriptor_;
}

const QuestLogCmd& QuestLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

QuestLogCmd* QuestLogCmd::default_instance_ = NULL;

QuestLogCmd* QuestLogCmd::New() const {
  return new QuestLogCmd;
}

void QuestLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 34;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(eid_, baseexp_);
    jobexp_ = 0u;
  }
  if (_has_bits_[16 / 32] & 1769472) {
    if (has_rewarditem()) {
      if (rewarditem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rewarditem_->clear();
      }
    }
    level_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
    lineid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = QUEST_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_questid;
        break;
      }

      // optional uint64 questid = 12;
      case 12: {
        if (tag == 96) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_type;
        break;
      }

      // optional uint32 type = 13;
      case 13: {
        if (tag == 104) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_targetid;
        break;
      }

      // optional uint64 targetid = 14;
      case 14: {
        if (tag == 112) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_baseexp;
        break;
      }

      // optional uint32 baseexp = 15;
      case 15: {
        if (tag == 120) {
         parse_baseexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseexp_)));
          set_has_baseexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_jobexp;
        break;
      }

      // optional uint32 jobexp = 16;
      case 16: {
        if (tag == 128) {
         parse_jobexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jobexp_)));
          set_has_jobexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_rewarditem;
        break;
      }

      // optional string rewarditem = 17;
      case 17: {
        if (tag == 138) {
         parse_rewarditem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewarditem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rewarditem().data(), this->rewarditem().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rewarditem");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_level;
        break;
      }

      // optional uint32 level = 18;
      case 18: {
        if (tag == 144) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 19;
      case 19: {
        if (tag == 152) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152, input, this->mutable_mark())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_mark;
        if (input->ExpectTag(162)) goto parse_logid;
        break;
      }

      // optional string logid = 20;
      case 20: {
        if (tag == 162) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_lineid;
        break;
      }

      // optional uint32 lineid = 21;
      case 21: {
        if (tag == 168) {
         parse_lineid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lineid_)));
          set_has_lineid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestLogCmd)
  return false;
#undef DO_
}

void QuestLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = QUEST_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint64 questid = 12;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->questid(), output);
  }

  // optional uint32 type = 13;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->type(), output);
  }

  // optional uint64 targetid = 14;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->targetid(), output);
  }

  // optional uint32 baseexp = 15;
  if (has_baseexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->baseexp(), output);
  }

  // optional uint32 jobexp = 16;
  if (has_jobexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->jobexp(), output);
  }

  // optional string rewarditem = 17;
  if (has_rewarditem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewarditem().data(), this->rewarditem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewarditem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->rewarditem(), output);
  }

  // optional uint32 level = 18;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->level(), output);
  }

  // repeated uint32 mark = 19;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->mark(i), output);
  }

  // optional string logid = 20;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->logid(), output);
  }

  // optional uint32 lineid = 21;
  if (has_lineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->lineid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestLogCmd)
}

::google::protobuf::uint8* QuestLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = QUEST_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint64 questid = 12;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->questid(), target);
  }

  // optional uint32 type = 13;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->type(), target);
  }

  // optional uint64 targetid = 14;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->targetid(), target);
  }

  // optional uint32 baseexp = 15;
  if (has_baseexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->baseexp(), target);
  }

  // optional uint32 jobexp = 16;
  if (has_jobexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->jobexp(), target);
  }

  // optional string rewarditem = 17;
  if (has_rewarditem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewarditem().data(), this->rewarditem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewarditem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->rewarditem(), target);
  }

  // optional uint32 level = 18;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->level(), target);
  }

  // repeated uint32 mark = 19;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(19, this->mark(i), target);
  }

  // optional string logid = 20;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->logid(), target);
  }

  // optional uint32 lineid = 21;
  if (has_lineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->lineid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestLogCmd)
  return target;
}

int QuestLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = QUEST_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint64 questid = 12;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->questid());
    }

    // optional uint32 type = 13;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 targetid = 14;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional uint32 baseexp = 15;
    if (has_baseexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseexp());
    }

    // optional uint32 jobexp = 16;
    if (has_jobexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jobexp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string rewarditem = 17;
    if (has_rewarditem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewarditem());
    }

    // optional uint32 level = 18;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional string logid = 20;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

    // optional uint32 lineid = 21;
    if (has_lineid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lineid());
    }

  }
  // repeated uint32 mark = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestLogCmd::MergeFrom(const QuestLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_baseexp()) {
      set_baseexp(from.baseexp());
    }
    if (from.has_jobexp()) {
      set_jobexp(from.jobexp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rewarditem()) {
      set_rewarditem(from.rewarditem());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_lineid()) {
      set_lineid(from.lineid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestLogCmd::CopyFrom(const QuestLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestLogCmd::IsInitialized() const {

  return true;
}

void QuestLogCmd::Swap(QuestLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(questid_, other->questid_);
    std::swap(type_, other->type_);
    std::swap(targetid_, other->targetid_);
    std::swap(baseexp_, other->baseexp_);
    std::swap(jobexp_, other->jobexp_);
    std::swap(rewarditem_, other->rewarditem_);
    std::swap(level_, other->level_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(lineid_, other->lineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestLogCmd_descriptor_;
  metadata.reflection = QuestLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManualLogCmd::kCmdFieldNumber;
const int ManualLogCmd::kParamFieldNumber;
const int ManualLogCmd::kCidFieldNumber;
const int ManualLogCmd::kSidFieldNumber;
const int ManualLogCmd::kHidFieldNumber;
const int ManualLogCmd::kAccountFieldNumber;
const int ManualLogCmd::kPidFieldNumber;
const int ManualLogCmd::kIspayFieldNumber;
const int ManualLogCmd::kTimeFieldNumber;
const int ManualLogCmd::kEidFieldNumber;
const int ManualLogCmd::kEtypeFieldNumber;
const int ManualLogCmd::kTypeFieldNumber;
const int ManualLogCmd::kByFieldNumber;
const int ManualLogCmd::kWhatFieldNumber;
const int ManualLogCmd::kParam1FieldNumber;
const int ManualLogCmd::kMarkFieldNumber;
const int ManualLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

ManualLogCmd::ManualLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ManualLogCmd)
}

void ManualLogCmd::InitAsDefaultInstance() {
}

ManualLogCmd::ManualLogCmd(const ManualLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ManualLogCmd)
}

void ManualLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 37;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  type_ = 0u;
  by_ = 0u;
  what_ = GOOGLE_ULONGLONG(0);
  param1_ = GOOGLE_ULONGLONG(0);
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManualLogCmd::~ManualLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ManualLogCmd)
  SharedDtor();
}

void ManualLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void ManualLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManualLogCmd_descriptor_;
}

const ManualLogCmd& ManualLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

ManualLogCmd* ManualLogCmd::default_instance_ = NULL;

ManualLogCmd* ManualLogCmd::New() const {
  return new ManualLogCmd;
}

void ManualLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ManualLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 37;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(eid_, param1_);
  }
  if (has_logid()) {
    if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      logid_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManualLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ManualLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = MANUAL_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional uint32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_by;
        break;
      }

      // optional uint32 by = 13;
      case 13: {
        if (tag == 104) {
         parse_by:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_)));
          set_has_by();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_what;
        break;
      }

      // optional uint64 what = 14;
      case 14: {
        if (tag == 112) {
         parse_what:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &what_)));
          set_has_what();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_param1;
        break;
      }

      // optional uint64 param1 = 15;
      case 15: {
        if (tag == 120) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 18;
      case 18: {
        if (tag == 144) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_mark())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_mark;
        if (input->ExpectTag(154)) goto parse_logid;
        break;
      }

      // optional string logid = 19;
      case 19: {
        if (tag == 154) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ManualLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ManualLogCmd)
  return false;
#undef DO_
}

void ManualLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ManualLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = MANUAL_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }

  // optional uint32 by = 13;
  if (has_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->by(), output);
  }

  // optional uint64 what = 14;
  if (has_what()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->what(), output);
  }

  // optional uint64 param1 = 15;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->param1(), output);
  }

  // repeated uint32 mark = 18;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->mark(i), output);
  }

  // optional string logid = 19;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ManualLogCmd)
}

::google::protobuf::uint8* ManualLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ManualLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = MANUAL_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->type(), target);
  }

  // optional uint32 by = 13;
  if (has_by()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->by(), target);
  }

  // optional uint64 what = 14;
  if (has_what()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->what(), target);
  }

  // optional uint64 param1 = 15;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->param1(), target);
  }

  // repeated uint32 mark = 18;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->mark(i), target);
  }

  // optional string logid = 19;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ManualLogCmd)
  return target;
}

int ManualLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = MANUAL_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 by = 13;
    if (has_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by());
    }

    // optional uint64 what = 14;
    if (has_what()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->what());
    }

    // optional uint64 param1 = 15;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param1());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string logid = 19;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManualLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManualLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManualLogCmd::MergeFrom(const ManualLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_by()) {
      set_by(from.by());
    }
    if (from.has_what()) {
      set_what(from.what());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManualLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualLogCmd::CopyFrom(const ManualLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualLogCmd::IsInitialized() const {

  return true;
}

void ManualLogCmd::Swap(ManualLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(type_, other->type_);
    std::swap(by_, other->by_);
    std::swap(what_, other->what_);
    std::swap(param1_, other->param1_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManualLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManualLogCmd_descriptor_;
  metadata.reflection = ManualLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompleteLogCmd::kCmdFieldNumber;
const int CompleteLogCmd::kParamFieldNumber;
const int CompleteLogCmd::kCidFieldNumber;
const int CompleteLogCmd::kSidFieldNumber;
const int CompleteLogCmd::kHidFieldNumber;
const int CompleteLogCmd::kAccountFieldNumber;
const int CompleteLogCmd::kPidFieldNumber;
const int CompleteLogCmd::kIspayFieldNumber;
const int CompleteLogCmd::kTimeFieldNumber;
const int CompleteLogCmd::kEidFieldNumber;
const int CompleteLogCmd::kEtypeFieldNumber;
const int CompleteLogCmd::kTypeFieldNumber;
const int CompleteLogCmd::kTargetidFieldNumber;
const int CompleteLogCmd::kTodayCountFieldNumber;
const int CompleteLogCmd::kRewardTypeFieldNumber;
const int CompleteLogCmd::kRewardCountFieldNumber;
const int CompleteLogCmd::kLevelFieldNumber;
const int CompleteLogCmd::kMarkFieldNumber;
const int CompleteLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

CompleteLogCmd::CompleteLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CompleteLogCmd)
}

void CompleteLogCmd::InitAsDefaultInstance() {
}

CompleteLogCmd::CompleteLogCmd(const CompleteLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CompleteLogCmd)
}

void CompleteLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 35;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  type_ = 0u;
  targetid_ = GOOGLE_ULONGLONG(0);
  today_count_ = 0u;
  reward_type_ = 0u;
  reward_count_ = 0u;
  level_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompleteLogCmd::~CompleteLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CompleteLogCmd)
  SharedDtor();
}

void CompleteLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void CompleteLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompleteLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompleteLogCmd_descriptor_;
}

const CompleteLogCmd& CompleteLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

CompleteLogCmd* CompleteLogCmd::default_instance_ = NULL;

CompleteLogCmd* CompleteLogCmd::New() const {
  return new CompleteLogCmd;
}

void CompleteLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CompleteLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 35;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(eid_, reward_count_);
  }
  if (_has_bits_[16 / 32] & 327680) {
    level_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompleteLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CompleteLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = COMPLETE_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional uint32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_targetid;
        break;
      }

      // optional uint64 targetid = 13;
      case 13: {
        if (tag == 104) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_today_count;
        break;
      }

      // optional uint32 today_count = 14;
      case 14: {
        if (tag == 112) {
         parse_today_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_count_)));
          set_has_today_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_reward_type;
        break;
      }

      // optional uint32 reward_type = 15;
      case 15: {
        if (tag == 120) {
         parse_reward_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_type_)));
          set_has_reward_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_reward_count;
        break;
      }

      // optional uint32 reward_count = 16;
      case 16: {
        if (tag == 128) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_level;
        break;
      }

      // optional uint32 level = 17;
      case 17: {
        if (tag == 136) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 18;
      case 18: {
        if (tag == 144) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_mark())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_mark;
        if (input->ExpectTag(154)) goto parse_logid;
        break;
      }

      // optional string logid = 19;
      case 19: {
        if (tag == 154) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CompleteLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CompleteLogCmd)
  return false;
#undef DO_
}

void CompleteLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CompleteLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = COMPLETE_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }

  // optional uint64 targetid = 13;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->targetid(), output);
  }

  // optional uint32 today_count = 14;
  if (has_today_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->today_count(), output);
  }

  // optional uint32 reward_type = 15;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->reward_type(), output);
  }

  // optional uint32 reward_count = 16;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->reward_count(), output);
  }

  // optional uint32 level = 17;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->level(), output);
  }

  // repeated uint32 mark = 18;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->mark(i), output);
  }

  // optional string logid = 19;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CompleteLogCmd)
}

::google::protobuf::uint8* CompleteLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CompleteLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = COMPLETE_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->type(), target);
  }

  // optional uint64 targetid = 13;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->targetid(), target);
  }

  // optional uint32 today_count = 14;
  if (has_today_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->today_count(), target);
  }

  // optional uint32 reward_type = 15;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->reward_type(), target);
  }

  // optional uint32 reward_count = 16;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->reward_count(), target);
  }

  // optional uint32 level = 17;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->level(), target);
  }

  // repeated uint32 mark = 18;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->mark(i), target);
  }

  // optional string logid = 19;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CompleteLogCmd)
  return target;
}

int CompleteLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = COMPLETE_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 targetid = 13;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional uint32 today_count = 14;
    if (has_today_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_count());
    }

    // optional uint32 reward_type = 15;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_type());
    }

    // optional uint32 reward_count = 16;
    if (has_reward_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_count());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 level = 17;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional string logid = 19;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompleteLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompleteLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompleteLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompleteLogCmd::MergeFrom(const CompleteLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_today_count()) {
      set_today_count(from.today_count());
    }
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompleteLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteLogCmd::CopyFrom(const CompleteLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteLogCmd::IsInitialized() const {

  return true;
}

void CompleteLogCmd::Swap(CompleteLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(type_, other->type_);
    std::swap(targetid_, other->targetid_);
    std::swap(today_count_, other->today_count_);
    std::swap(reward_type_, other->reward_type_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(level_, other->level_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompleteLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompleteLogCmd_descriptor_;
  metadata.reflection = CompleteLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerLogCmd::kCmdFieldNumber;
const int TowerLogCmd::kParamFieldNumber;
const int TowerLogCmd::kCidFieldNumber;
const int TowerLogCmd::kSidFieldNumber;
const int TowerLogCmd::kHidFieldNumber;
const int TowerLogCmd::kAccountFieldNumber;
const int TowerLogCmd::kPidFieldNumber;
const int TowerLogCmd::kIspayFieldNumber;
const int TowerLogCmd::kTimeFieldNumber;
const int TowerLogCmd::kEidFieldNumber;
const int TowerLogCmd::kEtypeFieldNumber;
const int TowerLogCmd::kTypeFieldNumber;
const int TowerLogCmd::kCurLayerFieldNumber;
const int TowerLogCmd::kMaxLayerFieldNumber;
const int TowerLogCmd::kTeamIdFieldNumber;
const int TowerLogCmd::kLevelFieldNumber;
const int TowerLogCmd::kMarkFieldNumber;
const int TowerLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

TowerLogCmd::TowerLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TowerLogCmd)
}

void TowerLogCmd::InitAsDefaultInstance() {
}

TowerLogCmd::TowerLogCmd(const TowerLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TowerLogCmd)
}

void TowerLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 42;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  type_ = 0u;
  curlayer_ = 0u;
  maxlayer_ = 0u;
  teamid_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerLogCmd::~TowerLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TowerLogCmd)
  SharedDtor();
}

void TowerLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void TowerLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerLogCmd_descriptor_;
}

const TowerLogCmd& TowerLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

TowerLogCmd* TowerLogCmd::default_instance_ = NULL;

TowerLogCmd* TowerLogCmd::New() const {
  return new TowerLogCmd;
}

void TowerLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TowerLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 42;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(eid_, level_);
  }
  if (has_logid()) {
    if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      logid_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TowerLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = TOWER_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional uint32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_curLayer;
        break;
      }

      // optional uint32 curLayer = 13;
      case 13: {
        if (tag == 104) {
         parse_curLayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curlayer_)));
          set_has_curlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_maxLayer;
        break;
      }

      // optional uint32 maxLayer = 14;
      case 14: {
        if (tag == 112) {
         parse_maxLayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlayer_)));
          set_has_maxlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_teamId;
        break;
      }

      // optional uint64 teamId = 15;
      case 15: {
        if (tag == 120) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_level;
        break;
      }

      // optional uint32 level = 16;
      case 16: {
        if (tag == 128) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 18;
      case 18: {
        if (tag == 144) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_mark())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_mark;
        if (input->ExpectTag(154)) goto parse_logid;
        break;
      }

      // optional string logid = 19;
      case 19: {
        if (tag == 154) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TowerLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TowerLogCmd)
  return false;
#undef DO_
}

void TowerLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TowerLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = TOWER_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }

  // optional uint32 curLayer = 13;
  if (has_curlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->curlayer(), output);
  }

  // optional uint32 maxLayer = 14;
  if (has_maxlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->maxlayer(), output);
  }

  // optional uint64 teamId = 15;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->teamid(), output);
  }

  // optional uint32 level = 16;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->level(), output);
  }

  // repeated uint32 mark = 18;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->mark(i), output);
  }

  // optional string logid = 19;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TowerLogCmd)
}

::google::protobuf::uint8* TowerLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TowerLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = TOWER_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->type(), target);
  }

  // optional uint32 curLayer = 13;
  if (has_curlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->curlayer(), target);
  }

  // optional uint32 maxLayer = 14;
  if (has_maxlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->maxlayer(), target);
  }

  // optional uint64 teamId = 15;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->teamid(), target);
  }

  // optional uint32 level = 16;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->level(), target);
  }

  // repeated uint32 mark = 18;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->mark(i), target);
  }

  // optional string logid = 19;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TowerLogCmd)
  return target;
}

int TowerLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = TOWER_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 curLayer = 13;
    if (has_curlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curlayer());
    }

    // optional uint32 maxLayer = 14;
    if (has_maxlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlayer());
    }

    // optional uint64 teamId = 15;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 level = 16;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional string logid = 19;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerLogCmd::MergeFrom(const TowerLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_curlayer()) {
      set_curlayer(from.curlayer());
    }
    if (from.has_maxlayer()) {
      set_maxlayer(from.maxlayer());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerLogCmd::CopyFrom(const TowerLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerLogCmd::IsInitialized() const {

  return true;
}

void TowerLogCmd::Swap(TowerLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(type_, other->type_);
    std::swap(curlayer_, other->curlayer_);
    std::swap(maxlayer_, other->maxlayer_);
    std::swap(teamid_, other->teamid_);
    std::swap(level_, other->level_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerLogCmd_descriptor_;
  metadata.reflection = TowerLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemOperLogCmd::kCmdFieldNumber;
const int ItemOperLogCmd::kParamFieldNumber;
const int ItemOperLogCmd::kCidFieldNumber;
const int ItemOperLogCmd::kSidFieldNumber;
const int ItemOperLogCmd::kHidFieldNumber;
const int ItemOperLogCmd::kAccountFieldNumber;
const int ItemOperLogCmd::kPidFieldNumber;
const int ItemOperLogCmd::kIspayFieldNumber;
const int ItemOperLogCmd::kTimeFieldNumber;
const int ItemOperLogCmd::kEidFieldNumber;
const int ItemOperLogCmd::kEtypeFieldNumber;
const int ItemOperLogCmd::kTypeFieldNumber;
const int ItemOperLogCmd::kItemidFieldNumber;
const int ItemOperLogCmd::kCountFieldNumber;
const int ItemOperLogCmd::kMarkFieldNumber;
const int ItemOperLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

ItemOperLogCmd::ItemOperLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ItemOperLogCmd)
}

void ItemOperLogCmd::InitAsDefaultInstance() {
}

ItemOperLogCmd::ItemOperLogCmd(const ItemOperLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ItemOperLogCmd)
}

void ItemOperLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 40;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  type_ = 0u;
  itemid_ = 0u;
  count_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemOperLogCmd::~ItemOperLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ItemOperLogCmd)
  SharedDtor();
}

void ItemOperLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void ItemOperLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemOperLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemOperLogCmd_descriptor_;
}

const ItemOperLogCmd& ItemOperLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

ItemOperLogCmd* ItemOperLogCmd::default_instance_ = NULL;

ItemOperLogCmd* ItemOperLogCmd::New() const {
  return new ItemOperLogCmd;
}

void ItemOperLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemOperLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 40;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 48896) {
    ZR_(eid_, itemid_);
    count_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemOperLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ItemOperLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = ITEMOPER_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional uint32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 13;
      case 13: {
        if (tag == 104) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_count;
        break;
      }

      // optional uint32 count = 14;
      case 14: {
        if (tag == 112) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 15;
      case 15: {
        if (tag == 120) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_mark())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_mark;
        if (input->ExpectTag(130)) goto parse_logid;
        break;
      }

      // optional string logid = 16;
      case 16: {
        if (tag == 130) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ItemOperLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ItemOperLogCmd)
  return false;
#undef DO_
}

void ItemOperLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ItemOperLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = ITEMOPER_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }

  // optional uint32 itemid = 13;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->itemid(), output);
  }

  // optional uint32 count = 14;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->count(), output);
  }

  // repeated uint32 mark = 15;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->mark(i), output);
  }

  // optional string logid = 16;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ItemOperLogCmd)
}

::google::protobuf::uint8* ItemOperLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ItemOperLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = ITEMOPER_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->type(), target);
  }

  // optional uint32 itemid = 13;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->itemid(), target);
  }

  // optional uint32 count = 14;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->count(), target);
  }

  // repeated uint32 mark = 15;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->mark(i), target);
  }

  // optional string logid = 16;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ItemOperLogCmd)
  return target;
}

int ItemOperLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = ITEMOPER_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 itemid = 13;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 count = 14;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional string logid = 16;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 1 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemOperLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemOperLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemOperLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemOperLogCmd::MergeFrom(const ItemOperLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemOperLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemOperLogCmd::CopyFrom(const ItemOperLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemOperLogCmd::IsInitialized() const {

  return true;
}

void ItemOperLogCmd::Swap(ItemOperLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(type_, other->type_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemOperLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemOperLogCmd_descriptor_;
  metadata.reflection = ItemOperLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillLogCmd::kCmdFieldNumber;
const int KillLogCmd::kParamFieldNumber;
const int KillLogCmd::kCidFieldNumber;
const int KillLogCmd::kSidFieldNumber;
const int KillLogCmd::kHidFieldNumber;
const int KillLogCmd::kAccountFieldNumber;
const int KillLogCmd::kPidFieldNumber;
const int KillLogCmd::kIspayFieldNumber;
const int KillLogCmd::kTimeFieldNumber;
const int KillLogCmd::kEidFieldNumber;
const int KillLogCmd::kEtypeFieldNumber;
const int KillLogCmd::kMonsteridFieldNumber;
const int KillLogCmd::kMonstergidFieldNumber;
const int KillLogCmd::kMonstergroupFieldNumber;
const int KillLogCmd::kBaseexpFieldNumber;
const int KillLogCmd::kJobexpFieldNumber;
const int KillLogCmd::kIsmvpFieldNumber;
const int KillLogCmd::kMarkFieldNumber;
const int KillLogCmd::kTypeFieldNumber;
const int KillLogCmd::kLevelFieldNumber;
const int KillLogCmd::kKilltypeFieldNumber;
const int KillLogCmd::kLogidFieldNumber;
const int KillLogCmd::kLineidFieldNumber;
#endif  // !_MSC_VER

KillLogCmd::KillLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.KillLogCmd)
}

void KillLogCmd::InitAsDefaultInstance() {
}

KillLogCmd::KillLogCmd(const KillLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.KillLogCmd)
}

void KillLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 38;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  monsterid_ = 0u;
  monstergid_ = GOOGLE_ULONGLONG(0);
  monstergroup_ = 0u;
  baseexp_ = 0u;
  jobexp_ = 0u;
  ismvp_ = 0;
  type_ = 0u;
  level_ = 0u;
  killtype_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lineid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillLogCmd::~KillLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.KillLogCmd)
  SharedDtor();
}

void KillLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void KillLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillLogCmd_descriptor_;
}

const KillLogCmd& KillLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

KillLogCmd* KillLogCmd::default_instance_ = NULL;

KillLogCmd* KillLogCmd::New() const {
  return new KillLogCmd;
}

void KillLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KillLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 38;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(eid_, jobexp_);
  }
  if (_has_bits_[16 / 32] & 8192000) {
    ZR_(ismvp_, killtype_);
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
    lineid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.KillLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = KILL_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_monsterid;
        break;
      }

      // optional uint32 monsterid = 12;
      case 12: {
        if (tag == 96) {
         parse_monsterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_monstergid;
        break;
      }

      // optional uint64 monstergid = 13;
      case 13: {
        if (tag == 104) {
         parse_monstergid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &monstergid_)));
          set_has_monstergid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_monstergroup;
        break;
      }

      // optional uint32 monstergroup = 14;
      case 14: {
        if (tag == 112) {
         parse_monstergroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monstergroup_)));
          set_has_monstergroup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_baseexp;
        break;
      }

      // optional uint32 baseexp = 15;
      case 15: {
        if (tag == 120) {
         parse_baseexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseexp_)));
          set_has_baseexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_jobexp;
        break;
      }

      // optional uint32 jobexp = 16;
      case 16: {
        if (tag == 128) {
         parse_jobexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jobexp_)));
          set_has_jobexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_ismvp;
        break;
      }

      // optional int32 ismvp = 17;
      case 17: {
        if (tag == 136) {
         parse_ismvp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ismvp_)));
          set_has_ismvp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 18;
      case 18: {
        if (tag == 144) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_mark())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_mark;
        if (input->ExpectTag(152)) goto parse_type;
        break;
      }

      // optional uint32 type = 19;
      case 19: {
        if (tag == 152) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_level;
        break;
      }

      // optional uint32 level = 20;
      case 20: {
        if (tag == 160) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_killtype;
        break;
      }

      // optional uint32 killtype = 21;
      case 21: {
        if (tag == 168) {
         parse_killtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killtype_)));
          set_has_killtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_logid;
        break;
      }

      // optional string logid = 22;
      case 22: {
        if (tag == 178) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_lineid;
        break;
      }

      // optional uint32 lineid = 23;
      case 23: {
        if (tag == 184) {
         parse_lineid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lineid_)));
          set_has_lineid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.KillLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.KillLogCmd)
  return false;
#undef DO_
}

void KillLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.KillLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = KILL_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint32 monsterid = 12;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->monsterid(), output);
  }

  // optional uint64 monstergid = 13;
  if (has_monstergid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->monstergid(), output);
  }

  // optional uint32 monstergroup = 14;
  if (has_monstergroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->monstergroup(), output);
  }

  // optional uint32 baseexp = 15;
  if (has_baseexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->baseexp(), output);
  }

  // optional uint32 jobexp = 16;
  if (has_jobexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->jobexp(), output);
  }

  // optional int32 ismvp = 17;
  if (has_ismvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->ismvp(), output);
  }

  // repeated uint32 mark = 18;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->mark(i), output);
  }

  // optional uint32 type = 19;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->type(), output);
  }

  // optional uint32 level = 20;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->level(), output);
  }

  // optional uint32 killtype = 21;
  if (has_killtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->killtype(), output);
  }

  // optional string logid = 22;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->logid(), output);
  }

  // optional uint32 lineid = 23;
  if (has_lineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->lineid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.KillLogCmd)
}

::google::protobuf::uint8* KillLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.KillLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = KILL_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint32 monsterid = 12;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->monsterid(), target);
  }

  // optional uint64 monstergid = 13;
  if (has_monstergid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->monstergid(), target);
  }

  // optional uint32 monstergroup = 14;
  if (has_monstergroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->monstergroup(), target);
  }

  // optional uint32 baseexp = 15;
  if (has_baseexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->baseexp(), target);
  }

  // optional uint32 jobexp = 16;
  if (has_jobexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->jobexp(), target);
  }

  // optional int32 ismvp = 17;
  if (has_ismvp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->ismvp(), target);
  }

  // repeated uint32 mark = 18;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->mark(i), target);
  }

  // optional uint32 type = 19;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->type(), target);
  }

  // optional uint32 level = 20;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->level(), target);
  }

  // optional uint32 killtype = 21;
  if (has_killtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->killtype(), target);
  }

  // optional string logid = 22;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->logid(), target);
  }

  // optional uint32 lineid = 23;
  if (has_lineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->lineid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.KillLogCmd)
  return target;
}

int KillLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = KILL_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 monsterid = 12;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // optional uint64 monstergid = 13;
    if (has_monstergid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->monstergid());
    }

    // optional uint32 monstergroup = 14;
    if (has_monstergroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monstergroup());
    }

    // optional uint32 baseexp = 15;
    if (has_baseexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseexp());
    }

    // optional uint32 jobexp = 16;
    if (has_jobexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jobexp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 ismvp = 17;
    if (has_ismvp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ismvp());
    }

    // optional uint32 type = 19;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 level = 20;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 killtype = 21;
    if (has_killtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killtype());
    }

    // optional string logid = 22;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

    // optional uint32 lineid = 23;
    if (has_lineid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lineid());
    }

  }
  // repeated uint32 mark = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillLogCmd::MergeFrom(const KillLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_monstergid()) {
      set_monstergid(from.monstergid());
    }
    if (from.has_monstergroup()) {
      set_monstergroup(from.monstergroup());
    }
    if (from.has_baseexp()) {
      set_baseexp(from.baseexp());
    }
    if (from.has_jobexp()) {
      set_jobexp(from.jobexp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ismvp()) {
      set_ismvp(from.ismvp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_killtype()) {
      set_killtype(from.killtype());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_lineid()) {
      set_lineid(from.lineid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillLogCmd::CopyFrom(const KillLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillLogCmd::IsInitialized() const {

  return true;
}

void KillLogCmd::Swap(KillLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(monstergid_, other->monstergid_);
    std::swap(monstergroup_, other->monstergroup_);
    std::swap(baseexp_, other->baseexp_);
    std::swap(jobexp_, other->jobexp_);
    std::swap(ismvp_, other->ismvp_);
    mark_.Swap(&other->mark_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(killtype_, other->killtype_);
    std::swap(logid_, other->logid_);
    std::swap(lineid_, other->lineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillLogCmd_descriptor_;
  metadata.reflection = KillLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardLogCmd::kCmdFieldNumber;
const int RewardLogCmd::kParamFieldNumber;
const int RewardLogCmd::kCidFieldNumber;
const int RewardLogCmd::kSidFieldNumber;
const int RewardLogCmd::kHidFieldNumber;
const int RewardLogCmd::kAccountFieldNumber;
const int RewardLogCmd::kPidFieldNumber;
const int RewardLogCmd::kIspayFieldNumber;
const int RewardLogCmd::kTimeFieldNumber;
const int RewardLogCmd::kEidFieldNumber;
const int RewardLogCmd::kEtypeFieldNumber;
const int RewardLogCmd::kIdFieldNumber;
const int RewardLogCmd::kProfessionFieldNumber;
const int RewardLogCmd::kRewarditemFieldNumber;
const int RewardLogCmd::kMarkFieldNumber;
const int RewardLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

RewardLogCmd::RewardLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RewardLogCmd)
}

void RewardLogCmd::InitAsDefaultInstance() {
}

RewardLogCmd::RewardLogCmd(const RewardLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RewardLogCmd)
}

void RewardLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 43;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  id_ = 0u;
  profession_ = 0u;
  rewarditem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardLogCmd::~RewardLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RewardLogCmd)
  SharedDtor();
}

void RewardLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (rewarditem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewarditem_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void RewardLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardLogCmd_descriptor_;
}

const RewardLogCmd& RewardLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

RewardLogCmd* RewardLogCmd::default_instance_ = NULL;

RewardLogCmd* RewardLogCmd::New() const {
  return new RewardLogCmd;
}

void RewardLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RewardLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 43;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 48896) {
    ZR_(eid_, profession_);
    if (has_rewarditem()) {
      if (rewarditem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rewarditem_->clear();
      }
    }
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RewardLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = REWARD_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_id;
        break;
      }

      // optional uint32 id = 12;
      case 12: {
        if (tag == 96) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 13;
      case 13: {
        if (tag == 104) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_rewarditem;
        break;
      }

      // optional string rewarditem = 14;
      case 14: {
        if (tag == 114) {
         parse_rewarditem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewarditem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rewarditem().data(), this->rewarditem().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rewarditem");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 15;
      case 15: {
        if (tag == 120) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_mark())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_mark;
        if (input->ExpectTag(130)) goto parse_logid;
        break;
      }

      // optional string logid = 16;
      case 16: {
        if (tag == 130) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RewardLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RewardLogCmd)
  return false;
#undef DO_
}

void RewardLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RewardLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = REWARD_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint32 id = 12;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->id(), output);
  }

  // optional uint32 profession = 13;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->profession(), output);
  }

  // optional string rewarditem = 14;
  if (has_rewarditem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewarditem().data(), this->rewarditem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewarditem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->rewarditem(), output);
  }

  // repeated uint32 mark = 15;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->mark(i), output);
  }

  // optional string logid = 16;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RewardLogCmd)
}

::google::protobuf::uint8* RewardLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RewardLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = REWARD_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint32 id = 12;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->id(), target);
  }

  // optional uint32 profession = 13;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->profession(), target);
  }

  // optional string rewarditem = 14;
  if (has_rewarditem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewarditem().data(), this->rewarditem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewarditem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->rewarditem(), target);
  }

  // repeated uint32 mark = 15;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->mark(i), target);
  }

  // optional string logid = 16;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RewardLogCmd)
  return target;
}

int RewardLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = REWARD_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 id = 12;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 profession = 13;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional string rewarditem = 14;
    if (has_rewarditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewarditem());
    }

    // optional string logid = 16;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 1 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardLogCmd::MergeFrom(const RewardLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_rewarditem()) {
      set_rewarditem(from.rewarditem());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardLogCmd::CopyFrom(const RewardLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardLogCmd::IsInitialized() const {

  return true;
}

void RewardLogCmd::Swap(RewardLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(id_, other->id_);
    std::swap(profession_, other->profession_);
    std::swap(rewarditem_, other->rewarditem_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardLogCmd_descriptor_;
  metadata.reflection = RewardLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailLogCmd::kCmdFieldNumber;
const int MailLogCmd::kParamFieldNumber;
const int MailLogCmd::kCidFieldNumber;
const int MailLogCmd::kSidFieldNumber;
const int MailLogCmd::kHidFieldNumber;
const int MailLogCmd::kAccountFieldNumber;
const int MailLogCmd::kPidFieldNumber;
const int MailLogCmd::kIspayFieldNumber;
const int MailLogCmd::kTimeFieldNumber;
const int MailLogCmd::kEidFieldNumber;
const int MailLogCmd::kEtypeFieldNumber;
const int MailLogCmd::kIdFieldNumber;
const int MailLogCmd::kSysidFieldNumber;
const int MailLogCmd::kMailtypeFieldNumber;
const int MailLogCmd::kTitleFieldNumber;
const int MailLogCmd::kRewarditemFieldNumber;
const int MailLogCmd::kMarkFieldNumber;
const int MailLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

MailLogCmd::MailLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MailLogCmd)
}

void MailLogCmd::InitAsDefaultInstance() {
}

MailLogCmd::MailLogCmd(const MailLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MailLogCmd)
}

void MailLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 44;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  sysid_ = GOOGLE_ULONGLONG(0);
  mailtype_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rewarditem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailLogCmd::~MailLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MailLogCmd)
  SharedDtor();
}

void MailLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (rewarditem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewarditem_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void MailLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailLogCmd_descriptor_;
}

const MailLogCmd& MailLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

MailLogCmd* MailLogCmd::default_instance_ = NULL;

MailLogCmd* MailLogCmd::New() const {
  return new MailLogCmd;
}

void MailLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MailLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 44;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(eid_, sysid_);
    mailtype_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_rewarditem()) {
      if (rewarditem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rewarditem_->clear();
      }
    }
  }
  if (has_logid()) {
    if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      logid_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MailLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = MAIL_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_id;
        break;
      }

      // optional uint64 id = 12;
      case 12: {
        if (tag == 96) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_sysid;
        break;
      }

      // optional uint64 sysid = 13;
      case 13: {
        if (tag == 104) {
         parse_sysid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sysid_)));
          set_has_sysid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_mailtype;
        break;
      }

      // optional uint32 mailtype = 14;
      case 14: {
        if (tag == 112) {
         parse_mailtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_title;
        break;
      }

      // optional string title = 15;
      case 15: {
        if (tag == 122) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_rewarditem;
        break;
      }

      // optional string rewarditem = 16;
      case 16: {
        if (tag == 130) {
         parse_rewarditem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewarditem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rewarditem().data(), this->rewarditem().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rewarditem");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 17;
      case 17: {
        if (tag == 136) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_mark())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_mark;
        if (input->ExpectTag(146)) goto parse_logid;
        break;
      }

      // optional string logid = 18;
      case 18: {
        if (tag == 146) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MailLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MailLogCmd)
  return false;
#undef DO_
}

void MailLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MailLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = MAIL_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint64 id = 12;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->id(), output);
  }

  // optional uint64 sysid = 13;
  if (has_sysid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->sysid(), output);
  }

  // optional uint32 mailtype = 14;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->mailtype(), output);
  }

  // optional string title = 15;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->title(), output);
  }

  // optional string rewarditem = 16;
  if (has_rewarditem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewarditem().data(), this->rewarditem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewarditem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->rewarditem(), output);
  }

  // repeated uint32 mark = 17;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->mark(i), output);
  }

  // optional string logid = 18;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MailLogCmd)
}

::google::protobuf::uint8* MailLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MailLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = MAIL_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint64 id = 12;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->id(), target);
  }

  // optional uint64 sysid = 13;
  if (has_sysid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->sysid(), target);
  }

  // optional uint32 mailtype = 14;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->mailtype(), target);
  }

  // optional string title = 15;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->title(), target);
  }

  // optional string rewarditem = 16;
  if (has_rewarditem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewarditem().data(), this->rewarditem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewarditem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->rewarditem(), target);
  }

  // repeated uint32 mark = 17;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->mark(i), target);
  }

  // optional string logid = 18;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MailLogCmd)
  return target;
}

int MailLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = MAIL_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint64 id = 12;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 sysid = 13;
    if (has_sysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sysid());
    }

    // optional uint32 mailtype = 14;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

    // optional string title = 15;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string rewarditem = 16;
    if (has_rewarditem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewarditem());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional string logid = 18;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailLogCmd::MergeFrom(const MailLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sysid()) {
      set_sysid(from.sysid());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_rewarditem()) {
      set_rewarditem(from.rewarditem());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailLogCmd::CopyFrom(const MailLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailLogCmd::IsInitialized() const {

  return true;
}

void MailLogCmd::Swap(MailLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(id_, other->id_);
    std::swap(sysid_, other->sysid_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(title_, other->title_);
    std::swap(rewarditem_, other->rewarditem_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailLogCmd_descriptor_;
  metadata.reflection = MailLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DojoLogCmd::kCmdFieldNumber;
const int DojoLogCmd::kParamFieldNumber;
const int DojoLogCmd::kCidFieldNumber;
const int DojoLogCmd::kSidFieldNumber;
const int DojoLogCmd::kHidFieldNumber;
const int DojoLogCmd::kAccountFieldNumber;
const int DojoLogCmd::kPidFieldNumber;
const int DojoLogCmd::kIspayFieldNumber;
const int DojoLogCmd::kTimeFieldNumber;
const int DojoLogCmd::kEidFieldNumber;
const int DojoLogCmd::kEtypeFieldNumber;
const int DojoLogCmd::kDojoidFieldNumber;
const int DojoLogCmd::kMapidFieldNumber;
const int DojoLogCmd::kPasstypeFieldNumber;
const int DojoLogCmd::kLevelFieldNumber;
const int DojoLogCmd::kMarkFieldNumber;
const int DojoLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

DojoLogCmd::DojoLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DojoLogCmd)
}

void DojoLogCmd::InitAsDefaultInstance() {
}

DojoLogCmd::DojoLogCmd(const DojoLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DojoLogCmd)
}

void DojoLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 45;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  dojoid_ = 0u;
  mapid_ = 0u;
  passtype_ = 0u;
  level_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DojoLogCmd::~DojoLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DojoLogCmd)
  SharedDtor();
}

void DojoLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void DojoLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DojoLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoLogCmd_descriptor_;
}

const DojoLogCmd& DojoLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

DojoLogCmd* DojoLogCmd::default_instance_ = NULL;

DojoLogCmd* DojoLogCmd::New() const {
  return new DojoLogCmd;
}

void DojoLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DojoLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 45;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(eid_, level_);
  }
  if (has_logid()) {
    if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      logid_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DojoLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DojoLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = DOJO_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_dojoid;
        break;
      }

      // optional uint32 dojoid = 12;
      case 12: {
        if (tag == 96) {
         parse_dojoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dojoid_)));
          set_has_dojoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 13;
      case 13: {
        if (tag == 104) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_passtype;
        break;
      }

      // optional uint32 passtype = 14;
      case 14: {
        if (tag == 112) {
         parse_passtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passtype_)));
          set_has_passtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_level;
        break;
      }

      // optional uint32 level = 15;
      case 15: {
        if (tag == 120) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 16;
      case 16: {
        if (tag == 128) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_mark())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_mark;
        if (input->ExpectTag(138)) goto parse_logid;
        break;
      }

      // optional string logid = 17;
      case 17: {
        if (tag == 138) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DojoLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DojoLogCmd)
  return false;
#undef DO_
}

void DojoLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DojoLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = DOJO_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint32 dojoid = 12;
  if (has_dojoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->dojoid(), output);
  }

  // optional uint32 mapid = 13;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->mapid(), output);
  }

  // optional uint32 passtype = 14;
  if (has_passtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->passtype(), output);
  }

  // optional uint32 level = 15;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->level(), output);
  }

  // repeated uint32 mark = 16;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->mark(i), output);
  }

  // optional string logid = 17;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DojoLogCmd)
}

::google::protobuf::uint8* DojoLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DojoLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = DOJO_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint32 dojoid = 12;
  if (has_dojoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->dojoid(), target);
  }

  // optional uint32 mapid = 13;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->mapid(), target);
  }

  // optional uint32 passtype = 14;
  if (has_passtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->passtype(), target);
  }

  // optional uint32 level = 15;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->level(), target);
  }

  // repeated uint32 mark = 16;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->mark(i), target);
  }

  // optional string logid = 17;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DojoLogCmd)
  return target;
}

int DojoLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = DOJO_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 dojoid = 12;
    if (has_dojoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dojoid());
    }

    // optional uint32 mapid = 13;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 passtype = 14;
    if (has_passtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passtype());
    }

    // optional uint32 level = 15;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string logid = 17;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DojoLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DojoLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DojoLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DojoLogCmd::MergeFrom(const DojoLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_dojoid()) {
      set_dojoid(from.dojoid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_passtype()) {
      set_passtype(from.passtype());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DojoLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DojoLogCmd::CopyFrom(const DojoLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DojoLogCmd::IsInitialized() const {

  return true;
}

void DojoLogCmd::Swap(DojoLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(dojoid_, other->dojoid_);
    std::swap(mapid_, other->mapid_);
    std::swap(passtype_, other->passtype_);
    std::swap(level_, other->level_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DojoLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DojoLogCmd_descriptor_;
  metadata.reflection = DojoLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnchantLogCmd::kCmdFieldNumber;
const int EnchantLogCmd::kParamFieldNumber;
const int EnchantLogCmd::kCidFieldNumber;
const int EnchantLogCmd::kSidFieldNumber;
const int EnchantLogCmd::kHidFieldNumber;
const int EnchantLogCmd::kAccountFieldNumber;
const int EnchantLogCmd::kPidFieldNumber;
const int EnchantLogCmd::kIspayFieldNumber;
const int EnchantLogCmd::kTimeFieldNumber;
const int EnchantLogCmd::kEidFieldNumber;
const int EnchantLogCmd::kEtypeFieldNumber;
const int EnchantLogCmd::kEquipguidFieldNumber;
const int EnchantLogCmd::kItemidFieldNumber;
const int EnchantLogCmd::kEnchanttypeFieldNumber;
const int EnchantLogCmd::kOldattrFieldNumber;
const int EnchantLogCmd::kNewattrFieldNumber;
const int EnchantLogCmd::kOldbufidFieldNumber;
const int EnchantLogCmd::kNewbufidFieldNumber;
const int EnchantLogCmd::kCostitemidFieldNumber;
const int EnchantLogCmd::kCostitemcountFieldNumber;
const int EnchantLogCmd::kCostmoneyFieldNumber;
const int EnchantLogCmd::kMarkFieldNumber;
const int EnchantLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

EnchantLogCmd::EnchantLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnchantLogCmd)
}

void EnchantLogCmd::InitAsDefaultInstance() {
}

EnchantLogCmd::EnchantLogCmd(const EnchantLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnchantLogCmd)
}

void EnchantLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 46;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  equipguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemid_ = 0u;
  enchanttype_ = 0u;
  oldattr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newattr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oldbufid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newbufid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  costitemid_ = 0u;
  costitemcount_ = 0u;
  costmoney_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnchantLogCmd::~EnchantLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EnchantLogCmd)
  SharedDtor();
}

void EnchantLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (equipguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete equipguid_;
  }
  if (oldattr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldattr_;
  }
  if (newattr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newattr_;
  }
  if (oldbufid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldbufid_;
  }
  if (newbufid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newbufid_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void EnchantLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnchantLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnchantLogCmd_descriptor_;
}

const EnchantLogCmd& EnchantLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

EnchantLogCmd* EnchantLogCmd::default_instance_ = NULL;

EnchantLogCmd* EnchantLogCmd::New() const {
  return new EnchantLogCmd;
}

void EnchantLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnchantLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 46;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(eid_, etype_);
    ZR_(itemid_, enchanttype_);
    if (has_equipguid()) {
      if (equipguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        equipguid_->clear();
      }
    }
    if (has_oldattr()) {
      if (oldattr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        oldattr_->clear();
      }
    }
    if (has_newattr()) {
      if (newattr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newattr_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 6225920) {
    ZR_(costitemid_, costitemcount_);
    if (has_oldbufid()) {
      if (oldbufid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        oldbufid_->clear();
      }
    }
    if (has_newbufid()) {
      if (newbufid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newbufid_->clear();
      }
    }
    costmoney_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnchantLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnchantLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = ENCHANT_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_equipguid;
        break;
      }

      // optional string equipguid = 12;
      case 12: {
        if (tag == 98) {
         parse_equipguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->equipguid().data(), this->equipguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "equipguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_enchanttype;
        break;
      }

      // optional uint32 enchanttype = 13;
      case 13: {
        if (tag == 104) {
         parse_enchanttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enchanttype_)));
          set_has_enchanttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_oldattr;
        break;
      }

      // optional string oldattr = 14;
      case 14: {
        if (tag == 114) {
         parse_oldattr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldattr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldattr().data(), this->oldattr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oldattr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_newattr;
        break;
      }

      // optional string newattr = 15;
      case 15: {
        if (tag == 122) {
         parse_newattr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newattr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newattr().data(), this->newattr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newattr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_oldbufid;
        break;
      }

      // optional string oldbufid = 16;
      case 16: {
        if (tag == 130) {
         parse_oldbufid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldbufid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldbufid().data(), this->oldbufid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oldbufid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_newbufid;
        break;
      }

      // optional string newbufid = 17;
      case 17: {
        if (tag == 138) {
         parse_newbufid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newbufid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newbufid().data(), this->newbufid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newbufid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_costitemid;
        break;
      }

      // optional uint32 costitemid = 18;
      case 18: {
        if (tag == 144) {
         parse_costitemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costitemid_)));
          set_has_costitemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_costitemcount;
        break;
      }

      // optional uint32 costitemcount = 19;
      case 19: {
        if (tag == 152) {
         parse_costitemcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costitemcount_)));
          set_has_costitemcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_costmoney;
        break;
      }

      // optional uint32 costmoney = 20;
      case 20: {
        if (tag == 160) {
         parse_costmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costmoney_)));
          set_has_costmoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 21;
      case 21: {
        if (tag == 168) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 168, input, this->mutable_mark())));
        } else if (tag == 170) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_mark;
        if (input->ExpectTag(178)) goto parse_logid;
        break;
      }

      // optional string logid = 22;
      case 22: {
        if (tag == 178) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 23;
      case 23: {
        if (tag == 184) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnchantLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnchantLogCmd)
  return false;
#undef DO_
}

void EnchantLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnchantLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = ENCHANT_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional string equipguid = 12;
  if (has_equipguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->equipguid().data(), this->equipguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "equipguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->equipguid(), output);
  }

  // optional uint32 enchanttype = 13;
  if (has_enchanttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->enchanttype(), output);
  }

  // optional string oldattr = 14;
  if (has_oldattr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldattr().data(), this->oldattr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldattr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->oldattr(), output);
  }

  // optional string newattr = 15;
  if (has_newattr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newattr().data(), this->newattr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newattr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->newattr(), output);
  }

  // optional string oldbufid = 16;
  if (has_oldbufid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldbufid().data(), this->oldbufid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldbufid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->oldbufid(), output);
  }

  // optional string newbufid = 17;
  if (has_newbufid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newbufid().data(), this->newbufid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newbufid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->newbufid(), output);
  }

  // optional uint32 costitemid = 18;
  if (has_costitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->costitemid(), output);
  }

  // optional uint32 costitemcount = 19;
  if (has_costitemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->costitemcount(), output);
  }

  // optional uint32 costmoney = 20;
  if (has_costmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->costmoney(), output);
  }

  // repeated uint32 mark = 21;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      21, this->mark(i), output);
  }

  // optional string logid = 22;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->logid(), output);
  }

  // optional uint32 itemid = 23;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnchantLogCmd)
}

::google::protobuf::uint8* EnchantLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnchantLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = ENCHANT_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional string equipguid = 12;
  if (has_equipguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->equipguid().data(), this->equipguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "equipguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->equipguid(), target);
  }

  // optional uint32 enchanttype = 13;
  if (has_enchanttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->enchanttype(), target);
  }

  // optional string oldattr = 14;
  if (has_oldattr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldattr().data(), this->oldattr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldattr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->oldattr(), target);
  }

  // optional string newattr = 15;
  if (has_newattr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newattr().data(), this->newattr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newattr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->newattr(), target);
  }

  // optional string oldbufid = 16;
  if (has_oldbufid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldbufid().data(), this->oldbufid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldbufid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->oldbufid(), target);
  }

  // optional string newbufid = 17;
  if (has_newbufid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newbufid().data(), this->newbufid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newbufid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->newbufid(), target);
  }

  // optional uint32 costitemid = 18;
  if (has_costitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->costitemid(), target);
  }

  // optional uint32 costitemcount = 19;
  if (has_costitemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->costitemcount(), target);
  }

  // optional uint32 costmoney = 20;
  if (has_costmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->costmoney(), target);
  }

  // repeated uint32 mark = 21;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(21, this->mark(i), target);
  }

  // optional string logid = 22;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->logid(), target);
  }

  // optional uint32 itemid = 23;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnchantLogCmd)
  return target;
}

int EnchantLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = ENCHANT_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional string equipguid = 12;
    if (has_equipguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipguid());
    }

    // optional uint32 itemid = 23;
    if (has_itemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 enchanttype = 13;
    if (has_enchanttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enchanttype());
    }

    // optional string oldattr = 14;
    if (has_oldattr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldattr());
    }

    // optional string newattr = 15;
    if (has_newattr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newattr());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string oldbufid = 16;
    if (has_oldbufid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldbufid());
    }

    // optional string newbufid = 17;
    if (has_newbufid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newbufid());
    }

    // optional uint32 costitemid = 18;
    if (has_costitemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costitemid());
    }

    // optional uint32 costitemcount = 19;
    if (has_costitemcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costitemcount());
    }

    // optional uint32 costmoney = 20;
    if (has_costmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costmoney());
    }

    // optional string logid = 22;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnchantLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnchantLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnchantLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnchantLogCmd::MergeFrom(const EnchantLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_equipguid()) {
      set_equipguid(from.equipguid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_enchanttype()) {
      set_enchanttype(from.enchanttype());
    }
    if (from.has_oldattr()) {
      set_oldattr(from.oldattr());
    }
    if (from.has_newattr()) {
      set_newattr(from.newattr());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_oldbufid()) {
      set_oldbufid(from.oldbufid());
    }
    if (from.has_newbufid()) {
      set_newbufid(from.newbufid());
    }
    if (from.has_costitemid()) {
      set_costitemid(from.costitemid());
    }
    if (from.has_costitemcount()) {
      set_costitemcount(from.costitemcount());
    }
    if (from.has_costmoney()) {
      set_costmoney(from.costmoney());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnchantLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnchantLogCmd::CopyFrom(const EnchantLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnchantLogCmd::IsInitialized() const {

  return true;
}

void EnchantLogCmd::Swap(EnchantLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(equipguid_, other->equipguid_);
    std::swap(itemid_, other->itemid_);
    std::swap(enchanttype_, other->enchanttype_);
    std::swap(oldattr_, other->oldattr_);
    std::swap(newattr_, other->newattr_);
    std::swap(oldbufid_, other->oldbufid_);
    std::swap(newbufid_, other->newbufid_);
    std::swap(costitemid_, other->costitemid_);
    std::swap(costitemcount_, other->costitemcount_);
    std::swap(costmoney_, other->costmoney_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnchantLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnchantLogCmd_descriptor_;
  metadata.reflection = EnchantLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildPrayLogCmd::kCmdFieldNumber;
const int GuildPrayLogCmd::kParamFieldNumber;
const int GuildPrayLogCmd::kCidFieldNumber;
const int GuildPrayLogCmd::kSidFieldNumber;
const int GuildPrayLogCmd::kHidFieldNumber;
const int GuildPrayLogCmd::kAccountFieldNumber;
const int GuildPrayLogCmd::kPidFieldNumber;
const int GuildPrayLogCmd::kIspayFieldNumber;
const int GuildPrayLogCmd::kTimeFieldNumber;
const int GuildPrayLogCmd::kEidFieldNumber;
const int GuildPrayLogCmd::kEtypeFieldNumber;
const int GuildPrayLogCmd::kPrayidFieldNumber;
const int GuildPrayLogCmd::kAddattrFieldNumber;
const int GuildPrayLogCmd::kCostitemFieldNumber;
const int GuildPrayLogCmd::kCostmoneyFieldNumber;
const int GuildPrayLogCmd::kCostconFieldNumber;
const int GuildPrayLogCmd::kMarkFieldNumber;
const int GuildPrayLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

GuildPrayLogCmd::GuildPrayLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildPrayLogCmd)
}

void GuildPrayLogCmd::InitAsDefaultInstance() {
}

GuildPrayLogCmd::GuildPrayLogCmd(const GuildPrayLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildPrayLogCmd)
}

void GuildPrayLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 47;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  prayid_ = 0u;
  addattr_ = 0u;
  costitem_ = 0u;
  costmoney_ = 0u;
  costcon_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildPrayLogCmd::~GuildPrayLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildPrayLogCmd)
  SharedDtor();
}

void GuildPrayLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void GuildPrayLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildPrayLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildPrayLogCmd_descriptor_;
}

const GuildPrayLogCmd& GuildPrayLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

GuildPrayLogCmd* GuildPrayLogCmd::default_instance_ = NULL;

GuildPrayLogCmd* GuildPrayLogCmd::New() const {
  return new GuildPrayLogCmd;
}

void GuildPrayLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildPrayLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 47;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(eid_, costmoney_);
    costcon_ = 0u;
  }
  if (has_logid()) {
    if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      logid_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildPrayLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildPrayLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = GUILDPRAY_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_prayid;
        break;
      }

      // optional uint32 prayid = 12;
      case 12: {
        if (tag == 96) {
         parse_prayid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prayid_)));
          set_has_prayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_addattr;
        break;
      }

      // optional uint32 addattr = 13;
      case 13: {
        if (tag == 104) {
         parse_addattr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addattr_)));
          set_has_addattr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_costitem;
        break;
      }

      // optional uint32 costitem = 14;
      case 14: {
        if (tag == 112) {
         parse_costitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costitem_)));
          set_has_costitem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_costmoney;
        break;
      }

      // optional uint32 costmoney = 15;
      case 15: {
        if (tag == 120) {
         parse_costmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costmoney_)));
          set_has_costmoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_costcon;
        break;
      }

      // optional uint32 costcon = 16;
      case 16: {
        if (tag == 128) {
         parse_costcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costcon_)));
          set_has_costcon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_mark;
        break;
      }

      // repeated uint32 mark = 17;
      case 17: {
        if (tag == 136) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_mark())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mark())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_mark;
        if (input->ExpectTag(146)) goto parse_logid;
        break;
      }

      // optional string logid = 18;
      case 18: {
        if (tag == 146) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildPrayLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildPrayLogCmd)
  return false;
#undef DO_
}

void GuildPrayLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildPrayLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = GUILDPRAY_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint32 prayid = 12;
  if (has_prayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->prayid(), output);
  }

  // optional uint32 addattr = 13;
  if (has_addattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->addattr(), output);
  }

  // optional uint32 costitem = 14;
  if (has_costitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->costitem(), output);
  }

  // optional uint32 costmoney = 15;
  if (has_costmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->costmoney(), output);
  }

  // optional uint32 costcon = 16;
  if (has_costcon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->costcon(), output);
  }

  // repeated uint32 mark = 17;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->mark(i), output);
  }

  // optional string logid = 18;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildPrayLogCmd)
}

::google::protobuf::uint8* GuildPrayLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildPrayLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = GUILDPRAY_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint32 prayid = 12;
  if (has_prayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->prayid(), target);
  }

  // optional uint32 addattr = 13;
  if (has_addattr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->addattr(), target);
  }

  // optional uint32 costitem = 14;
  if (has_costitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->costitem(), target);
  }

  // optional uint32 costmoney = 15;
  if (has_costmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->costmoney(), target);
  }

  // optional uint32 costcon = 16;
  if (has_costcon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->costcon(), target);
  }

  // repeated uint32 mark = 17;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->mark(i), target);
  }

  // optional string logid = 18;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildPrayLogCmd)
  return target;
}

int GuildPrayLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = GUILDPRAY_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 prayid = 12;
    if (has_prayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prayid());
    }

    // optional uint32 addattr = 13;
    if (has_addattr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addattr());
    }

    // optional uint32 costitem = 14;
    if (has_costitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costitem());
    }

    // optional uint32 costmoney = 15;
    if (has_costmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costmoney());
    }

    // optional uint32 costcon = 16;
    if (has_costcon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costcon());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional string logid = 18;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  // repeated uint32 mark = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->mark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mark(i));
    }
    total_size += 2 * this->mark_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildPrayLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildPrayLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildPrayLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildPrayLogCmd::MergeFrom(const GuildPrayLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_prayid()) {
      set_prayid(from.prayid());
    }
    if (from.has_addattr()) {
      set_addattr(from.addattr());
    }
    if (from.has_costitem()) {
      set_costitem(from.costitem());
    }
    if (from.has_costmoney()) {
      set_costmoney(from.costmoney());
    }
    if (from.has_costcon()) {
      set_costcon(from.costcon());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildPrayLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPrayLogCmd::CopyFrom(const GuildPrayLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPrayLogCmd::IsInitialized() const {

  return true;
}

void GuildPrayLogCmd::Swap(GuildPrayLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(prayid_, other->prayid_);
    std::swap(addattr_, other->addattr_);
    std::swap(costitem_, other->costitem_);
    std::swap(costmoney_, other->costmoney_);
    std::swap(costcon_, other->costcon_);
    mark_.Swap(&other->mark_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildPrayLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildPrayLogCmd_descriptor_;
  metadata.reflection = GuildPrayLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseSkillLogCmd::kCmdFieldNumber;
const int UseSkillLogCmd::kParamFieldNumber;
const int UseSkillLogCmd::kCidFieldNumber;
const int UseSkillLogCmd::kSidFieldNumber;
const int UseSkillLogCmd::kHidFieldNumber;
const int UseSkillLogCmd::kAccountFieldNumber;
const int UseSkillLogCmd::kPidFieldNumber;
const int UseSkillLogCmd::kIspayFieldNumber;
const int UseSkillLogCmd::kTimeFieldNumber;
const int UseSkillLogCmd::kEidFieldNumber;
const int UseSkillLogCmd::kEtypeFieldNumber;
const int UseSkillLogCmd::kSkillidFieldNumber;
const int UseSkillLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

UseSkillLogCmd::UseSkillLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UseSkillLogCmd)
}

void UseSkillLogCmd::InitAsDefaultInstance() {
}

UseSkillLogCmd::UseSkillLogCmd(const UseSkillLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UseSkillLogCmd)
}

void UseSkillLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 48;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  skillid_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseSkillLogCmd::~UseSkillLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UseSkillLogCmd)
  SharedDtor();
}

void UseSkillLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void UseSkillLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseSkillLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseSkillLogCmd_descriptor_;
}

const UseSkillLogCmd& UseSkillLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

UseSkillLogCmd* UseSkillLogCmd::default_instance_ = NULL;

UseSkillLogCmd* UseSkillLogCmd::New() const {
  return new UseSkillLogCmd;
}

void UseSkillLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UseSkillLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 48;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(eid_, etype_);
    skillid_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseSkillLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UseSkillLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = USESKILL_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_skillid;
        break;
      }

      // optional uint32 skillid = 12;
      case 12: {
        if (tag == 96) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_logid;
        break;
      }

      // optional string logid = 13;
      case 13: {
        if (tag == 106) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UseSkillLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UseSkillLogCmd)
  return false;
#undef DO_
}

void UseSkillLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UseSkillLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = USESKILL_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint32 skillid = 12;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->skillid(), output);
  }

  // optional string logid = 13;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UseSkillLogCmd)
}

::google::protobuf::uint8* UseSkillLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UseSkillLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = USESKILL_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint32 skillid = 12;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->skillid(), target);
  }

  // optional string logid = 13;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UseSkillLogCmd)
  return target;
}

int UseSkillLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = USESKILL_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 skillid = 12;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional string logid = 13;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseSkillLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseSkillLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseSkillLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseSkillLogCmd::MergeFrom(const UseSkillLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseSkillLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseSkillLogCmd::CopyFrom(const UseSkillLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseSkillLogCmd::IsInitialized() const {

  return true;
}

void UseSkillLogCmd::Swap(UseSkillLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(skillid_, other->skillid_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseSkillLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseSkillLogCmd_descriptor_;
  metadata.reflection = UseSkillLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActiveLogCmd::kCmdFieldNumber;
const int ActiveLogCmd::kParamFieldNumber;
const int ActiveLogCmd::kChannelFieldNumber;
const int ActiveLogCmd::kCdkeyFieldNumber;
const int ActiveLogCmd::kAccountFieldNumber;
const int ActiveLogCmd::kTimeFieldNumber;
const int ActiveLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

ActiveLogCmd::ActiveLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActiveLogCmd)
}

void ActiveLogCmd::InitAsDefaultInstance() {
}

ActiveLogCmd::ActiveLogCmd(const ActiveLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActiveLogCmd)
}

void ActiveLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 49;
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActiveLogCmd::~ActiveLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ActiveLogCmd)
  SharedDtor();
}

void ActiveLogCmd::SharedDtor() {
  if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_;
  }
  if (cdkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cdkey_;
  }
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void ActiveLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActiveLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActiveLogCmd_descriptor_;
}

const ActiveLogCmd& ActiveLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

ActiveLogCmd* ActiveLogCmd::default_instance_ = NULL;

ActiveLogCmd* ActiveLogCmd::New() const {
  return new ActiveLogCmd;
}

void ActiveLogCmd::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    cmd_ = 204;
    param_ = 49;
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_->clear();
      }
    }
    if (has_cdkey()) {
      if (cdkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cdkey_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    time_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActiveLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActiveLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = ACTIVE_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        break;
      }

      // optional string channel = 3;
      case 3: {
        if (tag == 26) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cdkey;
        break;
      }

      // optional string cdkey = 4;
      case 4: {
        if (tag == 34) {
         parse_cdkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdkey().data(), this->cdkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cdkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }

      // optional string account = 5;
      case 5: {
        if (tag == 42) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_logid;
        break;
      }

      // optional string logid = 7;
      case 7: {
        if (tag == 58) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActiveLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActiveLogCmd)
  return false;
#undef DO_
}

void ActiveLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActiveLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = ACTIVE_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channel(), output);
  }

  // optional string cdkey = 4;
  if (has_cdkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdkey().data(), this->cdkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cdkey(), output);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->account(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional string logid = 7;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActiveLogCmd)
}

::google::protobuf::uint8* ActiveLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActiveLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = ACTIVE_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel(), target);
  }

  // optional string cdkey = 4;
  if (has_cdkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdkey().data(), this->cdkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cdkey(), target);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional string logid = 7;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActiveLogCmd)
  return target;
}

int ActiveLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = ACTIVE_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional string cdkey = 4;
    if (has_cdkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdkey());
    }

    // optional string account = 5;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string logid = 7;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActiveLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActiveLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActiveLogCmd::MergeFrom(const ActiveLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_cdkey()) {
      set_cdkey(from.cdkey());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActiveLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveLogCmd::CopyFrom(const ActiveLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveLogCmd::IsInitialized() const {

  return true;
}

void ActiveLogCmd::Swap(ActiveLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(channel_, other->channel_);
    std::swap(cdkey_, other->cdkey_);
    std::swap(account_, other->account_);
    std::swap(time_, other->time_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActiveLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActiveLogCmd_descriptor_;
  metadata.reflection = ActiveLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeLogCmd::kCmdFieldNumber;
const int TradeLogCmd::kParamFieldNumber;
const int TradeLogCmd::kCidFieldNumber;
const int TradeLogCmd::kSidFieldNumber;
const int TradeLogCmd::kPidFieldNumber;
const int TradeLogCmd::kTimeFieldNumber;
const int TradeLogCmd::kTypeFieldNumber;
const int TradeLogCmd::kItemidFieldNumber;
const int TradeLogCmd::kCountFieldNumber;
const int TradeLogCmd::kPriceFieldNumber;
const int TradeLogCmd::kTaxFieldNumber;
const int TradeLogCmd::kMoneycountFieldNumber;
const int TradeLogCmd::kIteminfoFieldNumber;
const int TradeLogCmd::kOtheridFieldNumber;
const int TradeLogCmd::kLogidFieldNumber;
const int TradeLogCmd::kStrotheridFieldNumber;
const int TradeLogCmd::kSpendQuotaFieldNumber;
#endif  // !_MSC_VER

TradeLogCmd::TradeLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TradeLogCmd)
}

void TradeLogCmd::InitAsDefaultInstance() {
}

TradeLogCmd::TradeLogCmd(const TradeLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TradeLogCmd)
}

void TradeLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 50;
  cid_ = 0u;
  sid_ = 0u;
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  type_ = 0u;
  itemid_ = 0u;
  count_ = 0u;
  price_ = 0u;
  tax_ = 0u;
  moneycount_ = 0u;
  iteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otherid_ = GOOGLE_ULONGLONG(0);
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strotherid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spend_quota_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeLogCmd::~TradeLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TradeLogCmd)
  SharedDtor();
}

void TradeLogCmd::SharedDtor() {
  if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iteminfo_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (strotherid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strotherid_;
  }
  if (this != default_instance_) {
  }
}

void TradeLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeLogCmd_descriptor_;
}

const TradeLogCmd& TradeLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

TradeLogCmd* TradeLogCmd::default_instance_ = NULL;

TradeLogCmd* TradeLogCmd::New() const {
  return new TradeLogCmd;
}

void TradeLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TradeLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, itemid_);
    cmd_ = 204;
    param_ = 50;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(count_, tax_);
    moneycount_ = 0u;
    if (has_iteminfo()) {
      if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iteminfo_->clear();
      }
    }
    otherid_ = GOOGLE_ULONGLONG(0);
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
    if (has_strotherid()) {
      if (strotherid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strotherid_->clear();
      }
    }
  }
  spend_quota_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TradeLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = TRADE_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 5;
      case 5: {
        if (tag == 40) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional uint32 type = 7;
      case 7: {
        if (tag == 56) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 8;
      case 8: {
        if (tag == 64) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_count;
        break;
      }

      // optional uint32 count = 9;
      case 9: {
        if (tag == 72) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_price;
        break;
      }

      // optional uint32 price = 10;
      case 10: {
        if (tag == 80) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_tax;
        break;
      }

      // optional uint32 tax = 11;
      case 11: {
        if (tag == 88) {
         parse_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_moneycount;
        break;
      }

      // optional uint32 moneycount = 12;
      case 12: {
        if (tag == 96) {
         parse_moneycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneycount_)));
          set_has_moneycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_iteminfo;
        break;
      }

      // optional string iteminfo = 13;
      case 13: {
        if (tag == 106) {
         parse_iteminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iteminfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iteminfo().data(), this->iteminfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iteminfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_otherid;
        break;
      }

      // optional uint64 otherid = 14;
      case 14: {
        if (tag == 112) {
         parse_otherid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_logid;
        break;
      }

      // optional string logid = 15;
      case 15: {
        if (tag == 122) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_strotherid;
        break;
      }

      // optional string strotherid = 16;
      case 16: {
        if (tag == 130) {
         parse_strotherid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strotherid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strotherid().data(), this->strotherid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strotherid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_spend_quota;
        break;
      }

      // optional uint64 spend_quota = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_spend_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &spend_quota_)));
          set_has_spend_quota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TradeLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TradeLogCmd)
  return false;
#undef DO_
}

void TradeLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TradeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = TRADE_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->pid(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional uint32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->type(), output);
  }

  // optional uint32 itemid = 8;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->itemid(), output);
  }

  // optional uint32 count = 9;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->count(), output);
  }

  // optional uint32 price = 10;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->price(), output);
  }

  // optional uint32 tax = 11;
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->tax(), output);
  }

  // optional uint32 moneycount = 12;
  if (has_moneycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->moneycount(), output);
  }

  // optional string iteminfo = 13;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iteminfo().data(), this->iteminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iteminfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->iteminfo(), output);
  }

  // optional uint64 otherid = 14;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->otherid(), output);
  }

  // optional string logid = 15;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->logid(), output);
  }

  // optional string strotherid = 16;
  if (has_strotherid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strotherid().data(), this->strotherid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strotherid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->strotherid(), output);
  }

  // optional uint64 spend_quota = 17 [default = 0];
  if (has_spend_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->spend_quota(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TradeLogCmd)
}

::google::protobuf::uint8* TradeLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TradeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = TRADE_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->pid(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional uint32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->type(), target);
  }

  // optional uint32 itemid = 8;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->itemid(), target);
  }

  // optional uint32 count = 9;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->count(), target);
  }

  // optional uint32 price = 10;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->price(), target);
  }

  // optional uint32 tax = 11;
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->tax(), target);
  }

  // optional uint32 moneycount = 12;
  if (has_moneycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->moneycount(), target);
  }

  // optional string iteminfo = 13;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iteminfo().data(), this->iteminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iteminfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->iteminfo(), target);
  }

  // optional uint64 otherid = 14;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->otherid(), target);
  }

  // optional string logid = 15;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->logid(), target);
  }

  // optional string strotherid = 16;
  if (has_strotherid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strotherid().data(), this->strotherid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strotherid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->strotherid(), target);
  }

  // optional uint64 spend_quota = 17 [default = 0];
  if (has_spend_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->spend_quota(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TradeLogCmd)
  return target;
}

int TradeLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = TRADE_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint64 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 itemid = 8;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 count = 9;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 price = 10;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 tax = 11;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tax());
    }

    // optional uint32 moneycount = 12;
    if (has_moneycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneycount());
    }

    // optional string iteminfo = 13;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iteminfo());
    }

    // optional uint64 otherid = 14;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->otherid());
    }

    // optional string logid = 15;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

    // optional string strotherid = 16;
    if (has_strotherid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strotherid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 spend_quota = 17 [default = 0];
    if (has_spend_quota()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->spend_quota());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeLogCmd::MergeFrom(const TradeLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_tax()) {
      set_tax(from.tax());
    }
    if (from.has_moneycount()) {
      set_moneycount(from.moneycount());
    }
    if (from.has_iteminfo()) {
      set_iteminfo(from.iteminfo());
    }
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_strotherid()) {
      set_strotherid(from.strotherid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_spend_quota()) {
      set_spend_quota(from.spend_quota());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeLogCmd::CopyFrom(const TradeLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeLogCmd::IsInitialized() const {

  return true;
}

void TradeLogCmd::Swap(TradeLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(price_, other->price_);
    std::swap(tax_, other->tax_);
    std::swap(moneycount_, other->moneycount_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(otherid_, other->otherid_);
    std::swap(logid_, other->logid_);
    std::swap(strotherid_, other->strotherid_);
    std::swap(spend_quota_, other->spend_quota_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeLogCmd_descriptor_;
  metadata.reflection = TradeLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteCharLogCmd::kCmdFieldNumber;
const int DeleteCharLogCmd::kParamFieldNumber;
const int DeleteCharLogCmd::kCidFieldNumber;
const int DeleteCharLogCmd::kSidFieldNumber;
const int DeleteCharLogCmd::kAccountFieldNumber;
const int DeleteCharLogCmd::kPidFieldNumber;
const int DeleteCharLogCmd::kTimeFieldNumber;
const int DeleteCharLogCmd::kEidFieldNumber;
const int DeleteCharLogCmd::kEtypeFieldNumber;
const int DeleteCharLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

DeleteCharLogCmd::DeleteCharLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DeleteCharLogCmd)
}

void DeleteCharLogCmd::InitAsDefaultInstance() {
}

DeleteCharLogCmd::DeleteCharLogCmd(const DeleteCharLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DeleteCharLogCmd)
}

void DeleteCharLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 51;
  cid_ = 0u;
  sid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteCharLogCmd::~DeleteCharLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DeleteCharLogCmd)
  SharedDtor();
}

void DeleteCharLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void DeleteCharLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteCharLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteCharLogCmd_descriptor_;
}

const DeleteCharLogCmd& DeleteCharLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

DeleteCharLogCmd* DeleteCharLogCmd::default_instance_ = NULL;

DeleteCharLogCmd* DeleteCharLogCmd::New() const {
  return new DeleteCharLogCmd;
}

void DeleteCharLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeleteCharLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(pid_, time_);
    cmd_ = 204;
    param_ = 51;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    etype_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteCharLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DeleteCharLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = DELETE_CHAR_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }

      // optional string account = 5;
      case 5: {
        if (tag == 42) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 6;
      case 6: {
        if (tag == 48) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional uint32 time = 7;
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 8;
      case 8: {
        if (tag == 64) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 9;
      case 9: {
        if (tag == 72) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_logid;
        break;
      }

      // optional string logid = 10;
      case 10: {
        if (tag == 82) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DeleteCharLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DeleteCharLogCmd)
  return false;
#undef DO_
}

void DeleteCharLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DeleteCharLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = DELETE_CHAR_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->account(), output);
  }

  // optional uint64 pid = 6;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pid(), output);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time(), output);
  }

  // optional uint64 eid = 8;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->eid(), output);
  }

  // optional uint32 etype = 9;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->etype(), output);
  }

  // optional string logid = 10;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DeleteCharLogCmd)
}

::google::protobuf::uint8* DeleteCharLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DeleteCharLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = DELETE_CHAR_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account(), target);
  }

  // optional uint64 pid = 6;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->pid(), target);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time(), target);
  }

  // optional uint64 eid = 8;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->eid(), target);
  }

  // optional uint32 etype = 9;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->etype(), target);
  }

  // optional string logid = 10;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DeleteCharLogCmd)
  return target;
}

int DeleteCharLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = DELETE_CHAR_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional string account = 5;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 6;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 8;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 etype = 9;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional string logid = 10;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCharLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteCharLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteCharLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteCharLogCmd::MergeFrom(const DeleteCharLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteCharLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCharLogCmd::CopyFrom(const DeleteCharLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCharLogCmd::IsInitialized() const {

  return true;
}

void DeleteCharLogCmd::Swap(DeleteCharLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteCharLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteCharLogCmd_descriptor_;
  metadata.reflection = DeleteCharLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComposeLogCmd::kCmdFieldNumber;
const int ComposeLogCmd::kParamFieldNumber;
const int ComposeLogCmd::kCidFieldNumber;
const int ComposeLogCmd::kSidFieldNumber;
const int ComposeLogCmd::kAccountFieldNumber;
const int ComposeLogCmd::kPidFieldNumber;
const int ComposeLogCmd::kTimeFieldNumber;
const int ComposeLogCmd::kEidFieldNumber;
const int ComposeLogCmd::kEtypeFieldNumber;
const int ComposeLogCmd::kItemidFieldNumber;
const int ComposeLogCmd::kItemguidFieldNumber;
const int ComposeLogCmd::kCostFieldNumber;
const int ComposeLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

ComposeLogCmd::ComposeLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ComposeLogCmd)
}

void ComposeLogCmd::InitAsDefaultInstance() {
}

ComposeLogCmd::ComposeLogCmd(const ComposeLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ComposeLogCmd)
}

void ComposeLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 52;
  cid_ = 0u;
  sid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  itemid_ = 0u;
  itemguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cost_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComposeLogCmd::~ComposeLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ComposeLogCmd)
  SharedDtor();
}

void ComposeLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemguid_;
  }
  if (cost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cost_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void ComposeLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComposeLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComposeLogCmd_descriptor_;
}

const ComposeLogCmd& ComposeLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

ComposeLogCmd* ComposeLogCmd::default_instance_ = NULL;

ComposeLogCmd* ComposeLogCmd::New() const {
  return new ComposeLogCmd;
}

void ComposeLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ComposeLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(pid_, time_);
    cmd_ = 204;
    param_ = 52;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    etype_ = 0u;
    itemid_ = 0u;
    if (has_itemguid()) {
      if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemguid_->clear();
      }
    }
    if (has_cost()) {
      if (cost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cost_->clear();
      }
    }
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComposeLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ComposeLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = COMPOSE_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }

      // optional string account = 5;
      case 5: {
        if (tag == 42) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 6;
      case 6: {
        if (tag == 48) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional uint32 time = 7;
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 8;
      case 8: {
        if (tag == 64) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 9;
      case 9: {
        if (tag == 72) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 10;
      case 10: {
        if (tag == 80) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_itemguid;
        break;
      }

      // optional string itemguid = 11;
      case 11: {
        if (tag == 90) {
         parse_itemguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemguid().data(), this->itemguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_cost;
        break;
      }

      // optional string cost = 12;
      case 12: {
        if (tag == 98) {
         parse_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cost().data(), this->cost().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cost");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_logid;
        break;
      }

      // optional string logid = 13;
      case 13: {
        if (tag == 106) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ComposeLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ComposeLogCmd)
  return false;
#undef DO_
}

void ComposeLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ComposeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = COMPOSE_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->account(), output);
  }

  // optional uint64 pid = 6;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pid(), output);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time(), output);
  }

  // optional uint64 eid = 8;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->eid(), output);
  }

  // optional uint32 etype = 9;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->etype(), output);
  }

  // optional uint32 itemid = 10;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->itemid(), output);
  }

  // optional string itemguid = 11;
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemguid().data(), this->itemguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->itemguid(), output);
  }

  // optional string cost = 12;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cost().data(), this->cost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cost");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->cost(), output);
  }

  // optional string logid = 13;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ComposeLogCmd)
}

::google::protobuf::uint8* ComposeLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ComposeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = COMPOSE_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account(), target);
  }

  // optional uint64 pid = 6;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->pid(), target);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time(), target);
  }

  // optional uint64 eid = 8;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->eid(), target);
  }

  // optional uint32 etype = 9;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->etype(), target);
  }

  // optional uint32 itemid = 10;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->itemid(), target);
  }

  // optional string itemguid = 11;
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemguid().data(), this->itemguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->itemguid(), target);
  }

  // optional string cost = 12;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cost().data(), this->cost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cost");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->cost(), target);
  }

  // optional string logid = 13;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ComposeLogCmd)
  return target;
}

int ComposeLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = COMPOSE_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional string account = 5;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 6;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 8;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 etype = 9;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 itemid = 10;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional string itemguid = 11;
    if (has_itemguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemguid());
    }

    // optional string cost = 12;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cost());
    }

    // optional string logid = 13;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComposeLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComposeLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComposeLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComposeLogCmd::MergeFrom(const ComposeLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemguid()) {
      set_itemguid(from.itemguid());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComposeLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComposeLogCmd::CopyFrom(const ComposeLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComposeLogCmd::IsInitialized() const {

  return true;
}

void ComposeLogCmd::Swap(ComposeLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemguid_, other->itemguid_);
    std::swap(cost_, other->cost_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComposeLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComposeLogCmd_descriptor_;
  metadata.reflection = ComposeLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JumpzoneLogCmd::kCmdFieldNumber;
const int JumpzoneLogCmd::kParamFieldNumber;
const int JumpzoneLogCmd::kCidFieldNumber;
const int JumpzoneLogCmd::kSidFieldNumber;
const int JumpzoneLogCmd::kAccountFieldNumber;
const int JumpzoneLogCmd::kPidFieldNumber;
const int JumpzoneLogCmd::kTimeFieldNumber;
const int JumpzoneLogCmd::kEidFieldNumber;
const int JumpzoneLogCmd::kEtypeFieldNumber;
const int JumpzoneLogCmd::kOldzoneidFieldNumber;
const int JumpzoneLogCmd::kNewzoneidFieldNumber;
const int JumpzoneLogCmd::kIsfirstFieldNumber;
const int JumpzoneLogCmd::kCostFieldNumber;
const int JumpzoneLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

JumpzoneLogCmd::JumpzoneLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.JumpzoneLogCmd)
}

void JumpzoneLogCmd::InitAsDefaultInstance() {
}

JumpzoneLogCmd::JumpzoneLogCmd(const JumpzoneLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.JumpzoneLogCmd)
}

void JumpzoneLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 53;
  cid_ = 0u;
  sid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  oldzoneid_ = 0u;
  newzoneid_ = 0u;
  isfirst_ = 0u;
  cost_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JumpzoneLogCmd::~JumpzoneLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.JumpzoneLogCmd)
  SharedDtor();
}

void JumpzoneLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (cost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cost_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void JumpzoneLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JumpzoneLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JumpzoneLogCmd_descriptor_;
}

const JumpzoneLogCmd& JumpzoneLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

JumpzoneLogCmd* JumpzoneLogCmd::default_instance_ = NULL;

JumpzoneLogCmd* JumpzoneLogCmd::New() const {
  return new JumpzoneLogCmd;
}

void JumpzoneLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JumpzoneLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(pid_, time_);
    cmd_ = 204;
    param_ = 53;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(etype_, newzoneid_);
    isfirst_ = 0u;
    if (has_cost()) {
      if (cost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cost_->clear();
      }
    }
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JumpzoneLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.JumpzoneLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = JUMPZONE_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }

      // optional string account = 5;
      case 5: {
        if (tag == 42) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 6;
      case 6: {
        if (tag == 48) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional uint32 time = 7;
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 8;
      case 8: {
        if (tag == 64) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 9;
      case 9: {
        if (tag == 72) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_oldzoneid;
        break;
      }

      // optional uint32 oldzoneid = 10;
      case 10: {
        if (tag == 80) {
         parse_oldzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldzoneid_)));
          set_has_oldzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_newzoneid;
        break;
      }

      // optional uint32 newzoneid = 11;
      case 11: {
        if (tag == 88) {
         parse_newzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newzoneid_)));
          set_has_newzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_isfirst;
        break;
      }

      // optional uint32 isfirst = 12;
      case 12: {
        if (tag == 96) {
         parse_isfirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfirst_)));
          set_has_isfirst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_cost;
        break;
      }

      // optional string cost = 13;
      case 13: {
        if (tag == 106) {
         parse_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cost().data(), this->cost().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cost");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_logid;
        break;
      }

      // optional string logid = 14;
      case 14: {
        if (tag == 114) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.JumpzoneLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.JumpzoneLogCmd)
  return false;
#undef DO_
}

void JumpzoneLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.JumpzoneLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = JUMPZONE_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->account(), output);
  }

  // optional uint64 pid = 6;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pid(), output);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time(), output);
  }

  // optional uint64 eid = 8;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->eid(), output);
  }

  // optional uint32 etype = 9;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->etype(), output);
  }

  // optional uint32 oldzoneid = 10;
  if (has_oldzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->oldzoneid(), output);
  }

  // optional uint32 newzoneid = 11;
  if (has_newzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->newzoneid(), output);
  }

  // optional uint32 isfirst = 12;
  if (has_isfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->isfirst(), output);
  }

  // optional string cost = 13;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cost().data(), this->cost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cost");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->cost(), output);
  }

  // optional string logid = 14;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.JumpzoneLogCmd)
}

::google::protobuf::uint8* JumpzoneLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.JumpzoneLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = JUMPZONE_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account(), target);
  }

  // optional uint64 pid = 6;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->pid(), target);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time(), target);
  }

  // optional uint64 eid = 8;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->eid(), target);
  }

  // optional uint32 etype = 9;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->etype(), target);
  }

  // optional uint32 oldzoneid = 10;
  if (has_oldzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->oldzoneid(), target);
  }

  // optional uint32 newzoneid = 11;
  if (has_newzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->newzoneid(), target);
  }

  // optional uint32 isfirst = 12;
  if (has_isfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->isfirst(), target);
  }

  // optional string cost = 13;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cost().data(), this->cost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cost");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->cost(), target);
  }

  // optional string logid = 14;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.JumpzoneLogCmd)
  return target;
}

int JumpzoneLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = JUMPZONE_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional string account = 5;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 6;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 8;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 etype = 9;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint32 oldzoneid = 10;
    if (has_oldzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldzoneid());
    }

    // optional uint32 newzoneid = 11;
    if (has_newzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newzoneid());
    }

    // optional uint32 isfirst = 12;
    if (has_isfirst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfirst());
    }

    // optional string cost = 13;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cost());
    }

    // optional string logid = 14;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JumpzoneLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JumpzoneLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JumpzoneLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JumpzoneLogCmd::MergeFrom(const JumpzoneLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_oldzoneid()) {
      set_oldzoneid(from.oldzoneid());
    }
    if (from.has_newzoneid()) {
      set_newzoneid(from.newzoneid());
    }
    if (from.has_isfirst()) {
      set_isfirst(from.isfirst());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JumpzoneLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JumpzoneLogCmd::CopyFrom(const JumpzoneLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumpzoneLogCmd::IsInitialized() const {

  return true;
}

void JumpzoneLogCmd::Swap(JumpzoneLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(oldzoneid_, other->oldzoneid_);
    std::swap(newzoneid_, other->newzoneid_);
    std::swap(isfirst_, other->isfirst_);
    std::swap(cost_, other->cost_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JumpzoneLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JumpzoneLogCmd_descriptor_;
  metadata.reflection = JumpzoneLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamLogCmd::kCmdFieldNumber;
const int TeamLogCmd::kParamFieldNumber;
const int TeamLogCmd::kCidFieldNumber;
const int TeamLogCmd::kSidFieldNumber;
const int TeamLogCmd::kHidFieldNumber;
const int TeamLogCmd::kAccountFieldNumber;
const int TeamLogCmd::kPidFieldNumber;
const int TeamLogCmd::kIspayFieldNumber;
const int TeamLogCmd::kTimeFieldNumber;
const int TeamLogCmd::kEidFieldNumber;
const int TeamLogCmd::kEtypeFieldNumber;
const int TeamLogCmd::kInidFieldNumber;
const int TeamLogCmd::kOtheridFieldNumber;
const int TeamLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

TeamLogCmd::TeamLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamLogCmd)
}

void TeamLogCmd::InitAsDefaultInstance() {
}

TeamLogCmd::TeamLogCmd(const TeamLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamLogCmd)
}

void TeamLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 54;
  cid_ = 0u;
  sid_ = 0u;
  hid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  inid_ = GOOGLE_ULONGLONG(0);
  otherid_ = GOOGLE_ULONGLONG(0);
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamLogCmd::~TeamLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamLogCmd)
  SharedDtor();
}

void TeamLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void TeamLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamLogCmd_descriptor_;
}

const TeamLogCmd& TeamLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

TeamLogCmd* TeamLogCmd::default_instance_ = NULL;

TeamLogCmd* TeamLogCmd::New() const {
  return new TeamLogCmd;
}

void TeamLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(hid_, pid_);
    cmd_ = 204;
    param_ = 54;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(eid_, otherid_);
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = TEAM_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hid;
        break;
      }

      // optional uint32 hid = 5;
      case 5: {
        if (tag == 40) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 8;
      case 8: {
        if (tag == 64) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 10;
      case 10: {
        if (tag == 80) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 11;
      case 11: {
        if (tag == 88) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_inid;
        break;
      }

      // optional uint64 inid = 12;
      case 12: {
        if (tag == 96) {
         parse_inid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inid_)));
          set_has_inid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_otherid;
        break;
      }

      // optional uint64 otherid = 13;
      case 13: {
        if (tag == 104) {
         parse_otherid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_logid;
        break;
      }

      // optional string logid = 14;
      case 14: {
        if (tag == 114) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamLogCmd)
  return false;
#undef DO_
}

void TeamLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = TEAM_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hid(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pid(), output);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispay(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->eid(), output);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->etype(), output);
  }

  // optional uint64 inid = 12;
  if (has_inid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->inid(), output);
  }

  // optional uint64 otherid = 13;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->otherid(), output);
  }

  // optional string logid = 14;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamLogCmd)
}

::google::protobuf::uint8* TeamLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = TEAM_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint32 hid = 5;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hid(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional uint64 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pid(), target);
  }

  // optional uint32 ispay = 8;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispay(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional uint64 eid = 10;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->eid(), target);
  }

  // optional uint32 etype = 11;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->etype(), target);
  }

  // optional uint64 inid = 12;
  if (has_inid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->inid(), target);
  }

  // optional uint64 otherid = 13;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->otherid(), target);
  }

  // optional string logid = 14;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamLogCmd)
  return target;
}

int TeamLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = TEAM_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 hid = 5;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 ispay = 8;
    if (has_ispay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 10;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

    // optional uint32 etype = 11;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional uint64 inid = 12;
    if (has_inid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inid());
    }

    // optional uint64 otherid = 13;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->otherid());
    }

    // optional string logid = 14;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamLogCmd::MergeFrom(const TeamLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_inid()) {
      set_inid(from.inid());
    }
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamLogCmd::CopyFrom(const TeamLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamLogCmd::IsInitialized() const {

  return true;
}

void TeamLogCmd::Swap(TeamLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(hid_, other->hid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(ispay_, other->ispay_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(inid_, other->inid_);
    std::swap(otherid_, other->otherid_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamLogCmd_descriptor_;
  metadata.reflection = TeamLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeAdjustPriceLogCmd::kCmdFieldNumber;
const int TradeAdjustPriceLogCmd::kParamFieldNumber;
const int TradeAdjustPriceLogCmd::kCidFieldNumber;
const int TradeAdjustPriceLogCmd::kSidFieldNumber;
const int TradeAdjustPriceLogCmd::kPidFieldNumber;
const int TradeAdjustPriceLogCmd::kTimeFieldNumber;
const int TradeAdjustPriceLogCmd::kItemIdFieldNumber;
const int TradeAdjustPriceLogCmd::kTFieldNumber;
const int TradeAdjustPriceLogCmd::kKFieldNumber;
const int TradeAdjustPriceLogCmd::kSoldCountFieldNumber;
const int TradeAdjustPriceLogCmd::kKtFieldNumber;
const int TradeAdjustPriceLogCmd::kQkFieldNumber;
const int TradeAdjustPriceLogCmd::kRFieldNumber;
const int TradeAdjustPriceLogCmd::kUpRatioFieldNumber;
const int TradeAdjustPriceLogCmd::kDownRatioFieldNumber;
const int TradeAdjustPriceLogCmd::kNewPriceFieldNumber;
const int TradeAdjustPriceLogCmd::kOldPriceFieldNumber;
const int TradeAdjustPriceLogCmd::kLastTimeFieldNumber;
const int TradeAdjustPriceLogCmd::kStatusFieldNumber;
const int TradeAdjustPriceLogCmd::kLogidFieldNumber;
const int TradeAdjustPriceLogCmd::kRealPriceFieldNumber;
#endif  // !_MSC_VER

TradeAdjustPriceLogCmd::TradeAdjustPriceLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TradeAdjustPriceLogCmd)
}

void TradeAdjustPriceLogCmd::InitAsDefaultInstance() {
}

TradeAdjustPriceLogCmd::TradeAdjustPriceLogCmd(const TradeAdjustPriceLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TradeAdjustPriceLogCmd)
}

void TradeAdjustPriceLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 55;
  cid_ = 0u;
  sid_ = 0u;
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  item_id_ = 0u;
  t_ = 0u;
  k_ = 0u;
  sold_count_ = 0u;
  kt_ = 0u;
  qk_ = 0u;
  r_ = 0;
  up_ratio_ = 0;
  down_ratio_ = 0;
  new_price_ = 0;
  old_price_ = 0;
  last_time_ = 0u;
  status_ = 0;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeAdjustPriceLogCmd::~TradeAdjustPriceLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TradeAdjustPriceLogCmd)
  SharedDtor();
}

void TradeAdjustPriceLogCmd::SharedDtor() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void TradeAdjustPriceLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeAdjustPriceLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeAdjustPriceLogCmd_descriptor_;
}

const TradeAdjustPriceLogCmd& TradeAdjustPriceLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

TradeAdjustPriceLogCmd* TradeAdjustPriceLogCmd::default_instance_ = NULL;

TradeAdjustPriceLogCmd* TradeAdjustPriceLogCmd::New() const {
  return new TradeAdjustPriceLogCmd;
}

void TradeAdjustPriceLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TradeAdjustPriceLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, t_);
    cmd_ = 204;
    param_ = 55;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(k_, new_price_);
  }
  if (_has_bits_[16 / 32] & 2031616) {
    ZR_(old_price_, status_);
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
    real_price_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeAdjustPriceLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TradeAdjustPriceLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = TRADE_ADJUST_PRICE_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 5;
      case 5: {
        if (tag == 40) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 7;
      case 7: {
        if (tag == 56) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_t;
        break;
      }

      // optional uint32 t = 8;
      case 8: {
        if (tag == 64) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_k;
        break;
      }

      // optional uint32 k = 9;
      case 9: {
        if (tag == 72) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_sold_count;
        break;
      }

      // optional uint32 sold_count = 10;
      case 10: {
        if (tag == 80) {
         parse_sold_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sold_count_)));
          set_has_sold_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_kt;
        break;
      }

      // optional uint32 kt = 11;
      case 11: {
        if (tag == 88) {
         parse_kt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kt_)));
          set_has_kt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_qk;
        break;
      }

      // optional uint32 qk = 12;
      case 12: {
        if (tag == 96) {
         parse_qk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qk_)));
          set_has_qk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_r;
        break;
      }

      // optional float r = 13;
      case 13: {
        if (tag == 109) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_up_ratio;
        break;
      }

      // optional float up_ratio = 14;
      case 14: {
        if (tag == 117) {
         parse_up_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &up_ratio_)));
          set_has_up_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_down_ratio;
        break;
      }

      // optional float down_ratio = 15;
      case 15: {
        if (tag == 125) {
         parse_down_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &down_ratio_)));
          set_has_down_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_new_price;
        break;
      }

      // optional float new_price = 16;
      case 16: {
        if (tag == 133) {
         parse_new_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &new_price_)));
          set_has_new_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_old_price;
        break;
      }

      // optional float old_price = 17;
      case 17: {
        if (tag == 141) {
         parse_old_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &old_price_)));
          set_has_old_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_last_time;
        break;
      }

      // optional uint32 last_time = 18;
      case 18: {
        if (tag == 144) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_status;
        break;
      }

      // optional .Cmd.EPriceStatus status = 19;
      case 19: {
        if (tag == 152) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPriceStatus_IsValid(value)) {
            set_status(static_cast< ::Cmd::EPriceStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_logid;
        break;
      }

      // optional string logid = 20;
      case 20: {
        if (tag == 162) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_real_price;
        break;
      }

      // optional uint32 real_price = 21;
      case 21: {
        if (tag == 168) {
         parse_real_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &real_price_)));
          set_has_real_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TradeAdjustPriceLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TradeAdjustPriceLogCmd)
  return false;
#undef DO_
}

void TradeAdjustPriceLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TradeAdjustPriceLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = TRADE_ADJUST_PRICE_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->pid(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional uint32 item_id = 7;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->item_id(), output);
  }

  // optional uint32 t = 8;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->t(), output);
  }

  // optional uint32 k = 9;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->k(), output);
  }

  // optional uint32 sold_count = 10;
  if (has_sold_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sold_count(), output);
  }

  // optional uint32 kt = 11;
  if (has_kt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kt(), output);
  }

  // optional uint32 qk = 12;
  if (has_qk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->qk(), output);
  }

  // optional float r = 13;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->r(), output);
  }

  // optional float up_ratio = 14;
  if (has_up_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->up_ratio(), output);
  }

  // optional float down_ratio = 15;
  if (has_down_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->down_ratio(), output);
  }

  // optional float new_price = 16;
  if (has_new_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->new_price(), output);
  }

  // optional float old_price = 17;
  if (has_old_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->old_price(), output);
  }

  // optional uint32 last_time = 18;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->last_time(), output);
  }

  // optional .Cmd.EPriceStatus status = 19;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->status(), output);
  }

  // optional string logid = 20;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->logid(), output);
  }

  // optional uint32 real_price = 21;
  if (has_real_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->real_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TradeAdjustPriceLogCmd)
}

::google::protobuf::uint8* TradeAdjustPriceLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TradeAdjustPriceLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = TRADE_ADJUST_PRICE_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->pid(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional uint32 item_id = 7;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->item_id(), target);
  }

  // optional uint32 t = 8;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->t(), target);
  }

  // optional uint32 k = 9;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->k(), target);
  }

  // optional uint32 sold_count = 10;
  if (has_sold_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sold_count(), target);
  }

  // optional uint32 kt = 11;
  if (has_kt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kt(), target);
  }

  // optional uint32 qk = 12;
  if (has_qk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->qk(), target);
  }

  // optional float r = 13;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->r(), target);
  }

  // optional float up_ratio = 14;
  if (has_up_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->up_ratio(), target);
  }

  // optional float down_ratio = 15;
  if (has_down_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->down_ratio(), target);
  }

  // optional float new_price = 16;
  if (has_new_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->new_price(), target);
  }

  // optional float old_price = 17;
  if (has_old_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->old_price(), target);
  }

  // optional uint32 last_time = 18;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->last_time(), target);
  }

  // optional .Cmd.EPriceStatus status = 19;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->status(), target);
  }

  // optional string logid = 20;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->logid(), target);
  }

  // optional uint32 real_price = 21;
  if (has_real_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->real_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TradeAdjustPriceLogCmd)
  return target;
}

int TradeAdjustPriceLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = TRADE_ADJUST_PRICE_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint64 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 item_id = 7;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 t = 8;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 k = 9;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->k());
    }

    // optional uint32 sold_count = 10;
    if (has_sold_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sold_count());
    }

    // optional uint32 kt = 11;
    if (has_kt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kt());
    }

    // optional uint32 qk = 12;
    if (has_qk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qk());
    }

    // optional float r = 13;
    if (has_r()) {
      total_size += 1 + 4;
    }

    // optional float up_ratio = 14;
    if (has_up_ratio()) {
      total_size += 1 + 4;
    }

    // optional float down_ratio = 15;
    if (has_down_ratio()) {
      total_size += 1 + 4;
    }

    // optional float new_price = 16;
    if (has_new_price()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float old_price = 17;
    if (has_old_price()) {
      total_size += 2 + 4;
    }

    // optional uint32 last_time = 18;
    if (has_last_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time());
    }

    // optional .Cmd.EPriceStatus status = 19;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string logid = 20;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

    // optional uint32 real_price = 21;
    if (has_real_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->real_price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeAdjustPriceLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeAdjustPriceLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeAdjustPriceLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeAdjustPriceLogCmd::MergeFrom(const TradeAdjustPriceLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_sold_count()) {
      set_sold_count(from.sold_count());
    }
    if (from.has_kt()) {
      set_kt(from.kt());
    }
    if (from.has_qk()) {
      set_qk(from.qk());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_up_ratio()) {
      set_up_ratio(from.up_ratio());
    }
    if (from.has_down_ratio()) {
      set_down_ratio(from.down_ratio());
    }
    if (from.has_new_price()) {
      set_new_price(from.new_price());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_old_price()) {
      set_old_price(from.old_price());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_real_price()) {
      set_real_price(from.real_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeAdjustPriceLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeAdjustPriceLogCmd::CopyFrom(const TradeAdjustPriceLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeAdjustPriceLogCmd::IsInitialized() const {

  return true;
}

void TradeAdjustPriceLogCmd::Swap(TradeAdjustPriceLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(item_id_, other->item_id_);
    std::swap(t_, other->t_);
    std::swap(k_, other->k_);
    std::swap(sold_count_, other->sold_count_);
    std::swap(kt_, other->kt_);
    std::swap(qk_, other->qk_);
    std::swap(r_, other->r_);
    std::swap(up_ratio_, other->up_ratio_);
    std::swap(down_ratio_, other->down_ratio_);
    std::swap(new_price_, other->new_price_);
    std::swap(old_price_, other->old_price_);
    std::swap(last_time_, other->last_time_);
    std::swap(status_, other->status_);
    std::swap(logid_, other->logid_);
    std::swap(real_price_, other->real_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeAdjustPriceLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeAdjustPriceLogCmd_descriptor_;
  metadata.reflection = TradeAdjustPriceLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradePriceLogCmd::kCmdFieldNumber;
const int TradePriceLogCmd::kParamFieldNumber;
const int TradePriceLogCmd::kCidFieldNumber;
const int TradePriceLogCmd::kSidFieldNumber;
const int TradePriceLogCmd::kPidFieldNumber;
const int TradePriceLogCmd::kTimeFieldNumber;
const int TradePriceLogCmd::kItemIdFieldNumber;
const int TradePriceLogCmd::kKFieldNumber;
const int TradePriceLogCmd::kPriceFieldNumber;
const int TradePriceLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

TradePriceLogCmd::TradePriceLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TradePriceLogCmd)
}

void TradePriceLogCmd::InitAsDefaultInstance() {
}

TradePriceLogCmd::TradePriceLogCmd(const TradePriceLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TradePriceLogCmd)
}

void TradePriceLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 56;
  cid_ = 0u;
  sid_ = 0u;
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  item_id_ = 0u;
  k_ = 0u;
  price_ = 0;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradePriceLogCmd::~TradePriceLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TradePriceLogCmd)
  SharedDtor();
}

void TradePriceLogCmd::SharedDtor() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void TradePriceLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradePriceLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradePriceLogCmd_descriptor_;
}

const TradePriceLogCmd& TradePriceLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

TradePriceLogCmd* TradePriceLogCmd::default_instance_ = NULL;

TradePriceLogCmd* TradePriceLogCmd::New() const {
  return new TradePriceLogCmd;
}

void TradePriceLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TradePriceLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, k_);
    cmd_ = 204;
    param_ = 56;
  }
  if (_has_bits_[8 / 32] & 768) {
    price_ = 0;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradePriceLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TradePriceLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = TRADE_PRICE_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 5;
      case 5: {
        if (tag == 40) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 7;
      case 7: {
        if (tag == 56) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_k;
        break;
      }

      // optional uint32 k = 8;
      case 8: {
        if (tag == 64) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_price;
        break;
      }

      // optional float price = 9;
      case 9: {
        if (tag == 77) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_logid;
        break;
      }

      // optional string logid = 10;
      case 10: {
        if (tag == 82) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TradePriceLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TradePriceLogCmd)
  return false;
#undef DO_
}

void TradePriceLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TradePriceLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = TRADE_PRICE_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->pid(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional uint32 item_id = 7;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->item_id(), output);
  }

  // optional uint32 k = 8;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->k(), output);
  }

  // optional float price = 9;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->price(), output);
  }

  // optional string logid = 10;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TradePriceLogCmd)
}

::google::protobuf::uint8* TradePriceLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TradePriceLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = TRADE_PRICE_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->pid(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional uint32 item_id = 7;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->item_id(), target);
  }

  // optional uint32 k = 8;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->k(), target);
  }

  // optional float price = 9;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->price(), target);
  }

  // optional string logid = 10;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TradePriceLogCmd)
  return target;
}

int TradePriceLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = TRADE_PRICE_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint64 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 item_id = 7;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 k = 8;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->k());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float price = 9;
    if (has_price()) {
      total_size += 1 + 4;
    }

    // optional string logid = 10;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradePriceLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradePriceLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradePriceLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradePriceLogCmd::MergeFrom(const TradePriceLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradePriceLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradePriceLogCmd::CopyFrom(const TradePriceLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradePriceLogCmd::IsInitialized() const {

  return true;
}

void TradePriceLogCmd::Swap(TradePriceLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(item_id_, other->item_id_);
    std::swap(k_, other->k_);
    std::swap(price_, other->price_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradePriceLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradePriceLogCmd_descriptor_;
  metadata.reflection = TradePriceLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetChangeLogCmd::kCmdFieldNumber;
const int PetChangeLogCmd::kParamFieldNumber;
const int PetChangeLogCmd::kCidFieldNumber;
const int PetChangeLogCmd::kSidFieldNumber;
const int PetChangeLogCmd::kAccountFieldNumber;
const int PetChangeLogCmd::kPidFieldNumber;
const int PetChangeLogCmd::kTimeFieldNumber;
const int PetChangeLogCmd::kEidFieldNumber;
const int PetChangeLogCmd::kEtypeFieldNumber;
const int PetChangeLogCmd::kTypeFieldNumber;
const int PetChangeLogCmd::kMonsteridFieldNumber;
const int PetChangeLogCmd::kNameFieldNumber;
const int PetChangeLogCmd::kBeforeFieldNumber;
const int PetChangeLogCmd::kAfterFieldNumber;
const int PetChangeLogCmd::kSkillBeforeFieldNumber;
const int PetChangeLogCmd::kSkillAfterFieldNumber;
const int PetChangeLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

PetChangeLogCmd::PetChangeLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetChangeLogCmd)
}

void PetChangeLogCmd::InitAsDefaultInstance() {
}

PetChangeLogCmd::PetChangeLogCmd(const PetChangeLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetChangeLogCmd)
}

void PetChangeLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 57;
  cid_ = 0u;
  sid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  type_ = 1;
  monsterid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  before_ = 0u;
  after_ = 0u;
  skill_before_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skill_after_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetChangeLogCmd::~PetChangeLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PetChangeLogCmd)
  SharedDtor();
}

void PetChangeLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (skill_before_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skill_before_;
  }
  if (skill_after_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skill_after_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void PetChangeLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetChangeLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetChangeLogCmd_descriptor_;
}

const PetChangeLogCmd& PetChangeLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

PetChangeLogCmd* PetChangeLogCmd::default_instance_ = NULL;

PetChangeLogCmd* PetChangeLogCmd::New() const {
  return new PetChangeLogCmd;
}

void PetChangeLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PetChangeLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(pid_, time_);
    cmd_ = 204;
    param_ = 57;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(before_, after_);
    etype_ = 0u;
    type_ = 1;
    monsterid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_skill_before()) {
      if (skill_before_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skill_before_->clear();
      }
    }
    if (has_skill_after()) {
      if (skill_after_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skill_after_->clear();
      }
    }
  }
  if (has_logid()) {
    if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      logid_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetChangeLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetChangeLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = PET_CHANGE_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 5;
      case 5: {
        if (tag == 40) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 7;
      case 7: {
        if (tag == 56) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 8;
      case 8: {
        if (tag == 64) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional .Cmd.EPetChangeType type = 9;
      case 9: {
        if (tag == 72) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPetChangeType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPetChangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_monsterid;
        break;
      }

      // optional uint32 monsterid = 10;
      case 10: {
        if (tag == 80) {
         parse_monsterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_name;
        break;
      }

      // optional string name = 11;
      case 11: {
        if (tag == 90) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_before;
        break;
      }

      // optional uint32 before = 12;
      case 12: {
        if (tag == 96) {
         parse_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &before_)));
          set_has_before();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_after;
        break;
      }

      // optional uint32 after = 13;
      case 13: {
        if (tag == 104) {
         parse_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &after_)));
          set_has_after();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_skill_before;
        break;
      }

      // optional string skill_before = 14;
      case 14: {
        if (tag == 114) {
         parse_skill_before:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill_before()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skill_before().data(), this->skill_before().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "skill_before");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_skill_after;
        break;
      }

      // optional string skill_after = 15;
      case 15: {
        if (tag == 122) {
         parse_skill_after:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill_after()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skill_after().data(), this->skill_after().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "skill_after");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_account;
        break;
      }

      // optional string account = 16;
      case 16: {
        if (tag == 130) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_logid;
        break;
      }

      // optional string logid = 17;
      case 17: {
        if (tag == 138) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetChangeLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetChangeLogCmd)
  return false;
#undef DO_
}

void PetChangeLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetChangeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = PET_CHANGE_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->pid(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional uint64 eid = 7;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->eid(), output);
  }

  // optional uint32 etype = 8;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->etype(), output);
  }

  // optional .Cmd.EPetChangeType type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional uint32 monsterid = 10;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->monsterid(), output);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->name(), output);
  }

  // optional uint32 before = 12;
  if (has_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->before(), output);
  }

  // optional uint32 after = 13;
  if (has_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->after(), output);
  }

  // optional string skill_before = 14;
  if (has_skill_before()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill_before().data(), this->skill_before().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skill_before");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->skill_before(), output);
  }

  // optional string skill_after = 15;
  if (has_skill_after()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill_after().data(), this->skill_after().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skill_after");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->skill_after(), output);
  }

  // optional string account = 16;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->account(), output);
  }

  // optional string logid = 17;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetChangeLogCmd)
}

::google::protobuf::uint8* PetChangeLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetChangeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = PET_CHANGE_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->pid(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional uint64 eid = 7;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->eid(), target);
  }

  // optional uint32 etype = 8;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->etype(), target);
  }

  // optional .Cmd.EPetChangeType type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional uint32 monsterid = 10;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->monsterid(), target);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->name(), target);
  }

  // optional uint32 before = 12;
  if (has_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->before(), target);
  }

  // optional uint32 after = 13;
  if (has_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->after(), target);
  }

  // optional string skill_before = 14;
  if (has_skill_before()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill_before().data(), this->skill_before().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skill_before");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->skill_before(), target);
  }

  // optional string skill_after = 15;
  if (has_skill_after()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill_after().data(), this->skill_after().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skill_after");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->skill_after(), target);
  }

  // optional string account = 16;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->account(), target);
  }

  // optional string logid = 17;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetChangeLogCmd)
  return target;
}

int PetChangeLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = PET_CHANGE_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional string account = 16;
    if (has_account()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 7;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 etype = 8;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional .Cmd.EPetChangeType type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 monsterid = 10;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // optional string name = 11;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 before = 12;
    if (has_before()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->before());
    }

    // optional uint32 after = 13;
    if (has_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->after());
    }

    // optional string skill_before = 14;
    if (has_skill_before()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill_before());
    }

    // optional string skill_after = 15;
    if (has_skill_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill_after());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string logid = 17;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetChangeLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetChangeLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetChangeLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetChangeLogCmd::MergeFrom(const PetChangeLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_before()) {
      set_before(from.before());
    }
    if (from.has_after()) {
      set_after(from.after());
    }
    if (from.has_skill_before()) {
      set_skill_before(from.skill_before());
    }
    if (from.has_skill_after()) {
      set_skill_after(from.skill_after());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetChangeLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetChangeLogCmd::CopyFrom(const PetChangeLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetChangeLogCmd::IsInitialized() const {

  return true;
}

void PetChangeLogCmd::Swap(PetChangeLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(type_, other->type_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(name_, other->name_);
    std::swap(before_, other->before_);
    std::swap(after_, other->after_);
    std::swap(skill_before_, other->skill_before_);
    std::swap(skill_after_, other->skill_after_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetChangeLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetChangeLogCmd_descriptor_;
  metadata.reflection = PetChangeLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetAdventureLogCmd::kCmdFieldNumber;
const int PetAdventureLogCmd::kParamFieldNumber;
const int PetAdventureLogCmd::kCidFieldNumber;
const int PetAdventureLogCmd::kSidFieldNumber;
const int PetAdventureLogCmd::kAccountFieldNumber;
const int PetAdventureLogCmd::kPidFieldNumber;
const int PetAdventureLogCmd::kTimeFieldNumber;
const int PetAdventureLogCmd::kEidFieldNumber;
const int PetAdventureLogCmd::kEtypeFieldNumber;
const int PetAdventureLogCmd::kTypeFieldNumber;
const int PetAdventureLogCmd::kIdFieldNumber;
const int PetAdventureLogCmd::kNamesFieldNumber;
const int PetAdventureLogCmd::kCondFieldNumber;
const int PetAdventureLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

PetAdventureLogCmd::PetAdventureLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetAdventureLogCmd)
}

void PetAdventureLogCmd::InitAsDefaultInstance() {
}

PetAdventureLogCmd::PetAdventureLogCmd(const PetAdventureLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetAdventureLogCmd)
}

void PetAdventureLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 58;
  cid_ = 0u;
  sid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  eid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0u;
  type_ = 1;
  id_ = 0u;
  names_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cond_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetAdventureLogCmd::~PetAdventureLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PetAdventureLogCmd)
  SharedDtor();
}

void PetAdventureLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (names_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete names_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void PetAdventureLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetAdventureLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetAdventureLogCmd_descriptor_;
}

const PetAdventureLogCmd& PetAdventureLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

PetAdventureLogCmd* PetAdventureLogCmd::default_instance_ = NULL;

PetAdventureLogCmd* PetAdventureLogCmd::New() const {
  return new PetAdventureLogCmd;
}

void PetAdventureLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PetAdventureLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    ZR_(pid_, time_);
    cmd_ = 204;
    param_ = 58;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    etype_ = 0u;
    type_ = 1;
    id_ = 0u;
    if (has_names()) {
      if (names_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        names_->clear();
      }
    }
    cond_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetAdventureLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetAdventureLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = PET_ADVENTURE_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 5;
      case 5: {
        if (tag == 40) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_eid;
        break;
      }

      // optional uint64 eid = 7;
      case 7: {
        if (tag == 56) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_etype;
        break;
      }

      // optional uint32 etype = 8;
      case 8: {
        if (tag == 64) {
         parse_etype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional .Cmd.EPetAdventureLogType type = 9;
      case 9: {
        if (tag == 72) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPetAdventureLogType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPetAdventureLogType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_id;
        break;
      }

      // optional uint32 id = 10;
      case 10: {
        if (tag == 80) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_names;
        break;
      }

      // optional string names = 11;
      case 11: {
        if (tag == 90) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->names().data(), this->names().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cond;
        break;
      }

      // optional uint32 cond = 12;
      case 12: {
        if (tag == 96) {
         parse_cond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cond_)));
          set_has_cond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_account;
        break;
      }

      // optional string account = 13;
      case 13: {
        if (tag == 106) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_logid;
        break;
      }

      // optional string logid = 14;
      case 14: {
        if (tag == 114) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetAdventureLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetAdventureLogCmd)
  return false;
#undef DO_
}

void PetAdventureLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetAdventureLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = PET_ADVENTURE_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->pid(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional uint64 eid = 7;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->eid(), output);
  }

  // optional uint32 etype = 8;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->etype(), output);
  }

  // optional .Cmd.EPetAdventureLogType type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional uint32 id = 10;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->id(), output);
  }

  // optional string names = 11;
  if (has_names()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names().data(), this->names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "names");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->names(), output);
  }

  // optional uint32 cond = 12;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cond(), output);
  }

  // optional string account = 13;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->account(), output);
  }

  // optional string logid = 14;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetAdventureLogCmd)
}

::google::protobuf::uint8* PetAdventureLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetAdventureLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = PET_ADVENTURE_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->pid(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional uint64 eid = 7;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->eid(), target);
  }

  // optional uint32 etype = 8;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->etype(), target);
  }

  // optional .Cmd.EPetAdventureLogType type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional uint32 id = 10;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->id(), target);
  }

  // optional string names = 11;
  if (has_names()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names().data(), this->names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "names");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->names(), target);
  }

  // optional uint32 cond = 12;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cond(), target);
  }

  // optional string account = 13;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->account(), target);
  }

  // optional string logid = 14;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetAdventureLogCmd)
  return target;
}

int PetAdventureLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = PET_ADVENTURE_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional string account = 13;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 eid = 7;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 etype = 8;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etype());
    }

    // optional .Cmd.EPetAdventureLogType type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 id = 10;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string names = 11;
    if (has_names()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->names());
    }

    // optional uint32 cond = 12;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cond());
    }

    // optional string logid = 14;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetAdventureLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetAdventureLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetAdventureLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetAdventureLogCmd::MergeFrom(const PetAdventureLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_names()) {
      set_names(from.names());
    }
    if (from.has_cond()) {
      set_cond(from.cond());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetAdventureLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetAdventureLogCmd::CopyFrom(const PetAdventureLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetAdventureLogCmd::IsInitialized() const {

  return true;
}

void PetAdventureLogCmd::Swap(PetAdventureLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(eid_, other->eid_);
    std::swap(etype_, other->etype_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(names_, other->names_);
    std::swap(cond_, other->cond_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetAdventureLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetAdventureLogCmd_descriptor_;
  metadata.reflection = PetAdventureLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InactiveUserLogCmd::kCmdFieldNumber;
const int InactiveUserLogCmd::kParamFieldNumber;
const int InactiveUserLogCmd::kCidFieldNumber;
const int InactiveUserLogCmd::kSidFieldNumber;
const int InactiveUserLogCmd::kAccountFieldNumber;
const int InactiveUserLogCmd::kPidFieldNumber;
const int InactiveUserLogCmd::kTimeFieldNumber;
const int InactiveUserLogCmd::kNameFieldNumber;
const int InactiveUserLogCmd::kJobFieldNumber;
const int InactiveUserLogCmd::kLevelFieldNumber;
const int InactiveUserLogCmd::kLeftZenyFieldNumber;
const int InactiveUserLogCmd::kMapidFieldNumber;
const int InactiveUserLogCmd::kCreateTimeFieldNumber;
const int InactiveUserLogCmd::kSendCountFieldNumber;
const int InactiveUserLogCmd::kLogidFieldNumber;
const int InactiveUserLogCmd::kGuildidFieldNumber;
#endif  // !_MSC_VER

InactiveUserLogCmd::InactiveUserLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InactiveUserLogCmd)
}

void InactiveUserLogCmd::InitAsDefaultInstance() {
}

InactiveUserLogCmd::InactiveUserLogCmd(const InactiveUserLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InactiveUserLogCmd)
}

void InactiveUserLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 60;
  cid_ = 0u;
  sid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_ = 0u;
  level_ = 0u;
  left_zeny_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  create_time_ = 0u;
  send_count_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InactiveUserLogCmd::~InactiveUserLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.InactiveUserLogCmd)
  SharedDtor();
}

void InactiveUserLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void InactiveUserLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InactiveUserLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InactiveUserLogCmd_descriptor_;
}

const InactiveUserLogCmd& InactiveUserLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

InactiveUserLogCmd* InactiveUserLogCmd::default_instance_ = NULL;

InactiveUserLogCmd* InactiveUserLogCmd::New() const {
  return new InactiveUserLogCmd;
}

void InactiveUserLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InactiveUserLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    cmd_ = 204;
    param_ = 60;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    pid_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(job_, send_count_);
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
    guildid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InactiveUserLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InactiveUserLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = INACTIVE_USER_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }

      // optional string account = 5;
      case 5: {
        if (tag == 42) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 6;
      case 6: {
        if (tag == 48) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional uint32 time = 7;
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }

      // optional string name = 8;
      case 8: {
        if (tag == 66) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_job;
        break;
      }

      // optional uint32 job = 9;
      case 9: {
        if (tag == 72) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_level;
        break;
      }

      // optional uint32 level = 10;
      case 10: {
        if (tag == 80) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_left_zeny;
        break;
      }

      // optional uint64 left_zeny = 11;
      case 11: {
        if (tag == 88) {
         parse_left_zeny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &left_zeny_)));
          set_has_left_zeny();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 12;
      case 12: {
        if (tag == 96) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_create_time;
        break;
      }

      // optional uint32 create_time = 14;
      case 14: {
        if (tag == 112) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_send_count;
        break;
      }

      // optional uint32 send_count = 15;
      case 15: {
        if (tag == 120) {
         parse_send_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_count_)));
          set_has_send_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_logid;
        break;
      }

      // optional string logid = 16;
      case 16: {
        if (tag == 130) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 17;
      case 17: {
        if (tag == 136) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InactiveUserLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InactiveUserLogCmd)
  return false;
#undef DO_
}

void InactiveUserLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InactiveUserLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = INACTIVE_USER_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->account(), output);
  }

  // optional uint64 pid = 6;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pid(), output);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time(), output);
  }

  // optional string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  // optional uint32 job = 9;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->job(), output);
  }

  // optional uint32 level = 10;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->level(), output);
  }

  // optional uint64 left_zeny = 11;
  if (has_left_zeny()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->left_zeny(), output);
  }

  // optional uint32 mapid = 12;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mapid(), output);
  }

  // optional uint32 create_time = 14;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->create_time(), output);
  }

  // optional uint32 send_count = 15;
  if (has_send_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->send_count(), output);
  }

  // optional string logid = 16;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->logid(), output);
  }

  // optional uint64 guildid = 17;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InactiveUserLogCmd)
}

::google::protobuf::uint8* InactiveUserLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InactiveUserLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = INACTIVE_USER_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account(), target);
  }

  // optional uint64 pid = 6;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->pid(), target);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time(), target);
  }

  // optional string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  // optional uint32 job = 9;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->job(), target);
  }

  // optional uint32 level = 10;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->level(), target);
  }

  // optional uint64 left_zeny = 11;
  if (has_left_zeny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->left_zeny(), target);
  }

  // optional uint32 mapid = 12;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mapid(), target);
  }

  // optional uint32 create_time = 14;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->create_time(), target);
  }

  // optional uint32 send_count = 15;
  if (has_send_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->send_count(), target);
  }

  // optional string logid = 16;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->logid(), target);
  }

  // optional uint64 guildid = 17;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InactiveUserLogCmd)
  return target;
}

int InactiveUserLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = INACTIVE_USER_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional string account = 5;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 6;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 job = 9;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 level = 10;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 left_zeny = 11;
    if (has_left_zeny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->left_zeny());
    }

    // optional uint32 mapid = 12;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 create_time = 14;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // optional uint32 send_count = 15;
    if (has_send_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_count());
    }

    // optional string logid = 16;
    if (has_logid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

    // optional uint64 guildid = 17;
    if (has_guildid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InactiveUserLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InactiveUserLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InactiveUserLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InactiveUserLogCmd::MergeFrom(const InactiveUserLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_left_zeny()) {
      set_left_zeny(from.left_zeny());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_send_count()) {
      set_send_count(from.send_count());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InactiveUserLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InactiveUserLogCmd::CopyFrom(const InactiveUserLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InactiveUserLogCmd::IsInitialized() const {

  return true;
}

void InactiveUserLogCmd::Swap(InactiveUserLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(level_, other->level_);
    std::swap(left_zeny_, other->left_zeny_);
    std::swap(mapid_, other->mapid_);
    std::swap(create_time_, other->create_time_);
    std::swap(send_count_, other->send_count_);
    std::swap(logid_, other->logid_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InactiveUserLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InactiveUserLogCmd_descriptor_;
  metadata.reflection = InactiveUserLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeUntakeLogCmd::kCmdFieldNumber;
const int TradeUntakeLogCmd::kParamFieldNumber;
const int TradeUntakeLogCmd::kCidFieldNumber;
const int TradeUntakeLogCmd::kSidFieldNumber;
const int TradeUntakeLogCmd::kPidFieldNumber;
const int TradeUntakeLogCmd::kTimeFieldNumber;
const int TradeUntakeLogCmd::kNameFieldNumber;
const int TradeUntakeLogCmd::kZenyFieldNumber;
const int TradeUntakeLogCmd::kGuildnameFieldNumber;
const int TradeUntakeLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

TradeUntakeLogCmd::TradeUntakeLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TradeUntakeLogCmd)
}

void TradeUntakeLogCmd::InitAsDefaultInstance() {
}

TradeUntakeLogCmd::TradeUntakeLogCmd(const TradeUntakeLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TradeUntakeLogCmd)
}

void TradeUntakeLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 59;
  cid_ = 0u;
  sid_ = 0u;
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zeny_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeUntakeLogCmd::~TradeUntakeLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TradeUntakeLogCmd)
  SharedDtor();
}

void TradeUntakeLogCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void TradeUntakeLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeUntakeLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeUntakeLogCmd_descriptor_;
}

const TradeUntakeLogCmd& TradeUntakeLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

TradeUntakeLogCmd* TradeUntakeLogCmd::default_instance_ = NULL;

TradeUntakeLogCmd* TradeUntakeLogCmd::New() const {
  return new TradeUntakeLogCmd;
}

void TradeUntakeLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TradeUntakeLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, pid_);
    cmd_ = 204;
    param_ = 59;
    time_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    zeny_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeUntakeLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TradeUntakeLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = TRADE_UNTAKE_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 5;
      case 5: {
        if (tag == 40) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_zeny;
        break;
      }

      // optional uint64 zeny = 8;
      case 8: {
        if (tag == 64) {
         parse_zeny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zeny_)));
          set_has_zeny();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_guildname;
        break;
      }

      // optional string guildname = 9;
      case 9: {
        if (tag == 74) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_logid;
        break;
      }

      // optional string logid = 11;
      case 11: {
        if (tag == 90) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TradeUntakeLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TradeUntakeLogCmd)
  return false;
#undef DO_
}

void TradeUntakeLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TradeUntakeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = TRADE_UNTAKE_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->pid(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional uint64 zeny = 8;
  if (has_zeny()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->zeny(), output);
  }

  // optional string guildname = 9;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->guildname(), output);
  }

  // optional string logid = 11;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TradeUntakeLogCmd)
}

::google::protobuf::uint8* TradeUntakeLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TradeUntakeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = TRADE_UNTAKE_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->pid(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional uint64 zeny = 8;
  if (has_zeny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->zeny(), target);
  }

  // optional string guildname = 9;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->guildname(), target);
  }

  // optional string logid = 11;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TradeUntakeLogCmd)
  return target;
}

int TradeUntakeLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = TRADE_UNTAKE_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint64 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 zeny = 8;
    if (has_zeny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->zeny());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string guildname = 9;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string logid = 11;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeUntakeLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeUntakeLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeUntakeLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeUntakeLogCmd::MergeFrom(const TradeUntakeLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zeny()) {
      set_zeny(from.zeny());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeUntakeLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeUntakeLogCmd::CopyFrom(const TradeUntakeLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeUntakeLogCmd::IsInitialized() const {

  return true;
}

void TradeUntakeLogCmd::Swap(TradeUntakeLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(zeny_, other->zeny_);
    std::swap(guildname_, other->guildname_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeUntakeLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeUntakeLogCmd_descriptor_;
  metadata.reflection = TradeUntakeLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreditLogCmd::kCmdFieldNumber;
const int CreditLogCmd::kParamFieldNumber;
const int CreditLogCmd::kCidFieldNumber;
const int CreditLogCmd::kSidFieldNumber;
const int CreditLogCmd::kPidFieldNumber;
const int CreditLogCmd::kTimeFieldNumber;
const int CreditLogCmd::kNameFieldNumber;
const int CreditLogCmd::kTypeFieldNumber;
const int CreditLogCmd::kBeforeFieldNumber;
const int CreditLogCmd::kAfterFieldNumber;
const int CreditLogCmd::kLogidFieldNumber;
#endif  // !_MSC_VER

CreditLogCmd::CreditLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CreditLogCmd)
}

void CreditLogCmd::InitAsDefaultInstance() {
}

CreditLogCmd::CreditLogCmd(const CreditLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CreditLogCmd)
}

void CreditLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 61;
  cid_ = 0u;
  sid_ = 0u;
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  before_ = GOOGLE_ULONGLONG(0);
  after_ = GOOGLE_ULONGLONG(0);
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreditLogCmd::~CreditLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CreditLogCmd)
  SharedDtor();
}

void CreditLogCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void CreditLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreditLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreditLogCmd_descriptor_;
}

const CreditLogCmd& CreditLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

CreditLogCmd* CreditLogCmd::default_instance_ = NULL;

CreditLogCmd* CreditLogCmd::New() const {
  return new CreditLogCmd;
}

void CreditLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreditLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, pid_);
    cmd_ = 204;
    param_ = 61;
    time_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 1;
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(before_, after_);
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreditLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CreditLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = CREDIT_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 5;
      case 5: {
        if (tag == 40) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // optional .Cmd.ECreditType type = 8;
      case 8: {
        if (tag == 64) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ECreditType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ECreditType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_before;
        break;
      }

      // optional uint64 before = 9;
      case 9: {
        if (tag == 72) {
         parse_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &before_)));
          set_has_before();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_after;
        break;
      }

      // optional uint64 after = 10;
      case 10: {
        if (tag == 80) {
         parse_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &after_)));
          set_has_after();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_logid;
        break;
      }

      // optional string logid = 11;
      case 11: {
        if (tag == 90) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CreditLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CreditLogCmd)
  return false;
#undef DO_
}

void CreditLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CreditLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = CREDIT_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->pid(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional .Cmd.ECreditType type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type(), output);
  }

  // optional uint64 before = 9;
  if (has_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->before(), output);
  }

  // optional uint64 after = 10;
  if (has_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->after(), output);
  }

  // optional string logid = 11;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->logid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CreditLogCmd)
}

::google::protobuf::uint8* CreditLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CreditLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = CREDIT_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->pid(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional .Cmd.ECreditType type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->type(), target);
  }

  // optional uint64 before = 9;
  if (has_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->before(), target);
  }

  // optional uint64 after = 10;
  if (has_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->after(), target);
  }

  // optional string logid = 11;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->logid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CreditLogCmd)
  return target;
}

int CreditLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = CREDIT_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint64 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Cmd.ECreditType type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 before = 9;
    if (has_before()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->before());
    }

    // optional uint64 after = 10;
    if (has_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->after());
    }

    // optional string logid = 11;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreditLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreditLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreditLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreditLogCmd::MergeFrom(const CreditLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_before()) {
      set_before(from.before());
    }
    if (from.has_after()) {
      set_after(from.after());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreditLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreditLogCmd::CopyFrom(const CreditLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreditLogCmd::IsInitialized() const {

  return true;
}

void CreditLogCmd::Swap(CreditLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(before_, other->before_);
    std::swap(after_, other->after_);
    std::swap(logid_, other->logid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreditLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreditLogCmd_descriptor_;
  metadata.reflection = CreditLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeGiveLogCmd::kCmdFieldNumber;
const int TradeGiveLogCmd::kParamFieldNumber;
const int TradeGiveLogCmd::kCidFieldNumber;
const int TradeGiveLogCmd::kSidFieldNumber;
const int TradeGiveLogCmd::kPidFieldNumber;
const int TradeGiveLogCmd::kTimeFieldNumber;
const int TradeGiveLogCmd::kEventFieldNumber;
const int TradeGiveLogCmd::kItemidFieldNumber;
const int TradeGiveLogCmd::kQuotaFieldNumber;
const int TradeGiveLogCmd::kIteminfoFieldNumber;
const int TradeGiveLogCmd::kOtheridFieldNumber;
const int TradeGiveLogCmd::kLogidFieldNumber;
const int TradeGiveLogCmd::kNameFieldNumber;
const int TradeGiveLogCmd::kOthernameFieldNumber;
const int TradeGiveLogCmd::kGivetimeFieldNumber;
const int TradeGiveLogCmd::kGivetypeFieldNumber;
const int TradeGiveLogCmd::kItemcountFieldNumber;
#endif  // !_MSC_VER

TradeGiveLogCmd::TradeGiveLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TradeGiveLogCmd)
}

void TradeGiveLogCmd::InitAsDefaultInstance() {
}

TradeGiveLogCmd::TradeGiveLogCmd(const TradeGiveLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TradeGiveLogCmd)
}

void TradeGiveLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 62;
  cid_ = 0u;
  sid_ = 0u;
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  event_ = 1;
  itemid_ = 0u;
  quota_ = GOOGLE_ULONGLONG(0);
  iteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otherid_ = GOOGLE_ULONGLONG(0);
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  givetime_ = 0u;
  givetype_ = 0;
  itemcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeGiveLogCmd::~TradeGiveLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TradeGiveLogCmd)
  SharedDtor();
}

void TradeGiveLogCmd::SharedDtor() {
  if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iteminfo_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (othername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete othername_;
  }
  if (this != default_instance_) {
  }
}

void TradeGiveLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeGiveLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeGiveLogCmd_descriptor_;
}

const TradeGiveLogCmd& TradeGiveLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

TradeGiveLogCmd* TradeGiveLogCmd::default_instance_ = NULL;

TradeGiveLogCmd* TradeGiveLogCmd::New() const {
  return new TradeGiveLogCmd;
}

void TradeGiveLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TradeGiveLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, time_);
    cmd_ = 204;
    param_ = 62;
    event_ = 1;
    itemid_ = 0u;
  }
  if (_has_bits_[8 / 32] & 65280) {
    quota_ = GOOGLE_ULONGLONG(0);
    if (has_iteminfo()) {
      if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iteminfo_->clear();
      }
    }
    otherid_ = GOOGLE_ULONGLONG(0);
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_othername()) {
      if (othername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        othername_->clear();
      }
    }
    givetime_ = 0u;
    givetype_ = 0;
  }
  itemcount_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeGiveLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TradeGiveLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = TRADE_GIVE_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 5;
      case 5: {
        if (tag == 40) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_event;
        break;
      }

      // optional .Cmd.EGiveEvent event = 7;
      case 7: {
        if (tag == 56) {
         parse_event:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGiveEvent_IsValid(value)) {
            set_event(static_cast< ::Cmd::EGiveEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 8;
      case 8: {
        if (tag == 64) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_quota;
        break;
      }

      // optional uint64 quota = 9;
      case 9: {
        if (tag == 72) {
         parse_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_)));
          set_has_quota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_iteminfo;
        break;
      }

      // optional string iteminfo = 10;
      case 10: {
        if (tag == 82) {
         parse_iteminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iteminfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iteminfo().data(), this->iteminfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iteminfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_otherid;
        break;
      }

      // optional uint64 otherid = 11;
      case 11: {
        if (tag == 88) {
         parse_otherid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_logid;
        break;
      }

      // optional string logid = 12;
      case 12: {
        if (tag == 98) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_name;
        break;
      }

      // optional string name = 13;
      case 13: {
        if (tag == 106) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_othername;
        break;
      }

      // optional string othername = 14;
      case 14: {
        if (tag == 114) {
         parse_othername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_othername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->othername().data(), this->othername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "othername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_givetime;
        break;
      }

      // optional uint32 givetime = 15;
      case 15: {
        if (tag == 120) {
         parse_givetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &givetime_)));
          set_has_givetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_givetype;
        break;
      }

      // optional .Cmd.ELogGiveType givetype = 16;
      case 16: {
        if (tag == 128) {
         parse_givetype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ELogGiveType_IsValid(value)) {
            set_givetype(static_cast< ::Cmd::ELogGiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_itemcount;
        break;
      }

      // optional uint32 itemcount = 17;
      case 17: {
        if (tag == 136) {
         parse_itemcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TradeGiveLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TradeGiveLogCmd)
  return false;
#undef DO_
}

void TradeGiveLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TradeGiveLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = TRADE_GIVE_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->pid(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional .Cmd.EGiveEvent event = 7;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->event(), output);
  }

  // optional uint32 itemid = 8;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->itemid(), output);
  }

  // optional uint64 quota = 9;
  if (has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->quota(), output);
  }

  // optional string iteminfo = 10;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iteminfo().data(), this->iteminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iteminfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->iteminfo(), output);
  }

  // optional uint64 otherid = 11;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->otherid(), output);
  }

  // optional string logid = 12;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->logid(), output);
  }

  // optional string name = 13;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->name(), output);
  }

  // optional string othername = 14;
  if (has_othername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->othername().data(), this->othername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "othername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->othername(), output);
  }

  // optional uint32 givetime = 15;
  if (has_givetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->givetime(), output);
  }

  // optional .Cmd.ELogGiveType givetype = 16;
  if (has_givetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->givetype(), output);
  }

  // optional uint32 itemcount = 17;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->itemcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TradeGiveLogCmd)
}

::google::protobuf::uint8* TradeGiveLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TradeGiveLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = TRADE_GIVE_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint64 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->pid(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional .Cmd.EGiveEvent event = 7;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->event(), target);
  }

  // optional uint32 itemid = 8;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->itemid(), target);
  }

  // optional uint64 quota = 9;
  if (has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->quota(), target);
  }

  // optional string iteminfo = 10;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iteminfo().data(), this->iteminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iteminfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->iteminfo(), target);
  }

  // optional uint64 otherid = 11;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->otherid(), target);
  }

  // optional string logid = 12;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->logid(), target);
  }

  // optional string name = 13;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->name(), target);
  }

  // optional string othername = 14;
  if (has_othername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->othername().data(), this->othername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "othername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->othername(), target);
  }

  // optional uint32 givetime = 15;
  if (has_givetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->givetime(), target);
  }

  // optional .Cmd.ELogGiveType givetype = 16;
  if (has_givetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->givetype(), target);
  }

  // optional uint32 itemcount = 17;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->itemcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TradeGiveLogCmd)
  return target;
}

int TradeGiveLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = TRADE_GIVE_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint64 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .Cmd.EGiveEvent event = 7;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

    // optional uint32 itemid = 8;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 quota = 9;
    if (has_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota());
    }

    // optional string iteminfo = 10;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iteminfo());
    }

    // optional uint64 otherid = 11;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->otherid());
    }

    // optional string logid = 12;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

    // optional string name = 13;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string othername = 14;
    if (has_othername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->othername());
    }

    // optional uint32 givetime = 15;
    if (has_givetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->givetime());
    }

    // optional .Cmd.ELogGiveType givetype = 16;
    if (has_givetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->givetype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 itemcount = 17;
    if (has_itemcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeGiveLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeGiveLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeGiveLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeGiveLogCmd::MergeFrom(const TradeGiveLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_quota()) {
      set_quota(from.quota());
    }
    if (from.has_iteminfo()) {
      set_iteminfo(from.iteminfo());
    }
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_othername()) {
      set_othername(from.othername());
    }
    if (from.has_givetime()) {
      set_givetime(from.givetime());
    }
    if (from.has_givetype()) {
      set_givetype(from.givetype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeGiveLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeGiveLogCmd::CopyFrom(const TradeGiveLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeGiveLogCmd::IsInitialized() const {

  return true;
}

void TradeGiveLogCmd::Swap(TradeGiveLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(event_, other->event_);
    std::swap(itemid_, other->itemid_);
    std::swap(quota_, other->quota_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(otherid_, other->otherid_);
    std::swap(logid_, other->logid_);
    std::swap(name_, other->name_);
    std::swap(othername_, other->othername_);
    std::swap(givetime_, other->givetime_);
    std::swap(givetype_, other->givetype_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeGiveLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeGiveLogCmd_descriptor_;
  metadata.reflection = TradeGiveLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuotaLogCmd::kCmdFieldNumber;
const int QuotaLogCmd::kParamFieldNumber;
const int QuotaLogCmd::kCidFieldNumber;
const int QuotaLogCmd::kSidFieldNumber;
const int QuotaLogCmd::kAccountFieldNumber;
const int QuotaLogCmd::kPidFieldNumber;
const int QuotaLogCmd::kTimeFieldNumber;
const int QuotaLogCmd::kLogidFieldNumber;
const int QuotaLogCmd::kOpttypeFieldNumber;
const int QuotaLogCmd::kQuotatypeFieldNumber;
const int QuotaLogCmd::kChangedFieldNumber;
const int QuotaLogCmd::kQuotaFieldNumber;
const int QuotaLogCmd::kLockFieldNumber;
#endif  // !_MSC_VER

QuotaLogCmd::QuotaLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuotaLogCmd)
}

void QuotaLogCmd::InitAsDefaultInstance() {
}

QuotaLogCmd::QuotaLogCmd(const QuotaLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuotaLogCmd)
}

void QuotaLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 63;
  cid_ = 0u;
  sid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opttype_ = 1;
  quotatype_ = 1;
  changed_ = GOOGLE_ULONGLONG(0);
  quota_ = GOOGLE_ULONGLONG(0);
  lock_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuotaLogCmd::~QuotaLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QuotaLogCmd)
  SharedDtor();
}

void QuotaLogCmd::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void QuotaLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuotaLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuotaLogCmd_descriptor_;
}

const QuotaLogCmd& QuotaLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

QuotaLogCmd* QuotaLogCmd::default_instance_ = NULL;

QuotaLogCmd* QuotaLogCmd::New() const {
  return new QuotaLogCmd;
}

void QuotaLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuotaLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, sid_);
    cmd_ = 204;
    param_ = 63;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    pid_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(changed_, lock_);
    opttype_ = 1;
    quotatype_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuotaLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuotaLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = QUOTA_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }

      // optional string account = 5;
      case 5: {
        if (tag == 42) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 6;
      case 6: {
        if (tag == 48) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional uint32 time = 7;
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_logid;
        break;
      }

      // optional string logid = 8;
      case 8: {
        if (tag == 66) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_opttype;
        break;
      }

      // optional .Cmd.EQuotaOptType opttype = 9;
      case 9: {
        if (tag == 72) {
         parse_opttype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQuotaOptType_IsValid(value)) {
            set_opttype(static_cast< ::Cmd::EQuotaOptType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_quotatype;
        break;
      }

      // optional .Cmd.EQuotaType quotatype = 10;
      case 10: {
        if (tag == 80) {
         parse_quotatype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQuotaType_IsValid(value)) {
            set_quotatype(static_cast< ::Cmd::EQuotaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_changed;
        break;
      }

      // optional uint64 changed = 11;
      case 11: {
        if (tag == 88) {
         parse_changed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &changed_)));
          set_has_changed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_quota;
        break;
      }

      // optional uint64 quota = 12;
      case 12: {
        if (tag == 96) {
         parse_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_)));
          set_has_quota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_lock;
        break;
      }

      // optional uint64 lock = 13;
      case 13: {
        if (tag == 104) {
         parse_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuotaLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuotaLogCmd)
  return false;
#undef DO_
}

void QuotaLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuotaLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = QUOTA_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->account(), output);
  }

  // optional uint64 pid = 6;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pid(), output);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time(), output);
  }

  // optional string logid = 8;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->logid(), output);
  }

  // optional .Cmd.EQuotaOptType opttype = 9;
  if (has_opttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->opttype(), output);
  }

  // optional .Cmd.EQuotaType quotatype = 10;
  if (has_quotatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->quotatype(), output);
  }

  // optional uint64 changed = 11;
  if (has_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->changed(), output);
  }

  // optional uint64 quota = 12;
  if (has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->quota(), output);
  }

  // optional uint64 lock = 13;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->lock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuotaLogCmd)
}

::google::protobuf::uint8* QuotaLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuotaLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = QUOTA_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account(), target);
  }

  // optional uint64 pid = 6;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->pid(), target);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time(), target);
  }

  // optional string logid = 8;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->logid(), target);
  }

  // optional .Cmd.EQuotaOptType opttype = 9;
  if (has_opttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->opttype(), target);
  }

  // optional .Cmd.EQuotaType quotatype = 10;
  if (has_quotatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->quotatype(), target);
  }

  // optional uint64 changed = 11;
  if (has_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->changed(), target);
  }

  // optional uint64 quota = 12;
  if (has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->quota(), target);
  }

  // optional uint64 lock = 13;
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->lock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuotaLogCmd)
  return target;
}

int QuotaLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = QUOTA_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional string account = 5;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 pid = 6;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string logid = 8;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.EQuotaOptType opttype = 9;
    if (has_opttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opttype());
    }

    // optional .Cmd.EQuotaType quotatype = 10;
    if (has_quotatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quotatype());
    }

    // optional uint64 changed = 11;
    if (has_changed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->changed());
    }

    // optional uint64 quota = 12;
    if (has_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota());
    }

    // optional uint64 lock = 13;
    if (has_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuotaLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuotaLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuotaLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuotaLogCmd::MergeFrom(const QuotaLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_opttype()) {
      set_opttype(from.opttype());
    }
    if (from.has_quotatype()) {
      set_quotatype(from.quotatype());
    }
    if (from.has_changed()) {
      set_changed(from.changed());
    }
    if (from.has_quota()) {
      set_quota(from.quota());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuotaLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuotaLogCmd::CopyFrom(const QuotaLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotaLogCmd::IsInitialized() const {

  return true;
}

void QuotaLogCmd::Swap(QuotaLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(account_, other->account_);
    std::swap(pid_, other->pid_);
    std::swap(time_, other->time_);
    std::swap(logid_, other->logid_);
    std::swap(opttype_, other->opttype_);
    std::swap(quotatype_, other->quotatype_);
    std::swap(changed_, other->changed_);
    std::swap(quota_, other->quota_);
    std::swap(lock_, other->lock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuotaLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuotaLogCmd_descriptor_;
  metadata.reflection = QuotaLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildItemLogCmd::kCmdFieldNumber;
const int GuildItemLogCmd::kParamFieldNumber;
const int GuildItemLogCmd::kCidFieldNumber;
const int GuildItemLogCmd::kSidFieldNumber;
const int GuildItemLogCmd::kGidFieldNumber;
const int GuildItemLogCmd::kTimeFieldNumber;
const int GuildItemLogCmd::kLogidFieldNumber;
const int GuildItemLogCmd::kItemidFieldNumber;
const int GuildItemLogCmd::kChangedFieldNumber;
const int GuildItemLogCmd::kCountFieldNumber;
const int GuildItemLogCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

GuildItemLogCmd::GuildItemLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildItemLogCmd)
}

void GuildItemLogCmd::InitAsDefaultInstance() {
}

GuildItemLogCmd::GuildItemLogCmd(const GuildItemLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildItemLogCmd)
}

void GuildItemLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 204;
  param_ = 64;
  cid_ = 0u;
  sid_ = 0u;
  gid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemid_ = 0u;
  changed_ = GOOGLE_LONGLONG(0);
  count_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildItemLogCmd::~GuildItemLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildItemLogCmd)
  SharedDtor();
}

void GuildItemLogCmd::SharedDtor() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void GuildItemLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildItemLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildItemLogCmd_descriptor_;
}

const GuildItemLogCmd& GuildItemLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogCmd_2eproto();
  return *default_instance_;
}

GuildItemLogCmd* GuildItemLogCmd::default_instance_ = NULL;

GuildItemLogCmd* GuildItemLogCmd::New() const {
  return new GuildItemLogCmd;
}

void GuildItemLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildItemLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cid_, gid_);
    ZR_(time_, itemid_);
    cmd_ = 204;
    param_ = 64;
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logid_->clear();
      }
    }
  }
  ZR_(changed_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildItemLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildItemLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LogParam param = 2 [default = GUILD_ITEM_LOG_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LogParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LogParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gid;
        break;
      }

      // optional uint64 gid = 5;
      case 5: {
        if (tag == 40) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_logid;
        break;
      }

      // optional string logid = 7;
      case 7: {
        if (tag == 58) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 8;
      case 8: {
        if (tag == 64) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_changed;
        break;
      }

      // optional int64 changed = 9;
      case 9: {
        if (tag == 72) {
         parse_changed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &changed_)));
          set_has_changed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_count;
        break;
      }

      // optional uint32 count = 10;
      case 10: {
        if (tag == 80) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_type;
        break;
      }

      // optional uint32 type = 11;
      case 11: {
        if (tag == 88) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildItemLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildItemLogCmd)
  return false;
#undef DO_
}

void GuildItemLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildItemLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LogParam param = 2 [default = GUILD_ITEM_LOG_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // optional uint64 gid = 5;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->gid(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional string logid = 7;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->logid(), output);
  }

  // optional uint32 itemid = 8;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->itemid(), output);
  }

  // optional int64 changed = 9;
  if (has_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->changed(), output);
  }

  // optional uint32 count = 10;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->count(), output);
  }

  // optional uint32 type = 11;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildItemLogCmd)
}

::google::protobuf::uint8* GuildItemLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildItemLogCmd)
  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LogParam param = 2 [default = GUILD_ITEM_LOG_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // optional uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // optional uint64 gid = 5;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->gid(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional string logid = 7;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->logid(), target);
  }

  // optional uint32 itemid = 8;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->itemid(), target);
  }

  // optional int64 changed = 9;
  if (has_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->changed(), target);
  }

  // optional uint32 count = 10;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->count(), target);
  }

  // optional uint32 type = 11;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildItemLogCmd)
  return target;
}

int GuildItemLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LogParam param = 2 [default = GUILD_ITEM_LOG_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint64 gid = 5;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string logid = 7;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }

    // optional uint32 itemid = 8;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 changed = 9;
    if (has_changed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->changed());
    }

    // optional uint32 count = 10;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 type = 11;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildItemLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildItemLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildItemLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildItemLogCmd::MergeFrom(const GuildItemLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_changed()) {
      set_changed(from.changed());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildItemLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildItemLogCmd::CopyFrom(const GuildItemLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildItemLogCmd::IsInitialized() const {

  return true;
}

void GuildItemLogCmd::Swap(GuildItemLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cid_, other->cid_);
    std::swap(sid_, other->sid_);
    std::swap(gid_, other->gid_);
    std::swap(time_, other->time_);
    std::swap(logid_, other->logid_);
    std::swap(itemid_, other->itemid_);
    std::swap(changed_, other->changed_);
    std::swap(count_, other->count_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildItemLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildItemLogCmd_descriptor_;
  metadata.reflection = GuildItemLogCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
