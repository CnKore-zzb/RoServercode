// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SystemCmd.proto

#ifndef PROTOBUF_SystemCmd_2eproto__INCLUDED
#define PROTOBUF_SystemCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SystemCmd_2eproto();
void protobuf_AssignDesc_SystemCmd_2eproto();
void protobuf_ShutdownFile_SystemCmd_2eproto();

class IpPort;
class HeartBeatSystemCmd;
class VerifyConnSystemCmd;
class ServerListSystemCmd;
class ServerListSystemCmd_Item;
class ServerInitOkConnSystemCmd;
class ServerTimeSystemCmd;
class RegistRegionSystemCmd;
class CommonReloadSystemCmd;
class InfoProxySystemCmd;
class RegistProxySystemCmd;

enum SystemParam {
  HEART_BEAT_SYSCMD = 1,
  VERIFY_CONN_SYSCMD = 2,
  SERVER_LIST_SYSCMD = 3,
  SERVER_INIT_OK_SYSCMD = 4,
  SERVER_TIME_SYSCMD = 5,
  REGIST_REGION_SYSCMD = 6,
  COMMON_RELOAD_SYSCMD = 7,
  INFO_PROXY_SYSCMD = 8,
  REGIST_PROXY_SYSCMD = 9
};
bool SystemParam_IsValid(int value);
const SystemParam SystemParam_MIN = HEART_BEAT_SYSCMD;
const SystemParam SystemParam_MAX = REGIST_PROXY_SYSCMD;
const int SystemParam_ARRAYSIZE = SystemParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemParam_descriptor();
inline const ::std::string& SystemParam_Name(SystemParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemParam_descriptor(), value);
}
inline bool SystemParam_Parse(
    const ::std::string& name, SystemParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemParam>(
    SystemParam_descriptor(), name, value);
}
enum EComLoadType {
  EComLoadType_None = 0,
  EComLoadType_Lua = 1,
  EComLoadType_BranchConfig = 2,
  EComLoadType_Db = 3
};
bool EComLoadType_IsValid(int value);
const EComLoadType EComLoadType_MIN = EComLoadType_None;
const EComLoadType EComLoadType_MAX = EComLoadType_Db;
const int EComLoadType_ARRAYSIZE = EComLoadType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EComLoadType_descriptor();
inline const ::std::string& EComLoadType_Name(EComLoadType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EComLoadType_descriptor(), value);
}
inline bool EComLoadType_Parse(
    const ::std::string& name, EComLoadType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EComLoadType>(
    EComLoadType_descriptor(), name, value);
}
// ===================================================================

class IpPort : public ::google::protobuf::Message {
 public:
  IpPort();
  virtual ~IpPort();

  IpPort(const IpPort& from);

  inline IpPort& operator=(const IpPort& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IpPort& default_instance();

  void Swap(IpPort* other);

  // implements Message ----------------------------------------------

  IpPort* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpPort& from);
  void MergeFrom(const IpPort& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.IpPort)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_SystemCmd_2eproto();
  friend void protobuf_AssignDesc_SystemCmd_2eproto();
  friend void protobuf_ShutdownFile_SystemCmd_2eproto();

  void InitAsDefaultInstance();
  static IpPort* default_instance_;
};
// -------------------------------------------------------------------

class HeartBeatSystemCmd : public ::google::protobuf::Message {
 public:
  HeartBeatSystemCmd();
  virtual ~HeartBeatSystemCmd();

  HeartBeatSystemCmd(const HeartBeatSystemCmd& from);

  inline HeartBeatSystemCmd& operator=(const HeartBeatSystemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatSystemCmd& default_instance();

  void Swap(HeartBeatSystemCmd* other);

  // implements Message ----------------------------------------------

  HeartBeatSystemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeatSystemCmd& from);
  void MergeFrom(const HeartBeatSystemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SystemParam param = 2 [default = HEART_BEAT_SYSCMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SystemParam param() const;
  inline void set_param(::Cmd::SystemParam value);

  // @@protoc_insertion_point(class_scope:Cmd.HeartBeatSystemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_SystemCmd_2eproto();
  friend void protobuf_AssignDesc_SystemCmd_2eproto();
  friend void protobuf_ShutdownFile_SystemCmd_2eproto();

  void InitAsDefaultInstance();
  static HeartBeatSystemCmd* default_instance_;
};
// -------------------------------------------------------------------

class VerifyConnSystemCmd : public ::google::protobuf::Message {
 public:
  VerifyConnSystemCmd();
  virtual ~VerifyConnSystemCmd();

  VerifyConnSystemCmd(const VerifyConnSystemCmd& from);

  inline VerifyConnSystemCmd& operator=(const VerifyConnSystemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyConnSystemCmd& default_instance();

  void Swap(VerifyConnSystemCmd* other);

  // implements Message ----------------------------------------------

  VerifyConnSystemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyConnSystemCmd& from);
  void MergeFrom(const VerifyConnSystemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SystemParam param = 2 [default = VERIFY_CONN_SYSCMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SystemParam param() const;
  inline void set_param(::Cmd::SystemParam value);

  // optional string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline bool ret() const;
  inline void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.VerifyConnSystemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* type_;
  ::std::string* name_;
  bool ret_;
  friend void  protobuf_AddDesc_SystemCmd_2eproto();
  friend void protobuf_AssignDesc_SystemCmd_2eproto();
  friend void protobuf_ShutdownFile_SystemCmd_2eproto();

  void InitAsDefaultInstance();
  static VerifyConnSystemCmd* default_instance_;
};
// -------------------------------------------------------------------

class ServerListSystemCmd_Item : public ::google::protobuf::Message {
 public:
  ServerListSystemCmd_Item();
  virtual ~ServerListSystemCmd_Item();

  ServerListSystemCmd_Item(const ServerListSystemCmd_Item& from);

  inline ServerListSystemCmd_Item& operator=(const ServerListSystemCmd_Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerListSystemCmd_Item& default_instance();

  void Swap(ServerListSystemCmd_Item* other);

  // implements Message ----------------------------------------------

  ServerListSystemCmd_Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerListSystemCmd_Item& from);
  void MergeFrom(const ServerListSystemCmd_Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ServerListSystemCmd.Item)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  ::std::string* name_;
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_SystemCmd_2eproto();
  friend void protobuf_AssignDesc_SystemCmd_2eproto();
  friend void protobuf_ShutdownFile_SystemCmd_2eproto();

  void InitAsDefaultInstance();
  static ServerListSystemCmd_Item* default_instance_;
};
// -------------------------------------------------------------------

class ServerListSystemCmd : public ::google::protobuf::Message {
 public:
  ServerListSystemCmd();
  virtual ~ServerListSystemCmd();

  ServerListSystemCmd(const ServerListSystemCmd& from);

  inline ServerListSystemCmd& operator=(const ServerListSystemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerListSystemCmd& default_instance();

  void Swap(ServerListSystemCmd* other);

  // implements Message ----------------------------------------------

  ServerListSystemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerListSystemCmd& from);
  void MergeFrom(const ServerListSystemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServerListSystemCmd_Item Item;

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SystemParam param = 2 [default = SERVER_LIST_SYSCMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SystemParam param() const;
  inline void set_param(::Cmd::SystemParam value);

  // repeated .Cmd.ServerListSystemCmd.Item list = 3;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 3;
  inline const ::Cmd::ServerListSystemCmd_Item& list(int index) const;
  inline ::Cmd::ServerListSystemCmd_Item* mutable_list(int index);
  inline ::Cmd::ServerListSystemCmd_Item* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ServerListSystemCmd_Item >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ServerListSystemCmd_Item >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Cmd.ServerListSystemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ServerListSystemCmd_Item > list_;
  friend void  protobuf_AddDesc_SystemCmd_2eproto();
  friend void protobuf_AssignDesc_SystemCmd_2eproto();
  friend void protobuf_ShutdownFile_SystemCmd_2eproto();

  void InitAsDefaultInstance();
  static ServerListSystemCmd* default_instance_;
};
// -------------------------------------------------------------------

class ServerInitOkConnSystemCmd : public ::google::protobuf::Message {
 public:
  ServerInitOkConnSystemCmd();
  virtual ~ServerInitOkConnSystemCmd();

  ServerInitOkConnSystemCmd(const ServerInitOkConnSystemCmd& from);

  inline ServerInitOkConnSystemCmd& operator=(const ServerInitOkConnSystemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInitOkConnSystemCmd& default_instance();

  void Swap(ServerInitOkConnSystemCmd* other);

  // implements Message ----------------------------------------------

  ServerInitOkConnSystemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerInitOkConnSystemCmd& from);
  void MergeFrom(const ServerInitOkConnSystemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SystemParam param = 2 [default = SERVER_INIT_OK_SYSCMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SystemParam param() const;
  inline void set_param(::Cmd::SystemParam value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Cmd.ServerInitOkConnSystemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_SystemCmd_2eproto();
  friend void protobuf_AssignDesc_SystemCmd_2eproto();
  friend void protobuf_ShutdownFile_SystemCmd_2eproto();

  void InitAsDefaultInstance();
  static ServerInitOkConnSystemCmd* default_instance_;
};
// -------------------------------------------------------------------

class ServerTimeSystemCmd : public ::google::protobuf::Message {
 public:
  ServerTimeSystemCmd();
  virtual ~ServerTimeSystemCmd();

  ServerTimeSystemCmd(const ServerTimeSystemCmd& from);

  inline ServerTimeSystemCmd& operator=(const ServerTimeSystemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerTimeSystemCmd& default_instance();

  void Swap(ServerTimeSystemCmd* other);

  // implements Message ----------------------------------------------

  ServerTimeSystemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerTimeSystemCmd& from);
  void MergeFrom(const ServerTimeSystemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SystemParam param = 2 [default = SERVER_TIME_SYSCMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SystemParam param() const;
  inline void set_param(::Cmd::SystemParam value);

  // optional uint32 adjust = 3;
  inline bool has_adjust() const;
  inline void clear_adjust();
  static const int kAdjustFieldNumber = 3;
  inline ::google::protobuf::uint32 adjust() const;
  inline void set_adjust(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ServerTimeSystemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_adjust();
  inline void clear_has_adjust();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 adjust_;
  friend void  protobuf_AddDesc_SystemCmd_2eproto();
  friend void protobuf_AssignDesc_SystemCmd_2eproto();
  friend void protobuf_ShutdownFile_SystemCmd_2eproto();

  void InitAsDefaultInstance();
  static ServerTimeSystemCmd* default_instance_;
};
// -------------------------------------------------------------------

class RegistRegionSystemCmd : public ::google::protobuf::Message {
 public:
  RegistRegionSystemCmd();
  virtual ~RegistRegionSystemCmd();

  RegistRegionSystemCmd(const RegistRegionSystemCmd& from);

  inline RegistRegionSystemCmd& operator=(const RegistRegionSystemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistRegionSystemCmd& default_instance();

  void Swap(RegistRegionSystemCmd* other);

  // implements Message ----------------------------------------------

  RegistRegionSystemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegistRegionSystemCmd& from);
  void MergeFrom(const RegistRegionSystemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SystemParam param = 2 [default = REGIST_REGION_SYSCMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SystemParam param() const;
  inline void set_param(::Cmd::SystemParam value);

  // optional uint32 zoneid = 3;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 3;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 regiontype = 4;
  inline bool has_regiontype() const;
  inline void clear_regiontype();
  static const int kRegiontypeFieldNumber = 4;
  inline ::google::protobuf::uint32 regiontype() const;
  inline void set_regiontype(::google::protobuf::uint32 value);

  // optional uint32 servertype = 5;
  inline bool has_servertype() const;
  inline void clear_servertype();
  static const int kServertypeFieldNumber = 5;
  inline ::google::protobuf::uint32 servertype() const;
  inline void set_servertype(::google::protobuf::uint32 value);

  // optional uint32 client = 6;
  inline bool has_client() const;
  inline void clear_client();
  static const int kClientFieldNumber = 6;
  inline ::google::protobuf::uint32 client() const;
  inline void set_client(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.RegistRegionSystemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_regiontype();
  inline void clear_has_regiontype();
  inline void set_has_servertype();
  inline void clear_has_servertype();
  inline void set_has_client();
  inline void clear_has_client();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 regiontype_;
  ::google::protobuf::uint32 servertype_;
  ::google::protobuf::uint32 client_;
  friend void  protobuf_AddDesc_SystemCmd_2eproto();
  friend void protobuf_AssignDesc_SystemCmd_2eproto();
  friend void protobuf_ShutdownFile_SystemCmd_2eproto();

  void InitAsDefaultInstance();
  static RegistRegionSystemCmd* default_instance_;
};
// -------------------------------------------------------------------

class CommonReloadSystemCmd : public ::google::protobuf::Message {
 public:
  CommonReloadSystemCmd();
  virtual ~CommonReloadSystemCmd();

  CommonReloadSystemCmd(const CommonReloadSystemCmd& from);

  inline CommonReloadSystemCmd& operator=(const CommonReloadSystemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonReloadSystemCmd& default_instance();

  void Swap(CommonReloadSystemCmd* other);

  // implements Message ----------------------------------------------

  CommonReloadSystemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonReloadSystemCmd& from);
  void MergeFrom(const CommonReloadSystemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SystemParam param = 2 [default = COMMON_RELOAD_SYSCMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SystemParam param() const;
  inline void set_param(::Cmd::SystemParam value);

  // optional .Cmd.EComLoadType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EComLoadType type() const;
  inline void set_type(::Cmd::EComLoadType value);

  // @@protoc_insertion_point(class_scope:Cmd.CommonReloadSystemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int type_;
  friend void  protobuf_AddDesc_SystemCmd_2eproto();
  friend void protobuf_AssignDesc_SystemCmd_2eproto();
  friend void protobuf_ShutdownFile_SystemCmd_2eproto();

  void InitAsDefaultInstance();
  static CommonReloadSystemCmd* default_instance_;
};
// -------------------------------------------------------------------

class InfoProxySystemCmd : public ::google::protobuf::Message {
 public:
  InfoProxySystemCmd();
  virtual ~InfoProxySystemCmd();

  InfoProxySystemCmd(const InfoProxySystemCmd& from);

  inline InfoProxySystemCmd& operator=(const InfoProxySystemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoProxySystemCmd& default_instance();

  void Swap(InfoProxySystemCmd* other);

  // implements Message ----------------------------------------------

  InfoProxySystemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoProxySystemCmd& from);
  void MergeFrom(const InfoProxySystemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SystemParam param = 2 [default = INFO_PROXY_SYSCMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SystemParam param() const;
  inline void set_param(::Cmd::SystemParam value);

  // optional string proxyid = 3;
  inline bool has_proxyid() const;
  inline void clear_proxyid();
  static const int kProxyidFieldNumber = 3;
  inline const ::std::string& proxyid() const;
  inline void set_proxyid(const ::std::string& value);
  inline void set_proxyid(const char* value);
  inline void set_proxyid(const char* value, size_t size);
  inline ::std::string* mutable_proxyid();
  inline ::std::string* release_proxyid();
  inline void set_allocated_proxyid(::std::string* proxyid);

  // optional uint32 tasknum = 4;
  inline bool has_tasknum() const;
  inline void clear_tasknum();
  static const int kTasknumFieldNumber = 4;
  inline ::google::protobuf::uint32 tasknum() const;
  inline void set_tasknum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.InfoProxySystemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_proxyid();
  inline void clear_has_proxyid();
  inline void set_has_tasknum();
  inline void clear_has_tasknum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* proxyid_;
  ::google::protobuf::uint32 tasknum_;
  friend void  protobuf_AddDesc_SystemCmd_2eproto();
  friend void protobuf_AssignDesc_SystemCmd_2eproto();
  friend void protobuf_ShutdownFile_SystemCmd_2eproto();

  void InitAsDefaultInstance();
  static InfoProxySystemCmd* default_instance_;
};
// -------------------------------------------------------------------

class RegistProxySystemCmd : public ::google::protobuf::Message {
 public:
  RegistProxySystemCmd();
  virtual ~RegistProxySystemCmd();

  RegistProxySystemCmd(const RegistProxySystemCmd& from);

  inline RegistProxySystemCmd& operator=(const RegistProxySystemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistProxySystemCmd& default_instance();

  void Swap(RegistProxySystemCmd* other);

  // implements Message ----------------------------------------------

  RegistProxySystemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegistProxySystemCmd& from);
  void MergeFrom(const RegistProxySystemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SystemParam param = 2 [default = REGIST_PROXY_SYSCMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SystemParam param() const;
  inline void set_param(::Cmd::SystemParam value);

  // optional string proxyid = 3;
  inline bool has_proxyid() const;
  inline void clear_proxyid();
  static const int kProxyidFieldNumber = 3;
  inline const ::std::string& proxyid() const;
  inline void set_proxyid(const ::std::string& value);
  inline void set_proxyid(const char* value);
  inline void set_proxyid(const char* value, size_t size);
  inline ::std::string* mutable_proxyid();
  inline ::std::string* release_proxyid();
  inline void set_allocated_proxyid(::std::string* proxyid);

  // @@protoc_insertion_point(class_scope:Cmd.RegistProxySystemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_proxyid();
  inline void clear_has_proxyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* proxyid_;
  friend void  protobuf_AddDesc_SystemCmd_2eproto();
  friend void protobuf_AssignDesc_SystemCmd_2eproto();
  friend void protobuf_ShutdownFile_SystemCmd_2eproto();

  void InitAsDefaultInstance();
  static RegistProxySystemCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// IpPort

// optional string ip = 1;
inline bool IpPort::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpPort::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpPort::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpPort::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IpPort::ip() const {
  // @@protoc_insertion_point(field_get:Cmd.IpPort.ip)
  return *ip_;
}
inline void IpPort::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.IpPort.ip)
}
inline void IpPort::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.IpPort.ip)
}
inline void IpPort::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.IpPort.ip)
}
inline ::std::string* IpPort::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.IpPort.ip)
  return ip_;
}
inline ::std::string* IpPort::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IpPort::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.IpPort.ip)
}

// optional uint32 port = 2;
inline bool IpPort::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpPort::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpPort::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpPort::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IpPort::port() const {
  // @@protoc_insertion_point(field_get:Cmd.IpPort.port)
  return port_;
}
inline void IpPort::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IpPort.port)
}

// -------------------------------------------------------------------

// HeartBeatSystemCmd

// optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
inline bool HeartBeatSystemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartBeatSystemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartBeatSystemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartBeatSystemCmd::clear_cmd() {
  cmd_ = 255;
  clear_has_cmd();
}
inline ::Cmd::Command HeartBeatSystemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.HeartBeatSystemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void HeartBeatSystemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HeartBeatSystemCmd.cmd)
}

// optional .Cmd.SystemParam param = 2 [default = HEART_BEAT_SYSCMD];
inline bool HeartBeatSystemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartBeatSystemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartBeatSystemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartBeatSystemCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::SystemParam HeartBeatSystemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.HeartBeatSystemCmd.param)
  return static_cast< ::Cmd::SystemParam >(param_);
}
inline void HeartBeatSystemCmd::set_param(::Cmd::SystemParam value) {
  assert(::Cmd::SystemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HeartBeatSystemCmd.param)
}

// -------------------------------------------------------------------

// VerifyConnSystemCmd

// optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
inline bool VerifyConnSystemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyConnSystemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyConnSystemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyConnSystemCmd::clear_cmd() {
  cmd_ = 255;
  clear_has_cmd();
}
inline ::Cmd::Command VerifyConnSystemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.VerifyConnSystemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void VerifyConnSystemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.VerifyConnSystemCmd.cmd)
}

// optional .Cmd.SystemParam param = 2 [default = VERIFY_CONN_SYSCMD];
inline bool VerifyConnSystemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyConnSystemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyConnSystemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyConnSystemCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::SystemParam VerifyConnSystemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.VerifyConnSystemCmd.param)
  return static_cast< ::Cmd::SystemParam >(param_);
}
inline void VerifyConnSystemCmd::set_param(::Cmd::SystemParam value) {
  assert(::Cmd::SystemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.VerifyConnSystemCmd.param)
}

// optional string type = 3;
inline bool VerifyConnSystemCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VerifyConnSystemCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VerifyConnSystemCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VerifyConnSystemCmd::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& VerifyConnSystemCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.VerifyConnSystemCmd.type)
  return *type_;
}
inline void VerifyConnSystemCmd::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.VerifyConnSystemCmd.type)
}
inline void VerifyConnSystemCmd::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.VerifyConnSystemCmd.type)
}
inline void VerifyConnSystemCmd::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.VerifyConnSystemCmd.type)
}
inline ::std::string* VerifyConnSystemCmd::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.VerifyConnSystemCmd.type)
  return type_;
}
inline ::std::string* VerifyConnSystemCmd::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VerifyConnSystemCmd::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.VerifyConnSystemCmd.type)
}

// optional string name = 4;
inline bool VerifyConnSystemCmd::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VerifyConnSystemCmd::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VerifyConnSystemCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VerifyConnSystemCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& VerifyConnSystemCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.VerifyConnSystemCmd.name)
  return *name_;
}
inline void VerifyConnSystemCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.VerifyConnSystemCmd.name)
}
inline void VerifyConnSystemCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.VerifyConnSystemCmd.name)
}
inline void VerifyConnSystemCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.VerifyConnSystemCmd.name)
}
inline ::std::string* VerifyConnSystemCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.VerifyConnSystemCmd.name)
  return name_;
}
inline ::std::string* VerifyConnSystemCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VerifyConnSystemCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.VerifyConnSystemCmd.name)
}

// optional bool ret = 5;
inline bool VerifyConnSystemCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VerifyConnSystemCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VerifyConnSystemCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VerifyConnSystemCmd::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool VerifyConnSystemCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.VerifyConnSystemCmd.ret)
  return ret_;
}
inline void VerifyConnSystemCmd::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.VerifyConnSystemCmd.ret)
}

// -------------------------------------------------------------------

// ServerListSystemCmd_Item

// optional string type = 1;
inline bool ServerListSystemCmd_Item::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerListSystemCmd_Item::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerListSystemCmd_Item::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerListSystemCmd_Item::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& ServerListSystemCmd_Item::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerListSystemCmd.Item.type)
  return *type_;
}
inline void ServerListSystemCmd_Item::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ServerListSystemCmd.Item.type)
}
inline void ServerListSystemCmd_Item::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ServerListSystemCmd.Item.type)
}
inline void ServerListSystemCmd_Item::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ServerListSystemCmd.Item.type)
}
inline ::std::string* ServerListSystemCmd_Item::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ServerListSystemCmd.Item.type)
  return type_;
}
inline ::std::string* ServerListSystemCmd_Item::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerListSystemCmd_Item::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ServerListSystemCmd.Item.type)
}

// optional string name = 2;
inline bool ServerListSystemCmd_Item::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerListSystemCmd_Item::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerListSystemCmd_Item::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerListSystemCmd_Item::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ServerListSystemCmd_Item::name() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerListSystemCmd.Item.name)
  return *name_;
}
inline void ServerListSystemCmd_Item::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ServerListSystemCmd.Item.name)
}
inline void ServerListSystemCmd_Item::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ServerListSystemCmd.Item.name)
}
inline void ServerListSystemCmd_Item::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ServerListSystemCmd.Item.name)
}
inline ::std::string* ServerListSystemCmd_Item::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ServerListSystemCmd.Item.name)
  return name_;
}
inline ::std::string* ServerListSystemCmd_Item::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerListSystemCmd_Item::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ServerListSystemCmd.Item.name)
}

// optional string ip = 3;
inline bool ServerListSystemCmd_Item::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerListSystemCmd_Item::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerListSystemCmd_Item::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerListSystemCmd_Item::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ServerListSystemCmd_Item::ip() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerListSystemCmd.Item.ip)
  return *ip_;
}
inline void ServerListSystemCmd_Item::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ServerListSystemCmd.Item.ip)
}
inline void ServerListSystemCmd_Item::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ServerListSystemCmd.Item.ip)
}
inline void ServerListSystemCmd_Item::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ServerListSystemCmd.Item.ip)
}
inline ::std::string* ServerListSystemCmd_Item::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ServerListSystemCmd.Item.ip)
  return ip_;
}
inline ::std::string* ServerListSystemCmd_Item::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerListSystemCmd_Item::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ServerListSystemCmd.Item.ip)
}

// optional uint32 port = 4;
inline bool ServerListSystemCmd_Item::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerListSystemCmd_Item::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerListSystemCmd_Item::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerListSystemCmd_Item::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 ServerListSystemCmd_Item::port() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerListSystemCmd.Item.port)
  return port_;
}
inline void ServerListSystemCmd_Item::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServerListSystemCmd.Item.port)
}

// -------------------------------------------------------------------

// ServerListSystemCmd

// optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
inline bool ServerListSystemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerListSystemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerListSystemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerListSystemCmd::clear_cmd() {
  cmd_ = 255;
  clear_has_cmd();
}
inline ::Cmd::Command ServerListSystemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerListSystemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ServerListSystemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServerListSystemCmd.cmd)
}

// optional .Cmd.SystemParam param = 2 [default = SERVER_LIST_SYSCMD];
inline bool ServerListSystemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerListSystemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerListSystemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerListSystemCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::SystemParam ServerListSystemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerListSystemCmd.param)
  return static_cast< ::Cmd::SystemParam >(param_);
}
inline void ServerListSystemCmd::set_param(::Cmd::SystemParam value) {
  assert(::Cmd::SystemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServerListSystemCmd.param)
}

// repeated .Cmd.ServerListSystemCmd.Item list = 3;
inline int ServerListSystemCmd::list_size() const {
  return list_.size();
}
inline void ServerListSystemCmd::clear_list() {
  list_.Clear();
}
inline const ::Cmd::ServerListSystemCmd_Item& ServerListSystemCmd::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ServerListSystemCmd.list)
  return list_.Get(index);
}
inline ::Cmd::ServerListSystemCmd_Item* ServerListSystemCmd::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ServerListSystemCmd.list)
  return list_.Mutable(index);
}
inline ::Cmd::ServerListSystemCmd_Item* ServerListSystemCmd::add_list() {
  // @@protoc_insertion_point(field_add:Cmd.ServerListSystemCmd.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ServerListSystemCmd_Item >&
ServerListSystemCmd::list() const {
  // @@protoc_insertion_point(field_list:Cmd.ServerListSystemCmd.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ServerListSystemCmd_Item >*
ServerListSystemCmd::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ServerListSystemCmd.list)
  return &list_;
}

// -------------------------------------------------------------------

// ServerInitOkConnSystemCmd

// optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
inline bool ServerInitOkConnSystemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInitOkConnSystemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerInitOkConnSystemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerInitOkConnSystemCmd::clear_cmd() {
  cmd_ = 255;
  clear_has_cmd();
}
inline ::Cmd::Command ServerInitOkConnSystemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerInitOkConnSystemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ServerInitOkConnSystemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServerInitOkConnSystemCmd.cmd)
}

// optional .Cmd.SystemParam param = 2 [default = SERVER_INIT_OK_SYSCMD];
inline bool ServerInitOkConnSystemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInitOkConnSystemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerInitOkConnSystemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerInitOkConnSystemCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::SystemParam ServerInitOkConnSystemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerInitOkConnSystemCmd.param)
  return static_cast< ::Cmd::SystemParam >(param_);
}
inline void ServerInitOkConnSystemCmd::set_param(::Cmd::SystemParam value) {
  assert(::Cmd::SystemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServerInitOkConnSystemCmd.param)
}

// optional string name = 3;
inline bool ServerInitOkConnSystemCmd::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerInitOkConnSystemCmd::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerInitOkConnSystemCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerInitOkConnSystemCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ServerInitOkConnSystemCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerInitOkConnSystemCmd.name)
  return *name_;
}
inline void ServerInitOkConnSystemCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ServerInitOkConnSystemCmd.name)
}
inline void ServerInitOkConnSystemCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ServerInitOkConnSystemCmd.name)
}
inline void ServerInitOkConnSystemCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ServerInitOkConnSystemCmd.name)
}
inline ::std::string* ServerInitOkConnSystemCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ServerInitOkConnSystemCmd.name)
  return name_;
}
inline ::std::string* ServerInitOkConnSystemCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerInitOkConnSystemCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ServerInitOkConnSystemCmd.name)
}

// -------------------------------------------------------------------

// ServerTimeSystemCmd

// optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
inline bool ServerTimeSystemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerTimeSystemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerTimeSystemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerTimeSystemCmd::clear_cmd() {
  cmd_ = 255;
  clear_has_cmd();
}
inline ::Cmd::Command ServerTimeSystemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerTimeSystemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ServerTimeSystemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServerTimeSystemCmd.cmd)
}

// optional .Cmd.SystemParam param = 2 [default = SERVER_TIME_SYSCMD];
inline bool ServerTimeSystemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerTimeSystemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerTimeSystemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerTimeSystemCmd::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::SystemParam ServerTimeSystemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerTimeSystemCmd.param)
  return static_cast< ::Cmd::SystemParam >(param_);
}
inline void ServerTimeSystemCmd::set_param(::Cmd::SystemParam value) {
  assert(::Cmd::SystemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServerTimeSystemCmd.param)
}

// optional uint32 adjust = 3;
inline bool ServerTimeSystemCmd::has_adjust() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerTimeSystemCmd::set_has_adjust() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerTimeSystemCmd::clear_has_adjust() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerTimeSystemCmd::clear_adjust() {
  adjust_ = 0u;
  clear_has_adjust();
}
inline ::google::protobuf::uint32 ServerTimeSystemCmd::adjust() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerTimeSystemCmd.adjust)
  return adjust_;
}
inline void ServerTimeSystemCmd::set_adjust(::google::protobuf::uint32 value) {
  set_has_adjust();
  adjust_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServerTimeSystemCmd.adjust)
}

// -------------------------------------------------------------------

// RegistRegionSystemCmd

// optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
inline bool RegistRegionSystemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegistRegionSystemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegistRegionSystemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegistRegionSystemCmd::clear_cmd() {
  cmd_ = 255;
  clear_has_cmd();
}
inline ::Cmd::Command RegistRegionSystemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RegistRegionSystemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RegistRegionSystemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegistRegionSystemCmd.cmd)
}

// optional .Cmd.SystemParam param = 2 [default = REGIST_REGION_SYSCMD];
inline bool RegistRegionSystemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegistRegionSystemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegistRegionSystemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegistRegionSystemCmd::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::SystemParam RegistRegionSystemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RegistRegionSystemCmd.param)
  return static_cast< ::Cmd::SystemParam >(param_);
}
inline void RegistRegionSystemCmd::set_param(::Cmd::SystemParam value) {
  assert(::Cmd::SystemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegistRegionSystemCmd.param)
}

// optional uint32 zoneid = 3;
inline bool RegistRegionSystemCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegistRegionSystemCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegistRegionSystemCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegistRegionSystemCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 RegistRegionSystemCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.RegistRegionSystemCmd.zoneid)
  return zoneid_;
}
inline void RegistRegionSystemCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegistRegionSystemCmd.zoneid)
}

// optional uint32 regiontype = 4;
inline bool RegistRegionSystemCmd::has_regiontype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegistRegionSystemCmd::set_has_regiontype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegistRegionSystemCmd::clear_has_regiontype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegistRegionSystemCmd::clear_regiontype() {
  regiontype_ = 0u;
  clear_has_regiontype();
}
inline ::google::protobuf::uint32 RegistRegionSystemCmd::regiontype() const {
  // @@protoc_insertion_point(field_get:Cmd.RegistRegionSystemCmd.regiontype)
  return regiontype_;
}
inline void RegistRegionSystemCmd::set_regiontype(::google::protobuf::uint32 value) {
  set_has_regiontype();
  regiontype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegistRegionSystemCmd.regiontype)
}

// optional uint32 servertype = 5;
inline bool RegistRegionSystemCmd::has_servertype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegistRegionSystemCmd::set_has_servertype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegistRegionSystemCmd::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegistRegionSystemCmd::clear_servertype() {
  servertype_ = 0u;
  clear_has_servertype();
}
inline ::google::protobuf::uint32 RegistRegionSystemCmd::servertype() const {
  // @@protoc_insertion_point(field_get:Cmd.RegistRegionSystemCmd.servertype)
  return servertype_;
}
inline void RegistRegionSystemCmd::set_servertype(::google::protobuf::uint32 value) {
  set_has_servertype();
  servertype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegistRegionSystemCmd.servertype)
}

// optional uint32 client = 6;
inline bool RegistRegionSystemCmd::has_client() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegistRegionSystemCmd::set_has_client() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegistRegionSystemCmd::clear_has_client() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegistRegionSystemCmd::clear_client() {
  client_ = 0u;
  clear_has_client();
}
inline ::google::protobuf::uint32 RegistRegionSystemCmd::client() const {
  // @@protoc_insertion_point(field_get:Cmd.RegistRegionSystemCmd.client)
  return client_;
}
inline void RegistRegionSystemCmd::set_client(::google::protobuf::uint32 value) {
  set_has_client();
  client_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegistRegionSystemCmd.client)
}

// -------------------------------------------------------------------

// CommonReloadSystemCmd

// optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
inline bool CommonReloadSystemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonReloadSystemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonReloadSystemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonReloadSystemCmd::clear_cmd() {
  cmd_ = 255;
  clear_has_cmd();
}
inline ::Cmd::Command CommonReloadSystemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CommonReloadSystemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CommonReloadSystemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CommonReloadSystemCmd.cmd)
}

// optional .Cmd.SystemParam param = 2 [default = COMMON_RELOAD_SYSCMD];
inline bool CommonReloadSystemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonReloadSystemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonReloadSystemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonReloadSystemCmd::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::SystemParam CommonReloadSystemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CommonReloadSystemCmd.param)
  return static_cast< ::Cmd::SystemParam >(param_);
}
inline void CommonReloadSystemCmd::set_param(::Cmd::SystemParam value) {
  assert(::Cmd::SystemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CommonReloadSystemCmd.param)
}

// optional .Cmd.EComLoadType type = 3;
inline bool CommonReloadSystemCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonReloadSystemCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonReloadSystemCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonReloadSystemCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EComLoadType CommonReloadSystemCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.CommonReloadSystemCmd.type)
  return static_cast< ::Cmd::EComLoadType >(type_);
}
inline void CommonReloadSystemCmd::set_type(::Cmd::EComLoadType value) {
  assert(::Cmd::EComLoadType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CommonReloadSystemCmd.type)
}

// -------------------------------------------------------------------

// InfoProxySystemCmd

// optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
inline bool InfoProxySystemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfoProxySystemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfoProxySystemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfoProxySystemCmd::clear_cmd() {
  cmd_ = 255;
  clear_has_cmd();
}
inline ::Cmd::Command InfoProxySystemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.InfoProxySystemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void InfoProxySystemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InfoProxySystemCmd.cmd)
}

// optional .Cmd.SystemParam param = 2 [default = INFO_PROXY_SYSCMD];
inline bool InfoProxySystemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InfoProxySystemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InfoProxySystemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InfoProxySystemCmd::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::SystemParam InfoProxySystemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.InfoProxySystemCmd.param)
  return static_cast< ::Cmd::SystemParam >(param_);
}
inline void InfoProxySystemCmd::set_param(::Cmd::SystemParam value) {
  assert(::Cmd::SystemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InfoProxySystemCmd.param)
}

// optional string proxyid = 3;
inline bool InfoProxySystemCmd::has_proxyid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InfoProxySystemCmd::set_has_proxyid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InfoProxySystemCmd::clear_has_proxyid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InfoProxySystemCmd::clear_proxyid() {
  if (proxyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyid_->clear();
  }
  clear_has_proxyid();
}
inline const ::std::string& InfoProxySystemCmd::proxyid() const {
  // @@protoc_insertion_point(field_get:Cmd.InfoProxySystemCmd.proxyid)
  return *proxyid_;
}
inline void InfoProxySystemCmd::set_proxyid(const ::std::string& value) {
  set_has_proxyid();
  if (proxyid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyid_ = new ::std::string;
  }
  proxyid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.InfoProxySystemCmd.proxyid)
}
inline void InfoProxySystemCmd::set_proxyid(const char* value) {
  set_has_proxyid();
  if (proxyid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyid_ = new ::std::string;
  }
  proxyid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.InfoProxySystemCmd.proxyid)
}
inline void InfoProxySystemCmd::set_proxyid(const char* value, size_t size) {
  set_has_proxyid();
  if (proxyid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyid_ = new ::std::string;
  }
  proxyid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.InfoProxySystemCmd.proxyid)
}
inline ::std::string* InfoProxySystemCmd::mutable_proxyid() {
  set_has_proxyid();
  if (proxyid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.InfoProxySystemCmd.proxyid)
  return proxyid_;
}
inline ::std::string* InfoProxySystemCmd::release_proxyid() {
  clear_has_proxyid();
  if (proxyid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxyid_;
    proxyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InfoProxySystemCmd::set_allocated_proxyid(::std::string* proxyid) {
  if (proxyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyid_;
  }
  if (proxyid) {
    set_has_proxyid();
    proxyid_ = proxyid;
  } else {
    clear_has_proxyid();
    proxyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.InfoProxySystemCmd.proxyid)
}

// optional uint32 tasknum = 4;
inline bool InfoProxySystemCmd::has_tasknum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InfoProxySystemCmd::set_has_tasknum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InfoProxySystemCmd::clear_has_tasknum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InfoProxySystemCmd::clear_tasknum() {
  tasknum_ = 0u;
  clear_has_tasknum();
}
inline ::google::protobuf::uint32 InfoProxySystemCmd::tasknum() const {
  // @@protoc_insertion_point(field_get:Cmd.InfoProxySystemCmd.tasknum)
  return tasknum_;
}
inline void InfoProxySystemCmd::set_tasknum(::google::protobuf::uint32 value) {
  set_has_tasknum();
  tasknum_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InfoProxySystemCmd.tasknum)
}

// -------------------------------------------------------------------

// RegistProxySystemCmd

// optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
inline bool RegistProxySystemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegistProxySystemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegistProxySystemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegistProxySystemCmd::clear_cmd() {
  cmd_ = 255;
  clear_has_cmd();
}
inline ::Cmd::Command RegistProxySystemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RegistProxySystemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RegistProxySystemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegistProxySystemCmd.cmd)
}

// optional .Cmd.SystemParam param = 2 [default = REGIST_PROXY_SYSCMD];
inline bool RegistProxySystemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegistProxySystemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegistProxySystemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegistProxySystemCmd::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::SystemParam RegistProxySystemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RegistProxySystemCmd.param)
  return static_cast< ::Cmd::SystemParam >(param_);
}
inline void RegistProxySystemCmd::set_param(::Cmd::SystemParam value) {
  assert(::Cmd::SystemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegistProxySystemCmd.param)
}

// optional string proxyid = 3;
inline bool RegistProxySystemCmd::has_proxyid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegistProxySystemCmd::set_has_proxyid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegistProxySystemCmd::clear_has_proxyid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegistProxySystemCmd::clear_proxyid() {
  if (proxyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyid_->clear();
  }
  clear_has_proxyid();
}
inline const ::std::string& RegistProxySystemCmd::proxyid() const {
  // @@protoc_insertion_point(field_get:Cmd.RegistProxySystemCmd.proxyid)
  return *proxyid_;
}
inline void RegistProxySystemCmd::set_proxyid(const ::std::string& value) {
  set_has_proxyid();
  if (proxyid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyid_ = new ::std::string;
  }
  proxyid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RegistProxySystemCmd.proxyid)
}
inline void RegistProxySystemCmd::set_proxyid(const char* value) {
  set_has_proxyid();
  if (proxyid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyid_ = new ::std::string;
  }
  proxyid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RegistProxySystemCmd.proxyid)
}
inline void RegistProxySystemCmd::set_proxyid(const char* value, size_t size) {
  set_has_proxyid();
  if (proxyid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyid_ = new ::std::string;
  }
  proxyid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RegistProxySystemCmd.proxyid)
}
inline ::std::string* RegistProxySystemCmd::mutable_proxyid() {
  set_has_proxyid();
  if (proxyid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RegistProxySystemCmd.proxyid)
  return proxyid_;
}
inline ::std::string* RegistProxySystemCmd::release_proxyid() {
  clear_has_proxyid();
  if (proxyid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxyid_;
    proxyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegistProxySystemCmd::set_allocated_proxyid(::std::string* proxyid) {
  if (proxyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyid_;
  }
  if (proxyid) {
    set_has_proxyid();
    proxyid_ = proxyid;
  } else {
    clear_has_proxyid();
    proxyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RegistProxySystemCmd.proxyid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::SystemParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::SystemParam>() {
  return ::Cmd::SystemParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EComLoadType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EComLoadType>() {
  return ::Cmd::EComLoadType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SystemCmd_2eproto__INCLUDED
