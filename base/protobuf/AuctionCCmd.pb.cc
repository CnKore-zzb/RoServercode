// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuctionCCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AuctionCCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* NtfAuctionStateCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfAuctionStateCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenAuctionPanelCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenAuctionPanelCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignUpItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignUpItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfSignUpInfoCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfSignUpInfoCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfMySignUpInfoCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfMySignUpInfoCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignUpItemCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignUpItemCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfAuctionInfoCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfAuctionInfoCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateAuctionInfoCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateAuctionInfoCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlowingWaterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlowingWaterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAuctionFlowingWaterCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAuctionFlowingWaterCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateAuctionFlowingWaterCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateAuctionFlowingWaterCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLastAuctionInfoCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLastAuctionInfoCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferPriceCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferPriceCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAuctionRecordCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAuctionRecordCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeAuctionRecordCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeAuctionRecordCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfCanTakeCntCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfCanTakeCntCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfMyOfferPriceCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfMyOfferPriceCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfNextAuctionInfoCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfNextAuctionInfoCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAuctionInfoCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAuctionInfoCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfCurAuctionInfoCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfCurAuctionInfoCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfOverTakePriceCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfOverTakePriceCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMyTradedPriceCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMyTradedPriceCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfMaskPriceCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfMaskPriceCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionDialogCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionDialogCCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AuctionCParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAuctionState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAuctionResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AuctionEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERecordType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAuctionTakeStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDialogType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AuctionCCmd_2eproto() {
  protobuf_AddDesc_AuctionCCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AuctionCCmd.proto");
  GOOGLE_CHECK(file != NULL);
  NtfAuctionStateCCmd_descriptor_ = file->message_type(0);
  static const int NtfAuctionStateCCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfAuctionStateCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfAuctionStateCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfAuctionStateCCmd, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfAuctionStateCCmd, batchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfAuctionStateCCmd, auctiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfAuctionStateCCmd, delay_),
  };
  NtfAuctionStateCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfAuctionStateCCmd_descriptor_,
      NtfAuctionStateCCmd::default_instance_,
      NtfAuctionStateCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfAuctionStateCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfAuctionStateCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfAuctionStateCCmd));
  OpenAuctionPanelCCmd_descriptor_ = file->message_type(1);
  static const int OpenAuctionPanelCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAuctionPanelCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAuctionPanelCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAuctionPanelCCmd, open_),
  };
  OpenAuctionPanelCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenAuctionPanelCCmd_descriptor_,
      OpenAuctionPanelCCmd::default_instance_,
      OpenAuctionPanelCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAuctionPanelCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAuctionPanelCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenAuctionPanelCCmd));
  SignUpItemInfo_descriptor_ = file->message_type(2);
  static const int SignUpItemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemInfo, auction_),
  };
  SignUpItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignUpItemInfo_descriptor_,
      SignUpItemInfo::default_instance_,
      SignUpItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignUpItemInfo));
  NtfSignUpInfoCCmd_descriptor_ = file->message_type(3);
  static const int NtfSignUpInfoCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfSignUpInfoCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfSignUpInfoCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfSignUpInfoCCmd, iteminfos_),
  };
  NtfSignUpInfoCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfSignUpInfoCCmd_descriptor_,
      NtfSignUpInfoCCmd::default_instance_,
      NtfSignUpInfoCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfSignUpInfoCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfSignUpInfoCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfSignUpInfoCCmd));
  NtfMySignUpInfoCCmd_descriptor_ = file->message_type(4);
  static const int NtfMySignUpInfoCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMySignUpInfoCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMySignUpInfoCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMySignUpInfoCCmd, signuped_),
  };
  NtfMySignUpInfoCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfMySignUpInfoCCmd_descriptor_,
      NtfMySignUpInfoCCmd::default_instance_,
      NtfMySignUpInfoCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMySignUpInfoCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMySignUpInfoCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfMySignUpInfoCCmd));
  SignUpItemCCmd_descriptor_ = file->message_type(5);
  static const int SignUpItemCCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemCCmd, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemCCmd, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemCCmd, guid_),
  };
  SignUpItemCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignUpItemCCmd_descriptor_,
      SignUpItemCCmd::default_instance_,
      SignUpItemCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignUpItemCCmd));
  AuctionItemInfo_descriptor_ = file->message_type(6);
  static const int AuctionItemInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemInfo, seller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemInfo, sellerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemInfo, people_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemInfo, trade_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemInfo, auction_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemInfo, cur_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemInfo, mask_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemInfo, signup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemInfo, itemdata_),
  };
  AuctionItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionItemInfo_descriptor_,
      AuctionItemInfo::default_instance_,
      AuctionItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionItemInfo));
  NtfAuctionInfoCCmd_descriptor_ = file->message_type(7);
  static const int NtfAuctionInfoCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfAuctionInfoCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfAuctionInfoCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfAuctionInfoCCmd, iteminfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfAuctionInfoCCmd, batchid_),
  };
  NtfAuctionInfoCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfAuctionInfoCCmd_descriptor_,
      NtfAuctionInfoCCmd::default_instance_,
      NtfAuctionInfoCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfAuctionInfoCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfAuctionInfoCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfAuctionInfoCCmd));
  UpdateAuctionInfoCCmd_descriptor_ = file->message_type(8);
  static const int UpdateAuctionInfoCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAuctionInfoCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAuctionInfoCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAuctionInfoCCmd, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAuctionInfoCCmd, batchid_),
  };
  UpdateAuctionInfoCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateAuctionInfoCCmd_descriptor_,
      UpdateAuctionInfoCCmd::default_instance_,
      UpdateAuctionInfoCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAuctionInfoCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAuctionInfoCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateAuctionInfoCCmd));
  FlowingWaterInfo_descriptor_ = file->message_type(9);
  static const int FlowingWaterInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowingWaterInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowingWaterInfo, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowingWaterInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowingWaterInfo, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowingWaterInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowingWaterInfo, max_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowingWaterInfo, player_id_),
  };
  FlowingWaterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlowingWaterInfo_descriptor_,
      FlowingWaterInfo::default_instance_,
      FlowingWaterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowingWaterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowingWaterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlowingWaterInfo));
  ReqAuctionFlowingWaterCCmd_descriptor_ = file->message_type(10);
  static const int ReqAuctionFlowingWaterCCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionFlowingWaterCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionFlowingWaterCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionFlowingWaterCCmd, batchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionFlowingWaterCCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionFlowingWaterCCmd, page_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionFlowingWaterCCmd, flowingwater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionFlowingWaterCCmd, signup_id_),
  };
  ReqAuctionFlowingWaterCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAuctionFlowingWaterCCmd_descriptor_,
      ReqAuctionFlowingWaterCCmd::default_instance_,
      ReqAuctionFlowingWaterCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionFlowingWaterCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionFlowingWaterCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAuctionFlowingWaterCCmd));
  UpdateAuctionFlowingWaterCCmd_descriptor_ = file->message_type(11);
  static const int UpdateAuctionFlowingWaterCCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAuctionFlowingWaterCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAuctionFlowingWaterCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAuctionFlowingWaterCCmd, batchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAuctionFlowingWaterCCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAuctionFlowingWaterCCmd, flowingwater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAuctionFlowingWaterCCmd, signup_id_),
  };
  UpdateAuctionFlowingWaterCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateAuctionFlowingWaterCCmd_descriptor_,
      UpdateAuctionFlowingWaterCCmd::default_instance_,
      UpdateAuctionFlowingWaterCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAuctionFlowingWaterCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAuctionFlowingWaterCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateAuctionFlowingWaterCCmd));
  ReqLastAuctionInfoCCmd_descriptor_ = file->message_type(12);
  static const int ReqLastAuctionInfoCCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLastAuctionInfoCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLastAuctionInfoCCmd, param_),
  };
  ReqLastAuctionInfoCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLastAuctionInfoCCmd_descriptor_,
      ReqLastAuctionInfoCCmd::default_instance_,
      ReqLastAuctionInfoCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLastAuctionInfoCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLastAuctionInfoCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLastAuctionInfoCCmd));
  OfferPriceCCmd_descriptor_ = file->message_type(13);
  static const int OfferPriceCCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceCCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceCCmd, max_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceCCmd, add_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceCCmd, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceCCmd, signup_id_),
  };
  OfferPriceCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferPriceCCmd_descriptor_,
      OfferPriceCCmd::default_instance_,
      OfferPriceCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferPriceCCmd));
  AuctionRecord_descriptor_ = file->message_type(14);
  static const int AuctionRecord_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, take_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, seller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, buyer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, cost_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, get_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, batchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, signup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, itemdata_),
  };
  AuctionRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRecord_descriptor_,
      AuctionRecord::default_instance_,
      AuctionRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRecord));
  ReqAuctionRecordCCmd_descriptor_ = file->message_type(15);
  static const int ReqAuctionRecordCCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionRecordCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionRecordCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionRecordCCmd, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionRecordCCmd, total_page_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionRecordCCmd, records_),
  };
  ReqAuctionRecordCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAuctionRecordCCmd_descriptor_,
      ReqAuctionRecordCCmd::default_instance_,
      ReqAuctionRecordCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionRecordCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionRecordCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAuctionRecordCCmd));
  TakeAuctionRecordCCmd_descriptor_ = file->message_type(16);
  static const int TakeAuctionRecordCCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeAuctionRecordCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeAuctionRecordCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeAuctionRecordCCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeAuctionRecordCCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeAuctionRecordCCmd, ret_),
  };
  TakeAuctionRecordCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeAuctionRecordCCmd_descriptor_,
      TakeAuctionRecordCCmd::default_instance_,
      TakeAuctionRecordCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeAuctionRecordCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeAuctionRecordCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeAuctionRecordCCmd));
  NtfCanTakeCntCCmd_descriptor_ = file->message_type(17);
  static const int NtfCanTakeCntCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfCanTakeCntCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfCanTakeCntCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfCanTakeCntCCmd, count_),
  };
  NtfCanTakeCntCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfCanTakeCntCCmd_descriptor_,
      NtfCanTakeCntCCmd::default_instance_,
      NtfCanTakeCntCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfCanTakeCntCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfCanTakeCntCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfCanTakeCntCCmd));
  NtfMyOfferPriceCCmd_descriptor_ = file->message_type(18);
  static const int NtfMyOfferPriceCCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMyOfferPriceCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMyOfferPriceCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMyOfferPriceCCmd, batchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMyOfferPriceCCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMyOfferPriceCCmd, my_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMyOfferPriceCCmd, signup_id_),
  };
  NtfMyOfferPriceCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfMyOfferPriceCCmd_descriptor_,
      NtfMyOfferPriceCCmd::default_instance_,
      NtfMyOfferPriceCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMyOfferPriceCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMyOfferPriceCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfMyOfferPriceCCmd));
  NtfNextAuctionInfoCCmd_descriptor_ = file->message_type(19);
  static const int NtfNextAuctionInfoCCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfNextAuctionInfoCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfNextAuctionInfoCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfNextAuctionInfoCCmd, batchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfNextAuctionInfoCCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfNextAuctionInfoCCmd, last_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfNextAuctionInfoCCmd, base_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfNextAuctionInfoCCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfNextAuctionInfoCCmd, signup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfNextAuctionInfoCCmd, last_signup_id_),
  };
  NtfNextAuctionInfoCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfNextAuctionInfoCCmd_descriptor_,
      NtfNextAuctionInfoCCmd::default_instance_,
      NtfNextAuctionInfoCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfNextAuctionInfoCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfNextAuctionInfoCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfNextAuctionInfoCCmd));
  ReqAuctionInfoCCmd_descriptor_ = file->message_type(20);
  static const int ReqAuctionInfoCCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionInfoCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionInfoCCmd, param_),
  };
  ReqAuctionInfoCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAuctionInfoCCmd_descriptor_,
      ReqAuctionInfoCCmd::default_instance_,
      ReqAuctionInfoCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionInfoCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionInfoCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAuctionInfoCCmd));
  NtfCurAuctionInfoCCmd_descriptor_ = file->message_type(21);
  static const int NtfCurAuctionInfoCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfCurAuctionInfoCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfCurAuctionInfoCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfCurAuctionInfoCCmd, itemid_),
  };
  NtfCurAuctionInfoCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfCurAuctionInfoCCmd_descriptor_,
      NtfCurAuctionInfoCCmd::default_instance_,
      NtfCurAuctionInfoCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfCurAuctionInfoCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfCurAuctionInfoCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfCurAuctionInfoCCmd));
  NtfOverTakePriceCCmd_descriptor_ = file->message_type(22);
  static const int NtfOverTakePriceCCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfOverTakePriceCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfOverTakePriceCCmd, param_),
  };
  NtfOverTakePriceCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfOverTakePriceCCmd_descriptor_,
      NtfOverTakePriceCCmd::default_instance_,
      NtfOverTakePriceCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfOverTakePriceCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfOverTakePriceCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfOverTakePriceCCmd));
  ReqMyTradedPriceCCmd_descriptor_ = file->message_type(23);
  static const int ReqMyTradedPriceCCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyTradedPriceCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyTradedPriceCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyTradedPriceCCmd, batchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyTradedPriceCCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyTradedPriceCCmd, my_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyTradedPriceCCmd, signup_id_),
  };
  ReqMyTradedPriceCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMyTradedPriceCCmd_descriptor_,
      ReqMyTradedPriceCCmd::default_instance_,
      ReqMyTradedPriceCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyTradedPriceCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyTradedPriceCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMyTradedPriceCCmd));
  NtfMaskPriceCCmd_descriptor_ = file->message_type(24);
  static const int NtfMaskPriceCCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMaskPriceCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMaskPriceCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMaskPriceCCmd, batchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMaskPriceCCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMaskPriceCCmd, mask_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMaskPriceCCmd, signup_id_),
  };
  NtfMaskPriceCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfMaskPriceCCmd_descriptor_,
      NtfMaskPriceCCmd::default_instance_,
      NtfMaskPriceCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMaskPriceCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMaskPriceCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfMaskPriceCCmd));
  AuctionDialogCCmd_descriptor_ = file->message_type(25);
  static const int AuctionDialogCCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionDialogCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionDialogCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionDialogCCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionDialogCCmd, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionDialogCCmd, params_),
  };
  AuctionDialogCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionDialogCCmd_descriptor_,
      AuctionDialogCCmd::default_instance_,
      AuctionDialogCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionDialogCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionDialogCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionDialogCCmd));
  AuctionCParam_descriptor_ = file->enum_type(0);
  EAuctionState_descriptor_ = file->enum_type(1);
  EAuctionResult_descriptor_ = file->enum_type(2);
  AuctionEvent_descriptor_ = file->enum_type(3);
  ERecordType_descriptor_ = file->enum_type(4);
  EAuctionTakeStatus_descriptor_ = file->enum_type(5);
  EDialogType_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AuctionCCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfAuctionStateCCmd_descriptor_, &NtfAuctionStateCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenAuctionPanelCCmd_descriptor_, &OpenAuctionPanelCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignUpItemInfo_descriptor_, &SignUpItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfSignUpInfoCCmd_descriptor_, &NtfSignUpInfoCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfMySignUpInfoCCmd_descriptor_, &NtfMySignUpInfoCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignUpItemCCmd_descriptor_, &SignUpItemCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionItemInfo_descriptor_, &AuctionItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfAuctionInfoCCmd_descriptor_, &NtfAuctionInfoCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateAuctionInfoCCmd_descriptor_, &UpdateAuctionInfoCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlowingWaterInfo_descriptor_, &FlowingWaterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAuctionFlowingWaterCCmd_descriptor_, &ReqAuctionFlowingWaterCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateAuctionFlowingWaterCCmd_descriptor_, &UpdateAuctionFlowingWaterCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLastAuctionInfoCCmd_descriptor_, &ReqLastAuctionInfoCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferPriceCCmd_descriptor_, &OfferPriceCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRecord_descriptor_, &AuctionRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAuctionRecordCCmd_descriptor_, &ReqAuctionRecordCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeAuctionRecordCCmd_descriptor_, &TakeAuctionRecordCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfCanTakeCntCCmd_descriptor_, &NtfCanTakeCntCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfMyOfferPriceCCmd_descriptor_, &NtfMyOfferPriceCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfNextAuctionInfoCCmd_descriptor_, &NtfNextAuctionInfoCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAuctionInfoCCmd_descriptor_, &ReqAuctionInfoCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfCurAuctionInfoCCmd_descriptor_, &NtfCurAuctionInfoCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfOverTakePriceCCmd_descriptor_, &NtfOverTakePriceCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMyTradedPriceCCmd_descriptor_, &ReqMyTradedPriceCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfMaskPriceCCmd_descriptor_, &NtfMaskPriceCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionDialogCCmd_descriptor_, &AuctionDialogCCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AuctionCCmd_2eproto() {
  delete NtfAuctionStateCCmd::default_instance_;
  delete NtfAuctionStateCCmd_reflection_;
  delete OpenAuctionPanelCCmd::default_instance_;
  delete OpenAuctionPanelCCmd_reflection_;
  delete SignUpItemInfo::default_instance_;
  delete SignUpItemInfo_reflection_;
  delete NtfSignUpInfoCCmd::default_instance_;
  delete NtfSignUpInfoCCmd_reflection_;
  delete NtfMySignUpInfoCCmd::default_instance_;
  delete NtfMySignUpInfoCCmd_reflection_;
  delete SignUpItemCCmd::default_instance_;
  delete SignUpItemCCmd_reflection_;
  delete AuctionItemInfo::default_instance_;
  delete AuctionItemInfo_reflection_;
  delete NtfAuctionInfoCCmd::default_instance_;
  delete NtfAuctionInfoCCmd_reflection_;
  delete UpdateAuctionInfoCCmd::default_instance_;
  delete UpdateAuctionInfoCCmd_reflection_;
  delete FlowingWaterInfo::default_instance_;
  delete FlowingWaterInfo_reflection_;
  delete ReqAuctionFlowingWaterCCmd::default_instance_;
  delete ReqAuctionFlowingWaterCCmd_reflection_;
  delete UpdateAuctionFlowingWaterCCmd::default_instance_;
  delete UpdateAuctionFlowingWaterCCmd_reflection_;
  delete ReqLastAuctionInfoCCmd::default_instance_;
  delete ReqLastAuctionInfoCCmd_reflection_;
  delete OfferPriceCCmd::default_instance_;
  delete OfferPriceCCmd_reflection_;
  delete AuctionRecord::default_instance_;
  delete AuctionRecord_reflection_;
  delete ReqAuctionRecordCCmd::default_instance_;
  delete ReqAuctionRecordCCmd_reflection_;
  delete TakeAuctionRecordCCmd::default_instance_;
  delete TakeAuctionRecordCCmd_reflection_;
  delete NtfCanTakeCntCCmd::default_instance_;
  delete NtfCanTakeCntCCmd_reflection_;
  delete NtfMyOfferPriceCCmd::default_instance_;
  delete NtfMyOfferPriceCCmd_reflection_;
  delete NtfNextAuctionInfoCCmd::default_instance_;
  delete NtfNextAuctionInfoCCmd_reflection_;
  delete ReqAuctionInfoCCmd::default_instance_;
  delete ReqAuctionInfoCCmd_reflection_;
  delete NtfCurAuctionInfoCCmd::default_instance_;
  delete NtfCurAuctionInfoCCmd_reflection_;
  delete NtfOverTakePriceCCmd::default_instance_;
  delete NtfOverTakePriceCCmd_reflection_;
  delete ReqMyTradedPriceCCmd::default_instance_;
  delete ReqMyTradedPriceCCmd_reflection_;
  delete NtfMaskPriceCCmd::default_instance_;
  delete NtfMaskPriceCCmd_reflection_;
  delete AuctionDialogCCmd::default_instance_;
  delete AuctionDialogCCmd_reflection_;
}

void protobuf_AddDesc_AuctionCCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021AuctionCCmd.proto\022\003Cmd\032\nxCmd.proto\032\017Sc"
    "eneItem.proto\"\337\001\n\023NtfAuctionStateCCmd\022,\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\021AUCTIONC_PROTO"
    "CMD\022B\n\005param\030\002 \001(\0162\022.Cmd.AuctionCParam:\037"
    "AUCTIONCPARAM_NTF_AUCTION_STATE\022!\n\005state"
    "\030\003 \001(\0162\022.Cmd.EAuctionState\022\017\n\007batchid\030\004 "
    "\001(\004\022\023\n\013auctiontime\030\005 \001(\r\022\r\n\005delay\030\006 \001(\010\""
    "\227\001\n\024OpenAuctionPanelCCmd\022,\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\021AUCTIONC_PROTOCMD\022C\n\005param\030"
    "\002 \001(\0162\022.Cmd.AuctionCParam: AUCTIONCPARAM"
    "_OPEN_AUCTION_PANEL\022\014\n\004open\030\003 \001(\010\"C\n\016Sig"
    "nUpItemInfo\022\016\n\006itemid\030\001 \001(\r\022\r\n\005price\030\002 \001"
    "(\r\022\022\n\007auction\030\003 \001(\r:\0010\"\253\001\n\021NtfSignUpInfo"
    "CCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021AUCTION"
    "C_PROTOCMD\022@\n\005param\030\002 \001(\0162\022.Cmd.AuctionC"
    "Param:\035AUCTIONCPARAM_NTF_SIGNUP_INFO\022&\n\t"
    "iteminfos\030\003 \003(\0132\023.Cmd.SignUpItemInfo\"\232\001\n"
    "\023NtfMySignUpInfoCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\021AUCTIONC_PROTOCMD\022C\n\005param\030\002 \001("
    "\0162\022.Cmd.AuctionCParam: AUCTIONCPARAM_NTF"
    "_MY_SIGNUP_INFO\022\020\n\010signuped\030\004 \003(\r\"\276\001\n\016Si"
    "gnUpItemCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\021AUCTIONC_PROTOCMD\022<\n\005param\030\002 \001(\0162\022.Cmd."
    "AuctionCParam:\031AUCTIONCPARAM_SIGNUP_ITEM"
    "\022%\n\010iteminfo\030\003 \001(\0132\023.Cmd.SignUpItemInfo\022"
    "\013\n\003ret\030\004 \001(\010\022\014\n\004guid\030\005 \001(\t\"\221\002\n\017AuctionIt"
    "emInfo\022\016\n\006itemid\030\001 \001(\r\022\r\n\005price\030\002 \001(\r\022\016\n"
    "\006seller\030\003 \001(\t\022\020\n\010sellerid\030\004 \001(\004\022#\n\006resul"
    "t\030\005 \001(\0162\023.Cmd.EAuctionResult\022\022\n\npeople_c"
    "nt\030\006 \001(\r\022\023\n\013trade_price\030\007 \001(\004\022\024\n\014auction"
    "_time\030\010 \001(\r\022\021\n\tcur_price\030\n \001(\004\022\022\n\nmask_p"
    "rice\030\013 \001(\r\022\021\n\tsignup_id\030\014 \001(\004\022\037\n\010itemdat"
    "a\030\r \001(\0132\r.Cmd.ItemData\"\277\001\n\022NtfAuctionInf"
    "oCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021AUCTIO"
    "NC_PROTOCMD\022A\n\005param\030\002 \001(\0162\022.Cmd.Auction"
    "CParam:\036AUCTIONCPARAM_NTF_AUCTION_INFO\022\'"
    "\n\titeminfos\030\003 \003(\0132\024.Cmd.AuctionItemInfo\022"
    "\017\n\007batchid\030\004 \001(\004\"\304\001\n\025UpdateAuctionInfoCC"
    "md\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021AUCTIONC_"
    "PROTOCMD\022D\n\005param\030\002 \001(\0162\022.Cmd.AuctionCPa"
    "ram:!AUCTIONCPARAM_UPDATE_AUCTION_INFO\022&"
    "\n\010iteminfo\030\003 \001(\0132\024.Cmd.AuctionItemInfo\022\017"
    "\n\007batchid\030\004 \001(\004\"\234\001\n\020FlowingWaterInfo\022\014\n\004"
    "time\030\001 \001(\r\022 \n\005event\030\002 \001(\0162\021.Cmd.AuctionE"
    "vent\022\r\n\005price\030\003 \001(\004\022\023\n\013player_name\030\004 \001(\t"
    "\022\016\n\006zoneid\030\005 \001(\r\022\021\n\tmax_price\030\006 \001(\010\022\021\n\tp"
    "layer_id\030\007 \001(\004\"\212\002\n\032ReqAuctionFlowingWate"
    "rCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021AUCTIO"
    "NC_PROTOCMD\022I\n\005param\030\002 \001(\0162\022.Cmd.Auction"
    "CParam:&AUCTIONCPARAM_REQ_AUCTION_FLOWIN"
    "GWATER\022\017\n\007batchid\030\003 \001(\004\022\016\n\006itemid\030\004 \001(\r\022"
    "\022\n\npage_index\030\005 \001(\r\022+\n\014flowingwater\030\006 \003("
    "\0132\025.Cmd.FlowingWaterInfo\022\021\n\tsignup_id\030\007 "
    "\001(\004\"\374\001\n\035UpdateAuctionFlowingWaterCCmd\022,\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\021AUCTIONC_PROTO"
    "CMD\022L\n\005param\030\002 \001(\0162\022.Cmd.AuctionCParam:)"
    "AUCTIONCPARAM_UPDATE_AUCTION_FLOWINGWATE"
    "R\022\017\n\007batchid\030\003 \001(\004\022\016\n\006itemid\030\004 \001(\r\022+\n\014fl"
    "owingwater\030\005 \001(\0132\025.Cmd.FlowingWaterInfo\022"
    "\021\n\tsignup_id\030\006 \001(\004\"\216\001\n\026ReqLastAuctionInf"
    "oCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021AUCTIO"
    "NC_PROTOCMD\022F\n\005param\030\002 \001(\0162\022.Cmd.Auction"
    "CParam:#AUCTIONCPARAM_REQ_LAST_AUCTION_I"
    "NFO\"\324\001\n\016OfferPriceCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\021AUCTIONC_PROTOCMD\022<\n\005param\030\002 "
    "\001(\0162\022.Cmd.AuctionCParam:\031AUCTIONCPARAM_O"
    "FFER_PRICE\022\016\n\006itemid\030\003 \001(\r\022\021\n\tmax_price\030"
    "\004 \001(\004\022\021\n\tadd_price\030\005 \001(\004\022\r\n\005level\030\006 \001(\r\022"
    "\021\n\tsignup_id\030\007 \001(\004\"\276\002\n\rAuctionRecord\022\n\n\002"
    "id\030\001 \001(\004\022\036\n\004type\030\002 \001(\0162\020.Cmd.ERecordType"
    "\022,\n\013take_status\030\003 \001(\0162\027.Cmd.EAuctionTake"
    "Status\022\016\n\006itemid\030\004 \001(\r\022\r\n\005price\030\005 \001(\004\022\016\n"
    "\006seller\030\006 \001(\t\022\r\n\005buyer\030\007 \001(\t\022\016\n\006zoneid\030\010"
    " \001(\r\022\022\n\ncost_money\030\t \001(\004\022\021\n\tget_money\030\n "
    "\001(\004\022\013\n\003tax\030\013 \001(\004\022\017\n\007batchid\030\014 \001(\004\022\014\n\004tim"
    "e\030\r \001(\r\022\021\n\tsignup_id\030\016 \001(\004\022\037\n\010itemdata\030\017"
    " \001(\0132\r.Cmd.ItemData\"\325\001\n\024ReqAuctionRecord"
    "CCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021AUCTION"
    "C_PROTOCMD\022C\n\005param\030\002 \001(\0162\022.Cmd.AuctionC"
    "Param: AUCTIONCPARAM_REQ_AUCTION_RECORD\022"
    "\r\n\005index\030\003 \001(\r\022\026\n\016total_page_cnt\030\004 \001(\004\022#"
    "\n\007records\030\005 \003(\0132\022.Cmd.AuctionRecord\"\304\001\n\025"
    "TakeAuctionRecordCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\021AUCTIONC_PROTOCMD\022D\n\005param\030\002 \001"
    "(\0162\022.Cmd.AuctionCParam:!AUCTIONCPARAM_TA"
    "KE_AUCTION_RECORD\022\n\n\002id\030\003 \001(\004\022\036\n\004type\030\004 "
    "\001(\0162\020.Cmd.ERecordType\022\013\n\003ret\030\005 \001(\010\"\222\001\n\021N"
    "tfCanTakeCntCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\021AUCTIONC_PROTOCMD\022@\n\005param\030\002 \001(\0162\022."
    "Cmd.AuctionCParam:\035AUCTIONCPARAM_NTF_CAN"
    "TAKE_CNT\022\r\n\005count\030\003 \001(\r\"\315\001\n\023NtfMyOfferPr"
    "iceCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021AUCT"
    "IONC_PROTOCMD\022B\n\005param\030\002 \001(\0162\022.Cmd.Aucti"
    "onCParam:\037AUCTIONCPARAM_NTF_MY_OFFERPRIC"
    "E\022\017\n\007batchid\030\003 \001(\004\022\016\n\006itemid\030\004 \001(\r\022\020\n\010my"
    "_price\030\005 \001(\004\022\021\n\tsignup_id\030\006 \001(\004\"\227\002\n\026NtfN"
    "extAuctionInfoCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\021AUCTIONC_PROTOCMD\022F\n\005param\030\002 \001(\0162"
    "\022.Cmd.AuctionCParam:#AUCTIONCPARAM_NTF_N"
    "EXT_AUCTION_INFO\022\017\n\007batchid\030\003 \001(\004\022\016\n\006ite"
    "mid\030\004 \001(\r\022\023\n\013last_itemid\030\005 \001(\r\022\022\n\nbase_p"
    "rice\030\006 \001(\004\022\022\n\nstart_time\030\007 \001(\r\022\021\n\tsignup"
    "_id\030\010 \001(\004\022\026\n\016last_signup_id\030\t \001(\004\"\205\001\n\022Re"
    "qAuctionInfoCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\021AUCTIONC_PROTOCMD\022A\n\005param\030\002 \001(\0162\022."
    "Cmd.AuctionCParam:\036AUCTIONCPARAM_REQ_ACU"
    "TION_INFO\"\234\001\n\025NtfCurAuctionInfoCCmd\022,\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\021AUCTIONC_PROTOCM"
    "D\022E\n\005param\030\002 \001(\0162\022.Cmd.AuctionCParam:\"AU"
    "CTIONCPARAM_NTF_CUR_AUCTION_INFO\022\016\n\006item"
    "id\030\003 \001(\r\"\211\001\n\024NtfOverTakePriceCCmd\022,\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\021AUCTIONC_PROTOCMD\022"
    "C\n\005param\030\002 \001(\0162\022.Cmd.AuctionCParam: AUCT"
    "IONCPARAM_NTF_OVERTAKE_PRICE\"\320\001\n\024ReqMyTr"
    "adedPriceCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\021AUCTIONC_PROTOCMD\022D\n\005param\030\002 \001(\0162\022.Cmd"
    ".AuctionCParam:!AUCTIONCPARAM_REQ_MY_TRA"
    "DED_PRICE\022\017\n\007batchid\030\003 \001(\004\022\016\n\006itemid\030\004 \001"
    "(\r\022\020\n\010my_price\030\005 \001(\004\022\021\n\tsignup_id\030\006 \001(\004\""
    "\311\001\n\020NtfMaskPriceCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\021AUCTIONC_PROTOCMD\022\?\n\005param\030\002 \001("
    "\0162\022.Cmd.AuctionCParam:\034AUCTIONCPARAM_NTF"
    "_MASK_PRICE\022\017\n\007batchid\030\003 \001(\004\022\016\n\006itemid\030\004"
    " \001(\r\022\022\n\nmask_price\030\005 \001(\r\022\021\n\tsignup_id\030\006 "
    "\001(\004\"\323\001\n\021AuctionDialogCCmd\022,\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\021AUCTIONC_PROTOCMD\022>\n\005param"
    "\030\002 \001(\0162\022.Cmd.AuctionCParam:\033AUTIONCPARAM"
    "_AUCTION_DIALOG\0220\n\004type\030\003 \001(\0162\020.Cmd.EDia"
    "logType:\020EDialogType_None\022\016\n\006msg_id\030\004 \001("
    "\004\022\016\n\006params\030\005 \003(\t*\312\006\n\rAuctionCParam\022#\n\037A"
    "UCTIONCPARAM_NTF_AUCTION_STATE\020\001\022$\n AUCT"
    "IONCPARAM_OPEN_AUCTION_PANEL\020\002\022!\n\035AUCTIO"
    "NCPARAM_NTF_SIGNUP_INFO\020\003\022\"\n\036AUCTIONCPAR"
    "AM_NTF_AUCTION_INFO\020\004\022%\n!AUCTIONCPARAM_U"
    "PDATE_AUCTION_INFO\020\005\022*\n&AUCTIONCPARAM_RE"
    "Q_AUCTION_FLOWINGWATER\020\006\022-\n)AUCTIONCPARA"
    "M_UPDATE_AUCTION_FLOWINGWATER\020\007\022\'\n#AUCTI"
    "ONCPARAM_REQ_LAST_AUCTION_INFO\020\010\022\035\n\031AUCT"
    "IONCPARAM_OFFER_PRICE\020\t\022$\n AUCTIONCPARAM"
    "_REQ_AUCTION_RECORD\020\n\022%\n!AUCTIONCPARAM_T"
    "AKE_AUCTION_RECORD\020\013\022\035\n\031AUCTIONCPARAM_SI"
    "GNUP_ITEM\020\014\022!\n\035AUCTIONCPARAM_NTF_CANTAKE"
    "_CNT\020\r\022$\n AUCTIONCPARAM_NTF_MY_SIGNUP_IN"
    "FO\020\016\022#\n\037AUCTIONCPARAM_NTF_MY_OFFERPRICE\020"
    "\017\022\'\n#AUCTIONCPARAM_NTF_NEXT_AUCTION_INFO"
    "\020\020\022\"\n\036AUCTIONCPARAM_REQ_ACUTION_INFO\020\021\022&"
    "\n\"AUCTIONCPARAM_NTF_CUR_AUCTION_INFO\020\022\022$"
    "\n AUCTIONCPARAM_NTF_OVERTAKE_PRICE\020\023\022%\n!"
    "AUCTIONCPARAM_REQ_MY_TRADED_PRICE\020\024\022 \n\034A"
    "UCTIONCPARAM_NTF_MASK_PRICE\020\025\022\037\n\033AUTIONC"
    "PARAM_AUCTION_DIALOG\020\026*\277\001\n\rEAuctionState"
    "\022\027\n\023EAuctionState_Close\020\001\022\030\n\024EAuctionSta"
    "te_SignUp\020\002\022\036\n\032EAuctionState_SignUpVerif"
    "y\020\003\022\"\n\036EAuctionState_AuctionPublicity\020\006\022"
    "\031\n\025EAuctionState_Auction\020\004\022\034\n\030EAuctionSt"
    "ate_AuctionEnd\020\005*{\n\016EAuctionResult\022\027\n\023EA"
    "uctionResult_None\020\000\022\027\n\023EAuctionResult_Fa"
    "il\020\001\022\031\n\025EAuctionResult_Sucess\020\002\022\034\n\030EAuct"
    "ionResult_AtAuction\020\003*\345\001\n\014AuctionEvent\022\025"
    "\n\021AuctionEvent_None\020\000\022\026\n\022AuctionEvent_St"
    "art\020\001\022\033\n\027AuctionEvent_OfferPrice\020\002\022\030\n\024Au"
    "ctionEvent_Result1\020\003\022\030\n\024AuctionEvent_Res"
    "ult2\020\004\022\030\n\024AuctionEvent_Result3\020\005\022\036\n\032Auct"
    "ionEvent_ResultSuccess\020\006\022\033\n\027AuctionEvent"
    "_ResultFail\020\007*\364\002\n\013ERecordType\022\026\n\022ERecord"
    "Type_SignUp\020\001\022\035\n\031ERecordType_SignUpSucce"
    "ss\020\002\022\032\n\026ERecordType_SignUpFail\020\003\022\032\n\026ERec"
    "ordType_SellSucess\020\004\022\030\n\024ERecordType_Sell"
    "Fail\020\005\022\036\n\032ERecordType_SellSucessPass\020\006\022 "
    "\n\034ERecordType_SellSucessNoPass\020\007\022\035\n\031ERec"
    "ordType_MaxOfferPrice\020\010\022\035\n\031ERecordType_O"
    "verTakePrice\020\t\022\032\n\026ERecordType_BuySuccess"
    "\020\n\022\036\n\032ERecordType_BuySuccessPass\020\013\022 \n\034ER"
    "ecordType_BuySuccessNoPass\020\014*n\n\022EAuction"
    "TakeStatus\022\033\n\027EAuctionTakeStatus_None\020\000\022"
    "\036\n\032EAuctionTakeStatus_CanTake\020\001\022\033\n\027EAuct"
    "ionTakeStatus_Took\020\002*\237\001\n\013EDialogType\022\024\n\020"
    "EDialogType_None\020\000\022\034\n\030EDialogType_Auctio"
    "nStart\020\001\022\036\n\032EDialogType_AuctionSuccess\020\002"
    "\022\033\n\027EDialogType_AuctionFail\020\003\022\037\n\033EDialog"
    "Type_AuctionPubicity\020\004", 7222);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AuctionCCmd.proto", &protobuf_RegisterTypes);
  NtfAuctionStateCCmd::default_instance_ = new NtfAuctionStateCCmd();
  OpenAuctionPanelCCmd::default_instance_ = new OpenAuctionPanelCCmd();
  SignUpItemInfo::default_instance_ = new SignUpItemInfo();
  NtfSignUpInfoCCmd::default_instance_ = new NtfSignUpInfoCCmd();
  NtfMySignUpInfoCCmd::default_instance_ = new NtfMySignUpInfoCCmd();
  SignUpItemCCmd::default_instance_ = new SignUpItemCCmd();
  AuctionItemInfo::default_instance_ = new AuctionItemInfo();
  NtfAuctionInfoCCmd::default_instance_ = new NtfAuctionInfoCCmd();
  UpdateAuctionInfoCCmd::default_instance_ = new UpdateAuctionInfoCCmd();
  FlowingWaterInfo::default_instance_ = new FlowingWaterInfo();
  ReqAuctionFlowingWaterCCmd::default_instance_ = new ReqAuctionFlowingWaterCCmd();
  UpdateAuctionFlowingWaterCCmd::default_instance_ = new UpdateAuctionFlowingWaterCCmd();
  ReqLastAuctionInfoCCmd::default_instance_ = new ReqLastAuctionInfoCCmd();
  OfferPriceCCmd::default_instance_ = new OfferPriceCCmd();
  AuctionRecord::default_instance_ = new AuctionRecord();
  ReqAuctionRecordCCmd::default_instance_ = new ReqAuctionRecordCCmd();
  TakeAuctionRecordCCmd::default_instance_ = new TakeAuctionRecordCCmd();
  NtfCanTakeCntCCmd::default_instance_ = new NtfCanTakeCntCCmd();
  NtfMyOfferPriceCCmd::default_instance_ = new NtfMyOfferPriceCCmd();
  NtfNextAuctionInfoCCmd::default_instance_ = new NtfNextAuctionInfoCCmd();
  ReqAuctionInfoCCmd::default_instance_ = new ReqAuctionInfoCCmd();
  NtfCurAuctionInfoCCmd::default_instance_ = new NtfCurAuctionInfoCCmd();
  NtfOverTakePriceCCmd::default_instance_ = new NtfOverTakePriceCCmd();
  ReqMyTradedPriceCCmd::default_instance_ = new ReqMyTradedPriceCCmd();
  NtfMaskPriceCCmd::default_instance_ = new NtfMaskPriceCCmd();
  AuctionDialogCCmd::default_instance_ = new AuctionDialogCCmd();
  NtfAuctionStateCCmd::default_instance_->InitAsDefaultInstance();
  OpenAuctionPanelCCmd::default_instance_->InitAsDefaultInstance();
  SignUpItemInfo::default_instance_->InitAsDefaultInstance();
  NtfSignUpInfoCCmd::default_instance_->InitAsDefaultInstance();
  NtfMySignUpInfoCCmd::default_instance_->InitAsDefaultInstance();
  SignUpItemCCmd::default_instance_->InitAsDefaultInstance();
  AuctionItemInfo::default_instance_->InitAsDefaultInstance();
  NtfAuctionInfoCCmd::default_instance_->InitAsDefaultInstance();
  UpdateAuctionInfoCCmd::default_instance_->InitAsDefaultInstance();
  FlowingWaterInfo::default_instance_->InitAsDefaultInstance();
  ReqAuctionFlowingWaterCCmd::default_instance_->InitAsDefaultInstance();
  UpdateAuctionFlowingWaterCCmd::default_instance_->InitAsDefaultInstance();
  ReqLastAuctionInfoCCmd::default_instance_->InitAsDefaultInstance();
  OfferPriceCCmd::default_instance_->InitAsDefaultInstance();
  AuctionRecord::default_instance_->InitAsDefaultInstance();
  ReqAuctionRecordCCmd::default_instance_->InitAsDefaultInstance();
  TakeAuctionRecordCCmd::default_instance_->InitAsDefaultInstance();
  NtfCanTakeCntCCmd::default_instance_->InitAsDefaultInstance();
  NtfMyOfferPriceCCmd::default_instance_->InitAsDefaultInstance();
  NtfNextAuctionInfoCCmd::default_instance_->InitAsDefaultInstance();
  ReqAuctionInfoCCmd::default_instance_->InitAsDefaultInstance();
  NtfCurAuctionInfoCCmd::default_instance_->InitAsDefaultInstance();
  NtfOverTakePriceCCmd::default_instance_->InitAsDefaultInstance();
  ReqMyTradedPriceCCmd::default_instance_->InitAsDefaultInstance();
  NtfMaskPriceCCmd::default_instance_->InitAsDefaultInstance();
  AuctionDialogCCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AuctionCCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AuctionCCmd_2eproto {
  StaticDescriptorInitializer_AuctionCCmd_2eproto() {
    protobuf_AddDesc_AuctionCCmd_2eproto();
  }
} static_descriptor_initializer_AuctionCCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* AuctionCParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionCParam_descriptor_;
}
bool AuctionCParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAuctionState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAuctionState_descriptor_;
}
bool EAuctionState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAuctionResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAuctionResult_descriptor_;
}
bool EAuctionResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AuctionEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionEvent_descriptor_;
}
bool AuctionEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERecordType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERecordType_descriptor_;
}
bool ERecordType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAuctionTakeStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAuctionTakeStatus_descriptor_;
}
bool EAuctionTakeStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDialogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDialogType_descriptor_;
}
bool EDialogType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int NtfAuctionStateCCmd::kCmdFieldNumber;
const int NtfAuctionStateCCmd::kParamFieldNumber;
const int NtfAuctionStateCCmd::kStateFieldNumber;
const int NtfAuctionStateCCmd::kBatchidFieldNumber;
const int NtfAuctionStateCCmd::kAuctiontimeFieldNumber;
const int NtfAuctionStateCCmd::kDelayFieldNumber;
#endif  // !_MSC_VER

NtfAuctionStateCCmd::NtfAuctionStateCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfAuctionStateCCmd)
}

void NtfAuctionStateCCmd::InitAsDefaultInstance() {
}

NtfAuctionStateCCmd::NtfAuctionStateCCmd(const NtfAuctionStateCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfAuctionStateCCmd)
}

void NtfAuctionStateCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 1;
  state_ = 1;
  batchid_ = GOOGLE_ULONGLONG(0);
  auctiontime_ = 0u;
  delay_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfAuctionStateCCmd::~NtfAuctionStateCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfAuctionStateCCmd)
  SharedDtor();
}

void NtfAuctionStateCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfAuctionStateCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfAuctionStateCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfAuctionStateCCmd_descriptor_;
}

const NtfAuctionStateCCmd& NtfAuctionStateCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

NtfAuctionStateCCmd* NtfAuctionStateCCmd::default_instance_ = NULL;

NtfAuctionStateCCmd* NtfAuctionStateCCmd::New() const {
  return new NtfAuctionStateCCmd;
}

void NtfAuctionStateCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NtfAuctionStateCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(auctiontime_, delay_);
    cmd_ = 63;
    param_ = 1;
    state_ = 1;
    batchid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfAuctionStateCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfAuctionStateCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_AUCTION_STATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .Cmd.EAuctionState state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAuctionState_IsValid(value)) {
            set_state(static_cast< ::Cmd::EAuctionState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_batchid;
        break;
      }

      // optional uint64 batchid = 4;
      case 4: {
        if (tag == 32) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_auctiontime;
        break;
      }

      // optional uint32 auctiontime = 5;
      case 5: {
        if (tag == 40) {
         parse_auctiontime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auctiontime_)));
          set_has_auctiontime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_delay;
        break;
      }

      // optional bool delay = 6;
      case 6: {
        if (tag == 48) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfAuctionStateCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfAuctionStateCCmd)
  return false;
#undef DO_
}

void NtfAuctionStateCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfAuctionStateCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_AUCTION_STATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EAuctionState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional uint64 batchid = 4;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->batchid(), output);
  }

  // optional uint32 auctiontime = 5;
  if (has_auctiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->auctiontime(), output);
  }

  // optional bool delay = 6;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfAuctionStateCCmd)
}

::google::protobuf::uint8* NtfAuctionStateCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfAuctionStateCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_AUCTION_STATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EAuctionState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // optional uint64 batchid = 4;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->batchid(), target);
  }

  // optional uint32 auctiontime = 5;
  if (has_auctiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->auctiontime(), target);
  }

  // optional bool delay = 6;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfAuctionStateCCmd)
  return target;
}

int NtfAuctionStateCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_AUCTION_STATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EAuctionState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint64 batchid = 4;
    if (has_batchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batchid());
    }

    // optional uint32 auctiontime = 5;
    if (has_auctiontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auctiontime());
    }

    // optional bool delay = 6;
    if (has_delay()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfAuctionStateCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfAuctionStateCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfAuctionStateCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfAuctionStateCCmd::MergeFrom(const NtfAuctionStateCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
    if (from.has_auctiontime()) {
      set_auctiontime(from.auctiontime());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfAuctionStateCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfAuctionStateCCmd::CopyFrom(const NtfAuctionStateCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfAuctionStateCCmd::IsInitialized() const {

  return true;
}

void NtfAuctionStateCCmd::Swap(NtfAuctionStateCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(state_, other->state_);
    std::swap(batchid_, other->batchid_);
    std::swap(auctiontime_, other->auctiontime_);
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfAuctionStateCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfAuctionStateCCmd_descriptor_;
  metadata.reflection = NtfAuctionStateCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenAuctionPanelCCmd::kCmdFieldNumber;
const int OpenAuctionPanelCCmd::kParamFieldNumber;
const int OpenAuctionPanelCCmd::kOpenFieldNumber;
#endif  // !_MSC_VER

OpenAuctionPanelCCmd::OpenAuctionPanelCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OpenAuctionPanelCCmd)
}

void OpenAuctionPanelCCmd::InitAsDefaultInstance() {
}

OpenAuctionPanelCCmd::OpenAuctionPanelCCmd(const OpenAuctionPanelCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OpenAuctionPanelCCmd)
}

void OpenAuctionPanelCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 2;
  open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenAuctionPanelCCmd::~OpenAuctionPanelCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.OpenAuctionPanelCCmd)
  SharedDtor();
}

void OpenAuctionPanelCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenAuctionPanelCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenAuctionPanelCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenAuctionPanelCCmd_descriptor_;
}

const OpenAuctionPanelCCmd& OpenAuctionPanelCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

OpenAuctionPanelCCmd* OpenAuctionPanelCCmd::default_instance_ = NULL;

OpenAuctionPanelCCmd* OpenAuctionPanelCCmd::New() const {
  return new OpenAuctionPanelCCmd;
}

void OpenAuctionPanelCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 63;
    param_ = 2;
    open_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenAuctionPanelCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OpenAuctionPanelCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_OPEN_AUCTION_PANEL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_open;
        break;
      }

      // optional bool open = 3;
      case 3: {
        if (tag == 24) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OpenAuctionPanelCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OpenAuctionPanelCCmd)
  return false;
#undef DO_
}

void OpenAuctionPanelCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OpenAuctionPanelCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_OPEN_AUCTION_PANEL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OpenAuctionPanelCCmd)
}

::google::protobuf::uint8* OpenAuctionPanelCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OpenAuctionPanelCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_OPEN_AUCTION_PANEL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OpenAuctionPanelCCmd)
  return target;
}

int OpenAuctionPanelCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_OPEN_AUCTION_PANEL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool open = 3;
    if (has_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenAuctionPanelCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenAuctionPanelCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenAuctionPanelCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenAuctionPanelCCmd::MergeFrom(const OpenAuctionPanelCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenAuctionPanelCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenAuctionPanelCCmd::CopyFrom(const OpenAuctionPanelCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenAuctionPanelCCmd::IsInitialized() const {

  return true;
}

void OpenAuctionPanelCCmd::Swap(OpenAuctionPanelCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenAuctionPanelCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenAuctionPanelCCmd_descriptor_;
  metadata.reflection = OpenAuctionPanelCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignUpItemInfo::kItemidFieldNumber;
const int SignUpItemInfo::kPriceFieldNumber;
const int SignUpItemInfo::kAuctionFieldNumber;
#endif  // !_MSC_VER

SignUpItemInfo::SignUpItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SignUpItemInfo)
}

void SignUpItemInfo::InitAsDefaultInstance() {
}

SignUpItemInfo::SignUpItemInfo(const SignUpItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SignUpItemInfo)
}

void SignUpItemInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  price_ = 0u;
  auction_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignUpItemInfo::~SignUpItemInfo() {
  // @@protoc_insertion_point(destructor:Cmd.SignUpItemInfo)
  SharedDtor();
}

void SignUpItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignUpItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignUpItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignUpItemInfo_descriptor_;
}

const SignUpItemInfo& SignUpItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

SignUpItemInfo* SignUpItemInfo::default_instance_ = NULL;

SignUpItemInfo* SignUpItemInfo::New() const {
  return new SignUpItemInfo;
}

void SignUpItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SignUpItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, auction_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignUpItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SignUpItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // optional uint32 price = 2;
      case 2: {
        if (tag == 16) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_auction;
        break;
      }

      // optional uint32 auction = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_auction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auction_)));
          set_has_auction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SignUpItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SignUpItemInfo)
  return false;
#undef DO_
}

void SignUpItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SignUpItemInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->price(), output);
  }

  // optional uint32 auction = 3 [default = 0];
  if (has_auction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->auction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SignUpItemInfo)
}

::google::protobuf::uint8* SignUpItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SignUpItemInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->price(), target);
  }

  // optional uint32 auction = 3 [default = 0];
  if (has_auction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->auction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SignUpItemInfo)
  return target;
}

int SignUpItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 auction = 3 [default = 0];
    if (has_auction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignUpItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignUpItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignUpItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignUpItemInfo::MergeFrom(const SignUpItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_auction()) {
      set_auction(from.auction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignUpItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignUpItemInfo::CopyFrom(const SignUpItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignUpItemInfo::IsInitialized() const {

  return true;
}

void SignUpItemInfo::Swap(SignUpItemInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(price_, other->price_);
    std::swap(auction_, other->auction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignUpItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignUpItemInfo_descriptor_;
  metadata.reflection = SignUpItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfSignUpInfoCCmd::kCmdFieldNumber;
const int NtfSignUpInfoCCmd::kParamFieldNumber;
const int NtfSignUpInfoCCmd::kIteminfosFieldNumber;
#endif  // !_MSC_VER

NtfSignUpInfoCCmd::NtfSignUpInfoCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfSignUpInfoCCmd)
}

void NtfSignUpInfoCCmd::InitAsDefaultInstance() {
}

NtfSignUpInfoCCmd::NtfSignUpInfoCCmd(const NtfSignUpInfoCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfSignUpInfoCCmd)
}

void NtfSignUpInfoCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfSignUpInfoCCmd::~NtfSignUpInfoCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfSignUpInfoCCmd)
  SharedDtor();
}

void NtfSignUpInfoCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfSignUpInfoCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfSignUpInfoCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfSignUpInfoCCmd_descriptor_;
}

const NtfSignUpInfoCCmd& NtfSignUpInfoCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

NtfSignUpInfoCCmd* NtfSignUpInfoCCmd::default_instance_ = NULL;

NtfSignUpInfoCCmd* NtfSignUpInfoCCmd::New() const {
  return new NtfSignUpInfoCCmd;
}

void NtfSignUpInfoCCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 63;
    param_ = 3;
  }
  iteminfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfSignUpInfoCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfSignUpInfoCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_SIGNUP_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_iteminfos;
        break;
      }

      // repeated .Cmd.SignUpItemInfo iteminfos = 3;
      case 3: {
        if (tag == 26) {
         parse_iteminfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_iteminfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfSignUpInfoCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfSignUpInfoCCmd)
  return false;
#undef DO_
}

void NtfSignUpInfoCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfSignUpInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_SIGNUP_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SignUpItemInfo iteminfos = 3;
  for (int i = 0; i < this->iteminfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->iteminfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfSignUpInfoCCmd)
}

::google::protobuf::uint8* NtfSignUpInfoCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfSignUpInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_SIGNUP_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SignUpItemInfo iteminfos = 3;
  for (int i = 0; i < this->iteminfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->iteminfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfSignUpInfoCCmd)
  return target;
}

int NtfSignUpInfoCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_SIGNUP_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.SignUpItemInfo iteminfos = 3;
  total_size += 1 * this->iteminfos_size();
  for (int i = 0; i < this->iteminfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfSignUpInfoCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfSignUpInfoCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfSignUpInfoCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfSignUpInfoCCmd::MergeFrom(const NtfSignUpInfoCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfos_.MergeFrom(from.iteminfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfSignUpInfoCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfSignUpInfoCCmd::CopyFrom(const NtfSignUpInfoCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfSignUpInfoCCmd::IsInitialized() const {

  return true;
}

void NtfSignUpInfoCCmd::Swap(NtfSignUpInfoCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    iteminfos_.Swap(&other->iteminfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfSignUpInfoCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfSignUpInfoCCmd_descriptor_;
  metadata.reflection = NtfSignUpInfoCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfMySignUpInfoCCmd::kCmdFieldNumber;
const int NtfMySignUpInfoCCmd::kParamFieldNumber;
const int NtfMySignUpInfoCCmd::kSignupedFieldNumber;
#endif  // !_MSC_VER

NtfMySignUpInfoCCmd::NtfMySignUpInfoCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfMySignUpInfoCCmd)
}

void NtfMySignUpInfoCCmd::InitAsDefaultInstance() {
}

NtfMySignUpInfoCCmd::NtfMySignUpInfoCCmd(const NtfMySignUpInfoCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfMySignUpInfoCCmd)
}

void NtfMySignUpInfoCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 14;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfMySignUpInfoCCmd::~NtfMySignUpInfoCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfMySignUpInfoCCmd)
  SharedDtor();
}

void NtfMySignUpInfoCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfMySignUpInfoCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfMySignUpInfoCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfMySignUpInfoCCmd_descriptor_;
}

const NtfMySignUpInfoCCmd& NtfMySignUpInfoCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

NtfMySignUpInfoCCmd* NtfMySignUpInfoCCmd::default_instance_ = NULL;

NtfMySignUpInfoCCmd* NtfMySignUpInfoCCmd::New() const {
  return new NtfMySignUpInfoCCmd;
}

void NtfMySignUpInfoCCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 63;
    param_ = 14;
  }
  signuped_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfMySignUpInfoCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfMySignUpInfoCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MY_SIGNUP_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_signuped;
        break;
      }

      // repeated uint32 signuped = 4;
      case 4: {
        if (tag == 32) {
         parse_signuped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_signuped())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_signuped())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_signuped;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfMySignUpInfoCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfMySignUpInfoCCmd)
  return false;
#undef DO_
}

void NtfMySignUpInfoCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfMySignUpInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MY_SIGNUP_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 signuped = 4;
  for (int i = 0; i < this->signuped_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->signuped(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfMySignUpInfoCCmd)
}

::google::protobuf::uint8* NtfMySignUpInfoCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfMySignUpInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MY_SIGNUP_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 signuped = 4;
  for (int i = 0; i < this->signuped_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->signuped(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfMySignUpInfoCCmd)
  return target;
}

int NtfMySignUpInfoCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MY_SIGNUP_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 signuped = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->signuped_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->signuped(i));
    }
    total_size += 1 * this->signuped_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfMySignUpInfoCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfMySignUpInfoCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfMySignUpInfoCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfMySignUpInfoCCmd::MergeFrom(const NtfMySignUpInfoCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  signuped_.MergeFrom(from.signuped_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfMySignUpInfoCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfMySignUpInfoCCmd::CopyFrom(const NtfMySignUpInfoCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfMySignUpInfoCCmd::IsInitialized() const {

  return true;
}

void NtfMySignUpInfoCCmd::Swap(NtfMySignUpInfoCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    signuped_.Swap(&other->signuped_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfMySignUpInfoCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfMySignUpInfoCCmd_descriptor_;
  metadata.reflection = NtfMySignUpInfoCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignUpItemCCmd::kCmdFieldNumber;
const int SignUpItemCCmd::kParamFieldNumber;
const int SignUpItemCCmd::kIteminfoFieldNumber;
const int SignUpItemCCmd::kRetFieldNumber;
const int SignUpItemCCmd::kGuidFieldNumber;
#endif  // !_MSC_VER

SignUpItemCCmd::SignUpItemCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SignUpItemCCmd)
}

void SignUpItemCCmd::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::Cmd::SignUpItemInfo*>(&::Cmd::SignUpItemInfo::default_instance());
}

SignUpItemCCmd::SignUpItemCCmd(const SignUpItemCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SignUpItemCCmd)
}

void SignUpItemCCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 12;
  iteminfo_ = NULL;
  ret_ = false;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignUpItemCCmd::~SignUpItemCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SignUpItemCCmd)
  SharedDtor();
}

void SignUpItemCCmd::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void SignUpItemCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignUpItemCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignUpItemCCmd_descriptor_;
}

const SignUpItemCCmd& SignUpItemCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

SignUpItemCCmd* SignUpItemCCmd::default_instance_ = NULL;

SignUpItemCCmd* SignUpItemCCmd::New() const {
  return new SignUpItemCCmd;
}

void SignUpItemCCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 63;
    param_ = 12;
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::Cmd::SignUpItemInfo::Clear();
    }
    ret_ = false;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignUpItemCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SignUpItemCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_SIGNUP_ITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_iteminfo;
        break;
      }

      // optional .Cmd.SignUpItemInfo iteminfo = 3;
      case 3: {
        if (tag == 26) {
         parse_iteminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional bool ret = 4;
      case 4: {
        if (tag == 32) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_guid;
        break;
      }

      // optional string guid = 5;
      case 5: {
        if (tag == 42) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SignUpItemCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SignUpItemCCmd)
  return false;
#undef DO_
}

void SignUpItemCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SignUpItemCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_SIGNUP_ITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SignUpItemInfo iteminfo = 3;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->iteminfo(), output);
  }

  // optional bool ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ret(), output);
  }

  // optional string guid = 5;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SignUpItemCCmd)
}

::google::protobuf::uint8* SignUpItemCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SignUpItemCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_SIGNUP_ITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SignUpItemInfo iteminfo = 3;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->iteminfo(), target);
  }

  // optional bool ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ret(), target);
  }

  // optional string guid = 5;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SignUpItemCCmd)
  return target;
}

int SignUpItemCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_SIGNUP_ITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SignUpItemInfo iteminfo = 3;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

    // optional bool ret = 4;
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // optional string guid = 5;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignUpItemCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignUpItemCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignUpItemCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignUpItemCCmd::MergeFrom(const SignUpItemCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::Cmd::SignUpItemInfo::MergeFrom(from.iteminfo());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignUpItemCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignUpItemCCmd::CopyFrom(const SignUpItemCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignUpItemCCmd::IsInitialized() const {

  return true;
}

void SignUpItemCCmd::Swap(SignUpItemCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(ret_, other->ret_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignUpItemCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignUpItemCCmd_descriptor_;
  metadata.reflection = SignUpItemCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionItemInfo::kItemidFieldNumber;
const int AuctionItemInfo::kPriceFieldNumber;
const int AuctionItemInfo::kSellerFieldNumber;
const int AuctionItemInfo::kSelleridFieldNumber;
const int AuctionItemInfo::kResultFieldNumber;
const int AuctionItemInfo::kPeopleCntFieldNumber;
const int AuctionItemInfo::kTradePriceFieldNumber;
const int AuctionItemInfo::kAuctionTimeFieldNumber;
const int AuctionItemInfo::kCurPriceFieldNumber;
const int AuctionItemInfo::kMaskPriceFieldNumber;
const int AuctionItemInfo::kSignupIdFieldNumber;
const int AuctionItemInfo::kItemdataFieldNumber;
#endif  // !_MSC_VER

AuctionItemInfo::AuctionItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AuctionItemInfo)
}

void AuctionItemInfo::InitAsDefaultInstance() {
  itemdata_ = const_cast< ::Cmd::ItemData*>(&::Cmd::ItemData::default_instance());
}

AuctionItemInfo::AuctionItemInfo(const AuctionItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AuctionItemInfo)
}

void AuctionItemInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemid_ = 0u;
  price_ = 0u;
  seller_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sellerid_ = GOOGLE_ULONGLONG(0);
  result_ = 0;
  people_cnt_ = 0u;
  trade_price_ = GOOGLE_ULONGLONG(0);
  auction_time_ = 0u;
  cur_price_ = GOOGLE_ULONGLONG(0);
  mask_price_ = 0u;
  signup_id_ = GOOGLE_ULONGLONG(0);
  itemdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionItemInfo::~AuctionItemInfo() {
  // @@protoc_insertion_point(destructor:Cmd.AuctionItemInfo)
  SharedDtor();
}

void AuctionItemInfo::SharedDtor() {
  if (seller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seller_;
  }
  if (this != default_instance_) {
    delete itemdata_;
  }
}

void AuctionItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionItemInfo_descriptor_;
}

const AuctionItemInfo& AuctionItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

AuctionItemInfo* AuctionItemInfo::default_instance_ = NULL;

AuctionItemInfo* AuctionItemInfo::New() const {
  return new AuctionItemInfo;
}

void AuctionItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuctionItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(itemid_, price_);
    ZR_(sellerid_, trade_price_);
    if (has_seller()) {
      if (seller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        seller_->clear();
      }
    }
    auction_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(mask_price_, signup_id_);
    cur_price_ = GOOGLE_ULONGLONG(0);
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AuctionItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // optional uint32 price = 2;
      case 2: {
        if (tag == 16) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_seller;
        break;
      }

      // optional string seller = 3;
      case 3: {
        if (tag == 26) {
         parse_seller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seller()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seller().data(), this->seller().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "seller");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sellerid;
        break;
      }

      // optional uint64 sellerid = 4;
      case 4: {
        if (tag == 32) {
         parse_sellerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sellerid_)));
          set_has_sellerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .Cmd.EAuctionResult result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAuctionResult_IsValid(value)) {
            set_result(static_cast< ::Cmd::EAuctionResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_people_cnt;
        break;
      }

      // optional uint32 people_cnt = 6;
      case 6: {
        if (tag == 48) {
         parse_people_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &people_cnt_)));
          set_has_people_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_trade_price;
        break;
      }

      // optional uint64 trade_price = 7;
      case 7: {
        if (tag == 56) {
         parse_trade_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trade_price_)));
          set_has_trade_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_auction_time;
        break;
      }

      // optional uint32 auction_time = 8;
      case 8: {
        if (tag == 64) {
         parse_auction_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auction_time_)));
          set_has_auction_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_cur_price;
        break;
      }

      // optional uint64 cur_price = 10;
      case 10: {
        if (tag == 80) {
         parse_cur_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_price_)));
          set_has_cur_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_mask_price;
        break;
      }

      // optional uint32 mask_price = 11;
      case 11: {
        if (tag == 88) {
         parse_mask_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_price_)));
          set_has_mask_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_signup_id;
        break;
      }

      // optional uint64 signup_id = 12;
      case 12: {
        if (tag == 96) {
         parse_signup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signup_id_)));
          set_has_signup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_itemdata;
        break;
      }

      // optional .Cmd.ItemData itemdata = 13;
      case 13: {
        if (tag == 106) {
         parse_itemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AuctionItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AuctionItemInfo)
  return false;
#undef DO_
}

void AuctionItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AuctionItemInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->price(), output);
  }

  // optional string seller = 3;
  if (has_seller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seller().data(), this->seller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seller");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->seller(), output);
  }

  // optional uint64 sellerid = 4;
  if (has_sellerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sellerid(), output);
  }

  // optional .Cmd.EAuctionResult result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

  // optional uint32 people_cnt = 6;
  if (has_people_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->people_cnt(), output);
  }

  // optional uint64 trade_price = 7;
  if (has_trade_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->trade_price(), output);
  }

  // optional uint32 auction_time = 8;
  if (has_auction_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->auction_time(), output);
  }

  // optional uint64 cur_price = 10;
  if (has_cur_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->cur_price(), output);
  }

  // optional uint32 mask_price = 11;
  if (has_mask_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->mask_price(), output);
  }

  // optional uint64 signup_id = 12;
  if (has_signup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->signup_id(), output);
  }

  // optional .Cmd.ItemData itemdata = 13;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->itemdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AuctionItemInfo)
}

::google::protobuf::uint8* AuctionItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AuctionItemInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->price(), target);
  }

  // optional string seller = 3;
  if (has_seller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seller().data(), this->seller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seller");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->seller(), target);
  }

  // optional uint64 sellerid = 4;
  if (has_sellerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sellerid(), target);
  }

  // optional .Cmd.EAuctionResult result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->result(), target);
  }

  // optional uint32 people_cnt = 6;
  if (has_people_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->people_cnt(), target);
  }

  // optional uint64 trade_price = 7;
  if (has_trade_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->trade_price(), target);
  }

  // optional uint32 auction_time = 8;
  if (has_auction_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->auction_time(), target);
  }

  // optional uint64 cur_price = 10;
  if (has_cur_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->cur_price(), target);
  }

  // optional uint32 mask_price = 11;
  if (has_mask_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->mask_price(), target);
  }

  // optional uint64 signup_id = 12;
  if (has_signup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->signup_id(), target);
  }

  // optional .Cmd.ItemData itemdata = 13;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->itemdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AuctionItemInfo)
  return target;
}

int AuctionItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional string seller = 3;
    if (has_seller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seller());
    }

    // optional uint64 sellerid = 4;
    if (has_sellerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sellerid());
    }

    // optional .Cmd.EAuctionResult result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 people_cnt = 6;
    if (has_people_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->people_cnt());
    }

    // optional uint64 trade_price = 7;
    if (has_trade_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trade_price());
    }

    // optional uint32 auction_time = 8;
    if (has_auction_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auction_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 cur_price = 10;
    if (has_cur_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_price());
    }

    // optional uint32 mask_price = 11;
    if (has_mask_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mask_price());
    }

    // optional uint64 signup_id = 12;
    if (has_signup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signup_id());
    }

    // optional .Cmd.ItemData itemdata = 13;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionItemInfo::MergeFrom(const AuctionItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_seller()) {
      set_seller(from.seller());
    }
    if (from.has_sellerid()) {
      set_sellerid(from.sellerid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_people_cnt()) {
      set_people_cnt(from.people_cnt());
    }
    if (from.has_trade_price()) {
      set_trade_price(from.trade_price());
    }
    if (from.has_auction_time()) {
      set_auction_time(from.auction_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cur_price()) {
      set_cur_price(from.cur_price());
    }
    if (from.has_mask_price()) {
      set_mask_price(from.mask_price());
    }
    if (from.has_signup_id()) {
      set_signup_id(from.signup_id());
    }
    if (from.has_itemdata()) {
      mutable_itemdata()->::Cmd::ItemData::MergeFrom(from.itemdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionItemInfo::CopyFrom(const AuctionItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionItemInfo::IsInitialized() const {

  return true;
}

void AuctionItemInfo::Swap(AuctionItemInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(price_, other->price_);
    std::swap(seller_, other->seller_);
    std::swap(sellerid_, other->sellerid_);
    std::swap(result_, other->result_);
    std::swap(people_cnt_, other->people_cnt_);
    std::swap(trade_price_, other->trade_price_);
    std::swap(auction_time_, other->auction_time_);
    std::swap(cur_price_, other->cur_price_);
    std::swap(mask_price_, other->mask_price_);
    std::swap(signup_id_, other->signup_id_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionItemInfo_descriptor_;
  metadata.reflection = AuctionItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfAuctionInfoCCmd::kCmdFieldNumber;
const int NtfAuctionInfoCCmd::kParamFieldNumber;
const int NtfAuctionInfoCCmd::kIteminfosFieldNumber;
const int NtfAuctionInfoCCmd::kBatchidFieldNumber;
#endif  // !_MSC_VER

NtfAuctionInfoCCmd::NtfAuctionInfoCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfAuctionInfoCCmd)
}

void NtfAuctionInfoCCmd::InitAsDefaultInstance() {
}

NtfAuctionInfoCCmd::NtfAuctionInfoCCmd(const NtfAuctionInfoCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfAuctionInfoCCmd)
}

void NtfAuctionInfoCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 4;
  batchid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfAuctionInfoCCmd::~NtfAuctionInfoCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfAuctionInfoCCmd)
  SharedDtor();
}

void NtfAuctionInfoCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfAuctionInfoCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfAuctionInfoCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfAuctionInfoCCmd_descriptor_;
}

const NtfAuctionInfoCCmd& NtfAuctionInfoCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

NtfAuctionInfoCCmd* NtfAuctionInfoCCmd::default_instance_ = NULL;

NtfAuctionInfoCCmd* NtfAuctionInfoCCmd::New() const {
  return new NtfAuctionInfoCCmd;
}

void NtfAuctionInfoCCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 63;
    param_ = 4;
    batchid_ = GOOGLE_ULONGLONG(0);
  }
  iteminfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfAuctionInfoCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfAuctionInfoCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_AUCTION_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_iteminfos;
        break;
      }

      // repeated .Cmd.AuctionItemInfo iteminfos = 3;
      case 3: {
        if (tag == 26) {
         parse_iteminfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_iteminfos;
        if (input->ExpectTag(32)) goto parse_batchid;
        break;
      }

      // optional uint64 batchid = 4;
      case 4: {
        if (tag == 32) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfAuctionInfoCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfAuctionInfoCCmd)
  return false;
#undef DO_
}

void NtfAuctionInfoCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfAuctionInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_AUCTION_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.AuctionItemInfo iteminfos = 3;
  for (int i = 0; i < this->iteminfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->iteminfos(i), output);
  }

  // optional uint64 batchid = 4;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->batchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfAuctionInfoCCmd)
}

::google::protobuf::uint8* NtfAuctionInfoCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfAuctionInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_AUCTION_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.AuctionItemInfo iteminfos = 3;
  for (int i = 0; i < this->iteminfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->iteminfos(i), target);
  }

  // optional uint64 batchid = 4;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->batchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfAuctionInfoCCmd)
  return target;
}

int NtfAuctionInfoCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_AUCTION_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 batchid = 4;
    if (has_batchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batchid());
    }

  }
  // repeated .Cmd.AuctionItemInfo iteminfos = 3;
  total_size += 1 * this->iteminfos_size();
  for (int i = 0; i < this->iteminfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfAuctionInfoCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfAuctionInfoCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfAuctionInfoCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfAuctionInfoCCmd::MergeFrom(const NtfAuctionInfoCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfos_.MergeFrom(from.iteminfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfAuctionInfoCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfAuctionInfoCCmd::CopyFrom(const NtfAuctionInfoCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfAuctionInfoCCmd::IsInitialized() const {

  return true;
}

void NtfAuctionInfoCCmd::Swap(NtfAuctionInfoCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    iteminfos_.Swap(&other->iteminfos_);
    std::swap(batchid_, other->batchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfAuctionInfoCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfAuctionInfoCCmd_descriptor_;
  metadata.reflection = NtfAuctionInfoCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateAuctionInfoCCmd::kCmdFieldNumber;
const int UpdateAuctionInfoCCmd::kParamFieldNumber;
const int UpdateAuctionInfoCCmd::kIteminfoFieldNumber;
const int UpdateAuctionInfoCCmd::kBatchidFieldNumber;
#endif  // !_MSC_VER

UpdateAuctionInfoCCmd::UpdateAuctionInfoCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateAuctionInfoCCmd)
}

void UpdateAuctionInfoCCmd::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::Cmd::AuctionItemInfo*>(&::Cmd::AuctionItemInfo::default_instance());
}

UpdateAuctionInfoCCmd::UpdateAuctionInfoCCmd(const UpdateAuctionInfoCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateAuctionInfoCCmd)
}

void UpdateAuctionInfoCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 5;
  iteminfo_ = NULL;
  batchid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateAuctionInfoCCmd::~UpdateAuctionInfoCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateAuctionInfoCCmd)
  SharedDtor();
}

void UpdateAuctionInfoCCmd::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void UpdateAuctionInfoCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateAuctionInfoCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateAuctionInfoCCmd_descriptor_;
}

const UpdateAuctionInfoCCmd& UpdateAuctionInfoCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

UpdateAuctionInfoCCmd* UpdateAuctionInfoCCmd::default_instance_ = NULL;

UpdateAuctionInfoCCmd* UpdateAuctionInfoCCmd::New() const {
  return new UpdateAuctionInfoCCmd;
}

void UpdateAuctionInfoCCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 63;
    param_ = 5;
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::Cmd::AuctionItemInfo::Clear();
    }
    batchid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateAuctionInfoCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateAuctionInfoCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_UPDATE_AUCTION_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_iteminfo;
        break;
      }

      // optional .Cmd.AuctionItemInfo iteminfo = 3;
      case 3: {
        if (tag == 26) {
         parse_iteminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_batchid;
        break;
      }

      // optional uint64 batchid = 4;
      case 4: {
        if (tag == 32) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateAuctionInfoCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateAuctionInfoCCmd)
  return false;
#undef DO_
}

void UpdateAuctionInfoCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateAuctionInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_UPDATE_AUCTION_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.AuctionItemInfo iteminfo = 3;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->iteminfo(), output);
  }

  // optional uint64 batchid = 4;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->batchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateAuctionInfoCCmd)
}

::google::protobuf::uint8* UpdateAuctionInfoCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateAuctionInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_UPDATE_AUCTION_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.AuctionItemInfo iteminfo = 3;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->iteminfo(), target);
  }

  // optional uint64 batchid = 4;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->batchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateAuctionInfoCCmd)
  return target;
}

int UpdateAuctionInfoCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_UPDATE_AUCTION_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.AuctionItemInfo iteminfo = 3;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

    // optional uint64 batchid = 4;
    if (has_batchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateAuctionInfoCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateAuctionInfoCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateAuctionInfoCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateAuctionInfoCCmd::MergeFrom(const UpdateAuctionInfoCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::Cmd::AuctionItemInfo::MergeFrom(from.iteminfo());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateAuctionInfoCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAuctionInfoCCmd::CopyFrom(const UpdateAuctionInfoCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAuctionInfoCCmd::IsInitialized() const {

  return true;
}

void UpdateAuctionInfoCCmd::Swap(UpdateAuctionInfoCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(batchid_, other->batchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateAuctionInfoCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateAuctionInfoCCmd_descriptor_;
  metadata.reflection = UpdateAuctionInfoCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlowingWaterInfo::kTimeFieldNumber;
const int FlowingWaterInfo::kEventFieldNumber;
const int FlowingWaterInfo::kPriceFieldNumber;
const int FlowingWaterInfo::kPlayerNameFieldNumber;
const int FlowingWaterInfo::kZoneidFieldNumber;
const int FlowingWaterInfo::kMaxPriceFieldNumber;
const int FlowingWaterInfo::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

FlowingWaterInfo::FlowingWaterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FlowingWaterInfo)
}

void FlowingWaterInfo::InitAsDefaultInstance() {
}

FlowingWaterInfo::FlowingWaterInfo(const FlowingWaterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FlowingWaterInfo)
}

void FlowingWaterInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = 0u;
  event_ = 0;
  price_ = GOOGLE_ULONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoneid_ = 0u;
  max_price_ = false;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlowingWaterInfo::~FlowingWaterInfo() {
  // @@protoc_insertion_point(destructor:Cmd.FlowingWaterInfo)
  SharedDtor();
}

void FlowingWaterInfo::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void FlowingWaterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowingWaterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlowingWaterInfo_descriptor_;
}

const FlowingWaterInfo& FlowingWaterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

FlowingWaterInfo* FlowingWaterInfo::default_instance_ = NULL;

FlowingWaterInfo* FlowingWaterInfo::New() const {
  return new FlowingWaterInfo;
}

void FlowingWaterInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FlowingWaterInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(time_, price_);
    ZR_(zoneid_, player_id_);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlowingWaterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FlowingWaterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_event;
        break;
      }

      // optional .Cmd.AuctionEvent event = 2;
      case 2: {
        if (tag == 16) {
         parse_event:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionEvent_IsValid(value)) {
            set_event(static_cast< ::Cmd::AuctionEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional uint64 price = 3;
      case 3: {
        if (tag == 24) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_name;
        break;
      }

      // optional string player_name = 4;
      case 4: {
        if (tag == 34) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 5;
      case 5: {
        if (tag == 40) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_price;
        break;
      }

      // optional bool max_price = 6;
      case 6: {
        if (tag == 48) {
         parse_max_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &max_price_)));
          set_has_max_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 7;
      case 7: {
        if (tag == 56) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FlowingWaterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FlowingWaterInfo)
  return false;
#undef DO_
}

void FlowingWaterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FlowingWaterInfo)
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .Cmd.AuctionEvent event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event(), output);
  }

  // optional uint64 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->price(), output);
  }

  // optional string player_name = 4;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->player_name(), output);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // optional bool max_price = 6;
  if (has_max_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->max_price(), output);
  }

  // optional uint64 player_id = 7;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FlowingWaterInfo)
}

::google::protobuf::uint8* FlowingWaterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FlowingWaterInfo)
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .Cmd.AuctionEvent event = 2;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event(), target);
  }

  // optional uint64 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->price(), target);
  }

  // optional string player_name = 4;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->player_name(), target);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // optional bool max_price = 6;
  if (has_max_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->max_price(), target);
  }

  // optional uint64 player_id = 7;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FlowingWaterInfo)
  return target;
}

int FlowingWaterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .Cmd.AuctionEvent event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

    // optional uint64 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->price());
    }

    // optional string player_name = 4;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 zoneid = 5;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional bool max_price = 6;
    if (has_max_price()) {
      total_size += 1 + 1;
    }

    // optional uint64 player_id = 7;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowingWaterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlowingWaterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlowingWaterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlowingWaterInfo::MergeFrom(const FlowingWaterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_max_price()) {
      set_max_price(from.max_price());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlowingWaterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowingWaterInfo::CopyFrom(const FlowingWaterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowingWaterInfo::IsInitialized() const {

  return true;
}

void FlowingWaterInfo::Swap(FlowingWaterInfo* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(event_, other->event_);
    std::swap(price_, other->price_);
    std::swap(player_name_, other->player_name_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(max_price_, other->max_price_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlowingWaterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlowingWaterInfo_descriptor_;
  metadata.reflection = FlowingWaterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAuctionFlowingWaterCCmd::kCmdFieldNumber;
const int ReqAuctionFlowingWaterCCmd::kParamFieldNumber;
const int ReqAuctionFlowingWaterCCmd::kBatchidFieldNumber;
const int ReqAuctionFlowingWaterCCmd::kItemidFieldNumber;
const int ReqAuctionFlowingWaterCCmd::kPageIndexFieldNumber;
const int ReqAuctionFlowingWaterCCmd::kFlowingwaterFieldNumber;
const int ReqAuctionFlowingWaterCCmd::kSignupIdFieldNumber;
#endif  // !_MSC_VER

ReqAuctionFlowingWaterCCmd::ReqAuctionFlowingWaterCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqAuctionFlowingWaterCCmd)
}

void ReqAuctionFlowingWaterCCmd::InitAsDefaultInstance() {
}

ReqAuctionFlowingWaterCCmd::ReqAuctionFlowingWaterCCmd(const ReqAuctionFlowingWaterCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqAuctionFlowingWaterCCmd)
}

void ReqAuctionFlowingWaterCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 6;
  batchid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  page_index_ = 0u;
  signup_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAuctionFlowingWaterCCmd::~ReqAuctionFlowingWaterCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqAuctionFlowingWaterCCmd)
  SharedDtor();
}

void ReqAuctionFlowingWaterCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAuctionFlowingWaterCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAuctionFlowingWaterCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAuctionFlowingWaterCCmd_descriptor_;
}

const ReqAuctionFlowingWaterCCmd& ReqAuctionFlowingWaterCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

ReqAuctionFlowingWaterCCmd* ReqAuctionFlowingWaterCCmd::default_instance_ = NULL;

ReqAuctionFlowingWaterCCmd* ReqAuctionFlowingWaterCCmd::New() const {
  return new ReqAuctionFlowingWaterCCmd;
}

void ReqAuctionFlowingWaterCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqAuctionFlowingWaterCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(batchid_, page_index_);
    cmd_ = 63;
    param_ = 6;
    signup_id_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  flowingwater_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAuctionFlowingWaterCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqAuctionFlowingWaterCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_AUCTION_FLOWINGWATER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_batchid;
        break;
      }

      // optional uint64 batchid = 3;
      case 3: {
        if (tag == 24) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 4;
      case 4: {
        if (tag == 32) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_page_index;
        break;
      }

      // optional uint32 page_index = 5;
      case 5: {
        if (tag == 40) {
         parse_page_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_index_)));
          set_has_page_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_flowingwater;
        break;
      }

      // repeated .Cmd.FlowingWaterInfo flowingwater = 6;
      case 6: {
        if (tag == 50) {
         parse_flowingwater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flowingwater()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_flowingwater;
        if (input->ExpectTag(56)) goto parse_signup_id;
        break;
      }

      // optional uint64 signup_id = 7;
      case 7: {
        if (tag == 56) {
         parse_signup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signup_id_)));
          set_has_signup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqAuctionFlowingWaterCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqAuctionFlowingWaterCCmd)
  return false;
#undef DO_
}

void ReqAuctionFlowingWaterCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqAuctionFlowingWaterCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_AUCTION_FLOWINGWATER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 batchid = 3;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->batchid(), output);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemid(), output);
  }

  // optional uint32 page_index = 5;
  if (has_page_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->page_index(), output);
  }

  // repeated .Cmd.FlowingWaterInfo flowingwater = 6;
  for (int i = 0; i < this->flowingwater_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->flowingwater(i), output);
  }

  // optional uint64 signup_id = 7;
  if (has_signup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->signup_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqAuctionFlowingWaterCCmd)
}

::google::protobuf::uint8* ReqAuctionFlowingWaterCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqAuctionFlowingWaterCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_AUCTION_FLOWINGWATER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 batchid = 3;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->batchid(), target);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemid(), target);
  }

  // optional uint32 page_index = 5;
  if (has_page_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->page_index(), target);
  }

  // repeated .Cmd.FlowingWaterInfo flowingwater = 6;
  for (int i = 0; i < this->flowingwater_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->flowingwater(i), target);
  }

  // optional uint64 signup_id = 7;
  if (has_signup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->signup_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqAuctionFlowingWaterCCmd)
  return target;
}

int ReqAuctionFlowingWaterCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_AUCTION_FLOWINGWATER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 batchid = 3;
    if (has_batchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batchid());
    }

    // optional uint32 itemid = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 page_index = 5;
    if (has_page_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_index());
    }

    // optional uint64 signup_id = 7;
    if (has_signup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signup_id());
    }

  }
  // repeated .Cmd.FlowingWaterInfo flowingwater = 6;
  total_size += 1 * this->flowingwater_size();
  for (int i = 0; i < this->flowingwater_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flowingwater(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAuctionFlowingWaterCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAuctionFlowingWaterCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAuctionFlowingWaterCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAuctionFlowingWaterCCmd::MergeFrom(const ReqAuctionFlowingWaterCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  flowingwater_.MergeFrom(from.flowingwater_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_page_index()) {
      set_page_index(from.page_index());
    }
    if (from.has_signup_id()) {
      set_signup_id(from.signup_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAuctionFlowingWaterCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAuctionFlowingWaterCCmd::CopyFrom(const ReqAuctionFlowingWaterCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAuctionFlowingWaterCCmd::IsInitialized() const {

  return true;
}

void ReqAuctionFlowingWaterCCmd::Swap(ReqAuctionFlowingWaterCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(batchid_, other->batchid_);
    std::swap(itemid_, other->itemid_);
    std::swap(page_index_, other->page_index_);
    flowingwater_.Swap(&other->flowingwater_);
    std::swap(signup_id_, other->signup_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAuctionFlowingWaterCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAuctionFlowingWaterCCmd_descriptor_;
  metadata.reflection = ReqAuctionFlowingWaterCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateAuctionFlowingWaterCCmd::kCmdFieldNumber;
const int UpdateAuctionFlowingWaterCCmd::kParamFieldNumber;
const int UpdateAuctionFlowingWaterCCmd::kBatchidFieldNumber;
const int UpdateAuctionFlowingWaterCCmd::kItemidFieldNumber;
const int UpdateAuctionFlowingWaterCCmd::kFlowingwaterFieldNumber;
const int UpdateAuctionFlowingWaterCCmd::kSignupIdFieldNumber;
#endif  // !_MSC_VER

UpdateAuctionFlowingWaterCCmd::UpdateAuctionFlowingWaterCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateAuctionFlowingWaterCCmd)
}

void UpdateAuctionFlowingWaterCCmd::InitAsDefaultInstance() {
  flowingwater_ = const_cast< ::Cmd::FlowingWaterInfo*>(&::Cmd::FlowingWaterInfo::default_instance());
}

UpdateAuctionFlowingWaterCCmd::UpdateAuctionFlowingWaterCCmd(const UpdateAuctionFlowingWaterCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateAuctionFlowingWaterCCmd)
}

void UpdateAuctionFlowingWaterCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 7;
  batchid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  flowingwater_ = NULL;
  signup_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateAuctionFlowingWaterCCmd::~UpdateAuctionFlowingWaterCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateAuctionFlowingWaterCCmd)
  SharedDtor();
}

void UpdateAuctionFlowingWaterCCmd::SharedDtor() {
  if (this != default_instance_) {
    delete flowingwater_;
  }
}

void UpdateAuctionFlowingWaterCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateAuctionFlowingWaterCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateAuctionFlowingWaterCCmd_descriptor_;
}

const UpdateAuctionFlowingWaterCCmd& UpdateAuctionFlowingWaterCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

UpdateAuctionFlowingWaterCCmd* UpdateAuctionFlowingWaterCCmd::default_instance_ = NULL;

UpdateAuctionFlowingWaterCCmd* UpdateAuctionFlowingWaterCCmd::New() const {
  return new UpdateAuctionFlowingWaterCCmd;
}

void UpdateAuctionFlowingWaterCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateAuctionFlowingWaterCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(signup_id_, itemid_);
    cmd_ = 63;
    param_ = 7;
    batchid_ = GOOGLE_ULONGLONG(0);
    if (has_flowingwater()) {
      if (flowingwater_ != NULL) flowingwater_->::Cmd::FlowingWaterInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateAuctionFlowingWaterCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateAuctionFlowingWaterCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_UPDATE_AUCTION_FLOWINGWATER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_batchid;
        break;
      }

      // optional uint64 batchid = 3;
      case 3: {
        if (tag == 24) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 4;
      case 4: {
        if (tag == 32) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_flowingwater;
        break;
      }

      // optional .Cmd.FlowingWaterInfo flowingwater = 5;
      case 5: {
        if (tag == 42) {
         parse_flowingwater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flowingwater()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_signup_id;
        break;
      }

      // optional uint64 signup_id = 6;
      case 6: {
        if (tag == 48) {
         parse_signup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signup_id_)));
          set_has_signup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateAuctionFlowingWaterCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateAuctionFlowingWaterCCmd)
  return false;
#undef DO_
}

void UpdateAuctionFlowingWaterCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateAuctionFlowingWaterCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_UPDATE_AUCTION_FLOWINGWATER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 batchid = 3;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->batchid(), output);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemid(), output);
  }

  // optional .Cmd.FlowingWaterInfo flowingwater = 5;
  if (has_flowingwater()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->flowingwater(), output);
  }

  // optional uint64 signup_id = 6;
  if (has_signup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->signup_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateAuctionFlowingWaterCCmd)
}

::google::protobuf::uint8* UpdateAuctionFlowingWaterCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateAuctionFlowingWaterCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_UPDATE_AUCTION_FLOWINGWATER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 batchid = 3;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->batchid(), target);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemid(), target);
  }

  // optional .Cmd.FlowingWaterInfo flowingwater = 5;
  if (has_flowingwater()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->flowingwater(), target);
  }

  // optional uint64 signup_id = 6;
  if (has_signup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->signup_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateAuctionFlowingWaterCCmd)
  return target;
}

int UpdateAuctionFlowingWaterCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_UPDATE_AUCTION_FLOWINGWATER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 batchid = 3;
    if (has_batchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batchid());
    }

    // optional uint32 itemid = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional .Cmd.FlowingWaterInfo flowingwater = 5;
    if (has_flowingwater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flowingwater());
    }

    // optional uint64 signup_id = 6;
    if (has_signup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signup_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateAuctionFlowingWaterCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateAuctionFlowingWaterCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateAuctionFlowingWaterCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateAuctionFlowingWaterCCmd::MergeFrom(const UpdateAuctionFlowingWaterCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_flowingwater()) {
      mutable_flowingwater()->::Cmd::FlowingWaterInfo::MergeFrom(from.flowingwater());
    }
    if (from.has_signup_id()) {
      set_signup_id(from.signup_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateAuctionFlowingWaterCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAuctionFlowingWaterCCmd::CopyFrom(const UpdateAuctionFlowingWaterCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAuctionFlowingWaterCCmd::IsInitialized() const {

  return true;
}

void UpdateAuctionFlowingWaterCCmd::Swap(UpdateAuctionFlowingWaterCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(batchid_, other->batchid_);
    std::swap(itemid_, other->itemid_);
    std::swap(flowingwater_, other->flowingwater_);
    std::swap(signup_id_, other->signup_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateAuctionFlowingWaterCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateAuctionFlowingWaterCCmd_descriptor_;
  metadata.reflection = UpdateAuctionFlowingWaterCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLastAuctionInfoCCmd::kCmdFieldNumber;
const int ReqLastAuctionInfoCCmd::kParamFieldNumber;
#endif  // !_MSC_VER

ReqLastAuctionInfoCCmd::ReqLastAuctionInfoCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqLastAuctionInfoCCmd)
}

void ReqLastAuctionInfoCCmd::InitAsDefaultInstance() {
}

ReqLastAuctionInfoCCmd::ReqLastAuctionInfoCCmd(const ReqLastAuctionInfoCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqLastAuctionInfoCCmd)
}

void ReqLastAuctionInfoCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 8;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLastAuctionInfoCCmd::~ReqLastAuctionInfoCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqLastAuctionInfoCCmd)
  SharedDtor();
}

void ReqLastAuctionInfoCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLastAuctionInfoCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLastAuctionInfoCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLastAuctionInfoCCmd_descriptor_;
}

const ReqLastAuctionInfoCCmd& ReqLastAuctionInfoCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

ReqLastAuctionInfoCCmd* ReqLastAuctionInfoCCmd::default_instance_ = NULL;

ReqLastAuctionInfoCCmd* ReqLastAuctionInfoCCmd::New() const {
  return new ReqLastAuctionInfoCCmd;
}

void ReqLastAuctionInfoCCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 63;
    param_ = 8;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLastAuctionInfoCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqLastAuctionInfoCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_LAST_AUCTION_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqLastAuctionInfoCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqLastAuctionInfoCCmd)
  return false;
#undef DO_
}

void ReqLastAuctionInfoCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqLastAuctionInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_LAST_AUCTION_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqLastAuctionInfoCCmd)
}

::google::protobuf::uint8* ReqLastAuctionInfoCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqLastAuctionInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_LAST_AUCTION_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqLastAuctionInfoCCmd)
  return target;
}

int ReqLastAuctionInfoCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_LAST_AUCTION_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLastAuctionInfoCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLastAuctionInfoCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLastAuctionInfoCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLastAuctionInfoCCmd::MergeFrom(const ReqLastAuctionInfoCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLastAuctionInfoCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLastAuctionInfoCCmd::CopyFrom(const ReqLastAuctionInfoCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLastAuctionInfoCCmd::IsInitialized() const {

  return true;
}

void ReqLastAuctionInfoCCmd::Swap(ReqLastAuctionInfoCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLastAuctionInfoCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLastAuctionInfoCCmd_descriptor_;
  metadata.reflection = ReqLastAuctionInfoCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferPriceCCmd::kCmdFieldNumber;
const int OfferPriceCCmd::kParamFieldNumber;
const int OfferPriceCCmd::kItemidFieldNumber;
const int OfferPriceCCmd::kMaxPriceFieldNumber;
const int OfferPriceCCmd::kAddPriceFieldNumber;
const int OfferPriceCCmd::kLevelFieldNumber;
const int OfferPriceCCmd::kSignupIdFieldNumber;
#endif  // !_MSC_VER

OfferPriceCCmd::OfferPriceCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OfferPriceCCmd)
}

void OfferPriceCCmd::InitAsDefaultInstance() {
}

OfferPriceCCmd::OfferPriceCCmd(const OfferPriceCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OfferPriceCCmd)
}

void OfferPriceCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 9;
  itemid_ = 0u;
  max_price_ = GOOGLE_ULONGLONG(0);
  add_price_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  signup_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferPriceCCmd::~OfferPriceCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.OfferPriceCCmd)
  SharedDtor();
}

void OfferPriceCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfferPriceCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferPriceCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferPriceCCmd_descriptor_;
}

const OfferPriceCCmd& OfferPriceCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

OfferPriceCCmd* OfferPriceCCmd::default_instance_ = NULL;

OfferPriceCCmd* OfferPriceCCmd::New() const {
  return new OfferPriceCCmd;
}

void OfferPriceCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OfferPriceCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(max_price_, signup_id_);
    cmd_ = 63;
    param_ = 9;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferPriceCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OfferPriceCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_OFFER_PRICE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 3;
      case 3: {
        if (tag == 24) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_price;
        break;
      }

      // optional uint64 max_price = 4;
      case 4: {
        if (tag == 32) {
         parse_max_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_price_)));
          set_has_max_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_add_price;
        break;
      }

      // optional uint64 add_price = 5;
      case 5: {
        if (tag == 40) {
         parse_add_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_price_)));
          set_has_add_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_signup_id;
        break;
      }

      // optional uint64 signup_id = 7;
      case 7: {
        if (tag == 56) {
         parse_signup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signup_id_)));
          set_has_signup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OfferPriceCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OfferPriceCCmd)
  return false;
#undef DO_
}

void OfferPriceCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OfferPriceCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_OFFER_PRICE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  // optional uint64 max_price = 4;
  if (has_max_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_price(), output);
  }

  // optional uint64 add_price = 5;
  if (has_add_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->add_price(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint64 signup_id = 7;
  if (has_signup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->signup_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OfferPriceCCmd)
}

::google::protobuf::uint8* OfferPriceCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OfferPriceCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_OFFER_PRICE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 itemid = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  // optional uint64 max_price = 4;
  if (has_max_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->max_price(), target);
  }

  // optional uint64 add_price = 5;
  if (has_add_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->add_price(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint64 signup_id = 7;
  if (has_signup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->signup_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OfferPriceCCmd)
  return target;
}

int OfferPriceCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_OFFER_PRICE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint64 max_price = 4;
    if (has_max_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_price());
    }

    // optional uint64 add_price = 5;
    if (has_add_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_price());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 signup_id = 7;
    if (has_signup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signup_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferPriceCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferPriceCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferPriceCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferPriceCCmd::MergeFrom(const OfferPriceCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_max_price()) {
      set_max_price(from.max_price());
    }
    if (from.has_add_price()) {
      set_add_price(from.add_price());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_signup_id()) {
      set_signup_id(from.signup_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferPriceCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferPriceCCmd::CopyFrom(const OfferPriceCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferPriceCCmd::IsInitialized() const {

  return true;
}

void OfferPriceCCmd::Swap(OfferPriceCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(itemid_, other->itemid_);
    std::swap(max_price_, other->max_price_);
    std::swap(add_price_, other->add_price_);
    std::swap(level_, other->level_);
    std::swap(signup_id_, other->signup_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferPriceCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferPriceCCmd_descriptor_;
  metadata.reflection = OfferPriceCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRecord::kIdFieldNumber;
const int AuctionRecord::kTypeFieldNumber;
const int AuctionRecord::kTakeStatusFieldNumber;
const int AuctionRecord::kItemidFieldNumber;
const int AuctionRecord::kPriceFieldNumber;
const int AuctionRecord::kSellerFieldNumber;
const int AuctionRecord::kBuyerFieldNumber;
const int AuctionRecord::kZoneidFieldNumber;
const int AuctionRecord::kCostMoneyFieldNumber;
const int AuctionRecord::kGetMoneyFieldNumber;
const int AuctionRecord::kTaxFieldNumber;
const int AuctionRecord::kBatchidFieldNumber;
const int AuctionRecord::kTimeFieldNumber;
const int AuctionRecord::kSignupIdFieldNumber;
const int AuctionRecord::kItemdataFieldNumber;
#endif  // !_MSC_VER

AuctionRecord::AuctionRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AuctionRecord)
}

void AuctionRecord::InitAsDefaultInstance() {
  itemdata_ = const_cast< ::Cmd::ItemData*>(&::Cmd::ItemData::default_instance());
}

AuctionRecord::AuctionRecord(const AuctionRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AuctionRecord)
}

void AuctionRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  take_status_ = 0;
  itemid_ = 0u;
  price_ = GOOGLE_ULONGLONG(0);
  seller_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoneid_ = 0u;
  cost_money_ = GOOGLE_ULONGLONG(0);
  get_money_ = GOOGLE_ULONGLONG(0);
  tax_ = GOOGLE_ULONGLONG(0);
  batchid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  signup_id_ = GOOGLE_ULONGLONG(0);
  itemdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRecord::~AuctionRecord() {
  // @@protoc_insertion_point(destructor:Cmd.AuctionRecord)
  SharedDtor();
}

void AuctionRecord::SharedDtor() {
  if (seller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seller_;
  }
  if (buyer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyer_;
  }
  if (this != default_instance_) {
    delete itemdata_;
  }
}

void AuctionRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRecord_descriptor_;
}

const AuctionRecord& AuctionRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

AuctionRecord* AuctionRecord::default_instance_ = NULL;

AuctionRecord* AuctionRecord::New() const {
  return new AuctionRecord;
}

void AuctionRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuctionRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(take_status_, price_);
    ZR_(itemid_, zoneid_);
    id_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
    if (has_seller()) {
      if (seller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        seller_->clear();
      }
    }
    if (has_buyer()) {
      if (buyer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buyer_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(cost_money_, signup_id_);
    time_ = 0u;
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AuctionRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .Cmd.ERecordType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERecordType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ERecordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_take_status;
        break;
      }

      // optional .Cmd.EAuctionTakeStatus take_status = 3;
      case 3: {
        if (tag == 24) {
         parse_take_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAuctionTakeStatus_IsValid(value)) {
            set_take_status(static_cast< ::Cmd::EAuctionTakeStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 4;
      case 4: {
        if (tag == 32) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_price;
        break;
      }

      // optional uint64 price = 5;
      case 5: {
        if (tag == 40) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_seller;
        break;
      }

      // optional string seller = 6;
      case 6: {
        if (tag == 50) {
         parse_seller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seller()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seller().data(), this->seller().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "seller");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_buyer;
        break;
      }

      // optional string buyer = 7;
      case 7: {
        if (tag == 58) {
         parse_buyer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buyer().data(), this->buyer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buyer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 8;
      case 8: {
        if (tag == 64) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cost_money;
        break;
      }

      // optional uint64 cost_money = 9;
      case 9: {
        if (tag == 72) {
         parse_cost_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cost_money_)));
          set_has_cost_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_get_money;
        break;
      }

      // optional uint64 get_money = 10;
      case 10: {
        if (tag == 80) {
         parse_get_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &get_money_)));
          set_has_get_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_tax;
        break;
      }

      // optional uint64 tax = 11;
      case 11: {
        if (tag == 88) {
         parse_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_batchid;
        break;
      }

      // optional uint64 batchid = 12;
      case 12: {
        if (tag == 96) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_time;
        break;
      }

      // optional uint32 time = 13;
      case 13: {
        if (tag == 104) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_signup_id;
        break;
      }

      // optional uint64 signup_id = 14;
      case 14: {
        if (tag == 112) {
         parse_signup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signup_id_)));
          set_has_signup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_itemdata;
        break;
      }

      // optional .Cmd.ItemData itemdata = 15;
      case 15: {
        if (tag == 122) {
         parse_itemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AuctionRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AuctionRecord)
  return false;
#undef DO_
}

void AuctionRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AuctionRecord)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .Cmd.ERecordType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .Cmd.EAuctionTakeStatus take_status = 3;
  if (has_take_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->take_status(), output);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemid(), output);
  }

  // optional uint64 price = 5;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->price(), output);
  }

  // optional string seller = 6;
  if (has_seller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seller().data(), this->seller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seller");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->seller(), output);
  }

  // optional string buyer = 7;
  if (has_buyer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer().data(), this->buyer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->buyer(), output);
  }

  // optional uint32 zoneid = 8;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->zoneid(), output);
  }

  // optional uint64 cost_money = 9;
  if (has_cost_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->cost_money(), output);
  }

  // optional uint64 get_money = 10;
  if (has_get_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->get_money(), output);
  }

  // optional uint64 tax = 11;
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->tax(), output);
  }

  // optional uint64 batchid = 12;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->batchid(), output);
  }

  // optional uint32 time = 13;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->time(), output);
  }

  // optional uint64 signup_id = 14;
  if (has_signup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->signup_id(), output);
  }

  // optional .Cmd.ItemData itemdata = 15;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->itemdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AuctionRecord)
}

::google::protobuf::uint8* AuctionRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AuctionRecord)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .Cmd.ERecordType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .Cmd.EAuctionTakeStatus take_status = 3;
  if (has_take_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->take_status(), target);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemid(), target);
  }

  // optional uint64 price = 5;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->price(), target);
  }

  // optional string seller = 6;
  if (has_seller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seller().data(), this->seller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seller");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->seller(), target);
  }

  // optional string buyer = 7;
  if (has_buyer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer().data(), this->buyer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->buyer(), target);
  }

  // optional uint32 zoneid = 8;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->zoneid(), target);
  }

  // optional uint64 cost_money = 9;
  if (has_cost_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->cost_money(), target);
  }

  // optional uint64 get_money = 10;
  if (has_get_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->get_money(), target);
  }

  // optional uint64 tax = 11;
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->tax(), target);
  }

  // optional uint64 batchid = 12;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->batchid(), target);
  }

  // optional uint32 time = 13;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->time(), target);
  }

  // optional uint64 signup_id = 14;
  if (has_signup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->signup_id(), target);
  }

  // optional .Cmd.ItemData itemdata = 15;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->itemdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AuctionRecord)
  return target;
}

int AuctionRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .Cmd.ERecordType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Cmd.EAuctionTakeStatus take_status = 3;
    if (has_take_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->take_status());
    }

    // optional uint32 itemid = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint64 price = 5;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->price());
    }

    // optional string seller = 6;
    if (has_seller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seller());
    }

    // optional string buyer = 7;
    if (has_buyer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyer());
    }

    // optional uint32 zoneid = 8;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 cost_money = 9;
    if (has_cost_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cost_money());
    }

    // optional uint64 get_money = 10;
    if (has_get_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->get_money());
    }

    // optional uint64 tax = 11;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tax());
    }

    // optional uint64 batchid = 12;
    if (has_batchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batchid());
    }

    // optional uint32 time = 13;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 signup_id = 14;
    if (has_signup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signup_id());
    }

    // optional .Cmd.ItemData itemdata = 15;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRecord::MergeFrom(const AuctionRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_take_status()) {
      set_take_status(from.take_status());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_seller()) {
      set_seller(from.seller());
    }
    if (from.has_buyer()) {
      set_buyer(from.buyer());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cost_money()) {
      set_cost_money(from.cost_money());
    }
    if (from.has_get_money()) {
      set_get_money(from.get_money());
    }
    if (from.has_tax()) {
      set_tax(from.tax());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_signup_id()) {
      set_signup_id(from.signup_id());
    }
    if (from.has_itemdata()) {
      mutable_itemdata()->::Cmd::ItemData::MergeFrom(from.itemdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRecord::CopyFrom(const AuctionRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRecord::IsInitialized() const {

  return true;
}

void AuctionRecord::Swap(AuctionRecord* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(take_status_, other->take_status_);
    std::swap(itemid_, other->itemid_);
    std::swap(price_, other->price_);
    std::swap(seller_, other->seller_);
    std::swap(buyer_, other->buyer_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(cost_money_, other->cost_money_);
    std::swap(get_money_, other->get_money_);
    std::swap(tax_, other->tax_);
    std::swap(batchid_, other->batchid_);
    std::swap(time_, other->time_);
    std::swap(signup_id_, other->signup_id_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRecord_descriptor_;
  metadata.reflection = AuctionRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAuctionRecordCCmd::kCmdFieldNumber;
const int ReqAuctionRecordCCmd::kParamFieldNumber;
const int ReqAuctionRecordCCmd::kIndexFieldNumber;
const int ReqAuctionRecordCCmd::kTotalPageCntFieldNumber;
const int ReqAuctionRecordCCmd::kRecordsFieldNumber;
#endif  // !_MSC_VER

ReqAuctionRecordCCmd::ReqAuctionRecordCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqAuctionRecordCCmd)
}

void ReqAuctionRecordCCmd::InitAsDefaultInstance() {
}

ReqAuctionRecordCCmd::ReqAuctionRecordCCmd(const ReqAuctionRecordCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqAuctionRecordCCmd)
}

void ReqAuctionRecordCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 10;
  index_ = 0u;
  total_page_cnt_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAuctionRecordCCmd::~ReqAuctionRecordCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqAuctionRecordCCmd)
  SharedDtor();
}

void ReqAuctionRecordCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAuctionRecordCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAuctionRecordCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAuctionRecordCCmd_descriptor_;
}

const ReqAuctionRecordCCmd& ReqAuctionRecordCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

ReqAuctionRecordCCmd* ReqAuctionRecordCCmd::default_instance_ = NULL;

ReqAuctionRecordCCmd* ReqAuctionRecordCCmd::New() const {
  return new ReqAuctionRecordCCmd;
}

void ReqAuctionRecordCCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 63;
    param_ = 10;
    index_ = 0u;
    total_page_cnt_ = GOOGLE_ULONGLONG(0);
  }
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAuctionRecordCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqAuctionRecordCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_AUCTION_RECORD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_page_cnt;
        break;
      }

      // optional uint64 total_page_cnt = 4;
      case 4: {
        if (tag == 32) {
         parse_total_page_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_page_cnt_)));
          set_has_total_page_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_records;
        break;
      }

      // repeated .Cmd.AuctionRecord records = 5;
      case 5: {
        if (tag == 42) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_records;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqAuctionRecordCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqAuctionRecordCCmd)
  return false;
#undef DO_
}

void ReqAuctionRecordCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqAuctionRecordCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_AUCTION_RECORD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // optional uint64 total_page_cnt = 4;
  if (has_total_page_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->total_page_cnt(), output);
  }

  // repeated .Cmd.AuctionRecord records = 5;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqAuctionRecordCCmd)
}

::google::protobuf::uint8* ReqAuctionRecordCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqAuctionRecordCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_AUCTION_RECORD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // optional uint64 total_page_cnt = 4;
  if (has_total_page_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->total_page_cnt(), target);
  }

  // repeated .Cmd.AuctionRecord records = 5;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqAuctionRecordCCmd)
  return target;
}

int ReqAuctionRecordCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_AUCTION_RECORD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint64 total_page_cnt = 4;
    if (has_total_page_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_page_cnt());
    }

  }
  // repeated .Cmd.AuctionRecord records = 5;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAuctionRecordCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAuctionRecordCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAuctionRecordCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAuctionRecordCCmd::MergeFrom(const ReqAuctionRecordCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_total_page_cnt()) {
      set_total_page_cnt(from.total_page_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAuctionRecordCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAuctionRecordCCmd::CopyFrom(const ReqAuctionRecordCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAuctionRecordCCmd::IsInitialized() const {

  return true;
}

void ReqAuctionRecordCCmd::Swap(ReqAuctionRecordCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(index_, other->index_);
    std::swap(total_page_cnt_, other->total_page_cnt_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAuctionRecordCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAuctionRecordCCmd_descriptor_;
  metadata.reflection = ReqAuctionRecordCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeAuctionRecordCCmd::kCmdFieldNumber;
const int TakeAuctionRecordCCmd::kParamFieldNumber;
const int TakeAuctionRecordCCmd::kIdFieldNumber;
const int TakeAuctionRecordCCmd::kTypeFieldNumber;
const int TakeAuctionRecordCCmd::kRetFieldNumber;
#endif  // !_MSC_VER

TakeAuctionRecordCCmd::TakeAuctionRecordCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TakeAuctionRecordCCmd)
}

void TakeAuctionRecordCCmd::InitAsDefaultInstance() {
}

TakeAuctionRecordCCmd::TakeAuctionRecordCCmd(const TakeAuctionRecordCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TakeAuctionRecordCCmd)
}

void TakeAuctionRecordCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 11;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  ret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeAuctionRecordCCmd::~TakeAuctionRecordCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TakeAuctionRecordCCmd)
  SharedDtor();
}

void TakeAuctionRecordCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeAuctionRecordCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeAuctionRecordCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeAuctionRecordCCmd_descriptor_;
}

const TakeAuctionRecordCCmd& TakeAuctionRecordCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

TakeAuctionRecordCCmd* TakeAuctionRecordCCmd::default_instance_ = NULL;

TakeAuctionRecordCCmd* TakeAuctionRecordCCmd::New() const {
  return new TakeAuctionRecordCCmd;
}

void TakeAuctionRecordCCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 63;
    param_ = 11;
    id_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
    ret_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeAuctionRecordCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TakeAuctionRecordCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_TAKE_AUCTION_RECORD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.ERecordType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERecordType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ERecordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional bool ret = 5;
      case 5: {
        if (tag == 40) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TakeAuctionRecordCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TakeAuctionRecordCCmd)
  return false;
#undef DO_
}

void TakeAuctionRecordCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TakeAuctionRecordCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_TAKE_AUCTION_RECORD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional .Cmd.ERecordType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional bool ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TakeAuctionRecordCCmd)
}

::google::protobuf::uint8* TakeAuctionRecordCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TakeAuctionRecordCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_TAKE_AUCTION_RECORD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional .Cmd.ERecordType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional bool ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TakeAuctionRecordCCmd)
  return target;
}

int TakeAuctionRecordCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_TAKE_AUCTION_RECORD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .Cmd.ERecordType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool ret = 5;
    if (has_ret()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeAuctionRecordCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeAuctionRecordCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeAuctionRecordCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeAuctionRecordCCmd::MergeFrom(const TakeAuctionRecordCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeAuctionRecordCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeAuctionRecordCCmd::CopyFrom(const TakeAuctionRecordCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeAuctionRecordCCmd::IsInitialized() const {

  return true;
}

void TakeAuctionRecordCCmd::Swap(TakeAuctionRecordCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeAuctionRecordCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeAuctionRecordCCmd_descriptor_;
  metadata.reflection = TakeAuctionRecordCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfCanTakeCntCCmd::kCmdFieldNumber;
const int NtfCanTakeCntCCmd::kParamFieldNumber;
const int NtfCanTakeCntCCmd::kCountFieldNumber;
#endif  // !_MSC_VER

NtfCanTakeCntCCmd::NtfCanTakeCntCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfCanTakeCntCCmd)
}

void NtfCanTakeCntCCmd::InitAsDefaultInstance() {
}

NtfCanTakeCntCCmd::NtfCanTakeCntCCmd(const NtfCanTakeCntCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfCanTakeCntCCmd)
}

void NtfCanTakeCntCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 13;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfCanTakeCntCCmd::~NtfCanTakeCntCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfCanTakeCntCCmd)
  SharedDtor();
}

void NtfCanTakeCntCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfCanTakeCntCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfCanTakeCntCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfCanTakeCntCCmd_descriptor_;
}

const NtfCanTakeCntCCmd& NtfCanTakeCntCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

NtfCanTakeCntCCmd* NtfCanTakeCntCCmd::default_instance_ = NULL;

NtfCanTakeCntCCmd* NtfCanTakeCntCCmd::New() const {
  return new NtfCanTakeCntCCmd;
}

void NtfCanTakeCntCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 63;
    param_ = 13;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfCanTakeCntCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfCanTakeCntCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_CANTAKE_CNT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfCanTakeCntCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfCanTakeCntCCmd)
  return false;
#undef DO_
}

void NtfCanTakeCntCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfCanTakeCntCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_CANTAKE_CNT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfCanTakeCntCCmd)
}

::google::protobuf::uint8* NtfCanTakeCntCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfCanTakeCntCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_CANTAKE_CNT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfCanTakeCntCCmd)
  return target;
}

int NtfCanTakeCntCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_CANTAKE_CNT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfCanTakeCntCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfCanTakeCntCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfCanTakeCntCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfCanTakeCntCCmd::MergeFrom(const NtfCanTakeCntCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfCanTakeCntCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfCanTakeCntCCmd::CopyFrom(const NtfCanTakeCntCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfCanTakeCntCCmd::IsInitialized() const {

  return true;
}

void NtfCanTakeCntCCmd::Swap(NtfCanTakeCntCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfCanTakeCntCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfCanTakeCntCCmd_descriptor_;
  metadata.reflection = NtfCanTakeCntCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfMyOfferPriceCCmd::kCmdFieldNumber;
const int NtfMyOfferPriceCCmd::kParamFieldNumber;
const int NtfMyOfferPriceCCmd::kBatchidFieldNumber;
const int NtfMyOfferPriceCCmd::kItemidFieldNumber;
const int NtfMyOfferPriceCCmd::kMyPriceFieldNumber;
const int NtfMyOfferPriceCCmd::kSignupIdFieldNumber;
#endif  // !_MSC_VER

NtfMyOfferPriceCCmd::NtfMyOfferPriceCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfMyOfferPriceCCmd)
}

void NtfMyOfferPriceCCmd::InitAsDefaultInstance() {
}

NtfMyOfferPriceCCmd::NtfMyOfferPriceCCmd(const NtfMyOfferPriceCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfMyOfferPriceCCmd)
}

void NtfMyOfferPriceCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 15;
  batchid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  my_price_ = GOOGLE_ULONGLONG(0);
  signup_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfMyOfferPriceCCmd::~NtfMyOfferPriceCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfMyOfferPriceCCmd)
  SharedDtor();
}

void NtfMyOfferPriceCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfMyOfferPriceCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfMyOfferPriceCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfMyOfferPriceCCmd_descriptor_;
}

const NtfMyOfferPriceCCmd& NtfMyOfferPriceCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

NtfMyOfferPriceCCmd* NtfMyOfferPriceCCmd::default_instance_ = NULL;

NtfMyOfferPriceCCmd* NtfMyOfferPriceCCmd::New() const {
  return new NtfMyOfferPriceCCmd;
}

void NtfMyOfferPriceCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NtfMyOfferPriceCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(batchid_, itemid_);
    cmd_ = 63;
    param_ = 15;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfMyOfferPriceCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfMyOfferPriceCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MY_OFFERPRICE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_batchid;
        break;
      }

      // optional uint64 batchid = 3;
      case 3: {
        if (tag == 24) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 4;
      case 4: {
        if (tag == 32) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_my_price;
        break;
      }

      // optional uint64 my_price = 5;
      case 5: {
        if (tag == 40) {
         parse_my_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &my_price_)));
          set_has_my_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_signup_id;
        break;
      }

      // optional uint64 signup_id = 6;
      case 6: {
        if (tag == 48) {
         parse_signup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signup_id_)));
          set_has_signup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfMyOfferPriceCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfMyOfferPriceCCmd)
  return false;
#undef DO_
}

void NtfMyOfferPriceCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfMyOfferPriceCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MY_OFFERPRICE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 batchid = 3;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->batchid(), output);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemid(), output);
  }

  // optional uint64 my_price = 5;
  if (has_my_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->my_price(), output);
  }

  // optional uint64 signup_id = 6;
  if (has_signup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->signup_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfMyOfferPriceCCmd)
}

::google::protobuf::uint8* NtfMyOfferPriceCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfMyOfferPriceCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MY_OFFERPRICE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 batchid = 3;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->batchid(), target);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemid(), target);
  }

  // optional uint64 my_price = 5;
  if (has_my_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->my_price(), target);
  }

  // optional uint64 signup_id = 6;
  if (has_signup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->signup_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfMyOfferPriceCCmd)
  return target;
}

int NtfMyOfferPriceCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MY_OFFERPRICE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 batchid = 3;
    if (has_batchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batchid());
    }

    // optional uint32 itemid = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint64 my_price = 5;
    if (has_my_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->my_price());
    }

    // optional uint64 signup_id = 6;
    if (has_signup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signup_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfMyOfferPriceCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfMyOfferPriceCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfMyOfferPriceCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfMyOfferPriceCCmd::MergeFrom(const NtfMyOfferPriceCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_my_price()) {
      set_my_price(from.my_price());
    }
    if (from.has_signup_id()) {
      set_signup_id(from.signup_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfMyOfferPriceCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfMyOfferPriceCCmd::CopyFrom(const NtfMyOfferPriceCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfMyOfferPriceCCmd::IsInitialized() const {

  return true;
}

void NtfMyOfferPriceCCmd::Swap(NtfMyOfferPriceCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(batchid_, other->batchid_);
    std::swap(itemid_, other->itemid_);
    std::swap(my_price_, other->my_price_);
    std::swap(signup_id_, other->signup_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfMyOfferPriceCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfMyOfferPriceCCmd_descriptor_;
  metadata.reflection = NtfMyOfferPriceCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfNextAuctionInfoCCmd::kCmdFieldNumber;
const int NtfNextAuctionInfoCCmd::kParamFieldNumber;
const int NtfNextAuctionInfoCCmd::kBatchidFieldNumber;
const int NtfNextAuctionInfoCCmd::kItemidFieldNumber;
const int NtfNextAuctionInfoCCmd::kLastItemidFieldNumber;
const int NtfNextAuctionInfoCCmd::kBasePriceFieldNumber;
const int NtfNextAuctionInfoCCmd::kStartTimeFieldNumber;
const int NtfNextAuctionInfoCCmd::kSignupIdFieldNumber;
const int NtfNextAuctionInfoCCmd::kLastSignupIdFieldNumber;
#endif  // !_MSC_VER

NtfNextAuctionInfoCCmd::NtfNextAuctionInfoCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfNextAuctionInfoCCmd)
}

void NtfNextAuctionInfoCCmd::InitAsDefaultInstance() {
}

NtfNextAuctionInfoCCmd::NtfNextAuctionInfoCCmd(const NtfNextAuctionInfoCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfNextAuctionInfoCCmd)
}

void NtfNextAuctionInfoCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 16;
  batchid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  last_itemid_ = 0u;
  base_price_ = GOOGLE_ULONGLONG(0);
  start_time_ = 0u;
  signup_id_ = GOOGLE_ULONGLONG(0);
  last_signup_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfNextAuctionInfoCCmd::~NtfNextAuctionInfoCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfNextAuctionInfoCCmd)
  SharedDtor();
}

void NtfNextAuctionInfoCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfNextAuctionInfoCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfNextAuctionInfoCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfNextAuctionInfoCCmd_descriptor_;
}

const NtfNextAuctionInfoCCmd& NtfNextAuctionInfoCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

NtfNextAuctionInfoCCmd* NtfNextAuctionInfoCCmd::default_instance_ = NULL;

NtfNextAuctionInfoCCmd* NtfNextAuctionInfoCCmd::New() const {
  return new NtfNextAuctionInfoCCmd;
}

void NtfNextAuctionInfoCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NtfNextAuctionInfoCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(batchid_, signup_id_);
    cmd_ = 63;
    param_ = 16;
    start_time_ = 0u;
  }
  last_signup_id_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfNextAuctionInfoCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfNextAuctionInfoCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_NEXT_AUCTION_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_batchid;
        break;
      }

      // optional uint64 batchid = 3;
      case 3: {
        if (tag == 24) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 4;
      case 4: {
        if (tag == 32) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_last_itemid;
        break;
      }

      // optional uint32 last_itemid = 5;
      case 5: {
        if (tag == 40) {
         parse_last_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_itemid_)));
          set_has_last_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_base_price;
        break;
      }

      // optional uint64 base_price = 6;
      case 6: {
        if (tag == 48) {
         parse_base_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_price_)));
          set_has_base_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 7;
      case 7: {
        if (tag == 56) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_signup_id;
        break;
      }

      // optional uint64 signup_id = 8;
      case 8: {
        if (tag == 64) {
         parse_signup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signup_id_)));
          set_has_signup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_last_signup_id;
        break;
      }

      // optional uint64 last_signup_id = 9;
      case 9: {
        if (tag == 72) {
         parse_last_signup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_signup_id_)));
          set_has_last_signup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfNextAuctionInfoCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfNextAuctionInfoCCmd)
  return false;
#undef DO_
}

void NtfNextAuctionInfoCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfNextAuctionInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_NEXT_AUCTION_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 batchid = 3;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->batchid(), output);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemid(), output);
  }

  // optional uint32 last_itemid = 5;
  if (has_last_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_itemid(), output);
  }

  // optional uint64 base_price = 6;
  if (has_base_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->base_price(), output);
  }

  // optional uint32 start_time = 7;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->start_time(), output);
  }

  // optional uint64 signup_id = 8;
  if (has_signup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->signup_id(), output);
  }

  // optional uint64 last_signup_id = 9;
  if (has_last_signup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->last_signup_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfNextAuctionInfoCCmd)
}

::google::protobuf::uint8* NtfNextAuctionInfoCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfNextAuctionInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_NEXT_AUCTION_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 batchid = 3;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->batchid(), target);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemid(), target);
  }

  // optional uint32 last_itemid = 5;
  if (has_last_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_itemid(), target);
  }

  // optional uint64 base_price = 6;
  if (has_base_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->base_price(), target);
  }

  // optional uint32 start_time = 7;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->start_time(), target);
  }

  // optional uint64 signup_id = 8;
  if (has_signup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->signup_id(), target);
  }

  // optional uint64 last_signup_id = 9;
  if (has_last_signup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->last_signup_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfNextAuctionInfoCCmd)
  return target;
}

int NtfNextAuctionInfoCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_NEXT_AUCTION_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 batchid = 3;
    if (has_batchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batchid());
    }

    // optional uint32 itemid = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 last_itemid = 5;
    if (has_last_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_itemid());
    }

    // optional uint64 base_price = 6;
    if (has_base_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_price());
    }

    // optional uint32 start_time = 7;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint64 signup_id = 8;
    if (has_signup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signup_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 last_signup_id = 9;
    if (has_last_signup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_signup_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfNextAuctionInfoCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfNextAuctionInfoCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfNextAuctionInfoCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfNextAuctionInfoCCmd::MergeFrom(const NtfNextAuctionInfoCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_last_itemid()) {
      set_last_itemid(from.last_itemid());
    }
    if (from.has_base_price()) {
      set_base_price(from.base_price());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_signup_id()) {
      set_signup_id(from.signup_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_signup_id()) {
      set_last_signup_id(from.last_signup_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfNextAuctionInfoCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfNextAuctionInfoCCmd::CopyFrom(const NtfNextAuctionInfoCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfNextAuctionInfoCCmd::IsInitialized() const {

  return true;
}

void NtfNextAuctionInfoCCmd::Swap(NtfNextAuctionInfoCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(batchid_, other->batchid_);
    std::swap(itemid_, other->itemid_);
    std::swap(last_itemid_, other->last_itemid_);
    std::swap(base_price_, other->base_price_);
    std::swap(start_time_, other->start_time_);
    std::swap(signup_id_, other->signup_id_);
    std::swap(last_signup_id_, other->last_signup_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfNextAuctionInfoCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfNextAuctionInfoCCmd_descriptor_;
  metadata.reflection = NtfNextAuctionInfoCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAuctionInfoCCmd::kCmdFieldNumber;
const int ReqAuctionInfoCCmd::kParamFieldNumber;
#endif  // !_MSC_VER

ReqAuctionInfoCCmd::ReqAuctionInfoCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqAuctionInfoCCmd)
}

void ReqAuctionInfoCCmd::InitAsDefaultInstance() {
}

ReqAuctionInfoCCmd::ReqAuctionInfoCCmd(const ReqAuctionInfoCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqAuctionInfoCCmd)
}

void ReqAuctionInfoCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 17;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAuctionInfoCCmd::~ReqAuctionInfoCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqAuctionInfoCCmd)
  SharedDtor();
}

void ReqAuctionInfoCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAuctionInfoCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAuctionInfoCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAuctionInfoCCmd_descriptor_;
}

const ReqAuctionInfoCCmd& ReqAuctionInfoCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

ReqAuctionInfoCCmd* ReqAuctionInfoCCmd::default_instance_ = NULL;

ReqAuctionInfoCCmd* ReqAuctionInfoCCmd::New() const {
  return new ReqAuctionInfoCCmd;
}

void ReqAuctionInfoCCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 63;
    param_ = 17;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAuctionInfoCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqAuctionInfoCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_ACUTION_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqAuctionInfoCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqAuctionInfoCCmd)
  return false;
#undef DO_
}

void ReqAuctionInfoCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqAuctionInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_ACUTION_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqAuctionInfoCCmd)
}

::google::protobuf::uint8* ReqAuctionInfoCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqAuctionInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_ACUTION_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqAuctionInfoCCmd)
  return target;
}

int ReqAuctionInfoCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_ACUTION_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAuctionInfoCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAuctionInfoCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAuctionInfoCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAuctionInfoCCmd::MergeFrom(const ReqAuctionInfoCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAuctionInfoCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAuctionInfoCCmd::CopyFrom(const ReqAuctionInfoCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAuctionInfoCCmd::IsInitialized() const {

  return true;
}

void ReqAuctionInfoCCmd::Swap(ReqAuctionInfoCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAuctionInfoCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAuctionInfoCCmd_descriptor_;
  metadata.reflection = ReqAuctionInfoCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfCurAuctionInfoCCmd::kCmdFieldNumber;
const int NtfCurAuctionInfoCCmd::kParamFieldNumber;
const int NtfCurAuctionInfoCCmd::kItemidFieldNumber;
#endif  // !_MSC_VER

NtfCurAuctionInfoCCmd::NtfCurAuctionInfoCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfCurAuctionInfoCCmd)
}

void NtfCurAuctionInfoCCmd::InitAsDefaultInstance() {
}

NtfCurAuctionInfoCCmd::NtfCurAuctionInfoCCmd(const NtfCurAuctionInfoCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfCurAuctionInfoCCmd)
}

void NtfCurAuctionInfoCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 18;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfCurAuctionInfoCCmd::~NtfCurAuctionInfoCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfCurAuctionInfoCCmd)
  SharedDtor();
}

void NtfCurAuctionInfoCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfCurAuctionInfoCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfCurAuctionInfoCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfCurAuctionInfoCCmd_descriptor_;
}

const NtfCurAuctionInfoCCmd& NtfCurAuctionInfoCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

NtfCurAuctionInfoCCmd* NtfCurAuctionInfoCCmd::default_instance_ = NULL;

NtfCurAuctionInfoCCmd* NtfCurAuctionInfoCCmd::New() const {
  return new NtfCurAuctionInfoCCmd;
}

void NtfCurAuctionInfoCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 63;
    param_ = 18;
    itemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfCurAuctionInfoCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfCurAuctionInfoCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_CUR_AUCTION_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 3;
      case 3: {
        if (tag == 24) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfCurAuctionInfoCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfCurAuctionInfoCCmd)
  return false;
#undef DO_
}

void NtfCurAuctionInfoCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfCurAuctionInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_CUR_AUCTION_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfCurAuctionInfoCCmd)
}

::google::protobuf::uint8* NtfCurAuctionInfoCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfCurAuctionInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_CUR_AUCTION_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 itemid = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfCurAuctionInfoCCmd)
  return target;
}

int NtfCurAuctionInfoCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_CUR_AUCTION_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfCurAuctionInfoCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfCurAuctionInfoCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfCurAuctionInfoCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfCurAuctionInfoCCmd::MergeFrom(const NtfCurAuctionInfoCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfCurAuctionInfoCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfCurAuctionInfoCCmd::CopyFrom(const NtfCurAuctionInfoCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfCurAuctionInfoCCmd::IsInitialized() const {

  return true;
}

void NtfCurAuctionInfoCCmd::Swap(NtfCurAuctionInfoCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfCurAuctionInfoCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfCurAuctionInfoCCmd_descriptor_;
  metadata.reflection = NtfCurAuctionInfoCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfOverTakePriceCCmd::kCmdFieldNumber;
const int NtfOverTakePriceCCmd::kParamFieldNumber;
#endif  // !_MSC_VER

NtfOverTakePriceCCmd::NtfOverTakePriceCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfOverTakePriceCCmd)
}

void NtfOverTakePriceCCmd::InitAsDefaultInstance() {
}

NtfOverTakePriceCCmd::NtfOverTakePriceCCmd(const NtfOverTakePriceCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfOverTakePriceCCmd)
}

void NtfOverTakePriceCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 19;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfOverTakePriceCCmd::~NtfOverTakePriceCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfOverTakePriceCCmd)
  SharedDtor();
}

void NtfOverTakePriceCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfOverTakePriceCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfOverTakePriceCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfOverTakePriceCCmd_descriptor_;
}

const NtfOverTakePriceCCmd& NtfOverTakePriceCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

NtfOverTakePriceCCmd* NtfOverTakePriceCCmd::default_instance_ = NULL;

NtfOverTakePriceCCmd* NtfOverTakePriceCCmd::New() const {
  return new NtfOverTakePriceCCmd;
}

void NtfOverTakePriceCCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 63;
    param_ = 19;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfOverTakePriceCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfOverTakePriceCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_OVERTAKE_PRICE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfOverTakePriceCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfOverTakePriceCCmd)
  return false;
#undef DO_
}

void NtfOverTakePriceCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfOverTakePriceCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_OVERTAKE_PRICE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfOverTakePriceCCmd)
}

::google::protobuf::uint8* NtfOverTakePriceCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfOverTakePriceCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_OVERTAKE_PRICE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfOverTakePriceCCmd)
  return target;
}

int NtfOverTakePriceCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_OVERTAKE_PRICE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfOverTakePriceCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfOverTakePriceCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfOverTakePriceCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfOverTakePriceCCmd::MergeFrom(const NtfOverTakePriceCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfOverTakePriceCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfOverTakePriceCCmd::CopyFrom(const NtfOverTakePriceCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfOverTakePriceCCmd::IsInitialized() const {

  return true;
}

void NtfOverTakePriceCCmd::Swap(NtfOverTakePriceCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfOverTakePriceCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfOverTakePriceCCmd_descriptor_;
  metadata.reflection = NtfOverTakePriceCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMyTradedPriceCCmd::kCmdFieldNumber;
const int ReqMyTradedPriceCCmd::kParamFieldNumber;
const int ReqMyTradedPriceCCmd::kBatchidFieldNumber;
const int ReqMyTradedPriceCCmd::kItemidFieldNumber;
const int ReqMyTradedPriceCCmd::kMyPriceFieldNumber;
const int ReqMyTradedPriceCCmd::kSignupIdFieldNumber;
#endif  // !_MSC_VER

ReqMyTradedPriceCCmd::ReqMyTradedPriceCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqMyTradedPriceCCmd)
}

void ReqMyTradedPriceCCmd::InitAsDefaultInstance() {
}

ReqMyTradedPriceCCmd::ReqMyTradedPriceCCmd(const ReqMyTradedPriceCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqMyTradedPriceCCmd)
}

void ReqMyTradedPriceCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 20;
  batchid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  my_price_ = GOOGLE_ULONGLONG(0);
  signup_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMyTradedPriceCCmd::~ReqMyTradedPriceCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqMyTradedPriceCCmd)
  SharedDtor();
}

void ReqMyTradedPriceCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqMyTradedPriceCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMyTradedPriceCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMyTradedPriceCCmd_descriptor_;
}

const ReqMyTradedPriceCCmd& ReqMyTradedPriceCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

ReqMyTradedPriceCCmd* ReqMyTradedPriceCCmd::default_instance_ = NULL;

ReqMyTradedPriceCCmd* ReqMyTradedPriceCCmd::New() const {
  return new ReqMyTradedPriceCCmd;
}

void ReqMyTradedPriceCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqMyTradedPriceCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(batchid_, itemid_);
    cmd_ = 63;
    param_ = 20;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMyTradedPriceCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqMyTradedPriceCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_MY_TRADED_PRICE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_batchid;
        break;
      }

      // optional uint64 batchid = 3;
      case 3: {
        if (tag == 24) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 4;
      case 4: {
        if (tag == 32) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_my_price;
        break;
      }

      // optional uint64 my_price = 5;
      case 5: {
        if (tag == 40) {
         parse_my_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &my_price_)));
          set_has_my_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_signup_id;
        break;
      }

      // optional uint64 signup_id = 6;
      case 6: {
        if (tag == 48) {
         parse_signup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signup_id_)));
          set_has_signup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqMyTradedPriceCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqMyTradedPriceCCmd)
  return false;
#undef DO_
}

void ReqMyTradedPriceCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqMyTradedPriceCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_MY_TRADED_PRICE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 batchid = 3;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->batchid(), output);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemid(), output);
  }

  // optional uint64 my_price = 5;
  if (has_my_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->my_price(), output);
  }

  // optional uint64 signup_id = 6;
  if (has_signup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->signup_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqMyTradedPriceCCmd)
}

::google::protobuf::uint8* ReqMyTradedPriceCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqMyTradedPriceCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_MY_TRADED_PRICE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 batchid = 3;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->batchid(), target);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemid(), target);
  }

  // optional uint64 my_price = 5;
  if (has_my_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->my_price(), target);
  }

  // optional uint64 signup_id = 6;
  if (has_signup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->signup_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqMyTradedPriceCCmd)
  return target;
}

int ReqMyTradedPriceCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_MY_TRADED_PRICE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 batchid = 3;
    if (has_batchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batchid());
    }

    // optional uint32 itemid = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint64 my_price = 5;
    if (has_my_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->my_price());
    }

    // optional uint64 signup_id = 6;
    if (has_signup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signup_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMyTradedPriceCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMyTradedPriceCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMyTradedPriceCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMyTradedPriceCCmd::MergeFrom(const ReqMyTradedPriceCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_my_price()) {
      set_my_price(from.my_price());
    }
    if (from.has_signup_id()) {
      set_signup_id(from.signup_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMyTradedPriceCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMyTradedPriceCCmd::CopyFrom(const ReqMyTradedPriceCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMyTradedPriceCCmd::IsInitialized() const {

  return true;
}

void ReqMyTradedPriceCCmd::Swap(ReqMyTradedPriceCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(batchid_, other->batchid_);
    std::swap(itemid_, other->itemid_);
    std::swap(my_price_, other->my_price_);
    std::swap(signup_id_, other->signup_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMyTradedPriceCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMyTradedPriceCCmd_descriptor_;
  metadata.reflection = ReqMyTradedPriceCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfMaskPriceCCmd::kCmdFieldNumber;
const int NtfMaskPriceCCmd::kParamFieldNumber;
const int NtfMaskPriceCCmd::kBatchidFieldNumber;
const int NtfMaskPriceCCmd::kItemidFieldNumber;
const int NtfMaskPriceCCmd::kMaskPriceFieldNumber;
const int NtfMaskPriceCCmd::kSignupIdFieldNumber;
#endif  // !_MSC_VER

NtfMaskPriceCCmd::NtfMaskPriceCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfMaskPriceCCmd)
}

void NtfMaskPriceCCmd::InitAsDefaultInstance() {
}

NtfMaskPriceCCmd::NtfMaskPriceCCmd(const NtfMaskPriceCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfMaskPriceCCmd)
}

void NtfMaskPriceCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 21;
  batchid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  mask_price_ = 0u;
  signup_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfMaskPriceCCmd::~NtfMaskPriceCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfMaskPriceCCmd)
  SharedDtor();
}

void NtfMaskPriceCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfMaskPriceCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfMaskPriceCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfMaskPriceCCmd_descriptor_;
}

const NtfMaskPriceCCmd& NtfMaskPriceCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

NtfMaskPriceCCmd* NtfMaskPriceCCmd::default_instance_ = NULL;

NtfMaskPriceCCmd* NtfMaskPriceCCmd::New() const {
  return new NtfMaskPriceCCmd;
}

void NtfMaskPriceCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NtfMaskPriceCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(batchid_, signup_id_);
    cmd_ = 63;
    param_ = 21;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfMaskPriceCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfMaskPriceCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MASK_PRICE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_batchid;
        break;
      }

      // optional uint64 batchid = 3;
      case 3: {
        if (tag == 24) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 4;
      case 4: {
        if (tag == 32) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mask_price;
        break;
      }

      // optional uint32 mask_price = 5;
      case 5: {
        if (tag == 40) {
         parse_mask_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_price_)));
          set_has_mask_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_signup_id;
        break;
      }

      // optional uint64 signup_id = 6;
      case 6: {
        if (tag == 48) {
         parse_signup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signup_id_)));
          set_has_signup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfMaskPriceCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfMaskPriceCCmd)
  return false;
#undef DO_
}

void NtfMaskPriceCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfMaskPriceCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MASK_PRICE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 batchid = 3;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->batchid(), output);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemid(), output);
  }

  // optional uint32 mask_price = 5;
  if (has_mask_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mask_price(), output);
  }

  // optional uint64 signup_id = 6;
  if (has_signup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->signup_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfMaskPriceCCmd)
}

::google::protobuf::uint8* NtfMaskPriceCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfMaskPriceCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MASK_PRICE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 batchid = 3;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->batchid(), target);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemid(), target);
  }

  // optional uint32 mask_price = 5;
  if (has_mask_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mask_price(), target);
  }

  // optional uint64 signup_id = 6;
  if (has_signup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->signup_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfMaskPriceCCmd)
  return target;
}

int NtfMaskPriceCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MASK_PRICE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 batchid = 3;
    if (has_batchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batchid());
    }

    // optional uint32 itemid = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 mask_price = 5;
    if (has_mask_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mask_price());
    }

    // optional uint64 signup_id = 6;
    if (has_signup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signup_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfMaskPriceCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfMaskPriceCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfMaskPriceCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfMaskPriceCCmd::MergeFrom(const NtfMaskPriceCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_mask_price()) {
      set_mask_price(from.mask_price());
    }
    if (from.has_signup_id()) {
      set_signup_id(from.signup_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfMaskPriceCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfMaskPriceCCmd::CopyFrom(const NtfMaskPriceCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfMaskPriceCCmd::IsInitialized() const {

  return true;
}

void NtfMaskPriceCCmd::Swap(NtfMaskPriceCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(batchid_, other->batchid_);
    std::swap(itemid_, other->itemid_);
    std::swap(mask_price_, other->mask_price_);
    std::swap(signup_id_, other->signup_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfMaskPriceCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfMaskPriceCCmd_descriptor_;
  metadata.reflection = NtfMaskPriceCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionDialogCCmd::kCmdFieldNumber;
const int AuctionDialogCCmd::kParamFieldNumber;
const int AuctionDialogCCmd::kTypeFieldNumber;
const int AuctionDialogCCmd::kMsgIdFieldNumber;
const int AuctionDialogCCmd::kParamsFieldNumber;
#endif  // !_MSC_VER

AuctionDialogCCmd::AuctionDialogCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AuctionDialogCCmd)
}

void AuctionDialogCCmd::InitAsDefaultInstance() {
}

AuctionDialogCCmd::AuctionDialogCCmd(const AuctionDialogCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AuctionDialogCCmd)
}

void AuctionDialogCCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 63;
  param_ = 22;
  type_ = 0;
  msg_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionDialogCCmd::~AuctionDialogCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AuctionDialogCCmd)
  SharedDtor();
}

void AuctionDialogCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionDialogCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionDialogCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionDialogCCmd_descriptor_;
}

const AuctionDialogCCmd& AuctionDialogCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionCCmd_2eproto();
  return *default_instance_;
}

AuctionDialogCCmd* AuctionDialogCCmd::default_instance_ = NULL;

AuctionDialogCCmd* AuctionDialogCCmd::New() const {
  return new AuctionDialogCCmd;
}

void AuctionDialogCCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 63;
    param_ = 22;
    type_ = 0;
    msg_id_ = GOOGLE_ULONGLONG(0);
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionDialogCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AuctionDialogCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionCParam param = 2 [default = AUTIONCPARAM_AUCTION_DIALOG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EDialogType type = 3 [default = EDialogType_None];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EDialogType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EDialogType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id;
        break;
      }

      // optional uint64 msg_id = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_params;
        break;
      }

      // repeated string params = 5;
      case 5: {
        if (tag == 42) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->params(this->params_size() - 1).data(),
            this->params(this->params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "params");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AuctionDialogCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AuctionDialogCCmd)
  return false;
#undef DO_
}

void AuctionDialogCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AuctionDialogCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUTIONCPARAM_AUCTION_DIALOG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EDialogType type = 3 [default = EDialogType_None];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 msg_id = 4;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->msg_id(), output);
  }

  // repeated string params = 5;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "params");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AuctionDialogCCmd)
}

::google::protobuf::uint8* AuctionDialogCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AuctionDialogCCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionCParam param = 2 [default = AUTIONCPARAM_AUCTION_DIALOG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EDialogType type = 3 [default = EDialogType_None];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint64 msg_id = 4;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->msg_id(), target);
  }

  // repeated string params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AuctionDialogCCmd)
  return target;
}

int AuctionDialogCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionCParam param = 2 [default = AUTIONCPARAM_AUCTION_DIALOG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EDialogType type = 3 [default = EDialogType_None];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 msg_id = 4;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

  }
  // repeated string params = 5;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionDialogCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionDialogCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionDialogCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionDialogCCmd::MergeFrom(const AuctionDialogCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionDialogCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionDialogCCmd::CopyFrom(const AuctionDialogCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionDialogCCmd::IsInitialized() const {

  return true;
}

void AuctionDialogCCmd::Swap(AuctionDialogCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(msg_id_, other->msg_id_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionDialogCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionDialogCCmd_descriptor_;
  metadata.reflection = AuctionDialogCCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
