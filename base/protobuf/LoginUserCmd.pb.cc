// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginUserCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LoginUserCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* RegResultUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegResultUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateCharUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateCharUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapShotUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapShotUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectRoleUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectRoleUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResultUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResultUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteCharUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteCharUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerTimeUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerTimeUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMDeleteCharUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMDeleteCharUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientInfoUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientInfoUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLoginUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLoginUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLoginParamUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLoginParamUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickParamUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickParamUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelDeleteCharUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelDeleteCharUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientFrameUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientFrameUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SafeDeviceUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SafeDeviceUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfirmAuthorizeUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfirmAuthorizeUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncAuthorizeGateCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncAuthorizeGateCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RealAuthorizeUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RealAuthorizeUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RealAuthorizeServerCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RealAuthorizeServerCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginCmdParam_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_LoginUserCmd_2eproto() {
  protobuf_AddDesc_LoginUserCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LoginUserCmd.proto");
  GOOGLE_CHECK(file != NULL);
  RegResultUserCmd_descriptor_ = file->message_type(0);
  static const int RegResultUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegResultUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegResultUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegResultUserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegResultUserCmd, ret_),
  };
  RegResultUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegResultUserCmd_descriptor_,
      RegResultUserCmd::default_instance_,
      RegResultUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegResultUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegResultUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegResultUserCmd));
  CreateCharUserCmd_descriptor_ = file->message_type(1);
  static const int CreateCharUserCmd_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharUserCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharUserCmd, role_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharUserCmd, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharUserCmd, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharUserCmd, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharUserCmd, clothcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharUserCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharUserCmd, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharUserCmd, version_),
  };
  CreateCharUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateCharUserCmd_descriptor_,
      CreateCharUserCmd::default_instance_,
      CreateCharUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateCharUserCmd));
  SnapShotUserCmd_descriptor_ = file->message_type(2);
  static const int SnapShotUserCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotUserCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotUserCmd, lastselect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotUserCmd, deletechar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotUserCmd, deletecdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotUserCmd, maincharid_),
  };
  SnapShotUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapShotUserCmd_descriptor_,
      SnapShotUserCmd::default_instance_,
      SnapShotUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapShotUserCmd));
  ExtraData_descriptor_ = file->message_type(3);
  static const int ExtraData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraData, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraData, safedevice_),
  };
  ExtraData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraData_descriptor_,
      ExtraData::default_instance_,
      ExtraData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraData));
  SelectRoleUserCmd_descriptor_ = file->message_type(4);
  static const int SelectRoleUserCmd_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, extradata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, ignorepwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, realauthorized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, maxbaselv_),
  };
  SelectRoleUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectRoleUserCmd_descriptor_,
      SelectRoleUserCmd::default_instance_,
      SelectRoleUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRoleUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectRoleUserCmd));
  LoginResultUserCmd_descriptor_ = file->message_type(5);
  static const int LoginResultUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResultUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResultUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResultUserCmd, ret_),
  };
  LoginResultUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResultUserCmd_descriptor_,
      LoginResultUserCmd::default_instance_,
      LoginResultUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResultUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResultUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResultUserCmd));
  DeleteCharUserCmd_descriptor_ = file->message_type(6);
  static const int DeleteCharUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharUserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharUserCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharUserCmd, version_),
  };
  DeleteCharUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteCharUserCmd_descriptor_,
      DeleteCharUserCmd::default_instance_,
      DeleteCharUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteCharUserCmd));
  HeartBeatUserCmd_descriptor_ = file->message_type(7);
  static const int HeartBeatUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatUserCmd, time_),
  };
  HeartBeatUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatUserCmd_descriptor_,
      HeartBeatUserCmd::default_instance_,
      HeartBeatUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatUserCmd));
  ServerTimeUserCmd_descriptor_ = file->message_type(8);
  static const int ServerTimeUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTimeUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTimeUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTimeUserCmd, time_),
  };
  ServerTimeUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerTimeUserCmd_descriptor_,
      ServerTimeUserCmd::default_instance_,
      ServerTimeUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTimeUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTimeUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerTimeUserCmd));
  GMDeleteCharUserCmd_descriptor_ = file->message_type(9);
  static const int GMDeleteCharUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMDeleteCharUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMDeleteCharUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMDeleteCharUserCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMDeleteCharUserCmd, zoneid_),
  };
  GMDeleteCharUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMDeleteCharUserCmd_descriptor_,
      GMDeleteCharUserCmd::default_instance_,
      GMDeleteCharUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMDeleteCharUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMDeleteCharUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMDeleteCharUserCmd));
  ClientInfoUserCmd_descriptor_ = file->message_type(10);
  static const int ClientInfoUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfoUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfoUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfoUserCmd, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfoUserCmd, delay_),
  };
  ClientInfoUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientInfoUserCmd_descriptor_,
      ClientInfoUserCmd::default_instance_,
      ClientInfoUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfoUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfoUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientInfoUserCmd));
  ReqLoginUserCmd_descriptor_ = file->message_type(11);
  static const int ReqLoginUserCmd_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, sha1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, safe_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, authorize_),
  };
  ReqLoginUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLoginUserCmd_descriptor_,
      ReqLoginUserCmd::default_instance_,
      ReqLoginUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLoginUserCmd));
  ReqLoginParamUserCmd_descriptor_ = file->message_type(12);
  static const int ReqLoginParamUserCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginParamUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginParamUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginParamUserCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginParamUserCmd, sha1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginParamUserCmd, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginParamUserCmd, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginParamUserCmd, version_),
  };
  ReqLoginParamUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLoginParamUserCmd_descriptor_,
      ReqLoginParamUserCmd::default_instance_,
      ReqLoginParamUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginParamUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginParamUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLoginParamUserCmd));
  KickParamUserCmd_descriptor_ = file->message_type(13);
  static const int KickParamUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickParamUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickParamUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickParamUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickParamUserCmd, accid_),
  };
  KickParamUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickParamUserCmd_descriptor_,
      KickParamUserCmd::default_instance_,
      KickParamUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickParamUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickParamUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickParamUserCmd));
  CancelDeleteCharUserCmd_descriptor_ = file->message_type(14);
  static const int CancelDeleteCharUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelDeleteCharUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelDeleteCharUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelDeleteCharUserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelDeleteCharUserCmd, accid_),
  };
  CancelDeleteCharUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelDeleteCharUserCmd_descriptor_,
      CancelDeleteCharUserCmd::default_instance_,
      CancelDeleteCharUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelDeleteCharUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelDeleteCharUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelDeleteCharUserCmd));
  ClientFrameUserCmd_descriptor_ = file->message_type(15);
  static const int ClientFrameUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFrameUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFrameUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFrameUserCmd, frame_),
  };
  ClientFrameUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientFrameUserCmd_descriptor_,
      ClientFrameUserCmd::default_instance_,
      ClientFrameUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFrameUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFrameUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientFrameUserCmd));
  SafeDeviceUserCmd_descriptor_ = file->message_type(16);
  static const int SafeDeviceUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeDeviceUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeDeviceUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeDeviceUserCmd, safe_),
  };
  SafeDeviceUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SafeDeviceUserCmd_descriptor_,
      SafeDeviceUserCmd::default_instance_,
      SafeDeviceUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeDeviceUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeDeviceUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SafeDeviceUserCmd));
  ConfirmAuthorizeUserCmd_descriptor_ = file->message_type(17);
  static const int ConfirmAuthorizeUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmAuthorizeUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmAuthorizeUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmAuthorizeUserCmd, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmAuthorizeUserCmd, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmAuthorizeUserCmd, resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmAuthorizeUserCmd, hasset_),
  };
  ConfirmAuthorizeUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfirmAuthorizeUserCmd_descriptor_,
      ConfirmAuthorizeUserCmd::default_instance_,
      ConfirmAuthorizeUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmAuthorizeUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmAuthorizeUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfirmAuthorizeUserCmd));
  SyncAuthorizeGateCmd_descriptor_ = file->message_type(18);
  static const int SyncAuthorizeGateCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeGateCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeGateCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeGateCmd, ignorepwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeGateCmd, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeGateCmd, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeGateCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeGateCmd, resettime_),
  };
  SyncAuthorizeGateCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncAuthorizeGateCmd_descriptor_,
      SyncAuthorizeGateCmd::default_instance_,
      SyncAuthorizeGateCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeGateCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeGateCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncAuthorizeGateCmd));
  RealAuthorizeUserCmd_descriptor_ = file->message_type(19);
  static const int RealAuthorizeUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealAuthorizeUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealAuthorizeUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealAuthorizeUserCmd, authoriz_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealAuthorizeUserCmd, authorized_),
  };
  RealAuthorizeUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RealAuthorizeUserCmd_descriptor_,
      RealAuthorizeUserCmd::default_instance_,
      RealAuthorizeUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealAuthorizeUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealAuthorizeUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RealAuthorizeUserCmd));
  RealAuthorizeServerCmd_descriptor_ = file->message_type(20);
  static const int RealAuthorizeServerCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealAuthorizeServerCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealAuthorizeServerCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealAuthorizeServerCmd, authorized_),
  };
  RealAuthorizeServerCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RealAuthorizeServerCmd_descriptor_,
      RealAuthorizeServerCmd::default_instance_,
      RealAuthorizeServerCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealAuthorizeServerCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealAuthorizeServerCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RealAuthorizeServerCmd));
  LoginCmdParam_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LoginUserCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegResultUserCmd_descriptor_, &RegResultUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateCharUserCmd_descriptor_, &CreateCharUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapShotUserCmd_descriptor_, &SnapShotUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraData_descriptor_, &ExtraData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectRoleUserCmd_descriptor_, &SelectRoleUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResultUserCmd_descriptor_, &LoginResultUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteCharUserCmd_descriptor_, &DeleteCharUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatUserCmd_descriptor_, &HeartBeatUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerTimeUserCmd_descriptor_, &ServerTimeUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMDeleteCharUserCmd_descriptor_, &GMDeleteCharUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientInfoUserCmd_descriptor_, &ClientInfoUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLoginUserCmd_descriptor_, &ReqLoginUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLoginParamUserCmd_descriptor_, &ReqLoginParamUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickParamUserCmd_descriptor_, &KickParamUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelDeleteCharUserCmd_descriptor_, &CancelDeleteCharUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientFrameUserCmd_descriptor_, &ClientFrameUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SafeDeviceUserCmd_descriptor_, &SafeDeviceUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfirmAuthorizeUserCmd_descriptor_, &ConfirmAuthorizeUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncAuthorizeGateCmd_descriptor_, &SyncAuthorizeGateCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RealAuthorizeUserCmd_descriptor_, &RealAuthorizeUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RealAuthorizeServerCmd_descriptor_, &RealAuthorizeServerCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LoginUserCmd_2eproto() {
  delete RegResultUserCmd::default_instance_;
  delete RegResultUserCmd_reflection_;
  delete CreateCharUserCmd::default_instance_;
  delete CreateCharUserCmd_reflection_;
  delete SnapShotUserCmd::default_instance_;
  delete SnapShotUserCmd_reflection_;
  delete ExtraData::default_instance_;
  delete ExtraData_reflection_;
  delete SelectRoleUserCmd::default_instance_;
  delete SelectRoleUserCmd_reflection_;
  delete LoginResultUserCmd::default_instance_;
  delete LoginResultUserCmd_reflection_;
  delete DeleteCharUserCmd::default_instance_;
  delete DeleteCharUserCmd_reflection_;
  delete HeartBeatUserCmd::default_instance_;
  delete HeartBeatUserCmd_reflection_;
  delete ServerTimeUserCmd::default_instance_;
  delete ServerTimeUserCmd_reflection_;
  delete GMDeleteCharUserCmd::default_instance_;
  delete GMDeleteCharUserCmd_reflection_;
  delete ClientInfoUserCmd::default_instance_;
  delete ClientInfoUserCmd_reflection_;
  delete ReqLoginUserCmd::default_instance_;
  delete ReqLoginUserCmd_reflection_;
  delete ReqLoginParamUserCmd::default_instance_;
  delete ReqLoginParamUserCmd_reflection_;
  delete KickParamUserCmd::default_instance_;
  delete KickParamUserCmd_reflection_;
  delete CancelDeleteCharUserCmd::default_instance_;
  delete CancelDeleteCharUserCmd_reflection_;
  delete ClientFrameUserCmd::default_instance_;
  delete ClientFrameUserCmd_reflection_;
  delete SafeDeviceUserCmd::default_instance_;
  delete SafeDeviceUserCmd_reflection_;
  delete ConfirmAuthorizeUserCmd::default_instance_;
  delete ConfirmAuthorizeUserCmd_reflection_;
  delete SyncAuthorizeGateCmd::default_instance_;
  delete SyncAuthorizeGateCmd_reflection_;
  delete RealAuthorizeUserCmd::default_instance_;
  delete RealAuthorizeUserCmd_reflection_;
  delete RealAuthorizeServerCmd::default_instance_;
  delete RealAuthorizeServerCmd_reflection_;
}

void protobuf_AddDesc_LoginUserCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::Cmd::protobuf_AddDesc_ErrorUserCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022LoginUserCmd.proto\022\003Cmd\032\nxCmd.proto\032\021P"
    "rotoCommon.proto\032\022ErrorUserCmd.proto\"\246\001\n"
    "\020RegResultUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\023LOGIN_USER_PROTOCMD\0226\n\005param\030\002 \001(\016"
    "2\022.Cmd.LoginCmdParam:\023REG_RESULT_USER_CM"
    "D\022\r\n\002id\030\003 \002(\r:\0010\022\033\n\003ret\030\004 \002(\0162\016.Cmd.RegE"
    "rrRet\"\227\002\n\021CreateCharUserCmd\022.\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\023LOGIN_USER_PROTOCMD\0227\n\005p"
    "aram\030\002 \001(\0162\022.Cmd.LoginCmdParam:\024CREATE_C"
    "HAR_USER_CMD\022\014\n\004name\030\004 \001(\t\022\020\n\010role_sex\030\005"
    " \001(\r\022\022\n\nprofession\030\006 \001(\r\022\014\n\004hair\030\007 \001(\r\022\021"
    "\n\thaircolor\030\010 \001(\r\022\022\n\nclothcolor\030\t \001(\r\022\r\n"
    "\005accid\030\n \001(\004\022\020\n\010sequence\030\013 \001(\r\022\017\n\007versio"
    "n\030\014 \001(\t\"\354\001\n\017SnapShotUserCmd\022.\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\023LOGIN_USER_PROTOCMD\0224\n\005p"
    "aram\030\002 \001(\0162\022.Cmd.LoginCmdParam:\021SNAPSHOT"
    "_USER_CMD\022!\n\004data\030\003 \003(\0132\023.Cmd.SnapShotDa"
    "taPB\022\022\n\nlastselect\030\004 \001(\004\022\022\n\ndeletechar\030\005"
    " \001(\010\022\024\n\014deletecdtime\030\006 \001(\r\022\022\n\nmaincharid"
    "\030\007 \001(\004\".\n\tExtraData\022\r\n\005phone\030\001 \001(\t\022\022\n\nsa"
    "fedevice\030\002 \001(\010\"\360\002\n\021SelectRoleUserCmd\022.\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\023LOGIN_USER_PROT"
    "OCMD\0227\n\005param\030\002 \001(\0162\022.Cmd.LoginCmdParam:"
    "\024SELECT_ROLE_USER_CMD\022\n\n\002id\030\003 \002(\004\022\016\n\006zon"
    "eID\030\004 \001(\r\022\r\n\005accid\030\005 \001(\004\022\020\n\010deviceid\030\006 \001"
    "(\t\022\014\n\004name\030\007 \001(\t\022\017\n\007version\030\010 \001(\t\022!\n\text"
    "raData\030\t \001(\0132\016.Cmd.ExtraData\022\021\n\tignorepw"
    "d\030\n \001(\010\022\020\n\010password\030\013 \001(\t\022\021\n\tresettime\030\014"
    " \001(\r\022\020\n\010language\030\r \001(\r\022\026\n\016realauthorized"
    "\030\016 \001(\010\022\021\n\tmaxbaselv\030\017 \001(\r\"\216\001\n\022LoginResul"
    "tUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023LOG"
    "IN_USER_PROTOCMD\0228\n\005param\030\002 \001(\0162\022.Cmd.Lo"
    "ginCmdParam:\025LOGIN_RESULT_USER_CMD\022\016\n\003re"
    "t\030\003 \002(\r:\0010\"\250\001\n\021DeleteCharUserCmd\022.\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\023LOGIN_USER_PROTOCMD"
    "\0227\n\005param\030\002 \001(\0162\022.Cmd.LoginCmdParam:\024DEL"
    "ETE_CHAR_USER_CMD\022\n\n\002id\030\003 \001(\004\022\r\n\005accid\030\004"
    " \001(\004\022\017\n\007version\030\005 \001(\t\"\213\001\n\020HeartBeatUserC"
    "md\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023LOGIN_USE"
    "R_PROTOCMD\0226\n\005param\030\002 \001(\0162\022.Cmd.LoginCmd"
    "Param:\023HEART_BEAT_USER_CMD\022\017\n\004time\030\003 \001(\004"
    ":\0010\"\214\001\n\021ServerTimeUserCmd\022.\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\023LOGIN_USER_PROTOCMD\0226\n\005par"
    "am\030\002 \001(\0162\022.Cmd.LoginCmdParam:\023SERVERTIME"
    "_USER_CMD\022\017\n\004time\030\003 \001(\004:\0010\"\246\001\n\023GMDeleteC"
    "harUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023L"
    "OGIN_USER_PROTOCMD\022:\n\005param\030\002 \001(\0162\022.Cmd."
    "LoginCmdParam:\027GM_DELETE_CHAR_USER_CMD\022\020"
    "\n\005accid\030\003 \001(\004:\0010\022\021\n\006zoneid\030\004 \001(\r:\0010\"\232\001\n\021"
    "ClientInfoUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\023LOGIN_USER_PROTOCMD\0227\n\005param\030\002 \001(\016"
    "2\022.Cmd.LoginCmdParam:\024CLIENT_INFO_USER_C"
    "MD\022\n\n\002ip\030\003 \001(\t\022\020\n\005delay\030\004 \001(\r:\0010\"\325\002\n\017Req"
    "LoginUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\023LOGIN_USER_PROTOCMD\0225\n\005param\030\002 \001(\0162\022.Cm"
    "d.LoginCmdParam:\022REQ_LOGIN_USER_CMD\022\020\n\005a"
    "ccid\030\003 \001(\004:\0010\022\014\n\004sha1\030\004 \001(\t\022\021\n\006zoneid\030\005 "
    "\001(\r:\0010\022\024\n\ttimestamp\030\006 \001(\r:\0010\022\017\n\007version\030"
    "\007 \001(\t\022\016\n\006domain\030\010 \001(\t\022\n\n\002ip\030\t \001(\t\022\016\n\006dev"
    "ice\030\n \001(\t\022\r\n\005phone\030\013 \001(\t\022\023\n\013safe_device\030"
    "\014 \001(\t\022\020\n\010language\030\r \001(\r\022\014\n\004site\030\016 \001(\r\022\021\n"
    "\tauthorize\030\017 \001(\t\"\334\001\n\024ReqLoginParamUserCm"
    "d\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023LOGIN_USER"
    "_PROTOCMD\022;\n\005param\030\002 \001(\0162\022.Cmd.LoginCmdP"
    "aram:\030REQ_LOGIN_PARAM_USER_CMD\022\020\n\005accid\030"
    "\003 \001(\004:\0010\022\014\n\004sha1\030\004 \001(\t\022\024\n\ttimestamp\030\005 \001("
    "\r:\0010\022\r\n\005phone\030\006 \001(\t\022\022\n\007version\030\007 \001(\r:\0010\""
    "\237\001\n\020KickParamUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\023LOGIN_USER_PROTOCMD\0226\n\005param\030\002 "
    "\001(\0162\022.Cmd.LoginCmdParam:\023KICK_PARAM_USER"
    "_CMD\022\021\n\006charid\030\003 \001(\004:\0010\022\020\n\005accid\030\004 \001(\004:\001"
    "0\"\244\001\n\027CancelDeleteCharUserCmd\022.\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\023LOGIN_USER_PROTOCMD\022>\n"
    "\005param\030\002 \001(\0162\022.Cmd.LoginCmdParam:\033CANCEL"
    "_DELETE_CHAR_USER_CMD\022\n\n\002id\030\003 \001(\004\022\r\n\005acc"
    "id\030\004 \001(\004\"\215\001\n\022ClientFrameUserCmd\022.\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\023LOGIN_USER_PROTOCMD\022"
    "8\n\005param\030\002 \001(\0162\022.Cmd.LoginCmdParam:\025CLIE"
    "NT_FRAME_USER_CMD\022\r\n\005frame\030\003 \001(\r\"\212\001\n\021Saf"
    "eDeviceUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\023LOGIN_USER_PROTOCMD\0227\n\005param\030\002 \001(\0162\022."
    "Cmd.LoginCmdParam:\024SAFE_DEVICE_USER_CMD\022"
    "\014\n\004safe\030\003 \001(\010\"\316\001\n\027ConfirmAuthorizeUserCm"
    "d\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023LOGIN_USER"
    "_PROTOCMD\022=\n\005param\030\002 \001(\0162\022.Cmd.LoginCmdP"
    "aram:\032CONFIRM_AUTHORIZE_USER_CMD\022\020\n\010pass"
    "word\030\003 \001(\t\022\017\n\007success\030\004 \001(\010\022\021\n\tresettime"
    "\030\005 \001(\r\022\016\n\006hasset\030\006 \001(\010\"\332\001\n\024SyncAuthorize"
    "GateCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023LOGI"
    "N_USER_PROTOCMD\022:\n\005param\030\002 \001(\0162\022.Cmd.Log"
    "inCmdParam:\027SYNC_AUTHORIZE_GATE_CMD\022\021\n\ti"
    "gnorepwd\030\003 \001(\010\022\020\n\010password\030\004 \001(\t\022\017\n\007vers"
    "ion\030\005 \001(\t\022\r\n\005accid\030\006 \001(\004\022\021\n\tresettime\030\007 "
    "\001(\r\"\256\001\n\024RealAuthorizeUserCmd\022.\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\023LOGIN_USER_PROTOCMD\022:\n\005"
    "param\030\002 \001(\0162\022.Cmd.LoginCmdParam:\027REAL_AU"
    "THORIZE_USER_CMD\022\026\n\016authoriz_state\030\003 \001(\t"
    "\022\022\n\nauthorized\030\004 \001(\010\"\233\001\n\026RealAuthorizeSe"
    "rverCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023LOGI"
    "N_USER_PROTOCMD\022=\n\005param\030\002 \001(\0162\022.Cmd.Log"
    "inCmdParam:\032REAL_AUTHORIZE_SEERVER_CMD\022\022"
    "\n\nauthorized\030\003 \001(\010*\367\004\n\rLoginCmdParam\022\030\n\024"
    "ACCPASS_REG_USER_CMD\020\001\022\024\n\020GATE_IP_USER_C"
    "MD\020\002\022\025\n\021REG_GATE_USER_CMD\020\003\022\027\n\023REG_RESUL"
    "T_USER_CMD\020\004\022\030\n\024CREATE_CHAR_USER_CMD\020\005\022\025"
    "\n\021SNAPSHOT_USER_CMD\020\006\022\030\n\024SELECT_ROLE_USE"
    "R_CMD\020\007\022\031\n\025LOGIN_RESULT_USER_CMD\020\010\022\030\n\024DE"
    "LETE_CHAR_USER_CMD\020\t\022\027\n\023HEART_BEAT_USER_"
    "CMD\020\n\022\027\n\023SERVERTIME_USER_CMD\020\013\022\033\n\027GM_DEL"
    "ETE_CHAR_USER_CMD\020\014\022\030\n\024CLIENT_INFO_USER_"
    "CMD\020\r\022\026\n\022REQ_LOGIN_USER_CMD\020\016\022\034\n\030REQ_LOG"
    "IN_PARAM_USER_CMD\020\017\022\027\n\023KICK_PARAM_USER_C"
    "MD\020\020\022\037\n\033CANCEL_DELETE_CHAR_USER_CMD\020\021\022\031\n"
    "\025CLIENT_FRAME_USER_CMD\020\022\022\030\n\024SAFE_DEVICE_"
    "USER_CMD\020\023\022\036\n\032CONFIRM_AUTHORIZE_USER_CMD"
    "\020\024\022\033\n\027SYNC_AUTHORIZE_GATE_CMD\020\025\022\033\n\027REAL_"
    "AUTHORIZE_USER_CMD\020\026\022\036\n\032REAL_AUTHORIZE_S"
    "EERVER_CMD\020\027", 4692);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LoginUserCmd.proto", &protobuf_RegisterTypes);
  RegResultUserCmd::default_instance_ = new RegResultUserCmd();
  CreateCharUserCmd::default_instance_ = new CreateCharUserCmd();
  SnapShotUserCmd::default_instance_ = new SnapShotUserCmd();
  ExtraData::default_instance_ = new ExtraData();
  SelectRoleUserCmd::default_instance_ = new SelectRoleUserCmd();
  LoginResultUserCmd::default_instance_ = new LoginResultUserCmd();
  DeleteCharUserCmd::default_instance_ = new DeleteCharUserCmd();
  HeartBeatUserCmd::default_instance_ = new HeartBeatUserCmd();
  ServerTimeUserCmd::default_instance_ = new ServerTimeUserCmd();
  GMDeleteCharUserCmd::default_instance_ = new GMDeleteCharUserCmd();
  ClientInfoUserCmd::default_instance_ = new ClientInfoUserCmd();
  ReqLoginUserCmd::default_instance_ = new ReqLoginUserCmd();
  ReqLoginParamUserCmd::default_instance_ = new ReqLoginParamUserCmd();
  KickParamUserCmd::default_instance_ = new KickParamUserCmd();
  CancelDeleteCharUserCmd::default_instance_ = new CancelDeleteCharUserCmd();
  ClientFrameUserCmd::default_instance_ = new ClientFrameUserCmd();
  SafeDeviceUserCmd::default_instance_ = new SafeDeviceUserCmd();
  ConfirmAuthorizeUserCmd::default_instance_ = new ConfirmAuthorizeUserCmd();
  SyncAuthorizeGateCmd::default_instance_ = new SyncAuthorizeGateCmd();
  RealAuthorizeUserCmd::default_instance_ = new RealAuthorizeUserCmd();
  RealAuthorizeServerCmd::default_instance_ = new RealAuthorizeServerCmd();
  RegResultUserCmd::default_instance_->InitAsDefaultInstance();
  CreateCharUserCmd::default_instance_->InitAsDefaultInstance();
  SnapShotUserCmd::default_instance_->InitAsDefaultInstance();
  ExtraData::default_instance_->InitAsDefaultInstance();
  SelectRoleUserCmd::default_instance_->InitAsDefaultInstance();
  LoginResultUserCmd::default_instance_->InitAsDefaultInstance();
  DeleteCharUserCmd::default_instance_->InitAsDefaultInstance();
  HeartBeatUserCmd::default_instance_->InitAsDefaultInstance();
  ServerTimeUserCmd::default_instance_->InitAsDefaultInstance();
  GMDeleteCharUserCmd::default_instance_->InitAsDefaultInstance();
  ClientInfoUserCmd::default_instance_->InitAsDefaultInstance();
  ReqLoginUserCmd::default_instance_->InitAsDefaultInstance();
  ReqLoginParamUserCmd::default_instance_->InitAsDefaultInstance();
  KickParamUserCmd::default_instance_->InitAsDefaultInstance();
  CancelDeleteCharUserCmd::default_instance_->InitAsDefaultInstance();
  ClientFrameUserCmd::default_instance_->InitAsDefaultInstance();
  SafeDeviceUserCmd::default_instance_->InitAsDefaultInstance();
  ConfirmAuthorizeUserCmd::default_instance_->InitAsDefaultInstance();
  SyncAuthorizeGateCmd::default_instance_->InitAsDefaultInstance();
  RealAuthorizeUserCmd::default_instance_->InitAsDefaultInstance();
  RealAuthorizeServerCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LoginUserCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LoginUserCmd_2eproto {
  StaticDescriptorInitializer_LoginUserCmd_2eproto() {
    protobuf_AddDesc_LoginUserCmd_2eproto();
  }
} static_descriptor_initializer_LoginUserCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* LoginCmdParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginCmdParam_descriptor_;
}
bool LoginCmdParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RegResultUserCmd::kCmdFieldNumber;
const int RegResultUserCmd::kParamFieldNumber;
const int RegResultUserCmd::kIdFieldNumber;
const int RegResultUserCmd::kRetFieldNumber;
#endif  // !_MSC_VER

RegResultUserCmd::RegResultUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RegResultUserCmd)
}

void RegResultUserCmd::InitAsDefaultInstance() {
}

RegResultUserCmd::RegResultUserCmd(const RegResultUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RegResultUserCmd)
}

void RegResultUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 4;
  id_ = 0u;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegResultUserCmd::~RegResultUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RegResultUserCmd)
  SharedDtor();
}

void RegResultUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegResultUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegResultUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegResultUserCmd_descriptor_;
}

const RegResultUserCmd& RegResultUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

RegResultUserCmd* RegResultUserCmd::default_instance_ = NULL;

RegResultUserCmd* RegResultUserCmd::New() const {
  return new RegResultUserCmd;
}

void RegResultUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RegResultUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, ret_);
    cmd_ = 1;
    param_ = 4;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegResultUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RegResultUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = REG_RESULT_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // required .Cmd.RegErrRet ret = 4;
      case 4: {
        if (tag == 32) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RegErrRet_IsValid(value)) {
            set_ret(static_cast< ::Cmd::RegErrRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RegResultUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RegResultUserCmd)
  return false;
#undef DO_
}

void RegResultUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RegResultUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = REG_RESULT_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // required .Cmd.RegErrRet ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RegResultUserCmd)
}

::google::protobuf::uint8* RegResultUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RegResultUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = REG_RESULT_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // required .Cmd.RegErrRet ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RegResultUserCmd)
  return target;
}

int RegResultUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = REG_RESULT_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .Cmd.RegErrRet ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegResultUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegResultUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegResultUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegResultUserCmd::MergeFrom(const RegResultUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegResultUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegResultUserCmd::CopyFrom(const RegResultUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegResultUserCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void RegResultUserCmd::Swap(RegResultUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegResultUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegResultUserCmd_descriptor_;
  metadata.reflection = RegResultUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateCharUserCmd::kCmdFieldNumber;
const int CreateCharUserCmd::kParamFieldNumber;
const int CreateCharUserCmd::kNameFieldNumber;
const int CreateCharUserCmd::kRoleSexFieldNumber;
const int CreateCharUserCmd::kProfessionFieldNumber;
const int CreateCharUserCmd::kHairFieldNumber;
const int CreateCharUserCmd::kHaircolorFieldNumber;
const int CreateCharUserCmd::kClothcolorFieldNumber;
const int CreateCharUserCmd::kAccidFieldNumber;
const int CreateCharUserCmd::kSequenceFieldNumber;
const int CreateCharUserCmd::kVersionFieldNumber;
#endif  // !_MSC_VER

CreateCharUserCmd::CreateCharUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CreateCharUserCmd)
}

void CreateCharUserCmd::InitAsDefaultInstance() {
}

CreateCharUserCmd::CreateCharUserCmd(const CreateCharUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CreateCharUserCmd)
}

void CreateCharUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 5;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_sex_ = 0u;
  profession_ = 0u;
  hair_ = 0u;
  haircolor_ = 0u;
  clothcolor_ = 0u;
  accid_ = GOOGLE_ULONGLONG(0);
  sequence_ = 0u;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateCharUserCmd::~CreateCharUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CreateCharUserCmd)
  SharedDtor();
}

void CreateCharUserCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void CreateCharUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateCharUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateCharUserCmd_descriptor_;
}

const CreateCharUserCmd& CreateCharUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

CreateCharUserCmd* CreateCharUserCmd::default_instance_ = NULL;

CreateCharUserCmd* CreateCharUserCmd::New() const {
  return new CreateCharUserCmd;
}

void CreateCharUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateCharUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(role_sex_, haircolor_);
    cmd_ = 1;
    param_ = 5;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    clothcolor_ = 0u;
  }
  if (_has_bits_[8 / 32] & 1792) {
    accid_ = GOOGLE_ULONGLONG(0);
    sequence_ = 0u;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateCharUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CreateCharUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = CREATE_CHAR_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_role_sex;
        break;
      }

      // optional uint32 role_sex = 5;
      case 5: {
        if (tag == 40) {
         parse_role_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_sex_)));
          set_has_role_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 6;
      case 6: {
        if (tag == 48) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hair;
        break;
      }

      // optional uint32 hair = 7;
      case 7: {
        if (tag == 56) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_haircolor;
        break;
      }

      // optional uint32 haircolor = 8;
      case 8: {
        if (tag == 64) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_clothcolor;
        break;
      }

      // optional uint32 clothcolor = 9;
      case 9: {
        if (tag == 72) {
         parse_clothcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clothcolor_)));
          set_has_clothcolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 10;
      case 10: {
        if (tag == 80) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 11;
      case 11: {
        if (tag == 88) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_version;
        break;
      }

      // optional string version = 12;
      case 12: {
        if (tag == 98) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CreateCharUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CreateCharUserCmd)
  return false;
#undef DO_
}

void CreateCharUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CreateCharUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = CREATE_CHAR_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional uint32 role_sex = 5;
  if (has_role_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->role_sex(), output);
  }

  // optional uint32 profession = 6;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->profession(), output);
  }

  // optional uint32 hair = 7;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hair(), output);
  }

  // optional uint32 haircolor = 8;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->haircolor(), output);
  }

  // optional uint32 clothcolor = 9;
  if (has_clothcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->clothcolor(), output);
  }

  // optional uint64 accid = 10;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->accid(), output);
  }

  // optional uint32 sequence = 11;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sequence(), output);
  }

  // optional string version = 12;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CreateCharUserCmd)
}

::google::protobuf::uint8* CreateCharUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CreateCharUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = CREATE_CHAR_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional uint32 role_sex = 5;
  if (has_role_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->role_sex(), target);
  }

  // optional uint32 profession = 6;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->profession(), target);
  }

  // optional uint32 hair = 7;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hair(), target);
  }

  // optional uint32 haircolor = 8;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->haircolor(), target);
  }

  // optional uint32 clothcolor = 9;
  if (has_clothcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->clothcolor(), target);
  }

  // optional uint64 accid = 10;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->accid(), target);
  }

  // optional uint32 sequence = 11;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->sequence(), target);
  }

  // optional string version = 12;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CreateCharUserCmd)
  return target;
}

int CreateCharUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = CREATE_CHAR_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 role_sex = 5;
    if (has_role_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_sex());
    }

    // optional uint32 profession = 6;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint32 hair = 7;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hair());
    }

    // optional uint32 haircolor = 8;
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haircolor());
    }

    // optional uint32 clothcolor = 9;
    if (has_clothcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clothcolor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 accid = 10;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint32 sequence = 11;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional string version = 12;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCharUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateCharUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateCharUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateCharUserCmd::MergeFrom(const CreateCharUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_role_sex()) {
      set_role_sex(from.role_sex());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_clothcolor()) {
      set_clothcolor(from.clothcolor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateCharUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCharUserCmd::CopyFrom(const CreateCharUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCharUserCmd::IsInitialized() const {

  return true;
}

void CreateCharUserCmd::Swap(CreateCharUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(name_, other->name_);
    std::swap(role_sex_, other->role_sex_);
    std::swap(profession_, other->profession_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(clothcolor_, other->clothcolor_);
    std::swap(accid_, other->accid_);
    std::swap(sequence_, other->sequence_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateCharUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateCharUserCmd_descriptor_;
  metadata.reflection = CreateCharUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SnapShotUserCmd::kCmdFieldNumber;
const int SnapShotUserCmd::kParamFieldNumber;
const int SnapShotUserCmd::kDataFieldNumber;
const int SnapShotUserCmd::kLastselectFieldNumber;
const int SnapShotUserCmd::kDeletecharFieldNumber;
const int SnapShotUserCmd::kDeletecdtimeFieldNumber;
const int SnapShotUserCmd::kMaincharidFieldNumber;
#endif  // !_MSC_VER

SnapShotUserCmd::SnapShotUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SnapShotUserCmd)
}

void SnapShotUserCmd::InitAsDefaultInstance() {
}

SnapShotUserCmd::SnapShotUserCmd(const SnapShotUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SnapShotUserCmd)
}

void SnapShotUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 6;
  lastselect_ = GOOGLE_ULONGLONG(0);
  deletechar_ = false;
  deletecdtime_ = 0u;
  maincharid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapShotUserCmd::~SnapShotUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SnapShotUserCmd)
  SharedDtor();
}

void SnapShotUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapShotUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapShotUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapShotUserCmd_descriptor_;
}

const SnapShotUserCmd& SnapShotUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

SnapShotUserCmd* SnapShotUserCmd::default_instance_ = NULL;

SnapShotUserCmd* SnapShotUserCmd::New() const {
  return new SnapShotUserCmd;
}

void SnapShotUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SnapShotUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(lastselect_, maincharid_);
    cmd_ = 1;
    param_ = 6;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapShotUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SnapShotUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = SNAPSHOT_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .Cmd.SnapShotDataPB data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectTag(32)) goto parse_lastselect;
        break;
      }

      // optional uint64 lastselect = 4;
      case 4: {
        if (tag == 32) {
         parse_lastselect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastselect_)));
          set_has_lastselect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deletechar;
        break;
      }

      // optional bool deletechar = 5;
      case 5: {
        if (tag == 40) {
         parse_deletechar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deletechar_)));
          set_has_deletechar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_deletecdtime;
        break;
      }

      // optional uint32 deletecdtime = 6;
      case 6: {
        if (tag == 48) {
         parse_deletecdtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deletecdtime_)));
          set_has_deletecdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_maincharid;
        break;
      }

      // optional uint64 maincharid = 7;
      case 7: {
        if (tag == 56) {
         parse_maincharid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maincharid_)));
          set_has_maincharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SnapShotUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SnapShotUserCmd)
  return false;
#undef DO_
}

void SnapShotUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SnapShotUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = SNAPSHOT_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SnapShotDataPB data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  // optional uint64 lastselect = 4;
  if (has_lastselect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lastselect(), output);
  }

  // optional bool deletechar = 5;
  if (has_deletechar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->deletechar(), output);
  }

  // optional uint32 deletecdtime = 6;
  if (has_deletecdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deletecdtime(), output);
  }

  // optional uint64 maincharid = 7;
  if (has_maincharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->maincharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SnapShotUserCmd)
}

::google::protobuf::uint8* SnapShotUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SnapShotUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = SNAPSHOT_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SnapShotDataPB data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  // optional uint64 lastselect = 4;
  if (has_lastselect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lastselect(), target);
  }

  // optional bool deletechar = 5;
  if (has_deletechar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->deletechar(), target);
  }

  // optional uint32 deletecdtime = 6;
  if (has_deletecdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->deletecdtime(), target);
  }

  // optional uint64 maincharid = 7;
  if (has_maincharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->maincharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SnapShotUserCmd)
  return target;
}

int SnapShotUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = SNAPSHOT_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 lastselect = 4;
    if (has_lastselect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastselect());
    }

    // optional bool deletechar = 5;
    if (has_deletechar()) {
      total_size += 1 + 1;
    }

    // optional uint32 deletecdtime = 6;
    if (has_deletecdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deletecdtime());
    }

    // optional uint64 maincharid = 7;
    if (has_maincharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maincharid());
    }

  }
  // repeated .Cmd.SnapShotDataPB data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapShotUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapShotUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapShotUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapShotUserCmd::MergeFrom(const SnapShotUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_lastselect()) {
      set_lastselect(from.lastselect());
    }
    if (from.has_deletechar()) {
      set_deletechar(from.deletechar());
    }
    if (from.has_deletecdtime()) {
      set_deletecdtime(from.deletecdtime());
    }
    if (from.has_maincharid()) {
      set_maincharid(from.maincharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapShotUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapShotUserCmd::CopyFrom(const SnapShotUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapShotUserCmd::IsInitialized() const {

  return true;
}

void SnapShotUserCmd::Swap(SnapShotUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    data_.Swap(&other->data_);
    std::swap(lastselect_, other->lastselect_);
    std::swap(deletechar_, other->deletechar_);
    std::swap(deletecdtime_, other->deletecdtime_);
    std::swap(maincharid_, other->maincharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapShotUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapShotUserCmd_descriptor_;
  metadata.reflection = SnapShotUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtraData::kPhoneFieldNumber;
const int ExtraData::kSafedeviceFieldNumber;
#endif  // !_MSC_VER

ExtraData::ExtraData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExtraData)
}

void ExtraData::InitAsDefaultInstance() {
}

ExtraData::ExtraData(const ExtraData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExtraData)
}

void ExtraData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safedevice_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraData::~ExtraData() {
  // @@protoc_insertion_point(destructor:Cmd.ExtraData)
  SharedDtor();
}

void ExtraData::SharedDtor() {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void ExtraData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraData_descriptor_;
}

const ExtraData& ExtraData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

ExtraData* ExtraData::default_instance_ = NULL;

ExtraData* ExtraData::New() const {
  return new ExtraData;
}

void ExtraData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_->clear();
      }
    }
    safedevice_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExtraData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string phone = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_safedevice;
        break;
      }

      // optional bool safedevice = 2;
      case 2: {
        if (tag == 16) {
         parse_safedevice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &safedevice_)));
          set_has_safedevice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExtraData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExtraData)
  return false;
#undef DO_
}

void ExtraData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExtraData)
  // optional string phone = 1;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phone(), output);
  }

  // optional bool safedevice = 2;
  if (has_safedevice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->safedevice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExtraData)
}

::google::protobuf::uint8* ExtraData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExtraData)
  // optional string phone = 1;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone(), target);
  }

  // optional bool safedevice = 2;
  if (has_safedevice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->safedevice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExtraData)
  return target;
}

int ExtraData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string phone = 1;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional bool safedevice = 2;
    if (has_safedevice()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraData::MergeFrom(const ExtraData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_safedevice()) {
      set_safedevice(from.safedevice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraData::CopyFrom(const ExtraData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraData::IsInitialized() const {

  return true;
}

void ExtraData::Swap(ExtraData* other) {
  if (other != this) {
    std::swap(phone_, other->phone_);
    std::swap(safedevice_, other->safedevice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraData_descriptor_;
  metadata.reflection = ExtraData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectRoleUserCmd::kCmdFieldNumber;
const int SelectRoleUserCmd::kParamFieldNumber;
const int SelectRoleUserCmd::kIdFieldNumber;
const int SelectRoleUserCmd::kZoneIDFieldNumber;
const int SelectRoleUserCmd::kAccidFieldNumber;
const int SelectRoleUserCmd::kDeviceidFieldNumber;
const int SelectRoleUserCmd::kNameFieldNumber;
const int SelectRoleUserCmd::kVersionFieldNumber;
const int SelectRoleUserCmd::kExtraDataFieldNumber;
const int SelectRoleUserCmd::kIgnorepwdFieldNumber;
const int SelectRoleUserCmd::kPasswordFieldNumber;
const int SelectRoleUserCmd::kResettimeFieldNumber;
const int SelectRoleUserCmd::kLanguageFieldNumber;
const int SelectRoleUserCmd::kRealauthorizedFieldNumber;
const int SelectRoleUserCmd::kMaxbaselvFieldNumber;
#endif  // !_MSC_VER

SelectRoleUserCmd::SelectRoleUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SelectRoleUserCmd)
}

void SelectRoleUserCmd::InitAsDefaultInstance() {
  extradata_ = const_cast< ::Cmd::ExtraData*>(&::Cmd::ExtraData::default_instance());
}

SelectRoleUserCmd::SelectRoleUserCmd(const SelectRoleUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SelectRoleUserCmd)
}

void SelectRoleUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 7;
  id_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  accid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extradata_ = NULL;
  ignorepwd_ = false;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resettime_ = 0u;
  language_ = 0u;
  realauthorized_ = false;
  maxbaselv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectRoleUserCmd::~SelectRoleUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SelectRoleUserCmd)
  SharedDtor();
}

void SelectRoleUserCmd::SharedDtor() {
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
    delete extradata_;
  }
}

void SelectRoleUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectRoleUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectRoleUserCmd_descriptor_;
}

const SelectRoleUserCmd& SelectRoleUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

SelectRoleUserCmd* SelectRoleUserCmd::default_instance_ = NULL;

SelectRoleUserCmd* SelectRoleUserCmd::New() const {
  return new SelectRoleUserCmd;
}

void SelectRoleUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SelectRoleUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, accid_);
    cmd_ = 1;
    param_ = 7;
    zoneid_ = 0u;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deviceid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(ignorepwd_, maxbaselv_);
    if (has_extradata()) {
      if (extradata_ != NULL) extradata_->::Cmd::ExtraData::Clear();
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    resettime_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectRoleUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SelectRoleUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = SELECT_ROLE_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required uint64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneID;
        break;
      }

      // optional uint32 zoneID = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 5;
      case 5: {
        if (tag == 40) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_deviceid;
        break;
      }

      // optional string deviceid = 6;
      case 6: {
        if (tag == 50) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_version;
        break;
      }

      // optional string version = 8;
      case 8: {
        if (tag == 66) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_extraData;
        break;
      }

      // optional .Cmd.ExtraData extraData = 9;
      case 9: {
        if (tag == 74) {
         parse_extraData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extradata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ignorepwd;
        break;
      }

      // optional bool ignorepwd = 10;
      case 10: {
        if (tag == 80) {
         parse_ignorepwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignorepwd_)));
          set_has_ignorepwd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_password;
        break;
      }

      // optional string password = 11;
      case 11: {
        if (tag == 90) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_resettime;
        break;
      }

      // optional uint32 resettime = 12;
      case 12: {
        if (tag == 96) {
         parse_resettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_language;
        break;
      }

      // optional uint32 language = 13;
      case 13: {
        if (tag == 104) {
         parse_language:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_)));
          set_has_language();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_realauthorized;
        break;
      }

      // optional bool realauthorized = 14;
      case 14: {
        if (tag == 112) {
         parse_realauthorized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &realauthorized_)));
          set_has_realauthorized();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_maxbaselv;
        break;
      }

      // optional uint32 maxbaselv = 15;
      case 15: {
        if (tag == 120) {
         parse_maxbaselv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxbaselv_)));
          set_has_maxbaselv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SelectRoleUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SelectRoleUserCmd)
  return false;
#undef DO_
}

void SelectRoleUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SelectRoleUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = SELECT_ROLE_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional uint32 zoneID = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional uint64 accid = 5;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->accid(), output);
  }

  // optional string deviceid = 6;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->deviceid(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional string version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->version(), output);
  }

  // optional .Cmd.ExtraData extraData = 9;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->extradata(), output);
  }

  // optional bool ignorepwd = 10;
  if (has_ignorepwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ignorepwd(), output);
  }

  // optional string password = 11;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->password(), output);
  }

  // optional uint32 resettime = 12;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->resettime(), output);
  }

  // optional uint32 language = 13;
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->language(), output);
  }

  // optional bool realauthorized = 14;
  if (has_realauthorized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->realauthorized(), output);
  }

  // optional uint32 maxbaselv = 15;
  if (has_maxbaselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->maxbaselv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SelectRoleUserCmd)
}

::google::protobuf::uint8* SelectRoleUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SelectRoleUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = SELECT_ROLE_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional uint32 zoneID = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional uint64 accid = 5;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->accid(), target);
  }

  // optional string deviceid = 6;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->deviceid(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional string version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->version(), target);
  }

  // optional .Cmd.ExtraData extraData = 9;
  if (has_extradata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->extradata(), target);
  }

  // optional bool ignorepwd = 10;
  if (has_ignorepwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ignorepwd(), target);
  }

  // optional string password = 11;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->password(), target);
  }

  // optional uint32 resettime = 12;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->resettime(), target);
  }

  // optional uint32 language = 13;
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->language(), target);
  }

  // optional bool realauthorized = 14;
  if (has_realauthorized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->realauthorized(), target);
  }

  // optional uint32 maxbaselv = 15;
  if (has_maxbaselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->maxbaselv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SelectRoleUserCmd)
  return target;
}

int SelectRoleUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = SELECT_ROLE_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 zoneID = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 accid = 5;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional string deviceid = 6;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 8;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.ExtraData extraData = 9;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extradata());
    }

    // optional bool ignorepwd = 10;
    if (has_ignorepwd()) {
      total_size += 1 + 1;
    }

    // optional string password = 11;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 resettime = 12;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resettime());
    }

    // optional uint32 language = 13;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language());
    }

    // optional bool realauthorized = 14;
    if (has_realauthorized()) {
      total_size += 1 + 1;
    }

    // optional uint32 maxbaselv = 15;
    if (has_maxbaselv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxbaselv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectRoleUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectRoleUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectRoleUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectRoleUserCmd::MergeFrom(const SelectRoleUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_extradata()) {
      mutable_extradata()->::Cmd::ExtraData::MergeFrom(from.extradata());
    }
    if (from.has_ignorepwd()) {
      set_ignorepwd(from.ignorepwd());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_realauthorized()) {
      set_realauthorized(from.realauthorized());
    }
    if (from.has_maxbaselv()) {
      set_maxbaselv(from.maxbaselv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectRoleUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectRoleUserCmd::CopyFrom(const SelectRoleUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectRoleUserCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void SelectRoleUserCmd::Swap(SelectRoleUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(accid_, other->accid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(name_, other->name_);
    std::swap(version_, other->version_);
    std::swap(extradata_, other->extradata_);
    std::swap(ignorepwd_, other->ignorepwd_);
    std::swap(password_, other->password_);
    std::swap(resettime_, other->resettime_);
    std::swap(language_, other->language_);
    std::swap(realauthorized_, other->realauthorized_);
    std::swap(maxbaselv_, other->maxbaselv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectRoleUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectRoleUserCmd_descriptor_;
  metadata.reflection = SelectRoleUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResultUserCmd::kCmdFieldNumber;
const int LoginResultUserCmd::kParamFieldNumber;
const int LoginResultUserCmd::kRetFieldNumber;
#endif  // !_MSC_VER

LoginResultUserCmd::LoginResultUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LoginResultUserCmd)
}

void LoginResultUserCmd::InitAsDefaultInstance() {
}

LoginResultUserCmd::LoginResultUserCmd(const LoginResultUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LoginResultUserCmd)
}

void LoginResultUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 8;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResultUserCmd::~LoginResultUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LoginResultUserCmd)
  SharedDtor();
}

void LoginResultUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginResultUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResultUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResultUserCmd_descriptor_;
}

const LoginResultUserCmd& LoginResultUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

LoginResultUserCmd* LoginResultUserCmd::default_instance_ = NULL;

LoginResultUserCmd* LoginResultUserCmd::New() const {
  return new LoginResultUserCmd;
}

void LoginResultUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 1;
    param_ = 8;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResultUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LoginResultUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = LOGIN_RESULT_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required uint32 ret = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LoginResultUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LoginResultUserCmd)
  return false;
#undef DO_
}

void LoginResultUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LoginResultUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = LOGIN_RESULT_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint32 ret = 3 [default = 0];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LoginResultUserCmd)
}

::google::protobuf::uint8* LoginResultUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LoginResultUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = LOGIN_RESULT_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint32 ret = 3 [default = 0];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LoginResultUserCmd)
  return target;
}

int LoginResultUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = LOGIN_RESULT_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint32 ret = 3 [default = 0];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResultUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResultUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResultUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResultUserCmd::MergeFrom(const LoginResultUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResultUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResultUserCmd::CopyFrom(const LoginResultUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResultUserCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void LoginResultUserCmd::Swap(LoginResultUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResultUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResultUserCmd_descriptor_;
  metadata.reflection = LoginResultUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteCharUserCmd::kCmdFieldNumber;
const int DeleteCharUserCmd::kParamFieldNumber;
const int DeleteCharUserCmd::kIdFieldNumber;
const int DeleteCharUserCmd::kAccidFieldNumber;
const int DeleteCharUserCmd::kVersionFieldNumber;
#endif  // !_MSC_VER

DeleteCharUserCmd::DeleteCharUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DeleteCharUserCmd)
}

void DeleteCharUserCmd::InitAsDefaultInstance() {
}

DeleteCharUserCmd::DeleteCharUserCmd(const DeleteCharUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DeleteCharUserCmd)
}

void DeleteCharUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 9;
  id_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteCharUserCmd::~DeleteCharUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DeleteCharUserCmd)
  SharedDtor();
}

void DeleteCharUserCmd::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void DeleteCharUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteCharUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteCharUserCmd_descriptor_;
}

const DeleteCharUserCmd& DeleteCharUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

DeleteCharUserCmd* DeleteCharUserCmd::default_instance_ = NULL;

DeleteCharUserCmd* DeleteCharUserCmd::New() const {
  return new DeleteCharUserCmd;
}

void DeleteCharUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeleteCharUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, accid_);
    cmd_ = 1;
    param_ = 9;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteCharUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DeleteCharUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = DELETE_CHAR_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 4;
      case 4: {
        if (tag == 32) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }

      // optional string version = 5;
      case 5: {
        if (tag == 42) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DeleteCharUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DeleteCharUserCmd)
  return false;
#undef DO_
}

void DeleteCharUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DeleteCharUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = DELETE_CHAR_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional uint64 accid = 4;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accid(), output);
  }

  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DeleteCharUserCmd)
}

::google::protobuf::uint8* DeleteCharUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DeleteCharUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = DELETE_CHAR_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional uint64 accid = 4;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accid(), target);
  }

  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DeleteCharUserCmd)
  return target;
}

int DeleteCharUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = DELETE_CHAR_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 accid = 4;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCharUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteCharUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteCharUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteCharUserCmd::MergeFrom(const DeleteCharUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteCharUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCharUserCmd::CopyFrom(const DeleteCharUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCharUserCmd::IsInitialized() const {

  return true;
}

void DeleteCharUserCmd::Swap(DeleteCharUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(accid_, other->accid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteCharUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteCharUserCmd_descriptor_;
  metadata.reflection = DeleteCharUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartBeatUserCmd::kCmdFieldNumber;
const int HeartBeatUserCmd::kParamFieldNumber;
const int HeartBeatUserCmd::kTimeFieldNumber;
#endif  // !_MSC_VER

HeartBeatUserCmd::HeartBeatUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.HeartBeatUserCmd)
}

void HeartBeatUserCmd::InitAsDefaultInstance() {
}

HeartBeatUserCmd::HeartBeatUserCmd(const HeartBeatUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.HeartBeatUserCmd)
}

void HeartBeatUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 10;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatUserCmd::~HeartBeatUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.HeartBeatUserCmd)
  SharedDtor();
}

void HeartBeatUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeatUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatUserCmd_descriptor_;
}

const HeartBeatUserCmd& HeartBeatUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

HeartBeatUserCmd* HeartBeatUserCmd::default_instance_ = NULL;

HeartBeatUserCmd* HeartBeatUserCmd::New() const {
  return new HeartBeatUserCmd;
}

void HeartBeatUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 1;
    param_ = 10;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.HeartBeatUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = HEART_BEAT_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.HeartBeatUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.HeartBeatUserCmd)
  return false;
#undef DO_
}

void HeartBeatUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.HeartBeatUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = HEART_BEAT_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.HeartBeatUserCmd)
}

::google::protobuf::uint8* HeartBeatUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.HeartBeatUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = HEART_BEAT_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.HeartBeatUserCmd)
  return target;
}

int HeartBeatUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = HEART_BEAT_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatUserCmd::MergeFrom(const HeartBeatUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatUserCmd::CopyFrom(const HeartBeatUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatUserCmd::IsInitialized() const {

  return true;
}

void HeartBeatUserCmd::Swap(HeartBeatUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatUserCmd_descriptor_;
  metadata.reflection = HeartBeatUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerTimeUserCmd::kCmdFieldNumber;
const int ServerTimeUserCmd::kParamFieldNumber;
const int ServerTimeUserCmd::kTimeFieldNumber;
#endif  // !_MSC_VER

ServerTimeUserCmd::ServerTimeUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ServerTimeUserCmd)
}

void ServerTimeUserCmd::InitAsDefaultInstance() {
}

ServerTimeUserCmd::ServerTimeUserCmd(const ServerTimeUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ServerTimeUserCmd)
}

void ServerTimeUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 11;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerTimeUserCmd::~ServerTimeUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ServerTimeUserCmd)
  SharedDtor();
}

void ServerTimeUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerTimeUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerTimeUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerTimeUserCmd_descriptor_;
}

const ServerTimeUserCmd& ServerTimeUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

ServerTimeUserCmd* ServerTimeUserCmd::default_instance_ = NULL;

ServerTimeUserCmd* ServerTimeUserCmd::New() const {
  return new ServerTimeUserCmd;
}

void ServerTimeUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 1;
    param_ = 11;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerTimeUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ServerTimeUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = SERVERTIME_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ServerTimeUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ServerTimeUserCmd)
  return false;
#undef DO_
}

void ServerTimeUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ServerTimeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = SERVERTIME_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ServerTimeUserCmd)
}

::google::protobuf::uint8* ServerTimeUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ServerTimeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = SERVERTIME_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ServerTimeUserCmd)
  return target;
}

int ServerTimeUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = SERVERTIME_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerTimeUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerTimeUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerTimeUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerTimeUserCmd::MergeFrom(const ServerTimeUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerTimeUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerTimeUserCmd::CopyFrom(const ServerTimeUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTimeUserCmd::IsInitialized() const {

  return true;
}

void ServerTimeUserCmd::Swap(ServerTimeUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerTimeUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerTimeUserCmd_descriptor_;
  metadata.reflection = ServerTimeUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMDeleteCharUserCmd::kCmdFieldNumber;
const int GMDeleteCharUserCmd::kParamFieldNumber;
const int GMDeleteCharUserCmd::kAccidFieldNumber;
const int GMDeleteCharUserCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

GMDeleteCharUserCmd::GMDeleteCharUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GMDeleteCharUserCmd)
}

void GMDeleteCharUserCmd::InitAsDefaultInstance() {
}

GMDeleteCharUserCmd::GMDeleteCharUserCmd(const GMDeleteCharUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GMDeleteCharUserCmd)
}

void GMDeleteCharUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 12;
  accid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMDeleteCharUserCmd::~GMDeleteCharUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GMDeleteCharUserCmd)
  SharedDtor();
}

void GMDeleteCharUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMDeleteCharUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMDeleteCharUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMDeleteCharUserCmd_descriptor_;
}

const GMDeleteCharUserCmd& GMDeleteCharUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

GMDeleteCharUserCmd* GMDeleteCharUserCmd::default_instance_ = NULL;

GMDeleteCharUserCmd* GMDeleteCharUserCmd::New() const {
  return new GMDeleteCharUserCmd;
}

void GMDeleteCharUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GMDeleteCharUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(accid_, zoneid_);
    cmd_ = 1;
    param_ = 12;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMDeleteCharUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GMDeleteCharUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = GM_DELETE_CHAR_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GMDeleteCharUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GMDeleteCharUserCmd)
  return false;
#undef DO_
}

void GMDeleteCharUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GMDeleteCharUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = GM_DELETE_CHAR_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 accid = 3 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->accid(), output);
  }

  // optional uint32 zoneid = 4 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GMDeleteCharUserCmd)
}

::google::protobuf::uint8* GMDeleteCharUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GMDeleteCharUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = GM_DELETE_CHAR_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 accid = 3 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->accid(), target);
  }

  // optional uint32 zoneid = 4 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GMDeleteCharUserCmd)
  return target;
}

int GMDeleteCharUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = GM_DELETE_CHAR_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 accid = 3 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint32 zoneid = 4 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMDeleteCharUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMDeleteCharUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMDeleteCharUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMDeleteCharUserCmd::MergeFrom(const GMDeleteCharUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMDeleteCharUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMDeleteCharUserCmd::CopyFrom(const GMDeleteCharUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMDeleteCharUserCmd::IsInitialized() const {

  return true;
}

void GMDeleteCharUserCmd::Swap(GMDeleteCharUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(accid_, other->accid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMDeleteCharUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMDeleteCharUserCmd_descriptor_;
  metadata.reflection = GMDeleteCharUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientInfoUserCmd::kCmdFieldNumber;
const int ClientInfoUserCmd::kParamFieldNumber;
const int ClientInfoUserCmd::kIpFieldNumber;
const int ClientInfoUserCmd::kDelayFieldNumber;
#endif  // !_MSC_VER

ClientInfoUserCmd::ClientInfoUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ClientInfoUserCmd)
}

void ClientInfoUserCmd::InitAsDefaultInstance() {
}

ClientInfoUserCmd::ClientInfoUserCmd(const ClientInfoUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ClientInfoUserCmd)
}

void ClientInfoUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 13;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delay_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientInfoUserCmd::~ClientInfoUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ClientInfoUserCmd)
  SharedDtor();
}

void ClientInfoUserCmd::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void ClientInfoUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientInfoUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientInfoUserCmd_descriptor_;
}

const ClientInfoUserCmd& ClientInfoUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

ClientInfoUserCmd* ClientInfoUserCmd::default_instance_ = NULL;

ClientInfoUserCmd* ClientInfoUserCmd::New() const {
  return new ClientInfoUserCmd;
}

void ClientInfoUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 1;
    param_ = 13;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    delay_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientInfoUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ClientInfoUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = CLIENT_INFO_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ClientInfoUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ClientInfoUserCmd)
  return false;
#undef DO_
}

void ClientInfoUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ClientInfoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = CLIENT_INFO_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional uint32 delay = 4 [default = 0];
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ClientInfoUserCmd)
}

::google::protobuf::uint8* ClientInfoUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ClientInfoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = CLIENT_INFO_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional uint32 delay = 4 [default = 0];
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ClientInfoUserCmd)
  return target;
}

int ClientInfoUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = CLIENT_INFO_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 delay = 4 [default = 0];
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientInfoUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientInfoUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientInfoUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientInfoUserCmd::MergeFrom(const ClientInfoUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientInfoUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInfoUserCmd::CopyFrom(const ClientInfoUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInfoUserCmd::IsInitialized() const {

  return true;
}

void ClientInfoUserCmd::Swap(ClientInfoUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(ip_, other->ip_);
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientInfoUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientInfoUserCmd_descriptor_;
  metadata.reflection = ClientInfoUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLoginUserCmd::kCmdFieldNumber;
const int ReqLoginUserCmd::kParamFieldNumber;
const int ReqLoginUserCmd::kAccidFieldNumber;
const int ReqLoginUserCmd::kSha1FieldNumber;
const int ReqLoginUserCmd::kZoneidFieldNumber;
const int ReqLoginUserCmd::kTimestampFieldNumber;
const int ReqLoginUserCmd::kVersionFieldNumber;
const int ReqLoginUserCmd::kDomainFieldNumber;
const int ReqLoginUserCmd::kIpFieldNumber;
const int ReqLoginUserCmd::kDeviceFieldNumber;
const int ReqLoginUserCmd::kPhoneFieldNumber;
const int ReqLoginUserCmd::kSafeDeviceFieldNumber;
const int ReqLoginUserCmd::kLanguageFieldNumber;
const int ReqLoginUserCmd::kSiteFieldNumber;
const int ReqLoginUserCmd::kAuthorizeFieldNumber;
#endif  // !_MSC_VER

ReqLoginUserCmd::ReqLoginUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqLoginUserCmd)
}

void ReqLoginUserCmd::InitAsDefaultInstance() {
}

ReqLoginUserCmd::ReqLoginUserCmd(const ReqLoginUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqLoginUserCmd)
}

void ReqLoginUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 14;
  accid_ = GOOGLE_ULONGLONG(0);
  sha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoneid_ = 0u;
  timestamp_ = 0u;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safe_device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_ = 0u;
  site_ = 0u;
  authorize_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLoginUserCmd::~ReqLoginUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqLoginUserCmd)
  SharedDtor();
}

void ReqLoginUserCmd::SharedDtor() {
  if (sha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sha1_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (safe_device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete safe_device_;
  }
  if (authorize_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authorize_;
  }
  if (this != default_instance_) {
  }
}

void ReqLoginUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLoginUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLoginUserCmd_descriptor_;
}

const ReqLoginUserCmd& ReqLoginUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

ReqLoginUserCmd* ReqLoginUserCmd::default_instance_ = NULL;

ReqLoginUserCmd* ReqLoginUserCmd::New() const {
  return new ReqLoginUserCmd;
}

void ReqLoginUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqLoginUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(zoneid_, timestamp_);
    cmd_ = 1;
    param_ = 14;
    accid_ = GOOGLE_ULONGLONG(0);
    if (has_sha1()) {
      if (sha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sha1_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(language_, site_);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_->clear();
      }
    }
    if (has_safe_device()) {
      if (safe_device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        safe_device_->clear();
      }
    }
    if (has_authorize()) {
      if (authorize_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authorize_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLoginUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqLoginUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = REQ_LOGIN_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sha1;
        break;
      }

      // optional string sha1 = 4;
      case 4: {
        if (tag == 34) {
         parse_sha1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sha1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sha1().data(), this->sha1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sha1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_version;
        break;
      }

      // optional string version = 7;
      case 7: {
        if (tag == 58) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_domain;
        break;
      }

      // optional string domain = 8;
      case 8: {
        if (tag == 66) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ip;
        break;
      }

      // optional string ip = 9;
      case 9: {
        if (tag == 74) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_device;
        break;
      }

      // optional string device = 10;
      case 10: {
        if (tag == 82) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_phone;
        break;
      }

      // optional string phone = 11;
      case 11: {
        if (tag == 90) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_safe_device;
        break;
      }

      // optional string safe_device = 12;
      case 12: {
        if (tag == 98) {
         parse_safe_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_safe_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->safe_device().data(), this->safe_device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "safe_device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_language;
        break;
      }

      // optional uint32 language = 13;
      case 13: {
        if (tag == 104) {
         parse_language:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_)));
          set_has_language();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_site;
        break;
      }

      // optional uint32 site = 14;
      case 14: {
        if (tag == 112) {
         parse_site:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &site_)));
          set_has_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_authorize;
        break;
      }

      // optional string authorize = 15;
      case 15: {
        if (tag == 122) {
         parse_authorize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorize()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authorize().data(), this->authorize().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authorize");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqLoginUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqLoginUserCmd)
  return false;
#undef DO_
}

void ReqLoginUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqLoginUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = REQ_LOGIN_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 accid = 3 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->accid(), output);
  }

  // optional string sha1 = 4;
  if (has_sha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sha1(), output);
  }

  // optional uint32 zoneid = 5 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // optional uint32 timestamp = 6 [default = 0];
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timestamp(), output);
  }

  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->version(), output);
  }

  // optional string domain = 8;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->domain(), output);
  }

  // optional string ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ip(), output);
  }

  // optional string device = 10;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->device(), output);
  }

  // optional string phone = 11;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->phone(), output);
  }

  // optional string safe_device = 12;
  if (has_safe_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->safe_device().data(), this->safe_device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "safe_device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->safe_device(), output);
  }

  // optional uint32 language = 13;
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->language(), output);
  }

  // optional uint32 site = 14;
  if (has_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->site(), output);
  }

  // optional string authorize = 15;
  if (has_authorize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authorize().data(), this->authorize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authorize");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->authorize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqLoginUserCmd)
}

::google::protobuf::uint8* ReqLoginUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqLoginUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = REQ_LOGIN_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 accid = 3 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->accid(), target);
  }

  // optional string sha1 = 4;
  if (has_sha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sha1(), target);
  }

  // optional uint32 zoneid = 5 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // optional uint32 timestamp = 6 [default = 0];
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timestamp(), target);
  }

  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }

  // optional string domain = 8;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->domain(), target);
  }

  // optional string ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ip(), target);
  }

  // optional string device = 10;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->device(), target);
  }

  // optional string phone = 11;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->phone(), target);
  }

  // optional string safe_device = 12;
  if (has_safe_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->safe_device().data(), this->safe_device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "safe_device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->safe_device(), target);
  }

  // optional uint32 language = 13;
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->language(), target);
  }

  // optional uint32 site = 14;
  if (has_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->site(), target);
  }

  // optional string authorize = 15;
  if (has_authorize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authorize().data(), this->authorize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authorize");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->authorize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqLoginUserCmd)
  return target;
}

int ReqLoginUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = REQ_LOGIN_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 accid = 3 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional string sha1 = 4;
    if (has_sha1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sha1());
    }

    // optional uint32 zoneid = 5 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 timestamp = 6 [default = 0];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional string version = 7;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string domain = 8;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ip = 9;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string device = 10;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional string phone = 11;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string safe_device = 12;
    if (has_safe_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->safe_device());
    }

    // optional uint32 language = 13;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language());
    }

    // optional uint32 site = 14;
    if (has_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->site());
    }

    // optional string authorize = 15;
    if (has_authorize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authorize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLoginUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLoginUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLoginUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLoginUserCmd::MergeFrom(const ReqLoginUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_sha1()) {
      set_sha1(from.sha1());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_safe_device()) {
      set_safe_device(from.safe_device());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_site()) {
      set_site(from.site());
    }
    if (from.has_authorize()) {
      set_authorize(from.authorize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLoginUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLoginUserCmd::CopyFrom(const ReqLoginUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLoginUserCmd::IsInitialized() const {

  return true;
}

void ReqLoginUserCmd::Swap(ReqLoginUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(accid_, other->accid_);
    std::swap(sha1_, other->sha1_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(version_, other->version_);
    std::swap(domain_, other->domain_);
    std::swap(ip_, other->ip_);
    std::swap(device_, other->device_);
    std::swap(phone_, other->phone_);
    std::swap(safe_device_, other->safe_device_);
    std::swap(language_, other->language_);
    std::swap(site_, other->site_);
    std::swap(authorize_, other->authorize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLoginUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLoginUserCmd_descriptor_;
  metadata.reflection = ReqLoginUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLoginParamUserCmd::kCmdFieldNumber;
const int ReqLoginParamUserCmd::kParamFieldNumber;
const int ReqLoginParamUserCmd::kAccidFieldNumber;
const int ReqLoginParamUserCmd::kSha1FieldNumber;
const int ReqLoginParamUserCmd::kTimestampFieldNumber;
const int ReqLoginParamUserCmd::kPhoneFieldNumber;
const int ReqLoginParamUserCmd::kVersionFieldNumber;
#endif  // !_MSC_VER

ReqLoginParamUserCmd::ReqLoginParamUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqLoginParamUserCmd)
}

void ReqLoginParamUserCmd::InitAsDefaultInstance() {
}

ReqLoginParamUserCmd::ReqLoginParamUserCmd(const ReqLoginParamUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqLoginParamUserCmd)
}

void ReqLoginParamUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 15;
  accid_ = GOOGLE_ULONGLONG(0);
  sha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0u;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLoginParamUserCmd::~ReqLoginParamUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqLoginParamUserCmd)
  SharedDtor();
}

void ReqLoginParamUserCmd::SharedDtor() {
  if (sha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sha1_;
  }
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void ReqLoginParamUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLoginParamUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLoginParamUserCmd_descriptor_;
}

const ReqLoginParamUserCmd& ReqLoginParamUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

ReqLoginParamUserCmd* ReqLoginParamUserCmd::default_instance_ = NULL;

ReqLoginParamUserCmd* ReqLoginParamUserCmd::New() const {
  return new ReqLoginParamUserCmd;
}

void ReqLoginParamUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqLoginParamUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(timestamp_, version_);
    cmd_ = 1;
    param_ = 15;
    accid_ = GOOGLE_ULONGLONG(0);
    if (has_sha1()) {
      if (sha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sha1_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLoginParamUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqLoginParamUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = REQ_LOGIN_PARAM_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sha1;
        break;
      }

      // optional string sha1 = 4;
      case 4: {
        if (tag == 34) {
         parse_sha1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sha1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sha1().data(), this->sha1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sha1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_phone;
        break;
      }

      // optional string phone = 6;
      case 6: {
        if (tag == 50) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_version;
        break;
      }

      // optional uint32 version = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqLoginParamUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqLoginParamUserCmd)
  return false;
#undef DO_
}

void ReqLoginParamUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqLoginParamUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = REQ_LOGIN_PARAM_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 accid = 3 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->accid(), output);
  }

  // optional string sha1 = 4;
  if (has_sha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sha1(), output);
  }

  // optional uint32 timestamp = 5 [default = 0];
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->timestamp(), output);
  }

  // optional string phone = 6;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->phone(), output);
  }

  // optional uint32 version = 7 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqLoginParamUserCmd)
}

::google::protobuf::uint8* ReqLoginParamUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqLoginParamUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = REQ_LOGIN_PARAM_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 accid = 3 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->accid(), target);
  }

  // optional string sha1 = 4;
  if (has_sha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sha1(), target);
  }

  // optional uint32 timestamp = 5 [default = 0];
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->timestamp(), target);
  }

  // optional string phone = 6;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->phone(), target);
  }

  // optional uint32 version = 7 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqLoginParamUserCmd)
  return target;
}

int ReqLoginParamUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = REQ_LOGIN_PARAM_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 accid = 3 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional string sha1 = 4;
    if (has_sha1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sha1());
    }

    // optional uint32 timestamp = 5 [default = 0];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional string phone = 6;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional uint32 version = 7 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLoginParamUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLoginParamUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLoginParamUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLoginParamUserCmd::MergeFrom(const ReqLoginParamUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_sha1()) {
      set_sha1(from.sha1());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLoginParamUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLoginParamUserCmd::CopyFrom(const ReqLoginParamUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLoginParamUserCmd::IsInitialized() const {

  return true;
}

void ReqLoginParamUserCmd::Swap(ReqLoginParamUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(accid_, other->accid_);
    std::swap(sha1_, other->sha1_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(phone_, other->phone_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLoginParamUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLoginParamUserCmd_descriptor_;
  metadata.reflection = ReqLoginParamUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickParamUserCmd::kCmdFieldNumber;
const int KickParamUserCmd::kParamFieldNumber;
const int KickParamUserCmd::kCharidFieldNumber;
const int KickParamUserCmd::kAccidFieldNumber;
#endif  // !_MSC_VER

KickParamUserCmd::KickParamUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.KickParamUserCmd)
}

void KickParamUserCmd::InitAsDefaultInstance() {
}

KickParamUserCmd::KickParamUserCmd(const KickParamUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.KickParamUserCmd)
}

void KickParamUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 16;
  charid_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickParamUserCmd::~KickParamUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.KickParamUserCmd)
  SharedDtor();
}

void KickParamUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickParamUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickParamUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickParamUserCmd_descriptor_;
}

const KickParamUserCmd& KickParamUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

KickParamUserCmd* KickParamUserCmd::default_instance_ = NULL;

KickParamUserCmd* KickParamUserCmd::New() const {
  return new KickParamUserCmd;
}

void KickParamUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KickParamUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, accid_);
    cmd_ = 1;
    param_ = 16;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickParamUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.KickParamUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = KICK_PARAM_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.KickParamUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.KickParamUserCmd)
  return false;
#undef DO_
}

void KickParamUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.KickParamUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = KICK_PARAM_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 accid = 4 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.KickParamUserCmd)
}

::google::protobuf::uint8* KickParamUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.KickParamUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = KICK_PARAM_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 accid = 4 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.KickParamUserCmd)
  return target;
}

int KickParamUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = KICK_PARAM_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 accid = 4 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickParamUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickParamUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickParamUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickParamUserCmd::MergeFrom(const KickParamUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickParamUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickParamUserCmd::CopyFrom(const KickParamUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickParamUserCmd::IsInitialized() const {

  return true;
}

void KickParamUserCmd::Swap(KickParamUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(accid_, other->accid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickParamUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickParamUserCmd_descriptor_;
  metadata.reflection = KickParamUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelDeleteCharUserCmd::kCmdFieldNumber;
const int CancelDeleteCharUserCmd::kParamFieldNumber;
const int CancelDeleteCharUserCmd::kIdFieldNumber;
const int CancelDeleteCharUserCmd::kAccidFieldNumber;
#endif  // !_MSC_VER

CancelDeleteCharUserCmd::CancelDeleteCharUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CancelDeleteCharUserCmd)
}

void CancelDeleteCharUserCmd::InitAsDefaultInstance() {
}

CancelDeleteCharUserCmd::CancelDeleteCharUserCmd(const CancelDeleteCharUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CancelDeleteCharUserCmd)
}

void CancelDeleteCharUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 17;
  id_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelDeleteCharUserCmd::~CancelDeleteCharUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CancelDeleteCharUserCmd)
  SharedDtor();
}

void CancelDeleteCharUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CancelDeleteCharUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelDeleteCharUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelDeleteCharUserCmd_descriptor_;
}

const CancelDeleteCharUserCmd& CancelDeleteCharUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

CancelDeleteCharUserCmd* CancelDeleteCharUserCmd::default_instance_ = NULL;

CancelDeleteCharUserCmd* CancelDeleteCharUserCmd::New() const {
  return new CancelDeleteCharUserCmd;
}

void CancelDeleteCharUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CancelDeleteCharUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, accid_);
    cmd_ = 1;
    param_ = 17;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelDeleteCharUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CancelDeleteCharUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = CANCEL_DELETE_CHAR_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 4;
      case 4: {
        if (tag == 32) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CancelDeleteCharUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CancelDeleteCharUserCmd)
  return false;
#undef DO_
}

void CancelDeleteCharUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CancelDeleteCharUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = CANCEL_DELETE_CHAR_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional uint64 accid = 4;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CancelDeleteCharUserCmd)
}

::google::protobuf::uint8* CancelDeleteCharUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CancelDeleteCharUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = CANCEL_DELETE_CHAR_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional uint64 accid = 4;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CancelDeleteCharUserCmd)
  return target;
}

int CancelDeleteCharUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = CANCEL_DELETE_CHAR_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 accid = 4;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelDeleteCharUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelDeleteCharUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelDeleteCharUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelDeleteCharUserCmd::MergeFrom(const CancelDeleteCharUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelDeleteCharUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelDeleteCharUserCmd::CopyFrom(const CancelDeleteCharUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelDeleteCharUserCmd::IsInitialized() const {

  return true;
}

void CancelDeleteCharUserCmd::Swap(CancelDeleteCharUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(accid_, other->accid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelDeleteCharUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelDeleteCharUserCmd_descriptor_;
  metadata.reflection = CancelDeleteCharUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientFrameUserCmd::kCmdFieldNumber;
const int ClientFrameUserCmd::kParamFieldNumber;
const int ClientFrameUserCmd::kFrameFieldNumber;
#endif  // !_MSC_VER

ClientFrameUserCmd::ClientFrameUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ClientFrameUserCmd)
}

void ClientFrameUserCmd::InitAsDefaultInstance() {
}

ClientFrameUserCmd::ClientFrameUserCmd(const ClientFrameUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ClientFrameUserCmd)
}

void ClientFrameUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 18;
  frame_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientFrameUserCmd::~ClientFrameUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ClientFrameUserCmd)
  SharedDtor();
}

void ClientFrameUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientFrameUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientFrameUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientFrameUserCmd_descriptor_;
}

const ClientFrameUserCmd& ClientFrameUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

ClientFrameUserCmd* ClientFrameUserCmd::default_instance_ = NULL;

ClientFrameUserCmd* ClientFrameUserCmd::New() const {
  return new ClientFrameUserCmd;
}

void ClientFrameUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 1;
    param_ = 18;
    frame_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientFrameUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ClientFrameUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = CLIENT_FRAME_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frame;
        break;
      }

      // optional uint32 frame = 3;
      case 3: {
        if (tag == 24) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ClientFrameUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ClientFrameUserCmd)
  return false;
#undef DO_
}

void ClientFrameUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ClientFrameUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = CLIENT_FRAME_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 frame = 3;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->frame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ClientFrameUserCmd)
}

::google::protobuf::uint8* ClientFrameUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ClientFrameUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = CLIENT_FRAME_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 frame = 3;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->frame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ClientFrameUserCmd)
  return target;
}

int ClientFrameUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = CLIENT_FRAME_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 frame = 3;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientFrameUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientFrameUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientFrameUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientFrameUserCmd::MergeFrom(const ClientFrameUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientFrameUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientFrameUserCmd::CopyFrom(const ClientFrameUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientFrameUserCmd::IsInitialized() const {

  return true;
}

void ClientFrameUserCmd::Swap(ClientFrameUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(frame_, other->frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientFrameUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientFrameUserCmd_descriptor_;
  metadata.reflection = ClientFrameUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SafeDeviceUserCmd::kCmdFieldNumber;
const int SafeDeviceUserCmd::kParamFieldNumber;
const int SafeDeviceUserCmd::kSafeFieldNumber;
#endif  // !_MSC_VER

SafeDeviceUserCmd::SafeDeviceUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SafeDeviceUserCmd)
}

void SafeDeviceUserCmd::InitAsDefaultInstance() {
}

SafeDeviceUserCmd::SafeDeviceUserCmd(const SafeDeviceUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SafeDeviceUserCmd)
}

void SafeDeviceUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 19;
  safe_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SafeDeviceUserCmd::~SafeDeviceUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SafeDeviceUserCmd)
  SharedDtor();
}

void SafeDeviceUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SafeDeviceUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SafeDeviceUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafeDeviceUserCmd_descriptor_;
}

const SafeDeviceUserCmd& SafeDeviceUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

SafeDeviceUserCmd* SafeDeviceUserCmd::default_instance_ = NULL;

SafeDeviceUserCmd* SafeDeviceUserCmd::New() const {
  return new SafeDeviceUserCmd;
}

void SafeDeviceUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 1;
    param_ = 19;
    safe_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SafeDeviceUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SafeDeviceUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = SAFE_DEVICE_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_safe;
        break;
      }

      // optional bool safe = 3;
      case 3: {
        if (tag == 24) {
         parse_safe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &safe_)));
          set_has_safe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SafeDeviceUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SafeDeviceUserCmd)
  return false;
#undef DO_
}

void SafeDeviceUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SafeDeviceUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = SAFE_DEVICE_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool safe = 3;
  if (has_safe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->safe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SafeDeviceUserCmd)
}

::google::protobuf::uint8* SafeDeviceUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SafeDeviceUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = SAFE_DEVICE_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool safe = 3;
  if (has_safe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->safe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SafeDeviceUserCmd)
  return target;
}

int SafeDeviceUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = SAFE_DEVICE_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool safe = 3;
    if (has_safe()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SafeDeviceUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SafeDeviceUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SafeDeviceUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SafeDeviceUserCmd::MergeFrom(const SafeDeviceUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_safe()) {
      set_safe(from.safe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SafeDeviceUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafeDeviceUserCmd::CopyFrom(const SafeDeviceUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafeDeviceUserCmd::IsInitialized() const {

  return true;
}

void SafeDeviceUserCmd::Swap(SafeDeviceUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(safe_, other->safe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SafeDeviceUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SafeDeviceUserCmd_descriptor_;
  metadata.reflection = SafeDeviceUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfirmAuthorizeUserCmd::kCmdFieldNumber;
const int ConfirmAuthorizeUserCmd::kParamFieldNumber;
const int ConfirmAuthorizeUserCmd::kPasswordFieldNumber;
const int ConfirmAuthorizeUserCmd::kSuccessFieldNumber;
const int ConfirmAuthorizeUserCmd::kResettimeFieldNumber;
const int ConfirmAuthorizeUserCmd::kHassetFieldNumber;
#endif  // !_MSC_VER

ConfirmAuthorizeUserCmd::ConfirmAuthorizeUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ConfirmAuthorizeUserCmd)
}

void ConfirmAuthorizeUserCmd::InitAsDefaultInstance() {
}

ConfirmAuthorizeUserCmd::ConfirmAuthorizeUserCmd(const ConfirmAuthorizeUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ConfirmAuthorizeUserCmd)
}

void ConfirmAuthorizeUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 20;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  resettime_ = 0u;
  hasset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfirmAuthorizeUserCmd::~ConfirmAuthorizeUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ConfirmAuthorizeUserCmd)
  SharedDtor();
}

void ConfirmAuthorizeUserCmd::SharedDtor() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void ConfirmAuthorizeUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfirmAuthorizeUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfirmAuthorizeUserCmd_descriptor_;
}

const ConfirmAuthorizeUserCmd& ConfirmAuthorizeUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

ConfirmAuthorizeUserCmd* ConfirmAuthorizeUserCmd::default_instance_ = NULL;

ConfirmAuthorizeUserCmd* ConfirmAuthorizeUserCmd::New() const {
  return new ConfirmAuthorizeUserCmd;
}

void ConfirmAuthorizeUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConfirmAuthorizeUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(resettime_, hasset_);
    cmd_ = 1;
    param_ = 20;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfirmAuthorizeUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ConfirmAuthorizeUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = CONFIRM_AUTHORIZE_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_resettime;
        break;
      }

      // optional uint32 resettime = 5;
      case 5: {
        if (tag == 40) {
         parse_resettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hasset;
        break;
      }

      // optional bool hasset = 6;
      case 6: {
        if (tag == 48) {
         parse_hasset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasset_)));
          set_has_hasset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ConfirmAuthorizeUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ConfirmAuthorizeUserCmd)
  return false;
#undef DO_
}

void ConfirmAuthorizeUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ConfirmAuthorizeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = CONFIRM_AUTHORIZE_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional bool success = 4;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  // optional uint32 resettime = 5;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resettime(), output);
  }

  // optional bool hasset = 6;
  if (has_hasset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hasset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ConfirmAuthorizeUserCmd)
}

::google::protobuf::uint8* ConfirmAuthorizeUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ConfirmAuthorizeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = CONFIRM_AUTHORIZE_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional bool success = 4;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  // optional uint32 resettime = 5;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resettime(), target);
  }

  // optional bool hasset = 6;
  if (has_hasset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hasset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ConfirmAuthorizeUserCmd)
  return target;
}

int ConfirmAuthorizeUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = CONFIRM_AUTHORIZE_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional uint32 resettime = 5;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resettime());
    }

    // optional bool hasset = 6;
    if (has_hasset()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfirmAuthorizeUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfirmAuthorizeUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfirmAuthorizeUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfirmAuthorizeUserCmd::MergeFrom(const ConfirmAuthorizeUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
    if (from.has_hasset()) {
      set_hasset(from.hasset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfirmAuthorizeUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfirmAuthorizeUserCmd::CopyFrom(const ConfirmAuthorizeUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmAuthorizeUserCmd::IsInitialized() const {

  return true;
}

void ConfirmAuthorizeUserCmd::Swap(ConfirmAuthorizeUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(password_, other->password_);
    std::swap(success_, other->success_);
    std::swap(resettime_, other->resettime_);
    std::swap(hasset_, other->hasset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfirmAuthorizeUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfirmAuthorizeUserCmd_descriptor_;
  metadata.reflection = ConfirmAuthorizeUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncAuthorizeGateCmd::kCmdFieldNumber;
const int SyncAuthorizeGateCmd::kParamFieldNumber;
const int SyncAuthorizeGateCmd::kIgnorepwdFieldNumber;
const int SyncAuthorizeGateCmd::kPasswordFieldNumber;
const int SyncAuthorizeGateCmd::kVersionFieldNumber;
const int SyncAuthorizeGateCmd::kAccidFieldNumber;
const int SyncAuthorizeGateCmd::kResettimeFieldNumber;
#endif  // !_MSC_VER

SyncAuthorizeGateCmd::SyncAuthorizeGateCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncAuthorizeGateCmd)
}

void SyncAuthorizeGateCmd::InitAsDefaultInstance() {
}

SyncAuthorizeGateCmd::SyncAuthorizeGateCmd(const SyncAuthorizeGateCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncAuthorizeGateCmd)
}

void SyncAuthorizeGateCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 21;
  ignorepwd_ = false;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accid_ = GOOGLE_ULONGLONG(0);
  resettime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncAuthorizeGateCmd::~SyncAuthorizeGateCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncAuthorizeGateCmd)
  SharedDtor();
}

void SyncAuthorizeGateCmd::SharedDtor() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void SyncAuthorizeGateCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncAuthorizeGateCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncAuthorizeGateCmd_descriptor_;
}

const SyncAuthorizeGateCmd& SyncAuthorizeGateCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

SyncAuthorizeGateCmd* SyncAuthorizeGateCmd::default_instance_ = NULL;

SyncAuthorizeGateCmd* SyncAuthorizeGateCmd::New() const {
  return new SyncAuthorizeGateCmd;
}

void SyncAuthorizeGateCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SyncAuthorizeGateCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(ignorepwd_, accid_);
    cmd_ = 1;
    param_ = 21;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncAuthorizeGateCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncAuthorizeGateCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = SYNC_AUTHORIZE_GATE_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ignorepwd;
        break;
      }

      // optional bool ignorepwd = 3;
      case 3: {
        if (tag == 24) {
         parse_ignorepwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignorepwd_)));
          set_has_ignorepwd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (tag == 34) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }

      // optional string version = 5;
      case 5: {
        if (tag == 42) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 6;
      case 6: {
        if (tag == 48) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_resettime;
        break;
      }

      // optional uint32 resettime = 7;
      case 7: {
        if (tag == 56) {
         parse_resettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncAuthorizeGateCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncAuthorizeGateCmd)
  return false;
#undef DO_
}

void SyncAuthorizeGateCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncAuthorizeGateCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = SYNC_AUTHORIZE_GATE_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool ignorepwd = 3;
  if (has_ignorepwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ignorepwd(), output);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version(), output);
  }

  // optional uint64 accid = 6;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->accid(), output);
  }

  // optional uint32 resettime = 7;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->resettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncAuthorizeGateCmd)
}

::google::protobuf::uint8* SyncAuthorizeGateCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncAuthorizeGateCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = SYNC_AUTHORIZE_GATE_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool ignorepwd = 3;
  if (has_ignorepwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ignorepwd(), target);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  // optional uint64 accid = 6;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->accid(), target);
  }

  // optional uint32 resettime = 7;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->resettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncAuthorizeGateCmd)
  return target;
}

int SyncAuthorizeGateCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = SYNC_AUTHORIZE_GATE_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool ignorepwd = 3;
    if (has_ignorepwd()) {
      total_size += 1 + 1;
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional uint64 accid = 6;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint32 resettime = 7;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncAuthorizeGateCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncAuthorizeGateCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncAuthorizeGateCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncAuthorizeGateCmd::MergeFrom(const SyncAuthorizeGateCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_ignorepwd()) {
      set_ignorepwd(from.ignorepwd());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncAuthorizeGateCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncAuthorizeGateCmd::CopyFrom(const SyncAuthorizeGateCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncAuthorizeGateCmd::IsInitialized() const {

  return true;
}

void SyncAuthorizeGateCmd::Swap(SyncAuthorizeGateCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(ignorepwd_, other->ignorepwd_);
    std::swap(password_, other->password_);
    std::swap(version_, other->version_);
    std::swap(accid_, other->accid_);
    std::swap(resettime_, other->resettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncAuthorizeGateCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncAuthorizeGateCmd_descriptor_;
  metadata.reflection = SyncAuthorizeGateCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RealAuthorizeUserCmd::kCmdFieldNumber;
const int RealAuthorizeUserCmd::kParamFieldNumber;
const int RealAuthorizeUserCmd::kAuthorizStateFieldNumber;
const int RealAuthorizeUserCmd::kAuthorizedFieldNumber;
#endif  // !_MSC_VER

RealAuthorizeUserCmd::RealAuthorizeUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RealAuthorizeUserCmd)
}

void RealAuthorizeUserCmd::InitAsDefaultInstance() {
}

RealAuthorizeUserCmd::RealAuthorizeUserCmd(const RealAuthorizeUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RealAuthorizeUserCmd)
}

void RealAuthorizeUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 22;
  authoriz_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorized_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RealAuthorizeUserCmd::~RealAuthorizeUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RealAuthorizeUserCmd)
  SharedDtor();
}

void RealAuthorizeUserCmd::SharedDtor() {
  if (authoriz_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authoriz_state_;
  }
  if (this != default_instance_) {
  }
}

void RealAuthorizeUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealAuthorizeUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RealAuthorizeUserCmd_descriptor_;
}

const RealAuthorizeUserCmd& RealAuthorizeUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

RealAuthorizeUserCmd* RealAuthorizeUserCmd::default_instance_ = NULL;

RealAuthorizeUserCmd* RealAuthorizeUserCmd::New() const {
  return new RealAuthorizeUserCmd;
}

void RealAuthorizeUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 1;
    param_ = 22;
    if (has_authoriz_state()) {
      if (authoriz_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authoriz_state_->clear();
      }
    }
    authorized_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RealAuthorizeUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RealAuthorizeUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = REAL_AUTHORIZE_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_authoriz_state;
        break;
      }

      // optional string authoriz_state = 3;
      case 3: {
        if (tag == 26) {
         parse_authoriz_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authoriz_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authoriz_state().data(), this->authoriz_state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authoriz_state");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_authorized;
        break;
      }

      // optional bool authorized = 4;
      case 4: {
        if (tag == 32) {
         parse_authorized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authorized_)));
          set_has_authorized();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RealAuthorizeUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RealAuthorizeUserCmd)
  return false;
#undef DO_
}

void RealAuthorizeUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RealAuthorizeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = REAL_AUTHORIZE_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string authoriz_state = 3;
  if (has_authoriz_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authoriz_state().data(), this->authoriz_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authoriz_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->authoriz_state(), output);
  }

  // optional bool authorized = 4;
  if (has_authorized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->authorized(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RealAuthorizeUserCmd)
}

::google::protobuf::uint8* RealAuthorizeUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RealAuthorizeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = REAL_AUTHORIZE_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string authoriz_state = 3;
  if (has_authoriz_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authoriz_state().data(), this->authoriz_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authoriz_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->authoriz_state(), target);
  }

  // optional bool authorized = 4;
  if (has_authorized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->authorized(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RealAuthorizeUserCmd)
  return target;
}

int RealAuthorizeUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = REAL_AUTHORIZE_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string authoriz_state = 3;
    if (has_authoriz_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authoriz_state());
    }

    // optional bool authorized = 4;
    if (has_authorized()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealAuthorizeUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RealAuthorizeUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RealAuthorizeUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RealAuthorizeUserCmd::MergeFrom(const RealAuthorizeUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_authoriz_state()) {
      set_authoriz_state(from.authoriz_state());
    }
    if (from.has_authorized()) {
      set_authorized(from.authorized());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RealAuthorizeUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealAuthorizeUserCmd::CopyFrom(const RealAuthorizeUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealAuthorizeUserCmd::IsInitialized() const {

  return true;
}

void RealAuthorizeUserCmd::Swap(RealAuthorizeUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(authoriz_state_, other->authoriz_state_);
    std::swap(authorized_, other->authorized_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RealAuthorizeUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RealAuthorizeUserCmd_descriptor_;
  metadata.reflection = RealAuthorizeUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RealAuthorizeServerCmd::kCmdFieldNumber;
const int RealAuthorizeServerCmd::kParamFieldNumber;
const int RealAuthorizeServerCmd::kAuthorizedFieldNumber;
#endif  // !_MSC_VER

RealAuthorizeServerCmd::RealAuthorizeServerCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RealAuthorizeServerCmd)
}

void RealAuthorizeServerCmd::InitAsDefaultInstance() {
}

RealAuthorizeServerCmd::RealAuthorizeServerCmd(const RealAuthorizeServerCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RealAuthorizeServerCmd)
}

void RealAuthorizeServerCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  param_ = 23;
  authorized_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RealAuthorizeServerCmd::~RealAuthorizeServerCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RealAuthorizeServerCmd)
  SharedDtor();
}

void RealAuthorizeServerCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RealAuthorizeServerCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealAuthorizeServerCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RealAuthorizeServerCmd_descriptor_;
}

const RealAuthorizeServerCmd& RealAuthorizeServerCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginUserCmd_2eproto();
  return *default_instance_;
}

RealAuthorizeServerCmd* RealAuthorizeServerCmd::default_instance_ = NULL;

RealAuthorizeServerCmd* RealAuthorizeServerCmd::New() const {
  return new RealAuthorizeServerCmd;
}

void RealAuthorizeServerCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 1;
    param_ = 23;
    authorized_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RealAuthorizeServerCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RealAuthorizeServerCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.LoginCmdParam param = 2 [default = REAL_AUTHORIZE_SEERVER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::LoginCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::LoginCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_authorized;
        break;
      }

      // optional bool authorized = 3;
      case 3: {
        if (tag == 24) {
         parse_authorized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authorized_)));
          set_has_authorized();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RealAuthorizeServerCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RealAuthorizeServerCmd)
  return false;
#undef DO_
}

void RealAuthorizeServerCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RealAuthorizeServerCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = REAL_AUTHORIZE_SEERVER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool authorized = 3;
  if (has_authorized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->authorized(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RealAuthorizeServerCmd)
}

::google::protobuf::uint8* RealAuthorizeServerCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RealAuthorizeServerCmd)
  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.LoginCmdParam param = 2 [default = REAL_AUTHORIZE_SEERVER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool authorized = 3;
  if (has_authorized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->authorized(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RealAuthorizeServerCmd)
  return target;
}

int RealAuthorizeServerCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.LoginCmdParam param = 2 [default = REAL_AUTHORIZE_SEERVER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool authorized = 3;
    if (has_authorized()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealAuthorizeServerCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RealAuthorizeServerCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RealAuthorizeServerCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RealAuthorizeServerCmd::MergeFrom(const RealAuthorizeServerCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_authorized()) {
      set_authorized(from.authorized());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RealAuthorizeServerCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealAuthorizeServerCmd::CopyFrom(const RealAuthorizeServerCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealAuthorizeServerCmd::IsInitialized() const {

  return true;
}

void RealAuthorizeServerCmd::Swap(RealAuthorizeServerCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(authorized_, other->authorized_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RealAuthorizeServerCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RealAuthorizeServerCmd_descriptor_;
  metadata.reflection = RealAuthorizeServerCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
