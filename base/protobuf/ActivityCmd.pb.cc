// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActivityCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* StartActCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartActCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopActCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopActCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BCatUFOPosActCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BCatUFOPosActCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActProgressNtfCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActProgressNtfCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartGlobalActCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartGlobalActCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityProgress_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActivityParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GlobalActivityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EActProgress_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActivityCmd_2eproto() {
  protobuf_AddDesc_ActivityCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActivityCmd.proto");
  GOOGLE_CHECK(file != NULL);
  StartActCmd_descriptor_ = file->message_type(0);
  static const int StartActCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartActCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartActCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartActCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartActCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartActCmd, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartActCmd, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartActCmd, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartActCmd, unshowmap_),
  };
  StartActCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartActCmd_descriptor_,
      StartActCmd::default_instance_,
      StartActCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartActCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartActCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartActCmd));
  StopActCmd_descriptor_ = file->message_type(1);
  static const int StopActCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopActCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopActCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopActCmd, id_),
  };
  StopActCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopActCmd_descriptor_,
      StopActCmd::default_instance_,
      StopActCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopActCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopActCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopActCmd));
  BCatUFOPosActCmd_descriptor_ = file->message_type(2);
  static const int BCatUFOPosActCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCatUFOPosActCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCatUFOPosActCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCatUFOPosActCmd, pos_),
  };
  BCatUFOPosActCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BCatUFOPosActCmd_descriptor_,
      BCatUFOPosActCmd::default_instance_,
      BCatUFOPosActCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCatUFOPosActCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCatUFOPosActCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BCatUFOPosActCmd));
  ActProgressNtfCmd_descriptor_ = file->message_type(3);
  static const int ActProgressNtfCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActProgressNtfCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActProgressNtfCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActProgressNtfCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActProgressNtfCmd, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActProgressNtfCmd, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActProgressNtfCmd, starttime_),
  };
  ActProgressNtfCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActProgressNtfCmd_descriptor_,
      ActProgressNtfCmd::default_instance_,
      ActProgressNtfCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActProgressNtfCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActProgressNtfCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActProgressNtfCmd));
  StartGlobalActCmd_descriptor_ = file->message_type(4);
  static const int StartGlobalActCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGlobalActCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGlobalActCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGlobalActCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGlobalActCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGlobalActCmd, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGlobalActCmd, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGlobalActCmd, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGlobalActCmd, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGlobalActCmd, count_),
  };
  StartGlobalActCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartGlobalActCmd_descriptor_,
      StartGlobalActCmd::default_instance_,
      StartGlobalActCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGlobalActCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGlobalActCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartGlobalActCmd));
  ActivityProgress_descriptor_ = file->message_type(5);
  static const int ActivityProgress_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityProgress, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityProgress, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityProgress, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityProgress, endtime_),
  };
  ActivityProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityProgress_descriptor_,
      ActivityProgress::default_instance_,
      ActivityProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityProgress));
  ActivityParam_descriptor_ = file->enum_type(0);
  GlobalActivityType_descriptor_ = file->enum_type(1);
  EActProgress_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActivityCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartActCmd_descriptor_, &StartActCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopActCmd_descriptor_, &StopActCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BCatUFOPosActCmd_descriptor_, &BCatUFOPosActCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActProgressNtfCmd_descriptor_, &ActProgressNtfCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartGlobalActCmd_descriptor_, &StartGlobalActCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityProgress_descriptor_, &ActivityProgress::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActivityCmd_2eproto() {
  delete StartActCmd::default_instance_;
  delete StartActCmd_reflection_;
  delete StopActCmd::default_instance_;
  delete StopActCmd_reflection_;
  delete BCatUFOPosActCmd::default_instance_;
  delete BCatUFOPosActCmd_reflection_;
  delete ActProgressNtfCmd::default_instance_;
  delete ActProgressNtfCmd_reflection_;
  delete StartGlobalActCmd::default_instance_;
  delete StartGlobalActCmd_reflection_;
  delete ActivityProgress::default_instance_;
  delete ActivityProgress_reflection_;
}

void protobuf_AddDesc_ActivityCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ActivityCmd.proto\022\003Cmd\032\nxCmd.proto\032\021Pr"
    "otoCommon.proto\"\340\001\n\013StartActCmd\022,\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\021ACTIVITY_PROTOCMD\022:\n"
    "\005param\030\002 \001(\0162\022.Cmd.ActivityParam:\027ACTIVI"
    "TYPARAM_ACT_START\022\n\n\002id\030\003 \001(\r\022\020\n\005mapid\030\004"
    " \001(\r:\0010\022\024\n\tstarttime\030\005 \001(\r:\0010\022\022\n\007endtime"
    "\030\006 \001(\r:\0010\022\014\n\004path\030\007 \001(\r\022\021\n\tunshowmap\030\010 \003"
    "(\r\"\201\001\n\nStopActCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\021ACTIVITY_PROTOCMD\0229\n\005param\030\002 \001(\0162\022"
    ".Cmd.ActivityParam:\026ACTIVITYPARAM_ACT_ST"
    "OP\022\n\n\002id\030\003 \001(\r\"\232\001\n\020BCatUFOPosActCmd\022,\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\021ACTIVITY_PROTOCM"
    "D\022<\n\005param\030\002 \001(\0162\022.Cmd.ActivityParam:\031AC"
    "TIVITYPARAM_BCAT_UFOPOS\022\032\n\003pos\030\003 \001(\0132\r.C"
    "md.ScenePos\"\325\001\n\021ActProgressNtfCmd\022,\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\021ACTIVITY_PROTOCMD\022"
    "=\n\005param\030\002 \001(\0162\022.Cmd.ActivityParam:\032ACTI"
    "VITYPARAM_PROGRESS_NTF\022\n\n\002id\030\003 \001(\r\022#\n\010pr"
    "ogress\030\004 \001(\0162\021.Cmd.EActProgress\022\017\n\007endti"
    "me\030\005 \001(\r\022\021\n\tstarttime\030\006 \001(\r\"\210\002\n\021StartGlo"
    "balActCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021AC"
    "TIVITY_PROTOCMD\022A\n\005param\030\002 \001(\0162\022.Cmd.Act"
    "ivityParam:\036ACTIVITYPARAM_GLOBAL_ACT_STA"
    "RT\022\n\n\002id\030\003 \001(\r\022%\n\004type\030\004 \001(\0162\027.Cmd.Globa"
    "lActivityType\022\016\n\006params\030\005 \003(\r\022\021\n\tstartti"
    "me\030\006 \001(\r\022\017\n\007endtime\030\007 \001(\r\022\014\n\004open\030\010 \001(\010\022"
    "\r\n\005count\030\t \001(\r\"W\n\020ActivityProgress\022\r\n\005ac"
    "tid\030\001 \001(\r\022\020\n\010progress\030\002 \001(\r\022\021\n\tstarttime"
    "\030\003 \003(\r\022\017\n\007endtime\030\004 \003(\r*\253\001\n\rActivityPara"
    "m\022\033\n\027ACTIVITYPARAM_ACT_START\020\001\022\035\n\031ACTIVI"
    "TYPARAM_BCAT_UFOPOS\020\002\022\036\n\032ACTIVITYPARAM_P"
    "ROGRESS_NTF\020\003\022\032\n\026ACTIVITYPARAM_ACT_STOP\020"
    "\004\022\"\n\036ACTIVITYPARAM_GLOBAL_ACT_START\020\005*\204\004"
    "\n\022GlobalActivityType\022\021\n\rGACTIVITY_MIN\020\000\022"
    "\024\n\020GACTIVITY_AUGURY\020\016\022\031\n\025GACTIVITY_GUILD"
    "_QUEST\020\017\022\032\n\026GACTIVITY_GUILD_DONATE\020\020\022\031\n\025"
    "GACTIVITY_GUILD_FUBEN\020\021\022\034\n\030GACTIVITY_NOV"
    "ICE_WELFARE\020\022\022\033\n\027GACTIVITY_NORMAL_REFINE"
    "\020\024\022\031\n\025GACTIVITY_SAFE_REFINE\020\025\022\"\n\036GACTIVI"
    "TY_SAFE_REFINE_DISCOUNT\020\026\022\024\n\020GACTIVITY_R"
    "ECALL\020\027\022\034\n\030GACTIVITY_SPRING_LOTTERY\020\030\022\035\n"
    "\031GACTIVITY_WEDDING_SERVICE\020\032\022\031\n\025GACTIVIT"
    "Y_FOOD_RECIPE\020\033\022!\n\035GACTIVITY_CHARGE_EXTR"
    "A_REWARD\020\036\022\035\n\031GACTIVITY_CHARGE_DISCOUNT\020"
    "\037\022 \n\034GACTIVITY_CHARGE_EXTRA_COUNT\020 \022\024\n\020G"
    "ACTIVITY_ALTMAN\020e\022\021\n\rGACTIVITY_MAX\020f*\342\001\n"
    "\014EActProgress\022\025\n\021EACTPROGRESS_NONE\020\000\022\022\n\016"
    "EACTPROGRESS_1\020\001\022\022\n\016EACTPROGRESS_2\020\002\022\022\n\016"
    "EACTPROGRESS_3\020\003\022\022\n\016EACTPROGRESS_4\020\004\022\022\n\016"
    "EACTPROGRESS_5\020\005\022\022\n\016EACTPROGRESS_6\020\006\022\022\n\016"
    "EACTPROGRESS_7\020\007\022\025\n\021EACTPROGRESS_FAIL\020d\022"
    "\030\n\024EACTPROGRESS_SUCCESS\020e", 2065);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActivityCmd.proto", &protobuf_RegisterTypes);
  StartActCmd::default_instance_ = new StartActCmd();
  StopActCmd::default_instance_ = new StopActCmd();
  BCatUFOPosActCmd::default_instance_ = new BCatUFOPosActCmd();
  ActProgressNtfCmd::default_instance_ = new ActProgressNtfCmd();
  StartGlobalActCmd::default_instance_ = new StartGlobalActCmd();
  ActivityProgress::default_instance_ = new ActivityProgress();
  StartActCmd::default_instance_->InitAsDefaultInstance();
  StopActCmd::default_instance_->InitAsDefaultInstance();
  BCatUFOPosActCmd::default_instance_->InitAsDefaultInstance();
  ActProgressNtfCmd::default_instance_->InitAsDefaultInstance();
  StartGlobalActCmd::default_instance_->InitAsDefaultInstance();
  ActivityProgress::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActivityCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActivityCmd_2eproto {
  StaticDescriptorInitializer_ActivityCmd_2eproto() {
    protobuf_AddDesc_ActivityCmd_2eproto();
  }
} static_descriptor_initializer_ActivityCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* ActivityParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityParam_descriptor_;
}
bool ActivityParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GlobalActivityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalActivityType_descriptor_;
}
bool GlobalActivityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 26:
    case 27:
    case 30:
    case 31:
    case 32:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EActProgress_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EActProgress_descriptor_;
}
bool EActProgress_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int StartActCmd::kCmdFieldNumber;
const int StartActCmd::kParamFieldNumber;
const int StartActCmd::kIdFieldNumber;
const int StartActCmd::kMapidFieldNumber;
const int StartActCmd::kStarttimeFieldNumber;
const int StartActCmd::kEndtimeFieldNumber;
const int StartActCmd::kPathFieldNumber;
const int StartActCmd::kUnshowmapFieldNumber;
#endif  // !_MSC_VER

StartActCmd::StartActCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StartActCmd)
}

void StartActCmd::InitAsDefaultInstance() {
}

StartActCmd::StartActCmd(const StartActCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StartActCmd)
}

void StartActCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 60;
  param_ = 1;
  id_ = 0u;
  mapid_ = 0u;
  starttime_ = 0u;
  endtime_ = 0u;
  path_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartActCmd::~StartActCmd() {
  // @@protoc_insertion_point(destructor:Cmd.StartActCmd)
  SharedDtor();
}

void StartActCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartActCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartActCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartActCmd_descriptor_;
}

const StartActCmd& StartActCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityCmd_2eproto();
  return *default_instance_;
}

StartActCmd* StartActCmd::default_instance_ = NULL;

StartActCmd* StartActCmd::New() const {
  return new StartActCmd;
}

void StartActCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartActCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, endtime_);
    cmd_ = 60;
    param_ = 1;
    path_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  unshowmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartActCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StartActCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_ACT_START];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ActivityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ActivityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_path;
        break;
      }

      // optional uint32 path = 7;
      case 7: {
        if (tag == 56) {
         parse_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &path_)));
          set_has_path();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_unshowmap;
        break;
      }

      // repeated uint32 unshowmap = 8;
      case 8: {
        if (tag == 64) {
         parse_unshowmap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_unshowmap())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unshowmap())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_unshowmap;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StartActCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StartActCmd)
  return false;
#undef DO_
}

void StartActCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StartActCmd)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_ACT_START];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mapid(), output);
  }

  // optional uint32 starttime = 5 [default = 0];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->starttime(), output);
  }

  // optional uint32 endtime = 6 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->endtime(), output);
  }

  // optional uint32 path = 7;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->path(), output);
  }

  // repeated uint32 unshowmap = 8;
  for (int i = 0; i < this->unshowmap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->unshowmap(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StartActCmd)
}

::google::protobuf::uint8* StartActCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StartActCmd)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_ACT_START];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mapid(), target);
  }

  // optional uint32 starttime = 5 [default = 0];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->starttime(), target);
  }

  // optional uint32 endtime = 6 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->endtime(), target);
  }

  // optional uint32 path = 7;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->path(), target);
  }

  // repeated uint32 unshowmap = 8;
  for (int i = 0; i < this->unshowmap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->unshowmap(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StartActCmd)
  return target;
}

int StartActCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_ACT_START];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 mapid = 4 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 starttime = 5 [default = 0];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 endtime = 6 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 path = 7;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->path());
    }

  }
  // repeated uint32 unshowmap = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->unshowmap_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unshowmap(i));
    }
    total_size += 1 * this->unshowmap_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartActCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartActCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartActCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartActCmd::MergeFrom(const StartActCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  unshowmap_.MergeFrom(from.unshowmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartActCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartActCmd::CopyFrom(const StartActCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartActCmd::IsInitialized() const {

  return true;
}

void StartActCmd::Swap(StartActCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(mapid_, other->mapid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(path_, other->path_);
    unshowmap_.Swap(&other->unshowmap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartActCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartActCmd_descriptor_;
  metadata.reflection = StartActCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopActCmd::kCmdFieldNumber;
const int StopActCmd::kParamFieldNumber;
const int StopActCmd::kIdFieldNumber;
#endif  // !_MSC_VER

StopActCmd::StopActCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StopActCmd)
}

void StopActCmd::InitAsDefaultInstance() {
}

StopActCmd::StopActCmd(const StopActCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StopActCmd)
}

void StopActCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 60;
  param_ = 4;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopActCmd::~StopActCmd() {
  // @@protoc_insertion_point(destructor:Cmd.StopActCmd)
  SharedDtor();
}

void StopActCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopActCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopActCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopActCmd_descriptor_;
}

const StopActCmd& StopActCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityCmd_2eproto();
  return *default_instance_;
}

StopActCmd* StopActCmd::default_instance_ = NULL;

StopActCmd* StopActCmd::New() const {
  return new StopActCmd;
}

void StopActCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 60;
    param_ = 4;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopActCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StopActCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_ACT_STOP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ActivityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ActivityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StopActCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StopActCmd)
  return false;
#undef DO_
}

void StopActCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StopActCmd)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_ACT_STOP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StopActCmd)
}

::google::protobuf::uint8* StopActCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StopActCmd)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_ACT_STOP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StopActCmd)
  return target;
}

int StopActCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_ACT_STOP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopActCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopActCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopActCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopActCmd::MergeFrom(const StopActCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopActCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopActCmd::CopyFrom(const StopActCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopActCmd::IsInitialized() const {

  return true;
}

void StopActCmd::Swap(StopActCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopActCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopActCmd_descriptor_;
  metadata.reflection = StopActCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BCatUFOPosActCmd::kCmdFieldNumber;
const int BCatUFOPosActCmd::kParamFieldNumber;
const int BCatUFOPosActCmd::kPosFieldNumber;
#endif  // !_MSC_VER

BCatUFOPosActCmd::BCatUFOPosActCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BCatUFOPosActCmd)
}

void BCatUFOPosActCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

BCatUFOPosActCmd::BCatUFOPosActCmd(const BCatUFOPosActCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BCatUFOPosActCmd)
}

void BCatUFOPosActCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 60;
  param_ = 2;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BCatUFOPosActCmd::~BCatUFOPosActCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BCatUFOPosActCmd)
  SharedDtor();
}

void BCatUFOPosActCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void BCatUFOPosActCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BCatUFOPosActCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BCatUFOPosActCmd_descriptor_;
}

const BCatUFOPosActCmd& BCatUFOPosActCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityCmd_2eproto();
  return *default_instance_;
}

BCatUFOPosActCmd* BCatUFOPosActCmd::default_instance_ = NULL;

BCatUFOPosActCmd* BCatUFOPosActCmd::New() const {
  return new BCatUFOPosActCmd;
}

void BCatUFOPosActCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 60;
    param_ = 2;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BCatUFOPosActCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BCatUFOPosActCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_BCAT_UFOPOS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ActivityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ActivityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BCatUFOPosActCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BCatUFOPosActCmd)
  return false;
#undef DO_
}

void BCatUFOPosActCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BCatUFOPosActCmd)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_BCAT_UFOPOS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BCatUFOPosActCmd)
}

::google::protobuf::uint8* BCatUFOPosActCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BCatUFOPosActCmd)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_BCAT_UFOPOS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BCatUFOPosActCmd)
  return target;
}

int BCatUFOPosActCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_BCAT_UFOPOS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ScenePos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BCatUFOPosActCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BCatUFOPosActCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BCatUFOPosActCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BCatUFOPosActCmd::MergeFrom(const BCatUFOPosActCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BCatUFOPosActCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCatUFOPosActCmd::CopyFrom(const BCatUFOPosActCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCatUFOPosActCmd::IsInitialized() const {

  return true;
}

void BCatUFOPosActCmd::Swap(BCatUFOPosActCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BCatUFOPosActCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BCatUFOPosActCmd_descriptor_;
  metadata.reflection = BCatUFOPosActCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActProgressNtfCmd::kCmdFieldNumber;
const int ActProgressNtfCmd::kParamFieldNumber;
const int ActProgressNtfCmd::kIdFieldNumber;
const int ActProgressNtfCmd::kProgressFieldNumber;
const int ActProgressNtfCmd::kEndtimeFieldNumber;
const int ActProgressNtfCmd::kStarttimeFieldNumber;
#endif  // !_MSC_VER

ActProgressNtfCmd::ActProgressNtfCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActProgressNtfCmd)
}

void ActProgressNtfCmd::InitAsDefaultInstance() {
}

ActProgressNtfCmd::ActProgressNtfCmd(const ActProgressNtfCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActProgressNtfCmd)
}

void ActProgressNtfCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 60;
  param_ = 3;
  id_ = 0u;
  progress_ = 0;
  endtime_ = 0u;
  starttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActProgressNtfCmd::~ActProgressNtfCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ActProgressNtfCmd)
  SharedDtor();
}

void ActProgressNtfCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActProgressNtfCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActProgressNtfCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActProgressNtfCmd_descriptor_;
}

const ActProgressNtfCmd& ActProgressNtfCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityCmd_2eproto();
  return *default_instance_;
}

ActProgressNtfCmd* ActProgressNtfCmd::default_instance_ = NULL;

ActProgressNtfCmd* ActProgressNtfCmd::New() const {
  return new ActProgressNtfCmd;
}

void ActProgressNtfCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActProgressNtfCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, starttime_);
    cmd_ = 60;
    param_ = 3;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActProgressNtfCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActProgressNtfCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_PROGRESS_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ActivityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ActivityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_progress;
        break;
      }

      // optional .Cmd.EActProgress progress = 4;
      case 4: {
        if (tag == 32) {
         parse_progress:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EActProgress_IsValid(value)) {
            set_progress(static_cast< ::Cmd::EActProgress >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 5;
      case 5: {
        if (tag == 40) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 6;
      case 6: {
        if (tag == 48) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActProgressNtfCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActProgressNtfCmd)
  return false;
#undef DO_
}

void ActProgressNtfCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActProgressNtfCmd)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_PROGRESS_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional .Cmd.EActProgress progress = 4;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->progress(), output);
  }

  // optional uint32 endtime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endtime(), output);
  }

  // optional uint32 starttime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->starttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActProgressNtfCmd)
}

::google::protobuf::uint8* ActProgressNtfCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActProgressNtfCmd)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_PROGRESS_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional .Cmd.EActProgress progress = 4;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->progress(), target);
  }

  // optional uint32 endtime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endtime(), target);
  }

  // optional uint32 starttime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->starttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActProgressNtfCmd)
  return target;
}

int ActProgressNtfCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_PROGRESS_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .Cmd.EActProgress progress = 4;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->progress());
    }

    // optional uint32 endtime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 starttime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActProgressNtfCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActProgressNtfCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActProgressNtfCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActProgressNtfCmd::MergeFrom(const ActProgressNtfCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActProgressNtfCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActProgressNtfCmd::CopyFrom(const ActProgressNtfCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActProgressNtfCmd::IsInitialized() const {

  return true;
}

void ActProgressNtfCmd::Swap(ActProgressNtfCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(progress_, other->progress_);
    std::swap(endtime_, other->endtime_);
    std::swap(starttime_, other->starttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActProgressNtfCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActProgressNtfCmd_descriptor_;
  metadata.reflection = ActProgressNtfCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartGlobalActCmd::kCmdFieldNumber;
const int StartGlobalActCmd::kParamFieldNumber;
const int StartGlobalActCmd::kIdFieldNumber;
const int StartGlobalActCmd::kTypeFieldNumber;
const int StartGlobalActCmd::kParamsFieldNumber;
const int StartGlobalActCmd::kStarttimeFieldNumber;
const int StartGlobalActCmd::kEndtimeFieldNumber;
const int StartGlobalActCmd::kOpenFieldNumber;
const int StartGlobalActCmd::kCountFieldNumber;
#endif  // !_MSC_VER

StartGlobalActCmd::StartGlobalActCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StartGlobalActCmd)
}

void StartGlobalActCmd::InitAsDefaultInstance() {
}

StartGlobalActCmd::StartGlobalActCmd(const StartGlobalActCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StartGlobalActCmd)
}

void StartGlobalActCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 60;
  param_ = 5;
  id_ = 0u;
  type_ = 0;
  starttime_ = 0u;
  endtime_ = 0u;
  open_ = false;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartGlobalActCmd::~StartGlobalActCmd() {
  // @@protoc_insertion_point(destructor:Cmd.StartGlobalActCmd)
  SharedDtor();
}

void StartGlobalActCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartGlobalActCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartGlobalActCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartGlobalActCmd_descriptor_;
}

const StartGlobalActCmd& StartGlobalActCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityCmd_2eproto();
  return *default_instance_;
}

StartGlobalActCmd* StartGlobalActCmd::default_instance_ = NULL;

StartGlobalActCmd* StartGlobalActCmd::New() const {
  return new StartGlobalActCmd;
}

void StartGlobalActCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartGlobalActCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(id_, type_);
    ZR_(starttime_, open_);
    cmd_ = 60;
    param_ = 5;
  }
  count_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartGlobalActCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StartGlobalActCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_GLOBAL_ACT_START];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ActivityParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ActivityParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.GlobalActivityType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GlobalActivityType_IsValid(value)) {
            set_type(static_cast< ::Cmd::GlobalActivityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_params;
        break;
      }

      // repeated uint32 params = 5;
      case 5: {
        if (tag == 40) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_params())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_params())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_params;
        if (input->ExpectTag(48)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 6;
      case 6: {
        if (tag == 48) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 7;
      case 7: {
        if (tag == 56) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_open;
        break;
      }

      // optional bool open = 8;
      case 8: {
        if (tag == 64) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_count;
        break;
      }

      // optional uint32 count = 9;
      case 9: {
        if (tag == 72) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StartGlobalActCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StartGlobalActCmd)
  return false;
#undef DO_
}

void StartGlobalActCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StartGlobalActCmd)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_GLOBAL_ACT_START];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional .Cmd.GlobalActivityType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // repeated uint32 params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->params(i), output);
  }

  // optional uint32 starttime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->starttime(), output);
  }

  // optional uint32 endtime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->endtime(), output);
  }

  // optional bool open = 8;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->open(), output);
  }

  // optional uint32 count = 9;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StartGlobalActCmd)
}

::google::protobuf::uint8* StartGlobalActCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StartGlobalActCmd)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_GLOBAL_ACT_START];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional .Cmd.GlobalActivityType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // repeated uint32 params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->params(i), target);
  }

  // optional uint32 starttime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->starttime(), target);
  }

  // optional uint32 endtime = 7;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->endtime(), target);
  }

  // optional bool open = 8;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->open(), target);
  }

  // optional uint32 count = 9;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StartGlobalActCmd)
  return target;
}

int StartGlobalActCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = ACTIVITY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ActivityParam param = 2 [default = ACTIVITYPARAM_GLOBAL_ACT_START];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .Cmd.GlobalActivityType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 starttime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 endtime = 7;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional bool open = 8;
    if (has_open()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 count = 9;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated uint32 params = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartGlobalActCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartGlobalActCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartGlobalActCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartGlobalActCmd::MergeFrom(const StartGlobalActCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartGlobalActCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartGlobalActCmd::CopyFrom(const StartGlobalActCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartGlobalActCmd::IsInitialized() const {

  return true;
}

void StartGlobalActCmd::Swap(StartGlobalActCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    params_.Swap(&other->params_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(open_, other->open_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartGlobalActCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartGlobalActCmd_descriptor_;
  metadata.reflection = StartGlobalActCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityProgress::kActidFieldNumber;
const int ActivityProgress::kProgressFieldNumber;
const int ActivityProgress::kStarttimeFieldNumber;
const int ActivityProgress::kEndtimeFieldNumber;
#endif  // !_MSC_VER

ActivityProgress::ActivityProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityProgress)
}

void ActivityProgress::InitAsDefaultInstance() {
}

ActivityProgress::ActivityProgress(const ActivityProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityProgress)
}

void ActivityProgress::SharedCtor() {
  _cached_size_ = 0;
  actid_ = 0u;
  progress_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityProgress::~ActivityProgress() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityProgress)
  SharedDtor();
}

void ActivityProgress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityProgress_descriptor_;
}

const ActivityProgress& ActivityProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityCmd_2eproto();
  return *default_instance_;
}

ActivityProgress* ActivityProgress::default_instance_ = NULL;

ActivityProgress* ActivityProgress::New() const {
  return new ActivityProgress;
}

void ActivityProgress::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityProgress*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(actid_, progress_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  starttime_.Clear();
  endtime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 actid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 2;
      case 2: {
        if (tag == 16) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_starttime;
        break;
      }

      // repeated uint32 starttime = 3;
      case 3: {
        if (tag == 24) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_starttime())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_starttime())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_starttime;
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // repeated uint32 endtime = 4;
      case 4: {
        if (tag == 32) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_endtime())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_endtime())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityProgress)
  return false;
#undef DO_
}

void ActivityProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityProgress)
  // optional uint32 actid = 1;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->actid(), output);
  }

  // optional uint32 progress = 2;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->progress(), output);
  }

  // repeated uint32 starttime = 3;
  for (int i = 0; i < this->starttime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->starttime(i), output);
  }

  // repeated uint32 endtime = 4;
  for (int i = 0; i < this->endtime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->endtime(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityProgress)
}

::google::protobuf::uint8* ActivityProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityProgress)
  // optional uint32 actid = 1;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->actid(), target);
  }

  // optional uint32 progress = 2;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->progress(), target);
  }

  // repeated uint32 starttime = 3;
  for (int i = 0; i < this->starttime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->starttime(i), target);
  }

  // repeated uint32 endtime = 4;
  for (int i = 0; i < this->endtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->endtime(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityProgress)
  return target;
}

int ActivityProgress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 actid = 1;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actid());
    }

    // optional uint32 progress = 2;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

  }
  // repeated uint32 starttime = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->starttime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->starttime(i));
    }
    total_size += 1 * this->starttime_size() + data_size;
  }

  // repeated uint32 endtime = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->endtime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->endtime(i));
    }
    total_size += 1 * this->endtime_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityProgress::MergeFrom(const ActivityProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  starttime_.MergeFrom(from.starttime_);
  endtime_.MergeFrom(from.endtime_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityProgress::CopyFrom(const ActivityProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityProgress::IsInitialized() const {

  return true;
}

void ActivityProgress::Swap(ActivityProgress* other) {
  if (other != this) {
    std::swap(actid_, other->actid_);
    std::swap(progress_, other->progress_);
    starttime_.Swap(&other->starttime_);
    endtime_.Swap(&other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityProgress_descriptor_;
  metadata.reflection = ActivityProgress_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
