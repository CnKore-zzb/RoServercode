// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeddingSCmd.proto

#ifndef PROTOBUF_WeddingSCmd_2eproto__INCLUDED
#define PROTOBUF_WeddingSCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "WeddingCCmd.pb.h"
#include "SceneItem.pb.h"
#include "ProtoCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WeddingSCmd_2eproto();
void protobuf_AssignDesc_WeddingSCmd_2eproto();
void protobuf_ShutdownFile_WeddingSCmd_2eproto();

class ForwardC2WeddingSCmd;
class ForwardS2WeddingSCmd;
class ForwardWedding2SSCmd;
class ForwardWedding2CSCmd;
class WeddingManualInfo;
class WeddingInfo;
class SyncWeddingInfoSCmd;
class UpdateWeddingManualSCmd;
class StartWeddingSCmd;
class StopWeddingSCmd;
class ReserveWeddingResultSCmd;
class BuyServiceWeddingSCmd;
class MarrySCmd;
class CheckWeddingReserverSCmd;
class ParnterInfo;
class MissyouInviteWedSCmd;
class MarrySuccessSCmd;
class UserRenameWedSCmd;

enum WeddingSParam {
  WEDDINGSPARAM_FORWARD_C2WEDDING = 1,
  WEDDINGSPARAM_FORWARD_S2WEDDING = 2,
  WEDDINGSPARAM_FORWARD_WEDDING2S = 3,
  WEDDINGSPARAM_FORWARD_WEDDING2C = 8,
  WEDDINGSPARAM_SYNC_WEDDINGINFO = 4,
  WEDDINGSPARAM_START_WEDDING = 5,
  WEDDINGSPARAM_STOP_WEDDING = 6,
  WEDDINGSPARAM_RESERVE_WEDDING_RESULT = 7,
  WEDDINGSPARAM_BUY_SERVICE = 9,
  WEDDINGSPARAM_MARRY = 11,
  WEDDINGSPARAM_CHECK_WEDDING_RESERVE = 12,
  WEDDINGSPARAM_MISSYOU_INVITE = 13,
  WEDDINGSPARAM_UPDATE_MANUAL = 14,
  WEDDINGSPARAM_MARRY_SUCCESS = 15,
  WEDDINGSPARAM_USER_RENAME = 16
};
bool WeddingSParam_IsValid(int value);
const WeddingSParam WeddingSParam_MIN = WEDDINGSPARAM_FORWARD_C2WEDDING;
const WeddingSParam WeddingSParam_MAX = WEDDINGSPARAM_USER_RENAME;
const int WeddingSParam_ARRAYSIZE = WeddingSParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* WeddingSParam_descriptor();
inline const ::std::string& WeddingSParam_Name(WeddingSParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    WeddingSParam_descriptor(), value);
}
inline bool WeddingSParam_Parse(
    const ::std::string& name, WeddingSParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WeddingSParam>(
    WeddingSParam_descriptor(), name, value);
}
// ===================================================================

class ForwardC2WeddingSCmd : public ::google::protobuf::Message {
 public:
  ForwardC2WeddingSCmd();
  virtual ~ForwardC2WeddingSCmd();

  ForwardC2WeddingSCmd(const ForwardC2WeddingSCmd& from);

  inline ForwardC2WeddingSCmd& operator=(const ForwardC2WeddingSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardC2WeddingSCmd& default_instance();

  void Swap(ForwardC2WeddingSCmd* other);

  // implements Message ----------------------------------------------

  ForwardC2WeddingSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardC2WeddingSCmd& from);
  void MergeFrom(const ForwardC2WeddingSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_C2WEDDING];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingSParam param() const;
  inline void set_param(::Cmd::WeddingSParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 7;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 7;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ForwardC2WeddingSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 len_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static ForwardC2WeddingSCmd* default_instance_;
};
// -------------------------------------------------------------------

class ForwardS2WeddingSCmd : public ::google::protobuf::Message {
 public:
  ForwardS2WeddingSCmd();
  virtual ~ForwardS2WeddingSCmd();

  ForwardS2WeddingSCmd(const ForwardS2WeddingSCmd& from);

  inline ForwardS2WeddingSCmd& operator=(const ForwardS2WeddingSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardS2WeddingSCmd& default_instance();

  void Swap(ForwardS2WeddingSCmd* other);

  // implements Message ----------------------------------------------

  ForwardS2WeddingSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardS2WeddingSCmd& from);
  void MergeFrom(const ForwardS2WeddingSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_S2WEDDING];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingSParam param() const;
  inline void set_param(::Cmd::WeddingSParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 7;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 7;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ForwardS2WeddingSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 len_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static ForwardS2WeddingSCmd* default_instance_;
};
// -------------------------------------------------------------------

class ForwardWedding2SSCmd : public ::google::protobuf::Message {
 public:
  ForwardWedding2SSCmd();
  virtual ~ForwardWedding2SSCmd();

  ForwardWedding2SSCmd(const ForwardWedding2SSCmd& from);

  inline ForwardWedding2SSCmd& operator=(const ForwardWedding2SSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardWedding2SSCmd& default_instance();

  void Swap(ForwardWedding2SSCmd* other);

  // implements Message ----------------------------------------------

  ForwardWedding2SSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardWedding2SSCmd& from);
  void MergeFrom(const ForwardWedding2SSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_WEDDING2S];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingSParam param() const;
  inline void set_param(::Cmd::WeddingSParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 5;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 5;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ForwardWedding2SSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* data_;
  ::google::protobuf::uint32 len_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static ForwardWedding2SSCmd* default_instance_;
};
// -------------------------------------------------------------------

class ForwardWedding2CSCmd : public ::google::protobuf::Message {
 public:
  ForwardWedding2CSCmd();
  virtual ~ForwardWedding2CSCmd();

  ForwardWedding2CSCmd(const ForwardWedding2CSCmd& from);

  inline ForwardWedding2CSCmd& operator=(const ForwardWedding2CSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardWedding2CSCmd& default_instance();

  void Swap(ForwardWedding2CSCmd* other);

  // implements Message ----------------------------------------------

  ForwardWedding2CSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardWedding2CSCmd& from);
  void MergeFrom(const ForwardWedding2CSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_WEDDING2C];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingSParam param() const;
  inline void set_param(::Cmd::WeddingSParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 5;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 5;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ForwardWedding2CSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* data_;
  ::google::protobuf::uint32 len_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static ForwardWedding2CSCmd* default_instance_;
};
// -------------------------------------------------------------------

class WeddingManualInfo : public ::google::protobuf::Message {
 public:
  WeddingManualInfo();
  virtual ~WeddingManualInfo();

  WeddingManualInfo(const WeddingManualInfo& from);

  inline WeddingManualInfo& operator=(const WeddingManualInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeddingManualInfo& default_instance();

  void Swap(WeddingManualInfo* other);

  // implements Message ----------------------------------------------

  WeddingManualInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeddingManualInfo& from);
  void MergeFrom(const WeddingManualInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 serviceids = 1;
  inline int serviceids_size() const;
  inline void clear_serviceids();
  static const int kServiceidsFieldNumber = 1;
  inline ::google::protobuf::uint32 serviceids(int index) const;
  inline void set_serviceids(int index, ::google::protobuf::uint32 value);
  inline void add_serviceids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      serviceids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_serviceids();

  // optional uint32 ringid = 2 [default = 0];
  inline bool has_ringid() const;
  inline void clear_ringid();
  static const int kRingidFieldNumber = 2;
  inline ::google::protobuf::uint32 ringid() const;
  inline void set_ringid(::google::protobuf::uint32 value);

  // optional uint32 photoindex1 = 3 [default = 0];
  inline bool has_photoindex1() const;
  inline void clear_photoindex1();
  static const int kPhotoindex1FieldNumber = 3;
  inline ::google::protobuf::uint32 photoindex1() const;
  inline void set_photoindex1(::google::protobuf::uint32 value);

  // optional uint32 photoindex2 = 4 [default = 0];
  inline bool has_photoindex2() const;
  inline void clear_photoindex2();
  static const int kPhotoindex2FieldNumber = 4;
  inline ::google::protobuf::uint32 photoindex2() const;
  inline void set_photoindex2(::google::protobuf::uint32 value);

  // optional uint32 phototime1 = 5 [default = 0];
  inline bool has_phototime1() const;
  inline void clear_phototime1();
  static const int kPhototime1FieldNumber = 5;
  inline ::google::protobuf::uint32 phototime1() const;
  inline void set_phototime1(::google::protobuf::uint32 value);

  // optional uint32 phototime2 = 6 [default = 0];
  inline bool has_phototime2() const;
  inline void clear_phototime2();
  static const int kPhototime2FieldNumber = 6;
  inline ::google::protobuf::uint32 phototime2() const;
  inline void set_phototime2(::google::protobuf::uint32 value);

  // repeated .Cmd.WeddingInvitee invitees = 7;
  inline int invitees_size() const;
  inline void clear_invitees();
  static const int kInviteesFieldNumber = 7;
  inline const ::Cmd::WeddingInvitee& invitees(int index) const;
  inline ::Cmd::WeddingInvitee* mutable_invitees(int index);
  inline ::Cmd::WeddingInvitee* add_invitees();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingInvitee >&
      invitees() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingInvitee >*
      mutable_invitees();

  // optional string name1 = 8;
  inline bool has_name1() const;
  inline void clear_name1();
  static const int kName1FieldNumber = 8;
  inline const ::std::string& name1() const;
  inline void set_name1(const ::std::string& value);
  inline void set_name1(const char* value);
  inline void set_name1(const char* value, size_t size);
  inline ::std::string* mutable_name1();
  inline ::std::string* release_name1();
  inline void set_allocated_name1(::std::string* name1);

  // optional string name2 = 9;
  inline bool has_name2() const;
  inline void clear_name2();
  static const int kName2FieldNumber = 9;
  inline const ::std::string& name2() const;
  inline void set_name2(const ::std::string& value);
  inline void set_name2(const char* value);
  inline void set_name2(const char* value, size_t size);
  inline ::std::string* mutable_name2();
  inline ::std::string* release_name2();
  inline void set_allocated_name2(::std::string* name2);

  // repeated .Cmd.ItemData itemrecords = 10;
  inline int itemrecords_size() const;
  inline void clear_itemrecords();
  static const int kItemrecordsFieldNumber = 10;
  inline const ::Cmd::ItemData& itemrecords(int index) const;
  inline ::Cmd::ItemData* mutable_itemrecords(int index);
  inline ::Cmd::ItemData* add_itemrecords();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
      itemrecords() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
      mutable_itemrecords();

  // @@protoc_insertion_point(class_scope:Cmd.WeddingManualInfo)
 private:
  inline void set_has_ringid();
  inline void clear_has_ringid();
  inline void set_has_photoindex1();
  inline void clear_has_photoindex1();
  inline void set_has_photoindex2();
  inline void clear_has_photoindex2();
  inline void set_has_phototime1();
  inline void clear_has_phototime1();
  inline void set_has_phototime2();
  inline void clear_has_phototime2();
  inline void set_has_name1();
  inline void clear_has_name1();
  inline void set_has_name2();
  inline void clear_has_name2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > serviceids_;
  ::google::protobuf::uint32 ringid_;
  ::google::protobuf::uint32 photoindex1_;
  ::google::protobuf::uint32 photoindex2_;
  ::google::protobuf::uint32 phototime1_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingInvitee > invitees_;
  ::std::string* name1_;
  ::std::string* name2_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData > itemrecords_;
  ::google::protobuf::uint32 phototime2_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static WeddingManualInfo* default_instance_;
};
// -------------------------------------------------------------------

class WeddingInfo : public ::google::protobuf::Message {
 public:
  WeddingInfo();
  virtual ~WeddingInfo();

  WeddingInfo(const WeddingInfo& from);

  inline WeddingInfo& operator=(const WeddingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeddingInfo& default_instance();

  void Swap(WeddingInfo* other);

  // implements Message ----------------------------------------------

  WeddingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeddingInfo& from);
  void MergeFrom(const WeddingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .Cmd.EWeddingStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::Cmd::EWeddingStatus status() const;
  inline void set_status(::Cmd::EWeddingStatus value);

  // optional uint64 charid1 = 3;
  inline bool has_charid1() const;
  inline void clear_charid1();
  static const int kCharid1FieldNumber = 3;
  inline ::google::protobuf::uint64 charid1() const;
  inline void set_charid1(::google::protobuf::uint64 value);

  // optional uint64 charid2 = 4;
  inline bool has_charid2() const;
  inline void clear_charid2();
  static const int kCharid2FieldNumber = 4;
  inline ::google::protobuf::uint64 charid2() const;
  inline void set_charid2(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 5;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 5;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 date = 6;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 6;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);

  // optional uint32 configid = 7;
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigidFieldNumber = 7;
  inline ::google::protobuf::uint32 configid() const;
  inline void set_configid(::google::protobuf::uint32 value);

  // optional uint32 starttime = 8;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 8;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // optional uint32 endtime = 9;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 9;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // optional .Cmd.WeddingManualInfo manual = 10;
  inline bool has_manual() const;
  inline void clear_manual();
  static const int kManualFieldNumber = 10;
  inline const ::Cmd::WeddingManualInfo& manual() const;
  inline ::Cmd::WeddingManualInfo* mutable_manual();
  inline ::Cmd::WeddingManualInfo* release_manual();
  inline void set_allocated_manual(::Cmd::WeddingManualInfo* manual);

  // @@protoc_insertion_point(class_scope:Cmd.WeddingInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_charid1();
  inline void clear_has_charid1();
  inline void set_has_charid2();
  inline void clear_has_charid2();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_manual();
  inline void clear_has_manual();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 charid1_;
  int status_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint64 charid2_;
  ::google::protobuf::uint32 date_;
  ::google::protobuf::uint32 configid_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint32 endtime_;
  ::Cmd::WeddingManualInfo* manual_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static WeddingInfo* default_instance_;
};
// -------------------------------------------------------------------

class SyncWeddingInfoSCmd : public ::google::protobuf::Message {
 public:
  SyncWeddingInfoSCmd();
  virtual ~SyncWeddingInfoSCmd();

  SyncWeddingInfoSCmd(const SyncWeddingInfoSCmd& from);

  inline SyncWeddingInfoSCmd& operator=(const SyncWeddingInfoSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncWeddingInfoSCmd& default_instance();

  void Swap(SyncWeddingInfoSCmd* other);

  // implements Message ----------------------------------------------

  SyncWeddingInfoSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncWeddingInfoSCmd& from);
  void MergeFrom(const SyncWeddingInfoSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_SYNC_WEDDINGINFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingSParam param() const;
  inline void set_param(::Cmd::WeddingSParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.WeddingInfo weddinginfo = 4;
  inline bool has_weddinginfo() const;
  inline void clear_weddinginfo();
  static const int kWeddinginfoFieldNumber = 4;
  inline const ::Cmd::WeddingInfo& weddinginfo() const;
  inline ::Cmd::WeddingInfo* mutable_weddinginfo();
  inline ::Cmd::WeddingInfo* release_weddinginfo();
  inline void set_allocated_weddinginfo(::Cmd::WeddingInfo* weddinginfo);

  // @@protoc_insertion_point(class_scope:Cmd.SyncWeddingInfoSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_weddinginfo();
  inline void clear_has_weddinginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::Cmd::WeddingInfo* weddinginfo_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static SyncWeddingInfoSCmd* default_instance_;
};
// -------------------------------------------------------------------

class UpdateWeddingManualSCmd : public ::google::protobuf::Message {
 public:
  UpdateWeddingManualSCmd();
  virtual ~UpdateWeddingManualSCmd();

  UpdateWeddingManualSCmd(const UpdateWeddingManualSCmd& from);

  inline UpdateWeddingManualSCmd& operator=(const UpdateWeddingManualSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateWeddingManualSCmd& default_instance();

  void Swap(UpdateWeddingManualSCmd* other);

  // implements Message ----------------------------------------------

  UpdateWeddingManualSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateWeddingManualSCmd& from);
  void MergeFrom(const UpdateWeddingManualSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_UPDATE_MANUAL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingSParam param() const;
  inline void set_param(::Cmd::WeddingSParam value);

  // required uint64 weddingid = 3;
  inline bool has_weddingid() const;
  inline void clear_weddingid();
  static const int kWeddingidFieldNumber = 3;
  inline ::google::protobuf::uint64 weddingid() const;
  inline void set_weddingid(::google::protobuf::uint64 value);

  // optional .Cmd.WeddingManualInfo manual = 4;
  inline bool has_manual() const;
  inline void clear_manual();
  static const int kManualFieldNumber = 4;
  inline const ::Cmd::WeddingManualInfo& manual() const;
  inline ::Cmd::WeddingManualInfo* mutable_manual();
  inline ::Cmd::WeddingManualInfo* release_manual();
  inline void set_allocated_manual(::Cmd::WeddingManualInfo* manual);

  // @@protoc_insertion_point(class_scope:Cmd.UpdateWeddingManualSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_weddingid();
  inline void clear_has_weddingid();
  inline void set_has_manual();
  inline void clear_has_manual();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 weddingid_;
  ::Cmd::WeddingManualInfo* manual_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static UpdateWeddingManualSCmd* default_instance_;
};
// -------------------------------------------------------------------

class StartWeddingSCmd : public ::google::protobuf::Message {
 public:
  StartWeddingSCmd();
  virtual ~StartWeddingSCmd();

  StartWeddingSCmd(const StartWeddingSCmd& from);

  inline StartWeddingSCmd& operator=(const StartWeddingSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartWeddingSCmd& default_instance();

  void Swap(StartWeddingSCmd* other);

  // implements Message ----------------------------------------------

  StartWeddingSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartWeddingSCmd& from);
  void MergeFrom(const StartWeddingSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_START_WEDDING];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingSParam param() const;
  inline void set_param(::Cmd::WeddingSParam value);

  // optional .Cmd.WeddingInfo weddinginfo = 3;
  inline bool has_weddinginfo() const;
  inline void clear_weddinginfo();
  static const int kWeddinginfoFieldNumber = 3;
  inline const ::Cmd::WeddingInfo& weddinginfo() const;
  inline ::Cmd::WeddingInfo* mutable_weddinginfo();
  inline ::Cmd::WeddingInfo* release_weddinginfo();
  inline void set_allocated_weddinginfo(::Cmd::WeddingInfo* weddinginfo);

  // @@protoc_insertion_point(class_scope:Cmd.StartWeddingSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_weddinginfo();
  inline void clear_has_weddinginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::WeddingInfo* weddinginfo_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static StartWeddingSCmd* default_instance_;
};
// -------------------------------------------------------------------

class StopWeddingSCmd : public ::google::protobuf::Message {
 public:
  StopWeddingSCmd();
  virtual ~StopWeddingSCmd();

  StopWeddingSCmd(const StopWeddingSCmd& from);

  inline StopWeddingSCmd& operator=(const StopWeddingSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopWeddingSCmd& default_instance();

  void Swap(StopWeddingSCmd* other);

  // implements Message ----------------------------------------------

  StopWeddingSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopWeddingSCmd& from);
  void MergeFrom(const StopWeddingSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_STOP_WEDDING];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingSParam param() const;
  inline void set_param(::Cmd::WeddingSParam value);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.StopWeddingSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static StopWeddingSCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReserveWeddingResultSCmd : public ::google::protobuf::Message {
 public:
  ReserveWeddingResultSCmd();
  virtual ~ReserveWeddingResultSCmd();

  ReserveWeddingResultSCmd(const ReserveWeddingResultSCmd& from);

  inline ReserveWeddingResultSCmd& operator=(const ReserveWeddingResultSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReserveWeddingResultSCmd& default_instance();

  void Swap(ReserveWeddingResultSCmd* other);

  // implements Message ----------------------------------------------

  ReserveWeddingResultSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReserveWeddingResultSCmd& from);
  void MergeFrom(const ReserveWeddingResultSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_RESERVE_WEDDING_RESULT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingSParam param() const;
  inline void set_param(::Cmd::WeddingSParam value);

  // optional uint32 date = 3;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 3;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);

  // optional uint32 configid = 4;
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigidFieldNumber = 4;
  inline ::google::protobuf::uint32 configid() const;
  inline void set_configid(::google::protobuf::uint32 value);

  // optional uint64 charid1 = 5;
  inline bool has_charid1() const;
  inline void clear_charid1();
  static const int kCharid1FieldNumber = 5;
  inline ::google::protobuf::uint64 charid1() const;
  inline void set_charid1(::google::protobuf::uint64 value);

  // optional uint64 charid2 = 6;
  inline bool has_charid2() const;
  inline void clear_charid2();
  static const int kCharid2FieldNumber = 6;
  inline ::google::protobuf::uint64 charid2() const;
  inline void set_charid2(::google::protobuf::uint64 value);

  // optional bool success = 7;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 7;
  inline bool success() const;
  inline void set_success(bool value);

  // optional uint32 ticket = 8;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 8;
  inline ::google::protobuf::uint32 ticket() const;
  inline void set_ticket(::google::protobuf::uint32 value);

  // optional uint32 money = 9;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 9;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 10;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 10;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ReserveWeddingResultSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_charid1();
  inline void clear_has_charid1();
  inline void set_has_charid2();
  inline void clear_has_charid2();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 date_;
  ::google::protobuf::uint32 configid_;
  ::google::protobuf::uint64 charid1_;
  ::google::protobuf::uint64 charid2_;
  bool success_;
  ::google::protobuf::uint32 ticket_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static ReserveWeddingResultSCmd* default_instance_;
};
// -------------------------------------------------------------------

class BuyServiceWeddingSCmd : public ::google::protobuf::Message {
 public:
  BuyServiceWeddingSCmd();
  virtual ~BuyServiceWeddingSCmd();

  BuyServiceWeddingSCmd(const BuyServiceWeddingSCmd& from);

  inline BuyServiceWeddingSCmd& operator=(const BuyServiceWeddingSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyServiceWeddingSCmd& default_instance();

  void Swap(BuyServiceWeddingSCmd* other);

  // implements Message ----------------------------------------------

  BuyServiceWeddingSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyServiceWeddingSCmd& from);
  void MergeFrom(const BuyServiceWeddingSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_BUY_SERVICE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingSParam param() const;
  inline void set_param(::Cmd::WeddingSParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.ESource source = 4 [default = ESOURCE_MIN];
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 4;
  inline ::Cmd::ESource source() const;
  inline void set_source(::Cmd::ESource value);

  // repeated .Cmd.ItemInfo items = 5;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 5;
  inline const ::Cmd::ItemInfo& items(int index) const;
  inline ::Cmd::ItemInfo* mutable_items(int index);
  inline ::Cmd::ItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
      mutable_items();

  // optional uint32 serviceid = 6 [default = 0];
  inline bool has_serviceid() const;
  inline void clear_serviceid();
  static const int kServiceidFieldNumber = 6;
  inline ::google::protobuf::uint32 serviceid() const;
  inline void set_serviceid(::google::protobuf::uint32 value);

  // optional uint64 weddingid = 7 [default = 0];
  inline bool has_weddingid() const;
  inline void clear_weddingid();
  static const int kWeddingidFieldNumber = 7;
  inline ::google::protobuf::uint64 weddingid() const;
  inline void set_weddingid(::google::protobuf::uint64 value);

  // optional bool success = 8 [default = false];
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 8;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.BuyServiceWeddingSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_serviceid();
  inline void clear_has_serviceid();
  inline void set_has_weddingid();
  inline void clear_has_weddingid();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo > items_;
  int source_;
  ::google::protobuf::uint32 serviceid_;
  ::google::protobuf::uint64 weddingid_;
  bool success_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static BuyServiceWeddingSCmd* default_instance_;
};
// -------------------------------------------------------------------

class MarrySCmd : public ::google::protobuf::Message {
 public:
  MarrySCmd();
  virtual ~MarrySCmd();

  MarrySCmd(const MarrySCmd& from);

  inline MarrySCmd& operator=(const MarrySCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarrySCmd& default_instance();

  void Swap(MarrySCmd* other);

  // implements Message ----------------------------------------------

  MarrySCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarrySCmd& from);
  void MergeFrom(const MarrySCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MARRY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingSParam param() const;
  inline void set_param(::Cmd::WeddingSParam value);

  // optional uint64 charid1 = 3;
  inline bool has_charid1() const;
  inline void clear_charid1();
  static const int kCharid1FieldNumber = 3;
  inline ::google::protobuf::uint64 charid1() const;
  inline void set_charid1(::google::protobuf::uint64 value);

  // optional uint64 charid2 = 4;
  inline bool has_charid2() const;
  inline void clear_charid2();
  static const int kCharid2FieldNumber = 4;
  inline ::google::protobuf::uint64 charid2() const;
  inline void set_charid2(::google::protobuf::uint64 value);

  // optional uint64 weddingid = 5;
  inline bool has_weddingid() const;
  inline void clear_weddingid();
  static const int kWeddingidFieldNumber = 5;
  inline ::google::protobuf::uint64 weddingid() const;
  inline void set_weddingid(::google::protobuf::uint64 value);

  // repeated .Cmd.ItemData items = 6;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 6;
  inline const ::Cmd::ItemData& items(int index) const;
  inline ::Cmd::ItemData* mutable_items(int index);
  inline ::Cmd::ItemData* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.MarrySCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid1();
  inline void clear_has_charid1();
  inline void set_has_charid2();
  inline void clear_has_charid2();
  inline void set_has_weddingid();
  inline void clear_has_weddingid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid1_;
  ::google::protobuf::uint64 charid2_;
  ::google::protobuf::uint64 weddingid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData > items_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static MarrySCmd* default_instance_;
};
// -------------------------------------------------------------------

class CheckWeddingReserverSCmd : public ::google::protobuf::Message {
 public:
  CheckWeddingReserverSCmd();
  virtual ~CheckWeddingReserverSCmd();

  CheckWeddingReserverSCmd(const CheckWeddingReserverSCmd& from);

  inline CheckWeddingReserverSCmd& operator=(const CheckWeddingReserverSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckWeddingReserverSCmd& default_instance();

  void Swap(CheckWeddingReserverSCmd* other);

  // implements Message ----------------------------------------------

  CheckWeddingReserverSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckWeddingReserverSCmd& from);
  void MergeFrom(const CheckWeddingReserverSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_CHECK_WEDDING_RESERVE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingSParam param() const;
  inline void set_param(::Cmd::WeddingSParam value);

  // optional uint64 weddingid = 3 [default = 0];
  inline bool has_weddingid() const;
  inline void clear_weddingid();
  static const int kWeddingidFieldNumber = 3;
  inline ::google::protobuf::uint64 weddingid() const;
  inline void set_weddingid(::google::protobuf::uint64 value);

  // optional uint64 mailid = 4 [default = 0];
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 4;
  inline ::google::protobuf::uint64 mailid() const;
  inline void set_mailid(::google::protobuf::uint64 value);

  // optional uint64 charid = 5 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 5;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional bool result = 6 [default = false];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.CheckWeddingReserverSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_weddingid();
  inline void clear_has_weddingid();
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 weddingid_;
  ::google::protobuf::uint64 mailid_;
  ::google::protobuf::uint64 charid_;
  bool result_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static CheckWeddingReserverSCmd* default_instance_;
};
// -------------------------------------------------------------------

class ParnterInfo : public ::google::protobuf::Message {
 public:
  ParnterInfo();
  virtual ~ParnterInfo();

  ParnterInfo(const ParnterInfo& from);

  inline ParnterInfo& operator=(const ParnterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParnterInfo& default_instance();

  void Swap(ParnterInfo* other);

  // implements Message ----------------------------------------------

  ParnterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParnterInfo& from);
  void MergeFrom(const ParnterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mapid = 1 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 2 [default = 0];
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 2;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional float x = 3 [default = 0];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 4 [default = 0];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 5 [default = 0];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 5;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:Cmd.ParnterInfo)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 zoneid_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static ParnterInfo* default_instance_;
};
// -------------------------------------------------------------------

class MissyouInviteWedSCmd : public ::google::protobuf::Message {
 public:
  MissyouInviteWedSCmd();
  virtual ~MissyouInviteWedSCmd();

  MissyouInviteWedSCmd(const MissyouInviteWedSCmd& from);

  inline MissyouInviteWedSCmd& operator=(const MissyouInviteWedSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MissyouInviteWedSCmd& default_instance();

  void Swap(MissyouInviteWedSCmd* other);

  // implements Message ----------------------------------------------

  MissyouInviteWedSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MissyouInviteWedSCmd& from);
  void MergeFrom(const MissyouInviteWedSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MISSYOU_INVITE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingSParam param() const;
  inline void set_param(::Cmd::WeddingSParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional bool trans = 8 [default = false];
  inline bool has_trans() const;
  inline void clear_trans();
  static const int kTransFieldNumber = 8;
  inline bool trans() const;
  inline void set_trans(bool value);

  // optional .Cmd.ParnterInfo info = 9;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 9;
  inline const ::Cmd::ParnterInfo& info() const;
  inline ::Cmd::ParnterInfo* mutable_info();
  inline ::Cmd::ParnterInfo* release_info();
  inline void set_allocated_info(::Cmd::ParnterInfo* info);

  // @@protoc_insertion_point(class_scope:Cmd.MissyouInviteWedSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_trans();
  inline void clear_has_trans();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::Cmd::ParnterInfo* info_;
  bool trans_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static MissyouInviteWedSCmd* default_instance_;
};
// -------------------------------------------------------------------

class MarrySuccessSCmd : public ::google::protobuf::Message {
 public:
  MarrySuccessSCmd();
  virtual ~MarrySuccessSCmd();

  MarrySuccessSCmd(const MarrySuccessSCmd& from);

  inline MarrySuccessSCmd& operator=(const MarrySuccessSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarrySuccessSCmd& default_instance();

  void Swap(MarrySuccessSCmd* other);

  // implements Message ----------------------------------------------

  MarrySuccessSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarrySuccessSCmd& from);
  void MergeFrom(const MarrySuccessSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MARRY_SUCCESS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingSParam param() const;
  inline void set_param(::Cmd::WeddingSParam value);

  // optional uint64 weddingid = 3;
  inline bool has_weddingid() const;
  inline void clear_weddingid();
  static const int kWeddingidFieldNumber = 3;
  inline ::google::protobuf::uint64 weddingid() const;
  inline void set_weddingid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.MarrySuccessSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_weddingid();
  inline void clear_has_weddingid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 weddingid_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static MarrySuccessSCmd* default_instance_;
};
// -------------------------------------------------------------------

class UserRenameWedSCmd : public ::google::protobuf::Message {
 public:
  UserRenameWedSCmd();
  virtual ~UserRenameWedSCmd();

  UserRenameWedSCmd(const UserRenameWedSCmd& from);

  inline UserRenameWedSCmd& operator=(const UserRenameWedSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRenameWedSCmd& default_instance();

  void Swap(UserRenameWedSCmd* other);

  // implements Message ----------------------------------------------

  UserRenameWedSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRenameWedSCmd& from);
  void MergeFrom(const UserRenameWedSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_USER_RENAME];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingSParam param() const;
  inline void set_param(::Cmd::WeddingSParam value);

  // optional uint64 weddingid = 3 [default = 0];
  inline bool has_weddingid() const;
  inline void clear_weddingid();
  static const int kWeddingidFieldNumber = 3;
  inline ::google::protobuf::uint64 weddingid() const;
  inline void set_weddingid(::google::protobuf::uint64 value);

  // optional uint64 charid = 4 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.UserRenameWedSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_weddingid();
  inline void clear_has_weddingid();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 weddingid_;
  ::google::protobuf::uint64 charid_;
  friend void  protobuf_AddDesc_WeddingSCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingSCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingSCmd_2eproto();

  void InitAsDefaultInstance();
  static UserRenameWedSCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// ForwardC2WeddingSCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
inline bool ForwardC2WeddingSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardC2WeddingSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardC2WeddingSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardC2WeddingSCmd::clear_cmd() {
  cmd_ = 214;
  clear_has_cmd();
}
inline ::Cmd::Command ForwardC2WeddingSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardC2WeddingSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ForwardC2WeddingSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardC2WeddingSCmd.cmd)
}

// optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_C2WEDDING];
inline bool ForwardC2WeddingSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForwardC2WeddingSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForwardC2WeddingSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForwardC2WeddingSCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::WeddingSParam ForwardC2WeddingSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardC2WeddingSCmd.param)
  return static_cast< ::Cmd::WeddingSParam >(param_);
}
inline void ForwardC2WeddingSCmd::set_param(::Cmd::WeddingSParam value) {
  assert(::Cmd::WeddingSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardC2WeddingSCmd.param)
}

// optional uint64 charid = 3;
inline bool ForwardC2WeddingSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ForwardC2WeddingSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ForwardC2WeddingSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ForwardC2WeddingSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ForwardC2WeddingSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardC2WeddingSCmd.charid)
  return charid_;
}
inline void ForwardC2WeddingSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardC2WeddingSCmd.charid)
}

// optional uint32 zoneid = 4;
inline bool ForwardC2WeddingSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ForwardC2WeddingSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ForwardC2WeddingSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ForwardC2WeddingSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 ForwardC2WeddingSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardC2WeddingSCmd.zoneid)
  return zoneid_;
}
inline void ForwardC2WeddingSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardC2WeddingSCmd.zoneid)
}

// optional string name = 5;
inline bool ForwardC2WeddingSCmd::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ForwardC2WeddingSCmd::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ForwardC2WeddingSCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ForwardC2WeddingSCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ForwardC2WeddingSCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardC2WeddingSCmd.name)
  return *name_;
}
inline void ForwardC2WeddingSCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ForwardC2WeddingSCmd.name)
}
inline void ForwardC2WeddingSCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ForwardC2WeddingSCmd.name)
}
inline void ForwardC2WeddingSCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ForwardC2WeddingSCmd.name)
}
inline ::std::string* ForwardC2WeddingSCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ForwardC2WeddingSCmd.name)
  return name_;
}
inline ::std::string* ForwardC2WeddingSCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardC2WeddingSCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ForwardC2WeddingSCmd.name)
}

// optional bytes data = 6;
inline bool ForwardC2WeddingSCmd::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ForwardC2WeddingSCmd::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ForwardC2WeddingSCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ForwardC2WeddingSCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ForwardC2WeddingSCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardC2WeddingSCmd.data)
  return *data_;
}
inline void ForwardC2WeddingSCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ForwardC2WeddingSCmd.data)
}
inline void ForwardC2WeddingSCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ForwardC2WeddingSCmd.data)
}
inline void ForwardC2WeddingSCmd::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ForwardC2WeddingSCmd.data)
}
inline ::std::string* ForwardC2WeddingSCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ForwardC2WeddingSCmd.data)
  return data_;
}
inline ::std::string* ForwardC2WeddingSCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardC2WeddingSCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ForwardC2WeddingSCmd.data)
}

// optional uint32 len = 7;
inline bool ForwardC2WeddingSCmd::has_len() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ForwardC2WeddingSCmd::set_has_len() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ForwardC2WeddingSCmd::clear_has_len() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ForwardC2WeddingSCmd::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 ForwardC2WeddingSCmd::len() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardC2WeddingSCmd.len)
  return len_;
}
inline void ForwardC2WeddingSCmd::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardC2WeddingSCmd.len)
}

// -------------------------------------------------------------------

// ForwardS2WeddingSCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
inline bool ForwardS2WeddingSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardS2WeddingSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardS2WeddingSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardS2WeddingSCmd::clear_cmd() {
  cmd_ = 214;
  clear_has_cmd();
}
inline ::Cmd::Command ForwardS2WeddingSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardS2WeddingSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ForwardS2WeddingSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardS2WeddingSCmd.cmd)
}

// optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_S2WEDDING];
inline bool ForwardS2WeddingSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForwardS2WeddingSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForwardS2WeddingSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForwardS2WeddingSCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::WeddingSParam ForwardS2WeddingSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardS2WeddingSCmd.param)
  return static_cast< ::Cmd::WeddingSParam >(param_);
}
inline void ForwardS2WeddingSCmd::set_param(::Cmd::WeddingSParam value) {
  assert(::Cmd::WeddingSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardS2WeddingSCmd.param)
}

// optional uint64 charid = 3;
inline bool ForwardS2WeddingSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ForwardS2WeddingSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ForwardS2WeddingSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ForwardS2WeddingSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ForwardS2WeddingSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardS2WeddingSCmd.charid)
  return charid_;
}
inline void ForwardS2WeddingSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardS2WeddingSCmd.charid)
}

// optional uint32 zoneid = 4;
inline bool ForwardS2WeddingSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ForwardS2WeddingSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ForwardS2WeddingSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ForwardS2WeddingSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 ForwardS2WeddingSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardS2WeddingSCmd.zoneid)
  return zoneid_;
}
inline void ForwardS2WeddingSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardS2WeddingSCmd.zoneid)
}

// optional string name = 5;
inline bool ForwardS2WeddingSCmd::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ForwardS2WeddingSCmd::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ForwardS2WeddingSCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ForwardS2WeddingSCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ForwardS2WeddingSCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardS2WeddingSCmd.name)
  return *name_;
}
inline void ForwardS2WeddingSCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ForwardS2WeddingSCmd.name)
}
inline void ForwardS2WeddingSCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ForwardS2WeddingSCmd.name)
}
inline void ForwardS2WeddingSCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ForwardS2WeddingSCmd.name)
}
inline ::std::string* ForwardS2WeddingSCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ForwardS2WeddingSCmd.name)
  return name_;
}
inline ::std::string* ForwardS2WeddingSCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardS2WeddingSCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ForwardS2WeddingSCmd.name)
}

// optional bytes data = 6;
inline bool ForwardS2WeddingSCmd::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ForwardS2WeddingSCmd::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ForwardS2WeddingSCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ForwardS2WeddingSCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ForwardS2WeddingSCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardS2WeddingSCmd.data)
  return *data_;
}
inline void ForwardS2WeddingSCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ForwardS2WeddingSCmd.data)
}
inline void ForwardS2WeddingSCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ForwardS2WeddingSCmd.data)
}
inline void ForwardS2WeddingSCmd::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ForwardS2WeddingSCmd.data)
}
inline ::std::string* ForwardS2WeddingSCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ForwardS2WeddingSCmd.data)
  return data_;
}
inline ::std::string* ForwardS2WeddingSCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardS2WeddingSCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ForwardS2WeddingSCmd.data)
}

// optional uint32 len = 7;
inline bool ForwardS2WeddingSCmd::has_len() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ForwardS2WeddingSCmd::set_has_len() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ForwardS2WeddingSCmd::clear_has_len() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ForwardS2WeddingSCmd::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 ForwardS2WeddingSCmd::len() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardS2WeddingSCmd.len)
  return len_;
}
inline void ForwardS2WeddingSCmd::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardS2WeddingSCmd.len)
}

// -------------------------------------------------------------------

// ForwardWedding2SSCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
inline bool ForwardWedding2SSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardWedding2SSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardWedding2SSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardWedding2SSCmd::clear_cmd() {
  cmd_ = 214;
  clear_has_cmd();
}
inline ::Cmd::Command ForwardWedding2SSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardWedding2SSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ForwardWedding2SSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardWedding2SSCmd.cmd)
}

// optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_WEDDING2S];
inline bool ForwardWedding2SSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForwardWedding2SSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForwardWedding2SSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForwardWedding2SSCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::WeddingSParam ForwardWedding2SSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardWedding2SSCmd.param)
  return static_cast< ::Cmd::WeddingSParam >(param_);
}
inline void ForwardWedding2SSCmd::set_param(::Cmd::WeddingSParam value) {
  assert(::Cmd::WeddingSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardWedding2SSCmd.param)
}

// optional uint64 charid = 3;
inline bool ForwardWedding2SSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ForwardWedding2SSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ForwardWedding2SSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ForwardWedding2SSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ForwardWedding2SSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardWedding2SSCmd.charid)
  return charid_;
}
inline void ForwardWedding2SSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardWedding2SSCmd.charid)
}

// optional bytes data = 4;
inline bool ForwardWedding2SSCmd::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ForwardWedding2SSCmd::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ForwardWedding2SSCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ForwardWedding2SSCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ForwardWedding2SSCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardWedding2SSCmd.data)
  return *data_;
}
inline void ForwardWedding2SSCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ForwardWedding2SSCmd.data)
}
inline void ForwardWedding2SSCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ForwardWedding2SSCmd.data)
}
inline void ForwardWedding2SSCmd::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ForwardWedding2SSCmd.data)
}
inline ::std::string* ForwardWedding2SSCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ForwardWedding2SSCmd.data)
  return data_;
}
inline ::std::string* ForwardWedding2SSCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardWedding2SSCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ForwardWedding2SSCmd.data)
}

// optional uint32 len = 5;
inline bool ForwardWedding2SSCmd::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ForwardWedding2SSCmd::set_has_len() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ForwardWedding2SSCmd::clear_has_len() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ForwardWedding2SSCmd::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 ForwardWedding2SSCmd::len() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardWedding2SSCmd.len)
  return len_;
}
inline void ForwardWedding2SSCmd::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardWedding2SSCmd.len)
}

// -------------------------------------------------------------------

// ForwardWedding2CSCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
inline bool ForwardWedding2CSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardWedding2CSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardWedding2CSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardWedding2CSCmd::clear_cmd() {
  cmd_ = 214;
  clear_has_cmd();
}
inline ::Cmd::Command ForwardWedding2CSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardWedding2CSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ForwardWedding2CSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardWedding2CSCmd.cmd)
}

// optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_WEDDING2C];
inline bool ForwardWedding2CSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForwardWedding2CSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForwardWedding2CSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForwardWedding2CSCmd::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::WeddingSParam ForwardWedding2CSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardWedding2CSCmd.param)
  return static_cast< ::Cmd::WeddingSParam >(param_);
}
inline void ForwardWedding2CSCmd::set_param(::Cmd::WeddingSParam value) {
  assert(::Cmd::WeddingSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardWedding2CSCmd.param)
}

// optional uint64 charid = 3;
inline bool ForwardWedding2CSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ForwardWedding2CSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ForwardWedding2CSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ForwardWedding2CSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ForwardWedding2CSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardWedding2CSCmd.charid)
  return charid_;
}
inline void ForwardWedding2CSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardWedding2CSCmd.charid)
}

// optional bytes data = 4;
inline bool ForwardWedding2CSCmd::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ForwardWedding2CSCmd::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ForwardWedding2CSCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ForwardWedding2CSCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ForwardWedding2CSCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardWedding2CSCmd.data)
  return *data_;
}
inline void ForwardWedding2CSCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ForwardWedding2CSCmd.data)
}
inline void ForwardWedding2CSCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ForwardWedding2CSCmd.data)
}
inline void ForwardWedding2CSCmd::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ForwardWedding2CSCmd.data)
}
inline ::std::string* ForwardWedding2CSCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ForwardWedding2CSCmd.data)
  return data_;
}
inline ::std::string* ForwardWedding2CSCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardWedding2CSCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ForwardWedding2CSCmd.data)
}

// optional uint32 len = 5;
inline bool ForwardWedding2CSCmd::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ForwardWedding2CSCmd::set_has_len() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ForwardWedding2CSCmd::clear_has_len() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ForwardWedding2CSCmd::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 ForwardWedding2CSCmd::len() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardWedding2CSCmd.len)
  return len_;
}
inline void ForwardWedding2CSCmd::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardWedding2CSCmd.len)
}

// -------------------------------------------------------------------

// WeddingManualInfo

// repeated uint32 serviceids = 1;
inline int WeddingManualInfo::serviceids_size() const {
  return serviceids_.size();
}
inline void WeddingManualInfo::clear_serviceids() {
  serviceids_.Clear();
}
inline ::google::protobuf::uint32 WeddingManualInfo::serviceids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingManualInfo.serviceids)
  return serviceids_.Get(index);
}
inline void WeddingManualInfo::set_serviceids(int index, ::google::protobuf::uint32 value) {
  serviceids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.WeddingManualInfo.serviceids)
}
inline void WeddingManualInfo::add_serviceids(::google::protobuf::uint32 value) {
  serviceids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.WeddingManualInfo.serviceids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
WeddingManualInfo::serviceids() const {
  // @@protoc_insertion_point(field_list:Cmd.WeddingManualInfo.serviceids)
  return serviceids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
WeddingManualInfo::mutable_serviceids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.WeddingManualInfo.serviceids)
  return &serviceids_;
}

// optional uint32 ringid = 2 [default = 0];
inline bool WeddingManualInfo::has_ringid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeddingManualInfo::set_has_ringid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeddingManualInfo::clear_has_ringid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeddingManualInfo::clear_ringid() {
  ringid_ = 0u;
  clear_has_ringid();
}
inline ::google::protobuf::uint32 WeddingManualInfo::ringid() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingManualInfo.ringid)
  return ringid_;
}
inline void WeddingManualInfo::set_ringid(::google::protobuf::uint32 value) {
  set_has_ringid();
  ringid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingManualInfo.ringid)
}

// optional uint32 photoindex1 = 3 [default = 0];
inline bool WeddingManualInfo::has_photoindex1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeddingManualInfo::set_has_photoindex1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeddingManualInfo::clear_has_photoindex1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeddingManualInfo::clear_photoindex1() {
  photoindex1_ = 0u;
  clear_has_photoindex1();
}
inline ::google::protobuf::uint32 WeddingManualInfo::photoindex1() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingManualInfo.photoindex1)
  return photoindex1_;
}
inline void WeddingManualInfo::set_photoindex1(::google::protobuf::uint32 value) {
  set_has_photoindex1();
  photoindex1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingManualInfo.photoindex1)
}

// optional uint32 photoindex2 = 4 [default = 0];
inline bool WeddingManualInfo::has_photoindex2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeddingManualInfo::set_has_photoindex2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeddingManualInfo::clear_has_photoindex2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeddingManualInfo::clear_photoindex2() {
  photoindex2_ = 0u;
  clear_has_photoindex2();
}
inline ::google::protobuf::uint32 WeddingManualInfo::photoindex2() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingManualInfo.photoindex2)
  return photoindex2_;
}
inline void WeddingManualInfo::set_photoindex2(::google::protobuf::uint32 value) {
  set_has_photoindex2();
  photoindex2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingManualInfo.photoindex2)
}

// optional uint32 phototime1 = 5 [default = 0];
inline bool WeddingManualInfo::has_phototime1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeddingManualInfo::set_has_phototime1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeddingManualInfo::clear_has_phototime1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeddingManualInfo::clear_phototime1() {
  phototime1_ = 0u;
  clear_has_phototime1();
}
inline ::google::protobuf::uint32 WeddingManualInfo::phototime1() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingManualInfo.phototime1)
  return phototime1_;
}
inline void WeddingManualInfo::set_phototime1(::google::protobuf::uint32 value) {
  set_has_phototime1();
  phototime1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingManualInfo.phototime1)
}

// optional uint32 phototime2 = 6 [default = 0];
inline bool WeddingManualInfo::has_phototime2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WeddingManualInfo::set_has_phototime2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WeddingManualInfo::clear_has_phototime2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WeddingManualInfo::clear_phototime2() {
  phototime2_ = 0u;
  clear_has_phototime2();
}
inline ::google::protobuf::uint32 WeddingManualInfo::phototime2() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingManualInfo.phototime2)
  return phototime2_;
}
inline void WeddingManualInfo::set_phototime2(::google::protobuf::uint32 value) {
  set_has_phototime2();
  phototime2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingManualInfo.phototime2)
}

// repeated .Cmd.WeddingInvitee invitees = 7;
inline int WeddingManualInfo::invitees_size() const {
  return invitees_.size();
}
inline void WeddingManualInfo::clear_invitees() {
  invitees_.Clear();
}
inline const ::Cmd::WeddingInvitee& WeddingManualInfo::invitees(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingManualInfo.invitees)
  return invitees_.Get(index);
}
inline ::Cmd::WeddingInvitee* WeddingManualInfo::mutable_invitees(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.WeddingManualInfo.invitees)
  return invitees_.Mutable(index);
}
inline ::Cmd::WeddingInvitee* WeddingManualInfo::add_invitees() {
  // @@protoc_insertion_point(field_add:Cmd.WeddingManualInfo.invitees)
  return invitees_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingInvitee >&
WeddingManualInfo::invitees() const {
  // @@protoc_insertion_point(field_list:Cmd.WeddingManualInfo.invitees)
  return invitees_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingInvitee >*
WeddingManualInfo::mutable_invitees() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.WeddingManualInfo.invitees)
  return &invitees_;
}

// optional string name1 = 8;
inline bool WeddingManualInfo::has_name1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WeddingManualInfo::set_has_name1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WeddingManualInfo::clear_has_name1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WeddingManualInfo::clear_name1() {
  if (name1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name1_->clear();
  }
  clear_has_name1();
}
inline const ::std::string& WeddingManualInfo::name1() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingManualInfo.name1)
  return *name1_;
}
inline void WeddingManualInfo::set_name1(const ::std::string& value) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name1_ = new ::std::string;
  }
  name1_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.WeddingManualInfo.name1)
}
inline void WeddingManualInfo::set_name1(const char* value) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name1_ = new ::std::string;
  }
  name1_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.WeddingManualInfo.name1)
}
inline void WeddingManualInfo::set_name1(const char* value, size_t size) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name1_ = new ::std::string;
  }
  name1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.WeddingManualInfo.name1)
}
inline ::std::string* WeddingManualInfo::mutable_name1() {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.WeddingManualInfo.name1)
  return name1_;
}
inline ::std::string* WeddingManualInfo::release_name1() {
  clear_has_name1();
  if (name1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name1_;
    name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WeddingManualInfo::set_allocated_name1(::std::string* name1) {
  if (name1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name1_;
  }
  if (name1) {
    set_has_name1();
    name1_ = name1;
  } else {
    clear_has_name1();
    name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.WeddingManualInfo.name1)
}

// optional string name2 = 9;
inline bool WeddingManualInfo::has_name2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WeddingManualInfo::set_has_name2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WeddingManualInfo::clear_has_name2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WeddingManualInfo::clear_name2() {
  if (name2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name2_->clear();
  }
  clear_has_name2();
}
inline const ::std::string& WeddingManualInfo::name2() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingManualInfo.name2)
  return *name2_;
}
inline void WeddingManualInfo::set_name2(const ::std::string& value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.WeddingManualInfo.name2)
}
inline void WeddingManualInfo::set_name2(const char* value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.WeddingManualInfo.name2)
}
inline void WeddingManualInfo::set_name2(const char* value, size_t size) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name2_ = new ::std::string;
  }
  name2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.WeddingManualInfo.name2)
}
inline ::std::string* WeddingManualInfo::mutable_name2() {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.WeddingManualInfo.name2)
  return name2_;
}
inline ::std::string* WeddingManualInfo::release_name2() {
  clear_has_name2();
  if (name2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name2_;
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WeddingManualInfo::set_allocated_name2(::std::string* name2) {
  if (name2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name2_;
  }
  if (name2) {
    set_has_name2();
    name2_ = name2;
  } else {
    clear_has_name2();
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.WeddingManualInfo.name2)
}

// repeated .Cmd.ItemData itemrecords = 10;
inline int WeddingManualInfo::itemrecords_size() const {
  return itemrecords_.size();
}
inline void WeddingManualInfo::clear_itemrecords() {
  itemrecords_.Clear();
}
inline const ::Cmd::ItemData& WeddingManualInfo::itemrecords(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingManualInfo.itemrecords)
  return itemrecords_.Get(index);
}
inline ::Cmd::ItemData* WeddingManualInfo::mutable_itemrecords(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.WeddingManualInfo.itemrecords)
  return itemrecords_.Mutable(index);
}
inline ::Cmd::ItemData* WeddingManualInfo::add_itemrecords() {
  // @@protoc_insertion_point(field_add:Cmd.WeddingManualInfo.itemrecords)
  return itemrecords_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
WeddingManualInfo::itemrecords() const {
  // @@protoc_insertion_point(field_list:Cmd.WeddingManualInfo.itemrecords)
  return itemrecords_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
WeddingManualInfo::mutable_itemrecords() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.WeddingManualInfo.itemrecords)
  return &itemrecords_;
}

// -------------------------------------------------------------------

// WeddingInfo

// optional uint64 id = 1;
inline bool WeddingInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeddingInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeddingInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeddingInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 WeddingInfo::id() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInfo.id)
  return id_;
}
inline void WeddingInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingInfo.id)
}

// optional .Cmd.EWeddingStatus status = 2;
inline bool WeddingInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeddingInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeddingInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeddingInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Cmd::EWeddingStatus WeddingInfo::status() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInfo.status)
  return static_cast< ::Cmd::EWeddingStatus >(status_);
}
inline void WeddingInfo::set_status(::Cmd::EWeddingStatus value) {
  assert(::Cmd::EWeddingStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingInfo.status)
}

// optional uint64 charid1 = 3;
inline bool WeddingInfo::has_charid1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeddingInfo::set_has_charid1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeddingInfo::clear_has_charid1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeddingInfo::clear_charid1() {
  charid1_ = GOOGLE_ULONGLONG(0);
  clear_has_charid1();
}
inline ::google::protobuf::uint64 WeddingInfo::charid1() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInfo.charid1)
  return charid1_;
}
inline void WeddingInfo::set_charid1(::google::protobuf::uint64 value) {
  set_has_charid1();
  charid1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingInfo.charid1)
}

// optional uint64 charid2 = 4;
inline bool WeddingInfo::has_charid2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeddingInfo::set_has_charid2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeddingInfo::clear_has_charid2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeddingInfo::clear_charid2() {
  charid2_ = GOOGLE_ULONGLONG(0);
  clear_has_charid2();
}
inline ::google::protobuf::uint64 WeddingInfo::charid2() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInfo.charid2)
  return charid2_;
}
inline void WeddingInfo::set_charid2(::google::protobuf::uint64 value) {
  set_has_charid2();
  charid2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingInfo.charid2)
}

// optional uint32 zoneid = 5;
inline bool WeddingInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeddingInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeddingInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeddingInfo::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 WeddingInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInfo.zoneid)
  return zoneid_;
}
inline void WeddingInfo::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingInfo.zoneid)
}

// optional uint32 date = 6;
inline bool WeddingInfo::has_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WeddingInfo::set_has_date() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WeddingInfo::clear_has_date() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WeddingInfo::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 WeddingInfo::date() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInfo.date)
  return date_;
}
inline void WeddingInfo::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingInfo.date)
}

// optional uint32 configid = 7;
inline bool WeddingInfo::has_configid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WeddingInfo::set_has_configid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WeddingInfo::clear_has_configid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WeddingInfo::clear_configid() {
  configid_ = 0u;
  clear_has_configid();
}
inline ::google::protobuf::uint32 WeddingInfo::configid() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInfo.configid)
  return configid_;
}
inline void WeddingInfo::set_configid(::google::protobuf::uint32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingInfo.configid)
}

// optional uint32 starttime = 8;
inline bool WeddingInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WeddingInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WeddingInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WeddingInfo::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 WeddingInfo::starttime() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInfo.starttime)
  return starttime_;
}
inline void WeddingInfo::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingInfo.starttime)
}

// optional uint32 endtime = 9;
inline bool WeddingInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WeddingInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WeddingInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WeddingInfo::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 WeddingInfo::endtime() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInfo.endtime)
  return endtime_;
}
inline void WeddingInfo::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingInfo.endtime)
}

// optional .Cmd.WeddingManualInfo manual = 10;
inline bool WeddingInfo::has_manual() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WeddingInfo::set_has_manual() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WeddingInfo::clear_has_manual() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WeddingInfo::clear_manual() {
  if (manual_ != NULL) manual_->::Cmd::WeddingManualInfo::Clear();
  clear_has_manual();
}
inline const ::Cmd::WeddingManualInfo& WeddingInfo::manual() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInfo.manual)
  return manual_ != NULL ? *manual_ : *default_instance_->manual_;
}
inline ::Cmd::WeddingManualInfo* WeddingInfo::mutable_manual() {
  set_has_manual();
  if (manual_ == NULL) manual_ = new ::Cmd::WeddingManualInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.WeddingInfo.manual)
  return manual_;
}
inline ::Cmd::WeddingManualInfo* WeddingInfo::release_manual() {
  clear_has_manual();
  ::Cmd::WeddingManualInfo* temp = manual_;
  manual_ = NULL;
  return temp;
}
inline void WeddingInfo::set_allocated_manual(::Cmd::WeddingManualInfo* manual) {
  delete manual_;
  manual_ = manual;
  if (manual) {
    set_has_manual();
  } else {
    clear_has_manual();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.WeddingInfo.manual)
}

// -------------------------------------------------------------------

// SyncWeddingInfoSCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
inline bool SyncWeddingInfoSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncWeddingInfoSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncWeddingInfoSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncWeddingInfoSCmd::clear_cmd() {
  cmd_ = 214;
  clear_has_cmd();
}
inline ::Cmd::Command SyncWeddingInfoSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncWeddingInfoSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SyncWeddingInfoSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncWeddingInfoSCmd.cmd)
}

// optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_SYNC_WEDDINGINFO];
inline bool SyncWeddingInfoSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncWeddingInfoSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncWeddingInfoSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncWeddingInfoSCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::WeddingSParam SyncWeddingInfoSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncWeddingInfoSCmd.param)
  return static_cast< ::Cmd::WeddingSParam >(param_);
}
inline void SyncWeddingInfoSCmd::set_param(::Cmd::WeddingSParam value) {
  assert(::Cmd::WeddingSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncWeddingInfoSCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool SyncWeddingInfoSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncWeddingInfoSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncWeddingInfoSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncWeddingInfoSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SyncWeddingInfoSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncWeddingInfoSCmd.charid)
  return charid_;
}
inline void SyncWeddingInfoSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncWeddingInfoSCmd.charid)
}

// optional .Cmd.WeddingInfo weddinginfo = 4;
inline bool SyncWeddingInfoSCmd::has_weddinginfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncWeddingInfoSCmd::set_has_weddinginfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncWeddingInfoSCmd::clear_has_weddinginfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncWeddingInfoSCmd::clear_weddinginfo() {
  if (weddinginfo_ != NULL) weddinginfo_->::Cmd::WeddingInfo::Clear();
  clear_has_weddinginfo();
}
inline const ::Cmd::WeddingInfo& SyncWeddingInfoSCmd::weddinginfo() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncWeddingInfoSCmd.weddinginfo)
  return weddinginfo_ != NULL ? *weddinginfo_ : *default_instance_->weddinginfo_;
}
inline ::Cmd::WeddingInfo* SyncWeddingInfoSCmd::mutable_weddinginfo() {
  set_has_weddinginfo();
  if (weddinginfo_ == NULL) weddinginfo_ = new ::Cmd::WeddingInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.SyncWeddingInfoSCmd.weddinginfo)
  return weddinginfo_;
}
inline ::Cmd::WeddingInfo* SyncWeddingInfoSCmd::release_weddinginfo() {
  clear_has_weddinginfo();
  ::Cmd::WeddingInfo* temp = weddinginfo_;
  weddinginfo_ = NULL;
  return temp;
}
inline void SyncWeddingInfoSCmd::set_allocated_weddinginfo(::Cmd::WeddingInfo* weddinginfo) {
  delete weddinginfo_;
  weddinginfo_ = weddinginfo;
  if (weddinginfo) {
    set_has_weddinginfo();
  } else {
    clear_has_weddinginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SyncWeddingInfoSCmd.weddinginfo)
}

// -------------------------------------------------------------------

// UpdateWeddingManualSCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
inline bool UpdateWeddingManualSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateWeddingManualSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateWeddingManualSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateWeddingManualSCmd::clear_cmd() {
  cmd_ = 214;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateWeddingManualSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateWeddingManualSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateWeddingManualSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateWeddingManualSCmd.cmd)
}

// optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_UPDATE_MANUAL];
inline bool UpdateWeddingManualSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateWeddingManualSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateWeddingManualSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateWeddingManualSCmd::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::WeddingSParam UpdateWeddingManualSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateWeddingManualSCmd.param)
  return static_cast< ::Cmd::WeddingSParam >(param_);
}
inline void UpdateWeddingManualSCmd::set_param(::Cmd::WeddingSParam value) {
  assert(::Cmd::WeddingSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateWeddingManualSCmd.param)
}

// required uint64 weddingid = 3;
inline bool UpdateWeddingManualSCmd::has_weddingid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateWeddingManualSCmd::set_has_weddingid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateWeddingManualSCmd::clear_has_weddingid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateWeddingManualSCmd::clear_weddingid() {
  weddingid_ = GOOGLE_ULONGLONG(0);
  clear_has_weddingid();
}
inline ::google::protobuf::uint64 UpdateWeddingManualSCmd::weddingid() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateWeddingManualSCmd.weddingid)
  return weddingid_;
}
inline void UpdateWeddingManualSCmd::set_weddingid(::google::protobuf::uint64 value) {
  set_has_weddingid();
  weddingid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateWeddingManualSCmd.weddingid)
}

// optional .Cmd.WeddingManualInfo manual = 4;
inline bool UpdateWeddingManualSCmd::has_manual() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateWeddingManualSCmd::set_has_manual() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateWeddingManualSCmd::clear_has_manual() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateWeddingManualSCmd::clear_manual() {
  if (manual_ != NULL) manual_->::Cmd::WeddingManualInfo::Clear();
  clear_has_manual();
}
inline const ::Cmd::WeddingManualInfo& UpdateWeddingManualSCmd::manual() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateWeddingManualSCmd.manual)
  return manual_ != NULL ? *manual_ : *default_instance_->manual_;
}
inline ::Cmd::WeddingManualInfo* UpdateWeddingManualSCmd::mutable_manual() {
  set_has_manual();
  if (manual_ == NULL) manual_ = new ::Cmd::WeddingManualInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateWeddingManualSCmd.manual)
  return manual_;
}
inline ::Cmd::WeddingManualInfo* UpdateWeddingManualSCmd::release_manual() {
  clear_has_manual();
  ::Cmd::WeddingManualInfo* temp = manual_;
  manual_ = NULL;
  return temp;
}
inline void UpdateWeddingManualSCmd::set_allocated_manual(::Cmd::WeddingManualInfo* manual) {
  delete manual_;
  manual_ = manual;
  if (manual) {
    set_has_manual();
  } else {
    clear_has_manual();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpdateWeddingManualSCmd.manual)
}

// -------------------------------------------------------------------

// StartWeddingSCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
inline bool StartWeddingSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartWeddingSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartWeddingSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartWeddingSCmd::clear_cmd() {
  cmd_ = 214;
  clear_has_cmd();
}
inline ::Cmd::Command StartWeddingSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.StartWeddingSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void StartWeddingSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StartWeddingSCmd.cmd)
}

// optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_START_WEDDING];
inline bool StartWeddingSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartWeddingSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartWeddingSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartWeddingSCmd::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::WeddingSParam StartWeddingSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.StartWeddingSCmd.param)
  return static_cast< ::Cmd::WeddingSParam >(param_);
}
inline void StartWeddingSCmd::set_param(::Cmd::WeddingSParam value) {
  assert(::Cmd::WeddingSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StartWeddingSCmd.param)
}

// optional .Cmd.WeddingInfo weddinginfo = 3;
inline bool StartWeddingSCmd::has_weddinginfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StartWeddingSCmd::set_has_weddinginfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StartWeddingSCmd::clear_has_weddinginfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StartWeddingSCmd::clear_weddinginfo() {
  if (weddinginfo_ != NULL) weddinginfo_->::Cmd::WeddingInfo::Clear();
  clear_has_weddinginfo();
}
inline const ::Cmd::WeddingInfo& StartWeddingSCmd::weddinginfo() const {
  // @@protoc_insertion_point(field_get:Cmd.StartWeddingSCmd.weddinginfo)
  return weddinginfo_ != NULL ? *weddinginfo_ : *default_instance_->weddinginfo_;
}
inline ::Cmd::WeddingInfo* StartWeddingSCmd::mutable_weddinginfo() {
  set_has_weddinginfo();
  if (weddinginfo_ == NULL) weddinginfo_ = new ::Cmd::WeddingInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.StartWeddingSCmd.weddinginfo)
  return weddinginfo_;
}
inline ::Cmd::WeddingInfo* StartWeddingSCmd::release_weddinginfo() {
  clear_has_weddinginfo();
  ::Cmd::WeddingInfo* temp = weddinginfo_;
  weddinginfo_ = NULL;
  return temp;
}
inline void StartWeddingSCmd::set_allocated_weddinginfo(::Cmd::WeddingInfo* weddinginfo) {
  delete weddinginfo_;
  weddinginfo_ = weddinginfo;
  if (weddinginfo) {
    set_has_weddinginfo();
  } else {
    clear_has_weddinginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.StartWeddingSCmd.weddinginfo)
}

// -------------------------------------------------------------------

// StopWeddingSCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
inline bool StopWeddingSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopWeddingSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopWeddingSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopWeddingSCmd::clear_cmd() {
  cmd_ = 214;
  clear_has_cmd();
}
inline ::Cmd::Command StopWeddingSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.StopWeddingSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void StopWeddingSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StopWeddingSCmd.cmd)
}

// optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_STOP_WEDDING];
inline bool StopWeddingSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StopWeddingSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StopWeddingSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StopWeddingSCmd::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::WeddingSParam StopWeddingSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.StopWeddingSCmd.param)
  return static_cast< ::Cmd::WeddingSParam >(param_);
}
inline void StopWeddingSCmd::set_param(::Cmd::WeddingSParam value) {
  assert(::Cmd::WeddingSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StopWeddingSCmd.param)
}

// optional uint64 id = 3;
inline bool StopWeddingSCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StopWeddingSCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StopWeddingSCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StopWeddingSCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 StopWeddingSCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.StopWeddingSCmd.id)
  return id_;
}
inline void StopWeddingSCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StopWeddingSCmd.id)
}

// -------------------------------------------------------------------

// ReserveWeddingResultSCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
inline bool ReserveWeddingResultSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReserveWeddingResultSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReserveWeddingResultSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReserveWeddingResultSCmd::clear_cmd() {
  cmd_ = 214;
  clear_has_cmd();
}
inline ::Cmd::Command ReserveWeddingResultSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingResultSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReserveWeddingResultSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingResultSCmd.cmd)
}

// optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_RESERVE_WEDDING_RESULT];
inline bool ReserveWeddingResultSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReserveWeddingResultSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReserveWeddingResultSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReserveWeddingResultSCmd::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::WeddingSParam ReserveWeddingResultSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingResultSCmd.param)
  return static_cast< ::Cmd::WeddingSParam >(param_);
}
inline void ReserveWeddingResultSCmd::set_param(::Cmd::WeddingSParam value) {
  assert(::Cmd::WeddingSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingResultSCmd.param)
}

// optional uint32 date = 3;
inline bool ReserveWeddingResultSCmd::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReserveWeddingResultSCmd::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReserveWeddingResultSCmd::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReserveWeddingResultSCmd::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 ReserveWeddingResultSCmd::date() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingResultSCmd.date)
  return date_;
}
inline void ReserveWeddingResultSCmd::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingResultSCmd.date)
}

// optional uint32 configid = 4;
inline bool ReserveWeddingResultSCmd::has_configid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReserveWeddingResultSCmd::set_has_configid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReserveWeddingResultSCmd::clear_has_configid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReserveWeddingResultSCmd::clear_configid() {
  configid_ = 0u;
  clear_has_configid();
}
inline ::google::protobuf::uint32 ReserveWeddingResultSCmd::configid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingResultSCmd.configid)
  return configid_;
}
inline void ReserveWeddingResultSCmd::set_configid(::google::protobuf::uint32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingResultSCmd.configid)
}

// optional uint64 charid1 = 5;
inline bool ReserveWeddingResultSCmd::has_charid1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReserveWeddingResultSCmd::set_has_charid1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReserveWeddingResultSCmd::clear_has_charid1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReserveWeddingResultSCmd::clear_charid1() {
  charid1_ = GOOGLE_ULONGLONG(0);
  clear_has_charid1();
}
inline ::google::protobuf::uint64 ReserveWeddingResultSCmd::charid1() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingResultSCmd.charid1)
  return charid1_;
}
inline void ReserveWeddingResultSCmd::set_charid1(::google::protobuf::uint64 value) {
  set_has_charid1();
  charid1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingResultSCmd.charid1)
}

// optional uint64 charid2 = 6;
inline bool ReserveWeddingResultSCmd::has_charid2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReserveWeddingResultSCmd::set_has_charid2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReserveWeddingResultSCmd::clear_has_charid2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReserveWeddingResultSCmd::clear_charid2() {
  charid2_ = GOOGLE_ULONGLONG(0);
  clear_has_charid2();
}
inline ::google::protobuf::uint64 ReserveWeddingResultSCmd::charid2() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingResultSCmd.charid2)
  return charid2_;
}
inline void ReserveWeddingResultSCmd::set_charid2(::google::protobuf::uint64 value) {
  set_has_charid2();
  charid2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingResultSCmd.charid2)
}

// optional bool success = 7;
inline bool ReserveWeddingResultSCmd::has_success() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReserveWeddingResultSCmd::set_has_success() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReserveWeddingResultSCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReserveWeddingResultSCmd::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool ReserveWeddingResultSCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingResultSCmd.success)
  return success_;
}
inline void ReserveWeddingResultSCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingResultSCmd.success)
}

// optional uint32 ticket = 8;
inline bool ReserveWeddingResultSCmd::has_ticket() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReserveWeddingResultSCmd::set_has_ticket() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReserveWeddingResultSCmd::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReserveWeddingResultSCmd::clear_ticket() {
  ticket_ = 0u;
  clear_has_ticket();
}
inline ::google::protobuf::uint32 ReserveWeddingResultSCmd::ticket() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingResultSCmd.ticket)
  return ticket_;
}
inline void ReserveWeddingResultSCmd::set_ticket(::google::protobuf::uint32 value) {
  set_has_ticket();
  ticket_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingResultSCmd.ticket)
}

// optional uint32 money = 9;
inline bool ReserveWeddingResultSCmd::has_money() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReserveWeddingResultSCmd::set_has_money() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReserveWeddingResultSCmd::clear_has_money() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReserveWeddingResultSCmd::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 ReserveWeddingResultSCmd::money() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingResultSCmd.money)
  return money_;
}
inline void ReserveWeddingResultSCmd::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingResultSCmd.money)
}

// optional uint32 zoneid = 10;
inline bool ReserveWeddingResultSCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReserveWeddingResultSCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReserveWeddingResultSCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReserveWeddingResultSCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 ReserveWeddingResultSCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingResultSCmd.zoneid)
  return zoneid_;
}
inline void ReserveWeddingResultSCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingResultSCmd.zoneid)
}

// -------------------------------------------------------------------

// BuyServiceWeddingSCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
inline bool BuyServiceWeddingSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyServiceWeddingSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyServiceWeddingSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyServiceWeddingSCmd::clear_cmd() {
  cmd_ = 214;
  clear_has_cmd();
}
inline ::Cmd::Command BuyServiceWeddingSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyServiceWeddingSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BuyServiceWeddingSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyServiceWeddingSCmd.cmd)
}

// optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_BUY_SERVICE];
inline bool BuyServiceWeddingSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyServiceWeddingSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyServiceWeddingSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyServiceWeddingSCmd::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::WeddingSParam BuyServiceWeddingSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyServiceWeddingSCmd.param)
  return static_cast< ::Cmd::WeddingSParam >(param_);
}
inline void BuyServiceWeddingSCmd::set_param(::Cmd::WeddingSParam value) {
  assert(::Cmd::WeddingSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyServiceWeddingSCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool BuyServiceWeddingSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuyServiceWeddingSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuyServiceWeddingSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuyServiceWeddingSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 BuyServiceWeddingSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyServiceWeddingSCmd.charid)
  return charid_;
}
inline void BuyServiceWeddingSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyServiceWeddingSCmd.charid)
}

// optional .Cmd.ESource source = 4 [default = ESOURCE_MIN];
inline bool BuyServiceWeddingSCmd::has_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuyServiceWeddingSCmd::set_has_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuyServiceWeddingSCmd::clear_has_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuyServiceWeddingSCmd::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::Cmd::ESource BuyServiceWeddingSCmd::source() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyServiceWeddingSCmd.source)
  return static_cast< ::Cmd::ESource >(source_);
}
inline void BuyServiceWeddingSCmd::set_source(::Cmd::ESource value) {
  assert(::Cmd::ESource_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyServiceWeddingSCmd.source)
}

// repeated .Cmd.ItemInfo items = 5;
inline int BuyServiceWeddingSCmd::items_size() const {
  return items_.size();
}
inline void BuyServiceWeddingSCmd::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ItemInfo& BuyServiceWeddingSCmd::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BuyServiceWeddingSCmd.items)
  return items_.Get(index);
}
inline ::Cmd::ItemInfo* BuyServiceWeddingSCmd::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BuyServiceWeddingSCmd.items)
  return items_.Mutable(index);
}
inline ::Cmd::ItemInfo* BuyServiceWeddingSCmd::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.BuyServiceWeddingSCmd.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
BuyServiceWeddingSCmd::items() const {
  // @@protoc_insertion_point(field_list:Cmd.BuyServiceWeddingSCmd.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
BuyServiceWeddingSCmd::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BuyServiceWeddingSCmd.items)
  return &items_;
}

// optional uint32 serviceid = 6 [default = 0];
inline bool BuyServiceWeddingSCmd::has_serviceid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuyServiceWeddingSCmd::set_has_serviceid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuyServiceWeddingSCmd::clear_has_serviceid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuyServiceWeddingSCmd::clear_serviceid() {
  serviceid_ = 0u;
  clear_has_serviceid();
}
inline ::google::protobuf::uint32 BuyServiceWeddingSCmd::serviceid() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyServiceWeddingSCmd.serviceid)
  return serviceid_;
}
inline void BuyServiceWeddingSCmd::set_serviceid(::google::protobuf::uint32 value) {
  set_has_serviceid();
  serviceid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyServiceWeddingSCmd.serviceid)
}

// optional uint64 weddingid = 7 [default = 0];
inline bool BuyServiceWeddingSCmd::has_weddingid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BuyServiceWeddingSCmd::set_has_weddingid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BuyServiceWeddingSCmd::clear_has_weddingid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BuyServiceWeddingSCmd::clear_weddingid() {
  weddingid_ = GOOGLE_ULONGLONG(0);
  clear_has_weddingid();
}
inline ::google::protobuf::uint64 BuyServiceWeddingSCmd::weddingid() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyServiceWeddingSCmd.weddingid)
  return weddingid_;
}
inline void BuyServiceWeddingSCmd::set_weddingid(::google::protobuf::uint64 value) {
  set_has_weddingid();
  weddingid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyServiceWeddingSCmd.weddingid)
}

// optional bool success = 8 [default = false];
inline bool BuyServiceWeddingSCmd::has_success() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BuyServiceWeddingSCmd::set_has_success() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BuyServiceWeddingSCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BuyServiceWeddingSCmd::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool BuyServiceWeddingSCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyServiceWeddingSCmd.success)
  return success_;
}
inline void BuyServiceWeddingSCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyServiceWeddingSCmd.success)
}

// -------------------------------------------------------------------

// MarrySCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
inline bool MarrySCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarrySCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarrySCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarrySCmd::clear_cmd() {
  cmd_ = 214;
  clear_has_cmd();
}
inline ::Cmd::Command MarrySCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.MarrySCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void MarrySCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarrySCmd.cmd)
}

// optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MARRY];
inline bool MarrySCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarrySCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarrySCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarrySCmd::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::WeddingSParam MarrySCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MarrySCmd.param)
  return static_cast< ::Cmd::WeddingSParam >(param_);
}
inline void MarrySCmd::set_param(::Cmd::WeddingSParam value) {
  assert(::Cmd::WeddingSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarrySCmd.param)
}

// optional uint64 charid1 = 3;
inline bool MarrySCmd::has_charid1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarrySCmd::set_has_charid1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarrySCmd::clear_has_charid1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarrySCmd::clear_charid1() {
  charid1_ = GOOGLE_ULONGLONG(0);
  clear_has_charid1();
}
inline ::google::protobuf::uint64 MarrySCmd::charid1() const {
  // @@protoc_insertion_point(field_get:Cmd.MarrySCmd.charid1)
  return charid1_;
}
inline void MarrySCmd::set_charid1(::google::protobuf::uint64 value) {
  set_has_charid1();
  charid1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarrySCmd.charid1)
}

// optional uint64 charid2 = 4;
inline bool MarrySCmd::has_charid2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarrySCmd::set_has_charid2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarrySCmd::clear_has_charid2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarrySCmd::clear_charid2() {
  charid2_ = GOOGLE_ULONGLONG(0);
  clear_has_charid2();
}
inline ::google::protobuf::uint64 MarrySCmd::charid2() const {
  // @@protoc_insertion_point(field_get:Cmd.MarrySCmd.charid2)
  return charid2_;
}
inline void MarrySCmd::set_charid2(::google::protobuf::uint64 value) {
  set_has_charid2();
  charid2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarrySCmd.charid2)
}

// optional uint64 weddingid = 5;
inline bool MarrySCmd::has_weddingid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarrySCmd::set_has_weddingid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarrySCmd::clear_has_weddingid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarrySCmd::clear_weddingid() {
  weddingid_ = GOOGLE_ULONGLONG(0);
  clear_has_weddingid();
}
inline ::google::protobuf::uint64 MarrySCmd::weddingid() const {
  // @@protoc_insertion_point(field_get:Cmd.MarrySCmd.weddingid)
  return weddingid_;
}
inline void MarrySCmd::set_weddingid(::google::protobuf::uint64 value) {
  set_has_weddingid();
  weddingid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarrySCmd.weddingid)
}

// repeated .Cmd.ItemData items = 6;
inline int MarrySCmd::items_size() const {
  return items_.size();
}
inline void MarrySCmd::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ItemData& MarrySCmd::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MarrySCmd.items)
  return items_.Get(index);
}
inline ::Cmd::ItemData* MarrySCmd::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MarrySCmd.items)
  return items_.Mutable(index);
}
inline ::Cmd::ItemData* MarrySCmd::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.MarrySCmd.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
MarrySCmd::items() const {
  // @@protoc_insertion_point(field_list:Cmd.MarrySCmd.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
MarrySCmd::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MarrySCmd.items)
  return &items_;
}

// -------------------------------------------------------------------

// CheckWeddingReserverSCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
inline bool CheckWeddingReserverSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckWeddingReserverSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckWeddingReserverSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckWeddingReserverSCmd::clear_cmd() {
  cmd_ = 214;
  clear_has_cmd();
}
inline ::Cmd::Command CheckWeddingReserverSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckWeddingReserverSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CheckWeddingReserverSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckWeddingReserverSCmd.cmd)
}

// optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_CHECK_WEDDING_RESERVE];
inline bool CheckWeddingReserverSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckWeddingReserverSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckWeddingReserverSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckWeddingReserverSCmd::clear_param() {
  param_ = 12;
  clear_has_param();
}
inline ::Cmd::WeddingSParam CheckWeddingReserverSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckWeddingReserverSCmd.param)
  return static_cast< ::Cmd::WeddingSParam >(param_);
}
inline void CheckWeddingReserverSCmd::set_param(::Cmd::WeddingSParam value) {
  assert(::Cmd::WeddingSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckWeddingReserverSCmd.param)
}

// optional uint64 weddingid = 3 [default = 0];
inline bool CheckWeddingReserverSCmd::has_weddingid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckWeddingReserverSCmd::set_has_weddingid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckWeddingReserverSCmd::clear_has_weddingid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckWeddingReserverSCmd::clear_weddingid() {
  weddingid_ = GOOGLE_ULONGLONG(0);
  clear_has_weddingid();
}
inline ::google::protobuf::uint64 CheckWeddingReserverSCmd::weddingid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckWeddingReserverSCmd.weddingid)
  return weddingid_;
}
inline void CheckWeddingReserverSCmd::set_weddingid(::google::protobuf::uint64 value) {
  set_has_weddingid();
  weddingid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckWeddingReserverSCmd.weddingid)
}

// optional uint64 mailid = 4 [default = 0];
inline bool CheckWeddingReserverSCmd::has_mailid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckWeddingReserverSCmd::set_has_mailid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckWeddingReserverSCmd::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckWeddingReserverSCmd::clear_mailid() {
  mailid_ = GOOGLE_ULONGLONG(0);
  clear_has_mailid();
}
inline ::google::protobuf::uint64 CheckWeddingReserverSCmd::mailid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckWeddingReserverSCmd.mailid)
  return mailid_;
}
inline void CheckWeddingReserverSCmd::set_mailid(::google::protobuf::uint64 value) {
  set_has_mailid();
  mailid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckWeddingReserverSCmd.mailid)
}

// optional uint64 charid = 5 [default = 0];
inline bool CheckWeddingReserverSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CheckWeddingReserverSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CheckWeddingReserverSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CheckWeddingReserverSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 CheckWeddingReserverSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckWeddingReserverSCmd.charid)
  return charid_;
}
inline void CheckWeddingReserverSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckWeddingReserverSCmd.charid)
}

// optional bool result = 6 [default = false];
inline bool CheckWeddingReserverSCmd::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CheckWeddingReserverSCmd::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CheckWeddingReserverSCmd::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CheckWeddingReserverSCmd::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool CheckWeddingReserverSCmd::result() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckWeddingReserverSCmd.result)
  return result_;
}
inline void CheckWeddingReserverSCmd::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckWeddingReserverSCmd.result)
}

// -------------------------------------------------------------------

// ParnterInfo

// optional uint32 mapid = 1 [default = 0];
inline bool ParnterInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParnterInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParnterInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParnterInfo::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 ParnterInfo::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.ParnterInfo.mapid)
  return mapid_;
}
inline void ParnterInfo::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ParnterInfo.mapid)
}

// optional uint32 zoneid = 2 [default = 0];
inline bool ParnterInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParnterInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParnterInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParnterInfo::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 ParnterInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.ParnterInfo.zoneid)
  return zoneid_;
}
inline void ParnterInfo::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ParnterInfo.zoneid)
}

// optional float x = 3 [default = 0];
inline bool ParnterInfo::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParnterInfo::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParnterInfo::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParnterInfo::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float ParnterInfo::x() const {
  // @@protoc_insertion_point(field_get:Cmd.ParnterInfo.x)
  return x_;
}
inline void ParnterInfo::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ParnterInfo.x)
}

// optional float y = 4 [default = 0];
inline bool ParnterInfo::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParnterInfo::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParnterInfo::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParnterInfo::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float ParnterInfo::y() const {
  // @@protoc_insertion_point(field_get:Cmd.ParnterInfo.y)
  return y_;
}
inline void ParnterInfo::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ParnterInfo.y)
}

// optional float z = 5 [default = 0];
inline bool ParnterInfo::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParnterInfo::set_has_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParnterInfo::clear_has_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParnterInfo::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float ParnterInfo::z() const {
  // @@protoc_insertion_point(field_get:Cmd.ParnterInfo.z)
  return z_;
}
inline void ParnterInfo::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ParnterInfo.z)
}

// -------------------------------------------------------------------

// MissyouInviteWedSCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
inline bool MissyouInviteWedSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MissyouInviteWedSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MissyouInviteWedSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MissyouInviteWedSCmd::clear_cmd() {
  cmd_ = 214;
  clear_has_cmd();
}
inline ::Cmd::Command MissyouInviteWedSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.MissyouInviteWedSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void MissyouInviteWedSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MissyouInviteWedSCmd.cmd)
}

// optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MISSYOU_INVITE];
inline bool MissyouInviteWedSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MissyouInviteWedSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MissyouInviteWedSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MissyouInviteWedSCmd::clear_param() {
  param_ = 13;
  clear_has_param();
}
inline ::Cmd::WeddingSParam MissyouInviteWedSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MissyouInviteWedSCmd.param)
  return static_cast< ::Cmd::WeddingSParam >(param_);
}
inline void MissyouInviteWedSCmd::set_param(::Cmd::WeddingSParam value) {
  assert(::Cmd::WeddingSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MissyouInviteWedSCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool MissyouInviteWedSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MissyouInviteWedSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MissyouInviteWedSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MissyouInviteWedSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 MissyouInviteWedSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.MissyouInviteWedSCmd.charid)
  return charid_;
}
inline void MissyouInviteWedSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MissyouInviteWedSCmd.charid)
}

// optional bool trans = 8 [default = false];
inline bool MissyouInviteWedSCmd::has_trans() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MissyouInviteWedSCmd::set_has_trans() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MissyouInviteWedSCmd::clear_has_trans() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MissyouInviteWedSCmd::clear_trans() {
  trans_ = false;
  clear_has_trans();
}
inline bool MissyouInviteWedSCmd::trans() const {
  // @@protoc_insertion_point(field_get:Cmd.MissyouInviteWedSCmd.trans)
  return trans_;
}
inline void MissyouInviteWedSCmd::set_trans(bool value) {
  set_has_trans();
  trans_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MissyouInviteWedSCmd.trans)
}

// optional .Cmd.ParnterInfo info = 9;
inline bool MissyouInviteWedSCmd::has_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MissyouInviteWedSCmd::set_has_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MissyouInviteWedSCmd::clear_has_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MissyouInviteWedSCmd::clear_info() {
  if (info_ != NULL) info_->::Cmd::ParnterInfo::Clear();
  clear_has_info();
}
inline const ::Cmd::ParnterInfo& MissyouInviteWedSCmd::info() const {
  // @@protoc_insertion_point(field_get:Cmd.MissyouInviteWedSCmd.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Cmd::ParnterInfo* MissyouInviteWedSCmd::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Cmd::ParnterInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.MissyouInviteWedSCmd.info)
  return info_;
}
inline ::Cmd::ParnterInfo* MissyouInviteWedSCmd::release_info() {
  clear_has_info();
  ::Cmd::ParnterInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void MissyouInviteWedSCmd::set_allocated_info(::Cmd::ParnterInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MissyouInviteWedSCmd.info)
}

// -------------------------------------------------------------------

// MarrySuccessSCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
inline bool MarrySuccessSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarrySuccessSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarrySuccessSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarrySuccessSCmd::clear_cmd() {
  cmd_ = 214;
  clear_has_cmd();
}
inline ::Cmd::Command MarrySuccessSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.MarrySuccessSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void MarrySuccessSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarrySuccessSCmd.cmd)
}

// optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MARRY_SUCCESS];
inline bool MarrySuccessSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarrySuccessSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarrySuccessSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarrySuccessSCmd::clear_param() {
  param_ = 15;
  clear_has_param();
}
inline ::Cmd::WeddingSParam MarrySuccessSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MarrySuccessSCmd.param)
  return static_cast< ::Cmd::WeddingSParam >(param_);
}
inline void MarrySuccessSCmd::set_param(::Cmd::WeddingSParam value) {
  assert(::Cmd::WeddingSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarrySuccessSCmd.param)
}

// optional uint64 weddingid = 3;
inline bool MarrySuccessSCmd::has_weddingid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarrySuccessSCmd::set_has_weddingid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarrySuccessSCmd::clear_has_weddingid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarrySuccessSCmd::clear_weddingid() {
  weddingid_ = GOOGLE_ULONGLONG(0);
  clear_has_weddingid();
}
inline ::google::protobuf::uint64 MarrySuccessSCmd::weddingid() const {
  // @@protoc_insertion_point(field_get:Cmd.MarrySuccessSCmd.weddingid)
  return weddingid_;
}
inline void MarrySuccessSCmd::set_weddingid(::google::protobuf::uint64 value) {
  set_has_weddingid();
  weddingid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarrySuccessSCmd.weddingid)
}

// -------------------------------------------------------------------

// UserRenameWedSCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
inline bool UserRenameWedSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRenameWedSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRenameWedSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRenameWedSCmd::clear_cmd() {
  cmd_ = 214;
  clear_has_cmd();
}
inline ::Cmd::Command UserRenameWedSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameWedSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UserRenameWedSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameWedSCmd.cmd)
}

// optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_USER_RENAME];
inline bool UserRenameWedSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRenameWedSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRenameWedSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRenameWedSCmd::clear_param() {
  param_ = 16;
  clear_has_param();
}
inline ::Cmd::WeddingSParam UserRenameWedSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameWedSCmd.param)
  return static_cast< ::Cmd::WeddingSParam >(param_);
}
inline void UserRenameWedSCmd::set_param(::Cmd::WeddingSParam value) {
  assert(::Cmd::WeddingSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameWedSCmd.param)
}

// optional uint64 weddingid = 3 [default = 0];
inline bool UserRenameWedSCmd::has_weddingid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRenameWedSCmd::set_has_weddingid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRenameWedSCmd::clear_has_weddingid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRenameWedSCmd::clear_weddingid() {
  weddingid_ = GOOGLE_ULONGLONG(0);
  clear_has_weddingid();
}
inline ::google::protobuf::uint64 UserRenameWedSCmd::weddingid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameWedSCmd.weddingid)
  return weddingid_;
}
inline void UserRenameWedSCmd::set_weddingid(::google::protobuf::uint64 value) {
  set_has_weddingid();
  weddingid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameWedSCmd.weddingid)
}

// optional uint64 charid = 4 [default = 0];
inline bool UserRenameWedSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserRenameWedSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserRenameWedSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserRenameWedSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 UserRenameWedSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameWedSCmd.charid)
  return charid_;
}
inline void UserRenameWedSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameWedSCmd.charid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::WeddingSParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::WeddingSParam>() {
  return ::Cmd::WeddingSParam_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WeddingSCmd_2eproto__INCLUDED
