// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatchCCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MatchCCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* MatchTeamData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchTeamData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomBriefInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomBriefInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMyRoomMatchCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMyRoomMatchCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRoomListCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRoomListCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRoomDetailCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRoomDetailCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinRoomUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinRoomUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* TutorMatcher_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TutorMatcher_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinRoomCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinRoomCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveRoomCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveRoomCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfRoomStateCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfRoomStateCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfFightStatCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfFightStatCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinFightingCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinFightingCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComboNotifyCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComboNotifyCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RevChallengeCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RevChallengeCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickTeamCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickTeamCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightConfirmCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightConfirmCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpResultCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpResultCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchTeamMemUpdateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchTeamMemUpdateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpTeamMemberUpdateCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpTeamMemberUpdateCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchTeamMemDataUpdateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchTeamMemDataUpdateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpMemberDataUpdateCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpMemberDataUpdateCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfMatchInfoCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfMatchInfoCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEndTimeCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEndTimeCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankNameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankNameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfRankChangeCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfRankChangeCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenGlobalShopPanelCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenGlobalShopPanelCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TutorMatchResultNtfMatchCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TutorMatchResultNtfMatchCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TutorMatchResponseMatchCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TutorMatchResponseMatchCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPwsPreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPwsPreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPwsPreInfoMatchCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPwsPreInfoMatchCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePreInfoMatchCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePreInfoMatchCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPwsRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPwsRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryTeamPwsRankMatchCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryTeamPwsRankMatchCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPwsUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPwsUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryTeamPwsTeamInfoMatchCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryTeamPwsTeamInfoMatchCCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchCParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPvpType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoomState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPvpResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMatchReply_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETutorMatch_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETeamPwsRank_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MatchCCmd_2eproto() {
  protobuf_AddDesc_MatchCCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MatchCCmd.proto");
  GOOGLE_CHECK(file != NULL);
  MatchTeamData_descriptor_ = file->message_type(0);
  static const int MatchTeamData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamData, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamData, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamData, members_),
  };
  MatchTeamData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchTeamData_descriptor_,
      MatchTeamData::default_instance_,
      MatchTeamData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchTeamData));
  RoomDetailInfo_descriptor_ = file->message_type(1);
  static const int RoomDetailInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailInfo, team_datas_),
  };
  RoomDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomDetailInfo_descriptor_,
      RoomDetailInfo::default_instance_,
      RoomDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomDetailInfo));
  RoomBriefInfo_descriptor_ = file->message_type(2);
  static const int RoomBriefInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBriefInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBriefInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBriefInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBriefInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBriefInfo, raidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBriefInfo, player_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBriefInfo, num1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBriefInfo, num2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBriefInfo, num3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBriefInfo, zoneid_),
  };
  RoomBriefInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomBriefInfo_descriptor_,
      RoomBriefInfo::default_instance_,
      RoomBriefInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBriefInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBriefInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomBriefInfo));
  ReqMyRoomMatchCCmd_descriptor_ = file->message_type(3);
  static const int ReqMyRoomMatchCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyRoomMatchCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyRoomMatchCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyRoomMatchCCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyRoomMatchCCmd, brief_info_),
  };
  ReqMyRoomMatchCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMyRoomMatchCCmd_descriptor_,
      ReqMyRoomMatchCCmd::default_instance_,
      ReqMyRoomMatchCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyRoomMatchCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyRoomMatchCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMyRoomMatchCCmd));
  ReqRoomListCCmd_descriptor_ = file->message_type(4);
  static const int ReqRoomListCCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomListCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomListCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomListCCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomListCCmd, roomids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomListCCmd, room_lists_),
  };
  ReqRoomListCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRoomListCCmd_descriptor_,
      ReqRoomListCCmd::default_instance_,
      ReqRoomListCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomListCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomListCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRoomListCCmd));
  ReqRoomDetailCCmd_descriptor_ = file->message_type(5);
  static const int ReqRoomDetailCCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomDetailCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomDetailCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomDetailCCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomDetailCCmd, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomDetailCCmd, datail_info_),
  };
  ReqRoomDetailCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRoomDetailCCmd_descriptor_,
      ReqRoomDetailCCmd::default_instance_,
      ReqRoomDetailCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomDetailCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomDetailCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRoomDetailCCmd));
  JoinRoomUser_descriptor_ = file->message_type(6);
  static const int JoinRoomUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomUser, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomUser, name_),
  };
  JoinRoomUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinRoomUser_descriptor_,
      JoinRoomUser::default_instance_,
      JoinRoomUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinRoomUser));
  TutorMatcher_descriptor_ = file->message_type(7);
  static const int TutorMatcher_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatcher, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatcher, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatcher, findtutor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatcher, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatcher, selfgender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatcher, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatcher, blackids_),
  };
  TutorMatcher_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TutorMatcher_descriptor_,
      TutorMatcher::default_instance_,
      TutorMatcher_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatcher, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatcher, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TutorMatcher));
  JoinRoomCCmd_descriptor_ = file->message_type(8);
  static const int JoinRoomCCmd_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomCCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomCCmd, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomCCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomCCmd, isquick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomCCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomCCmd, teammember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomCCmd, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomCCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomCCmd, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomCCmd, matcher_),
  };
  JoinRoomCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinRoomCCmd_descriptor_,
      JoinRoomCCmd::default_instance_,
      JoinRoomCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinRoomCCmd));
  LeaveRoomCCmd_descriptor_ = file->message_type(9);
  static const int LeaveRoomCCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomCCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomCCmd, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomCCmd, teamid_),
  };
  LeaveRoomCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveRoomCCmd_descriptor_,
      LeaveRoomCCmd::default_instance_,
      LeaveRoomCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveRoomCCmd));
  NtfRoomStateCCmd_descriptor_ = file->message_type(10);
  static const int NtfRoomStateCCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfRoomStateCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfRoomStateCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfRoomStateCCmd, pvp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfRoomStateCCmd, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfRoomStateCCmd, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfRoomStateCCmd, endtime_),
  };
  NtfRoomStateCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfRoomStateCCmd_descriptor_,
      NtfRoomStateCCmd::default_instance_,
      NtfRoomStateCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfRoomStateCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfRoomStateCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfRoomStateCCmd));
  NtfFightStatCCmd_descriptor_ = file->message_type(11);
  static const int NtfFightStatCCmd_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfFightStatCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfFightStatCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfFightStatCCmd, pvp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfFightStatCCmd, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfFightStatCCmd, player_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfFightStatCCmd, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfFightStatCCmd, my_teamscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfFightStatCCmd, enemy_teamscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfFightStatCCmd, remain_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfFightStatCCmd, myrank_),
  };
  NtfFightStatCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfFightStatCCmd_descriptor_,
      NtfFightStatCCmd::default_instance_,
      NtfFightStatCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfFightStatCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfFightStatCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfFightStatCCmd));
  JoinFightingCCmd_descriptor_ = file->message_type(12);
  static const int JoinFightingCCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFightingCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFightingCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFightingCCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFightingCCmd, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFightingCCmd, ret_),
  };
  JoinFightingCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinFightingCCmd_descriptor_,
      JoinFightingCCmd::default_instance_,
      JoinFightingCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFightingCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFightingCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinFightingCCmd));
  ComboNotifyCCmd_descriptor_ = file->message_type(13);
  static const int ComboNotifyCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComboNotifyCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComboNotifyCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComboNotifyCCmd, combonum_),
  };
  ComboNotifyCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComboNotifyCCmd_descriptor_,
      ComboNotifyCCmd::default_instance_,
      ComboNotifyCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComboNotifyCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComboNotifyCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComboNotifyCCmd));
  RevChallengeCCmd_descriptor_ = file->message_type(14);
  static const int RevChallengeCCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevChallengeCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevChallengeCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevChallengeCCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevChallengeCCmd, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevChallengeCCmd, challenger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevChallengeCCmd, challenger_zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevChallengeCCmd, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevChallengeCCmd, reply_),
  };
  RevChallengeCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RevChallengeCCmd_descriptor_,
      RevChallengeCCmd::default_instance_,
      RevChallengeCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevChallengeCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevChallengeCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RevChallengeCCmd));
  KickTeamCCmd_descriptor_ = file->message_type(15);
  static const int KickTeamCCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamCCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamCCmd, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamCCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamCCmd, teamid_),
  };
  KickTeamCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickTeamCCmd_descriptor_,
      KickTeamCCmd::default_instance_,
      KickTeamCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickTeamCCmd));
  FightConfirmCCmd_descriptor_ = file->message_type(16);
  static const int FightConfirmCCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightConfirmCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightConfirmCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightConfirmCCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightConfirmCCmd, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightConfirmCCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightConfirmCCmd, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightConfirmCCmd, challenger_),
  };
  FightConfirmCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightConfirmCCmd_descriptor_,
      FightConfirmCCmd::default_instance_,
      FightConfirmCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightConfirmCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightConfirmCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightConfirmCCmd));
  RankInfo_descriptor_ = file->message_type(17);
  static const int RankInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, name_),
  };
  RankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankInfo_descriptor_,
      RankInfo::default_instance_,
      RankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankInfo));
  RewardInfo_descriptor_ = file->message_type(18);
  static const int RewardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, count_),
  };
  RewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardInfo_descriptor_,
      RewardInfo::default_instance_,
      RewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardInfo));
  PvpResultCCmd_descriptor_ = file->message_type(19);
  static const int PvpResultCCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpResultCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpResultCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpResultCCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpResultCCmd, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpResultCCmd, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpResultCCmd, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpResultCCmd, apple_),
  };
  PvpResultCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpResultCCmd_descriptor_,
      PvpResultCCmd::default_instance_,
      PvpResultCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpResultCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpResultCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpResultCCmd));
  MatchTeamMemUpdateInfo_descriptor_ = file->message_type(20);
  static const int MatchTeamMemUpdateInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemUpdateInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemUpdateInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemUpdateInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemUpdateInfo, isfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemUpdateInfo, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemUpdateInfo, deletes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemUpdateInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemUpdateInfo, teamname_),
  };
  MatchTeamMemUpdateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchTeamMemUpdateInfo_descriptor_,
      MatchTeamMemUpdateInfo::default_instance_,
      MatchTeamMemUpdateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemUpdateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemUpdateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchTeamMemUpdateInfo));
  PvpTeamMemberUpdateCCmd_descriptor_ = file->message_type(21);
  static const int PvpTeamMemberUpdateCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpTeamMemberUpdateCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpTeamMemberUpdateCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpTeamMemberUpdateCCmd, data_),
  };
  PvpTeamMemberUpdateCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpTeamMemberUpdateCCmd_descriptor_,
      PvpTeamMemberUpdateCCmd::default_instance_,
      PvpTeamMemberUpdateCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpTeamMemberUpdateCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpTeamMemberUpdateCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpTeamMemberUpdateCCmd));
  MatchTeamMemDataUpdateInfo_descriptor_ = file->message_type(22);
  static const int MatchTeamMemDataUpdateInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemDataUpdateInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemDataUpdateInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemDataUpdateInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemDataUpdateInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemDataUpdateInfo, members_),
  };
  MatchTeamMemDataUpdateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchTeamMemDataUpdateInfo_descriptor_,
      MatchTeamMemDataUpdateInfo::default_instance_,
      MatchTeamMemDataUpdateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemDataUpdateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTeamMemDataUpdateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchTeamMemDataUpdateInfo));
  PvpMemberDataUpdateCCmd_descriptor_ = file->message_type(23);
  static const int PvpMemberDataUpdateCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMemberDataUpdateCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMemberDataUpdateCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMemberDataUpdateCCmd, data_),
  };
  PvpMemberDataUpdateCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpMemberDataUpdateCCmd_descriptor_,
      PvpMemberDataUpdateCCmd::default_instance_,
      PvpMemberDataUpdateCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMemberDataUpdateCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMemberDataUpdateCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpMemberDataUpdateCCmd));
  NtfMatchInfoCCmd_descriptor_ = file->message_type(24);
  static const int NtfMatchInfoCCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMatchInfoCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMatchInfoCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMatchInfoCCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMatchInfoCCmd, ismatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMatchInfoCCmd, isfight_),
  };
  NtfMatchInfoCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfMatchInfoCCmd_descriptor_,
      NtfMatchInfoCCmd::default_instance_,
      NtfMatchInfoCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMatchInfoCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfMatchInfoCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfMatchInfoCCmd));
  GodEndTimeCCmd_descriptor_ = file->message_type(25);
  static const int GodEndTimeCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEndTimeCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEndTimeCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEndTimeCCmd, endtime_),
  };
  GodEndTimeCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEndTimeCCmd_descriptor_,
      GodEndTimeCCmd::default_instance_,
      GodEndTimeCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEndTimeCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEndTimeCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEndTimeCCmd));
  RankNameInfo_descriptor_ = file->message_type(26);
  static const int RankNameInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankNameInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankNameInfo, apple_),
  };
  RankNameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankNameInfo_descriptor_,
      RankNameInfo::default_instance_,
      RankNameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankNameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankNameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankNameInfo));
  NtfRankChangeCCmd_descriptor_ = file->message_type(27);
  static const int NtfRankChangeCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfRankChangeCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfRankChangeCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfRankChangeCCmd, ranks_),
  };
  NtfRankChangeCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfRankChangeCCmd_descriptor_,
      NtfRankChangeCCmd::default_instance_,
      NtfRankChangeCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfRankChangeCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfRankChangeCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfRankChangeCCmd));
  OpenGlobalShopPanelCCmd_descriptor_ = file->message_type(28);
  static const int OpenGlobalShopPanelCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGlobalShopPanelCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGlobalShopPanelCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGlobalShopPanelCCmd, open_),
  };
  OpenGlobalShopPanelCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenGlobalShopPanelCCmd_descriptor_,
      OpenGlobalShopPanelCCmd::default_instance_,
      OpenGlobalShopPanelCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGlobalShopPanelCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGlobalShopPanelCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenGlobalShopPanelCCmd));
  TutorMatchResultNtfMatchCCmd_descriptor_ = file->message_type(29);
  static const int TutorMatchResultNtfMatchCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatchResultNtfMatchCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatchResultNtfMatchCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatchResultNtfMatchCCmd, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatchResultNtfMatchCCmd, status_),
  };
  TutorMatchResultNtfMatchCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TutorMatchResultNtfMatchCCmd_descriptor_,
      TutorMatchResultNtfMatchCCmd::default_instance_,
      TutorMatchResultNtfMatchCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatchResultNtfMatchCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatchResultNtfMatchCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TutorMatchResultNtfMatchCCmd));
  TutorMatchResponseMatchCCmd_descriptor_ = file->message_type(30);
  static const int TutorMatchResponseMatchCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatchResponseMatchCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatchResponseMatchCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatchResponseMatchCCmd, status_),
  };
  TutorMatchResponseMatchCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TutorMatchResponseMatchCCmd_descriptor_,
      TutorMatchResponseMatchCCmd::default_instance_,
      TutorMatchResponseMatchCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatchResponseMatchCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorMatchResponseMatchCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TutorMatchResponseMatchCCmd));
  TeamPwsPreInfo_descriptor_ = file->message_type(31);
  static const int TeamPwsPreInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsPreInfo, charids_),
  };
  TeamPwsPreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPwsPreInfo_descriptor_,
      TeamPwsPreInfo::default_instance_,
      TeamPwsPreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsPreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsPreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPwsPreInfo));
  TeamPwsPreInfoMatchCCmd_descriptor_ = file->message_type(32);
  static const int TeamPwsPreInfoMatchCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsPreInfoMatchCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsPreInfoMatchCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsPreInfoMatchCCmd, teaminfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsPreInfoMatchCCmd, etype_),
  };
  TeamPwsPreInfoMatchCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPwsPreInfoMatchCCmd_descriptor_,
      TeamPwsPreInfoMatchCCmd::default_instance_,
      TeamPwsPreInfoMatchCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsPreInfoMatchCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsPreInfoMatchCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPwsPreInfoMatchCCmd));
  UpdatePreInfoMatchCCmd_descriptor_ = file->message_type(33);
  static const int UpdatePreInfoMatchCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePreInfoMatchCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePreInfoMatchCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePreInfoMatchCCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePreInfoMatchCCmd, etype_),
  };
  UpdatePreInfoMatchCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatePreInfoMatchCCmd_descriptor_,
      UpdatePreInfoMatchCCmd::default_instance_,
      UpdatePreInfoMatchCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePreInfoMatchCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePreInfoMatchCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatePreInfoMatchCCmd));
  TeamPwsRankInfo_descriptor_ = file->message_type(34);
  static const int TeamPwsRankInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRankInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRankInfo, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRankInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRankInfo, erank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRankInfo, profession_),
  };
  TeamPwsRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPwsRankInfo_descriptor_,
      TeamPwsRankInfo::default_instance_,
      TeamPwsRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPwsRankInfo));
  QueryTeamPwsRankMatchCCmd_descriptor_ = file->message_type(35);
  static const int QueryTeamPwsRankMatchCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsRankMatchCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsRankMatchCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsRankMatchCCmd, rankinfo_),
  };
  QueryTeamPwsRankMatchCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryTeamPwsRankMatchCCmd_descriptor_,
      QueryTeamPwsRankMatchCCmd::default_instance_,
      QueryTeamPwsRankMatchCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsRankMatchCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsRankMatchCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryTeamPwsRankMatchCCmd));
  TeamPwsUserInfo_descriptor_ = file->message_type(36);
  static const int TeamPwsUserInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsUserInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsUserInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsUserInfo, erank_),
  };
  TeamPwsUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPwsUserInfo_descriptor_,
      TeamPwsUserInfo::default_instance_,
      TeamPwsUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPwsUserInfo));
  QueryTeamPwsTeamInfoMatchCCmd_descriptor_ = file->message_type(37);
  static const int QueryTeamPwsTeamInfoMatchCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsTeamInfoMatchCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsTeamInfoMatchCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsTeamInfoMatchCCmd, userinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsTeamInfoMatchCCmd, myrank_),
  };
  QueryTeamPwsTeamInfoMatchCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryTeamPwsTeamInfoMatchCCmd_descriptor_,
      QueryTeamPwsTeamInfoMatchCCmd::default_instance_,
      QueryTeamPwsTeamInfoMatchCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsTeamInfoMatchCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsTeamInfoMatchCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryTeamPwsTeamInfoMatchCCmd));
  MatchCParam_descriptor_ = file->enum_type(0);
  EPvpType_descriptor_ = file->enum_type(1);
  ERoomState_descriptor_ = file->enum_type(2);
  EPvpResult_descriptor_ = file->enum_type(3);
  EMatchReply_descriptor_ = file->enum_type(4);
  ETutorMatch_descriptor_ = file->enum_type(5);
  ETeamPwsRank_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MatchCCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchTeamData_descriptor_, &MatchTeamData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomDetailInfo_descriptor_, &RoomDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomBriefInfo_descriptor_, &RoomBriefInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMyRoomMatchCCmd_descriptor_, &ReqMyRoomMatchCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRoomListCCmd_descriptor_, &ReqRoomListCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRoomDetailCCmd_descriptor_, &ReqRoomDetailCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinRoomUser_descriptor_, &JoinRoomUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TutorMatcher_descriptor_, &TutorMatcher::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinRoomCCmd_descriptor_, &JoinRoomCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveRoomCCmd_descriptor_, &LeaveRoomCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfRoomStateCCmd_descriptor_, &NtfRoomStateCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfFightStatCCmd_descriptor_, &NtfFightStatCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinFightingCCmd_descriptor_, &JoinFightingCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComboNotifyCCmd_descriptor_, &ComboNotifyCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RevChallengeCCmd_descriptor_, &RevChallengeCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickTeamCCmd_descriptor_, &KickTeamCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightConfirmCCmd_descriptor_, &FightConfirmCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankInfo_descriptor_, &RankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardInfo_descriptor_, &RewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpResultCCmd_descriptor_, &PvpResultCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchTeamMemUpdateInfo_descriptor_, &MatchTeamMemUpdateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpTeamMemberUpdateCCmd_descriptor_, &PvpTeamMemberUpdateCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchTeamMemDataUpdateInfo_descriptor_, &MatchTeamMemDataUpdateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpMemberDataUpdateCCmd_descriptor_, &PvpMemberDataUpdateCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfMatchInfoCCmd_descriptor_, &NtfMatchInfoCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEndTimeCCmd_descriptor_, &GodEndTimeCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankNameInfo_descriptor_, &RankNameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfRankChangeCCmd_descriptor_, &NtfRankChangeCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenGlobalShopPanelCCmd_descriptor_, &OpenGlobalShopPanelCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TutorMatchResultNtfMatchCCmd_descriptor_, &TutorMatchResultNtfMatchCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TutorMatchResponseMatchCCmd_descriptor_, &TutorMatchResponseMatchCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPwsPreInfo_descriptor_, &TeamPwsPreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPwsPreInfoMatchCCmd_descriptor_, &TeamPwsPreInfoMatchCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatePreInfoMatchCCmd_descriptor_, &UpdatePreInfoMatchCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPwsRankInfo_descriptor_, &TeamPwsRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryTeamPwsRankMatchCCmd_descriptor_, &QueryTeamPwsRankMatchCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPwsUserInfo_descriptor_, &TeamPwsUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryTeamPwsTeamInfoMatchCCmd_descriptor_, &QueryTeamPwsTeamInfoMatchCCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MatchCCmd_2eproto() {
  delete MatchTeamData::default_instance_;
  delete MatchTeamData_reflection_;
  delete RoomDetailInfo::default_instance_;
  delete RoomDetailInfo_reflection_;
  delete RoomBriefInfo::default_instance_;
  delete RoomBriefInfo_reflection_;
  delete ReqMyRoomMatchCCmd::default_instance_;
  delete ReqMyRoomMatchCCmd_reflection_;
  delete ReqRoomListCCmd::default_instance_;
  delete ReqRoomListCCmd_reflection_;
  delete ReqRoomDetailCCmd::default_instance_;
  delete ReqRoomDetailCCmd_reflection_;
  delete JoinRoomUser::default_instance_;
  delete JoinRoomUser_reflection_;
  delete TutorMatcher::default_instance_;
  delete TutorMatcher_reflection_;
  delete JoinRoomCCmd::default_instance_;
  delete JoinRoomCCmd_reflection_;
  delete LeaveRoomCCmd::default_instance_;
  delete LeaveRoomCCmd_reflection_;
  delete NtfRoomStateCCmd::default_instance_;
  delete NtfRoomStateCCmd_reflection_;
  delete NtfFightStatCCmd::default_instance_;
  delete NtfFightStatCCmd_reflection_;
  delete JoinFightingCCmd::default_instance_;
  delete JoinFightingCCmd_reflection_;
  delete ComboNotifyCCmd::default_instance_;
  delete ComboNotifyCCmd_reflection_;
  delete RevChallengeCCmd::default_instance_;
  delete RevChallengeCCmd_reflection_;
  delete KickTeamCCmd::default_instance_;
  delete KickTeamCCmd_reflection_;
  delete FightConfirmCCmd::default_instance_;
  delete FightConfirmCCmd_reflection_;
  delete RankInfo::default_instance_;
  delete RankInfo_reflection_;
  delete RewardInfo::default_instance_;
  delete RewardInfo_reflection_;
  delete PvpResultCCmd::default_instance_;
  delete PvpResultCCmd_reflection_;
  delete MatchTeamMemUpdateInfo::default_instance_;
  delete MatchTeamMemUpdateInfo_reflection_;
  delete PvpTeamMemberUpdateCCmd::default_instance_;
  delete PvpTeamMemberUpdateCCmd_reflection_;
  delete MatchTeamMemDataUpdateInfo::default_instance_;
  delete MatchTeamMemDataUpdateInfo_reflection_;
  delete PvpMemberDataUpdateCCmd::default_instance_;
  delete PvpMemberDataUpdateCCmd_reflection_;
  delete NtfMatchInfoCCmd::default_instance_;
  delete NtfMatchInfoCCmd_reflection_;
  delete GodEndTimeCCmd::default_instance_;
  delete GodEndTimeCCmd_reflection_;
  delete RankNameInfo::default_instance_;
  delete RankNameInfo_reflection_;
  delete NtfRankChangeCCmd::default_instance_;
  delete NtfRankChangeCCmd_reflection_;
  delete OpenGlobalShopPanelCCmd::default_instance_;
  delete OpenGlobalShopPanelCCmd_reflection_;
  delete TutorMatchResultNtfMatchCCmd::default_instance_;
  delete TutorMatchResultNtfMatchCCmd_reflection_;
  delete TutorMatchResponseMatchCCmd::default_instance_;
  delete TutorMatchResponseMatchCCmd_reflection_;
  delete TeamPwsPreInfo::default_instance_;
  delete TeamPwsPreInfo_reflection_;
  delete TeamPwsPreInfoMatchCCmd::default_instance_;
  delete TeamPwsPreInfoMatchCCmd_reflection_;
  delete UpdatePreInfoMatchCCmd::default_instance_;
  delete UpdatePreInfoMatchCCmd_reflection_;
  delete TeamPwsRankInfo::default_instance_;
  delete TeamPwsRankInfo_reflection_;
  delete QueryTeamPwsRankMatchCCmd::default_instance_;
  delete QueryTeamPwsRankMatchCCmd_reflection_;
  delete TeamPwsUserInfo::default_instance_;
  delete TeamPwsUserInfo_reflection_;
  delete QueryTeamPwsTeamInfoMatchCCmd::default_instance_;
  delete QueryTeamPwsTeamInfoMatchCCmd_reflection_;
}

void protobuf_AddDesc_MatchCCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SessionTeam_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017MatchCCmd.proto\022\003Cmd\032\nxCmd.proto\032\021Sess"
    "ionTeam.proto\032\021ProtoCommon.proto\032\017SceneU"
    "ser.proto\"t\n\rMatchTeamData\022\021\n\006teamid\030\001 \001"
    "(\004:\0010\022\021\n\006zoneid\030\010 \001(\r:\0010\022\014\n\004name\030\002 \001(\t\022\r"
    "\n\005index\030\003 \001(\r\022 \n\007members\030\004 \003(\0132\017.Cmd.Tea"
    "mMember\"\223\001\n\016RoomDetailInfo\022\033\n\004type\030\001 \001(\016"
    "2\r.Cmd.EPvpType\022\036\n\005state\030\002 \001(\0162\017.Cmd.ERo"
    "omState\022\016\n\006roomid\030\003 \001(\004\022\014\n\004name\030\004 \001(\t\022&\n"
    "\nteam_datas\030\005 \003(\0132\022.Cmd.MatchTeamData\"\310\001"
    "\n\rRoomBriefInfo\022\033\n\004type\030\001 \001(\0162\r.Cmd.EPvp"
    "Type\022\036\n\005state\030\002 \001(\0162\017.Cmd.ERoomState\022\016\n\006"
    "roomid\030\003 \001(\004\022\014\n\004name\030\004 \001(\t\022\016\n\006raidid\030\005 \001"
    "(\r\022\022\n\nplayer_num\030\006 \001(\r\022\014\n\004num1\030\007 \001(\r\022\014\n\004"
    "num2\030\010 \001(\r\022\014\n\004num3\030\t \001(\r\022\016\n\006zoneid\030\n \001(\r"
    "\"\277\001\n\022ReqMyRoomMatchCCmd\022*\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\017MATCHC_PROTOCMD\0228\n\005param\030\002 \001"
    "(\0162\020.Cmd.MatchCParam:\027MATCHCPARAM_REQ_MY"
    "_ROOM\022\033\n\004type\030\003 \001(\0162\r.Cmd.EPvpType\022&\n\nbr"
    "ief_info\030\004 \001(\0132\022.Cmd.RoomBriefInfo\"\317\001\n\017R"
    "eqRoomListCCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\017MATCHC_PROTOCMD\022:\n\005param\030\002 \001(\0162\020.Cmd."
    "MatchCParam:\031MATCHCPARAM_REQ_ROOM_LIST\022\033"
    "\n\004type\030\003 \001(\0162\r.Cmd.EPvpType\022\017\n\007roomids\030\004"
    " \003(\004\022&\n\nroom_lists\030\005 \003(\0132\022.Cmd.RoomBrief"
    "Info\"\324\001\n\021ReqRoomDetailCCmd\022*\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\017MATCHC_PROTOCMD\022<\n\005param\030"
    "\002 \001(\0162\020.Cmd.MatchCParam:\033MATCHCPARAM_REQ"
    "_ROOM_DETAIL\022\033\n\004type\030\003 \001(\0162\r.Cmd.EPvpTyp"
    "e\022\016\n\006roomid\030\004 \001(\004\022(\n\013datail_info\030\005 \001(\0132\023"
    ".Cmd.RoomDetailInfo\",\n\014JoinRoomUser\022\016\n\006c"
    "harid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\"\330\001\n\014TutorMatch"
    "er\022\021\n\006charid\030\001 \001(\004:\0010\022\021\n\006zoneid\030\002 \001(\r:\0010"
    "\022\030\n\tfindtutor\030\003 \001(\010:\005false\022)\n\006gender\030\004 \001"
    "(\0162\014.Cmd.EGender:\013EGENDER_MIN\022-\n\nselfgen"
    "der\030\005 \001(\0162\014.Cmd.EGender:\013EGENDER_MIN\022\034\n\005"
    "datas\030\006 \003(\0132\r.Cmd.UserData\022\020\n\010blackids\030\007"
    " \003(\004\"\306\002\n\014JoinRoomCCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\017MATCHC_PROTOCMD\0226\n\005param\030\002 \001(\016"
    "2\020.Cmd.MatchCParam:\025MATCHCPARAM_JOIN_ROO"
    "M\022\033\n\004type\030\003 \001(\0162\r.Cmd.EPvpType\022\016\n\006roomid"
    "\030\004 \001(\004\022\014\n\004name\030\005 \001(\t\022\017\n\007isquick\030\006 \001(\010\022\016\n"
    "\006teamid\030\007 \001(\004\022\022\n\nteammember\030\010 \003(\004\022\013\n\003ret"
    "\030\t \001(\010\022\017\n\007guildid\030\n \001(\004\022 \n\005users\030\013 \003(\0132\021"
    ".Cmd.JoinRoomUser\022\"\n\007matcher\030\014 \001(\0132\021.Cmd"
    ".TutorMatcher\"\264\001\n\rLeaveRoomCCmd\022*\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\017MATCHC_PROTOCMD\0227\n\005p"
    "aram\030\002 \001(\0162\020.Cmd.MatchCParam:\026MATCHCPARA"
    "M_LEAVE_ROOM\022\033\n\004type\030\003 \001(\0162\r.Cmd.EPvpTyp"
    "e\022\016\n\006roomid\030\004 \001(\004\022\021\n\006teamid\030\005 \001(\004:\0010\"\335\001\n"
    "\020NtfRoomStateCCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\017MATCHC_PROTOCMD\022;\n\005param\030\002 \001(\0162\020.C"
    "md.MatchCParam:\032MATCHCPARAM_NTF_ROOM_STA"
    "TE\022\037\n\010pvp_type\030\003 \001(\0162\r.Cmd.EPvpType\022\016\n\006r"
    "oomid\030\004 \001(\004\022\036\n\005state\030\005 \001(\0162\017.Cmd.ERoomSt"
    "ate\022\017\n\007endtime\030\006 \001(\r\"\250\002\n\020NtfFightStatCCm"
    "d\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHC_PRO"
    "TOCMD\022\?\n\005param\030\002 \001(\0162\020.Cmd.MatchCParam:\036"
    "MATCHCPARAM_NTF_FIGHTING_STATE\022\037\n\010pvp_ty"
    "pe\030\003 \001(\0162\r.Cmd.EPvpType\022\021\n\tstarttime\030\004 \001"
    "(\r\022\022\n\nplayer_num\030\005 \001(\r\022\r\n\005score\030\006 \001(\004\022\024\n"
    "\014my_teamscore\030\n \001(\004\022\027\n\017enemy_teamscore\030\013"
    " \001(\004\022\021\n\tremain_hp\030\017 \001(\r\022\016\n\006myrank\030\020 \001(\r\""
    "\264\001\n\020JoinFightingCCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\017MATCHC_PROTOCMD\022:\n\005param\030\002 \001(\0162"
    "\020.Cmd.MatchCParam:\031MATCHCPARAM_JOIN_FIGH"
    "TING\022\033\n\004type\030\003 \001(\0162\r.Cmd.EPvpType\022\016\n\006roo"
    "mid\030\004 \001(\004\022\013\n\003ret\030\005 \001(\010\"\210\001\n\017ComboNotifyCC"
    "md\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHC_PR"
    "OTOCMD\0227\n\005param\030\002 \001(\0162\020.Cmd.MatchCParam:"
    "\026MATCHCPARAM_COMBO_KILL\022\020\n\010comboNum\030\003 \001("
    "\r\"\231\002\n\020RevChallengeCCmd\022*\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\017MATCHC_PROTOCMD\022:\n\005param\030\002 \001("
    "\0162\020.Cmd.MatchCParam:\031MATCHCPARAM_REV_CHA"
    "LLENGE\022\033\n\004type\030\003 \001(\0162\r.Cmd.EPvpType\022\016\n\006r"
    "oomid\030\004 \001(\004\022\022\n\nchallenger\030\005 \001(\t\022\031\n\021chall"
    "enger_zoneid\030\006 \001(\r\022 \n\007members\030\007 \003(\0132\017.Cm"
    "d.TeamMember\022\037\n\005reply\030\010 \001(\0162\020.Cmd.EMatch"
    "Reply\"\277\001\n\014KickTeamCCmd\022*\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\017MATCHC_PROTOCMD\0226\n\005param\030\002 \001("
    "\0162\020.Cmd.MatchCParam:\025MATCHCPARAM_KICK_TE"
    "AM\022\033\n\004type\030\003 \001(\0162\r.Cmd.EPvpType\022\016\n\006roomi"
    "d\030\004 \001(\004\022\016\n\006zoneid\030\005 \001(\004\022\016\n\006teamid\030\006 \001(\004\""
    "\354\001\n\020FightConfirmCCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\017MATCHC_PROTOCMD\022:\n\005param\030\002 \001(\0162"
    "\020.Cmd.MatchCParam:\031MATCHCPARAM_FIGHT_CON"
    "FIRM\022\033\n\004type\030\003 \001(\0162\r.Cmd.EPvpType\022\016\n\006roo"
    "mid\030\004 \001(\004\022\016\n\006teamid\030\005 \001(\004\022\037\n\005reply\030\006 \001(\016"
    "2\020.Cmd.EMatchReply\022\022\n\nchallenger\030\007 \001(\t\"E"
    "\n\010RankInfo\022\016\n\006charid\030\001 \001(\004\022\r\n\005index\030\002 \001("
    "\r\022\014\n\004rank\030\003 \001(\r\022\014\n\004name\030\004 \001(\t\"+\n\nRewardI"
    "nfo\022\016\n\006itemid\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"\377\001\n\rP"
    "vpResultCCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\017MATCHC_PROTOCMD\0227\n\005param\030\002 \001(\0162\020.Cmd.Ma"
    "tchCParam:\026MATCHCPARAM_PVP_RESULT\022\033\n\004typ"
    "e\030\003 \002(\0162\r.Cmd.EPvpType\022\037\n\006result\030\004 \002(\0162\017"
    ".Cmd.EPvpResult\022\033\n\004rank\030\005 \003(\0132\r.Cmd.Rank"
    "Info\022\037\n\006reward\030\006 \003(\0132\017.Cmd.RewardInfo\022\r\n"
    "\005apple\030\007 \001(\r\"\255\001\n\026MatchTeamMemUpdateInfo\022"
    "\016\n\006zoneid\030\003 \001(\r\022\016\n\006teamid\030\004 \001(\004\022\016\n\006roomi"
    "d\030\005 \001(\004\022\017\n\007isfirst\030\006 \001(\010\022 \n\007updates\030\007 \003("
    "\0132\017.Cmd.TeamMember\022\017\n\007deletes\030\010 \003(\004\022\r\n\005i"
    "ndex\030\t \001(\r\022\020\n\010teamname\030\n \001(\t\"\257\001\n\027PvpTeam"
    "MemberUpdateCCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\017MATCHC_PROTOCMD\022=\n\005param\030\002 \001(\0162\020.Cm"
    "d.MatchCParam:\034MATCHCPARAM_PVP_MEMBERUPD"
    "ATE\022)\n\004data\030\003 \001(\0132\033.Cmd.MatchTeamMemUpda"
    "teInfo\"~\n\032MatchTeamMemDataUpdateInfo\022\016\n\006"
    "zoneid\030\003 \001(\r\022\016\n\006teamid\030\004 \001(\004\022\016\n\006charid\030\005"
    " \001(\004\022\016\n\006roomid\030\006 \001(\004\022 \n\007members\030\007 \003(\0132\017."
    "Cmd.MemberData\"\267\001\n\027PvpMemberDataUpdateCC"
    "md\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHC_PR"
    "OTOCMD\022A\n\005param\030\002 \001(\0162\020.Cmd.MatchCParam:"
    " MATCHCPARAM_PVP_MEMBERDATAUPDATE\022-\n\004dat"
    "a\030\003 \001(\0132\037.Cmd.MatchTeamMemDataUpdateInfo"
    "\"\330\001\n\020NtfMatchInfoCCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\017MATCHC_PROTOCMD\022:\n\005param\030\002 \001(\016"
    "2\020.Cmd.MatchCParam:\031MATCHCPARAM_NTF_MATC"
    "HINFO\022,\n\005etype\030\003 \001(\0162\r.Cmd.EPvpType:\016EPV"
    "PTYPE_POLLY\022\026\n\007ismatch\030\004 \001(\010:\005false\022\026\n\007i"
    "sfight\030\005 \001(\010:\005false\"\207\001\n\016GodEndTimeCCmd\022*"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHC_PROTOC"
    "MD\0228\n\005param\030\002 \001(\0162\020.Cmd.MatchCParam:\027MAT"
    "CHCPARAM_GOD_ENDTIME\022\017\n\007endtime\030\003 \001(\r\"+\n"
    "\014RankNameInfo\022\014\n\004name\030\001 \001(\t\022\r\n\005apple\030\002 \001"
    "(\r\"\237\001\n\021NtfRankChangeCCmd\022*\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\017MATCHC_PROTOCMD\022<\n\005param\030\002 "
    "\001(\0162\020.Cmd.MatchCParam:\033MATCHCPARAM_NTF_R"
    "ANK_CHANGE\022 \n\005ranks\030\003 \003(\0132\021.Cmd.RankName"
    "Info\"\230\001\n\027OpenGlobalShopPanelCCmd\022*\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\017MATCHC_PROTOCMD\022C\n\005"
    "param\030\002 \001(\0162\020.Cmd.MatchCParam:\"MATCHCPAR"
    "AM_OPEN_GLOBAL_SHOP_PANEL\022\014\n\004open\030\003 \001(\010\""
    "\335\001\n\034TutorMatchResultNtfMatchCCmd\022*\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\017MATCHC_PROTOCMD\022;\n\005"
    "param\030\002 \001(\0162\020.Cmd.MatchCParam:\032MATCHCPAR"
    "AM_TUTOR_MATCHNTF\022!\n\006target\030\003 \001(\0132\021.Cmd."
    "TutorMatcher\0221\n\006status\030\004 \001(\0162\020.Cmd.ETuto"
    "rMatch:\017ETUTORMATCH_MIN\"\276\001\n\033TutorMatchRe"
    "sponseMatchCCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\017MATCHC_PROTOCMD\022@\n\005param\030\002 \001(\0162\020.Cmd"
    ".MatchCParam:\037MATCHCPARAM_TUTOR_MATCHRES"
    "PONSE\0221\n\006status\030\003 \001(\0162\020.Cmd.ETutorMatch:"
    "\017ETUTORMATCH_MIN\"!\n\016TeamPwsPreInfo\022\017\n\007ch"
    "arids\030\001 \003(\004\"\340\001\n\027TeamPwsPreInfoMatchCCmd\022"
    "*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHC_PROTO"
    "CMD\022A\n\005param\030\002 \001(\0162\020.Cmd.MatchCParam: MA"
    "TCHCPARAM_TEAMPWS_PREPARE_LIST\022&\n\tteamin"
    "fos\030\003 \003(\0132\023.Cmd.TeamPwsPreInfo\022.\n\005etype\030"
    "\004 \001(\0162\r.Cmd.EPvpType:\020EPVPTYPE_TEAMPWS\"\310"
    "\001\n\026UpdatePreInfoMatchCCmd\022*\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\017MATCHC_PROTOCMD\022C\n\005param\030\002"
    " \001(\0162\020.Cmd.MatchCParam:\"MATCHCPARAM_TEAM"
    "PWS_PREPARE_UPDATE\022\021\n\006charid\030\003 \001(\004:\0010\022*\n"
    "\005etype\030\004 \001(\0162\r.Cmd.EPvpType:\014EPVPTYPE_MI"
    "N\"\255\001\n\017TeamPwsRankInfo\022\014\n\004name\030\001 \001(\t\022\'\n\010p"
    "ortrait\030\002 \001(\0132\025.Cmd.UserPortraitData\022\014\n\004"
    "rank\030\003 \001(\r\022\r\n\005score\030\004 \001(\r\022 \n\005erank\030\005 \001(\016"
    "2\021.Cmd.ETeamPwsRank\022$\n\nprofession\030\006 \001(\0162"
    "\020.Cmd.EProfession\"\260\001\n\031QueryTeamPwsRankMa"
    "tchCCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATC"
    "HC_PROTOCMD\022\?\n\005param\030\002 \001(\0162\020.Cmd.MatchCP"
    "aram:\036MATCHCPARAM_TEAMPWS_QUERY_RANK\022&\n\010"
    "rankinfo\030\003 \003(\0132\024.Cmd.TeamPwsRankInfo\"h\n\017"
    "TeamPwsUserInfo\022\016\n\006charid\030\001 \001(\004\022\020\n\005score"
    "\030\002 \001(\r:\0010\0223\n\005erank\030\003 \001(\0162\021.Cmd.ETeamPwsR"
    "ank:\021ETEAMPWSRANK_NONE\"\314\001\n\035QueryTeamPwsT"
    "eamInfoMatchCCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\017MATCHC_PROTOCMD\022C\n\005param\030\002 \001(\0162\020.Cm"
    "d.MatchCParam:\"MATCHCPARAM_TEAMPWS_QUERY"
    "_TEAMINFO\022\'\n\tuserinfos\030\003 \003(\0132\024.Cmd.TeamP"
    "wsUserInfo\022\021\n\006myrank\030\004 \001(\r:\0010*\301\006\n\013MatchC"
    "Param\022\033\n\027MATCHCPARAM_REQ_MY_ROOM\020\001\022\035\n\031MA"
    "TCHCPARAM_REQ_ROOM_LIST\020\002\022\037\n\033MATCHCPARAM"
    "_REQ_ROOM_DETAIL\020\003\022\031\n\025MATCHCPARAM_JOIN_R"
    "OOM\020\004\022\032\n\026MATCHCPARAM_LEAVE_ROOM\020\005\022\036\n\032MAT"
    "CHCPARAM_NTF_ROOM_STATE\020\007\022\"\n\036MATCHCPARAM"
    "_NTF_FIGHTING_STATE\020\010\022\035\n\031MATCHCPARAM_JOI"
    "N_FIGHTING\020\t\022\032\n\026MATCHCPARAM_COMBO_KILL\020\n"
    "\022\035\n\031MATCHCPARAM_REV_CHALLENGE\020\013\022\031\n\025MATCH"
    "CPARAM_KICK_TEAM\020\014\022\035\n\031MATCHCPARAM_FIGHT_"
    "CONFIRM\020\r\022\032\n\026MATCHCPARAM_PVP_RESULT\020\016\022 \n"
    "\034MATCHCPARAM_PVP_MEMBERUPDATE\020\017\022$\n MATCH"
    "CPARAM_PVP_MEMBERDATAUPDATE\020\020\022\035\n\031MATCHCP"
    "ARAM_NTF_MATCHINFO\020\021\022\033\n\027MATCHCPARAM_GOD_"
    "ENDTIME\020\022\022\037\n\033MATCHCPARAM_NTF_RANK_CHANGE"
    "\020\023\022&\n\"MATCHCPARAM_OPEN_GLOBAL_SHOP_PANEL"
    "\020\024\022\036\n\032MATCHCPARAM_TUTOR_MATCHNTF\020\025\022#\n\037MA"
    "TCHCPARAM_TUTOR_MATCHRESPONSE\020\026\022$\n MATCH"
    "CPARAM_TEAMPWS_PREPARE_LIST\020\027\022&\n\"MATCHCP"
    "ARAM_TEAMPWS_PREPARE_UPDATE\020\030\022\"\n\036MATCHCP"
    "ARAM_TEAMPWS_QUERY_RANK\020\031\022&\n\"MATCHCPARAM"
    "_TEAMPWS_QUERY_TEAMINFO\020\032*\324\001\n\010EPvpType\022\020"
    "\n\014EPVPTYPE_MIN\020\000\022\020\n\014EPVPTYPE_LLH\020\001\022\021\n\rEP"
    "VPTYPE_SMZL\020\002\022\021\n\rEPVPTYPE_HLJS\020\003\022\022\n\016EPVP"
    "TYPE_POLLY\020\004\022\020\n\014EPVPTYPE_MVP\020\005\022\022\n\016EPVPTY"
    "PE_SUGVG\020\006\022\022\n\016EPVPTYPE_TUTOR\020\007\022\024\n\020EPVPTY"
    "PE_TEAMPWS\020\010\022\032\n\026EPVPTYPE_TEAMPWS_RELAX\020\t"
    "*\221\001\n\nERoomState\022\030\n\024EROOMSTATE_WAIT_JOIN\020"
    "\001\022\034\n\030EROOMSTATE_MATCH_SUCCESS\020\002\022\036\n\032EROOM"
    "STATE_READY_FOR_FIGHT\020\003\022\027\n\023EROOMSTATE_FI"
    "GHTING\020\004\022\022\n\016EROOMSTATE_END\020\005*a\n\nEPvpResu"
    "lt\022\022\n\016EPVPRESULT_MIN\020\000\022\026\n\022EPVPRESULT_SUC"
    "CESS\020\001\022\023\n\017EPVPRESULT_FAIL\020\002\022\022\n\016EPVPRESUL"
    "T_TIE\020\003*<\n\013EMatchReply\022\025\n\021EMATCHREPLY_AG"
    "REE\020\001\022\026\n\022EMATCHREPLY_REFUSE\020\002*\303\001\n\013ETutor"
    "Match\022\023\n\017ETUTORMATCH_MIN\020\000\022\025\n\021ETUTORMATC"
    "H_START\020\001\022\025\n\021ETUTORMATCH_MATCH\020\002\022\025\n\021ETUT"
    "ORMATCH_AGREE\020\003\022\026\n\022ETUTORMATCH_REFUSE\020\004\022"
    "\024\n\020ETUTORMATCH_STOP\020\005\022\027\n\023ETUTORMATCH_RES"
    "TART\020\006\022\023\n\017ETUTORMATCH_MAX\020\007*\211\001\n\014ETeamPws"
    "Rank\022\032\n\026ETEAMPWSRANK_EXCELLENT\020\001\022\026\n\022ETEA"
    "MPWSRANK_SUPER\020\002\022\025\n\021ETEAMPWSRANK_GOOD\020\003\022"
    "\027\n\023ETEAMPWSRANK_NORMAL\020\004\022\025\n\021ETEAMPWSRANK"
    "_NONE\020\005", 8527);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MatchCCmd.proto", &protobuf_RegisterTypes);
  MatchTeamData::default_instance_ = new MatchTeamData();
  RoomDetailInfo::default_instance_ = new RoomDetailInfo();
  RoomBriefInfo::default_instance_ = new RoomBriefInfo();
  ReqMyRoomMatchCCmd::default_instance_ = new ReqMyRoomMatchCCmd();
  ReqRoomListCCmd::default_instance_ = new ReqRoomListCCmd();
  ReqRoomDetailCCmd::default_instance_ = new ReqRoomDetailCCmd();
  JoinRoomUser::default_instance_ = new JoinRoomUser();
  TutorMatcher::default_instance_ = new TutorMatcher();
  JoinRoomCCmd::default_instance_ = new JoinRoomCCmd();
  LeaveRoomCCmd::default_instance_ = new LeaveRoomCCmd();
  NtfRoomStateCCmd::default_instance_ = new NtfRoomStateCCmd();
  NtfFightStatCCmd::default_instance_ = new NtfFightStatCCmd();
  JoinFightingCCmd::default_instance_ = new JoinFightingCCmd();
  ComboNotifyCCmd::default_instance_ = new ComboNotifyCCmd();
  RevChallengeCCmd::default_instance_ = new RevChallengeCCmd();
  KickTeamCCmd::default_instance_ = new KickTeamCCmd();
  FightConfirmCCmd::default_instance_ = new FightConfirmCCmd();
  RankInfo::default_instance_ = new RankInfo();
  RewardInfo::default_instance_ = new RewardInfo();
  PvpResultCCmd::default_instance_ = new PvpResultCCmd();
  MatchTeamMemUpdateInfo::default_instance_ = new MatchTeamMemUpdateInfo();
  PvpTeamMemberUpdateCCmd::default_instance_ = new PvpTeamMemberUpdateCCmd();
  MatchTeamMemDataUpdateInfo::default_instance_ = new MatchTeamMemDataUpdateInfo();
  PvpMemberDataUpdateCCmd::default_instance_ = new PvpMemberDataUpdateCCmd();
  NtfMatchInfoCCmd::default_instance_ = new NtfMatchInfoCCmd();
  GodEndTimeCCmd::default_instance_ = new GodEndTimeCCmd();
  RankNameInfo::default_instance_ = new RankNameInfo();
  NtfRankChangeCCmd::default_instance_ = new NtfRankChangeCCmd();
  OpenGlobalShopPanelCCmd::default_instance_ = new OpenGlobalShopPanelCCmd();
  TutorMatchResultNtfMatchCCmd::default_instance_ = new TutorMatchResultNtfMatchCCmd();
  TutorMatchResponseMatchCCmd::default_instance_ = new TutorMatchResponseMatchCCmd();
  TeamPwsPreInfo::default_instance_ = new TeamPwsPreInfo();
  TeamPwsPreInfoMatchCCmd::default_instance_ = new TeamPwsPreInfoMatchCCmd();
  UpdatePreInfoMatchCCmd::default_instance_ = new UpdatePreInfoMatchCCmd();
  TeamPwsRankInfo::default_instance_ = new TeamPwsRankInfo();
  QueryTeamPwsRankMatchCCmd::default_instance_ = new QueryTeamPwsRankMatchCCmd();
  TeamPwsUserInfo::default_instance_ = new TeamPwsUserInfo();
  QueryTeamPwsTeamInfoMatchCCmd::default_instance_ = new QueryTeamPwsTeamInfoMatchCCmd();
  MatchTeamData::default_instance_->InitAsDefaultInstance();
  RoomDetailInfo::default_instance_->InitAsDefaultInstance();
  RoomBriefInfo::default_instance_->InitAsDefaultInstance();
  ReqMyRoomMatchCCmd::default_instance_->InitAsDefaultInstance();
  ReqRoomListCCmd::default_instance_->InitAsDefaultInstance();
  ReqRoomDetailCCmd::default_instance_->InitAsDefaultInstance();
  JoinRoomUser::default_instance_->InitAsDefaultInstance();
  TutorMatcher::default_instance_->InitAsDefaultInstance();
  JoinRoomCCmd::default_instance_->InitAsDefaultInstance();
  LeaveRoomCCmd::default_instance_->InitAsDefaultInstance();
  NtfRoomStateCCmd::default_instance_->InitAsDefaultInstance();
  NtfFightStatCCmd::default_instance_->InitAsDefaultInstance();
  JoinFightingCCmd::default_instance_->InitAsDefaultInstance();
  ComboNotifyCCmd::default_instance_->InitAsDefaultInstance();
  RevChallengeCCmd::default_instance_->InitAsDefaultInstance();
  KickTeamCCmd::default_instance_->InitAsDefaultInstance();
  FightConfirmCCmd::default_instance_->InitAsDefaultInstance();
  RankInfo::default_instance_->InitAsDefaultInstance();
  RewardInfo::default_instance_->InitAsDefaultInstance();
  PvpResultCCmd::default_instance_->InitAsDefaultInstance();
  MatchTeamMemUpdateInfo::default_instance_->InitAsDefaultInstance();
  PvpTeamMemberUpdateCCmd::default_instance_->InitAsDefaultInstance();
  MatchTeamMemDataUpdateInfo::default_instance_->InitAsDefaultInstance();
  PvpMemberDataUpdateCCmd::default_instance_->InitAsDefaultInstance();
  NtfMatchInfoCCmd::default_instance_->InitAsDefaultInstance();
  GodEndTimeCCmd::default_instance_->InitAsDefaultInstance();
  RankNameInfo::default_instance_->InitAsDefaultInstance();
  NtfRankChangeCCmd::default_instance_->InitAsDefaultInstance();
  OpenGlobalShopPanelCCmd::default_instance_->InitAsDefaultInstance();
  TutorMatchResultNtfMatchCCmd::default_instance_->InitAsDefaultInstance();
  TutorMatchResponseMatchCCmd::default_instance_->InitAsDefaultInstance();
  TeamPwsPreInfo::default_instance_->InitAsDefaultInstance();
  TeamPwsPreInfoMatchCCmd::default_instance_->InitAsDefaultInstance();
  UpdatePreInfoMatchCCmd::default_instance_->InitAsDefaultInstance();
  TeamPwsRankInfo::default_instance_->InitAsDefaultInstance();
  QueryTeamPwsRankMatchCCmd::default_instance_->InitAsDefaultInstance();
  TeamPwsUserInfo::default_instance_->InitAsDefaultInstance();
  QueryTeamPwsTeamInfoMatchCCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MatchCCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MatchCCmd_2eproto {
  StaticDescriptorInitializer_MatchCCmd_2eproto() {
    protobuf_AddDesc_MatchCCmd_2eproto();
  }
} static_descriptor_initializer_MatchCCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* MatchCParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchCParam_descriptor_;
}
bool MatchCParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPvpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPvpType_descriptor_;
}
bool EPvpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoomState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoomState_descriptor_;
}
bool ERoomState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPvpResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPvpResult_descriptor_;
}
bool EPvpResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMatchReply_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMatchReply_descriptor_;
}
bool EMatchReply_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETutorMatch_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETutorMatch_descriptor_;
}
bool ETutorMatch_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETeamPwsRank_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETeamPwsRank_descriptor_;
}
bool ETeamPwsRank_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MatchTeamData::kTeamidFieldNumber;
const int MatchTeamData::kZoneidFieldNumber;
const int MatchTeamData::kNameFieldNumber;
const int MatchTeamData::kIndexFieldNumber;
const int MatchTeamData::kMembersFieldNumber;
#endif  // !_MSC_VER

MatchTeamData::MatchTeamData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MatchTeamData)
}

void MatchTeamData::InitAsDefaultInstance() {
}

MatchTeamData::MatchTeamData(const MatchTeamData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MatchTeamData)
}

void MatchTeamData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchTeamData::~MatchTeamData() {
  // @@protoc_insertion_point(destructor:Cmd.MatchTeamData)
  SharedDtor();
}

void MatchTeamData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MatchTeamData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchTeamData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchTeamData_descriptor_;
}

const MatchTeamData& MatchTeamData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

MatchTeamData* MatchTeamData::default_instance_ = NULL;

MatchTeamData* MatchTeamData::New() const {
  return new MatchTeamData;
}

void MatchTeamData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MatchTeamData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(zoneid_, index_);
    teamid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchTeamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MatchTeamData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 teamid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }

      // repeated .Cmd.TeamMember members = 4;
      case 4: {
        if (tag == 34) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        if (input->ExpectTag(64)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MatchTeamData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MatchTeamData)
  return false;
#undef DO_
}

void MatchTeamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MatchTeamData)
  // optional uint64 teamid = 1 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // repeated .Cmd.TeamMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  // optional uint32 zoneid = 8 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MatchTeamData)
}

::google::protobuf::uint8* MatchTeamData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MatchTeamData)
  // optional uint64 teamid = 1 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // repeated .Cmd.TeamMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->members(i), target);
  }

  // optional uint32 zoneid = 8 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MatchTeamData)
  return target;
}

int MatchTeamData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 teamid = 1 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 zoneid = 8 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  // repeated .Cmd.TeamMember members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchTeamData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchTeamData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchTeamData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchTeamData::MergeFrom(const MatchTeamData& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchTeamData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchTeamData::CopyFrom(const MatchTeamData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchTeamData::IsInitialized() const {

  return true;
}

void MatchTeamData::Swap(MatchTeamData* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(name_, other->name_);
    std::swap(index_, other->index_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchTeamData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchTeamData_descriptor_;
  metadata.reflection = MatchTeamData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomDetailInfo::kTypeFieldNumber;
const int RoomDetailInfo::kStateFieldNumber;
const int RoomDetailInfo::kRoomidFieldNumber;
const int RoomDetailInfo::kNameFieldNumber;
const int RoomDetailInfo::kTeamDatasFieldNumber;
#endif  // !_MSC_VER

RoomDetailInfo::RoomDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RoomDetailInfo)
}

void RoomDetailInfo::InitAsDefaultInstance() {
}

RoomDetailInfo::RoomDetailInfo(const RoomDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RoomDetailInfo)
}

void RoomDetailInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  state_ = 1;
  roomid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomDetailInfo::~RoomDetailInfo() {
  // @@protoc_insertion_point(destructor:Cmd.RoomDetailInfo)
  SharedDtor();
}

void RoomDetailInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RoomDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomDetailInfo_descriptor_;
}

const RoomDetailInfo& RoomDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

RoomDetailInfo* RoomDetailInfo::default_instance_ = NULL;

RoomDetailInfo* RoomDetailInfo::New() const {
  return new RoomDetailInfo;
}

void RoomDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 0;
    state_ = 1;
    roomid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  team_datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RoomDetailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EPvpType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .Cmd.ERoomState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERoomState_IsValid(value)) {
            set_state(static_cast< ::Cmd::ERoomState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 3;
      case 3: {
        if (tag == 24) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_team_datas;
        break;
      }

      // repeated .Cmd.MatchTeamData team_datas = 5;
      case 5: {
        if (tag == 42) {
         parse_team_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_team_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RoomDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RoomDetailInfo)
  return false;
#undef DO_
}

void RoomDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RoomDetailInfo)
  // optional .Cmd.EPvpType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Cmd.ERoomState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional uint64 roomid = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roomid(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // repeated .Cmd.MatchTeamData team_datas = 5;
  for (int i = 0; i < this->team_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->team_datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RoomDetailInfo)
}

::google::protobuf::uint8* RoomDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RoomDetailInfo)
  // optional .Cmd.EPvpType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Cmd.ERoomState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional uint64 roomid = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roomid(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // repeated .Cmd.MatchTeamData team_datas = 5;
  for (int i = 0; i < this->team_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->team_datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RoomDetailInfo)
  return target;
}

int RoomDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EPvpType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Cmd.ERoomState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint64 roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Cmd.MatchTeamData team_datas = 5;
  total_size += 1 * this->team_datas_size();
  for (int i = 0; i < this->team_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team_datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomDetailInfo::MergeFrom(const RoomDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_datas_.MergeFrom(from.team_datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomDetailInfo::CopyFrom(const RoomDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomDetailInfo::IsInitialized() const {

  return true;
}

void RoomDetailInfo::Swap(RoomDetailInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(roomid_, other->roomid_);
    std::swap(name_, other->name_);
    team_datas_.Swap(&other->team_datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomDetailInfo_descriptor_;
  metadata.reflection = RoomDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomBriefInfo::kTypeFieldNumber;
const int RoomBriefInfo::kStateFieldNumber;
const int RoomBriefInfo::kRoomidFieldNumber;
const int RoomBriefInfo::kNameFieldNumber;
const int RoomBriefInfo::kRaididFieldNumber;
const int RoomBriefInfo::kPlayerNumFieldNumber;
const int RoomBriefInfo::kNum1FieldNumber;
const int RoomBriefInfo::kNum2FieldNumber;
const int RoomBriefInfo::kNum3FieldNumber;
const int RoomBriefInfo::kZoneidFieldNumber;
#endif  // !_MSC_VER

RoomBriefInfo::RoomBriefInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RoomBriefInfo)
}

void RoomBriefInfo::InitAsDefaultInstance() {
}

RoomBriefInfo::RoomBriefInfo(const RoomBriefInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RoomBriefInfo)
}

void RoomBriefInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  state_ = 1;
  roomid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raidid_ = 0u;
  player_num_ = 0u;
  num1_ = 0u;
  num2_ = 0u;
  num3_ = 0u;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomBriefInfo::~RoomBriefInfo() {
  // @@protoc_insertion_point(destructor:Cmd.RoomBriefInfo)
  SharedDtor();
}

void RoomBriefInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RoomBriefInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomBriefInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomBriefInfo_descriptor_;
}

const RoomBriefInfo& RoomBriefInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

RoomBriefInfo* RoomBriefInfo::default_instance_ = NULL;

RoomBriefInfo* RoomBriefInfo::New() const {
  return new RoomBriefInfo;
}

void RoomBriefInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoomBriefInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(raidid_, num2_);
    type_ = 0;
    state_ = 1;
    roomid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ZR_(num3_, zoneid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomBriefInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RoomBriefInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EPvpType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .Cmd.ERoomState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERoomState_IsValid(value)) {
            set_state(static_cast< ::Cmd::ERoomState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 3;
      case 3: {
        if (tag == 24) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_raidid;
        break;
      }

      // optional uint32 raidid = 5;
      case 5: {
        if (tag == 40) {
         parse_raidid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raidid_)));
          set_has_raidid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_player_num;
        break;
      }

      // optional uint32 player_num = 6;
      case 6: {
        if (tag == 48) {
         parse_player_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_num_)));
          set_has_player_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num1;
        break;
      }

      // optional uint32 num1 = 7;
      case 7: {
        if (tag == 56) {
         parse_num1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num1_)));
          set_has_num1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num2;
        break;
      }

      // optional uint32 num2 = 8;
      case 8: {
        if (tag == 64) {
         parse_num2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num2_)));
          set_has_num2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num3;
        break;
      }

      // optional uint32 num3 = 9;
      case 9: {
        if (tag == 72) {
         parse_num3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num3_)));
          set_has_num3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 10;
      case 10: {
        if (tag == 80) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RoomBriefInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RoomBriefInfo)
  return false;
#undef DO_
}

void RoomBriefInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RoomBriefInfo)
  // optional .Cmd.EPvpType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Cmd.ERoomState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional uint64 roomid = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roomid(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional uint32 raidid = 5;
  if (has_raidid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->raidid(), output);
  }

  // optional uint32 player_num = 6;
  if (has_player_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->player_num(), output);
  }

  // optional uint32 num1 = 7;
  if (has_num1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num1(), output);
  }

  // optional uint32 num2 = 8;
  if (has_num2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num2(), output);
  }

  // optional uint32 num3 = 9;
  if (has_num3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->num3(), output);
  }

  // optional uint32 zoneid = 10;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RoomBriefInfo)
}

::google::protobuf::uint8* RoomBriefInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RoomBriefInfo)
  // optional .Cmd.EPvpType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Cmd.ERoomState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional uint64 roomid = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roomid(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional uint32 raidid = 5;
  if (has_raidid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->raidid(), target);
  }

  // optional uint32 player_num = 6;
  if (has_player_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->player_num(), target);
  }

  // optional uint32 num1 = 7;
  if (has_num1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num1(), target);
  }

  // optional uint32 num2 = 8;
  if (has_num2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num2(), target);
  }

  // optional uint32 num3 = 9;
  if (has_num3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->num3(), target);
  }

  // optional uint32 zoneid = 10;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RoomBriefInfo)
  return target;
}

int RoomBriefInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EPvpType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Cmd.ERoomState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint64 roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 raidid = 5;
    if (has_raidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raidid());
    }

    // optional uint32 player_num = 6;
    if (has_player_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_num());
    }

    // optional uint32 num1 = 7;
    if (has_num1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num1());
    }

    // optional uint32 num2 = 8;
    if (has_num2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 num3 = 9;
    if (has_num3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num3());
    }

    // optional uint32 zoneid = 10;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomBriefInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomBriefInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomBriefInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomBriefInfo::MergeFrom(const RoomBriefInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_raidid()) {
      set_raidid(from.raidid());
    }
    if (from.has_player_num()) {
      set_player_num(from.player_num());
    }
    if (from.has_num1()) {
      set_num1(from.num1());
    }
    if (from.has_num2()) {
      set_num2(from.num2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num3()) {
      set_num3(from.num3());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomBriefInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomBriefInfo::CopyFrom(const RoomBriefInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomBriefInfo::IsInitialized() const {

  return true;
}

void RoomBriefInfo::Swap(RoomBriefInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(roomid_, other->roomid_);
    std::swap(name_, other->name_);
    std::swap(raidid_, other->raidid_);
    std::swap(player_num_, other->player_num_);
    std::swap(num1_, other->num1_);
    std::swap(num2_, other->num2_);
    std::swap(num3_, other->num3_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomBriefInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomBriefInfo_descriptor_;
  metadata.reflection = RoomBriefInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMyRoomMatchCCmd::kCmdFieldNumber;
const int ReqMyRoomMatchCCmd::kParamFieldNumber;
const int ReqMyRoomMatchCCmd::kTypeFieldNumber;
const int ReqMyRoomMatchCCmd::kBriefInfoFieldNumber;
#endif  // !_MSC_VER

ReqMyRoomMatchCCmd::ReqMyRoomMatchCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqMyRoomMatchCCmd)
}

void ReqMyRoomMatchCCmd::InitAsDefaultInstance() {
  brief_info_ = const_cast< ::Cmd::RoomBriefInfo*>(&::Cmd::RoomBriefInfo::default_instance());
}

ReqMyRoomMatchCCmd::ReqMyRoomMatchCCmd(const ReqMyRoomMatchCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqMyRoomMatchCCmd)
}

void ReqMyRoomMatchCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 1;
  type_ = 0;
  brief_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMyRoomMatchCCmd::~ReqMyRoomMatchCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqMyRoomMatchCCmd)
  SharedDtor();
}

void ReqMyRoomMatchCCmd::SharedDtor() {
  if (this != default_instance_) {
    delete brief_info_;
  }
}

void ReqMyRoomMatchCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMyRoomMatchCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMyRoomMatchCCmd_descriptor_;
}

const ReqMyRoomMatchCCmd& ReqMyRoomMatchCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

ReqMyRoomMatchCCmd* ReqMyRoomMatchCCmd::default_instance_ = NULL;

ReqMyRoomMatchCCmd* ReqMyRoomMatchCCmd::New() const {
  return new ReqMyRoomMatchCCmd;
}

void ReqMyRoomMatchCCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 61;
    param_ = 1;
    type_ = 0;
    if (has_brief_info()) {
      if (brief_info_ != NULL) brief_info_->::Cmd::RoomBriefInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMyRoomMatchCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqMyRoomMatchCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_MY_ROOM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EPvpType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_brief_info;
        break;
      }

      // optional .Cmd.RoomBriefInfo brief_info = 4;
      case 4: {
        if (tag == 34) {
         parse_brief_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brief_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqMyRoomMatchCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqMyRoomMatchCCmd)
  return false;
#undef DO_
}

void ReqMyRoomMatchCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqMyRoomMatchCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_MY_ROOM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .Cmd.RoomBriefInfo brief_info = 4;
  if (has_brief_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->brief_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqMyRoomMatchCCmd)
}

::google::protobuf::uint8* ReqMyRoomMatchCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqMyRoomMatchCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_MY_ROOM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .Cmd.RoomBriefInfo brief_info = 4;
  if (has_brief_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->brief_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqMyRoomMatchCCmd)
  return target;
}

int ReqMyRoomMatchCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_MY_ROOM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPvpType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Cmd.RoomBriefInfo brief_info = 4;
    if (has_brief_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brief_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMyRoomMatchCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMyRoomMatchCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMyRoomMatchCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMyRoomMatchCCmd::MergeFrom(const ReqMyRoomMatchCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_brief_info()) {
      mutable_brief_info()->::Cmd::RoomBriefInfo::MergeFrom(from.brief_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMyRoomMatchCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMyRoomMatchCCmd::CopyFrom(const ReqMyRoomMatchCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMyRoomMatchCCmd::IsInitialized() const {

  return true;
}

void ReqMyRoomMatchCCmd::Swap(ReqMyRoomMatchCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(brief_info_, other->brief_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMyRoomMatchCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMyRoomMatchCCmd_descriptor_;
  metadata.reflection = ReqMyRoomMatchCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRoomListCCmd::kCmdFieldNumber;
const int ReqRoomListCCmd::kParamFieldNumber;
const int ReqRoomListCCmd::kTypeFieldNumber;
const int ReqRoomListCCmd::kRoomidsFieldNumber;
const int ReqRoomListCCmd::kRoomListsFieldNumber;
#endif  // !_MSC_VER

ReqRoomListCCmd::ReqRoomListCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqRoomListCCmd)
}

void ReqRoomListCCmd::InitAsDefaultInstance() {
}

ReqRoomListCCmd::ReqRoomListCCmd(const ReqRoomListCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqRoomListCCmd)
}

void ReqRoomListCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 2;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRoomListCCmd::~ReqRoomListCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqRoomListCCmd)
  SharedDtor();
}

void ReqRoomListCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqRoomListCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRoomListCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRoomListCCmd_descriptor_;
}

const ReqRoomListCCmd& ReqRoomListCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

ReqRoomListCCmd* ReqRoomListCCmd::default_instance_ = NULL;

ReqRoomListCCmd* ReqRoomListCCmd::New() const {
  return new ReqRoomListCCmd;
}

void ReqRoomListCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 61;
    param_ = 2;
    type_ = 0;
  }
  roomids_.Clear();
  room_lists_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRoomListCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqRoomListCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_ROOM_LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EPvpType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roomids;
        break;
      }

      // repeated uint64 roomids = 4;
      case 4: {
        if (tag == 32) {
         parse_roomids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_roomids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_roomids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roomids;
        if (input->ExpectTag(42)) goto parse_room_lists;
        break;
      }

      // repeated .Cmd.RoomBriefInfo room_lists = 5;
      case 5: {
        if (tag == 42) {
         parse_room_lists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_lists()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_room_lists;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqRoomListCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqRoomListCCmd)
  return false;
#undef DO_
}

void ReqRoomListCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqRoomListCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_ROOM_LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated uint64 roomids = 4;
  for (int i = 0; i < this->roomids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->roomids(i), output);
  }

  // repeated .Cmd.RoomBriefInfo room_lists = 5;
  for (int i = 0; i < this->room_lists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->room_lists(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqRoomListCCmd)
}

::google::protobuf::uint8* ReqRoomListCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqRoomListCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_ROOM_LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated uint64 roomids = 4;
  for (int i = 0; i < this->roomids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->roomids(i), target);
  }

  // repeated .Cmd.RoomBriefInfo room_lists = 5;
  for (int i = 0; i < this->room_lists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->room_lists(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqRoomListCCmd)
  return target;
}

int ReqRoomListCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_ROOM_LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPvpType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated uint64 roomids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->roomids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->roomids(i));
    }
    total_size += 1 * this->roomids_size() + data_size;
  }

  // repeated .Cmd.RoomBriefInfo room_lists = 5;
  total_size += 1 * this->room_lists_size();
  for (int i = 0; i < this->room_lists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_lists(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRoomListCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRoomListCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRoomListCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRoomListCCmd::MergeFrom(const ReqRoomListCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomids_.MergeFrom(from.roomids_);
  room_lists_.MergeFrom(from.room_lists_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRoomListCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRoomListCCmd::CopyFrom(const ReqRoomListCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRoomListCCmd::IsInitialized() const {

  return true;
}

void ReqRoomListCCmd::Swap(ReqRoomListCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    roomids_.Swap(&other->roomids_);
    room_lists_.Swap(&other->room_lists_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRoomListCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRoomListCCmd_descriptor_;
  metadata.reflection = ReqRoomListCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRoomDetailCCmd::kCmdFieldNumber;
const int ReqRoomDetailCCmd::kParamFieldNumber;
const int ReqRoomDetailCCmd::kTypeFieldNumber;
const int ReqRoomDetailCCmd::kRoomidFieldNumber;
const int ReqRoomDetailCCmd::kDatailInfoFieldNumber;
#endif  // !_MSC_VER

ReqRoomDetailCCmd::ReqRoomDetailCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqRoomDetailCCmd)
}

void ReqRoomDetailCCmd::InitAsDefaultInstance() {
  datail_info_ = const_cast< ::Cmd::RoomDetailInfo*>(&::Cmd::RoomDetailInfo::default_instance());
}

ReqRoomDetailCCmd::ReqRoomDetailCCmd(const ReqRoomDetailCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqRoomDetailCCmd)
}

void ReqRoomDetailCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 3;
  type_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  datail_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRoomDetailCCmd::~ReqRoomDetailCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqRoomDetailCCmd)
  SharedDtor();
}

void ReqRoomDetailCCmd::SharedDtor() {
  if (this != default_instance_) {
    delete datail_info_;
  }
}

void ReqRoomDetailCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRoomDetailCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRoomDetailCCmd_descriptor_;
}

const ReqRoomDetailCCmd& ReqRoomDetailCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

ReqRoomDetailCCmd* ReqRoomDetailCCmd::default_instance_ = NULL;

ReqRoomDetailCCmd* ReqRoomDetailCCmd::New() const {
  return new ReqRoomDetailCCmd;
}

void ReqRoomDetailCCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 61;
    param_ = 3;
    type_ = 0;
    roomid_ = GOOGLE_ULONGLONG(0);
    if (has_datail_info()) {
      if (datail_info_ != NULL) datail_info_->::Cmd::RoomDetailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRoomDetailCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqRoomDetailCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_ROOM_DETAIL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EPvpType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 4;
      case 4: {
        if (tag == 32) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_datail_info;
        break;
      }

      // optional .Cmd.RoomDetailInfo datail_info = 5;
      case 5: {
        if (tag == 42) {
         parse_datail_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datail_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqRoomDetailCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqRoomDetailCCmd)
  return false;
#undef DO_
}

void ReqRoomDetailCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqRoomDetailCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_ROOM_DETAIL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roomid(), output);
  }

  // optional .Cmd.RoomDetailInfo datail_info = 5;
  if (has_datail_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->datail_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqRoomDetailCCmd)
}

::google::protobuf::uint8* ReqRoomDetailCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqRoomDetailCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_ROOM_DETAIL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->roomid(), target);
  }

  // optional .Cmd.RoomDetailInfo datail_info = 5;
  if (has_datail_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->datail_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqRoomDetailCCmd)
  return target;
}

int ReqRoomDetailCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_ROOM_DETAIL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPvpType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 roomid = 4;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional .Cmd.RoomDetailInfo datail_info = 5;
    if (has_datail_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datail_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRoomDetailCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRoomDetailCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRoomDetailCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRoomDetailCCmd::MergeFrom(const ReqRoomDetailCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_datail_info()) {
      mutable_datail_info()->::Cmd::RoomDetailInfo::MergeFrom(from.datail_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRoomDetailCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRoomDetailCCmd::CopyFrom(const ReqRoomDetailCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRoomDetailCCmd::IsInitialized() const {

  return true;
}

void ReqRoomDetailCCmd::Swap(ReqRoomDetailCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(roomid_, other->roomid_);
    std::swap(datail_info_, other->datail_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRoomDetailCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRoomDetailCCmd_descriptor_;
  metadata.reflection = ReqRoomDetailCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinRoomUser::kCharidFieldNumber;
const int JoinRoomUser::kNameFieldNumber;
#endif  // !_MSC_VER

JoinRoomUser::JoinRoomUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.JoinRoomUser)
}

void JoinRoomUser::InitAsDefaultInstance() {
}

JoinRoomUser::JoinRoomUser(const JoinRoomUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.JoinRoomUser)
}

void JoinRoomUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinRoomUser::~JoinRoomUser() {
  // @@protoc_insertion_point(destructor:Cmd.JoinRoomUser)
  SharedDtor();
}

void JoinRoomUser::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void JoinRoomUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinRoomUser_descriptor_;
}

const JoinRoomUser& JoinRoomUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

JoinRoomUser* JoinRoomUser::default_instance_ = NULL;

JoinRoomUser* JoinRoomUser::New() const {
  return new JoinRoomUser;
}

void JoinRoomUser::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinRoomUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.JoinRoomUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.JoinRoomUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.JoinRoomUser)
  return false;
#undef DO_
}

void JoinRoomUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.JoinRoomUser)
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.JoinRoomUser)
}

::google::protobuf::uint8* JoinRoomUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.JoinRoomUser)
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.JoinRoomUser)
  return target;
}

int JoinRoomUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinRoomUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinRoomUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinRoomUser::MergeFrom(const JoinRoomUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinRoomUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomUser::CopyFrom(const JoinRoomUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomUser::IsInitialized() const {

  return true;
}

void JoinRoomUser::Swap(JoinRoomUser* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinRoomUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinRoomUser_descriptor_;
  metadata.reflection = JoinRoomUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TutorMatcher::kCharidFieldNumber;
const int TutorMatcher::kZoneidFieldNumber;
const int TutorMatcher::kFindtutorFieldNumber;
const int TutorMatcher::kGenderFieldNumber;
const int TutorMatcher::kSelfgenderFieldNumber;
const int TutorMatcher::kDatasFieldNumber;
const int TutorMatcher::kBlackidsFieldNumber;
#endif  // !_MSC_VER

TutorMatcher::TutorMatcher()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TutorMatcher)
}

void TutorMatcher::InitAsDefaultInstance() {
}

TutorMatcher::TutorMatcher(const TutorMatcher& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TutorMatcher)
}

void TutorMatcher::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  findtutor_ = false;
  gender_ = 0;
  selfgender_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TutorMatcher::~TutorMatcher() {
  // @@protoc_insertion_point(destructor:Cmd.TutorMatcher)
  SharedDtor();
}

void TutorMatcher::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TutorMatcher::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TutorMatcher::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TutorMatcher_descriptor_;
}

const TutorMatcher& TutorMatcher::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

TutorMatcher* TutorMatcher::default_instance_ = NULL;

TutorMatcher* TutorMatcher::New() const {
  return new TutorMatcher;
}

void TutorMatcher::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TutorMatcher*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, selfgender_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  blackids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TutorMatcher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TutorMatcher)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_findtutor;
        break;
      }

      // optional bool findtutor = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_findtutor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &findtutor_)));
          set_has_findtutor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }

      // optional .Cmd.EGender gender = 4 [default = EGENDER_MIN];
      case 4: {
        if (tag == 32) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGender_IsValid(value)) {
            set_gender(static_cast< ::Cmd::EGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_selfgender;
        break;
      }

      // optional .Cmd.EGender selfgender = 5 [default = EGENDER_MIN];
      case 5: {
        if (tag == 40) {
         parse_selfgender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGender_IsValid(value)) {
            set_selfgender(static_cast< ::Cmd::EGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_datas;
        break;
      }

      // repeated .Cmd.UserData datas = 6;
      case 6: {
        if (tag == 50) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_datas;
        if (input->ExpectTag(56)) goto parse_blackids;
        break;
      }

      // repeated uint64 blackids = 7;
      case 7: {
        if (tag == 56) {
         parse_blackids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_blackids())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_blackids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_blackids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TutorMatcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TutorMatcher)
  return false;
#undef DO_
}

void TutorMatcher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TutorMatcher)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional bool findtutor = 3 [default = false];
  if (has_findtutor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->findtutor(), output);
  }

  // optional .Cmd.EGender gender = 4 [default = EGENDER_MIN];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gender(), output);
  }

  // optional .Cmd.EGender selfgender = 5 [default = EGENDER_MIN];
  if (has_selfgender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->selfgender(), output);
  }

  // repeated .Cmd.UserData datas = 6;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->datas(i), output);
  }

  // repeated uint64 blackids = 7;
  for (int i = 0; i < this->blackids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->blackids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TutorMatcher)
}

::google::protobuf::uint8* TutorMatcher::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TutorMatcher)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional bool findtutor = 3 [default = false];
  if (has_findtutor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->findtutor(), target);
  }

  // optional .Cmd.EGender gender = 4 [default = EGENDER_MIN];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gender(), target);
  }

  // optional .Cmd.EGender selfgender = 5 [default = EGENDER_MIN];
  if (has_selfgender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->selfgender(), target);
  }

  // repeated .Cmd.UserData datas = 6;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->datas(i), target);
  }

  // repeated uint64 blackids = 7;
  for (int i = 0; i < this->blackids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->blackids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TutorMatcher)
  return target;
}

int TutorMatcher::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 2 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional bool findtutor = 3 [default = false];
    if (has_findtutor()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.EGender gender = 4 [default = EGENDER_MIN];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional .Cmd.EGender selfgender = 5 [default = EGENDER_MIN];
    if (has_selfgender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selfgender());
    }

  }
  // repeated .Cmd.UserData datas = 6;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated uint64 blackids = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->blackids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->blackids(i));
    }
    total_size += 1 * this->blackids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TutorMatcher::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TutorMatcher* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TutorMatcher*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TutorMatcher::MergeFrom(const TutorMatcher& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  blackids_.MergeFrom(from.blackids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_findtutor()) {
      set_findtutor(from.findtutor());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_selfgender()) {
      set_selfgender(from.selfgender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TutorMatcher::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TutorMatcher::CopyFrom(const TutorMatcher& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TutorMatcher::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  return true;
}

void TutorMatcher::Swap(TutorMatcher* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(findtutor_, other->findtutor_);
    std::swap(gender_, other->gender_);
    std::swap(selfgender_, other->selfgender_);
    datas_.Swap(&other->datas_);
    blackids_.Swap(&other->blackids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TutorMatcher::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TutorMatcher_descriptor_;
  metadata.reflection = TutorMatcher_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinRoomCCmd::kCmdFieldNumber;
const int JoinRoomCCmd::kParamFieldNumber;
const int JoinRoomCCmd::kTypeFieldNumber;
const int JoinRoomCCmd::kRoomidFieldNumber;
const int JoinRoomCCmd::kNameFieldNumber;
const int JoinRoomCCmd::kIsquickFieldNumber;
const int JoinRoomCCmd::kTeamidFieldNumber;
const int JoinRoomCCmd::kTeammemberFieldNumber;
const int JoinRoomCCmd::kRetFieldNumber;
const int JoinRoomCCmd::kGuildidFieldNumber;
const int JoinRoomCCmd::kUsersFieldNumber;
const int JoinRoomCCmd::kMatcherFieldNumber;
#endif  // !_MSC_VER

JoinRoomCCmd::JoinRoomCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.JoinRoomCCmd)
}

void JoinRoomCCmd::InitAsDefaultInstance() {
  matcher_ = const_cast< ::Cmd::TutorMatcher*>(&::Cmd::TutorMatcher::default_instance());
}

JoinRoomCCmd::JoinRoomCCmd(const JoinRoomCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.JoinRoomCCmd)
}

void JoinRoomCCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 4;
  type_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isquick_ = false;
  teamid_ = GOOGLE_ULONGLONG(0);
  ret_ = false;
  guildid_ = GOOGLE_ULONGLONG(0);
  matcher_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinRoomCCmd::~JoinRoomCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.JoinRoomCCmd)
  SharedDtor();
}

void JoinRoomCCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete matcher_;
  }
}

void JoinRoomCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinRoomCCmd_descriptor_;
}

const JoinRoomCCmd& JoinRoomCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

JoinRoomCCmd* JoinRoomCCmd::default_instance_ = NULL;

JoinRoomCCmd* JoinRoomCCmd::New() const {
  return new JoinRoomCCmd;
}

void JoinRoomCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinRoomCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(type_, isquick_);
    cmd_ = 61;
    param_ = 4;
    roomid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    teamid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 2816) {
    ret_ = false;
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_matcher()) {
      if (matcher_ != NULL) matcher_->::Cmd::TutorMatcher::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  teammember_.Clear();
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinRoomCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.JoinRoomCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_JOIN_ROOM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EPvpType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 4;
      case 4: {
        if (tag == 32) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isquick;
        break;
      }

      // optional bool isquick = 6;
      case 6: {
        if (tag == 48) {
         parse_isquick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isquick_)));
          set_has_isquick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 7;
      case 7: {
        if (tag == 56) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_teammember;
        break;
      }

      // repeated uint64 teammember = 8;
      case 8: {
        if (tag == 64) {
         parse_teammember:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64, input, this->mutable_teammember())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_teammember())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_teammember;
        if (input->ExpectTag(72)) goto parse_ret;
        break;
      }

      // optional bool ret = 9;
      case 9: {
        if (tag == 72) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 10;
      case 10: {
        if (tag == 80) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_users;
        break;
      }

      // repeated .Cmd.JoinRoomUser users = 11;
      case 11: {
        if (tag == 90) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_users;
        if (input->ExpectTag(98)) goto parse_matcher;
        break;
      }

      // optional .Cmd.TutorMatcher matcher = 12;
      case 12: {
        if (tag == 98) {
         parse_matcher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matcher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.JoinRoomCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.JoinRoomCCmd)
  return false;
#undef DO_
}

void JoinRoomCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.JoinRoomCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_JOIN_ROOM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roomid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional bool isquick = 6;
  if (has_isquick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isquick(), output);
  }

  // optional uint64 teamid = 7;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->teamid(), output);
  }

  // repeated uint64 teammember = 8;
  for (int i = 0; i < this->teammember_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->teammember(i), output);
  }

  // optional bool ret = 9;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ret(), output);
  }

  // optional uint64 guildid = 10;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->guildid(), output);
  }

  // repeated .Cmd.JoinRoomUser users = 11;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->users(i), output);
  }

  // optional .Cmd.TutorMatcher matcher = 12;
  if (has_matcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->matcher(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.JoinRoomCCmd)
}

::google::protobuf::uint8* JoinRoomCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.JoinRoomCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_JOIN_ROOM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->roomid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional bool isquick = 6;
  if (has_isquick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isquick(), target);
  }

  // optional uint64 teamid = 7;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->teamid(), target);
  }

  // repeated uint64 teammember = 8;
  for (int i = 0; i < this->teammember_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(8, this->teammember(i), target);
  }

  // optional bool ret = 9;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ret(), target);
  }

  // optional uint64 guildid = 10;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->guildid(), target);
  }

  // repeated .Cmd.JoinRoomUser users = 11;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->users(i), target);
  }

  // optional .Cmd.TutorMatcher matcher = 12;
  if (has_matcher()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->matcher(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.JoinRoomCCmd)
  return target;
}

int JoinRoomCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_JOIN_ROOM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPvpType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 roomid = 4;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool isquick = 6;
    if (has_isquick()) {
      total_size += 1 + 1;
    }

    // optional uint64 teamid = 7;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool ret = 9;
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // optional uint64 guildid = 10;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional .Cmd.TutorMatcher matcher = 12;
    if (has_matcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matcher());
    }

  }
  // repeated uint64 teammember = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->teammember_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->teammember(i));
    }
    total_size += 1 * this->teammember_size() + data_size;
  }

  // repeated .Cmd.JoinRoomUser users = 11;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinRoomCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinRoomCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinRoomCCmd::MergeFrom(const JoinRoomCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  teammember_.MergeFrom(from.teammember_);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_isquick()) {
      set_isquick(from.isquick());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_matcher()) {
      mutable_matcher()->::Cmd::TutorMatcher::MergeFrom(from.matcher());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinRoomCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomCCmd::CopyFrom(const JoinRoomCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomCCmd::IsInitialized() const {

  if (has_matcher()) {
    if (!this->matcher().IsInitialized()) return false;
  }
  return true;
}

void JoinRoomCCmd::Swap(JoinRoomCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(roomid_, other->roomid_);
    std::swap(name_, other->name_);
    std::swap(isquick_, other->isquick_);
    std::swap(teamid_, other->teamid_);
    teammember_.Swap(&other->teammember_);
    std::swap(ret_, other->ret_);
    std::swap(guildid_, other->guildid_);
    users_.Swap(&other->users_);
    std::swap(matcher_, other->matcher_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinRoomCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinRoomCCmd_descriptor_;
  metadata.reflection = JoinRoomCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveRoomCCmd::kCmdFieldNumber;
const int LeaveRoomCCmd::kParamFieldNumber;
const int LeaveRoomCCmd::kTypeFieldNumber;
const int LeaveRoomCCmd::kRoomidFieldNumber;
const int LeaveRoomCCmd::kTeamidFieldNumber;
#endif  // !_MSC_VER

LeaveRoomCCmd::LeaveRoomCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LeaveRoomCCmd)
}

void LeaveRoomCCmd::InitAsDefaultInstance() {
}

LeaveRoomCCmd::LeaveRoomCCmd(const LeaveRoomCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LeaveRoomCCmd)
}

void LeaveRoomCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 5;
  type_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveRoomCCmd::~LeaveRoomCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LeaveRoomCCmd)
  SharedDtor();
}

void LeaveRoomCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveRoomCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveRoomCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveRoomCCmd_descriptor_;
}

const LeaveRoomCCmd& LeaveRoomCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

LeaveRoomCCmd* LeaveRoomCCmd::default_instance_ = NULL;

LeaveRoomCCmd* LeaveRoomCCmd::New() const {
  return new LeaveRoomCCmd;
}

void LeaveRoomCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LeaveRoomCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(roomid_, type_);
    cmd_ = 61;
    param_ = 5;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveRoomCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LeaveRoomCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_LEAVE_ROOM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EPvpType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 4;
      case 4: {
        if (tag == 32) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LeaveRoomCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LeaveRoomCCmd)
  return false;
#undef DO_
}

void LeaveRoomCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LeaveRoomCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_LEAVE_ROOM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roomid(), output);
  }

  // optional uint64 teamid = 5 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LeaveRoomCCmd)
}

::google::protobuf::uint8* LeaveRoomCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LeaveRoomCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_LEAVE_ROOM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->roomid(), target);
  }

  // optional uint64 teamid = 5 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LeaveRoomCCmd)
  return target;
}

int LeaveRoomCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_LEAVE_ROOM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPvpType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 roomid = 4;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 teamid = 5 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveRoomCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveRoomCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveRoomCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveRoomCCmd::MergeFrom(const LeaveRoomCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveRoomCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveRoomCCmd::CopyFrom(const LeaveRoomCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRoomCCmd::IsInitialized() const {

  return true;
}

void LeaveRoomCCmd::Swap(LeaveRoomCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveRoomCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveRoomCCmd_descriptor_;
  metadata.reflection = LeaveRoomCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfRoomStateCCmd::kCmdFieldNumber;
const int NtfRoomStateCCmd::kParamFieldNumber;
const int NtfRoomStateCCmd::kPvpTypeFieldNumber;
const int NtfRoomStateCCmd::kRoomidFieldNumber;
const int NtfRoomStateCCmd::kStateFieldNumber;
const int NtfRoomStateCCmd::kEndtimeFieldNumber;
#endif  // !_MSC_VER

NtfRoomStateCCmd::NtfRoomStateCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfRoomStateCCmd)
}

void NtfRoomStateCCmd::InitAsDefaultInstance() {
}

NtfRoomStateCCmd::NtfRoomStateCCmd(const NtfRoomStateCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfRoomStateCCmd)
}

void NtfRoomStateCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 7;
  pvp_type_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  state_ = 1;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfRoomStateCCmd::~NtfRoomStateCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfRoomStateCCmd)
  SharedDtor();
}

void NtfRoomStateCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfRoomStateCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfRoomStateCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfRoomStateCCmd_descriptor_;
}

const NtfRoomStateCCmd& NtfRoomStateCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

NtfRoomStateCCmd* NtfRoomStateCCmd::default_instance_ = NULL;

NtfRoomStateCCmd* NtfRoomStateCCmd::New() const {
  return new NtfRoomStateCCmd;
}

void NtfRoomStateCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NtfRoomStateCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(roomid_, pvp_type_);
    cmd_ = 61;
    param_ = 7;
    state_ = 1;
    endtime_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfRoomStateCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfRoomStateCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_ROOM_STATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pvp_type;
        break;
      }

      // optional .Cmd.EPvpType pvp_type = 3;
      case 3: {
        if (tag == 24) {
         parse_pvp_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_pvp_type(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 4;
      case 4: {
        if (tag == 32) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional .Cmd.ERoomState state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERoomState_IsValid(value)) {
            set_state(static_cast< ::Cmd::ERoomState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 6;
      case 6: {
        if (tag == 48) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfRoomStateCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfRoomStateCCmd)
  return false;
#undef DO_
}

void NtfRoomStateCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfRoomStateCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_ROOM_STATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPvpType pvp_type = 3;
  if (has_pvp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->pvp_type(), output);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roomid(), output);
  }

  // optional .Cmd.ERoomState state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  // optional uint32 endtime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfRoomStateCCmd)
}

::google::protobuf::uint8* NtfRoomStateCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfRoomStateCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_ROOM_STATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPvpType pvp_type = 3;
  if (has_pvp_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->pvp_type(), target);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->roomid(), target);
  }

  // optional .Cmd.ERoomState state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  // optional uint32 endtime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfRoomStateCCmd)
  return target;
}

int NtfRoomStateCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_ROOM_STATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPvpType pvp_type = 3;
    if (has_pvp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pvp_type());
    }

    // optional uint64 roomid = 4;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional .Cmd.ERoomState state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 endtime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfRoomStateCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfRoomStateCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfRoomStateCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfRoomStateCCmd::MergeFrom(const NtfRoomStateCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_pvp_type()) {
      set_pvp_type(from.pvp_type());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfRoomStateCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfRoomStateCCmd::CopyFrom(const NtfRoomStateCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfRoomStateCCmd::IsInitialized() const {

  return true;
}

void NtfRoomStateCCmd::Swap(NtfRoomStateCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(pvp_type_, other->pvp_type_);
    std::swap(roomid_, other->roomid_);
    std::swap(state_, other->state_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfRoomStateCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfRoomStateCCmd_descriptor_;
  metadata.reflection = NtfRoomStateCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfFightStatCCmd::kCmdFieldNumber;
const int NtfFightStatCCmd::kParamFieldNumber;
const int NtfFightStatCCmd::kPvpTypeFieldNumber;
const int NtfFightStatCCmd::kStarttimeFieldNumber;
const int NtfFightStatCCmd::kPlayerNumFieldNumber;
const int NtfFightStatCCmd::kScoreFieldNumber;
const int NtfFightStatCCmd::kMyTeamscoreFieldNumber;
const int NtfFightStatCCmd::kEnemyTeamscoreFieldNumber;
const int NtfFightStatCCmd::kRemainHpFieldNumber;
const int NtfFightStatCCmd::kMyrankFieldNumber;
#endif  // !_MSC_VER

NtfFightStatCCmd::NtfFightStatCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfFightStatCCmd)
}

void NtfFightStatCCmd::InitAsDefaultInstance() {
}

NtfFightStatCCmd::NtfFightStatCCmd(const NtfFightStatCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfFightStatCCmd)
}

void NtfFightStatCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 8;
  pvp_type_ = 0;
  starttime_ = 0u;
  player_num_ = 0u;
  score_ = GOOGLE_ULONGLONG(0);
  my_teamscore_ = GOOGLE_ULONGLONG(0);
  enemy_teamscore_ = GOOGLE_ULONGLONG(0);
  remain_hp_ = 0u;
  myrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfFightStatCCmd::~NtfFightStatCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfFightStatCCmd)
  SharedDtor();
}

void NtfFightStatCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfFightStatCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfFightStatCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfFightStatCCmd_descriptor_;
}

const NtfFightStatCCmd& NtfFightStatCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

NtfFightStatCCmd* NtfFightStatCCmd::default_instance_ = NULL;

NtfFightStatCCmd* NtfFightStatCCmd::New() const {
  return new NtfFightStatCCmd;
}

void NtfFightStatCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NtfFightStatCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(pvp_type_, player_num_);
    cmd_ = 61;
    param_ = 8;
    enemy_teamscore_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 768) {
    remain_hp_ = 0u;
    myrank_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfFightStatCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfFightStatCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_FIGHTING_STATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pvp_type;
        break;
      }

      // optional .Cmd.EPvpType pvp_type = 3;
      case 3: {
        if (tag == 24) {
         parse_pvp_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_pvp_type(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 4;
      case 4: {
        if (tag == 32) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_player_num;
        break;
      }

      // optional uint32 player_num = 5;
      case 5: {
        if (tag == 40) {
         parse_player_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_num_)));
          set_has_player_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // optional uint64 score = 6;
      case 6: {
        if (tag == 48) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_my_teamscore;
        break;
      }

      // optional uint64 my_teamscore = 10;
      case 10: {
        if (tag == 80) {
         parse_my_teamscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &my_teamscore_)));
          set_has_my_teamscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_enemy_teamscore;
        break;
      }

      // optional uint64 enemy_teamscore = 11;
      case 11: {
        if (tag == 88) {
         parse_enemy_teamscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enemy_teamscore_)));
          set_has_enemy_teamscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_remain_hp;
        break;
      }

      // optional uint32 remain_hp = 15;
      case 15: {
        if (tag == 120) {
         parse_remain_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_hp_)));
          set_has_remain_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_myrank;
        break;
      }

      // optional uint32 myrank = 16;
      case 16: {
        if (tag == 128) {
         parse_myrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfFightStatCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfFightStatCCmd)
  return false;
#undef DO_
}

void NtfFightStatCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfFightStatCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_FIGHTING_STATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPvpType pvp_type = 3;
  if (has_pvp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->pvp_type(), output);
  }

  // optional uint32 starttime = 4;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starttime(), output);
  }

  // optional uint32 player_num = 5;
  if (has_player_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->player_num(), output);
  }

  // optional uint64 score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->score(), output);
  }

  // optional uint64 my_teamscore = 10;
  if (has_my_teamscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->my_teamscore(), output);
  }

  // optional uint64 enemy_teamscore = 11;
  if (has_enemy_teamscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->enemy_teamscore(), output);
  }

  // optional uint32 remain_hp = 15;
  if (has_remain_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->remain_hp(), output);
  }

  // optional uint32 myrank = 16;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfFightStatCCmd)
}

::google::protobuf::uint8* NtfFightStatCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfFightStatCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_FIGHTING_STATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPvpType pvp_type = 3;
  if (has_pvp_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->pvp_type(), target);
  }

  // optional uint32 starttime = 4;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starttime(), target);
  }

  // optional uint32 player_num = 5;
  if (has_player_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->player_num(), target);
  }

  // optional uint64 score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->score(), target);
  }

  // optional uint64 my_teamscore = 10;
  if (has_my_teamscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->my_teamscore(), target);
  }

  // optional uint64 enemy_teamscore = 11;
  if (has_enemy_teamscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->enemy_teamscore(), target);
  }

  // optional uint32 remain_hp = 15;
  if (has_remain_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->remain_hp(), target);
  }

  // optional uint32 myrank = 16;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfFightStatCCmd)
  return target;
}

int NtfFightStatCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_FIGHTING_STATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPvpType pvp_type = 3;
    if (has_pvp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pvp_type());
    }

    // optional uint32 starttime = 4;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 player_num = 5;
    if (has_player_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_num());
    }

    // optional uint64 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }

    // optional uint64 my_teamscore = 10;
    if (has_my_teamscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->my_teamscore());
    }

    // optional uint64 enemy_teamscore = 11;
    if (has_enemy_teamscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enemy_teamscore());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 remain_hp = 15;
    if (has_remain_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_hp());
    }

    // optional uint32 myrank = 16;
    if (has_myrank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfFightStatCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfFightStatCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfFightStatCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfFightStatCCmd::MergeFrom(const NtfFightStatCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_pvp_type()) {
      set_pvp_type(from.pvp_type());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_player_num()) {
      set_player_num(from.player_num());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_my_teamscore()) {
      set_my_teamscore(from.my_teamscore());
    }
    if (from.has_enemy_teamscore()) {
      set_enemy_teamscore(from.enemy_teamscore());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_remain_hp()) {
      set_remain_hp(from.remain_hp());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfFightStatCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfFightStatCCmd::CopyFrom(const NtfFightStatCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfFightStatCCmd::IsInitialized() const {

  return true;
}

void NtfFightStatCCmd::Swap(NtfFightStatCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(pvp_type_, other->pvp_type_);
    std::swap(starttime_, other->starttime_);
    std::swap(player_num_, other->player_num_);
    std::swap(score_, other->score_);
    std::swap(my_teamscore_, other->my_teamscore_);
    std::swap(enemy_teamscore_, other->enemy_teamscore_);
    std::swap(remain_hp_, other->remain_hp_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfFightStatCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfFightStatCCmd_descriptor_;
  metadata.reflection = NtfFightStatCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinFightingCCmd::kCmdFieldNumber;
const int JoinFightingCCmd::kParamFieldNumber;
const int JoinFightingCCmd::kTypeFieldNumber;
const int JoinFightingCCmd::kRoomidFieldNumber;
const int JoinFightingCCmd::kRetFieldNumber;
#endif  // !_MSC_VER

JoinFightingCCmd::JoinFightingCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.JoinFightingCCmd)
}

void JoinFightingCCmd::InitAsDefaultInstance() {
}

JoinFightingCCmd::JoinFightingCCmd(const JoinFightingCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.JoinFightingCCmd)
}

void JoinFightingCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 9;
  type_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  ret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinFightingCCmd::~JoinFightingCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.JoinFightingCCmd)
  SharedDtor();
}

void JoinFightingCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinFightingCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinFightingCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinFightingCCmd_descriptor_;
}

const JoinFightingCCmd& JoinFightingCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

JoinFightingCCmd* JoinFightingCCmd::default_instance_ = NULL;

JoinFightingCCmd* JoinFightingCCmd::New() const {
  return new JoinFightingCCmd;
}

void JoinFightingCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinFightingCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(roomid_, ret_);
    cmd_ = 61;
    param_ = 9;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinFightingCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.JoinFightingCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_JOIN_FIGHTING];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EPvpType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 4;
      case 4: {
        if (tag == 32) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional bool ret = 5;
      case 5: {
        if (tag == 40) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.JoinFightingCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.JoinFightingCCmd)
  return false;
#undef DO_
}

void JoinFightingCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.JoinFightingCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_JOIN_FIGHTING];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roomid(), output);
  }

  // optional bool ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.JoinFightingCCmd)
}

::google::protobuf::uint8* JoinFightingCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.JoinFightingCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_JOIN_FIGHTING];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->roomid(), target);
  }

  // optional bool ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.JoinFightingCCmd)
  return target;
}

int JoinFightingCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_JOIN_FIGHTING];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPvpType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 roomid = 4;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional bool ret = 5;
    if (has_ret()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinFightingCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinFightingCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinFightingCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinFightingCCmd::MergeFrom(const JoinFightingCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinFightingCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinFightingCCmd::CopyFrom(const JoinFightingCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinFightingCCmd::IsInitialized() const {

  return true;
}

void JoinFightingCCmd::Swap(JoinFightingCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(roomid_, other->roomid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinFightingCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinFightingCCmd_descriptor_;
  metadata.reflection = JoinFightingCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComboNotifyCCmd::kCmdFieldNumber;
const int ComboNotifyCCmd::kParamFieldNumber;
const int ComboNotifyCCmd::kComboNumFieldNumber;
#endif  // !_MSC_VER

ComboNotifyCCmd::ComboNotifyCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ComboNotifyCCmd)
}

void ComboNotifyCCmd::InitAsDefaultInstance() {
}

ComboNotifyCCmd::ComboNotifyCCmd(const ComboNotifyCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ComboNotifyCCmd)
}

void ComboNotifyCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 10;
  combonum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComboNotifyCCmd::~ComboNotifyCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ComboNotifyCCmd)
  SharedDtor();
}

void ComboNotifyCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComboNotifyCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComboNotifyCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComboNotifyCCmd_descriptor_;
}

const ComboNotifyCCmd& ComboNotifyCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

ComboNotifyCCmd* ComboNotifyCCmd::default_instance_ = NULL;

ComboNotifyCCmd* ComboNotifyCCmd::New() const {
  return new ComboNotifyCCmd;
}

void ComboNotifyCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 61;
    param_ = 10;
    combonum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComboNotifyCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ComboNotifyCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_COMBO_KILL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_comboNum;
        break;
      }

      // optional uint32 comboNum = 3;
      case 3: {
        if (tag == 24) {
         parse_comboNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combonum_)));
          set_has_combonum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ComboNotifyCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ComboNotifyCCmd)
  return false;
#undef DO_
}

void ComboNotifyCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ComboNotifyCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_COMBO_KILL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 comboNum = 3;
  if (has_combonum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->combonum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ComboNotifyCCmd)
}

::google::protobuf::uint8* ComboNotifyCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ComboNotifyCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_COMBO_KILL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 comboNum = 3;
  if (has_combonum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->combonum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ComboNotifyCCmd)
  return target;
}

int ComboNotifyCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_COMBO_KILL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 comboNum = 3;
    if (has_combonum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combonum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComboNotifyCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComboNotifyCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComboNotifyCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComboNotifyCCmd::MergeFrom(const ComboNotifyCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_combonum()) {
      set_combonum(from.combonum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComboNotifyCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComboNotifyCCmd::CopyFrom(const ComboNotifyCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComboNotifyCCmd::IsInitialized() const {

  return true;
}

void ComboNotifyCCmd::Swap(ComboNotifyCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(combonum_, other->combonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComboNotifyCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComboNotifyCCmd_descriptor_;
  metadata.reflection = ComboNotifyCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RevChallengeCCmd::kCmdFieldNumber;
const int RevChallengeCCmd::kParamFieldNumber;
const int RevChallengeCCmd::kTypeFieldNumber;
const int RevChallengeCCmd::kRoomidFieldNumber;
const int RevChallengeCCmd::kChallengerFieldNumber;
const int RevChallengeCCmd::kChallengerZoneidFieldNumber;
const int RevChallengeCCmd::kMembersFieldNumber;
const int RevChallengeCCmd::kReplyFieldNumber;
#endif  // !_MSC_VER

RevChallengeCCmd::RevChallengeCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RevChallengeCCmd)
}

void RevChallengeCCmd::InitAsDefaultInstance() {
}

RevChallengeCCmd::RevChallengeCCmd(const RevChallengeCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RevChallengeCCmd)
}

void RevChallengeCCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 11;
  type_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  challenger_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  challenger_zoneid_ = 0u;
  reply_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RevChallengeCCmd::~RevChallengeCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RevChallengeCCmd)
  SharedDtor();
}

void RevChallengeCCmd::SharedDtor() {
  if (challenger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete challenger_;
  }
  if (this != default_instance_) {
  }
}

void RevChallengeCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RevChallengeCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RevChallengeCCmd_descriptor_;
}

const RevChallengeCCmd& RevChallengeCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

RevChallengeCCmd* RevChallengeCCmd::default_instance_ = NULL;

RevChallengeCCmd* RevChallengeCCmd::New() const {
  return new RevChallengeCCmd;
}

void RevChallengeCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RevChallengeCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(roomid_, challenger_zoneid_);
    cmd_ = 61;
    param_ = 11;
    if (has_challenger()) {
      if (challenger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        challenger_->clear();
      }
    }
    reply_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RevChallengeCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RevChallengeCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REV_CHALLENGE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EPvpType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 4;
      case 4: {
        if (tag == 32) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_challenger;
        break;
      }

      // optional string challenger = 5;
      case 5: {
        if (tag == 42) {
         parse_challenger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_challenger()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->challenger().data(), this->challenger().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "challenger");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_challenger_zoneid;
        break;
      }

      // optional uint32 challenger_zoneid = 6;
      case 6: {
        if (tag == 48) {
         parse_challenger_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenger_zoneid_)));
          set_has_challenger_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_members;
        break;
      }

      // repeated .Cmd.TeamMember members = 7;
      case 7: {
        if (tag == 58) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_members;
        if (input->ExpectTag(64)) goto parse_reply;
        break;
      }

      // optional .Cmd.EMatchReply reply = 8;
      case 8: {
        if (tag == 64) {
         parse_reply:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EMatchReply_IsValid(value)) {
            set_reply(static_cast< ::Cmd::EMatchReply >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RevChallengeCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RevChallengeCCmd)
  return false;
#undef DO_
}

void RevChallengeCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RevChallengeCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REV_CHALLENGE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roomid(), output);
  }

  // optional string challenger = 5;
  if (has_challenger()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->challenger().data(), this->challenger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "challenger");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->challenger(), output);
  }

  // optional uint32 challenger_zoneid = 6;
  if (has_challenger_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->challenger_zoneid(), output);
  }

  // repeated .Cmd.TeamMember members = 7;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->members(i), output);
  }

  // optional .Cmd.EMatchReply reply = 8;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RevChallengeCCmd)
}

::google::protobuf::uint8* RevChallengeCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RevChallengeCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REV_CHALLENGE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->roomid(), target);
  }

  // optional string challenger = 5;
  if (has_challenger()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->challenger().data(), this->challenger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "challenger");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->challenger(), target);
  }

  // optional uint32 challenger_zoneid = 6;
  if (has_challenger_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->challenger_zoneid(), target);
  }

  // repeated .Cmd.TeamMember members = 7;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->members(i), target);
  }

  // optional .Cmd.EMatchReply reply = 8;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RevChallengeCCmd)
  return target;
}

int RevChallengeCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REV_CHALLENGE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPvpType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 roomid = 4;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional string challenger = 5;
    if (has_challenger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->challenger());
    }

    // optional uint32 challenger_zoneid = 6;
    if (has_challenger_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenger_zoneid());
    }

    // optional .Cmd.EMatchReply reply = 8;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reply());
    }

  }
  // repeated .Cmd.TeamMember members = 7;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RevChallengeCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RevChallengeCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RevChallengeCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RevChallengeCCmd::MergeFrom(const RevChallengeCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_challenger()) {
      set_challenger(from.challenger());
    }
    if (from.has_challenger_zoneid()) {
      set_challenger_zoneid(from.challenger_zoneid());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RevChallengeCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevChallengeCCmd::CopyFrom(const RevChallengeCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevChallengeCCmd::IsInitialized() const {

  return true;
}

void RevChallengeCCmd::Swap(RevChallengeCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(roomid_, other->roomid_);
    std::swap(challenger_, other->challenger_);
    std::swap(challenger_zoneid_, other->challenger_zoneid_);
    members_.Swap(&other->members_);
    std::swap(reply_, other->reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RevChallengeCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RevChallengeCCmd_descriptor_;
  metadata.reflection = RevChallengeCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickTeamCCmd::kCmdFieldNumber;
const int KickTeamCCmd::kParamFieldNumber;
const int KickTeamCCmd::kTypeFieldNumber;
const int KickTeamCCmd::kRoomidFieldNumber;
const int KickTeamCCmd::kZoneidFieldNumber;
const int KickTeamCCmd::kTeamidFieldNumber;
#endif  // !_MSC_VER

KickTeamCCmd::KickTeamCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.KickTeamCCmd)
}

void KickTeamCCmd::InitAsDefaultInstance() {
}

KickTeamCCmd::KickTeamCCmd(const KickTeamCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.KickTeamCCmd)
}

void KickTeamCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 12;
  type_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickTeamCCmd::~KickTeamCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.KickTeamCCmd)
  SharedDtor();
}

void KickTeamCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickTeamCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickTeamCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickTeamCCmd_descriptor_;
}

const KickTeamCCmd& KickTeamCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

KickTeamCCmd* KickTeamCCmd::default_instance_ = NULL;

KickTeamCCmd* KickTeamCCmd::New() const {
  return new KickTeamCCmd;
}

void KickTeamCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KickTeamCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(roomid_, type_);
    cmd_ = 61;
    param_ = 12;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickTeamCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.KickTeamCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_KICK_TEAM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EPvpType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 4;
      case 4: {
        if (tag == 32) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // optional uint64 zoneid = 5;
      case 5: {
        if (tag == 40) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 6;
      case 6: {
        if (tag == 48) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.KickTeamCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.KickTeamCCmd)
  return false;
#undef DO_
}

void KickTeamCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.KickTeamCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_KICK_TEAM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roomid(), output);
  }

  // optional uint64 zoneid = 5;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->zoneid(), output);
  }

  // optional uint64 teamid = 6;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.KickTeamCCmd)
}

::google::protobuf::uint8* KickTeamCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.KickTeamCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_KICK_TEAM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->roomid(), target);
  }

  // optional uint64 zoneid = 5;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->zoneid(), target);
  }

  // optional uint64 teamid = 6;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.KickTeamCCmd)
  return target;
}

int KickTeamCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_KICK_TEAM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPvpType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 roomid = 4;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 zoneid = 5;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->zoneid());
    }

    // optional uint64 teamid = 6;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickTeamCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickTeamCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickTeamCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickTeamCCmd::MergeFrom(const KickTeamCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickTeamCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickTeamCCmd::CopyFrom(const KickTeamCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickTeamCCmd::IsInitialized() const {

  return true;
}

void KickTeamCCmd::Swap(KickTeamCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(roomid_, other->roomid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickTeamCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickTeamCCmd_descriptor_;
  metadata.reflection = KickTeamCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightConfirmCCmd::kCmdFieldNumber;
const int FightConfirmCCmd::kParamFieldNumber;
const int FightConfirmCCmd::kTypeFieldNumber;
const int FightConfirmCCmd::kRoomidFieldNumber;
const int FightConfirmCCmd::kTeamidFieldNumber;
const int FightConfirmCCmd::kReplyFieldNumber;
const int FightConfirmCCmd::kChallengerFieldNumber;
#endif  // !_MSC_VER

FightConfirmCCmd::FightConfirmCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FightConfirmCCmd)
}

void FightConfirmCCmd::InitAsDefaultInstance() {
}

FightConfirmCCmd::FightConfirmCCmd(const FightConfirmCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FightConfirmCCmd)
}

void FightConfirmCCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 13;
  type_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  reply_ = 1;
  challenger_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightConfirmCCmd::~FightConfirmCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FightConfirmCCmd)
  SharedDtor();
}

void FightConfirmCCmd::SharedDtor() {
  if (challenger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete challenger_;
  }
  if (this != default_instance_) {
  }
}

void FightConfirmCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightConfirmCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightConfirmCCmd_descriptor_;
}

const FightConfirmCCmd& FightConfirmCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

FightConfirmCCmd* FightConfirmCCmd::default_instance_ = NULL;

FightConfirmCCmd* FightConfirmCCmd::New() const {
  return new FightConfirmCCmd;
}

void FightConfirmCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FightConfirmCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(roomid_, type_);
    cmd_ = 61;
    param_ = 13;
    teamid_ = GOOGLE_ULONGLONG(0);
    reply_ = 1;
    if (has_challenger()) {
      if (challenger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        challenger_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightConfirmCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FightConfirmCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_FIGHT_CONFIRM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EPvpType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 4;
      case 4: {
        if (tag == 32) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 5;
      case 5: {
        if (tag == 40) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reply;
        break;
      }

      // optional .Cmd.EMatchReply reply = 6;
      case 6: {
        if (tag == 48) {
         parse_reply:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EMatchReply_IsValid(value)) {
            set_reply(static_cast< ::Cmd::EMatchReply >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_challenger;
        break;
      }

      // optional string challenger = 7;
      case 7: {
        if (tag == 58) {
         parse_challenger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_challenger()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->challenger().data(), this->challenger().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "challenger");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FightConfirmCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FightConfirmCCmd)
  return false;
#undef DO_
}

void FightConfirmCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FightConfirmCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_FIGHT_CONFIRM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roomid(), output);
  }

  // optional uint64 teamid = 5;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->teamid(), output);
  }

  // optional .Cmd.EMatchReply reply = 6;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->reply(), output);
  }

  // optional string challenger = 7;
  if (has_challenger()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->challenger().data(), this->challenger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "challenger");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->challenger(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FightConfirmCCmd)
}

::google::protobuf::uint8* FightConfirmCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FightConfirmCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_FIGHT_CONFIRM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPvpType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->roomid(), target);
  }

  // optional uint64 teamid = 5;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->teamid(), target);
  }

  // optional .Cmd.EMatchReply reply = 6;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->reply(), target);
  }

  // optional string challenger = 7;
  if (has_challenger()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->challenger().data(), this->challenger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "challenger");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->challenger(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FightConfirmCCmd)
  return target;
}

int FightConfirmCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_FIGHT_CONFIRM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPvpType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 roomid = 4;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 teamid = 5;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .Cmd.EMatchReply reply = 6;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reply());
    }

    // optional string challenger = 7;
    if (has_challenger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->challenger());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightConfirmCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightConfirmCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightConfirmCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightConfirmCCmd::MergeFrom(const FightConfirmCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
    if (from.has_challenger()) {
      set_challenger(from.challenger());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightConfirmCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightConfirmCCmd::CopyFrom(const FightConfirmCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightConfirmCCmd::IsInitialized() const {

  return true;
}

void FightConfirmCCmd::Swap(FightConfirmCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(reply_, other->reply_);
    std::swap(challenger_, other->challenger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightConfirmCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightConfirmCCmd_descriptor_;
  metadata.reflection = FightConfirmCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankInfo::kCharidFieldNumber;
const int RankInfo::kIndexFieldNumber;
const int RankInfo::kRankFieldNumber;
const int RankInfo::kNameFieldNumber;
#endif  // !_MSC_VER

RankInfo::RankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RankInfo)
}

void RankInfo::InitAsDefaultInstance() {
}

RankInfo::RankInfo(const RankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RankInfo)
}

void RankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  index_ = 0u;
  rank_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankInfo::~RankInfo() {
  // @@protoc_insertion_point(destructor:Cmd.RankInfo)
  SharedDtor();
}

void RankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankInfo_descriptor_;
}

const RankInfo& RankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

RankInfo* RankInfo::default_instance_ = NULL;

RankInfo* RankInfo::New() const {
  return new RankInfo;
}

void RankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, rank_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 3;
      case 3: {
        if (tag == 24) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RankInfo)
  return false;
#undef DO_
}

void RankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RankInfo)
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RankInfo)
}

::google::protobuf::uint8* RankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RankInfo)
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RankInfo)
  return target;
}

int RankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankInfo::MergeFrom(const RankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankInfo::CopyFrom(const RankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankInfo::IsInitialized() const {

  return true;
}

void RankInfo::Swap(RankInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(index_, other->index_);
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankInfo_descriptor_;
  metadata.reflection = RankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardInfo::kItemidFieldNumber;
const int RewardInfo::kCountFieldNumber;
#endif  // !_MSC_VER

RewardInfo::RewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RewardInfo)
}

void RewardInfo::InitAsDefaultInstance() {
}

RewardInfo::RewardInfo(const RewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RewardInfo)
}

void RewardInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardInfo::~RewardInfo() {
  // @@protoc_insertion_point(destructor:Cmd.RewardInfo)
  SharedDtor();
}

void RewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardInfo_descriptor_;
}

const RewardInfo& RewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

RewardInfo* RewardInfo::default_instance_ = NULL;

RewardInfo* RewardInfo::New() const {
  return new RewardInfo;
}

void RewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RewardInfo)
  return false;
#undef DO_
}

void RewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RewardInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RewardInfo)
}

::google::protobuf::uint8* RewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RewardInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RewardInfo)
  return target;
}

int RewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardInfo::MergeFrom(const RewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardInfo::CopyFrom(const RewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardInfo::IsInitialized() const {

  return true;
}

void RewardInfo::Swap(RewardInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardInfo_descriptor_;
  metadata.reflection = RewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpResultCCmd::kCmdFieldNumber;
const int PvpResultCCmd::kParamFieldNumber;
const int PvpResultCCmd::kTypeFieldNumber;
const int PvpResultCCmd::kResultFieldNumber;
const int PvpResultCCmd::kRankFieldNumber;
const int PvpResultCCmd::kRewardFieldNumber;
const int PvpResultCCmd::kAppleFieldNumber;
#endif  // !_MSC_VER

PvpResultCCmd::PvpResultCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PvpResultCCmd)
}

void PvpResultCCmd::InitAsDefaultInstance() {
}

PvpResultCCmd::PvpResultCCmd(const PvpResultCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PvpResultCCmd)
}

void PvpResultCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 14;
  type_ = 0;
  result_ = 0;
  apple_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpResultCCmd::~PvpResultCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PvpResultCCmd)
  SharedDtor();
}

void PvpResultCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpResultCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpResultCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpResultCCmd_descriptor_;
}

const PvpResultCCmd& PvpResultCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

PvpResultCCmd* PvpResultCCmd::default_instance_ = NULL;

PvpResultCCmd* PvpResultCCmd::New() const {
  return new PvpResultCCmd;
}

void PvpResultCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PvpResultCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 79) {
    ZR_(type_, result_);
    cmd_ = 61;
    param_ = 14;
    apple_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rank_.Clear();
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpResultCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PvpResultCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_RESULT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .Cmd.EPvpType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // required .Cmd.EPvpResult result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpResult_IsValid(value)) {
            set_result(static_cast< ::Cmd::EPvpResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rank;
        break;
      }

      // repeated .Cmd.RankInfo rank = 5;
      case 5: {
        if (tag == 42) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rank;
        if (input->ExpectTag(50)) goto parse_reward;
        break;
      }

      // repeated .Cmd.RewardInfo reward = 6;
      case 6: {
        if (tag == 50) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_reward;
        if (input->ExpectTag(56)) goto parse_apple;
        break;
      }

      // optional uint32 apple = 7;
      case 7: {
        if (tag == 56) {
         parse_apple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apple_)));
          set_has_apple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PvpResultCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PvpResultCCmd)
  return false;
#undef DO_
}

void PvpResultCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PvpResultCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_RESULT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required .Cmd.EPvpType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required .Cmd.EPvpResult result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // repeated .Cmd.RankInfo rank = 5;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rank(i), output);
  }

  // repeated .Cmd.RewardInfo reward = 6;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->reward(i), output);
  }

  // optional uint32 apple = 7;
  if (has_apple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->apple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PvpResultCCmd)
}

::google::protobuf::uint8* PvpResultCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PvpResultCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_RESULT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required .Cmd.EPvpType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required .Cmd.EPvpResult result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // repeated .Cmd.RankInfo rank = 5;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rank(i), target);
  }

  // repeated .Cmd.RewardInfo reward = 6;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->reward(i), target);
  }

  // optional uint32 apple = 7;
  if (has_apple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->apple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PvpResultCCmd)
  return target;
}

int PvpResultCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_RESULT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required .Cmd.EPvpType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .Cmd.EPvpResult result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 apple = 7;
    if (has_apple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apple());
    }

  }
  // repeated .Cmd.RankInfo rank = 5;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  // repeated .Cmd.RewardInfo reward = 6;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpResultCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpResultCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpResultCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpResultCCmd::MergeFrom(const PvpResultCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_apple()) {
      set_apple(from.apple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpResultCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpResultCCmd::CopyFrom(const PvpResultCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpResultCCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void PvpResultCCmd::Swap(PvpResultCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    rank_.Swap(&other->rank_);
    reward_.Swap(&other->reward_);
    std::swap(apple_, other->apple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpResultCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpResultCCmd_descriptor_;
  metadata.reflection = PvpResultCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchTeamMemUpdateInfo::kZoneidFieldNumber;
const int MatchTeamMemUpdateInfo::kTeamidFieldNumber;
const int MatchTeamMemUpdateInfo::kRoomidFieldNumber;
const int MatchTeamMemUpdateInfo::kIsfirstFieldNumber;
const int MatchTeamMemUpdateInfo::kUpdatesFieldNumber;
const int MatchTeamMemUpdateInfo::kDeletesFieldNumber;
const int MatchTeamMemUpdateInfo::kIndexFieldNumber;
const int MatchTeamMemUpdateInfo::kTeamnameFieldNumber;
#endif  // !_MSC_VER

MatchTeamMemUpdateInfo::MatchTeamMemUpdateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MatchTeamMemUpdateInfo)
}

void MatchTeamMemUpdateInfo::InitAsDefaultInstance() {
}

MatchTeamMemUpdateInfo::MatchTeamMemUpdateInfo(const MatchTeamMemUpdateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MatchTeamMemUpdateInfo)
}

void MatchTeamMemUpdateInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  zoneid_ = 0u;
  teamid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  isfirst_ = false;
  index_ = 0u;
  teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchTeamMemUpdateInfo::~MatchTeamMemUpdateInfo() {
  // @@protoc_insertion_point(destructor:Cmd.MatchTeamMemUpdateInfo)
  SharedDtor();
}

void MatchTeamMemUpdateInfo::SharedDtor() {
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete teamname_;
  }
  if (this != default_instance_) {
  }
}

void MatchTeamMemUpdateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchTeamMemUpdateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchTeamMemUpdateInfo_descriptor_;
}

const MatchTeamMemUpdateInfo& MatchTeamMemUpdateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

MatchTeamMemUpdateInfo* MatchTeamMemUpdateInfo::default_instance_ = NULL;

MatchTeamMemUpdateInfo* MatchTeamMemUpdateInfo::New() const {
  return new MatchTeamMemUpdateInfo;
}

void MatchTeamMemUpdateInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MatchTeamMemUpdateInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 207) {
    ZR_(teamid_, roomid_);
    index_ = 0u;
    if (has_teamname()) {
      if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        teamname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  updates_.Clear();
  deletes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchTeamMemUpdateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MatchTeamMemUpdateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 4;
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 5;
      case 5: {
        if (tag == 40) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isfirst;
        break;
      }

      // optional bool isfirst = 6;
      case 6: {
        if (tag == 48) {
         parse_isfirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirst_)));
          set_has_isfirst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_updates;
        break;
      }

      // repeated .Cmd.TeamMember updates = 7;
      case 7: {
        if (tag == 58) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_updates;
        if (input->ExpectTag(64)) goto parse_deletes;
        break;
      }

      // repeated uint64 deletes = 8;
      case 8: {
        if (tag == 64) {
         parse_deletes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64, input, this->mutable_deletes())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_deletes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_deletes;
        if (input->ExpectTag(72)) goto parse_index;
        break;
      }

      // optional uint32 index = 9;
      case 9: {
        if (tag == 72) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_teamname;
        break;
      }

      // optional string teamname = 10;
      case 10: {
        if (tag == 82) {
         parse_teamname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamname().data(), this->teamname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "teamname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MatchTeamMemUpdateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MatchTeamMemUpdateInfo)
  return false;
#undef DO_
}

void MatchTeamMemUpdateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MatchTeamMemUpdateInfo)
  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint64 teamid = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  // optional uint64 roomid = 5;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->roomid(), output);
  }

  // optional bool isfirst = 6;
  if (has_isfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isfirst(), output);
  }

  // repeated .Cmd.TeamMember updates = 7;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->updates(i), output);
  }

  // repeated uint64 deletes = 8;
  for (int i = 0; i < this->deletes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->deletes(i), output);
  }

  // optional uint32 index = 9;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->index(), output);
  }

  // optional string teamname = 10;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->teamname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MatchTeamMemUpdateInfo)
}

::google::protobuf::uint8* MatchTeamMemUpdateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MatchTeamMemUpdateInfo)
  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint64 teamid = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  // optional uint64 roomid = 5;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->roomid(), target);
  }

  // optional bool isfirst = 6;
  if (has_isfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isfirst(), target);
  }

  // repeated .Cmd.TeamMember updates = 7;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->updates(i), target);
  }

  // repeated uint64 deletes = 8;
  for (int i = 0; i < this->deletes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(8, this->deletes(i), target);
  }

  // optional uint32 index = 9;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->index(), target);
  }

  // optional string teamname = 10;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->teamname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MatchTeamMemUpdateInfo)
  return target;
}

int MatchTeamMemUpdateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 teamid = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 roomid = 5;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional bool isfirst = 6;
    if (has_isfirst()) {
      total_size += 1 + 1;
    }

    // optional uint32 index = 9;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional string teamname = 10;
    if (has_teamname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamname());
    }

  }
  // repeated .Cmd.TeamMember updates = 7;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated uint64 deletes = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->deletes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->deletes(i));
    }
    total_size += 1 * this->deletes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchTeamMemUpdateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchTeamMemUpdateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchTeamMemUpdateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchTeamMemUpdateInfo::MergeFrom(const MatchTeamMemUpdateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  deletes_.MergeFrom(from.deletes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_isfirst()) {
      set_isfirst(from.isfirst());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_teamname()) {
      set_teamname(from.teamname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchTeamMemUpdateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchTeamMemUpdateInfo::CopyFrom(const MatchTeamMemUpdateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchTeamMemUpdateInfo::IsInitialized() const {

  return true;
}

void MatchTeamMemUpdateInfo::Swap(MatchTeamMemUpdateInfo* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(teamid_, other->teamid_);
    std::swap(roomid_, other->roomid_);
    std::swap(isfirst_, other->isfirst_);
    updates_.Swap(&other->updates_);
    deletes_.Swap(&other->deletes_);
    std::swap(index_, other->index_);
    std::swap(teamname_, other->teamname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchTeamMemUpdateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchTeamMemUpdateInfo_descriptor_;
  metadata.reflection = MatchTeamMemUpdateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpTeamMemberUpdateCCmd::kCmdFieldNumber;
const int PvpTeamMemberUpdateCCmd::kParamFieldNumber;
const int PvpTeamMemberUpdateCCmd::kDataFieldNumber;
#endif  // !_MSC_VER

PvpTeamMemberUpdateCCmd::PvpTeamMemberUpdateCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PvpTeamMemberUpdateCCmd)
}

void PvpTeamMemberUpdateCCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::MatchTeamMemUpdateInfo*>(&::Cmd::MatchTeamMemUpdateInfo::default_instance());
}

PvpTeamMemberUpdateCCmd::PvpTeamMemberUpdateCCmd(const PvpTeamMemberUpdateCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PvpTeamMemberUpdateCCmd)
}

void PvpTeamMemberUpdateCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 15;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpTeamMemberUpdateCCmd::~PvpTeamMemberUpdateCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PvpTeamMemberUpdateCCmd)
  SharedDtor();
}

void PvpTeamMemberUpdateCCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void PvpTeamMemberUpdateCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpTeamMemberUpdateCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpTeamMemberUpdateCCmd_descriptor_;
}

const PvpTeamMemberUpdateCCmd& PvpTeamMemberUpdateCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

PvpTeamMemberUpdateCCmd* PvpTeamMemberUpdateCCmd::default_instance_ = NULL;

PvpTeamMemberUpdateCCmd* PvpTeamMemberUpdateCCmd::New() const {
  return new PvpTeamMemberUpdateCCmd;
}

void PvpTeamMemberUpdateCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 61;
    param_ = 15;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::MatchTeamMemUpdateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpTeamMemberUpdateCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PvpTeamMemberUpdateCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_MEMBERUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.MatchTeamMemUpdateInfo data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PvpTeamMemberUpdateCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PvpTeamMemberUpdateCCmd)
  return false;
#undef DO_
}

void PvpTeamMemberUpdateCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PvpTeamMemberUpdateCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_MEMBERUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.MatchTeamMemUpdateInfo data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PvpTeamMemberUpdateCCmd)
}

::google::protobuf::uint8* PvpTeamMemberUpdateCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PvpTeamMemberUpdateCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_MEMBERUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.MatchTeamMemUpdateInfo data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PvpTeamMemberUpdateCCmd)
  return target;
}

int PvpTeamMemberUpdateCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_MEMBERUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.MatchTeamMemUpdateInfo data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpTeamMemberUpdateCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpTeamMemberUpdateCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpTeamMemberUpdateCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpTeamMemberUpdateCCmd::MergeFrom(const PvpTeamMemberUpdateCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::MatchTeamMemUpdateInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpTeamMemberUpdateCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpTeamMemberUpdateCCmd::CopyFrom(const PvpTeamMemberUpdateCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpTeamMemberUpdateCCmd::IsInitialized() const {

  return true;
}

void PvpTeamMemberUpdateCCmd::Swap(PvpTeamMemberUpdateCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpTeamMemberUpdateCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpTeamMemberUpdateCCmd_descriptor_;
  metadata.reflection = PvpTeamMemberUpdateCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchTeamMemDataUpdateInfo::kZoneidFieldNumber;
const int MatchTeamMemDataUpdateInfo::kTeamidFieldNumber;
const int MatchTeamMemDataUpdateInfo::kCharidFieldNumber;
const int MatchTeamMemDataUpdateInfo::kRoomidFieldNumber;
const int MatchTeamMemDataUpdateInfo::kMembersFieldNumber;
#endif  // !_MSC_VER

MatchTeamMemDataUpdateInfo::MatchTeamMemDataUpdateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MatchTeamMemDataUpdateInfo)
}

void MatchTeamMemDataUpdateInfo::InitAsDefaultInstance() {
}

MatchTeamMemDataUpdateInfo::MatchTeamMemDataUpdateInfo(const MatchTeamMemDataUpdateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MatchTeamMemDataUpdateInfo)
}

void MatchTeamMemDataUpdateInfo::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  teamid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchTeamMemDataUpdateInfo::~MatchTeamMemDataUpdateInfo() {
  // @@protoc_insertion_point(destructor:Cmd.MatchTeamMemDataUpdateInfo)
  SharedDtor();
}

void MatchTeamMemDataUpdateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchTeamMemDataUpdateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchTeamMemDataUpdateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchTeamMemDataUpdateInfo_descriptor_;
}

const MatchTeamMemDataUpdateInfo& MatchTeamMemDataUpdateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

MatchTeamMemDataUpdateInfo* MatchTeamMemDataUpdateInfo::default_instance_ = NULL;

MatchTeamMemDataUpdateInfo* MatchTeamMemDataUpdateInfo::New() const {
  return new MatchTeamMemDataUpdateInfo;
}

void MatchTeamMemDataUpdateInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MatchTeamMemDataUpdateInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(teamid_, roomid_);
    zoneid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchTeamMemDataUpdateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MatchTeamMemDataUpdateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 4;
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 5;
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 6;
      case 6: {
        if (tag == 48) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_members;
        break;
      }

      // repeated .Cmd.MemberData members = 7;
      case 7: {
        if (tag == 58) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_members;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MatchTeamMemDataUpdateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MatchTeamMemDataUpdateInfo)
  return false;
#undef DO_
}

void MatchTeamMemDataUpdateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MatchTeamMemDataUpdateInfo)
  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint64 teamid = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid(), output);
  }

  // optional uint64 roomid = 6;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->roomid(), output);
  }

  // repeated .Cmd.MemberData members = 7;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MatchTeamMemDataUpdateInfo)
}

::google::protobuf::uint8* MatchTeamMemDataUpdateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MatchTeamMemDataUpdateInfo)
  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint64 teamid = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid(), target);
  }

  // optional uint64 roomid = 6;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->roomid(), target);
  }

  // repeated .Cmd.MemberData members = 7;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MatchTeamMemDataUpdateInfo)
  return target;
}

int MatchTeamMemDataUpdateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 teamid = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 roomid = 6;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  // repeated .Cmd.MemberData members = 7;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchTeamMemDataUpdateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchTeamMemDataUpdateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchTeamMemDataUpdateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchTeamMemDataUpdateInfo::MergeFrom(const MatchTeamMemDataUpdateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchTeamMemDataUpdateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchTeamMemDataUpdateInfo::CopyFrom(const MatchTeamMemDataUpdateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchTeamMemDataUpdateInfo::IsInitialized() const {

  return true;
}

void MatchTeamMemDataUpdateInfo::Swap(MatchTeamMemDataUpdateInfo* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(teamid_, other->teamid_);
    std::swap(charid_, other->charid_);
    std::swap(roomid_, other->roomid_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchTeamMemDataUpdateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchTeamMemDataUpdateInfo_descriptor_;
  metadata.reflection = MatchTeamMemDataUpdateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpMemberDataUpdateCCmd::kCmdFieldNumber;
const int PvpMemberDataUpdateCCmd::kParamFieldNumber;
const int PvpMemberDataUpdateCCmd::kDataFieldNumber;
#endif  // !_MSC_VER

PvpMemberDataUpdateCCmd::PvpMemberDataUpdateCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PvpMemberDataUpdateCCmd)
}

void PvpMemberDataUpdateCCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::MatchTeamMemDataUpdateInfo*>(&::Cmd::MatchTeamMemDataUpdateInfo::default_instance());
}

PvpMemberDataUpdateCCmd::PvpMemberDataUpdateCCmd(const PvpMemberDataUpdateCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PvpMemberDataUpdateCCmd)
}

void PvpMemberDataUpdateCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 16;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpMemberDataUpdateCCmd::~PvpMemberDataUpdateCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PvpMemberDataUpdateCCmd)
  SharedDtor();
}

void PvpMemberDataUpdateCCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void PvpMemberDataUpdateCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpMemberDataUpdateCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpMemberDataUpdateCCmd_descriptor_;
}

const PvpMemberDataUpdateCCmd& PvpMemberDataUpdateCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

PvpMemberDataUpdateCCmd* PvpMemberDataUpdateCCmd::default_instance_ = NULL;

PvpMemberDataUpdateCCmd* PvpMemberDataUpdateCCmd::New() const {
  return new PvpMemberDataUpdateCCmd;
}

void PvpMemberDataUpdateCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 61;
    param_ = 16;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::MatchTeamMemDataUpdateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpMemberDataUpdateCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PvpMemberDataUpdateCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_MEMBERDATAUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.MatchTeamMemDataUpdateInfo data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PvpMemberDataUpdateCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PvpMemberDataUpdateCCmd)
  return false;
#undef DO_
}

void PvpMemberDataUpdateCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PvpMemberDataUpdateCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_MEMBERDATAUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.MatchTeamMemDataUpdateInfo data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PvpMemberDataUpdateCCmd)
}

::google::protobuf::uint8* PvpMemberDataUpdateCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PvpMemberDataUpdateCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_MEMBERDATAUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.MatchTeamMemDataUpdateInfo data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PvpMemberDataUpdateCCmd)
  return target;
}

int PvpMemberDataUpdateCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_MEMBERDATAUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.MatchTeamMemDataUpdateInfo data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpMemberDataUpdateCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpMemberDataUpdateCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpMemberDataUpdateCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpMemberDataUpdateCCmd::MergeFrom(const PvpMemberDataUpdateCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::MatchTeamMemDataUpdateInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpMemberDataUpdateCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpMemberDataUpdateCCmd::CopyFrom(const PvpMemberDataUpdateCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpMemberDataUpdateCCmd::IsInitialized() const {

  return true;
}

void PvpMemberDataUpdateCCmd::Swap(PvpMemberDataUpdateCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpMemberDataUpdateCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpMemberDataUpdateCCmd_descriptor_;
  metadata.reflection = PvpMemberDataUpdateCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfMatchInfoCCmd::kCmdFieldNumber;
const int NtfMatchInfoCCmd::kParamFieldNumber;
const int NtfMatchInfoCCmd::kEtypeFieldNumber;
const int NtfMatchInfoCCmd::kIsmatchFieldNumber;
const int NtfMatchInfoCCmd::kIsfightFieldNumber;
#endif  // !_MSC_VER

NtfMatchInfoCCmd::NtfMatchInfoCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfMatchInfoCCmd)
}

void NtfMatchInfoCCmd::InitAsDefaultInstance() {
}

NtfMatchInfoCCmd::NtfMatchInfoCCmd(const NtfMatchInfoCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfMatchInfoCCmd)
}

void NtfMatchInfoCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 17;
  etype_ = 4;
  ismatch_ = false;
  isfight_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfMatchInfoCCmd::~NtfMatchInfoCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfMatchInfoCCmd)
  SharedDtor();
}

void NtfMatchInfoCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfMatchInfoCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfMatchInfoCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfMatchInfoCCmd_descriptor_;
}

const NtfMatchInfoCCmd& NtfMatchInfoCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

NtfMatchInfoCCmd* NtfMatchInfoCCmd::default_instance_ = NULL;

NtfMatchInfoCCmd* NtfMatchInfoCCmd::New() const {
  return new NtfMatchInfoCCmd;
}

void NtfMatchInfoCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NtfMatchInfoCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ismatch_, isfight_);
    cmd_ = 61;
    param_ = 17;
    etype_ = 4;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfMatchInfoCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfMatchInfoCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_MATCHINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_etype;
        break;
      }

      // optional .Cmd.EPvpType etype = 3 [default = EPVPTYPE_POLLY];
      case 3: {
        if (tag == 24) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ismatch;
        break;
      }

      // optional bool ismatch = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_ismatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismatch_)));
          set_has_ismatch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isfight;
        break;
      }

      // optional bool isfight = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_isfight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfight_)));
          set_has_isfight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfMatchInfoCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfMatchInfoCCmd)
  return false;
#undef DO_
}

void NtfMatchInfoCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfMatchInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_MATCHINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPvpType etype = 3 [default = EPVPTYPE_POLLY];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->etype(), output);
  }

  // optional bool ismatch = 4 [default = false];
  if (has_ismatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ismatch(), output);
  }

  // optional bool isfight = 5 [default = false];
  if (has_isfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isfight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfMatchInfoCCmd)
}

::google::protobuf::uint8* NtfMatchInfoCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfMatchInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_MATCHINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPvpType etype = 3 [default = EPVPTYPE_POLLY];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->etype(), target);
  }

  // optional bool ismatch = 4 [default = false];
  if (has_ismatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ismatch(), target);
  }

  // optional bool isfight = 5 [default = false];
  if (has_isfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isfight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfMatchInfoCCmd)
  return target;
}

int NtfMatchInfoCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_MATCHINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPvpType etype = 3 [default = EPVPTYPE_POLLY];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional bool ismatch = 4 [default = false];
    if (has_ismatch()) {
      total_size += 1 + 1;
    }

    // optional bool isfight = 5 [default = false];
    if (has_isfight()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfMatchInfoCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfMatchInfoCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfMatchInfoCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfMatchInfoCCmd::MergeFrom(const NtfMatchInfoCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_ismatch()) {
      set_ismatch(from.ismatch());
    }
    if (from.has_isfight()) {
      set_isfight(from.isfight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfMatchInfoCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfMatchInfoCCmd::CopyFrom(const NtfMatchInfoCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfMatchInfoCCmd::IsInitialized() const {

  return true;
}

void NtfMatchInfoCCmd::Swap(NtfMatchInfoCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(etype_, other->etype_);
    std::swap(ismatch_, other->ismatch_);
    std::swap(isfight_, other->isfight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfMatchInfoCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfMatchInfoCCmd_descriptor_;
  metadata.reflection = NtfMatchInfoCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEndTimeCCmd::kCmdFieldNumber;
const int GodEndTimeCCmd::kParamFieldNumber;
const int GodEndTimeCCmd::kEndtimeFieldNumber;
#endif  // !_MSC_VER

GodEndTimeCCmd::GodEndTimeCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GodEndTimeCCmd)
}

void GodEndTimeCCmd::InitAsDefaultInstance() {
}

GodEndTimeCCmd::GodEndTimeCCmd(const GodEndTimeCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GodEndTimeCCmd)
}

void GodEndTimeCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 18;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEndTimeCCmd::~GodEndTimeCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GodEndTimeCCmd)
  SharedDtor();
}

void GodEndTimeCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEndTimeCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEndTimeCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEndTimeCCmd_descriptor_;
}

const GodEndTimeCCmd& GodEndTimeCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

GodEndTimeCCmd* GodEndTimeCCmd::default_instance_ = NULL;

GodEndTimeCCmd* GodEndTimeCCmd::New() const {
  return new GodEndTimeCCmd;
}

void GodEndTimeCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 61;
    param_ = 18;
    endtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEndTimeCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GodEndTimeCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_GOD_ENDTIME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 3;
      case 3: {
        if (tag == 24) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GodEndTimeCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GodEndTimeCCmd)
  return false;
#undef DO_
}

void GodEndTimeCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GodEndTimeCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_GOD_ENDTIME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 endtime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GodEndTimeCCmd)
}

::google::protobuf::uint8* GodEndTimeCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GodEndTimeCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_GOD_ENDTIME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 endtime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GodEndTimeCCmd)
  return target;
}

int GodEndTimeCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_GOD_ENDTIME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 endtime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEndTimeCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEndTimeCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEndTimeCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEndTimeCCmd::MergeFrom(const GodEndTimeCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEndTimeCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEndTimeCCmd::CopyFrom(const GodEndTimeCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEndTimeCCmd::IsInitialized() const {

  return true;
}

void GodEndTimeCCmd::Swap(GodEndTimeCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEndTimeCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEndTimeCCmd_descriptor_;
  metadata.reflection = GodEndTimeCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankNameInfo::kNameFieldNumber;
const int RankNameInfo::kAppleFieldNumber;
#endif  // !_MSC_VER

RankNameInfo::RankNameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RankNameInfo)
}

void RankNameInfo::InitAsDefaultInstance() {
}

RankNameInfo::RankNameInfo(const RankNameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RankNameInfo)
}

void RankNameInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apple_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankNameInfo::~RankNameInfo() {
  // @@protoc_insertion_point(destructor:Cmd.RankNameInfo)
  SharedDtor();
}

void RankNameInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RankNameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankNameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankNameInfo_descriptor_;
}

const RankNameInfo& RankNameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

RankNameInfo* RankNameInfo::default_instance_ = NULL;

RankNameInfo* RankNameInfo::New() const {
  return new RankNameInfo;
}

void RankNameInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    apple_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankNameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RankNameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_apple;
        break;
      }

      // optional uint32 apple = 2;
      case 2: {
        if (tag == 16) {
         parse_apple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apple_)));
          set_has_apple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RankNameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RankNameInfo)
  return false;
#undef DO_
}

void RankNameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RankNameInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 apple = 2;
  if (has_apple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->apple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RankNameInfo)
}

::google::protobuf::uint8* RankNameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RankNameInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 apple = 2;
  if (has_apple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->apple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RankNameInfo)
  return target;
}

int RankNameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 apple = 2;
    if (has_apple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankNameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankNameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankNameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankNameInfo::MergeFrom(const RankNameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_apple()) {
      set_apple(from.apple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankNameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankNameInfo::CopyFrom(const RankNameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankNameInfo::IsInitialized() const {

  return true;
}

void RankNameInfo::Swap(RankNameInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(apple_, other->apple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankNameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankNameInfo_descriptor_;
  metadata.reflection = RankNameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfRankChangeCCmd::kCmdFieldNumber;
const int NtfRankChangeCCmd::kParamFieldNumber;
const int NtfRankChangeCCmd::kRanksFieldNumber;
#endif  // !_MSC_VER

NtfRankChangeCCmd::NtfRankChangeCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfRankChangeCCmd)
}

void NtfRankChangeCCmd::InitAsDefaultInstance() {
}

NtfRankChangeCCmd::NtfRankChangeCCmd(const NtfRankChangeCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfRankChangeCCmd)
}

void NtfRankChangeCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 19;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfRankChangeCCmd::~NtfRankChangeCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfRankChangeCCmd)
  SharedDtor();
}

void NtfRankChangeCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfRankChangeCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfRankChangeCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfRankChangeCCmd_descriptor_;
}

const NtfRankChangeCCmd& NtfRankChangeCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

NtfRankChangeCCmd* NtfRankChangeCCmd::default_instance_ = NULL;

NtfRankChangeCCmd* NtfRankChangeCCmd::New() const {
  return new NtfRankChangeCCmd;
}

void NtfRankChangeCCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 61;
    param_ = 19;
  }
  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfRankChangeCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfRankChangeCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_RANK_CHANGE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ranks;
        break;
      }

      // repeated .Cmd.RankNameInfo ranks = 3;
      case 3: {
        if (tag == 26) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ranks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfRankChangeCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfRankChangeCCmd)
  return false;
#undef DO_
}

void NtfRankChangeCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfRankChangeCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_RANK_CHANGE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.RankNameInfo ranks = 3;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfRankChangeCCmd)
}

::google::protobuf::uint8* NtfRankChangeCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfRankChangeCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_RANK_CHANGE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.RankNameInfo ranks = 3;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfRankChangeCCmd)
  return target;
}

int NtfRankChangeCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_RANK_CHANGE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.RankNameInfo ranks = 3;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfRankChangeCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfRankChangeCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfRankChangeCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfRankChangeCCmd::MergeFrom(const NtfRankChangeCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfRankChangeCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfRankChangeCCmd::CopyFrom(const NtfRankChangeCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfRankChangeCCmd::IsInitialized() const {

  return true;
}

void NtfRankChangeCCmd::Swap(NtfRankChangeCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    ranks_.Swap(&other->ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfRankChangeCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfRankChangeCCmd_descriptor_;
  metadata.reflection = NtfRankChangeCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenGlobalShopPanelCCmd::kCmdFieldNumber;
const int OpenGlobalShopPanelCCmd::kParamFieldNumber;
const int OpenGlobalShopPanelCCmd::kOpenFieldNumber;
#endif  // !_MSC_VER

OpenGlobalShopPanelCCmd::OpenGlobalShopPanelCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OpenGlobalShopPanelCCmd)
}

void OpenGlobalShopPanelCCmd::InitAsDefaultInstance() {
}

OpenGlobalShopPanelCCmd::OpenGlobalShopPanelCCmd(const OpenGlobalShopPanelCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OpenGlobalShopPanelCCmd)
}

void OpenGlobalShopPanelCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 20;
  open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenGlobalShopPanelCCmd::~OpenGlobalShopPanelCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.OpenGlobalShopPanelCCmd)
  SharedDtor();
}

void OpenGlobalShopPanelCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenGlobalShopPanelCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenGlobalShopPanelCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenGlobalShopPanelCCmd_descriptor_;
}

const OpenGlobalShopPanelCCmd& OpenGlobalShopPanelCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

OpenGlobalShopPanelCCmd* OpenGlobalShopPanelCCmd::default_instance_ = NULL;

OpenGlobalShopPanelCCmd* OpenGlobalShopPanelCCmd::New() const {
  return new OpenGlobalShopPanelCCmd;
}

void OpenGlobalShopPanelCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 61;
    param_ = 20;
    open_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenGlobalShopPanelCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OpenGlobalShopPanelCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_OPEN_GLOBAL_SHOP_PANEL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_open;
        break;
      }

      // optional bool open = 3;
      case 3: {
        if (tag == 24) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OpenGlobalShopPanelCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OpenGlobalShopPanelCCmd)
  return false;
#undef DO_
}

void OpenGlobalShopPanelCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OpenGlobalShopPanelCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_OPEN_GLOBAL_SHOP_PANEL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OpenGlobalShopPanelCCmd)
}

::google::protobuf::uint8* OpenGlobalShopPanelCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OpenGlobalShopPanelCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_OPEN_GLOBAL_SHOP_PANEL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OpenGlobalShopPanelCCmd)
  return target;
}

int OpenGlobalShopPanelCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_OPEN_GLOBAL_SHOP_PANEL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool open = 3;
    if (has_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenGlobalShopPanelCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenGlobalShopPanelCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenGlobalShopPanelCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenGlobalShopPanelCCmd::MergeFrom(const OpenGlobalShopPanelCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenGlobalShopPanelCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenGlobalShopPanelCCmd::CopyFrom(const OpenGlobalShopPanelCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGlobalShopPanelCCmd::IsInitialized() const {

  return true;
}

void OpenGlobalShopPanelCCmd::Swap(OpenGlobalShopPanelCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenGlobalShopPanelCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenGlobalShopPanelCCmd_descriptor_;
  metadata.reflection = OpenGlobalShopPanelCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TutorMatchResultNtfMatchCCmd::kCmdFieldNumber;
const int TutorMatchResultNtfMatchCCmd::kParamFieldNumber;
const int TutorMatchResultNtfMatchCCmd::kTargetFieldNumber;
const int TutorMatchResultNtfMatchCCmd::kStatusFieldNumber;
#endif  // !_MSC_VER

TutorMatchResultNtfMatchCCmd::TutorMatchResultNtfMatchCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TutorMatchResultNtfMatchCCmd)
}

void TutorMatchResultNtfMatchCCmd::InitAsDefaultInstance() {
  target_ = const_cast< ::Cmd::TutorMatcher*>(&::Cmd::TutorMatcher::default_instance());
}

TutorMatchResultNtfMatchCCmd::TutorMatchResultNtfMatchCCmd(const TutorMatchResultNtfMatchCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TutorMatchResultNtfMatchCCmd)
}

void TutorMatchResultNtfMatchCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 21;
  target_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TutorMatchResultNtfMatchCCmd::~TutorMatchResultNtfMatchCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TutorMatchResultNtfMatchCCmd)
  SharedDtor();
}

void TutorMatchResultNtfMatchCCmd::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void TutorMatchResultNtfMatchCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TutorMatchResultNtfMatchCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TutorMatchResultNtfMatchCCmd_descriptor_;
}

const TutorMatchResultNtfMatchCCmd& TutorMatchResultNtfMatchCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

TutorMatchResultNtfMatchCCmd* TutorMatchResultNtfMatchCCmd::default_instance_ = NULL;

TutorMatchResultNtfMatchCCmd* TutorMatchResultNtfMatchCCmd::New() const {
  return new TutorMatchResultNtfMatchCCmd;
}

void TutorMatchResultNtfMatchCCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 61;
    param_ = 21;
    if (has_target()) {
      if (target_ != NULL) target_->::Cmd::TutorMatcher::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TutorMatchResultNtfMatchCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TutorMatchResultNtfMatchCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TUTOR_MATCHNTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // optional .Cmd.TutorMatcher target = 3;
      case 3: {
        if (tag == 26) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .Cmd.ETutorMatch status = 4 [default = ETUTORMATCH_MIN];
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETutorMatch_IsValid(value)) {
            set_status(static_cast< ::Cmd::ETutorMatch >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TutorMatchResultNtfMatchCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TutorMatchResultNtfMatchCCmd)
  return false;
#undef DO_
}

void TutorMatchResultNtfMatchCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TutorMatchResultNtfMatchCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TUTOR_MATCHNTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.TutorMatcher target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target(), output);
  }

  // optional .Cmd.ETutorMatch status = 4 [default = ETUTORMATCH_MIN];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TutorMatchResultNtfMatchCCmd)
}

::google::protobuf::uint8* TutorMatchResultNtfMatchCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TutorMatchResultNtfMatchCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TUTOR_MATCHNTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.TutorMatcher target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target(), target);
  }

  // optional .Cmd.ETutorMatch status = 4 [default = ETUTORMATCH_MIN];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TutorMatchResultNtfMatchCCmd)
  return target;
}

int TutorMatchResultNtfMatchCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TUTOR_MATCHNTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.TutorMatcher target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

    // optional .Cmd.ETutorMatch status = 4 [default = ETUTORMATCH_MIN];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TutorMatchResultNtfMatchCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TutorMatchResultNtfMatchCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TutorMatchResultNtfMatchCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TutorMatchResultNtfMatchCCmd::MergeFrom(const TutorMatchResultNtfMatchCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_target()) {
      mutable_target()->::Cmd::TutorMatcher::MergeFrom(from.target());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TutorMatchResultNtfMatchCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TutorMatchResultNtfMatchCCmd::CopyFrom(const TutorMatchResultNtfMatchCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TutorMatchResultNtfMatchCCmd::IsInitialized() const {

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void TutorMatchResultNtfMatchCCmd::Swap(TutorMatchResultNtfMatchCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(target_, other->target_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TutorMatchResultNtfMatchCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TutorMatchResultNtfMatchCCmd_descriptor_;
  metadata.reflection = TutorMatchResultNtfMatchCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TutorMatchResponseMatchCCmd::kCmdFieldNumber;
const int TutorMatchResponseMatchCCmd::kParamFieldNumber;
const int TutorMatchResponseMatchCCmd::kStatusFieldNumber;
#endif  // !_MSC_VER

TutorMatchResponseMatchCCmd::TutorMatchResponseMatchCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TutorMatchResponseMatchCCmd)
}

void TutorMatchResponseMatchCCmd::InitAsDefaultInstance() {
}

TutorMatchResponseMatchCCmd::TutorMatchResponseMatchCCmd(const TutorMatchResponseMatchCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TutorMatchResponseMatchCCmd)
}

void TutorMatchResponseMatchCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 22;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TutorMatchResponseMatchCCmd::~TutorMatchResponseMatchCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TutorMatchResponseMatchCCmd)
  SharedDtor();
}

void TutorMatchResponseMatchCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TutorMatchResponseMatchCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TutorMatchResponseMatchCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TutorMatchResponseMatchCCmd_descriptor_;
}

const TutorMatchResponseMatchCCmd& TutorMatchResponseMatchCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

TutorMatchResponseMatchCCmd* TutorMatchResponseMatchCCmd::default_instance_ = NULL;

TutorMatchResponseMatchCCmd* TutorMatchResponseMatchCCmd::New() const {
  return new TutorMatchResponseMatchCCmd;
}

void TutorMatchResponseMatchCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 61;
    param_ = 22;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TutorMatchResponseMatchCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TutorMatchResponseMatchCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TUTOR_MATCHRESPONSE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .Cmd.ETutorMatch status = 3 [default = ETUTORMATCH_MIN];
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETutorMatch_IsValid(value)) {
            set_status(static_cast< ::Cmd::ETutorMatch >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TutorMatchResponseMatchCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TutorMatchResponseMatchCCmd)
  return false;
#undef DO_
}

void TutorMatchResponseMatchCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TutorMatchResponseMatchCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TUTOR_MATCHRESPONSE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ETutorMatch status = 3 [default = ETUTORMATCH_MIN];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TutorMatchResponseMatchCCmd)
}

::google::protobuf::uint8* TutorMatchResponseMatchCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TutorMatchResponseMatchCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TUTOR_MATCHRESPONSE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ETutorMatch status = 3 [default = ETUTORMATCH_MIN];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TutorMatchResponseMatchCCmd)
  return target;
}

int TutorMatchResponseMatchCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TUTOR_MATCHRESPONSE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ETutorMatch status = 3 [default = ETUTORMATCH_MIN];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TutorMatchResponseMatchCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TutorMatchResponseMatchCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TutorMatchResponseMatchCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TutorMatchResponseMatchCCmd::MergeFrom(const TutorMatchResponseMatchCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TutorMatchResponseMatchCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TutorMatchResponseMatchCCmd::CopyFrom(const TutorMatchResponseMatchCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TutorMatchResponseMatchCCmd::IsInitialized() const {

  return true;
}

void TutorMatchResponseMatchCCmd::Swap(TutorMatchResponseMatchCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TutorMatchResponseMatchCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TutorMatchResponseMatchCCmd_descriptor_;
  metadata.reflection = TutorMatchResponseMatchCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPwsPreInfo::kCharidsFieldNumber;
#endif  // !_MSC_VER

TeamPwsPreInfo::TeamPwsPreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamPwsPreInfo)
}

void TeamPwsPreInfo::InitAsDefaultInstance() {
}

TeamPwsPreInfo::TeamPwsPreInfo(const TeamPwsPreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamPwsPreInfo)
}

void TeamPwsPreInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPwsPreInfo::~TeamPwsPreInfo() {
  // @@protoc_insertion_point(destructor:Cmd.TeamPwsPreInfo)
  SharedDtor();
}

void TeamPwsPreInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamPwsPreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPwsPreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPwsPreInfo_descriptor_;
}

const TeamPwsPreInfo& TeamPwsPreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

TeamPwsPreInfo* TeamPwsPreInfo::default_instance_ = NULL;

TeamPwsPreInfo* TeamPwsPreInfo::New() const {
  return new TeamPwsPreInfo;
}

void TeamPwsPreInfo::Clear() {
  charids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamPwsPreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamPwsPreInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 charids = 1;
      case 1: {
        if (tag == 8) {
         parse_charids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_charids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_charids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_charids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamPwsPreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamPwsPreInfo)
  return false;
#undef DO_
}

void TeamPwsPreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamPwsPreInfo)
  // repeated uint64 charids = 1;
  for (int i = 0; i < this->charids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->charids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamPwsPreInfo)
}

::google::protobuf::uint8* TeamPwsPreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamPwsPreInfo)
  // repeated uint64 charids = 1;
  for (int i = 0; i < this->charids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->charids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamPwsPreInfo)
  return target;
}

int TeamPwsPreInfo::ByteSize() const {
  int total_size = 0;

  // repeated uint64 charids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->charids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->charids(i));
    }
    total_size += 1 * this->charids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPwsPreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPwsPreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPwsPreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamPwsPreInfo::MergeFrom(const TeamPwsPreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  charids_.MergeFrom(from.charids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamPwsPreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPwsPreInfo::CopyFrom(const TeamPwsPreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPwsPreInfo::IsInitialized() const {

  return true;
}

void TeamPwsPreInfo::Swap(TeamPwsPreInfo* other) {
  if (other != this) {
    charids_.Swap(&other->charids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamPwsPreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPwsPreInfo_descriptor_;
  metadata.reflection = TeamPwsPreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPwsPreInfoMatchCCmd::kCmdFieldNumber;
const int TeamPwsPreInfoMatchCCmd::kParamFieldNumber;
const int TeamPwsPreInfoMatchCCmd::kTeaminfosFieldNumber;
const int TeamPwsPreInfoMatchCCmd::kEtypeFieldNumber;
#endif  // !_MSC_VER

TeamPwsPreInfoMatchCCmd::TeamPwsPreInfoMatchCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamPwsPreInfoMatchCCmd)
}

void TeamPwsPreInfoMatchCCmd::InitAsDefaultInstance() {
}

TeamPwsPreInfoMatchCCmd::TeamPwsPreInfoMatchCCmd(const TeamPwsPreInfoMatchCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamPwsPreInfoMatchCCmd)
}

void TeamPwsPreInfoMatchCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 23;
  etype_ = 8;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPwsPreInfoMatchCCmd::~TeamPwsPreInfoMatchCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamPwsPreInfoMatchCCmd)
  SharedDtor();
}

void TeamPwsPreInfoMatchCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamPwsPreInfoMatchCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPwsPreInfoMatchCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPwsPreInfoMatchCCmd_descriptor_;
}

const TeamPwsPreInfoMatchCCmd& TeamPwsPreInfoMatchCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

TeamPwsPreInfoMatchCCmd* TeamPwsPreInfoMatchCCmd::default_instance_ = NULL;

TeamPwsPreInfoMatchCCmd* TeamPwsPreInfoMatchCCmd::New() const {
  return new TeamPwsPreInfoMatchCCmd;
}

void TeamPwsPreInfoMatchCCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 61;
    param_ = 23;
    etype_ = 8;
  }
  teaminfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamPwsPreInfoMatchCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamPwsPreInfoMatchCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_PREPARE_LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_teaminfos;
        break;
      }

      // repeated .Cmd.TeamPwsPreInfo teaminfos = 3;
      case 3: {
        if (tag == 26) {
         parse_teaminfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teaminfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_teaminfos;
        if (input->ExpectTag(32)) goto parse_etype;
        break;
      }

      // optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_TEAMPWS];
      case 4: {
        if (tag == 32) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamPwsPreInfoMatchCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamPwsPreInfoMatchCCmd)
  return false;
#undef DO_
}

void TeamPwsPreInfoMatchCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamPwsPreInfoMatchCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_PREPARE_LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.TeamPwsPreInfo teaminfos = 3;
  for (int i = 0; i < this->teaminfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->teaminfos(i), output);
  }

  // optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_TEAMPWS];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamPwsPreInfoMatchCCmd)
}

::google::protobuf::uint8* TeamPwsPreInfoMatchCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamPwsPreInfoMatchCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_PREPARE_LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.TeamPwsPreInfo teaminfos = 3;
  for (int i = 0; i < this->teaminfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->teaminfos(i), target);
  }

  // optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_TEAMPWS];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamPwsPreInfoMatchCCmd)
  return target;
}

int TeamPwsPreInfoMatchCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_PREPARE_LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_TEAMPWS];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  // repeated .Cmd.TeamPwsPreInfo teaminfos = 3;
  total_size += 1 * this->teaminfos_size();
  for (int i = 0; i < this->teaminfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teaminfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPwsPreInfoMatchCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPwsPreInfoMatchCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPwsPreInfoMatchCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamPwsPreInfoMatchCCmd::MergeFrom(const TeamPwsPreInfoMatchCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  teaminfos_.MergeFrom(from.teaminfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamPwsPreInfoMatchCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPwsPreInfoMatchCCmd::CopyFrom(const TeamPwsPreInfoMatchCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPwsPreInfoMatchCCmd::IsInitialized() const {

  return true;
}

void TeamPwsPreInfoMatchCCmd::Swap(TeamPwsPreInfoMatchCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    teaminfos_.Swap(&other->teaminfos_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamPwsPreInfoMatchCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPwsPreInfoMatchCCmd_descriptor_;
  metadata.reflection = TeamPwsPreInfoMatchCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatePreInfoMatchCCmd::kCmdFieldNumber;
const int UpdatePreInfoMatchCCmd::kParamFieldNumber;
const int UpdatePreInfoMatchCCmd::kCharidFieldNumber;
const int UpdatePreInfoMatchCCmd::kEtypeFieldNumber;
#endif  // !_MSC_VER

UpdatePreInfoMatchCCmd::UpdatePreInfoMatchCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdatePreInfoMatchCCmd)
}

void UpdatePreInfoMatchCCmd::InitAsDefaultInstance() {
}

UpdatePreInfoMatchCCmd::UpdatePreInfoMatchCCmd(const UpdatePreInfoMatchCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdatePreInfoMatchCCmd)
}

void UpdatePreInfoMatchCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 24;
  charid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatePreInfoMatchCCmd::~UpdatePreInfoMatchCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdatePreInfoMatchCCmd)
  SharedDtor();
}

void UpdatePreInfoMatchCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdatePreInfoMatchCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePreInfoMatchCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePreInfoMatchCCmd_descriptor_;
}

const UpdatePreInfoMatchCCmd& UpdatePreInfoMatchCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

UpdatePreInfoMatchCCmd* UpdatePreInfoMatchCCmd::default_instance_ = NULL;

UpdatePreInfoMatchCCmd* UpdatePreInfoMatchCCmd::New() const {
  return new UpdatePreInfoMatchCCmd;
}

void UpdatePreInfoMatchCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdatePreInfoMatchCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, etype_);
    cmd_ = 61;
    param_ = 24;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdatePreInfoMatchCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdatePreInfoMatchCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_PREPARE_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_etype;
        break;
      }

      // optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_MIN];
      case 4: {
        if (tag == 32) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdatePreInfoMatchCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdatePreInfoMatchCCmd)
  return false;
#undef DO_
}

void UpdatePreInfoMatchCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdatePreInfoMatchCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_PREPARE_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_MIN];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdatePreInfoMatchCCmd)
}

::google::protobuf::uint8* UpdatePreInfoMatchCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdatePreInfoMatchCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_PREPARE_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_MIN];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdatePreInfoMatchCCmd)
  return target;
}

int UpdatePreInfoMatchCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_PREPARE_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_MIN];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePreInfoMatchCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatePreInfoMatchCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePreInfoMatchCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdatePreInfoMatchCCmd::MergeFrom(const UpdatePreInfoMatchCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdatePreInfoMatchCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePreInfoMatchCCmd::CopyFrom(const UpdatePreInfoMatchCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePreInfoMatchCCmd::IsInitialized() const {

  return true;
}

void UpdatePreInfoMatchCCmd::Swap(UpdatePreInfoMatchCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdatePreInfoMatchCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePreInfoMatchCCmd_descriptor_;
  metadata.reflection = UpdatePreInfoMatchCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPwsRankInfo::kNameFieldNumber;
const int TeamPwsRankInfo::kPortraitFieldNumber;
const int TeamPwsRankInfo::kRankFieldNumber;
const int TeamPwsRankInfo::kScoreFieldNumber;
const int TeamPwsRankInfo::kErankFieldNumber;
const int TeamPwsRankInfo::kProfessionFieldNumber;
#endif  // !_MSC_VER

TeamPwsRankInfo::TeamPwsRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamPwsRankInfo)
}

void TeamPwsRankInfo::InitAsDefaultInstance() {
  portrait_ = const_cast< ::Cmd::UserPortraitData*>(&::Cmd::UserPortraitData::default_instance());
}

TeamPwsRankInfo::TeamPwsRankInfo(const TeamPwsRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamPwsRankInfo)
}

void TeamPwsRankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portrait_ = NULL;
  rank_ = 0u;
  score_ = 0u;
  erank_ = 1;
  profession_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPwsRankInfo::~TeamPwsRankInfo() {
  // @@protoc_insertion_point(destructor:Cmd.TeamPwsRankInfo)
  SharedDtor();
}

void TeamPwsRankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete portrait_;
  }
}

void TeamPwsRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPwsRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPwsRankInfo_descriptor_;
}

const TeamPwsRankInfo& TeamPwsRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

TeamPwsRankInfo* TeamPwsRankInfo::default_instance_ = NULL;

TeamPwsRankInfo* TeamPwsRankInfo::New() const {
  return new TeamPwsRankInfo;
}

void TeamPwsRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamPwsRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(rank_, score_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_portrait()) {
      if (portrait_ != NULL) portrait_->::Cmd::UserPortraitData::Clear();
    }
    erank_ = 1;
    profession_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamPwsRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamPwsRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_portrait;
        break;
      }

      // optional .Cmd.UserPortraitData portrait = 2;
      case 2: {
        if (tag == 18) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 3;
      case 3: {
        if (tag == 24) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional uint32 score = 4;
      case 4: {
        if (tag == 32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_erank;
        break;
      }

      // optional .Cmd.ETeamPwsRank erank = 5;
      case 5: {
        if (tag == 40) {
         parse_erank:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETeamPwsRank_IsValid(value)) {
            set_erank(static_cast< ::Cmd::ETeamPwsRank >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_profession;
        break;
      }

      // optional .Cmd.EProfession profession = 6;
      case 6: {
        if (tag == 48) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_profession(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamPwsRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamPwsRankInfo)
  return false;
#undef DO_
}

void TeamPwsRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamPwsRankInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .Cmd.UserPortraitData portrait = 2;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->portrait(), output);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional uint32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  // optional .Cmd.ETeamPwsRank erank = 5;
  if (has_erank()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->erank(), output);
  }

  // optional .Cmd.EProfession profession = 6;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->profession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamPwsRankInfo)
}

::google::protobuf::uint8* TeamPwsRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamPwsRankInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .Cmd.UserPortraitData portrait = 2;
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->portrait(), target);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional uint32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score(), target);
  }

  // optional .Cmd.ETeamPwsRank erank = 5;
  if (has_erank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->erank(), target);
  }

  // optional .Cmd.EProfession profession = 6;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->profession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamPwsRankInfo)
  return target;
}

int TeamPwsRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Cmd.UserPortraitData portrait = 2;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->portrait());
    }

    // optional uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional .Cmd.ETeamPwsRank erank = 5;
    if (has_erank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->erank());
    }

    // optional .Cmd.EProfession profession = 6;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPwsRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPwsRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPwsRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamPwsRankInfo::MergeFrom(const TeamPwsRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_portrait()) {
      mutable_portrait()->::Cmd::UserPortraitData::MergeFrom(from.portrait());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_erank()) {
      set_erank(from.erank());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamPwsRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPwsRankInfo::CopyFrom(const TeamPwsRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPwsRankInfo::IsInitialized() const {

  return true;
}

void TeamPwsRankInfo::Swap(TeamPwsRankInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(portrait_, other->portrait_);
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(erank_, other->erank_);
    std::swap(profession_, other->profession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamPwsRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPwsRankInfo_descriptor_;
  metadata.reflection = TeamPwsRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryTeamPwsRankMatchCCmd::kCmdFieldNumber;
const int QueryTeamPwsRankMatchCCmd::kParamFieldNumber;
const int QueryTeamPwsRankMatchCCmd::kRankinfoFieldNumber;
#endif  // !_MSC_VER

QueryTeamPwsRankMatchCCmd::QueryTeamPwsRankMatchCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryTeamPwsRankMatchCCmd)
}

void QueryTeamPwsRankMatchCCmd::InitAsDefaultInstance() {
}

QueryTeamPwsRankMatchCCmd::QueryTeamPwsRankMatchCCmd(const QueryTeamPwsRankMatchCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryTeamPwsRankMatchCCmd)
}

void QueryTeamPwsRankMatchCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 25;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryTeamPwsRankMatchCCmd::~QueryTeamPwsRankMatchCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryTeamPwsRankMatchCCmd)
  SharedDtor();
}

void QueryTeamPwsRankMatchCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryTeamPwsRankMatchCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryTeamPwsRankMatchCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryTeamPwsRankMatchCCmd_descriptor_;
}

const QueryTeamPwsRankMatchCCmd& QueryTeamPwsRankMatchCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

QueryTeamPwsRankMatchCCmd* QueryTeamPwsRankMatchCCmd::default_instance_ = NULL;

QueryTeamPwsRankMatchCCmd* QueryTeamPwsRankMatchCCmd::New() const {
  return new QueryTeamPwsRankMatchCCmd;
}

void QueryTeamPwsRankMatchCCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 61;
    param_ = 25;
  }
  rankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryTeamPwsRankMatchCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryTeamPwsRankMatchCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_QUERY_RANK];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rankinfo;
        break;
      }

      // repeated .Cmd.TeamPwsRankInfo rankinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_rankinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rankinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryTeamPwsRankMatchCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryTeamPwsRankMatchCCmd)
  return false;
#undef DO_
}

void QueryTeamPwsRankMatchCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryTeamPwsRankMatchCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_QUERY_RANK];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.TeamPwsRankInfo rankinfo = 3;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rankinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryTeamPwsRankMatchCCmd)
}

::google::protobuf::uint8* QueryTeamPwsRankMatchCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryTeamPwsRankMatchCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_QUERY_RANK];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.TeamPwsRankInfo rankinfo = 3;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rankinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryTeamPwsRankMatchCCmd)
  return target;
}

int QueryTeamPwsRankMatchCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_QUERY_RANK];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.TeamPwsRankInfo rankinfo = 3;
  total_size += 1 * this->rankinfo_size();
  for (int i = 0; i < this->rankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryTeamPwsRankMatchCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryTeamPwsRankMatchCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryTeamPwsRankMatchCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryTeamPwsRankMatchCCmd::MergeFrom(const QueryTeamPwsRankMatchCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinfo_.MergeFrom(from.rankinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryTeamPwsRankMatchCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryTeamPwsRankMatchCCmd::CopyFrom(const QueryTeamPwsRankMatchCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTeamPwsRankMatchCCmd::IsInitialized() const {

  return true;
}

void QueryTeamPwsRankMatchCCmd::Swap(QueryTeamPwsRankMatchCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    rankinfo_.Swap(&other->rankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryTeamPwsRankMatchCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryTeamPwsRankMatchCCmd_descriptor_;
  metadata.reflection = QueryTeamPwsRankMatchCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPwsUserInfo::kCharidFieldNumber;
const int TeamPwsUserInfo::kScoreFieldNumber;
const int TeamPwsUserInfo::kErankFieldNumber;
#endif  // !_MSC_VER

TeamPwsUserInfo::TeamPwsUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamPwsUserInfo)
}

void TeamPwsUserInfo::InitAsDefaultInstance() {
}

TeamPwsUserInfo::TeamPwsUserInfo(const TeamPwsUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamPwsUserInfo)
}

void TeamPwsUserInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  score_ = 0u;
  erank_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPwsUserInfo::~TeamPwsUserInfo() {
  // @@protoc_insertion_point(destructor:Cmd.TeamPwsUserInfo)
  SharedDtor();
}

void TeamPwsUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamPwsUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPwsUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPwsUserInfo_descriptor_;
}

const TeamPwsUserInfo& TeamPwsUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

TeamPwsUserInfo* TeamPwsUserInfo::default_instance_ = NULL;

TeamPwsUserInfo* TeamPwsUserInfo::New() const {
  return new TeamPwsUserInfo;
}

void TeamPwsUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamPwsUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(charid_, score_);
    erank_ = 5;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamPwsUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamPwsUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint32 score = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_erank;
        break;
      }

      // optional .Cmd.ETeamPwsRank erank = 3 [default = ETEAMPWSRANK_NONE];
      case 3: {
        if (tag == 24) {
         parse_erank:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETeamPwsRank_IsValid(value)) {
            set_erank(static_cast< ::Cmd::ETeamPwsRank >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamPwsUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamPwsUserInfo)
  return false;
#undef DO_
}

void TeamPwsUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamPwsUserInfo)
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 score = 2 [default = 0];
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional .Cmd.ETeamPwsRank erank = 3 [default = ETEAMPWSRANK_NONE];
  if (has_erank()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->erank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamPwsUserInfo)
}

::google::protobuf::uint8* TeamPwsUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamPwsUserInfo)
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 score = 2 [default = 0];
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional .Cmd.ETeamPwsRank erank = 3 [default = ETEAMPWSRANK_NONE];
  if (has_erank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->erank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamPwsUserInfo)
  return target;
}

int TeamPwsUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 score = 2 [default = 0];
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional .Cmd.ETeamPwsRank erank = 3 [default = ETEAMPWSRANK_NONE];
    if (has_erank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->erank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPwsUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPwsUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPwsUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamPwsUserInfo::MergeFrom(const TeamPwsUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_erank()) {
      set_erank(from.erank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamPwsUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPwsUserInfo::CopyFrom(const TeamPwsUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPwsUserInfo::IsInitialized() const {

  return true;
}

void TeamPwsUserInfo::Swap(TeamPwsUserInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(score_, other->score_);
    std::swap(erank_, other->erank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamPwsUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPwsUserInfo_descriptor_;
  metadata.reflection = TeamPwsUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryTeamPwsTeamInfoMatchCCmd::kCmdFieldNumber;
const int QueryTeamPwsTeamInfoMatchCCmd::kParamFieldNumber;
const int QueryTeamPwsTeamInfoMatchCCmd::kUserinfosFieldNumber;
const int QueryTeamPwsTeamInfoMatchCCmd::kMyrankFieldNumber;
#endif  // !_MSC_VER

QueryTeamPwsTeamInfoMatchCCmd::QueryTeamPwsTeamInfoMatchCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryTeamPwsTeamInfoMatchCCmd)
}

void QueryTeamPwsTeamInfoMatchCCmd::InitAsDefaultInstance() {
}

QueryTeamPwsTeamInfoMatchCCmd::QueryTeamPwsTeamInfoMatchCCmd(const QueryTeamPwsTeamInfoMatchCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryTeamPwsTeamInfoMatchCCmd)
}

void QueryTeamPwsTeamInfoMatchCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 61;
  param_ = 26;
  myrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryTeamPwsTeamInfoMatchCCmd::~QueryTeamPwsTeamInfoMatchCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryTeamPwsTeamInfoMatchCCmd)
  SharedDtor();
}

void QueryTeamPwsTeamInfoMatchCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryTeamPwsTeamInfoMatchCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryTeamPwsTeamInfoMatchCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryTeamPwsTeamInfoMatchCCmd_descriptor_;
}

const QueryTeamPwsTeamInfoMatchCCmd& QueryTeamPwsTeamInfoMatchCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchCCmd_2eproto();
  return *default_instance_;
}

QueryTeamPwsTeamInfoMatchCCmd* QueryTeamPwsTeamInfoMatchCCmd::default_instance_ = NULL;

QueryTeamPwsTeamInfoMatchCCmd* QueryTeamPwsTeamInfoMatchCCmd::New() const {
  return new QueryTeamPwsTeamInfoMatchCCmd;
}

void QueryTeamPwsTeamInfoMatchCCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 61;
    param_ = 26;
    myrank_ = 0u;
  }
  userinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryTeamPwsTeamInfoMatchCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryTeamPwsTeamInfoMatchCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_QUERY_TEAMINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userinfos;
        break;
      }

      // repeated .Cmd.TeamPwsUserInfo userinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_userinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userinfos;
        if (input->ExpectTag(32)) goto parse_myrank;
        break;
      }

      // optional uint32 myrank = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_myrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryTeamPwsTeamInfoMatchCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryTeamPwsTeamInfoMatchCCmd)
  return false;
#undef DO_
}

void QueryTeamPwsTeamInfoMatchCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryTeamPwsTeamInfoMatchCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_QUERY_TEAMINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.TeamPwsUserInfo userinfos = 3;
  for (int i = 0; i < this->userinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfos(i), output);
  }

  // optional uint32 myrank = 4 [default = 0];
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryTeamPwsTeamInfoMatchCCmd)
}

::google::protobuf::uint8* QueryTeamPwsTeamInfoMatchCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryTeamPwsTeamInfoMatchCCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_QUERY_TEAMINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.TeamPwsUserInfo userinfos = 3;
  for (int i = 0; i < this->userinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfos(i), target);
  }

  // optional uint32 myrank = 4 [default = 0];
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryTeamPwsTeamInfoMatchCCmd)
  return target;
}

int QueryTeamPwsTeamInfoMatchCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_QUERY_TEAMINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 myrank = 4 [default = 0];
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

  }
  // repeated .Cmd.TeamPwsUserInfo userinfos = 3;
  total_size += 1 * this->userinfos_size();
  for (int i = 0; i < this->userinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryTeamPwsTeamInfoMatchCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryTeamPwsTeamInfoMatchCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryTeamPwsTeamInfoMatchCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryTeamPwsTeamInfoMatchCCmd::MergeFrom(const QueryTeamPwsTeamInfoMatchCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfos_.MergeFrom(from.userinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryTeamPwsTeamInfoMatchCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryTeamPwsTeamInfoMatchCCmd::CopyFrom(const QueryTeamPwsTeamInfoMatchCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTeamPwsTeamInfoMatchCCmd::IsInitialized() const {

  return true;
}

void QueryTeamPwsTeamInfoMatchCCmd::Swap(QueryTeamPwsTeamInfoMatchCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    userinfos_.Swap(&other->userinfos_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryTeamPwsTeamInfoMatchCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryTeamPwsTeamInfoMatchCCmd_descriptor_;
  metadata.reflection = QueryTeamPwsTeamInfoMatchCCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
