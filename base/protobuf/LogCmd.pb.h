// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogCmd.proto

#ifndef PROTOBUF_LogCmd_2eproto__INCLUDED
#define PROTOBUF_LogCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "SceneItem.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LogCmd_2eproto();
void protobuf_AssignDesc_LogCmd_2eproto();
void protobuf_ShutdownFile_LogCmd_2eproto();

class LoginLogCmd;
class AccountLogCmd;
class CreateLogCmd;
class ChangeFlagLogCmd;
class ChargeLogCmd;
class EventLogCmd;
class IncomeLogCmd;
class ConsumeLogCmd;
class ItemLogCmd;
class PropsLogCmd;
class TransactionLogCmd;
class ChatLogCmd;
class LevelLogCmd;
class OnlineLogCmd;
class SnapshotLogCmd;
class CheckpointLogCmd;
class RankLogCmd;
class ChatSearchCond;
class ChatLogRes;
class QueryChatLogCmd;
class ChangeLogCmd;
class EquipLogCmd;
class CardLogCmd;
class EquipUpLogCmd;
class SocailLogCmd;
class QuestLogCmd;
class ManualLogCmd;
class CompleteLogCmd;
class TowerLogCmd;
class ItemOperLogCmd;
class KillLogCmd;
class RewardLogCmd;
class MailLogCmd;
class DojoLogCmd;
class EnchantLogCmd;
class GuildPrayLogCmd;
class UseSkillLogCmd;
class ActiveLogCmd;
class TradeLogCmd;
class DeleteCharLogCmd;
class ComposeLogCmd;
class JumpzoneLogCmd;
class TeamLogCmd;
class TradeAdjustPriceLogCmd;
class TradePriceLogCmd;
class PetChangeLogCmd;
class PetAdventureLogCmd;
class InactiveUserLogCmd;
class TradeUntakeLogCmd;
class CreditLogCmd;
class TradeGiveLogCmd;
class QuotaLogCmd;
class GuildItemLogCmd;

enum LogParam {
  LOGIN_LOG_CMD = 1,
  ACCOUNT_LOG_CMD = 2,
  CREATE_LOG_CMD = 3,
  CHANGE_FLAG_LOG_CMD = 4,
  CHARGE_LOG_CMD = 5,
  EVENT_LOG_CMD = 6,
  INCOME_LOG_CMD = 7,
  CONSUME_LOG_CMD = 8,
  ITEM_LOG_CMD = 9,
  PROPS_LOG_CMD = 10,
  TRANSACTION_LOG_CMD = 11,
  CHAT_LOG_CMD = 12,
  LEVEL_LOG_CMD = 13,
  ONLINE_LOG_CMD = 14,
  SNAPSHOT_LOG_CMD = 15,
  CHECKPOINT_LOG_CMD = 16,
  RANK_LOG_CMD = 17,
  QUERY_CHAT_LOG_CMD = 18,
  CARD_LOG_CMD = 30,
  EQUIP_LOG_CMD = 31,
  HAND_LOG_CMD = 32,
  SOCIAL_LOG_CMD = 33,
  QUEST_LOG_CMD = 34,
  COMPLETE_LOG_CMD = 35,
  BUY_LOG_CMD = 36,
  MANUAL_LOG_CMD = 37,
  KILL_LOG_CMD = 38,
  CHANGE_LOG_CMD = 39,
  ITEMOPER_LOG_CMD = 40,
  EQUIPUP_LOG_CMD = 41,
  TOWER_LOG_CMD = 42,
  REWARD_LOG_CMD = 43,
  MAIL_LOG_CMD = 44,
  DOJO_LOG_CMD = 45,
  ENCHANT_LOG_CMD = 46,
  GUILDPRAY_LOG_CMD = 47,
  USESKILL_LOG_CMD = 48,
  ACTIVE_LOG_CMD = 49,
  TRADE_LOG_CMD = 50,
  DELETE_CHAR_LOG_CMD = 51,
  COMPOSE_LOG_CMD = 52,
  JUMPZONE_LOG_CMD = 53,
  TEAM_LOG_CMD = 54,
  TRADE_ADJUST_PRICE_LOG_CMD = 55,
  TRADE_PRICE_LOG_CMD = 56,
  PET_CHANGE_LOG_CMD = 57,
  PET_ADVENTURE_LOG_CMD = 58,
  INACTIVE_USER_LOG_CMD = 60,
  TRADE_UNTAKE_LOG_CMD = 59,
  CREDIT_LOG_CMD = 61,
  TRADE_GIVE_LOG_CMD = 62,
  QUOTA_LOG_CMD = 63,
  GUILD_ITEM_LOG_CMD = 64
};
bool LogParam_IsValid(int value);
const LogParam LogParam_MIN = LOGIN_LOG_CMD;
const LogParam LogParam_MAX = GUILD_ITEM_LOG_CMD;
const int LogParam_ARRAYSIZE = LogParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogParam_descriptor();
inline const ::std::string& LogParam_Name(LogParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogParam_descriptor(), value);
}
inline bool LogParam_Parse(
    const ::std::string& name, LogParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogParam>(
    LogParam_descriptor(), name, value);
}
enum EChatType {
  ECHATTYPE_STR = 0,
  ECHATTYPE_VOICE = 1
};
bool EChatType_IsValid(int value);
const EChatType EChatType_MIN = ECHATTYPE_STR;
const EChatType EChatType_MAX = ECHATTYPE_VOICE;
const int EChatType_ARRAYSIZE = EChatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EChatType_descriptor();
inline const ::std::string& EChatType_Name(EChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EChatType_descriptor(), value);
}
inline bool EChatType_Parse(
    const ::std::string& name, EChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EChatType>(
    EChatType_descriptor(), name, value);
}
enum EPriceStatus {
  EPriceStatus_NoChange = 0,
  EPriceStatus_Up = 1,
  EPriceStatus_Down = 2,
  EPriceStatus_Bottom = 3,
  EPriceStatus_Premium = 4,
  EPriceStatus_MaxPrice = 5
};
bool EPriceStatus_IsValid(int value);
const EPriceStatus EPriceStatus_MIN = EPriceStatus_NoChange;
const EPriceStatus EPriceStatus_MAX = EPriceStatus_MaxPrice;
const int EPriceStatus_ARRAYSIZE = EPriceStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPriceStatus_descriptor();
inline const ::std::string& EPriceStatus_Name(EPriceStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPriceStatus_descriptor(), value);
}
inline bool EPriceStatus_Parse(
    const ::std::string& name, EPriceStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPriceStatus>(
    EPriceStatus_descriptor(), name, value);
}
enum EPetChangeType {
  EPetChangeType_Lv = 1,
  EPetChangeType_Good = 2,
  EPetChangeType_Skill = 3
};
bool EPetChangeType_IsValid(int value);
const EPetChangeType EPetChangeType_MIN = EPetChangeType_Lv;
const EPetChangeType EPetChangeType_MAX = EPetChangeType_Skill;
const int EPetChangeType_ARRAYSIZE = EPetChangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPetChangeType_descriptor();
inline const ::std::string& EPetChangeType_Name(EPetChangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPetChangeType_descriptor(), value);
}
inline bool EPetChangeType_Parse(
    const ::std::string& name, EPetChangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPetChangeType>(
    EPetChangeType_descriptor(), name, value);
}
enum EPetAdventureLogType {
  EPetAdventureLogType_Start = 1,
  EPetAdventureLogType_Take = 2
};
bool EPetAdventureLogType_IsValid(int value);
const EPetAdventureLogType EPetAdventureLogType_MIN = EPetAdventureLogType_Start;
const EPetAdventureLogType EPetAdventureLogType_MAX = EPetAdventureLogType_Take;
const int EPetAdventureLogType_ARRAYSIZE = EPetAdventureLogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPetAdventureLogType_descriptor();
inline const ::std::string& EPetAdventureLogType_Name(EPetAdventureLogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPetAdventureLogType_descriptor(), value);
}
inline bool EPetAdventureLogType_Parse(
    const ::std::string& name, EPetAdventureLogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPetAdventureLogType>(
    EPetAdventureLogType_descriptor(), name, value);
}
enum ECreditType {
  ECreditType_Add = 1,
  ECreditType_Dec = 2,
  ECreditType_Set = 3
};
bool ECreditType_IsValid(int value);
const ECreditType ECreditType_MIN = ECreditType_Add;
const ECreditType ECreditType_MAX = ECreditType_Set;
const int ECreditType_ARRAYSIZE = ECreditType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECreditType_descriptor();
inline const ::std::string& ECreditType_Name(ECreditType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECreditType_descriptor(), value);
}
inline bool ECreditType_Parse(
    const ::std::string& name, ECreditType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECreditType>(
    ECreditType_descriptor(), name, value);
}
enum EGiveEvent {
  EGiveEvent_Give = 1,
  EGiveEvent_Accept = 2,
  EGiveEvent_Refuse = 3
};
bool EGiveEvent_IsValid(int value);
const EGiveEvent EGiveEvent_MIN = EGiveEvent_Give;
const EGiveEvent EGiveEvent_MAX = EGiveEvent_Refuse;
const int EGiveEvent_ARRAYSIZE = EGiveEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGiveEvent_descriptor();
inline const ::std::string& EGiveEvent_Name(EGiveEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGiveEvent_descriptor(), value);
}
inline bool EGiveEvent_Parse(
    const ::std::string& name, EGiveEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGiveEvent>(
    EGiveEvent_descriptor(), name, value);
}
enum ELogGiveType {
  ELogGiveType_Trade = 0,
  ELogGiveType_Lottery = 1
};
bool ELogGiveType_IsValid(int value);
const ELogGiveType ELogGiveType_MIN = ELogGiveType_Trade;
const ELogGiveType ELogGiveType_MAX = ELogGiveType_Lottery;
const int ELogGiveType_ARRAYSIZE = ELogGiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELogGiveType_descriptor();
inline const ::std::string& ELogGiveType_Name(ELogGiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELogGiveType_descriptor(), value);
}
inline bool ELogGiveType_Parse(
    const ::std::string& name, ELogGiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELogGiveType>(
    ELogGiveType_descriptor(), name, value);
}
enum EQuotaOptType {
  EQuotaOptType_Add = 1,
  EQuotaOptType_Sub = 2,
  EQuotaOptType_Lock = 3,
  EQuotaOptType_Unlock = 4
};
bool EQuotaOptType_IsValid(int value);
const EQuotaOptType EQuotaOptType_MIN = EQuotaOptType_Add;
const EQuotaOptType EQuotaOptType_MAX = EQuotaOptType_Unlock;
const int EQuotaOptType_ARRAYSIZE = EQuotaOptType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQuotaOptType_descriptor();
inline const ::std::string& EQuotaOptType_Name(EQuotaOptType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQuotaOptType_descriptor(), value);
}
inline bool EQuotaOptType_Parse(
    const ::std::string& name, EQuotaOptType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQuotaOptType>(
    EQuotaOptType_descriptor(), name, value);
}
// ===================================================================

class LoginLogCmd : public ::google::protobuf::Message {
 public:
  LoginLogCmd();
  virtual ~LoginLogCmd();

  LoginLogCmd(const LoginLogCmd& from);

  inline LoginLogCmd& operator=(const LoginLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginLogCmd& default_instance();

  void Swap(LoginLogCmd* other);

  // implements Message ----------------------------------------------

  LoginLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginLogCmd& from);
  void MergeFrom(const LoginLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = LOGIN_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 8;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string ip = 9;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 9;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 type = 10;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 ispay = 11;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 11;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 level = 12;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 12;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 vip = 13;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 13;
  inline ::google::protobuf::uint32 vip() const;
  inline void set_vip(::google::protobuf::uint32 value);

  // repeated uint32 mark = 14;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 14;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string sign = 15;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 15;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional string device = 16;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 16;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // optional uint32 guest = 17;
  inline bool has_guest() const;
  inline void clear_guest();
  static const int kGuestFieldNumber = 17;
  inline ::google::protobuf::uint32 guest() const;
  inline void set_guest(::google::protobuf::uint32 value);

  // optional string mac = 18;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 18;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  inline void set_allocated_mac(::std::string* mac);

  // optional string agent = 19;
  inline bool has_agent() const;
  inline void clear_agent();
  static const int kAgentFieldNumber = 19;
  inline const ::std::string& agent() const;
  inline void set_agent(const ::std::string& value);
  inline void set_agent(const char* value);
  inline void set_agent(const char* value, size_t size);
  inline ::std::string* mutable_agent();
  inline ::std::string* release_agent();
  inline void set_allocated_agent(::std::string* agent);

  // optional uint32 mapid = 20;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 20;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 onlinetime = 21;
  inline bool has_onlinetime() const;
  inline void clear_onlinetime();
  static const int kOnlinetimeFieldNumber = 21;
  inline ::google::protobuf::uint32 onlinetime() const;
  inline void set_onlinetime(::google::protobuf::uint32 value);

  // optional uint32 teamtimelen = 22;
  inline bool has_teamtimelen() const;
  inline void clear_teamtimelen();
  static const int kTeamtimelenFieldNumber = 22;
  inline ::google::protobuf::uint32 teamtimelen() const;
  inline void set_teamtimelen(::google::protobuf::uint32 value);

  // optional uint32 isnew = 23;
  inline bool has_isnew() const;
  inline void clear_isnew();
  static const int kIsnewFieldNumber = 23;
  inline ::google::protobuf::uint32 isnew() const;
  inline void set_isnew(::google::protobuf::uint32 value);

  // optional string logid = 24;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 24;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional uint32 zoneid = 25;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 25;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.LoginLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_guest();
  inline void clear_has_guest();
  inline void set_has_mac();
  inline void clear_has_mac();
  inline void set_has_agent();
  inline void clear_has_agent();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_onlinetime();
  inline void clear_has_onlinetime();
  inline void set_has_teamtimelen();
  inline void clear_has_teamtimelen();
  inline void set_has_isnew();
  inline void clear_has_isnew();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint64 pid_;
  ::std::string* ip_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 vip_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* sign_;
  ::std::string* device_;
  ::std::string* mac_;
  ::google::protobuf::uint32 guest_;
  ::google::protobuf::uint32 mapid_;
  ::std::string* agent_;
  ::google::protobuf::uint32 onlinetime_;
  ::google::protobuf::uint32 teamtimelen_;
  ::std::string* logid_;
  ::google::protobuf::uint32 isnew_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static LoginLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class AccountLogCmd : public ::google::protobuf::Message {
 public:
  AccountLogCmd();
  virtual ~AccountLogCmd();

  AccountLogCmd(const AccountLogCmd& from);

  inline AccountLogCmd& operator=(const AccountLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountLogCmd& default_instance();

  void Swap(AccountLogCmd* other);

  // implements Message ----------------------------------------------

  AccountLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountLogCmd& from);
  void MergeFrom(const AccountLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = ACCOUNT_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional string account = 5;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 5;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string ip = 7;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 7;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 guest = 8;
  inline bool has_guest() const;
  inline void clear_guest();
  static const int kGuestFieldNumber = 8;
  inline ::google::protobuf::uint32 guest() const;
  inline void set_guest(::google::protobuf::uint32 value);

  // optional string device = 9;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 9;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // optional string mac = 10;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 10;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  inline void set_allocated_mac(::std::string* mac);

  // optional string source = 11;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 11;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional string agent = 12;
  inline bool has_agent() const;
  inline void clear_agent();
  static const int kAgentFieldNumber = 12;
  inline const ::std::string& agent() const;
  inline void set_agent(const ::std::string& value);
  inline void set_agent(const char* value);
  inline void set_agent(const char* value, size_t size);
  inline ::std::string* mutable_agent();
  inline ::std::string* release_agent();
  inline void set_allocated_agent(::std::string* agent);

  // optional string logid = 13;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 13;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.AccountLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_guest();
  inline void clear_has_guest();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_mac();
  inline void clear_has_mac();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_agent();
  inline void clear_has_agent();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::std::string* ip_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 guest_;
  ::std::string* device_;
  ::std::string* mac_;
  ::std::string* source_;
  ::std::string* agent_;
  ::std::string* logid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static AccountLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class CreateLogCmd : public ::google::protobuf::Message {
 public:
  CreateLogCmd();
  virtual ~CreateLogCmd();

  CreateLogCmd(const CreateLogCmd& from);

  inline CreateLogCmd& operator=(const CreateLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateLogCmd& default_instance();

  void Swap(CreateLogCmd* other);

  // implements Message ----------------------------------------------

  CreateLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateLogCmd& from);
  void MergeFrom(const CreateLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = CREATE_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional string account = 5;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 5;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 6;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 6;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string ip = 8;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 8;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string name = 9;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 9;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 guest = 10;
  inline bool has_guest() const;
  inline void clear_guest();
  static const int kGuestFieldNumber = 10;
  inline ::google::protobuf::uint32 guest() const;
  inline void set_guest(::google::protobuf::uint32 value);

  // optional string device = 11;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 11;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // optional string mac = 12;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 12;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  inline void set_allocated_mac(::std::string* mac);

  // optional string source = 13;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 13;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional string agent = 14;
  inline bool has_agent() const;
  inline void clear_agent();
  static const int kAgentFieldNumber = 14;
  inline const ::std::string& agent() const;
  inline void set_agent(const ::std::string& value);
  inline void set_agent(const char* value);
  inline void set_agent(const char* value, size_t size);
  inline ::std::string* mutable_agent();
  inline ::std::string* release_agent();
  inline void set_allocated_agent(::std::string* agent);

  // optional uint32 gender = 15;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 15;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);

  // optional uint32 hair = 16;
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 16;
  inline ::google::protobuf::uint32 hair() const;
  inline void set_hair(::google::protobuf::uint32 value);

  // optional uint32 haircolor = 17;
  inline bool has_haircolor() const;
  inline void clear_haircolor();
  static const int kHaircolorFieldNumber = 17;
  inline ::google::protobuf::uint32 haircolor() const;
  inline void set_haircolor(::google::protobuf::uint32 value);

  // optional string logid = 18;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 18;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.CreateLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guest();
  inline void clear_has_guest();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_mac();
  inline void clear_has_mac();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_agent();
  inline void clear_has_agent();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_haircolor();
  inline void clear_has_haircolor();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint64 pid_;
  ::std::string* ip_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 guest_;
  ::std::string* name_;
  ::std::string* device_;
  ::std::string* mac_;
  ::std::string* source_;
  ::std::string* agent_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint32 hair_;
  ::std::string* logid_;
  ::google::protobuf::uint32 haircolor_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static CreateLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class ChangeFlagLogCmd : public ::google::protobuf::Message {
 public:
  ChangeFlagLogCmd();
  virtual ~ChangeFlagLogCmd();

  ChangeFlagLogCmd(const ChangeFlagLogCmd& from);

  inline ChangeFlagLogCmd& operator=(const ChangeFlagLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeFlagLogCmd& default_instance();

  void Swap(ChangeFlagLogCmd* other);

  // implements Message ----------------------------------------------

  ChangeFlagLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeFlagLogCmd& from);
  void MergeFrom(const ChangeFlagLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = CHANGE_FLAG_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint64 pid = 5;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 5;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string falg = 7;
  inline bool has_falg() const;
  inline void clear_falg();
  static const int kFalgFieldNumber = 7;
  inline const ::std::string& falg() const;
  inline void set_falg(const ::std::string& value);
  inline void set_falg(const char* value);
  inline void set_falg(const char* value, size_t size);
  inline ::std::string* mutable_falg();
  inline ::std::string* release_falg();
  inline void set_allocated_falg(::std::string* falg);

  // optional string from = 8;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 8;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // optional string to = 9;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 9;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const char* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // optional uint64 param1 = 10;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 10;
  inline ::google::protobuf::uint64 param1() const;
  inline void set_param1(::google::protobuf::uint64 value);

  // optional string logid = 11;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 11;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.ChangeFlagLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_falg();
  inline void clear_has_falg();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::google::protobuf::uint64 pid_;
  ::std::string* falg_;
  ::std::string* from_;
  ::std::string* to_;
  ::google::protobuf::uint64 param1_;
  ::std::string* logid_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static ChangeFlagLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class ChargeLogCmd : public ::google::protobuf::Message {
 public:
  ChargeLogCmd();
  virtual ~ChargeLogCmd();

  ChargeLogCmd(const ChargeLogCmd& from);

  inline ChargeLogCmd& operator=(const ChargeLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChargeLogCmd& default_instance();

  void Swap(ChargeLogCmd* other);

  // implements Message ----------------------------------------------

  ChargeLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChargeLogCmd& from);
  void MergeFrom(const ChargeLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = CHARGE_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 8;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string ip = 9;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 9;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string oid = 10;
  inline bool has_oid() const;
  inline void clear_oid();
  static const int kOidFieldNumber = 10;
  inline const ::std::string& oid() const;
  inline void set_oid(const ::std::string& value);
  inline void set_oid(const char* value);
  inline void set_oid(const char* value, size_t size);
  inline ::std::string* mutable_oid();
  inline ::std::string* release_oid();
  inline void set_allocated_oid(::std::string* oid);

  // optional string type = 11;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 11;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional uint32 level = 12;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 12;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional float amount = 13;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 13;
  inline float amount() const;
  inline void set_amount(float value);

  // optional uint32 coins = 14;
  inline bool has_coins() const;
  inline void clear_coins();
  static const int kCoinsFieldNumber = 14;
  inline ::google::protobuf::uint32 coins() const;
  inline void set_coins(::google::protobuf::uint32 value);

  // repeated uint32 mark = 15;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 15;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string name = 16;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 16;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string device = 17;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 17;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // optional uint32 ctime = 18;
  inline bool has_ctime() const;
  inline void clear_ctime();
  static const int kCtimeFieldNumber = 18;
  inline ::google::protobuf::uint32 ctime() const;
  inline void set_ctime(::google::protobuf::uint32 value);

  // optional string currency = 19;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 19;
  inline const ::std::string& currency() const;
  inline void set_currency(const ::std::string& value);
  inline void set_currency(const char* value);
  inline void set_currency(const char* value, size_t size);
  inline ::std::string* mutable_currency();
  inline ::std::string* release_currency();
  inline void set_allocated_currency(::std::string* currency);

  // optional string provider = 20;
  inline bool has_provider() const;
  inline void clear_provider();
  static const int kProviderFieldNumber = 20;
  inline const ::std::string& provider() const;
  inline void set_provider(const ::std::string& value);
  inline void set_provider(const char* value);
  inline void set_provider(const char* value, size_t size);
  inline ::std::string* mutable_provider();
  inline ::std::string* release_provider();
  inline void set_allocated_provider(::std::string* provider);

  // optional uint32 itemid = 21;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 21;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional string logid = 22;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 22;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.ChargeLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_oid();
  inline void clear_has_oid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_coins();
  inline void clear_has_coins();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_ctime();
  inline void clear_has_ctime();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_provider();
  inline void clear_has_provider();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint64 pid_;
  ::std::string* ip_;
  ::std::string* oid_;
  ::std::string* type_;
  ::google::protobuf::uint32 level_;
  float amount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* name_;
  ::google::protobuf::uint32 coins_;
  ::google::protobuf::uint32 ctime_;
  ::std::string* device_;
  ::std::string* currency_;
  ::std::string* provider_;
  ::std::string* logid_;
  ::google::protobuf::uint32 itemid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static ChargeLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class EventLogCmd : public ::google::protobuf::Message {
 public:
  EventLogCmd();
  virtual ~EventLogCmd();

  EventLogCmd(const EventLogCmd& from);

  inline EventLogCmd& operator=(const EventLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventLogCmd& default_instance();

  void Swap(EventLogCmd* other);

  // implements Message ----------------------------------------------

  EventLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventLogCmd& from);
  void MergeFrom(const EventLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = EVENT_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 8;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional double microtime = 9;
  inline bool has_microtime() const;
  inline void clear_microtime();
  static const int kMicrotimeFieldNumber = 9;
  inline double microtime() const;
  inline void set_microtime(double value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 11;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 11;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 subtype = 13;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubtypeFieldNumber = 13;
  inline ::google::protobuf::uint32 subtype() const;
  inline void set_subtype(::google::protobuf::uint32 value);

  // optional uint32 count = 14;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 14;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // repeated uint32 mark = 15;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 15;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 16;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 16;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.EventLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_microtime();
  inline void clear_has_microtime();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint64 pid_;
  double microtime_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 subtype_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static EventLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class IncomeLogCmd : public ::google::protobuf::Message {
 public:
  IncomeLogCmd();
  virtual ~IncomeLogCmd();

  IncomeLogCmd(const IncomeLogCmd& from);

  inline IncomeLogCmd& operator=(const IncomeLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IncomeLogCmd& default_instance();

  void Swap(IncomeLogCmd* other);

  // implements Message ----------------------------------------------

  IncomeLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IncomeLogCmd& from);
  void MergeFrom(const IncomeLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = INCOME_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 8;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional double microtime = 9;
  inline bool has_microtime() const;
  inline void clear_microtime();
  static const int kMicrotimeFieldNumber = 9;
  inline double microtime() const;
  inline void set_microtime(double value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 11;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 11;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint64 value = 12;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 12;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // optional uint32 coin_type = 13;
  inline bool has_coin_type() const;
  inline void clear_coin_type();
  static const int kCoinTypeFieldNumber = 13;
  inline ::google::protobuf::uint32 coin_type() const;
  inline void set_coin_type(::google::protobuf::uint32 value);

  // optional uint32 type = 14;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 14;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 after = 15;
  inline bool has_after() const;
  inline void clear_after();
  static const int kAfterFieldNumber = 15;
  inline ::google::protobuf::uint64 after() const;
  inline void set_after(::google::protobuf::uint64 value);

  // repeated uint32 mark = 16;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 16;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 17;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 17;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional uint32 source = 18;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 18;
  inline ::google::protobuf::uint32 source() const;
  inline void set_source(::google::protobuf::uint32 value);

  // optional uint32 count = 19;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 19;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.IncomeLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_microtime();
  inline void clear_has_microtime();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_coin_type();
  inline void clear_has_coin_type();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_after();
  inline void clear_has_after();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint64 pid_;
  double microtime_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint64 value_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint32 coin_type_;
  ::google::protobuf::uint64 after_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 source_;
  ::std::string* logid_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static IncomeLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class ConsumeLogCmd : public ::google::protobuf::Message {
 public:
  ConsumeLogCmd();
  virtual ~ConsumeLogCmd();

  ConsumeLogCmd(const ConsumeLogCmd& from);

  inline ConsumeLogCmd& operator=(const ConsumeLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsumeLogCmd& default_instance();

  void Swap(ConsumeLogCmd* other);

  // implements Message ----------------------------------------------

  ConsumeLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConsumeLogCmd& from);
  void MergeFrom(const ConsumeLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = CONSUME_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 8;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional double microtime = 9;
  inline bool has_microtime() const;
  inline void clear_microtime();
  static const int kMicrotimeFieldNumber = 9;
  inline double microtime() const;
  inline void set_microtime(double value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 11;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 11;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint64 value = 12;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 12;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // optional uint32 coin_type = 13;
  inline bool has_coin_type() const;
  inline void clear_coin_type();
  static const int kCoinTypeFieldNumber = 13;
  inline ::google::protobuf::uint32 coin_type() const;
  inline void set_coin_type(::google::protobuf::uint32 value);

  // optional uint32 type = 14;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 14;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 after = 15;
  inline bool has_after() const;
  inline void clear_after();
  static const int kAfterFieldNumber = 15;
  inline ::google::protobuf::uint64 after() const;
  inline void set_after(::google::protobuf::uint64 value);

  // repeated uint32 mark = 16;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 16;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 17;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 17;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional uint32 kind = 18;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 18;
  inline ::google::protobuf::uint32 kind() const;
  inline void set_kind(::google::protobuf::uint32 value);

  // optional uint32 source = 19;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 19;
  inline ::google::protobuf::uint32 source() const;
  inline void set_source(::google::protobuf::uint32 value);

  // optional uint32 count = 20;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 20;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint64 chargecount = 21;
  inline bool has_chargecount() const;
  inline void clear_chargecount();
  static const int kChargecountFieldNumber = 21;
  inline ::google::protobuf::uint64 chargecount() const;
  inline void set_chargecount(::google::protobuf::uint64 value);

  // optional uint64 remaincharge = 22;
  inline bool has_remaincharge() const;
  inline void clear_remaincharge();
  static const int kRemainchargeFieldNumber = 22;
  inline ::google::protobuf::uint64 remaincharge() const;
  inline void set_remaincharge(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ConsumeLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_microtime();
  inline void clear_has_microtime();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_coin_type();
  inline void clear_has_coin_type();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_after();
  inline void clear_has_after();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_chargecount();
  inline void clear_has_chargecount();
  inline void set_has_remaincharge();
  inline void clear_has_remaincharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint64 pid_;
  double microtime_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint64 value_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint32 coin_type_;
  ::google::protobuf::uint64 after_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 kind_;
  ::std::string* logid_;
  ::google::protobuf::uint32 source_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint64 chargecount_;
  ::google::protobuf::uint64 remaincharge_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static ConsumeLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class ItemLogCmd : public ::google::protobuf::Message {
 public:
  ItemLogCmd();
  virtual ~ItemLogCmd();

  ItemLogCmd(const ItemLogCmd& from);

  inline ItemLogCmd& operator=(const ItemLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemLogCmd& default_instance();

  void Swap(ItemLogCmd* other);

  // implements Message ----------------------------------------------

  ItemLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemLogCmd& from);
  void MergeFrom(const ItemLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = ITEM_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint64 eid = 8;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 8;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional double microtime = 10;
  inline bool has_microtime() const;
  inline void clear_microtime();
  static const int kMicrotimeFieldNumber = 10;
  inline double microtime() const;
  inline void set_microtime(double value);

  // optional string logid = 11;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 11;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional uint32 ispay = 12;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 12;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 type = 13;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 13;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 itemid = 14;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 14;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 value = 15;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 15;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional uint64 from_pid = 16;
  inline bool has_from_pid() const;
  inline void clear_from_pid();
  static const int kFromPidFieldNumber = 16;
  inline ::google::protobuf::uint64 from_pid() const;
  inline void set_from_pid(::google::protobuf::uint64 value);

  // optional uint32 after = 17;
  inline bool has_after() const;
  inline void clear_after();
  static const int kAfterFieldNumber = 17;
  inline ::google::protobuf::uint32 after() const;
  inline void set_after(::google::protobuf::uint32 value);

  // optional uint32 amount = 18;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 18;
  inline ::google::protobuf::uint32 amount() const;
  inline void set_amount(::google::protobuf::uint32 value);

  // optional uint32 amount2 = 19;
  inline bool has_amount2() const;
  inline void clear_amount2();
  static const int kAmount2FieldNumber = 19;
  inline ::google::protobuf::uint32 amount2() const;
  inline void set_amount2(::google::protobuf::uint32 value);

  // repeated uint32 mark = 20;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 20;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional uint32 source = 21;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 21;
  inline ::google::protobuf::uint32 source() const;
  inline void set_source(::google::protobuf::uint32 value);

  // optional uint32 count = 22;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 22;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ItemLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_microtime();
  inline void clear_has_microtime();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_from_pid();
  inline void clear_has_from_pid();
  inline void set_has_after();
  inline void clear_has_after();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_amount2();
  inline void clear_has_amount2();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint64 eid_;
  double microtime_;
  ::std::string* logid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint64 from_pid_;
  ::google::protobuf::uint32 after_;
  ::google::protobuf::uint32 amount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::google::protobuf::uint32 amount2_;
  ::google::protobuf::uint32 source_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static ItemLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class PropsLogCmd : public ::google::protobuf::Message {
 public:
  PropsLogCmd();
  virtual ~PropsLogCmd();

  PropsLogCmd(const PropsLogCmd& from);

  inline PropsLogCmd& operator=(const PropsLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropsLogCmd& default_instance();

  void Swap(PropsLogCmd* other);

  // implements Message ----------------------------------------------

  PropsLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropsLogCmd& from);
  void MergeFrom(const PropsLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = PROPS_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint64 eid = 8;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 8;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional double microtime = 10;
  inline bool has_microtime() const;
  inline void clear_microtime();
  static const int kMicrotimeFieldNumber = 10;
  inline double microtime() const;
  inline void set_microtime(double value);

  // optional string logid = 11;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 11;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional uint32 ispay = 12;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 12;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 itemid = 13;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 13;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 value = 14;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 14;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional uint32 type = 15;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 15;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 after = 16;
  inline bool has_after() const;
  inline void clear_after();
  static const int kAfterFieldNumber = 16;
  inline ::google::protobuf::uint32 after() const;
  inline void set_after(::google::protobuf::uint32 value);

  // repeated uint32 mark = 17;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 17;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional uint32 source = 18;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 18;
  inline ::google::protobuf::uint32 source() const;
  inline void set_source(::google::protobuf::uint32 value);

  // optional uint32 count = 19;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 19;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional string iteminfo = 20;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kIteminfoFieldNumber = 20;
  inline const ::std::string& iteminfo() const;
  inline void set_iteminfo(const ::std::string& value);
  inline void set_iteminfo(const char* value);
  inline void set_iteminfo(const char* value, size_t size);
  inline ::std::string* mutable_iteminfo();
  inline ::std::string* release_iteminfo();
  inline void set_allocated_iteminfo(::std::string* iteminfo);

  // @@protoc_insertion_point(class_scope:Cmd.PropsLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_microtime();
  inline void clear_has_microtime();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_after();
  inline void clear_has_after();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint64 eid_;
  double microtime_;
  ::std::string* logid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::google::protobuf::uint32 after_;
  ::google::protobuf::uint32 source_;
  ::std::string* iteminfo_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static PropsLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class TransactionLogCmd : public ::google::protobuf::Message {
 public:
  TransactionLogCmd();
  virtual ~TransactionLogCmd();

  TransactionLogCmd(const TransactionLogCmd& from);

  inline TransactionLogCmd& operator=(const TransactionLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionLogCmd& default_instance();

  void Swap(TransactionLogCmd* other);

  // implements Message ----------------------------------------------

  TransactionLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionLogCmd& from);
  void MergeFrom(const TransactionLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = TRANSACTION_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string from_account = 6;
  inline bool has_from_account() const;
  inline void clear_from_account();
  static const int kFromAccountFieldNumber = 6;
  inline const ::std::string& from_account() const;
  inline void set_from_account(const ::std::string& value);
  inline void set_from_account(const char* value);
  inline void set_from_account(const char* value, size_t size);
  inline ::std::string* mutable_from_account();
  inline ::std::string* release_from_account();
  inline void set_allocated_from_account(::std::string* from_account);

  // optional uint64 from_pid = 7;
  inline bool has_from_pid() const;
  inline void clear_from_pid();
  static const int kFromPidFieldNumber = 7;
  inline ::google::protobuf::uint64 from_pid() const;
  inline void set_from_pid(::google::protobuf::uint64 value);

  // optional string to_account = 8;
  inline bool has_to_account() const;
  inline void clear_to_account();
  static const int kToAccountFieldNumber = 8;
  inline const ::std::string& to_account() const;
  inline void set_to_account(const ::std::string& value);
  inline void set_to_account(const char* value);
  inline void set_to_account(const char* value, size_t size);
  inline ::std::string* mutable_to_account();
  inline ::std::string* release_to_account();
  inline void set_allocated_to_account(::std::string* to_account);

  // optional uint64 to_pid = 9;
  inline bool has_to_pid() const;
  inline void clear_to_pid();
  static const int kToPidFieldNumber = 9;
  inline ::google::protobuf::uint64 to_pid() const;
  inline void set_to_pid(::google::protobuf::uint64 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 time = 11;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 ispay = 12;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 12;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 itemid = 13;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 13;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 value = 14;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 14;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // repeated uint32 mark = 15;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 15;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional uint32 fee = 16;
  inline bool has_fee() const;
  inline void clear_fee();
  static const int kFeeFieldNumber = 16;
  inline ::google::protobuf::uint32 fee() const;
  inline void set_fee(::google::protobuf::uint32 value);

  // optional uint32 fee2 = 17;
  inline bool has_fee2() const;
  inline void clear_fee2();
  static const int kFee2FieldNumber = 17;
  inline ::google::protobuf::uint32 fee2() const;
  inline void set_fee2(::google::protobuf::uint32 value);

  // optional string logid = 18;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 18;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.TransactionLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_from_account();
  inline void clear_has_from_account();
  inline void set_has_from_pid();
  inline void clear_has_from_pid();
  inline void set_has_to_account();
  inline void clear_has_to_account();
  inline void set_has_to_pid();
  inline void clear_has_to_pid();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_fee();
  inline void clear_has_fee();
  inline void set_has_fee2();
  inline void clear_has_fee2();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* from_account_;
  ::google::protobuf::uint64 from_pid_;
  ::std::string* to_account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint64 to_pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 fee_;
  ::std::string* logid_;
  ::google::protobuf::uint32 fee2_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static TransactionLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class ChatLogCmd : public ::google::protobuf::Message {
 public:
  ChatLogCmd();
  virtual ~ChatLogCmd();

  ChatLogCmd(const ChatLogCmd& from);

  inline ChatLogCmd& operator=(const ChatLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatLogCmd& default_instance();

  void Swap(ChatLogCmd* other);

  // implements Message ----------------------------------------------

  ChatLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatLogCmd& from);
  void MergeFrom(const ChatLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = CHAT_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string from_account = 6;
  inline bool has_from_account() const;
  inline void clear_from_account();
  static const int kFromAccountFieldNumber = 6;
  inline const ::std::string& from_account() const;
  inline void set_from_account(const ::std::string& value);
  inline void set_from_account(const char* value);
  inline void set_from_account(const char* value, size_t size);
  inline ::std::string* mutable_from_account();
  inline ::std::string* release_from_account();
  inline void set_allocated_from_account(::std::string* from_account);

  // optional string from_name = 7;
  inline bool has_from_name() const;
  inline void clear_from_name();
  static const int kFromNameFieldNumber = 7;
  inline const ::std::string& from_name() const;
  inline void set_from_name(const ::std::string& value);
  inline void set_from_name(const char* value);
  inline void set_from_name(const char* value, size_t size);
  inline ::std::string* mutable_from_name();
  inline ::std::string* release_from_name();
  inline void set_allocated_from_name(::std::string* from_name);

  // optional uint64 from_pid = 8;
  inline bool has_from_pid() const;
  inline void clear_from_pid();
  static const int kFromPidFieldNumber = 8;
  inline ::google::protobuf::uint64 from_pid() const;
  inline void set_from_pid(::google::protobuf::uint64 value);

  // optional string to_account = 9;
  inline bool has_to_account() const;
  inline void clear_to_account();
  static const int kToAccountFieldNumber = 9;
  inline const ::std::string& to_account() const;
  inline void set_to_account(const ::std::string& value);
  inline void set_to_account(const char* value);
  inline void set_to_account(const char* value, size_t size);
  inline ::std::string* mutable_to_account();
  inline ::std::string* release_to_account();
  inline void set_allocated_to_account(::std::string* to_account);

  // optional string to_name = 10;
  inline bool has_to_name() const;
  inline void clear_to_name();
  static const int kToNameFieldNumber = 10;
  inline const ::std::string& to_name() const;
  inline void set_to_name(const ::std::string& value);
  inline void set_to_name(const char* value);
  inline void set_to_name(const char* value, size_t size);
  inline ::std::string* mutable_to_name();
  inline ::std::string* release_to_name();
  inline void set_allocated_to_name(::std::string* to_name);

  // optional uint64 to_pid = 11;
  inline bool has_to_pid() const;
  inline void clear_to_pid();
  static const int kToPidFieldNumber = 11;
  inline ::google::protobuf::uint64 to_pid() const;
  inline void set_to_pid(::google::protobuf::uint64 value);

  // optional uint32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 time = 13;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 13;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 ispay = 14;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 14;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional string content = 15;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 15;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint32 vip = 16;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 16;
  inline ::google::protobuf::uint32 vip() const;
  inline void set_vip(::google::protobuf::uint32 value);

  // optional uint32 level = 17;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 17;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint64 eid = 18;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 18;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional .Cmd.EChatType chattype = 19;
  inline bool has_chattype() const;
  inline void clear_chattype();
  static const int kChattypeFieldNumber = 19;
  inline ::Cmd::EChatType chattype() const;
  inline void set_chattype(::Cmd::EChatType value);

  // optional uint32 voicelen = 20;
  inline bool has_voicelen() const;
  inline void clear_voicelen();
  static const int kVoicelenFieldNumber = 20;
  inline ::google::protobuf::uint32 voicelen() const;
  inline void set_voicelen(::google::protobuf::uint32 value);

  // optional string logid = 21;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 21;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.ChatLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_from_account();
  inline void clear_has_from_account();
  inline void set_has_from_name();
  inline void clear_has_from_name();
  inline void set_has_from_pid();
  inline void clear_has_from_pid();
  inline void set_has_to_account();
  inline void clear_has_to_account();
  inline void set_has_to_name();
  inline void clear_has_to_name();
  inline void set_has_to_pid();
  inline void clear_has_to_pid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_chattype();
  inline void clear_has_chattype();
  inline void set_has_voicelen();
  inline void clear_has_voicelen();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* from_account_;
  ::std::string* from_name_;
  ::google::protobuf::uint64 from_pid_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 type_;
  ::std::string* to_account_;
  ::std::string* to_name_;
  ::google::protobuf::uint64 to_pid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 ispay_;
  ::std::string* content_;
  ::google::protobuf::uint32 vip_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint64 eid_;
  int chattype_;
  ::google::protobuf::uint32 voicelen_;
  ::std::string* logid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static ChatLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class LevelLogCmd : public ::google::protobuf::Message {
 public:
  LevelLogCmd();
  virtual ~LevelLogCmd();

  LevelLogCmd(const LevelLogCmd& from);

  inline LevelLogCmd& operator=(const LevelLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelLogCmd& default_instance();

  void Swap(LevelLogCmd* other);

  // implements Message ----------------------------------------------

  LevelLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LevelLogCmd& from);
  void MergeFrom(const LevelLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = LEVEL_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 8;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 from = 9;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 9;
  inline ::google::protobuf::uint32 from() const;
  inline void set_from(::google::protobuf::uint32 value);

  // optional uint32 to = 10;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 10;
  inline ::google::protobuf::uint32 to() const;
  inline void set_to(::google::protobuf::uint32 value);

  // optional uint32 ispay = 11;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 11;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated uint32 mark = 13;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 13;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 14;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 14;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional uint32 costtime = 15;
  inline bool has_costtime() const;
  inline void clear_costtime();
  static const int kCosttimeFieldNumber = 15;
  inline ::google::protobuf::uint32 costtime() const;
  inline void set_costtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.LevelLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_costtime();
  inline void clear_has_costtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint32 from_;
  ::google::protobuf::uint32 to_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  ::google::protobuf::uint32 costtime_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static LevelLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class OnlineLogCmd : public ::google::protobuf::Message {
 public:
  OnlineLogCmd();
  virtual ~OnlineLogCmd();

  OnlineLogCmd(const OnlineLogCmd& from);

  inline OnlineLogCmd& operator=(const OnlineLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlineLogCmd& default_instance();

  void Swap(OnlineLogCmd* other);

  // implements Message ----------------------------------------------

  OnlineLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OnlineLogCmd& from);
  void MergeFrom(const OnlineLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = ONLINE_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 count_all = 6;
  inline bool has_count_all() const;
  inline void clear_count_all();
  static const int kCountAllFieldNumber = 6;
  inline ::google::protobuf::uint32 count_all() const;
  inline void set_count_all(::google::protobuf::uint32 value);

  // optional uint32 count_web = 7;
  inline bool has_count_web() const;
  inline void clear_count_web();
  static const int kCountWebFieldNumber = 7;
  inline ::google::protobuf::uint32 count_web() const;
  inline void set_count_web(::google::protobuf::uint32 value);

  // optional uint32 count_client = 8;
  inline bool has_count_client() const;
  inline void clear_count_client();
  static const int kCountClientFieldNumber = 8;
  inline ::google::protobuf::uint32 count_client() const;
  inline void set_count_client(::google::protobuf::uint32 value);

  // optional uint32 count_ios = 9;
  inline bool has_count_ios() const;
  inline void clear_count_ios();
  static const int kCountIosFieldNumber = 9;
  inline ::google::protobuf::uint32 count_ios() const;
  inline void set_count_ios(::google::protobuf::uint32 value);

  // optional uint32 count_android = 10;
  inline bool has_count_android() const;
  inline void clear_count_android();
  static const int kCountAndroidFieldNumber = 10;
  inline ::google::protobuf::uint32 count_android() const;
  inline void set_count_android(::google::protobuf::uint32 value);

  // optional string logid = 11;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 11;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional uint32 lineid = 12;
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineidFieldNumber = 12;
  inline ::google::protobuf::uint32 lineid() const;
  inline void set_lineid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.OnlineLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_count_all();
  inline void clear_has_count_all();
  inline void set_has_count_web();
  inline void clear_has_count_web();
  inline void set_has_count_client();
  inline void clear_has_count_client();
  inline void set_has_count_ios();
  inline void clear_has_count_ios();
  inline void set_has_count_android();
  inline void clear_has_count_android();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_lineid();
  inline void clear_has_lineid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 count_all_;
  ::google::protobuf::uint32 count_web_;
  ::google::protobuf::uint32 count_client_;
  ::google::protobuf::uint32 count_ios_;
  ::google::protobuf::uint32 count_android_;
  ::std::string* logid_;
  ::google::protobuf::uint32 lineid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static OnlineLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class SnapshotLogCmd : public ::google::protobuf::Message {
 public:
  SnapshotLogCmd();
  virtual ~SnapshotLogCmd();

  SnapshotLogCmd(const SnapshotLogCmd& from);

  inline SnapshotLogCmd& operator=(const SnapshotLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotLogCmd& default_instance();

  void Swap(SnapshotLogCmd* other);

  // implements Message ----------------------------------------------

  SnapshotLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapshotLogCmd& from);
  void MergeFrom(const SnapshotLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cmd.SnapshotLogCmd)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static SnapshotLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class CheckpointLogCmd : public ::google::protobuf::Message {
 public:
  CheckpointLogCmd();
  virtual ~CheckpointLogCmd();

  CheckpointLogCmd(const CheckpointLogCmd& from);

  inline CheckpointLogCmd& operator=(const CheckpointLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckpointLogCmd& default_instance();

  void Swap(CheckpointLogCmd* other);

  // implements Message ----------------------------------------------

  CheckpointLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckpointLogCmd& from);
  void MergeFrom(const CheckpointLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = CHECKPOINT_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint64 eid = 8;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 8;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 type = 10;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 cpid = 11;
  inline bool has_cpid() const;
  inline void clear_cpid();
  static const int kCpidFieldNumber = 11;
  inline ::google::protobuf::uint32 cpid() const;
  inline void set_cpid(::google::protobuf::uint32 value);

  // optional uint32 result = 12;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 12;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional uint32 star = 13;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 13;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 ispay = 14;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 14;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 vip = 15;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 15;
  inline ::google::protobuf::uint32 vip() const;
  inline void set_vip(::google::protobuf::uint32 value);

  // optional string logid = 16;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 16;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional uint32 isfirst = 17;
  inline bool has_isfirst() const;
  inline void clear_isfirst();
  static const int kIsfirstFieldNumber = 17;
  inline ::google::protobuf::uint32 isfirst() const;
  inline void set_isfirst(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.CheckpointLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cpid();
  inline void clear_has_cpid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_isfirst();
  inline void clear_has_isfirst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 cpid_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint32 vip_;
  ::std::string* logid_;
  ::google::protobuf::uint32 isfirst_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static CheckpointLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class RankLogCmd : public ::google::protobuf::Message {
 public:
  RankLogCmd();
  virtual ~RankLogCmd();

  RankLogCmd(const RankLogCmd& from);

  inline RankLogCmd& operator=(const RankLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankLogCmd& default_instance();

  void Swap(RankLogCmd* other);

  // implements Message ----------------------------------------------

  RankLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankLogCmd& from);
  void MergeFrom(const RankLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = RANK_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 value = 8;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 8;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional uint32 date = 9;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 9;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);

  // optional uint32 time = 10;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 10;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string logid = 11;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 11;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.RankLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 date_;
  ::std::string* logid_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static RankLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class ChatSearchCond : public ::google::protobuf::Message {
 public:
  ChatSearchCond();
  virtual ~ChatSearchCond();

  ChatSearchCond(const ChatSearchCond& from);

  inline ChatSearchCond& operator=(const ChatSearchCond& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatSearchCond& default_instance();

  void Swap(ChatSearchCond* other);

  // implements Message ----------------------------------------------

  ChatSearchCond* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatSearchCond& from);
  void MergeFrom(const ChatSearchCond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 who = 1;
  inline bool has_who() const;
  inline void clear_who();
  static const int kWhoFieldNumber = 1;
  inline ::google::protobuf::uint64 who() const;
  inline void set_who(::google::protobuf::uint64 value);

  // optional uint32 fromtime = 2;
  inline bool has_fromtime() const;
  inline void clear_fromtime();
  static const int kFromtimeFieldNumber = 2;
  inline ::google::protobuf::uint32 fromtime() const;
  inline void set_fromtime(::google::protobuf::uint32 value);

  // optional uint32 totime = 3;
  inline bool has_totime() const;
  inline void clear_totime();
  static const int kTotimeFieldNumber = 3;
  inline ::google::protobuf::uint32 totime() const;
  inline void set_totime(::google::protobuf::uint32 value);

  // optional .Cmd.EChatType chattype = 4;
  inline bool has_chattype() const;
  inline void clear_chattype();
  static const int kChattypeFieldNumber = 4;
  inline ::Cmd::EChatType chattype() const;
  inline void set_chattype(::Cmd::EChatType value);

  // @@protoc_insertion_point(class_scope:Cmd.ChatSearchCond)
 private:
  inline void set_has_who();
  inline void clear_has_who();
  inline void set_has_fromtime();
  inline void clear_has_fromtime();
  inline void set_has_totime();
  inline void clear_has_totime();
  inline void set_has_chattype();
  inline void clear_has_chattype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 who_;
  ::google::protobuf::uint32 fromtime_;
  ::google::protobuf::uint32 totime_;
  int chattype_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static ChatSearchCond* default_instance_;
};
// -------------------------------------------------------------------

class ChatLogRes : public ::google::protobuf::Message {
 public:
  ChatLogRes();
  virtual ~ChatLogRes();

  ChatLogRes(const ChatLogRes& from);

  inline ChatLogRes& operator=(const ChatLogRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatLogRes& default_instance();

  void Swap(ChatLogRes* other);

  // implements Message ----------------------------------------------

  ChatLogRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatLogRes& from);
  void MergeFrom(const ChatLogRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 sendid = 1;
  inline bool has_sendid() const;
  inline void clear_sendid();
  static const int kSendidFieldNumber = 1;
  inline ::google::protobuf::uint64 sendid() const;
  inline void set_sendid(::google::protobuf::uint64 value);

  // optional string sendname = 2;
  inline bool has_sendname() const;
  inline void clear_sendname();
  static const int kSendnameFieldNumber = 2;
  inline const ::std::string& sendname() const;
  inline void set_sendname(const ::std::string& value);
  inline void set_sendname(const char* value);
  inline void set_sendname(const char* value, size_t size);
  inline ::std::string* mutable_sendname();
  inline ::std::string* release_sendname();
  inline void set_allocated_sendname(::std::string* sendname);

  // optional uint64 recvid = 3;
  inline bool has_recvid() const;
  inline void clear_recvid();
  static const int kRecvidFieldNumber = 3;
  inline ::google::protobuf::uint64 recvid() const;
  inline void set_recvid(::google::protobuf::uint64 value);

  // optional string recvname = 4;
  inline bool has_recvname() const;
  inline void clear_recvname();
  static const int kRecvnameFieldNumber = 4;
  inline const ::std::string& recvname() const;
  inline void set_recvname(const ::std::string& value);
  inline void set_recvname(const char* value);
  inline void set_recvname(const char* value, size_t size);
  inline ::std::string* mutable_recvname();
  inline ::std::string* release_recvname();
  inline void set_allocated_recvname(::std::string* recvname);

  // optional uint32 createtime = 5;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 5;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint32 voicelen = 7;
  inline bool has_voicelen() const;
  inline void clear_voicelen();
  static const int kVoicelenFieldNumber = 7;
  inline ::google::protobuf::uint32 voicelen() const;
  inline void set_voicelen(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ChatLogRes)
 private:
  inline void set_has_sendid();
  inline void clear_has_sendid();
  inline void set_has_sendname();
  inline void clear_has_sendname();
  inline void set_has_recvid();
  inline void clear_has_recvid();
  inline void set_has_recvname();
  inline void clear_has_recvname();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_voicelen();
  inline void clear_has_voicelen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 sendid_;
  ::std::string* sendname_;
  ::google::protobuf::uint64 recvid_;
  ::std::string* recvname_;
  ::std::string* content_;
  ::google::protobuf::uint32 createtime_;
  ::google::protobuf::uint32 voicelen_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static ChatLogRes* default_instance_;
};
// -------------------------------------------------------------------

class QueryChatLogCmd : public ::google::protobuf::Message {
 public:
  QueryChatLogCmd();
  virtual ~QueryChatLogCmd();

  QueryChatLogCmd(const QueryChatLogCmd& from);

  inline QueryChatLogCmd& operator=(const QueryChatLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryChatLogCmd& default_instance();

  void Swap(QueryChatLogCmd* other);

  // implements Message ----------------------------------------------

  QueryChatLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryChatLogCmd& from);
  void MergeFrom(const QueryChatLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = QUERY_CHAT_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional .Cmd.ChatSearchCond cond = 3;
  inline bool has_cond() const;
  inline void clear_cond();
  static const int kCondFieldNumber = 3;
  inline const ::Cmd::ChatSearchCond& cond() const;
  inline ::Cmd::ChatSearchCond* mutable_cond();
  inline ::Cmd::ChatSearchCond* release_cond();
  inline void set_allocated_cond(::Cmd::ChatSearchCond* cond);

  // repeated .Cmd.ChatLogRes res = 4;
  inline int res_size() const;
  inline void clear_res();
  static const int kResFieldNumber = 4;
  inline const ::Cmd::ChatLogRes& res(int index) const;
  inline ::Cmd::ChatLogRes* mutable_res(int index);
  inline ::Cmd::ChatLogRes* add_res();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ChatLogRes >&
      res() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ChatLogRes >*
      mutable_res();

  // @@protoc_insertion_point(class_scope:Cmd.QueryChatLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cond();
  inline void clear_has_cond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::ChatSearchCond* cond_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ChatLogRes > res_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static QueryChatLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class ChangeLogCmd : public ::google::protobuf::Message {
 public:
  ChangeLogCmd();
  virtual ~ChangeLogCmd();

  ChangeLogCmd(const ChangeLogCmd& from);

  inline ChangeLogCmd& operator=(const ChangeLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeLogCmd& default_instance();

  void Swap(ChangeLogCmd* other);

  // implements Message ----------------------------------------------

  ChangeLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeLogCmd& from);
  void MergeFrom(const ChangeLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = CHANGE_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 flag = 12;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 12;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // optional string from = 13;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 13;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // optional string to = 14;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 14;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const char* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // optional uint64 param1 = 15;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 15;
  inline ::google::protobuf::uint64 param1() const;
  inline void set_param1(::google::protobuf::uint64 value);

  // repeated uint32 mark = 16;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 16;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 17;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 17;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.ChangeLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::std::string* from_;
  ::std::string* to_;
  ::google::protobuf::uint64 param1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  ::google::protobuf::uint32 flag_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static ChangeLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class EquipLogCmd : public ::google::protobuf::Message {
 public:
  EquipLogCmd();
  virtual ~EquipLogCmd();

  EquipLogCmd(const EquipLogCmd& from);

  inline EquipLogCmd& operator=(const EquipLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipLogCmd& default_instance();

  void Swap(EquipLogCmd* other);

  // implements Message ----------------------------------------------

  EquipLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipLogCmd& from);
  void MergeFrom(const EquipLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = EQUIP_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 old_equipid = 13;
  inline bool has_old_equipid() const;
  inline void clear_old_equipid();
  static const int kOldEquipidFieldNumber = 13;
  inline ::google::protobuf::uint32 old_equipid() const;
  inline void set_old_equipid(::google::protobuf::uint32 value);

  // optional string old_equipgid = 14;
  inline bool has_old_equipgid() const;
  inline void clear_old_equipgid();
  static const int kOldEquipgidFieldNumber = 14;
  inline const ::std::string& old_equipgid() const;
  inline void set_old_equipgid(const ::std::string& value);
  inline void set_old_equipgid(const char* value);
  inline void set_old_equipgid(const char* value, size_t size);
  inline ::std::string* mutable_old_equipgid();
  inline ::std::string* release_old_equipgid();
  inline void set_allocated_old_equipgid(::std::string* old_equipgid);

  // optional uint32 old_strengthlv = 15;
  inline bool has_old_strengthlv() const;
  inline void clear_old_strengthlv();
  static const int kOldStrengthlvFieldNumber = 15;
  inline ::google::protobuf::uint32 old_strengthlv() const;
  inline void set_old_strengthlv(::google::protobuf::uint32 value);

  // optional uint32 old_refinelv = 16;
  inline bool has_old_refinelv() const;
  inline void clear_old_refinelv();
  static const int kOldRefinelvFieldNumber = 16;
  inline ::google::protobuf::uint32 old_refinelv() const;
  inline void set_old_refinelv(::google::protobuf::uint32 value);

  // optional int32 old_isdamage = 17;
  inline bool has_old_isdamage() const;
  inline void clear_old_isdamage();
  static const int kOldIsdamageFieldNumber = 17;
  inline ::google::protobuf::int32 old_isdamage() const;
  inline void set_old_isdamage(::google::protobuf::int32 value);

  // optional uint32 new_equipid = 18;
  inline bool has_new_equipid() const;
  inline void clear_new_equipid();
  static const int kNewEquipidFieldNumber = 18;
  inline ::google::protobuf::uint32 new_equipid() const;
  inline void set_new_equipid(::google::protobuf::uint32 value);

  // optional string new_equipgid = 19;
  inline bool has_new_equipgid() const;
  inline void clear_new_equipgid();
  static const int kNewEquipgidFieldNumber = 19;
  inline const ::std::string& new_equipgid() const;
  inline void set_new_equipgid(const ::std::string& value);
  inline void set_new_equipgid(const char* value);
  inline void set_new_equipgid(const char* value, size_t size);
  inline ::std::string* mutable_new_equipgid();
  inline ::std::string* release_new_equipgid();
  inline void set_allocated_new_equipgid(::std::string* new_equipgid);

  // optional uint32 new_strengthlv = 20;
  inline bool has_new_strengthlv() const;
  inline void clear_new_strengthlv();
  static const int kNewStrengthlvFieldNumber = 20;
  inline ::google::protobuf::uint32 new_strengthlv() const;
  inline void set_new_strengthlv(::google::protobuf::uint32 value);

  // optional uint32 new_refinelv = 21;
  inline bool has_new_refinelv() const;
  inline void clear_new_refinelv();
  static const int kNewRefinelvFieldNumber = 21;
  inline ::google::protobuf::uint32 new_refinelv() const;
  inline void set_new_refinelv(::google::protobuf::uint32 value);

  // optional int32 new_isdamage = 22;
  inline bool has_new_isdamage() const;
  inline void clear_new_isdamage();
  static const int kNewIsdamageFieldNumber = 22;
  inline ::google::protobuf::int32 new_isdamage() const;
  inline void set_new_isdamage(::google::protobuf::int32 value);

  // repeated uint32 mark = 23;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 23;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 24;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 24;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.EquipLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_old_equipid();
  inline void clear_has_old_equipid();
  inline void set_has_old_equipgid();
  inline void clear_has_old_equipgid();
  inline void set_has_old_strengthlv();
  inline void clear_has_old_strengthlv();
  inline void set_has_old_refinelv();
  inline void clear_has_old_refinelv();
  inline void set_has_old_isdamage();
  inline void clear_has_old_isdamage();
  inline void set_has_new_equipid();
  inline void clear_has_new_equipid();
  inline void set_has_new_equipgid();
  inline void clear_has_new_equipgid();
  inline void set_has_new_strengthlv();
  inline void clear_has_new_strengthlv();
  inline void set_has_new_refinelv();
  inline void clear_has_new_refinelv();
  inline void set_has_new_isdamage();
  inline void clear_has_new_isdamage();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 old_equipid_;
  ::std::string* old_equipgid_;
  ::google::protobuf::uint32 old_strengthlv_;
  ::google::protobuf::uint32 old_refinelv_;
  ::google::protobuf::int32 old_isdamage_;
  ::google::protobuf::uint32 new_equipid_;
  ::std::string* new_equipgid_;
  ::google::protobuf::uint32 new_strengthlv_;
  ::google::protobuf::uint32 new_refinelv_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  ::google::protobuf::int32 new_isdamage_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static EquipLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class CardLogCmd : public ::google::protobuf::Message {
 public:
  CardLogCmd();
  virtual ~CardLogCmd();

  CardLogCmd(const CardLogCmd& from);

  inline CardLogCmd& operator=(const CardLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardLogCmd& default_instance();

  void Swap(CardLogCmd* other);

  // implements Message ----------------------------------------------

  CardLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardLogCmd& from);
  void MergeFrom(const CardLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = CARD_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 equipid = 13;
  inline bool has_equipid() const;
  inline void clear_equipid();
  static const int kEquipidFieldNumber = 13;
  inline ::google::protobuf::uint32 equipid() const;
  inline void set_equipid(::google::protobuf::uint32 value);

  // optional string equipgid = 14;
  inline bool has_equipgid() const;
  inline void clear_equipgid();
  static const int kEquipgidFieldNumber = 14;
  inline const ::std::string& equipgid() const;
  inline void set_equipgid(const ::std::string& value);
  inline void set_equipgid(const char* value);
  inline void set_equipgid(const char* value, size_t size);
  inline ::std::string* mutable_equipgid();
  inline ::std::string* release_equipgid();
  inline void set_allocated_equipgid(::std::string* equipgid);

  // optional uint32 type = 15;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 15;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 cardid = 16;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardidFieldNumber = 16;
  inline ::google::protobuf::uint32 cardid() const;
  inline void set_cardid(::google::protobuf::uint32 value);

  // optional string cardgid = 17;
  inline bool has_cardgid() const;
  inline void clear_cardgid();
  static const int kCardgidFieldNumber = 17;
  inline const ::std::string& cardgid() const;
  inline void set_cardgid(const ::std::string& value);
  inline void set_cardgid(const char* value);
  inline void set_cardgid(const char* value, size_t size);
  inline ::std::string* mutable_cardgid();
  inline ::std::string* release_cardgid();
  inline void set_allocated_cardgid(::std::string* cardgid);

  // optional uint32 useslot = 18;
  inline bool has_useslot() const;
  inline void clear_useslot();
  static const int kUseslotFieldNumber = 18;
  inline ::google::protobuf::uint32 useslot() const;
  inline void set_useslot(::google::protobuf::uint32 value);

  // optional uint32 maxslot = 19;
  inline bool has_maxslot() const;
  inline void clear_maxslot();
  static const int kMaxslotFieldNumber = 19;
  inline ::google::protobuf::uint32 maxslot() const;
  inline void set_maxslot(::google::protobuf::uint32 value);

  // repeated uint32 mark = 20;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 20;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 21;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 21;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.CardLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_equipid();
  inline void clear_has_equipid();
  inline void set_has_equipgid();
  inline void clear_has_equipgid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_cardgid();
  inline void clear_has_cardgid();
  inline void set_has_useslot();
  inline void clear_has_useslot();
  inline void set_has_maxslot();
  inline void clear_has_maxslot();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::std::string* equipgid_;
  ::google::protobuf::uint32 equipid_;
  ::google::protobuf::uint32 type_;
  ::std::string* cardgid_;
  ::google::protobuf::uint32 cardid_;
  ::google::protobuf::uint32 useslot_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  ::google::protobuf::uint32 maxslot_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static CardLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class EquipUpLogCmd : public ::google::protobuf::Message {
 public:
  EquipUpLogCmd();
  virtual ~EquipUpLogCmd();

  EquipUpLogCmd(const EquipUpLogCmd& from);

  inline EquipUpLogCmd& operator=(const EquipUpLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipUpLogCmd& default_instance();

  void Swap(EquipUpLogCmd* other);

  // implements Message ----------------------------------------------

  EquipUpLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipUpLogCmd& from);
  void MergeFrom(const EquipUpLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = EQUIPUP_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 equipid = 13;
  inline bool has_equipid() const;
  inline void clear_equipid();
  static const int kEquipidFieldNumber = 13;
  inline ::google::protobuf::uint32 equipid() const;
  inline void set_equipid(::google::protobuf::uint32 value);

  // optional string equipguid = 14;
  inline bool has_equipguid() const;
  inline void clear_equipguid();
  static const int kEquipguidFieldNumber = 14;
  inline const ::std::string& equipguid() const;
  inline void set_equipguid(const ::std::string& value);
  inline void set_equipguid(const char* value);
  inline void set_equipguid(const char* value, size_t size);
  inline ::std::string* mutable_equipguid();
  inline ::std::string* release_equipguid();
  inline void set_allocated_equipguid(::std::string* equipguid);

  // optional uint32 count = 15;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 15;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 old_lv = 16;
  inline bool has_old_lv() const;
  inline void clear_old_lv();
  static const int kOldLvFieldNumber = 16;
  inline ::google::protobuf::uint32 old_lv() const;
  inline void set_old_lv(::google::protobuf::uint32 value);

  // optional uint32 new_lv = 17;
  inline bool has_new_lv() const;
  inline void clear_new_lv();
  static const int kNewLvFieldNumber = 17;
  inline ::google::protobuf::uint32 new_lv() const;
  inline void set_new_lv(::google::protobuf::uint32 value);

  // optional int32 isfail = 18;
  inline bool has_isfail() const;
  inline void clear_isfail();
  static const int kIsfailFieldNumber = 18;
  inline ::google::protobuf::int32 isfail() const;
  inline void set_isfail(::google::protobuf::int32 value);

  // optional string cost_money = 19;
  inline bool has_cost_money() const;
  inline void clear_cost_money();
  static const int kCostMoneyFieldNumber = 19;
  inline const ::std::string& cost_money() const;
  inline void set_cost_money(const ::std::string& value);
  inline void set_cost_money(const char* value);
  inline void set_cost_money(const char* value, size_t size);
  inline ::std::string* mutable_cost_money();
  inline ::std::string* release_cost_money();
  inline void set_allocated_cost_money(::std::string* cost_money);

  // optional string cost_item = 20;
  inline bool has_cost_item() const;
  inline void clear_cost_item();
  static const int kCostItemFieldNumber = 20;
  inline const ::std::string& cost_item() const;
  inline void set_cost_item(const ::std::string& value);
  inline void set_cost_item(const char* value);
  inline void set_cost_item(const char* value, size_t size);
  inline ::std::string* mutable_cost_item();
  inline ::std::string* release_cost_item();
  inline void set_allocated_cost_item(::std::string* cost_item);

  // optional int32 isdamage = 21;
  inline bool has_isdamage() const;
  inline void clear_isdamage();
  static const int kIsdamageFieldNumber = 21;
  inline ::google::protobuf::int32 isdamage() const;
  inline void set_isdamage(::google::protobuf::int32 value);

  // repeated uint32 mark = 22;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 22;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 23;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 23;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.EquipUpLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_equipid();
  inline void clear_has_equipid();
  inline void set_has_equipguid();
  inline void clear_has_equipguid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_old_lv();
  inline void clear_has_old_lv();
  inline void set_has_new_lv();
  inline void clear_has_new_lv();
  inline void set_has_isfail();
  inline void clear_has_isfail();
  inline void set_has_cost_money();
  inline void clear_has_cost_money();
  inline void set_has_cost_item();
  inline void clear_has_cost_item();
  inline void set_has_isdamage();
  inline void clear_has_isdamage();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 equipid_;
  ::std::string* equipguid_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 old_lv_;
  ::google::protobuf::uint32 new_lv_;
  ::google::protobuf::int32 isfail_;
  ::std::string* cost_money_;
  ::std::string* cost_item_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  ::google::protobuf::int32 isdamage_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static EquipUpLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class SocailLogCmd : public ::google::protobuf::Message {
 public:
  SocailLogCmd();
  virtual ~SocailLogCmd();

  SocailLogCmd(const SocailLogCmd& from);

  inline SocailLogCmd& operator=(const SocailLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SocailLogCmd& default_instance();

  void Swap(SocailLogCmd* other);

  // implements Message ----------------------------------------------

  SocailLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SocailLogCmd& from);
  void MergeFrom(const SocailLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = SOCIAL_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 inid = 13;
  inline bool has_inid() const;
  inline void clear_inid();
  static const int kInidFieldNumber = 13;
  inline ::google::protobuf::uint64 inid() const;
  inline void set_inid(::google::protobuf::uint64 value);

  // optional uint64 otherid = 14;
  inline bool has_otherid() const;
  inline void clear_otherid();
  static const int kOtheridFieldNumber = 14;
  inline ::google::protobuf::uint64 otherid() const;
  inline void set_otherid(::google::protobuf::uint64 value);

  // optional uint64 param1 = 15;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 15;
  inline ::google::protobuf::uint64 param1() const;
  inline void set_param1(::google::protobuf::uint64 value);

  // optional uint64 param2 = 16;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 16;
  inline ::google::protobuf::uint64 param2() const;
  inline void set_param2(::google::protobuf::uint64 value);

  // repeated uint32 mark = 18;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 18;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 19;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 19;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.SocailLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_inid();
  inline void clear_has_inid();
  inline void set_has_otherid();
  inline void clear_has_otherid();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint64 inid_;
  ::google::protobuf::uint64 otherid_;
  ::google::protobuf::uint64 param1_;
  ::google::protobuf::uint64 param2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static SocailLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class QuestLogCmd : public ::google::protobuf::Message {
 public:
  QuestLogCmd();
  virtual ~QuestLogCmd();

  QuestLogCmd(const QuestLogCmd& from);

  inline QuestLogCmd& operator=(const QuestLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestLogCmd& default_instance();

  void Swap(QuestLogCmd* other);

  // implements Message ----------------------------------------------

  QuestLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestLogCmd& from);
  void MergeFrom(const QuestLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = QUEST_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint64 questid = 12;
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 12;
  inline ::google::protobuf::uint64 questid() const;
  inline void set_questid(::google::protobuf::uint64 value);

  // optional uint32 type = 13;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 13;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 targetid = 14;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetidFieldNumber = 14;
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // optional uint32 baseexp = 15;
  inline bool has_baseexp() const;
  inline void clear_baseexp();
  static const int kBaseexpFieldNumber = 15;
  inline ::google::protobuf::uint32 baseexp() const;
  inline void set_baseexp(::google::protobuf::uint32 value);

  // optional uint32 jobexp = 16;
  inline bool has_jobexp() const;
  inline void clear_jobexp();
  static const int kJobexpFieldNumber = 16;
  inline ::google::protobuf::uint32 jobexp() const;
  inline void set_jobexp(::google::protobuf::uint32 value);

  // optional string rewarditem = 17;
  inline bool has_rewarditem() const;
  inline void clear_rewarditem();
  static const int kRewarditemFieldNumber = 17;
  inline const ::std::string& rewarditem() const;
  inline void set_rewarditem(const ::std::string& value);
  inline void set_rewarditem(const char* value);
  inline void set_rewarditem(const char* value, size_t size);
  inline ::std::string* mutable_rewarditem();
  inline ::std::string* release_rewarditem();
  inline void set_allocated_rewarditem(::std::string* rewarditem);

  // optional uint32 level = 18;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 18;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // repeated uint32 mark = 19;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 19;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 20;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 20;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional uint32 lineid = 21;
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineidFieldNumber = 21;
  inline ::google::protobuf::uint32 lineid() const;
  inline void set_lineid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.QuestLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_baseexp();
  inline void clear_has_baseexp();
  inline void set_has_jobexp();
  inline void clear_has_jobexp();
  inline void set_has_rewarditem();
  inline void clear_has_rewarditem();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_lineid();
  inline void clear_has_lineid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint64 questid_;
  ::google::protobuf::uint64 targetid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 baseexp_;
  ::std::string* rewarditem_;
  ::google::protobuf::uint32 jobexp_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  ::google::protobuf::uint32 lineid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static QuestLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class ManualLogCmd : public ::google::protobuf::Message {
 public:
  ManualLogCmd();
  virtual ~ManualLogCmd();

  ManualLogCmd(const ManualLogCmd& from);

  inline ManualLogCmd& operator=(const ManualLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ManualLogCmd& default_instance();

  void Swap(ManualLogCmd* other);

  // implements Message ----------------------------------------------

  ManualLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ManualLogCmd& from);
  void MergeFrom(const ManualLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = MANUAL_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 by = 13;
  inline bool has_by() const;
  inline void clear_by();
  static const int kByFieldNumber = 13;
  inline ::google::protobuf::uint32 by() const;
  inline void set_by(::google::protobuf::uint32 value);

  // optional uint64 what = 14;
  inline bool has_what() const;
  inline void clear_what();
  static const int kWhatFieldNumber = 14;
  inline ::google::protobuf::uint64 what() const;
  inline void set_what(::google::protobuf::uint64 value);

  // optional uint64 param1 = 15;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 15;
  inline ::google::protobuf::uint64 param1() const;
  inline void set_param1(::google::protobuf::uint64 value);

  // repeated uint32 mark = 18;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 18;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 19;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 19;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.ManualLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_by();
  inline void clear_has_by();
  inline void set_has_what();
  inline void clear_has_what();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 by_;
  ::google::protobuf::uint64 what_;
  ::google::protobuf::uint64 param1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static ManualLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class CompleteLogCmd : public ::google::protobuf::Message {
 public:
  CompleteLogCmd();
  virtual ~CompleteLogCmd();

  CompleteLogCmd(const CompleteLogCmd& from);

  inline CompleteLogCmd& operator=(const CompleteLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompleteLogCmd& default_instance();

  void Swap(CompleteLogCmd* other);

  // implements Message ----------------------------------------------

  CompleteLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompleteLogCmd& from);
  void MergeFrom(const CompleteLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = COMPLETE_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 targetid = 13;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetidFieldNumber = 13;
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // optional uint32 today_count = 14;
  inline bool has_today_count() const;
  inline void clear_today_count();
  static const int kTodayCountFieldNumber = 14;
  inline ::google::protobuf::uint32 today_count() const;
  inline void set_today_count(::google::protobuf::uint32 value);

  // optional uint32 reward_type = 15;
  inline bool has_reward_type() const;
  inline void clear_reward_type();
  static const int kRewardTypeFieldNumber = 15;
  inline ::google::protobuf::uint32 reward_type() const;
  inline void set_reward_type(::google::protobuf::uint32 value);

  // optional uint32 reward_count = 16;
  inline bool has_reward_count() const;
  inline void clear_reward_count();
  static const int kRewardCountFieldNumber = 16;
  inline ::google::protobuf::uint32 reward_count() const;
  inline void set_reward_count(::google::protobuf::uint32 value);

  // optional uint32 level = 17;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 17;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // repeated uint32 mark = 18;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 18;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 19;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 19;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.CompleteLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_today_count();
  inline void clear_has_today_count();
  inline void set_has_reward_type();
  inline void clear_has_reward_type();
  inline void set_has_reward_count();
  inline void clear_has_reward_count();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint64 targetid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 today_count_;
  ::google::protobuf::uint32 reward_type_;
  ::google::protobuf::uint32 reward_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static CompleteLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class TowerLogCmd : public ::google::protobuf::Message {
 public:
  TowerLogCmd();
  virtual ~TowerLogCmd();

  TowerLogCmd(const TowerLogCmd& from);

  inline TowerLogCmd& operator=(const TowerLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TowerLogCmd& default_instance();

  void Swap(TowerLogCmd* other);

  // implements Message ----------------------------------------------

  TowerLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TowerLogCmd& from);
  void MergeFrom(const TowerLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = TOWER_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 curLayer = 13;
  inline bool has_curlayer() const;
  inline void clear_curlayer();
  static const int kCurLayerFieldNumber = 13;
  inline ::google::protobuf::uint32 curlayer() const;
  inline void set_curlayer(::google::protobuf::uint32 value);

  // optional uint32 maxLayer = 14;
  inline bool has_maxlayer() const;
  inline void clear_maxlayer();
  static const int kMaxLayerFieldNumber = 14;
  inline ::google::protobuf::uint32 maxlayer() const;
  inline void set_maxlayer(::google::protobuf::uint32 value);

  // optional uint64 teamId = 15;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 15;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint32 level = 16;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 16;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // repeated uint32 mark = 18;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 18;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 19;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 19;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.TowerLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_curlayer();
  inline void clear_has_curlayer();
  inline void set_has_maxlayer();
  inline void clear_has_maxlayer();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 curlayer_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint32 maxlayer_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static TowerLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class ItemOperLogCmd : public ::google::protobuf::Message {
 public:
  ItemOperLogCmd();
  virtual ~ItemOperLogCmd();

  ItemOperLogCmd(const ItemOperLogCmd& from);

  inline ItemOperLogCmd& operator=(const ItemOperLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemOperLogCmd& default_instance();

  void Swap(ItemOperLogCmd* other);

  // implements Message ----------------------------------------------

  ItemOperLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemOperLogCmd& from);
  void MergeFrom(const ItemOperLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = ITEMOPER_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 itemid = 13;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 13;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 count = 14;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 14;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // repeated uint32 mark = 15;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 15;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 16;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 16;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.ItemOperLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static ItemOperLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class KillLogCmd : public ::google::protobuf::Message {
 public:
  KillLogCmd();
  virtual ~KillLogCmd();

  KillLogCmd(const KillLogCmd& from);

  inline KillLogCmd& operator=(const KillLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KillLogCmd& default_instance();

  void Swap(KillLogCmd* other);

  // implements Message ----------------------------------------------

  KillLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KillLogCmd& from);
  void MergeFrom(const KillLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = KILL_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 monsterid = 12;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsteridFieldNumber = 12;
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // optional uint64 monstergid = 13;
  inline bool has_monstergid() const;
  inline void clear_monstergid();
  static const int kMonstergidFieldNumber = 13;
  inline ::google::protobuf::uint64 monstergid() const;
  inline void set_monstergid(::google::protobuf::uint64 value);

  // optional uint32 monstergroup = 14;
  inline bool has_monstergroup() const;
  inline void clear_monstergroup();
  static const int kMonstergroupFieldNumber = 14;
  inline ::google::protobuf::uint32 monstergroup() const;
  inline void set_monstergroup(::google::protobuf::uint32 value);

  // optional uint32 baseexp = 15;
  inline bool has_baseexp() const;
  inline void clear_baseexp();
  static const int kBaseexpFieldNumber = 15;
  inline ::google::protobuf::uint32 baseexp() const;
  inline void set_baseexp(::google::protobuf::uint32 value);

  // optional uint32 jobexp = 16;
  inline bool has_jobexp() const;
  inline void clear_jobexp();
  static const int kJobexpFieldNumber = 16;
  inline ::google::protobuf::uint32 jobexp() const;
  inline void set_jobexp(::google::protobuf::uint32 value);

  // optional int32 ismvp = 17;
  inline bool has_ismvp() const;
  inline void clear_ismvp();
  static const int kIsmvpFieldNumber = 17;
  inline ::google::protobuf::int32 ismvp() const;
  inline void set_ismvp(::google::protobuf::int32 value);

  // repeated uint32 mark = 18;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 18;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional uint32 type = 19;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 19;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 level = 20;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 20;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 killtype = 21;
  inline bool has_killtype() const;
  inline void clear_killtype();
  static const int kKilltypeFieldNumber = 21;
  inline ::google::protobuf::uint32 killtype() const;
  inline void set_killtype(::google::protobuf::uint32 value);

  // optional string logid = 22;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 22;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional uint32 lineid = 23;
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineidFieldNumber = 23;
  inline ::google::protobuf::uint32 lineid() const;
  inline void set_lineid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.KillLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_monstergid();
  inline void clear_has_monstergid();
  inline void set_has_monstergroup();
  inline void clear_has_monstergroup();
  inline void set_has_baseexp();
  inline void clear_has_baseexp();
  inline void set_has_jobexp();
  inline void clear_has_jobexp();
  inline void set_has_ismvp();
  inline void clear_has_ismvp();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_killtype();
  inline void clear_has_killtype();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_lineid();
  inline void clear_has_lineid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint64 monstergid_;
  ::google::protobuf::uint32 monsterid_;
  ::google::protobuf::uint32 monstergroup_;
  ::google::protobuf::uint32 baseexp_;
  ::google::protobuf::uint32 jobexp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::google::protobuf::int32 ismvp_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 killtype_;
  ::std::string* logid_;
  ::google::protobuf::uint32 lineid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static KillLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class RewardLogCmd : public ::google::protobuf::Message {
 public:
  RewardLogCmd();
  virtual ~RewardLogCmd();

  RewardLogCmd(const RewardLogCmd& from);

  inline RewardLogCmd& operator=(const RewardLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardLogCmd& default_instance();

  void Swap(RewardLogCmd* other);

  // implements Message ----------------------------------------------

  RewardLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardLogCmd& from);
  void MergeFrom(const RewardLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = REWARD_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 id = 12;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 12;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 profession = 13;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 13;
  inline ::google::protobuf::uint32 profession() const;
  inline void set_profession(::google::protobuf::uint32 value);

  // optional string rewarditem = 14;
  inline bool has_rewarditem() const;
  inline void clear_rewarditem();
  static const int kRewarditemFieldNumber = 14;
  inline const ::std::string& rewarditem() const;
  inline void set_rewarditem(const ::std::string& value);
  inline void set_rewarditem(const char* value);
  inline void set_rewarditem(const char* value, size_t size);
  inline ::std::string* mutable_rewarditem();
  inline ::std::string* release_rewarditem();
  inline void set_allocated_rewarditem(::std::string* rewarditem);

  // repeated uint32 mark = 15;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 15;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 16;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 16;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.RewardLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_rewarditem();
  inline void clear_has_rewarditem();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 profession_;
  ::std::string* rewarditem_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static RewardLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class MailLogCmd : public ::google::protobuf::Message {
 public:
  MailLogCmd();
  virtual ~MailLogCmd();

  MailLogCmd(const MailLogCmd& from);

  inline MailLogCmd& operator=(const MailLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailLogCmd& default_instance();

  void Swap(MailLogCmd* other);

  // implements Message ----------------------------------------------

  MailLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailLogCmd& from);
  void MergeFrom(const MailLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = MAIL_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint64 id = 12;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 12;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 sysid = 13;
  inline bool has_sysid() const;
  inline void clear_sysid();
  static const int kSysidFieldNumber = 13;
  inline ::google::protobuf::uint64 sysid() const;
  inline void set_sysid(::google::protobuf::uint64 value);

  // optional uint32 mailtype = 14;
  inline bool has_mailtype() const;
  inline void clear_mailtype();
  static const int kMailtypeFieldNumber = 14;
  inline ::google::protobuf::uint32 mailtype() const;
  inline void set_mailtype(::google::protobuf::uint32 value);

  // optional string title = 15;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 15;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string rewarditem = 16;
  inline bool has_rewarditem() const;
  inline void clear_rewarditem();
  static const int kRewarditemFieldNumber = 16;
  inline const ::std::string& rewarditem() const;
  inline void set_rewarditem(const ::std::string& value);
  inline void set_rewarditem(const char* value);
  inline void set_rewarditem(const char* value, size_t size);
  inline ::std::string* mutable_rewarditem();
  inline ::std::string* release_rewarditem();
  inline void set_allocated_rewarditem(::std::string* rewarditem);

  // repeated uint32 mark = 17;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 17;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 18;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 18;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.MailLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sysid();
  inline void clear_has_sysid();
  inline void set_has_mailtype();
  inline void clear_has_mailtype();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_rewarditem();
  inline void clear_has_rewarditem();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 sysid_;
  ::std::string* title_;
  ::std::string* rewarditem_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  ::google::protobuf::uint32 mailtype_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static MailLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class DojoLogCmd : public ::google::protobuf::Message {
 public:
  DojoLogCmd();
  virtual ~DojoLogCmd();

  DojoLogCmd(const DojoLogCmd& from);

  inline DojoLogCmd& operator=(const DojoLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DojoLogCmd& default_instance();

  void Swap(DojoLogCmd* other);

  // implements Message ----------------------------------------------

  DojoLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DojoLogCmd& from);
  void MergeFrom(const DojoLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = DOJO_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 dojoid = 12;
  inline bool has_dojoid() const;
  inline void clear_dojoid();
  static const int kDojoidFieldNumber = 12;
  inline ::google::protobuf::uint32 dojoid() const;
  inline void set_dojoid(::google::protobuf::uint32 value);

  // optional uint32 mapid = 13;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 13;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 passtype = 14;
  inline bool has_passtype() const;
  inline void clear_passtype();
  static const int kPasstypeFieldNumber = 14;
  inline ::google::protobuf::uint32 passtype() const;
  inline void set_passtype(::google::protobuf::uint32 value);

  // optional uint32 level = 15;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 15;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // repeated uint32 mark = 16;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 16;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 17;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 17;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.DojoLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_dojoid();
  inline void clear_has_dojoid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_passtype();
  inline void clear_has_passtype();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint32 dojoid_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 passtype_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static DojoLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class EnchantLogCmd : public ::google::protobuf::Message {
 public:
  EnchantLogCmd();
  virtual ~EnchantLogCmd();

  EnchantLogCmd(const EnchantLogCmd& from);

  inline EnchantLogCmd& operator=(const EnchantLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnchantLogCmd& default_instance();

  void Swap(EnchantLogCmd* other);

  // implements Message ----------------------------------------------

  EnchantLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnchantLogCmd& from);
  void MergeFrom(const EnchantLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = ENCHANT_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional string equipguid = 12;
  inline bool has_equipguid() const;
  inline void clear_equipguid();
  static const int kEquipguidFieldNumber = 12;
  inline const ::std::string& equipguid() const;
  inline void set_equipguid(const ::std::string& value);
  inline void set_equipguid(const char* value);
  inline void set_equipguid(const char* value, size_t size);
  inline ::std::string* mutable_equipguid();
  inline ::std::string* release_equipguid();
  inline void set_allocated_equipguid(::std::string* equipguid);

  // optional uint32 itemid = 23;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 23;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 enchanttype = 13;
  inline bool has_enchanttype() const;
  inline void clear_enchanttype();
  static const int kEnchanttypeFieldNumber = 13;
  inline ::google::protobuf::uint32 enchanttype() const;
  inline void set_enchanttype(::google::protobuf::uint32 value);

  // optional string oldattr = 14;
  inline bool has_oldattr() const;
  inline void clear_oldattr();
  static const int kOldattrFieldNumber = 14;
  inline const ::std::string& oldattr() const;
  inline void set_oldattr(const ::std::string& value);
  inline void set_oldattr(const char* value);
  inline void set_oldattr(const char* value, size_t size);
  inline ::std::string* mutable_oldattr();
  inline ::std::string* release_oldattr();
  inline void set_allocated_oldattr(::std::string* oldattr);

  // optional string newattr = 15;
  inline bool has_newattr() const;
  inline void clear_newattr();
  static const int kNewattrFieldNumber = 15;
  inline const ::std::string& newattr() const;
  inline void set_newattr(const ::std::string& value);
  inline void set_newattr(const char* value);
  inline void set_newattr(const char* value, size_t size);
  inline ::std::string* mutable_newattr();
  inline ::std::string* release_newattr();
  inline void set_allocated_newattr(::std::string* newattr);

  // optional string oldbufid = 16;
  inline bool has_oldbufid() const;
  inline void clear_oldbufid();
  static const int kOldbufidFieldNumber = 16;
  inline const ::std::string& oldbufid() const;
  inline void set_oldbufid(const ::std::string& value);
  inline void set_oldbufid(const char* value);
  inline void set_oldbufid(const char* value, size_t size);
  inline ::std::string* mutable_oldbufid();
  inline ::std::string* release_oldbufid();
  inline void set_allocated_oldbufid(::std::string* oldbufid);

  // optional string newbufid = 17;
  inline bool has_newbufid() const;
  inline void clear_newbufid();
  static const int kNewbufidFieldNumber = 17;
  inline const ::std::string& newbufid() const;
  inline void set_newbufid(const ::std::string& value);
  inline void set_newbufid(const char* value);
  inline void set_newbufid(const char* value, size_t size);
  inline ::std::string* mutable_newbufid();
  inline ::std::string* release_newbufid();
  inline void set_allocated_newbufid(::std::string* newbufid);

  // optional uint32 costitemid = 18;
  inline bool has_costitemid() const;
  inline void clear_costitemid();
  static const int kCostitemidFieldNumber = 18;
  inline ::google::protobuf::uint32 costitemid() const;
  inline void set_costitemid(::google::protobuf::uint32 value);

  // optional uint32 costitemcount = 19;
  inline bool has_costitemcount() const;
  inline void clear_costitemcount();
  static const int kCostitemcountFieldNumber = 19;
  inline ::google::protobuf::uint32 costitemcount() const;
  inline void set_costitemcount(::google::protobuf::uint32 value);

  // optional uint32 costmoney = 20;
  inline bool has_costmoney() const;
  inline void clear_costmoney();
  static const int kCostmoneyFieldNumber = 20;
  inline ::google::protobuf::uint32 costmoney() const;
  inline void set_costmoney(::google::protobuf::uint32 value);

  // repeated uint32 mark = 21;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 21;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 22;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 22;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.EnchantLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_equipguid();
  inline void clear_has_equipguid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_enchanttype();
  inline void clear_has_enchanttype();
  inline void set_has_oldattr();
  inline void clear_has_oldattr();
  inline void set_has_newattr();
  inline void clear_has_newattr();
  inline void set_has_oldbufid();
  inline void clear_has_oldbufid();
  inline void set_has_newbufid();
  inline void clear_has_newbufid();
  inline void set_has_costitemid();
  inline void clear_has_costitemid();
  inline void set_has_costitemcount();
  inline void clear_has_costitemcount();
  inline void set_has_costmoney();
  inline void clear_has_costmoney();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::std::string* equipguid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 enchanttype_;
  ::std::string* oldattr_;
  ::std::string* newattr_;
  ::std::string* oldbufid_;
  ::std::string* newbufid_;
  ::google::protobuf::uint32 costitemid_;
  ::google::protobuf::uint32 costitemcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  ::google::protobuf::uint32 costmoney_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static EnchantLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class GuildPrayLogCmd : public ::google::protobuf::Message {
 public:
  GuildPrayLogCmd();
  virtual ~GuildPrayLogCmd();

  GuildPrayLogCmd(const GuildPrayLogCmd& from);

  inline GuildPrayLogCmd& operator=(const GuildPrayLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildPrayLogCmd& default_instance();

  void Swap(GuildPrayLogCmd* other);

  // implements Message ----------------------------------------------

  GuildPrayLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildPrayLogCmd& from);
  void MergeFrom(const GuildPrayLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = GUILDPRAY_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 prayid = 12;
  inline bool has_prayid() const;
  inline void clear_prayid();
  static const int kPrayidFieldNumber = 12;
  inline ::google::protobuf::uint32 prayid() const;
  inline void set_prayid(::google::protobuf::uint32 value);

  // optional uint32 addattr = 13;
  inline bool has_addattr() const;
  inline void clear_addattr();
  static const int kAddattrFieldNumber = 13;
  inline ::google::protobuf::uint32 addattr() const;
  inline void set_addattr(::google::protobuf::uint32 value);

  // optional uint32 costitem = 14;
  inline bool has_costitem() const;
  inline void clear_costitem();
  static const int kCostitemFieldNumber = 14;
  inline ::google::protobuf::uint32 costitem() const;
  inline void set_costitem(::google::protobuf::uint32 value);

  // optional uint32 costmoney = 15;
  inline bool has_costmoney() const;
  inline void clear_costmoney();
  static const int kCostmoneyFieldNumber = 15;
  inline ::google::protobuf::uint32 costmoney() const;
  inline void set_costmoney(::google::protobuf::uint32 value);

  // optional uint32 costcon = 16;
  inline bool has_costcon() const;
  inline void clear_costcon();
  static const int kCostconFieldNumber = 16;
  inline ::google::protobuf::uint32 costcon() const;
  inline void set_costcon(::google::protobuf::uint32 value);

  // repeated uint32 mark = 17;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 17;
  inline ::google::protobuf::uint32 mark(int index) const;
  inline void set_mark(int index, ::google::protobuf::uint32 value);
  inline void add_mark(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mark() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mark();

  // optional string logid = 18;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 18;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.GuildPrayLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_prayid();
  inline void clear_has_prayid();
  inline void set_has_addattr();
  inline void clear_has_addattr();
  inline void set_has_costitem();
  inline void clear_has_costitem();
  inline void set_has_costmoney();
  inline void clear_has_costmoney();
  inline void set_has_costcon();
  inline void clear_has_costcon();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint32 prayid_;
  ::google::protobuf::uint32 addattr_;
  ::google::protobuf::uint32 costitem_;
  ::google::protobuf::uint32 costmoney_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mark_;
  ::std::string* logid_;
  ::google::protobuf::uint32 costcon_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static GuildPrayLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class UseSkillLogCmd : public ::google::protobuf::Message {
 public:
  UseSkillLogCmd();
  virtual ~UseSkillLogCmd();

  UseSkillLogCmd(const UseSkillLogCmd& from);

  inline UseSkillLogCmd& operator=(const UseSkillLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseSkillLogCmd& default_instance();

  void Swap(UseSkillLogCmd* other);

  // implements Message ----------------------------------------------

  UseSkillLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseSkillLogCmd& from);
  void MergeFrom(const UseSkillLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = USESKILL_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 skillid = 12;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 12;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional string logid = 13;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 13;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.UseSkillLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::std::string* logid_;
  ::google::protobuf::uint32 skillid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static UseSkillLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class ActiveLogCmd : public ::google::protobuf::Message {
 public:
  ActiveLogCmd();
  virtual ~ActiveLogCmd();

  ActiveLogCmd(const ActiveLogCmd& from);

  inline ActiveLogCmd& operator=(const ActiveLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActiveLogCmd& default_instance();

  void Swap(ActiveLogCmd* other);

  // implements Message ----------------------------------------------

  ActiveLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActiveLogCmd& from);
  void MergeFrom(const ActiveLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = ACTIVE_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional string channel = 3;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // optional string cdkey = 4;
  inline bool has_cdkey() const;
  inline void clear_cdkey();
  static const int kCdkeyFieldNumber = 4;
  inline const ::std::string& cdkey() const;
  inline void set_cdkey(const ::std::string& value);
  inline void set_cdkey(const char* value);
  inline void set_cdkey(const char* value, size_t size);
  inline ::std::string* mutable_cdkey();
  inline ::std::string* release_cdkey();
  inline void set_allocated_cdkey(::std::string* cdkey);

  // optional string account = 5;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 5;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string logid = 7;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 7;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.ActiveLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_cdkey();
  inline void clear_has_cdkey();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* channel_;
  ::std::string* cdkey_;
  ::std::string* account_;
  ::std::string* logid_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static ActiveLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class TradeLogCmd : public ::google::protobuf::Message {
 public:
  TradeLogCmd();
  virtual ~TradeLogCmd();

  TradeLogCmd(const TradeLogCmd& from);

  inline TradeLogCmd& operator=(const TradeLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeLogCmd& default_instance();

  void Swap(TradeLogCmd* other);

  // implements Message ----------------------------------------------

  TradeLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeLogCmd& from);
  void MergeFrom(const TradeLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = TRADE_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint64 pid = 5;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 5;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 itemid = 8;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 8;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 count = 9;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 9;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 price = 10;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 10;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional uint32 tax = 11;
  inline bool has_tax() const;
  inline void clear_tax();
  static const int kTaxFieldNumber = 11;
  inline ::google::protobuf::uint32 tax() const;
  inline void set_tax(::google::protobuf::uint32 value);

  // optional uint32 moneycount = 12;
  inline bool has_moneycount() const;
  inline void clear_moneycount();
  static const int kMoneycountFieldNumber = 12;
  inline ::google::protobuf::uint32 moneycount() const;
  inline void set_moneycount(::google::protobuf::uint32 value);

  // optional string iteminfo = 13;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kIteminfoFieldNumber = 13;
  inline const ::std::string& iteminfo() const;
  inline void set_iteminfo(const ::std::string& value);
  inline void set_iteminfo(const char* value);
  inline void set_iteminfo(const char* value, size_t size);
  inline ::std::string* mutable_iteminfo();
  inline ::std::string* release_iteminfo();
  inline void set_allocated_iteminfo(::std::string* iteminfo);

  // optional uint64 otherid = 14;
  inline bool has_otherid() const;
  inline void clear_otherid();
  static const int kOtheridFieldNumber = 14;
  inline ::google::protobuf::uint64 otherid() const;
  inline void set_otherid(::google::protobuf::uint64 value);

  // optional string logid = 15;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 15;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional string strotherid = 16;
  inline bool has_strotherid() const;
  inline void clear_strotherid();
  static const int kStrotheridFieldNumber = 16;
  inline const ::std::string& strotherid() const;
  inline void set_strotherid(const ::std::string& value);
  inline void set_strotherid(const char* value);
  inline void set_strotherid(const char* value, size_t size);
  inline ::std::string* mutable_strotherid();
  inline ::std::string* release_strotherid();
  inline void set_allocated_strotherid(::std::string* strotherid);

  // optional uint64 spend_quota = 17 [default = 0];
  inline bool has_spend_quota() const;
  inline void clear_spend_quota();
  static const int kSpendQuotaFieldNumber = 17;
  inline ::google::protobuf::uint64 spend_quota() const;
  inline void set_spend_quota(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.TradeLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_tax();
  inline void clear_has_tax();
  inline void set_has_moneycount();
  inline void clear_has_moneycount();
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();
  inline void set_has_otherid();
  inline void clear_has_otherid();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_strotherid();
  inline void clear_has_strotherid();
  inline void set_has_spend_quota();
  inline void clear_has_spend_quota();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 price_;
  ::google::protobuf::uint32 tax_;
  ::std::string* iteminfo_;
  ::google::protobuf::uint64 otherid_;
  ::std::string* logid_;
  ::std::string* strotherid_;
  ::google::protobuf::uint64 spend_quota_;
  ::google::protobuf::uint32 moneycount_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static TradeLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class DeleteCharLogCmd : public ::google::protobuf::Message {
 public:
  DeleteCharLogCmd();
  virtual ~DeleteCharLogCmd();

  DeleteCharLogCmd(const DeleteCharLogCmd& from);

  inline DeleteCharLogCmd& operator=(const DeleteCharLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteCharLogCmd& default_instance();

  void Swap(DeleteCharLogCmd* other);

  // implements Message ----------------------------------------------

  DeleteCharLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteCharLogCmd& from);
  void MergeFrom(const DeleteCharLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = DELETE_CHAR_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional string account = 5;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 5;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 6;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 6;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 8;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 8;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 9;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 9;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional string logid = 10;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 10;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.DeleteCharLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::std::string* logid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static DeleteCharLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class ComposeLogCmd : public ::google::protobuf::Message {
 public:
  ComposeLogCmd();
  virtual ~ComposeLogCmd();

  ComposeLogCmd(const ComposeLogCmd& from);

  inline ComposeLogCmd& operator=(const ComposeLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComposeLogCmd& default_instance();

  void Swap(ComposeLogCmd* other);

  // implements Message ----------------------------------------------

  ComposeLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComposeLogCmd& from);
  void MergeFrom(const ComposeLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = COMPOSE_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional string account = 5;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 5;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 6;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 6;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 8;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 8;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 9;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 9;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 itemid = 10;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 10;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional string itemguid = 11;
  inline bool has_itemguid() const;
  inline void clear_itemguid();
  static const int kItemguidFieldNumber = 11;
  inline const ::std::string& itemguid() const;
  inline void set_itemguid(const ::std::string& value);
  inline void set_itemguid(const char* value);
  inline void set_itemguid(const char* value, size_t size);
  inline ::std::string* mutable_itemguid();
  inline ::std::string* release_itemguid();
  inline void set_allocated_itemguid(::std::string* itemguid);

  // optional string cost = 12;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 12;
  inline const ::std::string& cost() const;
  inline void set_cost(const ::std::string& value);
  inline void set_cost(const char* value);
  inline void set_cost(const char* value, size_t size);
  inline ::std::string* mutable_cost();
  inline ::std::string* release_cost();
  inline void set_allocated_cost(::std::string* cost);

  // optional string logid = 13;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 13;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.ComposeLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemguid();
  inline void clear_has_itemguid();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::std::string* itemguid_;
  ::std::string* cost_;
  ::std::string* logid_;
  ::google::protobuf::uint32 itemid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static ComposeLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class JumpzoneLogCmd : public ::google::protobuf::Message {
 public:
  JumpzoneLogCmd();
  virtual ~JumpzoneLogCmd();

  JumpzoneLogCmd(const JumpzoneLogCmd& from);

  inline JumpzoneLogCmd& operator=(const JumpzoneLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JumpzoneLogCmd& default_instance();

  void Swap(JumpzoneLogCmd* other);

  // implements Message ----------------------------------------------

  JumpzoneLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JumpzoneLogCmd& from);
  void MergeFrom(const JumpzoneLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = JUMPZONE_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional string account = 5;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 5;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 6;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 6;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 8;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 8;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 9;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 9;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint32 oldzoneid = 10;
  inline bool has_oldzoneid() const;
  inline void clear_oldzoneid();
  static const int kOldzoneidFieldNumber = 10;
  inline ::google::protobuf::uint32 oldzoneid() const;
  inline void set_oldzoneid(::google::protobuf::uint32 value);

  // optional uint32 newzoneid = 11;
  inline bool has_newzoneid() const;
  inline void clear_newzoneid();
  static const int kNewzoneidFieldNumber = 11;
  inline ::google::protobuf::uint32 newzoneid() const;
  inline void set_newzoneid(::google::protobuf::uint32 value);

  // optional uint32 isfirst = 12;
  inline bool has_isfirst() const;
  inline void clear_isfirst();
  static const int kIsfirstFieldNumber = 12;
  inline ::google::protobuf::uint32 isfirst() const;
  inline void set_isfirst(::google::protobuf::uint32 value);

  // optional string cost = 13;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 13;
  inline const ::std::string& cost() const;
  inline void set_cost(const ::std::string& value);
  inline void set_cost(const char* value);
  inline void set_cost(const char* value, size_t size);
  inline ::std::string* mutable_cost();
  inline ::std::string* release_cost();
  inline void set_allocated_cost(::std::string* cost);

  // optional string logid = 14;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 14;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.JumpzoneLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_oldzoneid();
  inline void clear_has_oldzoneid();
  inline void set_has_newzoneid();
  inline void clear_has_newzoneid();
  inline void set_has_isfirst();
  inline void clear_has_isfirst();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint32 oldzoneid_;
  ::google::protobuf::uint32 newzoneid_;
  ::std::string* cost_;
  ::std::string* logid_;
  ::google::protobuf::uint32 isfirst_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static JumpzoneLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class TeamLogCmd : public ::google::protobuf::Message {
 public:
  TeamLogCmd();
  virtual ~TeamLogCmd();

  TeamLogCmd(const TeamLogCmd& from);

  inline TeamLogCmd& operator=(const TeamLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamLogCmd& default_instance();

  void Swap(TeamLogCmd* other);

  // implements Message ----------------------------------------------

  TeamLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamLogCmd& from);
  void MergeFrom(const TeamLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = TEAM_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint32 hid = 5;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 5;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 7;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 7;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 ispay = 8;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 8;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 10;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 10;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 11;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional uint64 inid = 12;
  inline bool has_inid() const;
  inline void clear_inid();
  static const int kInidFieldNumber = 12;
  inline ::google::protobuf::uint64 inid() const;
  inline void set_inid(::google::protobuf::uint64 value);

  // optional uint64 otherid = 13;
  inline bool has_otherid() const;
  inline void clear_otherid();
  static const int kOtheridFieldNumber = 13;
  inline ::google::protobuf::uint64 otherid() const;
  inline void set_otherid(::google::protobuf::uint64 value);

  // optional string logid = 14;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 14;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.TeamLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ispay();
  inline void clear_has_ispay();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_inid();
  inline void clear_has_inid();
  inline void set_has_otherid();
  inline void clear_has_otherid();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 ispay_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint64 inid_;
  ::google::protobuf::uint64 otherid_;
  ::std::string* logid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static TeamLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class TradeAdjustPriceLogCmd : public ::google::protobuf::Message {
 public:
  TradeAdjustPriceLogCmd();
  virtual ~TradeAdjustPriceLogCmd();

  TradeAdjustPriceLogCmd(const TradeAdjustPriceLogCmd& from);

  inline TradeAdjustPriceLogCmd& operator=(const TradeAdjustPriceLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeAdjustPriceLogCmd& default_instance();

  void Swap(TradeAdjustPriceLogCmd* other);

  // implements Message ----------------------------------------------

  TradeAdjustPriceLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeAdjustPriceLogCmd& from);
  void MergeFrom(const TradeAdjustPriceLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = TRADE_ADJUST_PRICE_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint64 pid = 5;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 5;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 item_id = 7;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 7;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 t = 8;
  inline bool has_t() const;
  inline void clear_t();
  static const int kTFieldNumber = 8;
  inline ::google::protobuf::uint32 t() const;
  inline void set_t(::google::protobuf::uint32 value);

  // optional uint32 k = 9;
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 9;
  inline ::google::protobuf::uint32 k() const;
  inline void set_k(::google::protobuf::uint32 value);

  // optional uint32 sold_count = 10;
  inline bool has_sold_count() const;
  inline void clear_sold_count();
  static const int kSoldCountFieldNumber = 10;
  inline ::google::protobuf::uint32 sold_count() const;
  inline void set_sold_count(::google::protobuf::uint32 value);

  // optional uint32 kt = 11;
  inline bool has_kt() const;
  inline void clear_kt();
  static const int kKtFieldNumber = 11;
  inline ::google::protobuf::uint32 kt() const;
  inline void set_kt(::google::protobuf::uint32 value);

  // optional uint32 qk = 12;
  inline bool has_qk() const;
  inline void clear_qk();
  static const int kQkFieldNumber = 12;
  inline ::google::protobuf::uint32 qk() const;
  inline void set_qk(::google::protobuf::uint32 value);

  // optional float r = 13;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 13;
  inline float r() const;
  inline void set_r(float value);

  // optional float up_ratio = 14;
  inline bool has_up_ratio() const;
  inline void clear_up_ratio();
  static const int kUpRatioFieldNumber = 14;
  inline float up_ratio() const;
  inline void set_up_ratio(float value);

  // optional float down_ratio = 15;
  inline bool has_down_ratio() const;
  inline void clear_down_ratio();
  static const int kDownRatioFieldNumber = 15;
  inline float down_ratio() const;
  inline void set_down_ratio(float value);

  // optional float new_price = 16;
  inline bool has_new_price() const;
  inline void clear_new_price();
  static const int kNewPriceFieldNumber = 16;
  inline float new_price() const;
  inline void set_new_price(float value);

  // optional float old_price = 17;
  inline bool has_old_price() const;
  inline void clear_old_price();
  static const int kOldPriceFieldNumber = 17;
  inline float old_price() const;
  inline void set_old_price(float value);

  // optional uint32 last_time = 18;
  inline bool has_last_time() const;
  inline void clear_last_time();
  static const int kLastTimeFieldNumber = 18;
  inline ::google::protobuf::uint32 last_time() const;
  inline void set_last_time(::google::protobuf::uint32 value);

  // optional .Cmd.EPriceStatus status = 19;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 19;
  inline ::Cmd::EPriceStatus status() const;
  inline void set_status(::Cmd::EPriceStatus value);

  // optional string logid = 20;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 20;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional uint32 real_price = 21;
  inline bool has_real_price() const;
  inline void clear_real_price();
  static const int kRealPriceFieldNumber = 21;
  inline ::google::protobuf::uint32 real_price() const;
  inline void set_real_price(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.TradeAdjustPriceLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_t();
  inline void clear_has_t();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_sold_count();
  inline void clear_has_sold_count();
  inline void set_has_kt();
  inline void clear_has_kt();
  inline void set_has_qk();
  inline void clear_has_qk();
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_up_ratio();
  inline void clear_has_up_ratio();
  inline void set_has_down_ratio();
  inline void clear_has_down_ratio();
  inline void set_has_new_price();
  inline void clear_has_new_price();
  inline void set_has_old_price();
  inline void clear_has_old_price();
  inline void set_has_last_time();
  inline void clear_has_last_time();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_real_price();
  inline void clear_has_real_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 t_;
  ::google::protobuf::uint32 k_;
  ::google::protobuf::uint32 sold_count_;
  ::google::protobuf::uint32 kt_;
  ::google::protobuf::uint32 qk_;
  float r_;
  float up_ratio_;
  float down_ratio_;
  float new_price_;
  float old_price_;
  ::google::protobuf::uint32 last_time_;
  int status_;
  ::std::string* logid_;
  ::google::protobuf::uint32 real_price_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static TradeAdjustPriceLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class TradePriceLogCmd : public ::google::protobuf::Message {
 public:
  TradePriceLogCmd();
  virtual ~TradePriceLogCmd();

  TradePriceLogCmd(const TradePriceLogCmd& from);

  inline TradePriceLogCmd& operator=(const TradePriceLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradePriceLogCmd& default_instance();

  void Swap(TradePriceLogCmd* other);

  // implements Message ----------------------------------------------

  TradePriceLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradePriceLogCmd& from);
  void MergeFrom(const TradePriceLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = TRADE_PRICE_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint64 pid = 5;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 5;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 item_id = 7;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 7;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 k = 8;
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 8;
  inline ::google::protobuf::uint32 k() const;
  inline void set_k(::google::protobuf::uint32 value);

  // optional float price = 9;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 9;
  inline float price() const;
  inline void set_price(float value);

  // optional string logid = 10;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 10;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.TradePriceLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 k_;
  float price_;
  ::std::string* logid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static TradePriceLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class PetChangeLogCmd : public ::google::protobuf::Message {
 public:
  PetChangeLogCmd();
  virtual ~PetChangeLogCmd();

  PetChangeLogCmd(const PetChangeLogCmd& from);

  inline PetChangeLogCmd& operator=(const PetChangeLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetChangeLogCmd& default_instance();

  void Swap(PetChangeLogCmd* other);

  // implements Message ----------------------------------------------

  PetChangeLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetChangeLogCmd& from);
  void MergeFrom(const PetChangeLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = PET_CHANGE_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional string account = 16;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 16;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 5;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 5;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 7;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 7;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 8;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 8;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional .Cmd.EPetChangeType type = 9;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline ::Cmd::EPetChangeType type() const;
  inline void set_type(::Cmd::EPetChangeType value);

  // optional uint32 monsterid = 10;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsteridFieldNumber = 10;
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // optional string name = 11;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 11;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 before = 12;
  inline bool has_before() const;
  inline void clear_before();
  static const int kBeforeFieldNumber = 12;
  inline ::google::protobuf::uint32 before() const;
  inline void set_before(::google::protobuf::uint32 value);

  // optional uint32 after = 13;
  inline bool has_after() const;
  inline void clear_after();
  static const int kAfterFieldNumber = 13;
  inline ::google::protobuf::uint32 after() const;
  inline void set_after(::google::protobuf::uint32 value);

  // optional string skill_before = 14;
  inline bool has_skill_before() const;
  inline void clear_skill_before();
  static const int kSkillBeforeFieldNumber = 14;
  inline const ::std::string& skill_before() const;
  inline void set_skill_before(const ::std::string& value);
  inline void set_skill_before(const char* value);
  inline void set_skill_before(const char* value, size_t size);
  inline ::std::string* mutable_skill_before();
  inline ::std::string* release_skill_before();
  inline void set_allocated_skill_before(::std::string* skill_before);

  // optional string skill_after = 15;
  inline bool has_skill_after() const;
  inline void clear_skill_after();
  static const int kSkillAfterFieldNumber = 15;
  inline const ::std::string& skill_after() const;
  inline void set_skill_after(const ::std::string& value);
  inline void set_skill_after(const char* value);
  inline void set_skill_after(const char* value, size_t size);
  inline ::std::string* mutable_skill_after();
  inline ::std::string* release_skill_after();
  inline void set_allocated_skill_after(::std::string* skill_after);

  // optional string logid = 17;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 17;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.PetChangeLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_before();
  inline void clear_has_before();
  inline void set_has_after();
  inline void clear_has_after();
  inline void set_has_skill_before();
  inline void clear_has_skill_before();
  inline void set_has_skill_after();
  inline void clear_has_skill_after();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  int type_;
  ::google::protobuf::uint32 monsterid_;
  ::std::string* name_;
  ::google::protobuf::uint32 before_;
  ::google::protobuf::uint32 after_;
  ::std::string* skill_before_;
  ::std::string* skill_after_;
  ::std::string* logid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static PetChangeLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class PetAdventureLogCmd : public ::google::protobuf::Message {
 public:
  PetAdventureLogCmd();
  virtual ~PetAdventureLogCmd();

  PetAdventureLogCmd(const PetAdventureLogCmd& from);

  inline PetAdventureLogCmd& operator=(const PetAdventureLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetAdventureLogCmd& default_instance();

  void Swap(PetAdventureLogCmd* other);

  // implements Message ----------------------------------------------

  PetAdventureLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetAdventureLogCmd& from);
  void MergeFrom(const PetAdventureLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = PET_ADVENTURE_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional string account = 13;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 13;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 5;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 5;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 eid = 7;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 7;
  inline ::google::protobuf::uint64 eid() const;
  inline void set_eid(::google::protobuf::uint64 value);

  // optional uint32 etype = 8;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 8;
  inline ::google::protobuf::uint32 etype() const;
  inline void set_etype(::google::protobuf::uint32 value);

  // optional .Cmd.EPetAdventureLogType type = 9;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline ::Cmd::EPetAdventureLogType type() const;
  inline void set_type(::Cmd::EPetAdventureLogType value);

  // optional uint32 id = 10;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 10;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string names = 11;
  inline bool has_names() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 11;
  inline const ::std::string& names() const;
  inline void set_names(const ::std::string& value);
  inline void set_names(const char* value);
  inline void set_names(const char* value, size_t size);
  inline ::std::string* mutable_names();
  inline ::std::string* release_names();
  inline void set_allocated_names(::std::string* names);

  // optional uint32 cond = 12;
  inline bool has_cond() const;
  inline void clear_cond();
  static const int kCondFieldNumber = 12;
  inline ::google::protobuf::uint32 cond() const;
  inline void set_cond(::google::protobuf::uint32 value);

  // optional string logid = 14;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 14;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.PetAdventureLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_names();
  inline void clear_has_names();
  inline void set_has_cond();
  inline void clear_has_cond();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 eid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 etype_;
  int type_;
  ::google::protobuf::uint32 id_;
  ::std::string* names_;
  ::std::string* logid_;
  ::google::protobuf::uint32 cond_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static PetAdventureLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class InactiveUserLogCmd : public ::google::protobuf::Message {
 public:
  InactiveUserLogCmd();
  virtual ~InactiveUserLogCmd();

  InactiveUserLogCmd(const InactiveUserLogCmd& from);

  inline InactiveUserLogCmd& operator=(const InactiveUserLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InactiveUserLogCmd& default_instance();

  void Swap(InactiveUserLogCmd* other);

  // implements Message ----------------------------------------------

  InactiveUserLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InactiveUserLogCmd& from);
  void MergeFrom(const InactiveUserLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = INACTIVE_USER_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional string account = 5;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 5;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 6;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 6;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string name = 8;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 8;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 job = 9;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 9;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 level = 10;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 10;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint64 left_zeny = 11;
  inline bool has_left_zeny() const;
  inline void clear_left_zeny();
  static const int kLeftZenyFieldNumber = 11;
  inline ::google::protobuf::uint64 left_zeny() const;
  inline void set_left_zeny(::google::protobuf::uint64 value);

  // optional uint32 mapid = 12;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 12;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 create_time = 14;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 14;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // optional uint32 send_count = 15;
  inline bool has_send_count() const;
  inline void clear_send_count();
  static const int kSendCountFieldNumber = 15;
  inline ::google::protobuf::uint32 send_count() const;
  inline void set_send_count(::google::protobuf::uint32 value);

  // optional string logid = 16;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 16;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional uint64 guildid = 17;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 17;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.InactiveUserLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_left_zeny();
  inline void clear_has_left_zeny();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_send_count();
  inline void clear_has_send_count();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint64 pid_;
  ::std::string* name_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint64 left_zeny_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::uint32 send_count_;
  ::std::string* logid_;
  ::google::protobuf::uint64 guildid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static InactiveUserLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class TradeUntakeLogCmd : public ::google::protobuf::Message {
 public:
  TradeUntakeLogCmd();
  virtual ~TradeUntakeLogCmd();

  TradeUntakeLogCmd(const TradeUntakeLogCmd& from);

  inline TradeUntakeLogCmd& operator=(const TradeUntakeLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeUntakeLogCmd& default_instance();

  void Swap(TradeUntakeLogCmd* other);

  // implements Message ----------------------------------------------

  TradeUntakeLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeUntakeLogCmd& from);
  void MergeFrom(const TradeUntakeLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = TRADE_UNTAKE_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint64 pid = 5;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 5;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 zeny = 8;
  inline bool has_zeny() const;
  inline void clear_zeny();
  static const int kZenyFieldNumber = 8;
  inline ::google::protobuf::uint64 zeny() const;
  inline void set_zeny(::google::protobuf::uint64 value);

  // optional string guildname = 9;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 9;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional string logid = 11;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 11;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.TradeUntakeLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zeny();
  inline void clear_has_zeny();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::google::protobuf::uint64 pid_;
  ::std::string* name_;
  ::google::protobuf::uint64 zeny_;
  ::std::string* guildname_;
  ::std::string* logid_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static TradeUntakeLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class CreditLogCmd : public ::google::protobuf::Message {
 public:
  CreditLogCmd();
  virtual ~CreditLogCmd();

  CreditLogCmd(const CreditLogCmd& from);

  inline CreditLogCmd& operator=(const CreditLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreditLogCmd& default_instance();

  void Swap(CreditLogCmd* other);

  // implements Message ----------------------------------------------

  CreditLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreditLogCmd& from);
  void MergeFrom(const CreditLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = CREDIT_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint64 pid = 5;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 5;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .Cmd.ECreditType type = 8;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 8;
  inline ::Cmd::ECreditType type() const;
  inline void set_type(::Cmd::ECreditType value);

  // optional uint64 before = 9;
  inline bool has_before() const;
  inline void clear_before();
  static const int kBeforeFieldNumber = 9;
  inline ::google::protobuf::uint64 before() const;
  inline void set_before(::google::protobuf::uint64 value);

  // optional uint64 after = 10;
  inline bool has_after() const;
  inline void clear_after();
  static const int kAfterFieldNumber = 10;
  inline ::google::protobuf::uint64 after() const;
  inline void set_after(::google::protobuf::uint64 value);

  // optional string logid = 11;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 11;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // @@protoc_insertion_point(class_scope:Cmd.CreditLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_before();
  inline void clear_has_before();
  inline void set_has_after();
  inline void clear_has_after();
  inline void set_has_logid();
  inline void clear_has_logid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::google::protobuf::uint64 pid_;
  ::std::string* name_;
  ::google::protobuf::uint32 time_;
  int type_;
  ::google::protobuf::uint64 before_;
  ::google::protobuf::uint64 after_;
  ::std::string* logid_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static CreditLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class TradeGiveLogCmd : public ::google::protobuf::Message {
 public:
  TradeGiveLogCmd();
  virtual ~TradeGiveLogCmd();

  TradeGiveLogCmd(const TradeGiveLogCmd& from);

  inline TradeGiveLogCmd& operator=(const TradeGiveLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeGiveLogCmd& default_instance();

  void Swap(TradeGiveLogCmd* other);

  // implements Message ----------------------------------------------

  TradeGiveLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeGiveLogCmd& from);
  void MergeFrom(const TradeGiveLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = TRADE_GIVE_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint64 pid = 5;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 5;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional .Cmd.EGiveEvent event = 7;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 7;
  inline ::Cmd::EGiveEvent event() const;
  inline void set_event(::Cmd::EGiveEvent value);

  // optional uint32 itemid = 8;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 8;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint64 quota = 9;
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 9;
  inline ::google::protobuf::uint64 quota() const;
  inline void set_quota(::google::protobuf::uint64 value);

  // optional string iteminfo = 10;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kIteminfoFieldNumber = 10;
  inline const ::std::string& iteminfo() const;
  inline void set_iteminfo(const ::std::string& value);
  inline void set_iteminfo(const char* value);
  inline void set_iteminfo(const char* value, size_t size);
  inline ::std::string* mutable_iteminfo();
  inline ::std::string* release_iteminfo();
  inline void set_allocated_iteminfo(::std::string* iteminfo);

  // optional uint64 otherid = 11;
  inline bool has_otherid() const;
  inline void clear_otherid();
  static const int kOtheridFieldNumber = 11;
  inline ::google::protobuf::uint64 otherid() const;
  inline void set_otherid(::google::protobuf::uint64 value);

  // optional string logid = 12;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 12;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional string name = 13;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 13;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string othername = 14;
  inline bool has_othername() const;
  inline void clear_othername();
  static const int kOthernameFieldNumber = 14;
  inline const ::std::string& othername() const;
  inline void set_othername(const ::std::string& value);
  inline void set_othername(const char* value);
  inline void set_othername(const char* value, size_t size);
  inline ::std::string* mutable_othername();
  inline ::std::string* release_othername();
  inline void set_allocated_othername(::std::string* othername);

  // optional uint32 givetime = 15;
  inline bool has_givetime() const;
  inline void clear_givetime();
  static const int kGivetimeFieldNumber = 15;
  inline ::google::protobuf::uint32 givetime() const;
  inline void set_givetime(::google::protobuf::uint32 value);

  // optional .Cmd.ELogGiveType givetype = 16;
  inline bool has_givetype() const;
  inline void clear_givetype();
  static const int kGivetypeFieldNumber = 16;
  inline ::Cmd::ELogGiveType givetype() const;
  inline void set_givetype(::Cmd::ELogGiveType value);

  // optional uint32 itemcount = 17;
  inline bool has_itemcount() const;
  inline void clear_itemcount();
  static const int kItemcountFieldNumber = 17;
  inline ::google::protobuf::uint32 itemcount() const;
  inline void set_itemcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.TradeGiveLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_quota();
  inline void clear_has_quota();
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();
  inline void set_has_otherid();
  inline void clear_has_otherid();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_othername();
  inline void clear_has_othername();
  inline void set_has_givetime();
  inline void clear_has_givetime();
  inline void set_has_givetype();
  inline void clear_has_givetype();
  inline void set_has_itemcount();
  inline void clear_has_itemcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint32 time_;
  int event_;
  ::google::protobuf::uint64 quota_;
  ::std::string* iteminfo_;
  ::google::protobuf::uint64 otherid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 givetime_;
  ::std::string* logid_;
  ::std::string* name_;
  ::std::string* othername_;
  int givetype_;
  ::google::protobuf::uint32 itemcount_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static TradeGiveLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class QuotaLogCmd : public ::google::protobuf::Message {
 public:
  QuotaLogCmd();
  virtual ~QuotaLogCmd();

  QuotaLogCmd(const QuotaLogCmd& from);

  inline QuotaLogCmd& operator=(const QuotaLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuotaLogCmd& default_instance();

  void Swap(QuotaLogCmd* other);

  // implements Message ----------------------------------------------

  QuotaLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuotaLogCmd& from);
  void MergeFrom(const QuotaLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = QUOTA_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional string account = 5;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 5;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 pid = 6;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 6;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint32 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string logid = 8;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 8;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional .Cmd.EQuotaOptType opttype = 9;
  inline bool has_opttype() const;
  inline void clear_opttype();
  static const int kOpttypeFieldNumber = 9;
  inline ::Cmd::EQuotaOptType opttype() const;
  inline void set_opttype(::Cmd::EQuotaOptType value);

  // optional .Cmd.EQuotaType quotatype = 10;
  inline bool has_quotatype() const;
  inline void clear_quotatype();
  static const int kQuotatypeFieldNumber = 10;
  inline ::Cmd::EQuotaType quotatype() const;
  inline void set_quotatype(::Cmd::EQuotaType value);

  // optional uint64 changed = 11;
  inline bool has_changed() const;
  inline void clear_changed();
  static const int kChangedFieldNumber = 11;
  inline ::google::protobuf::uint64 changed() const;
  inline void set_changed(::google::protobuf::uint64 value);

  // optional uint64 quota = 12;
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 12;
  inline ::google::protobuf::uint64 quota() const;
  inline void set_quota(::google::protobuf::uint64 value);

  // optional uint64 lock = 13;
  inline bool has_lock() const;
  inline void clear_lock();
  static const int kLockFieldNumber = 13;
  inline ::google::protobuf::uint64 lock() const;
  inline void set_lock(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.QuotaLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_opttype();
  inline void clear_has_opttype();
  inline void set_has_quotatype();
  inline void clear_has_quotatype();
  inline void set_has_changed();
  inline void clear_has_changed();
  inline void set_has_quota();
  inline void clear_has_quota();
  inline void set_has_lock();
  inline void clear_has_lock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::std::string* account_;
  ::google::protobuf::uint64 pid_;
  ::std::string* logid_;
  ::google::protobuf::uint32 time_;
  int opttype_;
  ::google::protobuf::uint64 changed_;
  ::google::protobuf::uint64 quota_;
  ::google::protobuf::uint64 lock_;
  int quotatype_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static QuotaLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class GuildItemLogCmd : public ::google::protobuf::Message {
 public:
  GuildItemLogCmd();
  virtual ~GuildItemLogCmd();

  GuildItemLogCmd(const GuildItemLogCmd& from);

  inline GuildItemLogCmd& operator=(const GuildItemLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildItemLogCmd& default_instance();

  void Swap(GuildItemLogCmd* other);

  // implements Message ----------------------------------------------

  GuildItemLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildItemLogCmd& from);
  void MergeFrom(const GuildItemLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LogParam param = 2 [default = GUILD_ITEM_LOG_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LogParam param() const;
  inline void set_param(::Cmd::LogParam value);

  // optional uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // optional uint64 gid = 5;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 5;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string logid = 7;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogidFieldNumber = 7;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  inline void set_allocated_logid(::std::string* logid);

  // optional uint32 itemid = 8;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 8;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional int64 changed = 9;
  inline bool has_changed() const;
  inline void clear_changed();
  static const int kChangedFieldNumber = 9;
  inline ::google::protobuf::int64 changed() const;
  inline void set_changed(::google::protobuf::int64 value);

  // optional uint32 count = 10;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 10;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 type = 11;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 11;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.GuildItemLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_changed();
  inline void clear_has_changed();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 sid_;
  ::google::protobuf::uint64 gid_;
  ::std::string* logid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::int64 changed_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_LogCmd_2eproto();
  friend void protobuf_AssignDesc_LogCmd_2eproto();
  friend void protobuf_ShutdownFile_LogCmd_2eproto();

  void InitAsDefaultInstance();
  static GuildItemLogCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool LoginLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command LoginLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void LoginLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = LOGIN_LOG_CMD];
inline bool LoginLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginLogCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::LogParam LoginLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void LoginLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.param)
}

// optional uint32 cid = 3;
inline bool LoginLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 LoginLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.cid)
  return cid_;
}
inline void LoginLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool LoginLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 LoginLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.sid)
  return sid_;
}
inline void LoginLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool LoginLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 LoginLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.hid)
  return hid_;
}
inline void LoginLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.hid)
}

// optional string account = 6;
inline bool LoginLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& LoginLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.account)
  return *account_;
}
inline void LoginLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.account)
}
inline void LoginLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoginLogCmd.account)
}
inline void LoginLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoginLogCmd.account)
}
inline ::std::string* LoginLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoginLogCmd.account)
  return account_;
}
inline ::std::string* LoginLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoginLogCmd.account)
}

// optional uint64 pid = 7;
inline bool LoginLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LoginLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LoginLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LoginLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 LoginLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.pid)
  return pid_;
}
inline void LoginLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.pid)
}

// optional uint32 time = 8;
inline bool LoginLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LoginLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LoginLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LoginLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 LoginLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.time)
  return time_;
}
inline void LoginLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.time)
}

// optional string ip = 9;
inline bool LoginLogCmd::has_ip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LoginLogCmd::set_has_ip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LoginLogCmd::clear_has_ip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LoginLogCmd::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& LoginLogCmd::ip() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.ip)
  return *ip_;
}
inline void LoginLogCmd::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.ip)
}
inline void LoginLogCmd::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoginLogCmd.ip)
}
inline void LoginLogCmd::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoginLogCmd.ip)
}
inline ::std::string* LoginLogCmd::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoginLogCmd.ip)
  return ip_;
}
inline ::std::string* LoginLogCmd::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginLogCmd::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoginLogCmd.ip)
}

// optional uint32 type = 10;
inline bool LoginLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LoginLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LoginLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LoginLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 LoginLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.type)
  return type_;
}
inline void LoginLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.type)
}

// optional uint32 ispay = 11;
inline bool LoginLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LoginLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LoginLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LoginLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 LoginLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.ispay)
  return ispay_;
}
inline void LoginLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.ispay)
}

// optional uint32 level = 12;
inline bool LoginLogCmd::has_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LoginLogCmd::set_has_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LoginLogCmd::clear_has_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LoginLogCmd::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 LoginLogCmd::level() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.level)
  return level_;
}
inline void LoginLogCmd::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.level)
}

// optional uint32 vip = 13;
inline bool LoginLogCmd::has_vip() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LoginLogCmd::set_has_vip() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LoginLogCmd::clear_has_vip() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LoginLogCmd::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 LoginLogCmd::vip() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.vip)
  return vip_;
}
inline void LoginLogCmd::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.vip)
}

// repeated uint32 mark = 14;
inline int LoginLogCmd::mark_size() const {
  return mark_.size();
}
inline void LoginLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 LoginLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.mark)
  return mark_.Get(index);
}
inline void LoginLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.mark)
}
inline void LoginLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.LoginLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LoginLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.LoginLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LoginLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.LoginLogCmd.mark)
  return &mark_;
}

// optional string sign = 15;
inline bool LoginLogCmd::has_sign() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LoginLogCmd::set_has_sign() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LoginLogCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LoginLogCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& LoginLogCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.sign)
  return *sign_;
}
inline void LoginLogCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.sign)
}
inline void LoginLogCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoginLogCmd.sign)
}
inline void LoginLogCmd::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoginLogCmd.sign)
}
inline ::std::string* LoginLogCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoginLogCmd.sign)
  return sign_;
}
inline ::std::string* LoginLogCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginLogCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoginLogCmd.sign)
}

// optional string device = 16;
inline bool LoginLogCmd::has_device() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LoginLogCmd::set_has_device() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LoginLogCmd::clear_has_device() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LoginLogCmd::clear_device() {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& LoginLogCmd::device() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.device)
  return *device_;
}
inline void LoginLogCmd::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.device)
}
inline void LoginLogCmd::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoginLogCmd.device)
}
inline void LoginLogCmd::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoginLogCmd.device)
}
inline ::std::string* LoginLogCmd::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoginLogCmd.device)
  return device_;
}
inline ::std::string* LoginLogCmd::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginLogCmd::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoginLogCmd.device)
}

// optional uint32 guest = 17;
inline bool LoginLogCmd::has_guest() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LoginLogCmd::set_has_guest() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LoginLogCmd::clear_has_guest() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LoginLogCmd::clear_guest() {
  guest_ = 0u;
  clear_has_guest();
}
inline ::google::protobuf::uint32 LoginLogCmd::guest() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.guest)
  return guest_;
}
inline void LoginLogCmd::set_guest(::google::protobuf::uint32 value) {
  set_has_guest();
  guest_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.guest)
}

// optional string mac = 18;
inline bool LoginLogCmd::has_mac() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LoginLogCmd::set_has_mac() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LoginLogCmd::clear_has_mac() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LoginLogCmd::clear_mac() {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& LoginLogCmd::mac() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.mac)
  return *mac_;
}
inline void LoginLogCmd::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.mac)
}
inline void LoginLogCmd::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoginLogCmd.mac)
}
inline void LoginLogCmd::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoginLogCmd.mac)
}
inline ::std::string* LoginLogCmd::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoginLogCmd.mac)
  return mac_;
}
inline ::std::string* LoginLogCmd::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginLogCmd::set_allocated_mac(::std::string* mac) {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (mac) {
    set_has_mac();
    mac_ = mac;
  } else {
    clear_has_mac();
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoginLogCmd.mac)
}

// optional string agent = 19;
inline bool LoginLogCmd::has_agent() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LoginLogCmd::set_has_agent() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LoginLogCmd::clear_has_agent() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LoginLogCmd::clear_agent() {
  if (agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_->clear();
  }
  clear_has_agent();
}
inline const ::std::string& LoginLogCmd::agent() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.agent)
  return *agent_;
}
inline void LoginLogCmd::set_agent(const ::std::string& value) {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ = new ::std::string;
  }
  agent_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.agent)
}
inline void LoginLogCmd::set_agent(const char* value) {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ = new ::std::string;
  }
  agent_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoginLogCmd.agent)
}
inline void LoginLogCmd::set_agent(const char* value, size_t size) {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ = new ::std::string;
  }
  agent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoginLogCmd.agent)
}
inline ::std::string* LoginLogCmd::mutable_agent() {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoginLogCmd.agent)
  return agent_;
}
inline ::std::string* LoginLogCmd::release_agent() {
  clear_has_agent();
  if (agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = agent_;
    agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginLogCmd::set_allocated_agent(::std::string* agent) {
  if (agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete agent_;
  }
  if (agent) {
    set_has_agent();
    agent_ = agent;
  } else {
    clear_has_agent();
    agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoginLogCmd.agent)
}

// optional uint32 mapid = 20;
inline bool LoginLogCmd::has_mapid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LoginLogCmd::set_has_mapid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LoginLogCmd::clear_has_mapid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LoginLogCmd::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 LoginLogCmd::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.mapid)
  return mapid_;
}
inline void LoginLogCmd::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.mapid)
}

// optional uint32 onlinetime = 21;
inline bool LoginLogCmd::has_onlinetime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LoginLogCmd::set_has_onlinetime() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LoginLogCmd::clear_has_onlinetime() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LoginLogCmd::clear_onlinetime() {
  onlinetime_ = 0u;
  clear_has_onlinetime();
}
inline ::google::protobuf::uint32 LoginLogCmd::onlinetime() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.onlinetime)
  return onlinetime_;
}
inline void LoginLogCmd::set_onlinetime(::google::protobuf::uint32 value) {
  set_has_onlinetime();
  onlinetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.onlinetime)
}

// optional uint32 teamtimelen = 22;
inline bool LoginLogCmd::has_teamtimelen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LoginLogCmd::set_has_teamtimelen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LoginLogCmd::clear_has_teamtimelen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LoginLogCmd::clear_teamtimelen() {
  teamtimelen_ = 0u;
  clear_has_teamtimelen();
}
inline ::google::protobuf::uint32 LoginLogCmd::teamtimelen() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.teamtimelen)
  return teamtimelen_;
}
inline void LoginLogCmd::set_teamtimelen(::google::protobuf::uint32 value) {
  set_has_teamtimelen();
  teamtimelen_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.teamtimelen)
}

// optional uint32 isnew = 23;
inline bool LoginLogCmd::has_isnew() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LoginLogCmd::set_has_isnew() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LoginLogCmd::clear_has_isnew() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LoginLogCmd::clear_isnew() {
  isnew_ = 0u;
  clear_has_isnew();
}
inline ::google::protobuf::uint32 LoginLogCmd::isnew() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.isnew)
  return isnew_;
}
inline void LoginLogCmd::set_isnew(::google::protobuf::uint32 value) {
  set_has_isnew();
  isnew_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.isnew)
}

// optional string logid = 24;
inline bool LoginLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LoginLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LoginLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LoginLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& LoginLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.logid)
  return *logid_;
}
inline void LoginLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.logid)
}
inline void LoginLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoginLogCmd.logid)
}
inline void LoginLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoginLogCmd.logid)
}
inline ::std::string* LoginLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoginLogCmd.logid)
  return logid_;
}
inline ::std::string* LoginLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoginLogCmd.logid)
}

// optional uint32 zoneid = 25;
inline bool LoginLogCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LoginLogCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LoginLogCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LoginLogCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 LoginLogCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginLogCmd.zoneid)
  return zoneid_;
}
inline void LoginLogCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginLogCmd.zoneid)
}

// -------------------------------------------------------------------

// AccountLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool AccountLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command AccountLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AccountLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AccountLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AccountLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = ACCOUNT_LOG_CMD];
inline bool AccountLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountLogCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::LogParam AccountLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AccountLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void AccountLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AccountLogCmd.param)
}

// optional uint32 cid = 3;
inline bool AccountLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 AccountLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.AccountLogCmd.cid)
  return cid_;
}
inline void AccountLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AccountLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool AccountLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 AccountLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.AccountLogCmd.sid)
  return sid_;
}
inline void AccountLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AccountLogCmd.sid)
}

// optional string account = 5;
inline bool AccountLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccountLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccountLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccountLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& AccountLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.AccountLogCmd.account)
  return *account_;
}
inline void AccountLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AccountLogCmd.account)
}
inline void AccountLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AccountLogCmd.account)
}
inline void AccountLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AccountLogCmd.account)
}
inline ::std::string* AccountLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AccountLogCmd.account)
  return account_;
}
inline ::std::string* AccountLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AccountLogCmd.account)
}

// optional uint32 time = 6;
inline bool AccountLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccountLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccountLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccountLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 AccountLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.AccountLogCmd.time)
  return time_;
}
inline void AccountLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AccountLogCmd.time)
}

// optional string ip = 7;
inline bool AccountLogCmd::has_ip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AccountLogCmd::set_has_ip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AccountLogCmd::clear_has_ip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AccountLogCmd::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& AccountLogCmd::ip() const {
  // @@protoc_insertion_point(field_get:Cmd.AccountLogCmd.ip)
  return *ip_;
}
inline void AccountLogCmd::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AccountLogCmd.ip)
}
inline void AccountLogCmd::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AccountLogCmd.ip)
}
inline void AccountLogCmd::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AccountLogCmd.ip)
}
inline ::std::string* AccountLogCmd::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AccountLogCmd.ip)
  return ip_;
}
inline ::std::string* AccountLogCmd::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountLogCmd::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AccountLogCmd.ip)
}

// optional uint32 guest = 8;
inline bool AccountLogCmd::has_guest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AccountLogCmd::set_has_guest() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AccountLogCmd::clear_has_guest() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AccountLogCmd::clear_guest() {
  guest_ = 0u;
  clear_has_guest();
}
inline ::google::protobuf::uint32 AccountLogCmd::guest() const {
  // @@protoc_insertion_point(field_get:Cmd.AccountLogCmd.guest)
  return guest_;
}
inline void AccountLogCmd::set_guest(::google::protobuf::uint32 value) {
  set_has_guest();
  guest_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AccountLogCmd.guest)
}

// optional string device = 9;
inline bool AccountLogCmd::has_device() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AccountLogCmd::set_has_device() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AccountLogCmd::clear_has_device() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AccountLogCmd::clear_device() {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& AccountLogCmd::device() const {
  // @@protoc_insertion_point(field_get:Cmd.AccountLogCmd.device)
  return *device_;
}
inline void AccountLogCmd::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AccountLogCmd.device)
}
inline void AccountLogCmd::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AccountLogCmd.device)
}
inline void AccountLogCmd::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AccountLogCmd.device)
}
inline ::std::string* AccountLogCmd::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AccountLogCmd.device)
  return device_;
}
inline ::std::string* AccountLogCmd::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountLogCmd::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AccountLogCmd.device)
}

// optional string mac = 10;
inline bool AccountLogCmd::has_mac() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AccountLogCmd::set_has_mac() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AccountLogCmd::clear_has_mac() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AccountLogCmd::clear_mac() {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& AccountLogCmd::mac() const {
  // @@protoc_insertion_point(field_get:Cmd.AccountLogCmd.mac)
  return *mac_;
}
inline void AccountLogCmd::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AccountLogCmd.mac)
}
inline void AccountLogCmd::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AccountLogCmd.mac)
}
inline void AccountLogCmd::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AccountLogCmd.mac)
}
inline ::std::string* AccountLogCmd::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AccountLogCmd.mac)
  return mac_;
}
inline ::std::string* AccountLogCmd::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountLogCmd::set_allocated_mac(::std::string* mac) {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (mac) {
    set_has_mac();
    mac_ = mac;
  } else {
    clear_has_mac();
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AccountLogCmd.mac)
}

// optional string source = 11;
inline bool AccountLogCmd::has_source() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AccountLogCmd::set_has_source() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AccountLogCmd::clear_has_source() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AccountLogCmd::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& AccountLogCmd::source() const {
  // @@protoc_insertion_point(field_get:Cmd.AccountLogCmd.source)
  return *source_;
}
inline void AccountLogCmd::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AccountLogCmd.source)
}
inline void AccountLogCmd::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AccountLogCmd.source)
}
inline void AccountLogCmd::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AccountLogCmd.source)
}
inline ::std::string* AccountLogCmd::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AccountLogCmd.source)
  return source_;
}
inline ::std::string* AccountLogCmd::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountLogCmd::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AccountLogCmd.source)
}

// optional string agent = 12;
inline bool AccountLogCmd::has_agent() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AccountLogCmd::set_has_agent() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AccountLogCmd::clear_has_agent() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AccountLogCmd::clear_agent() {
  if (agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_->clear();
  }
  clear_has_agent();
}
inline const ::std::string& AccountLogCmd::agent() const {
  // @@protoc_insertion_point(field_get:Cmd.AccountLogCmd.agent)
  return *agent_;
}
inline void AccountLogCmd::set_agent(const ::std::string& value) {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ = new ::std::string;
  }
  agent_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AccountLogCmd.agent)
}
inline void AccountLogCmd::set_agent(const char* value) {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ = new ::std::string;
  }
  agent_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AccountLogCmd.agent)
}
inline void AccountLogCmd::set_agent(const char* value, size_t size) {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ = new ::std::string;
  }
  agent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AccountLogCmd.agent)
}
inline ::std::string* AccountLogCmd::mutable_agent() {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AccountLogCmd.agent)
  return agent_;
}
inline ::std::string* AccountLogCmd::release_agent() {
  clear_has_agent();
  if (agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = agent_;
    agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountLogCmd::set_allocated_agent(::std::string* agent) {
  if (agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete agent_;
  }
  if (agent) {
    set_has_agent();
    agent_ = agent;
  } else {
    clear_has_agent();
    agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AccountLogCmd.agent)
}

// optional string logid = 13;
inline bool AccountLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AccountLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AccountLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AccountLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& AccountLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.AccountLogCmd.logid)
  return *logid_;
}
inline void AccountLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AccountLogCmd.logid)
}
inline void AccountLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AccountLogCmd.logid)
}
inline void AccountLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AccountLogCmd.logid)
}
inline ::std::string* AccountLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AccountLogCmd.logid)
  return logid_;
}
inline ::std::string* AccountLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AccountLogCmd.logid)
}

// -------------------------------------------------------------------

// CreateLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool CreateLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command CreateLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CreateLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = CREATE_LOG_CMD];
inline bool CreateLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateLogCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::LogParam CreateLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void CreateLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.param)
}

// optional uint32 cid = 3;
inline bool CreateLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 CreateLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.cid)
  return cid_;
}
inline void CreateLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool CreateLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 CreateLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.sid)
  return sid_;
}
inline void CreateLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.sid)
}

// optional string account = 5;
inline bool CreateLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& CreateLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.account)
  return *account_;
}
inline void CreateLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.account)
}
inline void CreateLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CreateLogCmd.account)
}
inline void CreateLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CreateLogCmd.account)
}
inline ::std::string* CreateLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CreateLogCmd.account)
  return account_;
}
inline ::std::string* CreateLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CreateLogCmd.account)
}

// optional uint64 pid = 6;
inline bool CreateLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 CreateLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.pid)
  return pid_;
}
inline void CreateLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.pid)
}

// optional uint32 time = 7;
inline bool CreateLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CreateLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.time)
  return time_;
}
inline void CreateLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.time)
}

// optional string ip = 8;
inline bool CreateLogCmd::has_ip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreateLogCmd::set_has_ip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreateLogCmd::clear_has_ip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreateLogCmd::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CreateLogCmd::ip() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.ip)
  return *ip_;
}
inline void CreateLogCmd::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.ip)
}
inline void CreateLogCmd::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CreateLogCmd.ip)
}
inline void CreateLogCmd::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CreateLogCmd.ip)
}
inline ::std::string* CreateLogCmd::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CreateLogCmd.ip)
  return ip_;
}
inline ::std::string* CreateLogCmd::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateLogCmd::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CreateLogCmd.ip)
}

// optional string name = 9;
inline bool CreateLogCmd::has_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreateLogCmd::set_has_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CreateLogCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CreateLogCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CreateLogCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.name)
  return *name_;
}
inline void CreateLogCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.name)
}
inline void CreateLogCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CreateLogCmd.name)
}
inline void CreateLogCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CreateLogCmd.name)
}
inline ::std::string* CreateLogCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CreateLogCmd.name)
  return name_;
}
inline ::std::string* CreateLogCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateLogCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CreateLogCmd.name)
}

// optional uint32 guest = 10;
inline bool CreateLogCmd::has_guest() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CreateLogCmd::set_has_guest() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CreateLogCmd::clear_has_guest() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CreateLogCmd::clear_guest() {
  guest_ = 0u;
  clear_has_guest();
}
inline ::google::protobuf::uint32 CreateLogCmd::guest() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.guest)
  return guest_;
}
inline void CreateLogCmd::set_guest(::google::protobuf::uint32 value) {
  set_has_guest();
  guest_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.guest)
}

// optional string device = 11;
inline bool CreateLogCmd::has_device() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CreateLogCmd::set_has_device() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CreateLogCmd::clear_has_device() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CreateLogCmd::clear_device() {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& CreateLogCmd::device() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.device)
  return *device_;
}
inline void CreateLogCmd::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.device)
}
inline void CreateLogCmd::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CreateLogCmd.device)
}
inline void CreateLogCmd::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CreateLogCmd.device)
}
inline ::std::string* CreateLogCmd::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CreateLogCmd.device)
  return device_;
}
inline ::std::string* CreateLogCmd::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateLogCmd::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CreateLogCmd.device)
}

// optional string mac = 12;
inline bool CreateLogCmd::has_mac() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CreateLogCmd::set_has_mac() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CreateLogCmd::clear_has_mac() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CreateLogCmd::clear_mac() {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& CreateLogCmd::mac() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.mac)
  return *mac_;
}
inline void CreateLogCmd::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.mac)
}
inline void CreateLogCmd::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CreateLogCmd.mac)
}
inline void CreateLogCmd::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CreateLogCmd.mac)
}
inline ::std::string* CreateLogCmd::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CreateLogCmd.mac)
  return mac_;
}
inline ::std::string* CreateLogCmd::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateLogCmd::set_allocated_mac(::std::string* mac) {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (mac) {
    set_has_mac();
    mac_ = mac;
  } else {
    clear_has_mac();
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CreateLogCmd.mac)
}

// optional string source = 13;
inline bool CreateLogCmd::has_source() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CreateLogCmd::set_has_source() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CreateLogCmd::clear_has_source() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CreateLogCmd::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& CreateLogCmd::source() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.source)
  return *source_;
}
inline void CreateLogCmd::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.source)
}
inline void CreateLogCmd::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CreateLogCmd.source)
}
inline void CreateLogCmd::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CreateLogCmd.source)
}
inline ::std::string* CreateLogCmd::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CreateLogCmd.source)
  return source_;
}
inline ::std::string* CreateLogCmd::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateLogCmd::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CreateLogCmd.source)
}

// optional string agent = 14;
inline bool CreateLogCmd::has_agent() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CreateLogCmd::set_has_agent() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CreateLogCmd::clear_has_agent() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CreateLogCmd::clear_agent() {
  if (agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_->clear();
  }
  clear_has_agent();
}
inline const ::std::string& CreateLogCmd::agent() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.agent)
  return *agent_;
}
inline void CreateLogCmd::set_agent(const ::std::string& value) {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ = new ::std::string;
  }
  agent_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.agent)
}
inline void CreateLogCmd::set_agent(const char* value) {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ = new ::std::string;
  }
  agent_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CreateLogCmd.agent)
}
inline void CreateLogCmd::set_agent(const char* value, size_t size) {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ = new ::std::string;
  }
  agent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CreateLogCmd.agent)
}
inline ::std::string* CreateLogCmd::mutable_agent() {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CreateLogCmd.agent)
  return agent_;
}
inline ::std::string* CreateLogCmd::release_agent() {
  clear_has_agent();
  if (agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = agent_;
    agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateLogCmd::set_allocated_agent(::std::string* agent) {
  if (agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete agent_;
  }
  if (agent) {
    set_has_agent();
    agent_ = agent;
  } else {
    clear_has_agent();
    agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CreateLogCmd.agent)
}

// optional uint32 gender = 15;
inline bool CreateLogCmd::has_gender() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CreateLogCmd::set_has_gender() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CreateLogCmd::clear_has_gender() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CreateLogCmd::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 CreateLogCmd::gender() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.gender)
  return gender_;
}
inline void CreateLogCmd::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.gender)
}

// optional uint32 hair = 16;
inline bool CreateLogCmd::has_hair() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CreateLogCmd::set_has_hair() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CreateLogCmd::clear_has_hair() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CreateLogCmd::clear_hair() {
  hair_ = 0u;
  clear_has_hair();
}
inline ::google::protobuf::uint32 CreateLogCmd::hair() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.hair)
  return hair_;
}
inline void CreateLogCmd::set_hair(::google::protobuf::uint32 value) {
  set_has_hair();
  hair_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.hair)
}

// optional uint32 haircolor = 17;
inline bool CreateLogCmd::has_haircolor() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CreateLogCmd::set_has_haircolor() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CreateLogCmd::clear_has_haircolor() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CreateLogCmd::clear_haircolor() {
  haircolor_ = 0u;
  clear_has_haircolor();
}
inline ::google::protobuf::uint32 CreateLogCmd::haircolor() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.haircolor)
  return haircolor_;
}
inline void CreateLogCmd::set_haircolor(::google::protobuf::uint32 value) {
  set_has_haircolor();
  haircolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.haircolor)
}

// optional string logid = 18;
inline bool CreateLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CreateLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CreateLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CreateLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& CreateLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateLogCmd.logid)
  return *logid_;
}
inline void CreateLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CreateLogCmd.logid)
}
inline void CreateLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CreateLogCmd.logid)
}
inline void CreateLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CreateLogCmd.logid)
}
inline ::std::string* CreateLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CreateLogCmd.logid)
  return logid_;
}
inline ::std::string* CreateLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CreateLogCmd.logid)
}

// -------------------------------------------------------------------

// ChangeFlagLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool ChangeFlagLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeFlagLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeFlagLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeFlagLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command ChangeFlagLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeFlagLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ChangeFlagLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeFlagLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = CHANGE_FLAG_LOG_CMD];
inline bool ChangeFlagLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeFlagLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeFlagLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeFlagLogCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::LogParam ChangeFlagLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeFlagLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void ChangeFlagLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeFlagLogCmd.param)
}

// optional uint32 cid = 3;
inline bool ChangeFlagLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeFlagLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeFlagLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeFlagLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 ChangeFlagLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeFlagLogCmd.cid)
  return cid_;
}
inline void ChangeFlagLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeFlagLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool ChangeFlagLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChangeFlagLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChangeFlagLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChangeFlagLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 ChangeFlagLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeFlagLogCmd.sid)
  return sid_;
}
inline void ChangeFlagLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeFlagLogCmd.sid)
}

// optional uint64 pid = 5;
inline bool ChangeFlagLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChangeFlagLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChangeFlagLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChangeFlagLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 ChangeFlagLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeFlagLogCmd.pid)
  return pid_;
}
inline void ChangeFlagLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeFlagLogCmd.pid)
}

// optional uint32 time = 6;
inline bool ChangeFlagLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChangeFlagLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChangeFlagLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChangeFlagLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ChangeFlagLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeFlagLogCmd.time)
  return time_;
}
inline void ChangeFlagLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeFlagLogCmd.time)
}

// optional string falg = 7;
inline bool ChangeFlagLogCmd::has_falg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChangeFlagLogCmd::set_has_falg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChangeFlagLogCmd::clear_has_falg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChangeFlagLogCmd::clear_falg() {
  if (falg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    falg_->clear();
  }
  clear_has_falg();
}
inline const ::std::string& ChangeFlagLogCmd::falg() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeFlagLogCmd.falg)
  return *falg_;
}
inline void ChangeFlagLogCmd::set_falg(const ::std::string& value) {
  set_has_falg();
  if (falg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    falg_ = new ::std::string;
  }
  falg_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChangeFlagLogCmd.falg)
}
inline void ChangeFlagLogCmd::set_falg(const char* value) {
  set_has_falg();
  if (falg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    falg_ = new ::std::string;
  }
  falg_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChangeFlagLogCmd.falg)
}
inline void ChangeFlagLogCmd::set_falg(const char* value, size_t size) {
  set_has_falg();
  if (falg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    falg_ = new ::std::string;
  }
  falg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChangeFlagLogCmd.falg)
}
inline ::std::string* ChangeFlagLogCmd::mutable_falg() {
  set_has_falg();
  if (falg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    falg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChangeFlagLogCmd.falg)
  return falg_;
}
inline ::std::string* ChangeFlagLogCmd::release_falg() {
  clear_has_falg();
  if (falg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = falg_;
    falg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeFlagLogCmd::set_allocated_falg(::std::string* falg) {
  if (falg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete falg_;
  }
  if (falg) {
    set_has_falg();
    falg_ = falg;
  } else {
    clear_has_falg();
    falg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChangeFlagLogCmd.falg)
}

// optional string from = 8;
inline bool ChangeFlagLogCmd::has_from() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChangeFlagLogCmd::set_has_from() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChangeFlagLogCmd::clear_has_from() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChangeFlagLogCmd::clear_from() {
  if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& ChangeFlagLogCmd::from() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeFlagLogCmd.from)
  return *from_;
}
inline void ChangeFlagLogCmd::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  from_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChangeFlagLogCmd.from)
}
inline void ChangeFlagLogCmd::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  from_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChangeFlagLogCmd.from)
}
inline void ChangeFlagLogCmd::set_from(const char* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChangeFlagLogCmd.from)
}
inline ::std::string* ChangeFlagLogCmd::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChangeFlagLogCmd.from)
  return from_;
}
inline ::std::string* ChangeFlagLogCmd::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeFlagLogCmd::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChangeFlagLogCmd.from)
}

// optional string to = 9;
inline bool ChangeFlagLogCmd::has_to() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChangeFlagLogCmd::set_has_to() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChangeFlagLogCmd::clear_has_to() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChangeFlagLogCmd::clear_to() {
  if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& ChangeFlagLogCmd::to() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeFlagLogCmd.to)
  return *to_;
}
inline void ChangeFlagLogCmd::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  to_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChangeFlagLogCmd.to)
}
inline void ChangeFlagLogCmd::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  to_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChangeFlagLogCmd.to)
}
inline void ChangeFlagLogCmd::set_to(const char* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChangeFlagLogCmd.to)
}
inline ::std::string* ChangeFlagLogCmd::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChangeFlagLogCmd.to)
  return to_;
}
inline ::std::string* ChangeFlagLogCmd::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeFlagLogCmd::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChangeFlagLogCmd.to)
}

// optional uint64 param1 = 10;
inline bool ChangeFlagLogCmd::has_param1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChangeFlagLogCmd::set_has_param1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChangeFlagLogCmd::clear_has_param1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChangeFlagLogCmd::clear_param1() {
  param1_ = GOOGLE_ULONGLONG(0);
  clear_has_param1();
}
inline ::google::protobuf::uint64 ChangeFlagLogCmd::param1() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeFlagLogCmd.param1)
  return param1_;
}
inline void ChangeFlagLogCmd::set_param1(::google::protobuf::uint64 value) {
  set_has_param1();
  param1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeFlagLogCmd.param1)
}

// optional string logid = 11;
inline bool ChangeFlagLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChangeFlagLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChangeFlagLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChangeFlagLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& ChangeFlagLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeFlagLogCmd.logid)
  return *logid_;
}
inline void ChangeFlagLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChangeFlagLogCmd.logid)
}
inline void ChangeFlagLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChangeFlagLogCmd.logid)
}
inline void ChangeFlagLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChangeFlagLogCmd.logid)
}
inline ::std::string* ChangeFlagLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChangeFlagLogCmd.logid)
  return logid_;
}
inline ::std::string* ChangeFlagLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeFlagLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChangeFlagLogCmd.logid)
}

// -------------------------------------------------------------------

// ChargeLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool ChargeLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChargeLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChargeLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChargeLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command ChargeLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ChargeLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = CHARGE_LOG_CMD];
inline bool ChargeLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChargeLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChargeLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChargeLogCmd::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::LogParam ChargeLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void ChargeLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.param)
}

// optional uint32 cid = 3;
inline bool ChargeLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChargeLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChargeLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChargeLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 ChargeLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.cid)
  return cid_;
}
inline void ChargeLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool ChargeLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChargeLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChargeLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChargeLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 ChargeLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.sid)
  return sid_;
}
inline void ChargeLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool ChargeLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChargeLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChargeLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChargeLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 ChargeLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.hid)
  return hid_;
}
inline void ChargeLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.hid)
}

// optional string account = 6;
inline bool ChargeLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChargeLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChargeLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChargeLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& ChargeLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.account)
  return *account_;
}
inline void ChargeLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.account)
}
inline void ChargeLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChargeLogCmd.account)
}
inline void ChargeLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChargeLogCmd.account)
}
inline ::std::string* ChargeLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChargeLogCmd.account)
  return account_;
}
inline ::std::string* ChargeLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChargeLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChargeLogCmd.account)
}

// optional uint64 pid = 7;
inline bool ChargeLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChargeLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChargeLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChargeLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 ChargeLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.pid)
  return pid_;
}
inline void ChargeLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.pid)
}

// optional uint32 time = 8;
inline bool ChargeLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChargeLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChargeLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChargeLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ChargeLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.time)
  return time_;
}
inline void ChargeLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.time)
}

// optional string ip = 9;
inline bool ChargeLogCmd::has_ip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChargeLogCmd::set_has_ip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChargeLogCmd::clear_has_ip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChargeLogCmd::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ChargeLogCmd::ip() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.ip)
  return *ip_;
}
inline void ChargeLogCmd::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.ip)
}
inline void ChargeLogCmd::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChargeLogCmd.ip)
}
inline void ChargeLogCmd::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChargeLogCmd.ip)
}
inline ::std::string* ChargeLogCmd::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChargeLogCmd.ip)
  return ip_;
}
inline ::std::string* ChargeLogCmd::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChargeLogCmd::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChargeLogCmd.ip)
}

// optional string oid = 10;
inline bool ChargeLogCmd::has_oid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChargeLogCmd::set_has_oid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChargeLogCmd::clear_has_oid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChargeLogCmd::clear_oid() {
  if (oid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oid_->clear();
  }
  clear_has_oid();
}
inline const ::std::string& ChargeLogCmd::oid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.oid)
  return *oid_;
}
inline void ChargeLogCmd::set_oid(const ::std::string& value) {
  set_has_oid();
  if (oid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oid_ = new ::std::string;
  }
  oid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.oid)
}
inline void ChargeLogCmd::set_oid(const char* value) {
  set_has_oid();
  if (oid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oid_ = new ::std::string;
  }
  oid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChargeLogCmd.oid)
}
inline void ChargeLogCmd::set_oid(const char* value, size_t size) {
  set_has_oid();
  if (oid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oid_ = new ::std::string;
  }
  oid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChargeLogCmd.oid)
}
inline ::std::string* ChargeLogCmd::mutable_oid() {
  set_has_oid();
  if (oid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChargeLogCmd.oid)
  return oid_;
}
inline ::std::string* ChargeLogCmd::release_oid() {
  clear_has_oid();
  if (oid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = oid_;
    oid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChargeLogCmd::set_allocated_oid(::std::string* oid) {
  if (oid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oid_;
  }
  if (oid) {
    set_has_oid();
    oid_ = oid;
  } else {
    clear_has_oid();
    oid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChargeLogCmd.oid)
}

// optional string type = 11;
inline bool ChargeLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChargeLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChargeLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChargeLogCmd::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& ChargeLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.type)
  return *type_;
}
inline void ChargeLogCmd::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.type)
}
inline void ChargeLogCmd::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChargeLogCmd.type)
}
inline void ChargeLogCmd::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChargeLogCmd.type)
}
inline ::std::string* ChargeLogCmd::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChargeLogCmd.type)
  return type_;
}
inline ::std::string* ChargeLogCmd::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChargeLogCmd::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChargeLogCmd.type)
}

// optional uint32 level = 12;
inline bool ChargeLogCmd::has_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChargeLogCmd::set_has_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChargeLogCmd::clear_has_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChargeLogCmd::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 ChargeLogCmd::level() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.level)
  return level_;
}
inline void ChargeLogCmd::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.level)
}

// optional float amount = 13;
inline bool ChargeLogCmd::has_amount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChargeLogCmd::set_has_amount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChargeLogCmd::clear_has_amount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChargeLogCmd::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline float ChargeLogCmd::amount() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.amount)
  return amount_;
}
inline void ChargeLogCmd::set_amount(float value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.amount)
}

// optional uint32 coins = 14;
inline bool ChargeLogCmd::has_coins() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChargeLogCmd::set_has_coins() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChargeLogCmd::clear_has_coins() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChargeLogCmd::clear_coins() {
  coins_ = 0u;
  clear_has_coins();
}
inline ::google::protobuf::uint32 ChargeLogCmd::coins() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.coins)
  return coins_;
}
inline void ChargeLogCmd::set_coins(::google::protobuf::uint32 value) {
  set_has_coins();
  coins_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.coins)
}

// repeated uint32 mark = 15;
inline int ChargeLogCmd::mark_size() const {
  return mark_.size();
}
inline void ChargeLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 ChargeLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.mark)
  return mark_.Get(index);
}
inline void ChargeLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.mark)
}
inline void ChargeLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.ChargeLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChargeLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.ChargeLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChargeLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ChargeLogCmd.mark)
  return &mark_;
}

// optional string name = 16;
inline bool ChargeLogCmd::has_name() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChargeLogCmd::set_has_name() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChargeLogCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChargeLogCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChargeLogCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.name)
  return *name_;
}
inline void ChargeLogCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.name)
}
inline void ChargeLogCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChargeLogCmd.name)
}
inline void ChargeLogCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChargeLogCmd.name)
}
inline ::std::string* ChargeLogCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChargeLogCmd.name)
  return name_;
}
inline ::std::string* ChargeLogCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChargeLogCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChargeLogCmd.name)
}

// optional string device = 17;
inline bool ChargeLogCmd::has_device() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChargeLogCmd::set_has_device() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChargeLogCmd::clear_has_device() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChargeLogCmd::clear_device() {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& ChargeLogCmd::device() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.device)
  return *device_;
}
inline void ChargeLogCmd::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.device)
}
inline void ChargeLogCmd::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChargeLogCmd.device)
}
inline void ChargeLogCmd::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChargeLogCmd.device)
}
inline ::std::string* ChargeLogCmd::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChargeLogCmd.device)
  return device_;
}
inline ::std::string* ChargeLogCmd::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChargeLogCmd::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChargeLogCmd.device)
}

// optional uint32 ctime = 18;
inline bool ChargeLogCmd::has_ctime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChargeLogCmd::set_has_ctime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChargeLogCmd::clear_has_ctime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChargeLogCmd::clear_ctime() {
  ctime_ = 0u;
  clear_has_ctime();
}
inline ::google::protobuf::uint32 ChargeLogCmd::ctime() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.ctime)
  return ctime_;
}
inline void ChargeLogCmd::set_ctime(::google::protobuf::uint32 value) {
  set_has_ctime();
  ctime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.ctime)
}

// optional string currency = 19;
inline bool ChargeLogCmd::has_currency() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChargeLogCmd::set_has_currency() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChargeLogCmd::clear_has_currency() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChargeLogCmd::clear_currency() {
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_->clear();
  }
  clear_has_currency();
}
inline const ::std::string& ChargeLogCmd::currency() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.currency)
  return *currency_;
}
inline void ChargeLogCmd::set_currency(const ::std::string& value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.currency)
}
inline void ChargeLogCmd::set_currency(const char* value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChargeLogCmd.currency)
}
inline void ChargeLogCmd::set_currency(const char* value, size_t size) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  currency_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChargeLogCmd.currency)
}
inline ::std::string* ChargeLogCmd::mutable_currency() {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChargeLogCmd.currency)
  return currency_;
}
inline ::std::string* ChargeLogCmd::release_currency() {
  clear_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = currency_;
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChargeLogCmd::set_allocated_currency(::std::string* currency) {
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currency_;
  }
  if (currency) {
    set_has_currency();
    currency_ = currency;
  } else {
    clear_has_currency();
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChargeLogCmd.currency)
}

// optional string provider = 20;
inline bool ChargeLogCmd::has_provider() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChargeLogCmd::set_has_provider() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ChargeLogCmd::clear_has_provider() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ChargeLogCmd::clear_provider() {
  if (provider_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provider_->clear();
  }
  clear_has_provider();
}
inline const ::std::string& ChargeLogCmd::provider() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.provider)
  return *provider_;
}
inline void ChargeLogCmd::set_provider(const ::std::string& value) {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provider_ = new ::std::string;
  }
  provider_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.provider)
}
inline void ChargeLogCmd::set_provider(const char* value) {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provider_ = new ::std::string;
  }
  provider_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChargeLogCmd.provider)
}
inline void ChargeLogCmd::set_provider(const char* value, size_t size) {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provider_ = new ::std::string;
  }
  provider_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChargeLogCmd.provider)
}
inline ::std::string* ChargeLogCmd::mutable_provider() {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provider_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChargeLogCmd.provider)
  return provider_;
}
inline ::std::string* ChargeLogCmd::release_provider() {
  clear_has_provider();
  if (provider_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = provider_;
    provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChargeLogCmd::set_allocated_provider(::std::string* provider) {
  if (provider_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete provider_;
  }
  if (provider) {
    set_has_provider();
    provider_ = provider;
  } else {
    clear_has_provider();
    provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChargeLogCmd.provider)
}

// optional uint32 itemid = 21;
inline bool ChargeLogCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ChargeLogCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ChargeLogCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ChargeLogCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 ChargeLogCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.itemid)
  return itemid_;
}
inline void ChargeLogCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.itemid)
}

// optional string logid = 22;
inline bool ChargeLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ChargeLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ChargeLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ChargeLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& ChargeLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeLogCmd.logid)
  return *logid_;
}
inline void ChargeLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChargeLogCmd.logid)
}
inline void ChargeLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChargeLogCmd.logid)
}
inline void ChargeLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChargeLogCmd.logid)
}
inline ::std::string* ChargeLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChargeLogCmd.logid)
  return logid_;
}
inline ::std::string* ChargeLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChargeLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChargeLogCmd.logid)
}

// -------------------------------------------------------------------

// EventLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool EventLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command EventLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EventLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = EVENT_LOG_CMD];
inline bool EventLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventLogCmd::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::LogParam EventLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void EventLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.param)
}

// optional uint32 cid = 3;
inline bool EventLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 EventLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.cid)
  return cid_;
}
inline void EventLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool EventLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EventLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EventLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EventLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 EventLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.sid)
  return sid_;
}
inline void EventLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool EventLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EventLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EventLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EventLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 EventLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.hid)
  return hid_;
}
inline void EventLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.hid)
}

// optional string account = 6;
inline bool EventLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EventLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EventLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EventLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& EventLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.account)
  return *account_;
}
inline void EventLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.account)
}
inline void EventLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EventLogCmd.account)
}
inline void EventLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EventLogCmd.account)
}
inline ::std::string* EventLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EventLogCmd.account)
  return account_;
}
inline ::std::string* EventLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EventLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EventLogCmd.account)
}

// optional uint64 pid = 7;
inline bool EventLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EventLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EventLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EventLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 EventLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.pid)
  return pid_;
}
inline void EventLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.pid)
}

// optional uint32 time = 8;
inline bool EventLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EventLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EventLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EventLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 EventLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.time)
  return time_;
}
inline void EventLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.time)
}

// optional double microtime = 9;
inline bool EventLogCmd::has_microtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EventLogCmd::set_has_microtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EventLogCmd::clear_has_microtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EventLogCmd::clear_microtime() {
  microtime_ = 0;
  clear_has_microtime();
}
inline double EventLogCmd::microtime() const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.microtime)
  return microtime_;
}
inline void EventLogCmd::set_microtime(double value) {
  set_has_microtime();
  microtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.microtime)
}

// optional uint64 eid = 10;
inline bool EventLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EventLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EventLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EventLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 EventLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.eid)
  return eid_;
}
inline void EventLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.eid)
}

// optional uint32 ispay = 11;
inline bool EventLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EventLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EventLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EventLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 EventLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.ispay)
  return ispay_;
}
inline void EventLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.ispay)
}

// optional uint32 type = 12;
inline bool EventLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EventLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EventLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EventLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 EventLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.type)
  return type_;
}
inline void EventLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.type)
}

// optional uint32 subtype = 13;
inline bool EventLogCmd::has_subtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EventLogCmd::set_has_subtype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EventLogCmd::clear_has_subtype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EventLogCmd::clear_subtype() {
  subtype_ = 0u;
  clear_has_subtype();
}
inline ::google::protobuf::uint32 EventLogCmd::subtype() const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.subtype)
  return subtype_;
}
inline void EventLogCmd::set_subtype(::google::protobuf::uint32 value) {
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.subtype)
}

// optional uint32 count = 14;
inline bool EventLogCmd::has_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EventLogCmd::set_has_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EventLogCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EventLogCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 EventLogCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.count)
  return count_;
}
inline void EventLogCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.count)
}

// repeated uint32 mark = 15;
inline int EventLogCmd::mark_size() const {
  return mark_.size();
}
inline void EventLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 EventLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.mark)
  return mark_.Get(index);
}
inline void EventLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.mark)
}
inline void EventLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.EventLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
EventLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.EventLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
EventLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EventLogCmd.mark)
  return &mark_;
}

// optional string logid = 16;
inline bool EventLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EventLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EventLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EventLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& EventLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.EventLogCmd.logid)
  return *logid_;
}
inline void EventLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EventLogCmd.logid)
}
inline void EventLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EventLogCmd.logid)
}
inline void EventLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EventLogCmd.logid)
}
inline ::std::string* EventLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EventLogCmd.logid)
  return logid_;
}
inline ::std::string* EventLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EventLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EventLogCmd.logid)
}

// -------------------------------------------------------------------

// IncomeLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool IncomeLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IncomeLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IncomeLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IncomeLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command IncomeLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void IncomeLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = INCOME_LOG_CMD];
inline bool IncomeLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IncomeLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IncomeLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IncomeLogCmd::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::LogParam IncomeLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void IncomeLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.param)
}

// optional uint32 cid = 3;
inline bool IncomeLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IncomeLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IncomeLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IncomeLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 IncomeLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.cid)
  return cid_;
}
inline void IncomeLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool IncomeLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IncomeLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IncomeLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IncomeLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 IncomeLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.sid)
  return sid_;
}
inline void IncomeLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool IncomeLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IncomeLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IncomeLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IncomeLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 IncomeLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.hid)
  return hid_;
}
inline void IncomeLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.hid)
}

// optional string account = 6;
inline bool IncomeLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IncomeLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IncomeLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IncomeLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& IncomeLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.account)
  return *account_;
}
inline void IncomeLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.account)
}
inline void IncomeLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.IncomeLogCmd.account)
}
inline void IncomeLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.IncomeLogCmd.account)
}
inline ::std::string* IncomeLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.IncomeLogCmd.account)
  return account_;
}
inline ::std::string* IncomeLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IncomeLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.IncomeLogCmd.account)
}

// optional uint64 pid = 7;
inline bool IncomeLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IncomeLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IncomeLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IncomeLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 IncomeLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.pid)
  return pid_;
}
inline void IncomeLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.pid)
}

// optional uint32 time = 8;
inline bool IncomeLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IncomeLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IncomeLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IncomeLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 IncomeLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.time)
  return time_;
}
inline void IncomeLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.time)
}

// optional double microtime = 9;
inline bool IncomeLogCmd::has_microtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IncomeLogCmd::set_has_microtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IncomeLogCmd::clear_has_microtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IncomeLogCmd::clear_microtime() {
  microtime_ = 0;
  clear_has_microtime();
}
inline double IncomeLogCmd::microtime() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.microtime)
  return microtime_;
}
inline void IncomeLogCmd::set_microtime(double value) {
  set_has_microtime();
  microtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.microtime)
}

// optional uint64 eid = 10;
inline bool IncomeLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IncomeLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IncomeLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IncomeLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 IncomeLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.eid)
  return eid_;
}
inline void IncomeLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.eid)
}

// optional uint32 ispay = 11;
inline bool IncomeLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IncomeLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IncomeLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IncomeLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 IncomeLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.ispay)
  return ispay_;
}
inline void IncomeLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.ispay)
}

// optional uint64 value = 12;
inline bool IncomeLogCmd::has_value() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IncomeLogCmd::set_has_value() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IncomeLogCmd::clear_has_value() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IncomeLogCmd::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 IncomeLogCmd::value() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.value)
  return value_;
}
inline void IncomeLogCmd::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.value)
}

// optional uint32 coin_type = 13;
inline bool IncomeLogCmd::has_coin_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IncomeLogCmd::set_has_coin_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IncomeLogCmd::clear_has_coin_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IncomeLogCmd::clear_coin_type() {
  coin_type_ = 0u;
  clear_has_coin_type();
}
inline ::google::protobuf::uint32 IncomeLogCmd::coin_type() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.coin_type)
  return coin_type_;
}
inline void IncomeLogCmd::set_coin_type(::google::protobuf::uint32 value) {
  set_has_coin_type();
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.coin_type)
}

// optional uint32 type = 14;
inline bool IncomeLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IncomeLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IncomeLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IncomeLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 IncomeLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.type)
  return type_;
}
inline void IncomeLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.type)
}

// optional uint64 after = 15;
inline bool IncomeLogCmd::has_after() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IncomeLogCmd::set_has_after() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IncomeLogCmd::clear_has_after() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IncomeLogCmd::clear_after() {
  after_ = GOOGLE_ULONGLONG(0);
  clear_has_after();
}
inline ::google::protobuf::uint64 IncomeLogCmd::after() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.after)
  return after_;
}
inline void IncomeLogCmd::set_after(::google::protobuf::uint64 value) {
  set_has_after();
  after_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.after)
}

// repeated uint32 mark = 16;
inline int IncomeLogCmd::mark_size() const {
  return mark_.size();
}
inline void IncomeLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 IncomeLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.mark)
  return mark_.Get(index);
}
inline void IncomeLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.mark)
}
inline void IncomeLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.IncomeLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IncomeLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.IncomeLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IncomeLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.IncomeLogCmd.mark)
  return &mark_;
}

// optional string logid = 17;
inline bool IncomeLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void IncomeLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void IncomeLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void IncomeLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& IncomeLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.logid)
  return *logid_;
}
inline void IncomeLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.logid)
}
inline void IncomeLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.IncomeLogCmd.logid)
}
inline void IncomeLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.IncomeLogCmd.logid)
}
inline ::std::string* IncomeLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.IncomeLogCmd.logid)
  return logid_;
}
inline ::std::string* IncomeLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IncomeLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.IncomeLogCmd.logid)
}

// optional uint32 source = 18;
inline bool IncomeLogCmd::has_source() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void IncomeLogCmd::set_has_source() {
  _has_bits_[0] |= 0x00020000u;
}
inline void IncomeLogCmd::clear_has_source() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void IncomeLogCmd::clear_source() {
  source_ = 0u;
  clear_has_source();
}
inline ::google::protobuf::uint32 IncomeLogCmd::source() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.source)
  return source_;
}
inline void IncomeLogCmd::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.source)
}

// optional uint32 count = 19;
inline bool IncomeLogCmd::has_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void IncomeLogCmd::set_has_count() {
  _has_bits_[0] |= 0x00040000u;
}
inline void IncomeLogCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void IncomeLogCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 IncomeLogCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.IncomeLogCmd.count)
  return count_;
}
inline void IncomeLogCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.IncomeLogCmd.count)
}

// -------------------------------------------------------------------

// ConsumeLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool ConsumeLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsumeLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsumeLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsumeLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command ConsumeLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ConsumeLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = CONSUME_LOG_CMD];
inline bool ConsumeLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsumeLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsumeLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsumeLogCmd::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::LogParam ConsumeLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void ConsumeLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.param)
}

// optional uint32 cid = 3;
inline bool ConsumeLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConsumeLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConsumeLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConsumeLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 ConsumeLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.cid)
  return cid_;
}
inline void ConsumeLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool ConsumeLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConsumeLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConsumeLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConsumeLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 ConsumeLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.sid)
  return sid_;
}
inline void ConsumeLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool ConsumeLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConsumeLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConsumeLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConsumeLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 ConsumeLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.hid)
  return hid_;
}
inline void ConsumeLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.hid)
}

// optional string account = 6;
inline bool ConsumeLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConsumeLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConsumeLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConsumeLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& ConsumeLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.account)
  return *account_;
}
inline void ConsumeLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.account)
}
inline void ConsumeLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ConsumeLogCmd.account)
}
inline void ConsumeLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ConsumeLogCmd.account)
}
inline ::std::string* ConsumeLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ConsumeLogCmd.account)
  return account_;
}
inline ::std::string* ConsumeLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConsumeLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ConsumeLogCmd.account)
}

// optional uint64 pid = 7;
inline bool ConsumeLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConsumeLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConsumeLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConsumeLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 ConsumeLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.pid)
  return pid_;
}
inline void ConsumeLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.pid)
}

// optional uint32 time = 8;
inline bool ConsumeLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConsumeLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConsumeLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConsumeLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ConsumeLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.time)
  return time_;
}
inline void ConsumeLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.time)
}

// optional double microtime = 9;
inline bool ConsumeLogCmd::has_microtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConsumeLogCmd::set_has_microtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConsumeLogCmd::clear_has_microtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConsumeLogCmd::clear_microtime() {
  microtime_ = 0;
  clear_has_microtime();
}
inline double ConsumeLogCmd::microtime() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.microtime)
  return microtime_;
}
inline void ConsumeLogCmd::set_microtime(double value) {
  set_has_microtime();
  microtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.microtime)
}

// optional uint64 eid = 10;
inline bool ConsumeLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConsumeLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConsumeLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConsumeLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 ConsumeLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.eid)
  return eid_;
}
inline void ConsumeLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.eid)
}

// optional uint32 ispay = 11;
inline bool ConsumeLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConsumeLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConsumeLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConsumeLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 ConsumeLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.ispay)
  return ispay_;
}
inline void ConsumeLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.ispay)
}

// optional uint64 value = 12;
inline bool ConsumeLogCmd::has_value() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConsumeLogCmd::set_has_value() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConsumeLogCmd::clear_has_value() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConsumeLogCmd::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 ConsumeLogCmd::value() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.value)
  return value_;
}
inline void ConsumeLogCmd::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.value)
}

// optional uint32 coin_type = 13;
inline bool ConsumeLogCmd::has_coin_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConsumeLogCmd::set_has_coin_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConsumeLogCmd::clear_has_coin_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConsumeLogCmd::clear_coin_type() {
  coin_type_ = 0u;
  clear_has_coin_type();
}
inline ::google::protobuf::uint32 ConsumeLogCmd::coin_type() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.coin_type)
  return coin_type_;
}
inline void ConsumeLogCmd::set_coin_type(::google::protobuf::uint32 value) {
  set_has_coin_type();
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.coin_type)
}

// optional uint32 type = 14;
inline bool ConsumeLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConsumeLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConsumeLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConsumeLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ConsumeLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.type)
  return type_;
}
inline void ConsumeLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.type)
}

// optional uint64 after = 15;
inline bool ConsumeLogCmd::has_after() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConsumeLogCmd::set_has_after() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConsumeLogCmd::clear_has_after() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConsumeLogCmd::clear_after() {
  after_ = GOOGLE_ULONGLONG(0);
  clear_has_after();
}
inline ::google::protobuf::uint64 ConsumeLogCmd::after() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.after)
  return after_;
}
inline void ConsumeLogCmd::set_after(::google::protobuf::uint64 value) {
  set_has_after();
  after_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.after)
}

// repeated uint32 mark = 16;
inline int ConsumeLogCmd::mark_size() const {
  return mark_.size();
}
inline void ConsumeLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 ConsumeLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.mark)
  return mark_.Get(index);
}
inline void ConsumeLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.mark)
}
inline void ConsumeLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.ConsumeLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConsumeLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.ConsumeLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConsumeLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ConsumeLogCmd.mark)
  return &mark_;
}

// optional string logid = 17;
inline bool ConsumeLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConsumeLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConsumeLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConsumeLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& ConsumeLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.logid)
  return *logid_;
}
inline void ConsumeLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.logid)
}
inline void ConsumeLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ConsumeLogCmd.logid)
}
inline void ConsumeLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ConsumeLogCmd.logid)
}
inline ::std::string* ConsumeLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ConsumeLogCmd.logid)
  return logid_;
}
inline ::std::string* ConsumeLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConsumeLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ConsumeLogCmd.logid)
}

// optional uint32 kind = 18;
inline bool ConsumeLogCmd::has_kind() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConsumeLogCmd::set_has_kind() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConsumeLogCmd::clear_has_kind() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConsumeLogCmd::clear_kind() {
  kind_ = 0u;
  clear_has_kind();
}
inline ::google::protobuf::uint32 ConsumeLogCmd::kind() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.kind)
  return kind_;
}
inline void ConsumeLogCmd::set_kind(::google::protobuf::uint32 value) {
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.kind)
}

// optional uint32 source = 19;
inline bool ConsumeLogCmd::has_source() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ConsumeLogCmd::set_has_source() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ConsumeLogCmd::clear_has_source() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ConsumeLogCmd::clear_source() {
  source_ = 0u;
  clear_has_source();
}
inline ::google::protobuf::uint32 ConsumeLogCmd::source() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.source)
  return source_;
}
inline void ConsumeLogCmd::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.source)
}

// optional uint32 count = 20;
inline bool ConsumeLogCmd::has_count() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ConsumeLogCmd::set_has_count() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ConsumeLogCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ConsumeLogCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ConsumeLogCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.count)
  return count_;
}
inline void ConsumeLogCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.count)
}

// optional uint64 chargecount = 21;
inline bool ConsumeLogCmd::has_chargecount() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ConsumeLogCmd::set_has_chargecount() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ConsumeLogCmd::clear_has_chargecount() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ConsumeLogCmd::clear_chargecount() {
  chargecount_ = GOOGLE_ULONGLONG(0);
  clear_has_chargecount();
}
inline ::google::protobuf::uint64 ConsumeLogCmd::chargecount() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.chargecount)
  return chargecount_;
}
inline void ConsumeLogCmd::set_chargecount(::google::protobuf::uint64 value) {
  set_has_chargecount();
  chargecount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.chargecount)
}

// optional uint64 remaincharge = 22;
inline bool ConsumeLogCmd::has_remaincharge() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ConsumeLogCmd::set_has_remaincharge() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ConsumeLogCmd::clear_has_remaincharge() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ConsumeLogCmd::clear_remaincharge() {
  remaincharge_ = GOOGLE_ULONGLONG(0);
  clear_has_remaincharge();
}
inline ::google::protobuf::uint64 ConsumeLogCmd::remaincharge() const {
  // @@protoc_insertion_point(field_get:Cmd.ConsumeLogCmd.remaincharge)
  return remaincharge_;
}
inline void ConsumeLogCmd::set_remaincharge(::google::protobuf::uint64 value) {
  set_has_remaincharge();
  remaincharge_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConsumeLogCmd.remaincharge)
}

// -------------------------------------------------------------------

// ItemLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool ItemLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command ItemLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ItemLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = ITEM_LOG_CMD];
inline bool ItemLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemLogCmd::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::LogParam ItemLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void ItemLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.param)
}

// optional uint32 cid = 3;
inline bool ItemLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 ItemLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.cid)
  return cid_;
}
inline void ItemLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool ItemLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 ItemLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.sid)
  return sid_;
}
inline void ItemLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool ItemLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 ItemLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.hid)
  return hid_;
}
inline void ItemLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.hid)
}

// optional string account = 6;
inline bool ItemLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ItemLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ItemLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ItemLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& ItemLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.account)
  return *account_;
}
inline void ItemLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.account)
}
inline void ItemLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ItemLogCmd.account)
}
inline void ItemLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ItemLogCmd.account)
}
inline ::std::string* ItemLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ItemLogCmd.account)
  return account_;
}
inline ::std::string* ItemLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemLogCmd.account)
}

// optional uint64 pid = 7;
inline bool ItemLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ItemLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ItemLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ItemLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 ItemLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.pid)
  return pid_;
}
inline void ItemLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.pid)
}

// optional uint64 eid = 8;
inline bool ItemLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ItemLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ItemLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ItemLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 ItemLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.eid)
  return eid_;
}
inline void ItemLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.eid)
}

// optional uint32 time = 9;
inline bool ItemLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ItemLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ItemLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ItemLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ItemLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.time)
  return time_;
}
inline void ItemLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.time)
}

// optional double microtime = 10;
inline bool ItemLogCmd::has_microtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ItemLogCmd::set_has_microtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ItemLogCmd::clear_has_microtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ItemLogCmd::clear_microtime() {
  microtime_ = 0;
  clear_has_microtime();
}
inline double ItemLogCmd::microtime() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.microtime)
  return microtime_;
}
inline void ItemLogCmd::set_microtime(double value) {
  set_has_microtime();
  microtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.microtime)
}

// optional string logid = 11;
inline bool ItemLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ItemLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ItemLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ItemLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& ItemLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.logid)
  return *logid_;
}
inline void ItemLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.logid)
}
inline void ItemLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ItemLogCmd.logid)
}
inline void ItemLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ItemLogCmd.logid)
}
inline ::std::string* ItemLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ItemLogCmd.logid)
  return logid_;
}
inline ::std::string* ItemLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemLogCmd.logid)
}

// optional uint32 ispay = 12;
inline bool ItemLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ItemLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ItemLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ItemLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 ItemLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.ispay)
  return ispay_;
}
inline void ItemLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.ispay)
}

// optional uint32 type = 13;
inline bool ItemLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ItemLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ItemLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ItemLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ItemLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.type)
  return type_;
}
inline void ItemLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.type)
}

// optional uint32 itemid = 14;
inline bool ItemLogCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ItemLogCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ItemLogCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ItemLogCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 ItemLogCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.itemid)
  return itemid_;
}
inline void ItemLogCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.itemid)
}

// optional uint32 value = 15;
inline bool ItemLogCmd::has_value() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ItemLogCmd::set_has_value() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ItemLogCmd::clear_has_value() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ItemLogCmd::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 ItemLogCmd::value() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.value)
  return value_;
}
inline void ItemLogCmd::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.value)
}

// optional uint64 from_pid = 16;
inline bool ItemLogCmd::has_from_pid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ItemLogCmd::set_has_from_pid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ItemLogCmd::clear_has_from_pid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ItemLogCmd::clear_from_pid() {
  from_pid_ = GOOGLE_ULONGLONG(0);
  clear_has_from_pid();
}
inline ::google::protobuf::uint64 ItemLogCmd::from_pid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.from_pid)
  return from_pid_;
}
inline void ItemLogCmd::set_from_pid(::google::protobuf::uint64 value) {
  set_has_from_pid();
  from_pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.from_pid)
}

// optional uint32 after = 17;
inline bool ItemLogCmd::has_after() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ItemLogCmd::set_has_after() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ItemLogCmd::clear_has_after() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ItemLogCmd::clear_after() {
  after_ = 0u;
  clear_has_after();
}
inline ::google::protobuf::uint32 ItemLogCmd::after() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.after)
  return after_;
}
inline void ItemLogCmd::set_after(::google::protobuf::uint32 value) {
  set_has_after();
  after_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.after)
}

// optional uint32 amount = 18;
inline bool ItemLogCmd::has_amount() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ItemLogCmd::set_has_amount() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ItemLogCmd::clear_has_amount() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ItemLogCmd::clear_amount() {
  amount_ = 0u;
  clear_has_amount();
}
inline ::google::protobuf::uint32 ItemLogCmd::amount() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.amount)
  return amount_;
}
inline void ItemLogCmd::set_amount(::google::protobuf::uint32 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.amount)
}

// optional uint32 amount2 = 19;
inline bool ItemLogCmd::has_amount2() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ItemLogCmd::set_has_amount2() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ItemLogCmd::clear_has_amount2() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ItemLogCmd::clear_amount2() {
  amount2_ = 0u;
  clear_has_amount2();
}
inline ::google::protobuf::uint32 ItemLogCmd::amount2() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.amount2)
  return amount2_;
}
inline void ItemLogCmd::set_amount2(::google::protobuf::uint32 value) {
  set_has_amount2();
  amount2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.amount2)
}

// repeated uint32 mark = 20;
inline int ItemLogCmd::mark_size() const {
  return mark_.size();
}
inline void ItemLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 ItemLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.mark)
  return mark_.Get(index);
}
inline void ItemLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.mark)
}
inline void ItemLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.ItemLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ItemLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.ItemLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ItemLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ItemLogCmd.mark)
  return &mark_;
}

// optional uint32 source = 21;
inline bool ItemLogCmd::has_source() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ItemLogCmd::set_has_source() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ItemLogCmd::clear_has_source() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ItemLogCmd::clear_source() {
  source_ = 0u;
  clear_has_source();
}
inline ::google::protobuf::uint32 ItemLogCmd::source() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.source)
  return source_;
}
inline void ItemLogCmd::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.source)
}

// optional uint32 count = 22;
inline bool ItemLogCmd::has_count() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ItemLogCmd::set_has_count() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ItemLogCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ItemLogCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ItemLogCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemLogCmd.count)
  return count_;
}
inline void ItemLogCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemLogCmd.count)
}

// -------------------------------------------------------------------

// PropsLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool PropsLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropsLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropsLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropsLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command PropsLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PropsLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = PROPS_LOG_CMD];
inline bool PropsLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropsLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropsLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropsLogCmd::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::LogParam PropsLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void PropsLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.param)
}

// optional uint32 cid = 3;
inline bool PropsLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PropsLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PropsLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PropsLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 PropsLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.cid)
  return cid_;
}
inline void PropsLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool PropsLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PropsLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PropsLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PropsLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 PropsLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.sid)
  return sid_;
}
inline void PropsLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool PropsLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PropsLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PropsLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PropsLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 PropsLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.hid)
  return hid_;
}
inline void PropsLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.hid)
}

// optional string account = 6;
inline bool PropsLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PropsLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PropsLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PropsLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& PropsLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.account)
  return *account_;
}
inline void PropsLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.account)
}
inline void PropsLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PropsLogCmd.account)
}
inline void PropsLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PropsLogCmd.account)
}
inline ::std::string* PropsLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PropsLogCmd.account)
  return account_;
}
inline ::std::string* PropsLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PropsLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PropsLogCmd.account)
}

// optional uint64 pid = 7;
inline bool PropsLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PropsLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PropsLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PropsLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 PropsLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.pid)
  return pid_;
}
inline void PropsLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.pid)
}

// optional uint64 eid = 8;
inline bool PropsLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PropsLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PropsLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PropsLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 PropsLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.eid)
  return eid_;
}
inline void PropsLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.eid)
}

// optional uint32 time = 9;
inline bool PropsLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PropsLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PropsLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PropsLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 PropsLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.time)
  return time_;
}
inline void PropsLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.time)
}

// optional double microtime = 10;
inline bool PropsLogCmd::has_microtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PropsLogCmd::set_has_microtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PropsLogCmd::clear_has_microtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PropsLogCmd::clear_microtime() {
  microtime_ = 0;
  clear_has_microtime();
}
inline double PropsLogCmd::microtime() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.microtime)
  return microtime_;
}
inline void PropsLogCmd::set_microtime(double value) {
  set_has_microtime();
  microtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.microtime)
}

// optional string logid = 11;
inline bool PropsLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PropsLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PropsLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PropsLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& PropsLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.logid)
  return *logid_;
}
inline void PropsLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.logid)
}
inline void PropsLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PropsLogCmd.logid)
}
inline void PropsLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PropsLogCmd.logid)
}
inline ::std::string* PropsLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PropsLogCmd.logid)
  return logid_;
}
inline ::std::string* PropsLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PropsLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PropsLogCmd.logid)
}

// optional uint32 ispay = 12;
inline bool PropsLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PropsLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PropsLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PropsLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 PropsLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.ispay)
  return ispay_;
}
inline void PropsLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.ispay)
}

// optional uint32 itemid = 13;
inline bool PropsLogCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PropsLogCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PropsLogCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PropsLogCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 PropsLogCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.itemid)
  return itemid_;
}
inline void PropsLogCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.itemid)
}

// optional uint32 value = 14;
inline bool PropsLogCmd::has_value() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PropsLogCmd::set_has_value() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PropsLogCmd::clear_has_value() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PropsLogCmd::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 PropsLogCmd::value() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.value)
  return value_;
}
inline void PropsLogCmd::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.value)
}

// optional uint32 type = 15;
inline bool PropsLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PropsLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PropsLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PropsLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PropsLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.type)
  return type_;
}
inline void PropsLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.type)
}

// optional uint32 after = 16;
inline bool PropsLogCmd::has_after() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PropsLogCmd::set_has_after() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PropsLogCmd::clear_has_after() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PropsLogCmd::clear_after() {
  after_ = 0u;
  clear_has_after();
}
inline ::google::protobuf::uint32 PropsLogCmd::after() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.after)
  return after_;
}
inline void PropsLogCmd::set_after(::google::protobuf::uint32 value) {
  set_has_after();
  after_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.after)
}

// repeated uint32 mark = 17;
inline int PropsLogCmd::mark_size() const {
  return mark_.size();
}
inline void PropsLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 PropsLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.mark)
  return mark_.Get(index);
}
inline void PropsLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.mark)
}
inline void PropsLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.PropsLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PropsLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.PropsLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PropsLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PropsLogCmd.mark)
  return &mark_;
}

// optional uint32 source = 18;
inline bool PropsLogCmd::has_source() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PropsLogCmd::set_has_source() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PropsLogCmd::clear_has_source() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PropsLogCmd::clear_source() {
  source_ = 0u;
  clear_has_source();
}
inline ::google::protobuf::uint32 PropsLogCmd::source() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.source)
  return source_;
}
inline void PropsLogCmd::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.source)
}

// optional uint32 count = 19;
inline bool PropsLogCmd::has_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PropsLogCmd::set_has_count() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PropsLogCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PropsLogCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 PropsLogCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.count)
  return count_;
}
inline void PropsLogCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.count)
}

// optional string iteminfo = 20;
inline bool PropsLogCmd::has_iteminfo() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PropsLogCmd::set_has_iteminfo() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PropsLogCmd::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PropsLogCmd::clear_iteminfo() {
  if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_->clear();
  }
  clear_has_iteminfo();
}
inline const ::std::string& PropsLogCmd::iteminfo() const {
  // @@protoc_insertion_point(field_get:Cmd.PropsLogCmd.iteminfo)
  return *iteminfo_;
}
inline void PropsLogCmd::set_iteminfo(const ::std::string& value) {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  iteminfo_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PropsLogCmd.iteminfo)
}
inline void PropsLogCmd::set_iteminfo(const char* value) {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  iteminfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PropsLogCmd.iteminfo)
}
inline void PropsLogCmd::set_iteminfo(const char* value, size_t size) {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  iteminfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PropsLogCmd.iteminfo)
}
inline ::std::string* PropsLogCmd::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PropsLogCmd.iteminfo)
  return iteminfo_;
}
inline ::std::string* PropsLogCmd::release_iteminfo() {
  clear_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = iteminfo_;
    iteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PropsLogCmd::set_allocated_iteminfo(::std::string* iteminfo) {
  if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iteminfo_;
  }
  if (iteminfo) {
    set_has_iteminfo();
    iteminfo_ = iteminfo;
  } else {
    clear_has_iteminfo();
    iteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PropsLogCmd.iteminfo)
}

// -------------------------------------------------------------------

// TransactionLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool TransactionLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command TransactionLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TransactionLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = TRANSACTION_LOG_CMD];
inline bool TransactionLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransactionLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransactionLogCmd::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::LogParam TransactionLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void TransactionLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.param)
}

// optional uint32 cid = 3;
inline bool TransactionLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransactionLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransactionLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransactionLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 TransactionLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.cid)
  return cid_;
}
inline void TransactionLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool TransactionLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransactionLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransactionLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransactionLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 TransactionLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.sid)
  return sid_;
}
inline void TransactionLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool TransactionLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransactionLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransactionLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransactionLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TransactionLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.hid)
  return hid_;
}
inline void TransactionLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.hid)
}

// optional string from_account = 6;
inline bool TransactionLogCmd::has_from_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransactionLogCmd::set_has_from_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransactionLogCmd::clear_has_from_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransactionLogCmd::clear_from_account() {
  if (from_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_account_->clear();
  }
  clear_has_from_account();
}
inline const ::std::string& TransactionLogCmd::from_account() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.from_account)
  return *from_account_;
}
inline void TransactionLogCmd::set_from_account(const ::std::string& value) {
  set_has_from_account();
  if (from_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_account_ = new ::std::string;
  }
  from_account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.from_account)
}
inline void TransactionLogCmd::set_from_account(const char* value) {
  set_has_from_account();
  if (from_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_account_ = new ::std::string;
  }
  from_account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TransactionLogCmd.from_account)
}
inline void TransactionLogCmd::set_from_account(const char* value, size_t size) {
  set_has_from_account();
  if (from_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_account_ = new ::std::string;
  }
  from_account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TransactionLogCmd.from_account)
}
inline ::std::string* TransactionLogCmd::mutable_from_account() {
  set_has_from_account();
  if (from_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TransactionLogCmd.from_account)
  return from_account_;
}
inline ::std::string* TransactionLogCmd::release_from_account() {
  clear_has_from_account();
  if (from_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_account_;
    from_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TransactionLogCmd::set_allocated_from_account(::std::string* from_account) {
  if (from_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_account_;
  }
  if (from_account) {
    set_has_from_account();
    from_account_ = from_account;
  } else {
    clear_has_from_account();
    from_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TransactionLogCmd.from_account)
}

// optional uint64 from_pid = 7;
inline bool TransactionLogCmd::has_from_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TransactionLogCmd::set_has_from_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TransactionLogCmd::clear_has_from_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TransactionLogCmd::clear_from_pid() {
  from_pid_ = GOOGLE_ULONGLONG(0);
  clear_has_from_pid();
}
inline ::google::protobuf::uint64 TransactionLogCmd::from_pid() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.from_pid)
  return from_pid_;
}
inline void TransactionLogCmd::set_from_pid(::google::protobuf::uint64 value) {
  set_has_from_pid();
  from_pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.from_pid)
}

// optional string to_account = 8;
inline bool TransactionLogCmd::has_to_account() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TransactionLogCmd::set_has_to_account() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TransactionLogCmd::clear_has_to_account() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TransactionLogCmd::clear_to_account() {
  if (to_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_account_->clear();
  }
  clear_has_to_account();
}
inline const ::std::string& TransactionLogCmd::to_account() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.to_account)
  return *to_account_;
}
inline void TransactionLogCmd::set_to_account(const ::std::string& value) {
  set_has_to_account();
  if (to_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_account_ = new ::std::string;
  }
  to_account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.to_account)
}
inline void TransactionLogCmd::set_to_account(const char* value) {
  set_has_to_account();
  if (to_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_account_ = new ::std::string;
  }
  to_account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TransactionLogCmd.to_account)
}
inline void TransactionLogCmd::set_to_account(const char* value, size_t size) {
  set_has_to_account();
  if (to_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_account_ = new ::std::string;
  }
  to_account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TransactionLogCmd.to_account)
}
inline ::std::string* TransactionLogCmd::mutable_to_account() {
  set_has_to_account();
  if (to_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TransactionLogCmd.to_account)
  return to_account_;
}
inline ::std::string* TransactionLogCmd::release_to_account() {
  clear_has_to_account();
  if (to_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = to_account_;
    to_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TransactionLogCmd::set_allocated_to_account(::std::string* to_account) {
  if (to_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_account_;
  }
  if (to_account) {
    set_has_to_account();
    to_account_ = to_account;
  } else {
    clear_has_to_account();
    to_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TransactionLogCmd.to_account)
}

// optional uint64 to_pid = 9;
inline bool TransactionLogCmd::has_to_pid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TransactionLogCmd::set_has_to_pid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TransactionLogCmd::clear_has_to_pid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TransactionLogCmd::clear_to_pid() {
  to_pid_ = GOOGLE_ULONGLONG(0);
  clear_has_to_pid();
}
inline ::google::protobuf::uint64 TransactionLogCmd::to_pid() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.to_pid)
  return to_pid_;
}
inline void TransactionLogCmd::set_to_pid(::google::protobuf::uint64 value) {
  set_has_to_pid();
  to_pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.to_pid)
}

// optional uint64 eid = 10;
inline bool TransactionLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TransactionLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TransactionLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TransactionLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 TransactionLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.eid)
  return eid_;
}
inline void TransactionLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.eid)
}

// optional uint32 time = 11;
inline bool TransactionLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TransactionLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TransactionLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TransactionLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 TransactionLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.time)
  return time_;
}
inline void TransactionLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.time)
}

// optional uint32 ispay = 12;
inline bool TransactionLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TransactionLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TransactionLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TransactionLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 TransactionLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.ispay)
  return ispay_;
}
inline void TransactionLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.ispay)
}

// optional uint32 itemid = 13;
inline bool TransactionLogCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TransactionLogCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TransactionLogCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TransactionLogCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TransactionLogCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.itemid)
  return itemid_;
}
inline void TransactionLogCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.itemid)
}

// optional uint32 value = 14;
inline bool TransactionLogCmd::has_value() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TransactionLogCmd::set_has_value() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TransactionLogCmd::clear_has_value() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TransactionLogCmd::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 TransactionLogCmd::value() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.value)
  return value_;
}
inline void TransactionLogCmd::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.value)
}

// repeated uint32 mark = 15;
inline int TransactionLogCmd::mark_size() const {
  return mark_.size();
}
inline void TransactionLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 TransactionLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.mark)
  return mark_.Get(index);
}
inline void TransactionLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.mark)
}
inline void TransactionLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.TransactionLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TransactionLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.TransactionLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TransactionLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.TransactionLogCmd.mark)
  return &mark_;
}

// optional uint32 fee = 16;
inline bool TransactionLogCmd::has_fee() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TransactionLogCmd::set_has_fee() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TransactionLogCmd::clear_has_fee() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TransactionLogCmd::clear_fee() {
  fee_ = 0u;
  clear_has_fee();
}
inline ::google::protobuf::uint32 TransactionLogCmd::fee() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.fee)
  return fee_;
}
inline void TransactionLogCmd::set_fee(::google::protobuf::uint32 value) {
  set_has_fee();
  fee_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.fee)
}

// optional uint32 fee2 = 17;
inline bool TransactionLogCmd::has_fee2() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TransactionLogCmd::set_has_fee2() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TransactionLogCmd::clear_has_fee2() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TransactionLogCmd::clear_fee2() {
  fee2_ = 0u;
  clear_has_fee2();
}
inline ::google::protobuf::uint32 TransactionLogCmd::fee2() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.fee2)
  return fee2_;
}
inline void TransactionLogCmd::set_fee2(::google::protobuf::uint32 value) {
  set_has_fee2();
  fee2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.fee2)
}

// optional string logid = 18;
inline bool TransactionLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TransactionLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TransactionLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TransactionLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& TransactionLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.TransactionLogCmd.logid)
  return *logid_;
}
inline void TransactionLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TransactionLogCmd.logid)
}
inline void TransactionLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TransactionLogCmd.logid)
}
inline void TransactionLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TransactionLogCmd.logid)
}
inline ::std::string* TransactionLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TransactionLogCmd.logid)
  return logid_;
}
inline ::std::string* TransactionLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TransactionLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TransactionLogCmd.logid)
}

// -------------------------------------------------------------------

// ChatLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool ChatLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command ChatLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ChatLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = CHAT_LOG_CMD];
inline bool ChatLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatLogCmd::clear_param() {
  param_ = 12;
  clear_has_param();
}
inline ::Cmd::LogParam ChatLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void ChatLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.param)
}

// optional uint32 cid = 3;
inline bool ChatLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 ChatLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.cid)
  return cid_;
}
inline void ChatLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool ChatLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 ChatLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.sid)
  return sid_;
}
inline void ChatLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool ChatLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 ChatLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.hid)
  return hid_;
}
inline void ChatLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.hid)
}

// optional string from_account = 6;
inline bool ChatLogCmd::has_from_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatLogCmd::set_has_from_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatLogCmd::clear_has_from_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatLogCmd::clear_from_account() {
  if (from_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_account_->clear();
  }
  clear_has_from_account();
}
inline const ::std::string& ChatLogCmd::from_account() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.from_account)
  return *from_account_;
}
inline void ChatLogCmd::set_from_account(const ::std::string& value) {
  set_has_from_account();
  if (from_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_account_ = new ::std::string;
  }
  from_account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.from_account)
}
inline void ChatLogCmd::set_from_account(const char* value) {
  set_has_from_account();
  if (from_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_account_ = new ::std::string;
  }
  from_account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatLogCmd.from_account)
}
inline void ChatLogCmd::set_from_account(const char* value, size_t size) {
  set_has_from_account();
  if (from_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_account_ = new ::std::string;
  }
  from_account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatLogCmd.from_account)
}
inline ::std::string* ChatLogCmd::mutable_from_account() {
  set_has_from_account();
  if (from_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatLogCmd.from_account)
  return from_account_;
}
inline ::std::string* ChatLogCmd::release_from_account() {
  clear_has_from_account();
  if (from_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_account_;
    from_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatLogCmd::set_allocated_from_account(::std::string* from_account) {
  if (from_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_account_;
  }
  if (from_account) {
    set_has_from_account();
    from_account_ = from_account;
  } else {
    clear_has_from_account();
    from_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatLogCmd.from_account)
}

// optional string from_name = 7;
inline bool ChatLogCmd::has_from_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatLogCmd::set_has_from_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatLogCmd::clear_has_from_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatLogCmd::clear_from_name() {
  if (from_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_name_->clear();
  }
  clear_has_from_name();
}
inline const ::std::string& ChatLogCmd::from_name() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.from_name)
  return *from_name_;
}
inline void ChatLogCmd::set_from_name(const ::std::string& value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.from_name)
}
inline void ChatLogCmd::set_from_name(const char* value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatLogCmd.from_name)
}
inline void ChatLogCmd::set_from_name(const char* value, size_t size) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatLogCmd.from_name)
}
inline ::std::string* ChatLogCmd::mutable_from_name() {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatLogCmd.from_name)
  return from_name_;
}
inline ::std::string* ChatLogCmd::release_from_name() {
  clear_has_from_name();
  if (from_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_name_;
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatLogCmd::set_allocated_from_name(::std::string* from_name) {
  if (from_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_name_;
  }
  if (from_name) {
    set_has_from_name();
    from_name_ = from_name;
  } else {
    clear_has_from_name();
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatLogCmd.from_name)
}

// optional uint64 from_pid = 8;
inline bool ChatLogCmd::has_from_pid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChatLogCmd::set_has_from_pid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChatLogCmd::clear_has_from_pid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChatLogCmd::clear_from_pid() {
  from_pid_ = GOOGLE_ULONGLONG(0);
  clear_has_from_pid();
}
inline ::google::protobuf::uint64 ChatLogCmd::from_pid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.from_pid)
  return from_pid_;
}
inline void ChatLogCmd::set_from_pid(::google::protobuf::uint64 value) {
  set_has_from_pid();
  from_pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.from_pid)
}

// optional string to_account = 9;
inline bool ChatLogCmd::has_to_account() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChatLogCmd::set_has_to_account() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChatLogCmd::clear_has_to_account() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChatLogCmd::clear_to_account() {
  if (to_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_account_->clear();
  }
  clear_has_to_account();
}
inline const ::std::string& ChatLogCmd::to_account() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.to_account)
  return *to_account_;
}
inline void ChatLogCmd::set_to_account(const ::std::string& value) {
  set_has_to_account();
  if (to_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_account_ = new ::std::string;
  }
  to_account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.to_account)
}
inline void ChatLogCmd::set_to_account(const char* value) {
  set_has_to_account();
  if (to_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_account_ = new ::std::string;
  }
  to_account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatLogCmd.to_account)
}
inline void ChatLogCmd::set_to_account(const char* value, size_t size) {
  set_has_to_account();
  if (to_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_account_ = new ::std::string;
  }
  to_account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatLogCmd.to_account)
}
inline ::std::string* ChatLogCmd::mutable_to_account() {
  set_has_to_account();
  if (to_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatLogCmd.to_account)
  return to_account_;
}
inline ::std::string* ChatLogCmd::release_to_account() {
  clear_has_to_account();
  if (to_account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = to_account_;
    to_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatLogCmd::set_allocated_to_account(::std::string* to_account) {
  if (to_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_account_;
  }
  if (to_account) {
    set_has_to_account();
    to_account_ = to_account;
  } else {
    clear_has_to_account();
    to_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatLogCmd.to_account)
}

// optional string to_name = 10;
inline bool ChatLogCmd::has_to_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChatLogCmd::set_has_to_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChatLogCmd::clear_has_to_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChatLogCmd::clear_to_name() {
  if (to_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_name_->clear();
  }
  clear_has_to_name();
}
inline const ::std::string& ChatLogCmd::to_name() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.to_name)
  return *to_name_;
}
inline void ChatLogCmd::set_to_name(const ::std::string& value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.to_name)
}
inline void ChatLogCmd::set_to_name(const char* value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatLogCmd.to_name)
}
inline void ChatLogCmd::set_to_name(const char* value, size_t size) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatLogCmd.to_name)
}
inline ::std::string* ChatLogCmd::mutable_to_name() {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatLogCmd.to_name)
  return to_name_;
}
inline ::std::string* ChatLogCmd::release_to_name() {
  clear_has_to_name();
  if (to_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = to_name_;
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatLogCmd::set_allocated_to_name(::std::string* to_name) {
  if (to_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_name_;
  }
  if (to_name) {
    set_has_to_name();
    to_name_ = to_name;
  } else {
    clear_has_to_name();
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatLogCmd.to_name)
}

// optional uint64 to_pid = 11;
inline bool ChatLogCmd::has_to_pid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChatLogCmd::set_has_to_pid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChatLogCmd::clear_has_to_pid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChatLogCmd::clear_to_pid() {
  to_pid_ = GOOGLE_ULONGLONG(0);
  clear_has_to_pid();
}
inline ::google::protobuf::uint64 ChatLogCmd::to_pid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.to_pid)
  return to_pid_;
}
inline void ChatLogCmd::set_to_pid(::google::protobuf::uint64 value) {
  set_has_to_pid();
  to_pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.to_pid)
}

// optional uint32 type = 12;
inline bool ChatLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChatLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChatLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChatLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ChatLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.type)
  return type_;
}
inline void ChatLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.type)
}

// optional uint32 time = 13;
inline bool ChatLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChatLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChatLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChatLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ChatLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.time)
  return time_;
}
inline void ChatLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.time)
}

// optional uint32 ispay = 14;
inline bool ChatLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChatLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChatLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChatLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 ChatLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.ispay)
  return ispay_;
}
inline void ChatLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.ispay)
}

// optional string content = 15;
inline bool ChatLogCmd::has_content() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChatLogCmd::set_has_content() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChatLogCmd::clear_has_content() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChatLogCmd::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& ChatLogCmd::content() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.content)
  return *content_;
}
inline void ChatLogCmd::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.content)
}
inline void ChatLogCmd::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatLogCmd.content)
}
inline void ChatLogCmd::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatLogCmd.content)
}
inline ::std::string* ChatLogCmd::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatLogCmd.content)
  return content_;
}
inline ::std::string* ChatLogCmd::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatLogCmd::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatLogCmd.content)
}

// optional uint32 vip = 16;
inline bool ChatLogCmd::has_vip() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChatLogCmd::set_has_vip() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChatLogCmd::clear_has_vip() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChatLogCmd::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 ChatLogCmd::vip() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.vip)
  return vip_;
}
inline void ChatLogCmd::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.vip)
}

// optional uint32 level = 17;
inline bool ChatLogCmd::has_level() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChatLogCmd::set_has_level() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChatLogCmd::clear_has_level() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChatLogCmd::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 ChatLogCmd::level() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.level)
  return level_;
}
inline void ChatLogCmd::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.level)
}

// optional uint64 eid = 18;
inline bool ChatLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChatLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChatLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChatLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 ChatLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.eid)
  return eid_;
}
inline void ChatLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.eid)
}

// optional .Cmd.EChatType chattype = 19;
inline bool ChatLogCmd::has_chattype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChatLogCmd::set_has_chattype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChatLogCmd::clear_has_chattype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChatLogCmd::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
inline ::Cmd::EChatType ChatLogCmd::chattype() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.chattype)
  return static_cast< ::Cmd::EChatType >(chattype_);
}
inline void ChatLogCmd::set_chattype(::Cmd::EChatType value) {
  assert(::Cmd::EChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.chattype)
}

// optional uint32 voicelen = 20;
inline bool ChatLogCmd::has_voicelen() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChatLogCmd::set_has_voicelen() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ChatLogCmd::clear_has_voicelen() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ChatLogCmd::clear_voicelen() {
  voicelen_ = 0u;
  clear_has_voicelen();
}
inline ::google::protobuf::uint32 ChatLogCmd::voicelen() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.voicelen)
  return voicelen_;
}
inline void ChatLogCmd::set_voicelen(::google::protobuf::uint32 value) {
  set_has_voicelen();
  voicelen_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.voicelen)
}

// optional string logid = 21;
inline bool ChatLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ChatLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ChatLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ChatLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& ChatLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogCmd.logid)
  return *logid_;
}
inline void ChatLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatLogCmd.logid)
}
inline void ChatLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatLogCmd.logid)
}
inline void ChatLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatLogCmd.logid)
}
inline ::std::string* ChatLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatLogCmd.logid)
  return logid_;
}
inline ::std::string* ChatLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatLogCmd.logid)
}

// -------------------------------------------------------------------

// LevelLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool LevelLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LevelLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LevelLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LevelLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command LevelLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.LevelLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void LevelLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LevelLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = LEVEL_LOG_CMD];
inline bool LevelLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LevelLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LevelLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LevelLogCmd::clear_param() {
  param_ = 13;
  clear_has_param();
}
inline ::Cmd::LogParam LevelLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.LevelLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void LevelLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LevelLogCmd.param)
}

// optional uint32 cid = 3;
inline bool LevelLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LevelLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LevelLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LevelLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 LevelLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.LevelLogCmd.cid)
  return cid_;
}
inline void LevelLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LevelLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool LevelLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LevelLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LevelLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LevelLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 LevelLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.LevelLogCmd.sid)
  return sid_;
}
inline void LevelLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LevelLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool LevelLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LevelLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LevelLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LevelLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 LevelLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.LevelLogCmd.hid)
  return hid_;
}
inline void LevelLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LevelLogCmd.hid)
}

// optional string account = 6;
inline bool LevelLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LevelLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LevelLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LevelLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& LevelLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.LevelLogCmd.account)
  return *account_;
}
inline void LevelLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LevelLogCmd.account)
}
inline void LevelLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LevelLogCmd.account)
}
inline void LevelLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LevelLogCmd.account)
}
inline ::std::string* LevelLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LevelLogCmd.account)
  return account_;
}
inline ::std::string* LevelLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LevelLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LevelLogCmd.account)
}

// optional uint64 pid = 7;
inline bool LevelLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LevelLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LevelLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LevelLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 LevelLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.LevelLogCmd.pid)
  return pid_;
}
inline void LevelLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LevelLogCmd.pid)
}

// optional uint32 time = 8;
inline bool LevelLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LevelLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LevelLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LevelLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 LevelLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.LevelLogCmd.time)
  return time_;
}
inline void LevelLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LevelLogCmd.time)
}

// optional uint32 from = 9;
inline bool LevelLogCmd::has_from() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LevelLogCmd::set_has_from() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LevelLogCmd::clear_has_from() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LevelLogCmd::clear_from() {
  from_ = 0u;
  clear_has_from();
}
inline ::google::protobuf::uint32 LevelLogCmd::from() const {
  // @@protoc_insertion_point(field_get:Cmd.LevelLogCmd.from)
  return from_;
}
inline void LevelLogCmd::set_from(::google::protobuf::uint32 value) {
  set_has_from();
  from_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LevelLogCmd.from)
}

// optional uint32 to = 10;
inline bool LevelLogCmd::has_to() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LevelLogCmd::set_has_to() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LevelLogCmd::clear_has_to() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LevelLogCmd::clear_to() {
  to_ = 0u;
  clear_has_to();
}
inline ::google::protobuf::uint32 LevelLogCmd::to() const {
  // @@protoc_insertion_point(field_get:Cmd.LevelLogCmd.to)
  return to_;
}
inline void LevelLogCmd::set_to(::google::protobuf::uint32 value) {
  set_has_to();
  to_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LevelLogCmd.to)
}

// optional uint32 ispay = 11;
inline bool LevelLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LevelLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LevelLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LevelLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 LevelLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.LevelLogCmd.ispay)
  return ispay_;
}
inline void LevelLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LevelLogCmd.ispay)
}

// optional uint32 type = 12;
inline bool LevelLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LevelLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LevelLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LevelLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 LevelLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.LevelLogCmd.type)
  return type_;
}
inline void LevelLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LevelLogCmd.type)
}

// repeated uint32 mark = 13;
inline int LevelLogCmd::mark_size() const {
  return mark_.size();
}
inline void LevelLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 LevelLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.LevelLogCmd.mark)
  return mark_.Get(index);
}
inline void LevelLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.LevelLogCmd.mark)
}
inline void LevelLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.LevelLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LevelLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.LevelLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LevelLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.LevelLogCmd.mark)
  return &mark_;
}

// optional string logid = 14;
inline bool LevelLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LevelLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LevelLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LevelLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& LevelLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.LevelLogCmd.logid)
  return *logid_;
}
inline void LevelLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LevelLogCmd.logid)
}
inline void LevelLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LevelLogCmd.logid)
}
inline void LevelLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LevelLogCmd.logid)
}
inline ::std::string* LevelLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LevelLogCmd.logid)
  return logid_;
}
inline ::std::string* LevelLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LevelLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LevelLogCmd.logid)
}

// optional uint32 costtime = 15;
inline bool LevelLogCmd::has_costtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LevelLogCmd::set_has_costtime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LevelLogCmd::clear_has_costtime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LevelLogCmd::clear_costtime() {
  costtime_ = 0u;
  clear_has_costtime();
}
inline ::google::protobuf::uint32 LevelLogCmd::costtime() const {
  // @@protoc_insertion_point(field_get:Cmd.LevelLogCmd.costtime)
  return costtime_;
}
inline void LevelLogCmd::set_costtime(::google::protobuf::uint32 value) {
  set_has_costtime();
  costtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LevelLogCmd.costtime)
}

// -------------------------------------------------------------------

// OnlineLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool OnlineLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OnlineLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OnlineLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OnlineLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command OnlineLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.OnlineLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void OnlineLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OnlineLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = ONLINE_LOG_CMD];
inline bool OnlineLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OnlineLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OnlineLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OnlineLogCmd::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::LogParam OnlineLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.OnlineLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void OnlineLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OnlineLogCmd.param)
}

// optional uint32 cid = 3;
inline bool OnlineLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OnlineLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OnlineLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OnlineLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 OnlineLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.OnlineLogCmd.cid)
  return cid_;
}
inline void OnlineLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OnlineLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool OnlineLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OnlineLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OnlineLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OnlineLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 OnlineLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.OnlineLogCmd.sid)
  return sid_;
}
inline void OnlineLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OnlineLogCmd.sid)
}

// optional uint32 time = 5;
inline bool OnlineLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OnlineLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OnlineLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OnlineLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 OnlineLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.OnlineLogCmd.time)
  return time_;
}
inline void OnlineLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OnlineLogCmd.time)
}

// optional uint32 count_all = 6;
inline bool OnlineLogCmd::has_count_all() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OnlineLogCmd::set_has_count_all() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OnlineLogCmd::clear_has_count_all() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OnlineLogCmd::clear_count_all() {
  count_all_ = 0u;
  clear_has_count_all();
}
inline ::google::protobuf::uint32 OnlineLogCmd::count_all() const {
  // @@protoc_insertion_point(field_get:Cmd.OnlineLogCmd.count_all)
  return count_all_;
}
inline void OnlineLogCmd::set_count_all(::google::protobuf::uint32 value) {
  set_has_count_all();
  count_all_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OnlineLogCmd.count_all)
}

// optional uint32 count_web = 7;
inline bool OnlineLogCmd::has_count_web() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OnlineLogCmd::set_has_count_web() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OnlineLogCmd::clear_has_count_web() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OnlineLogCmd::clear_count_web() {
  count_web_ = 0u;
  clear_has_count_web();
}
inline ::google::protobuf::uint32 OnlineLogCmd::count_web() const {
  // @@protoc_insertion_point(field_get:Cmd.OnlineLogCmd.count_web)
  return count_web_;
}
inline void OnlineLogCmd::set_count_web(::google::protobuf::uint32 value) {
  set_has_count_web();
  count_web_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OnlineLogCmd.count_web)
}

// optional uint32 count_client = 8;
inline bool OnlineLogCmd::has_count_client() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OnlineLogCmd::set_has_count_client() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OnlineLogCmd::clear_has_count_client() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OnlineLogCmd::clear_count_client() {
  count_client_ = 0u;
  clear_has_count_client();
}
inline ::google::protobuf::uint32 OnlineLogCmd::count_client() const {
  // @@protoc_insertion_point(field_get:Cmd.OnlineLogCmd.count_client)
  return count_client_;
}
inline void OnlineLogCmd::set_count_client(::google::protobuf::uint32 value) {
  set_has_count_client();
  count_client_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OnlineLogCmd.count_client)
}

// optional uint32 count_ios = 9;
inline bool OnlineLogCmd::has_count_ios() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OnlineLogCmd::set_has_count_ios() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OnlineLogCmd::clear_has_count_ios() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OnlineLogCmd::clear_count_ios() {
  count_ios_ = 0u;
  clear_has_count_ios();
}
inline ::google::protobuf::uint32 OnlineLogCmd::count_ios() const {
  // @@protoc_insertion_point(field_get:Cmd.OnlineLogCmd.count_ios)
  return count_ios_;
}
inline void OnlineLogCmd::set_count_ios(::google::protobuf::uint32 value) {
  set_has_count_ios();
  count_ios_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OnlineLogCmd.count_ios)
}

// optional uint32 count_android = 10;
inline bool OnlineLogCmd::has_count_android() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OnlineLogCmd::set_has_count_android() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OnlineLogCmd::clear_has_count_android() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OnlineLogCmd::clear_count_android() {
  count_android_ = 0u;
  clear_has_count_android();
}
inline ::google::protobuf::uint32 OnlineLogCmd::count_android() const {
  // @@protoc_insertion_point(field_get:Cmd.OnlineLogCmd.count_android)
  return count_android_;
}
inline void OnlineLogCmd::set_count_android(::google::protobuf::uint32 value) {
  set_has_count_android();
  count_android_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OnlineLogCmd.count_android)
}

// optional string logid = 11;
inline bool OnlineLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OnlineLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OnlineLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OnlineLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& OnlineLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.OnlineLogCmd.logid)
  return *logid_;
}
inline void OnlineLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.OnlineLogCmd.logid)
}
inline void OnlineLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.OnlineLogCmd.logid)
}
inline void OnlineLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.OnlineLogCmd.logid)
}
inline ::std::string* OnlineLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.OnlineLogCmd.logid)
  return logid_;
}
inline ::std::string* OnlineLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OnlineLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.OnlineLogCmd.logid)
}

// optional uint32 lineid = 12;
inline bool OnlineLogCmd::has_lineid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OnlineLogCmd::set_has_lineid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OnlineLogCmd::clear_has_lineid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OnlineLogCmd::clear_lineid() {
  lineid_ = 0u;
  clear_has_lineid();
}
inline ::google::protobuf::uint32 OnlineLogCmd::lineid() const {
  // @@protoc_insertion_point(field_get:Cmd.OnlineLogCmd.lineid)
  return lineid_;
}
inline void OnlineLogCmd::set_lineid(::google::protobuf::uint32 value) {
  set_has_lineid();
  lineid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OnlineLogCmd.lineid)
}

// -------------------------------------------------------------------

// SnapshotLogCmd

// -------------------------------------------------------------------

// CheckpointLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool CheckpointLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckpointLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckpointLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckpointLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command CheckpointLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CheckpointLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = CHECKPOINT_LOG_CMD];
inline bool CheckpointLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckpointLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckpointLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckpointLogCmd::clear_param() {
  param_ = 16;
  clear_has_param();
}
inline ::Cmd::LogParam CheckpointLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void CheckpointLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.param)
}

// optional uint32 cid = 3;
inline bool CheckpointLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckpointLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckpointLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckpointLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 CheckpointLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.cid)
  return cid_;
}
inline void CheckpointLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool CheckpointLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckpointLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckpointLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckpointLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 CheckpointLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.sid)
  return sid_;
}
inline void CheckpointLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool CheckpointLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CheckpointLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CheckpointLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CheckpointLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 CheckpointLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.hid)
  return hid_;
}
inline void CheckpointLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.hid)
}

// optional string account = 6;
inline bool CheckpointLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CheckpointLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CheckpointLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CheckpointLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& CheckpointLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.account)
  return *account_;
}
inline void CheckpointLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.account)
}
inline void CheckpointLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CheckpointLogCmd.account)
}
inline void CheckpointLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CheckpointLogCmd.account)
}
inline ::std::string* CheckpointLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CheckpointLogCmd.account)
  return account_;
}
inline ::std::string* CheckpointLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CheckpointLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CheckpointLogCmd.account)
}

// optional uint64 pid = 7;
inline bool CheckpointLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CheckpointLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CheckpointLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CheckpointLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 CheckpointLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.pid)
  return pid_;
}
inline void CheckpointLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.pid)
}

// optional uint64 eid = 8;
inline bool CheckpointLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CheckpointLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CheckpointLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CheckpointLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 CheckpointLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.eid)
  return eid_;
}
inline void CheckpointLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.eid)
}

// optional uint32 time = 9;
inline bool CheckpointLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CheckpointLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CheckpointLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CheckpointLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CheckpointLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.time)
  return time_;
}
inline void CheckpointLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.time)
}

// optional uint32 type = 10;
inline bool CheckpointLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CheckpointLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CheckpointLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CheckpointLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CheckpointLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.type)
  return type_;
}
inline void CheckpointLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.type)
}

// optional uint32 cpid = 11;
inline bool CheckpointLogCmd::has_cpid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CheckpointLogCmd::set_has_cpid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CheckpointLogCmd::clear_has_cpid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CheckpointLogCmd::clear_cpid() {
  cpid_ = 0u;
  clear_has_cpid();
}
inline ::google::protobuf::uint32 CheckpointLogCmd::cpid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.cpid)
  return cpid_;
}
inline void CheckpointLogCmd::set_cpid(::google::protobuf::uint32 value) {
  set_has_cpid();
  cpid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.cpid)
}

// optional uint32 result = 12;
inline bool CheckpointLogCmd::has_result() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CheckpointLogCmd::set_has_result() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CheckpointLogCmd::clear_has_result() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CheckpointLogCmd::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CheckpointLogCmd::result() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.result)
  return result_;
}
inline void CheckpointLogCmd::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.result)
}

// optional uint32 star = 13;
inline bool CheckpointLogCmd::has_star() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CheckpointLogCmd::set_has_star() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CheckpointLogCmd::clear_has_star() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CheckpointLogCmd::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 CheckpointLogCmd::star() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.star)
  return star_;
}
inline void CheckpointLogCmd::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.star)
}

// optional uint32 ispay = 14;
inline bool CheckpointLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CheckpointLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CheckpointLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CheckpointLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 CheckpointLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.ispay)
  return ispay_;
}
inline void CheckpointLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.ispay)
}

// optional uint32 vip = 15;
inline bool CheckpointLogCmd::has_vip() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CheckpointLogCmd::set_has_vip() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CheckpointLogCmd::clear_has_vip() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CheckpointLogCmd::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 CheckpointLogCmd::vip() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.vip)
  return vip_;
}
inline void CheckpointLogCmd::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.vip)
}

// optional string logid = 16;
inline bool CheckpointLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CheckpointLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CheckpointLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CheckpointLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& CheckpointLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.logid)
  return *logid_;
}
inline void CheckpointLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.logid)
}
inline void CheckpointLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CheckpointLogCmd.logid)
}
inline void CheckpointLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CheckpointLogCmd.logid)
}
inline ::std::string* CheckpointLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CheckpointLogCmd.logid)
  return logid_;
}
inline ::std::string* CheckpointLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CheckpointLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CheckpointLogCmd.logid)
}

// optional uint32 isfirst = 17;
inline bool CheckpointLogCmd::has_isfirst() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CheckpointLogCmd::set_has_isfirst() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CheckpointLogCmd::clear_has_isfirst() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CheckpointLogCmd::clear_isfirst() {
  isfirst_ = 0u;
  clear_has_isfirst();
}
inline ::google::protobuf::uint32 CheckpointLogCmd::isfirst() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckpointLogCmd.isfirst)
  return isfirst_;
}
inline void CheckpointLogCmd::set_isfirst(::google::protobuf::uint32 value) {
  set_has_isfirst();
  isfirst_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckpointLogCmd.isfirst)
}

// -------------------------------------------------------------------

// RankLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool RankLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command RankLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RankLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RankLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RankLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = RANK_LOG_CMD];
inline bool RankLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankLogCmd::clear_param() {
  param_ = 17;
  clear_has_param();
}
inline ::Cmd::LogParam RankLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RankLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void RankLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RankLogCmd.param)
}

// optional uint32 cid = 3;
inline bool RankLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 RankLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.RankLogCmd.cid)
  return cid_;
}
inline void RankLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RankLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool RankLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 RankLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.RankLogCmd.sid)
  return sid_;
}
inline void RankLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RankLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool RankLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 RankLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.RankLogCmd.hid)
  return hid_;
}
inline void RankLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RankLogCmd.hid)
}

// optional uint32 type = 6;
inline bool RankLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 RankLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.RankLogCmd.type)
  return type_;
}
inline void RankLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RankLogCmd.type)
}

// optional uint64 pid = 7;
inline bool RankLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RankLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RankLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RankLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 RankLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.RankLogCmd.pid)
  return pid_;
}
inline void RankLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RankLogCmd.pid)
}

// optional uint32 value = 8;
inline bool RankLogCmd::has_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RankLogCmd::set_has_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RankLogCmd::clear_has_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RankLogCmd::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 RankLogCmd::value() const {
  // @@protoc_insertion_point(field_get:Cmd.RankLogCmd.value)
  return value_;
}
inline void RankLogCmd::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RankLogCmd.value)
}

// optional uint32 date = 9;
inline bool RankLogCmd::has_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RankLogCmd::set_has_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RankLogCmd::clear_has_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RankLogCmd::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 RankLogCmd::date() const {
  // @@protoc_insertion_point(field_get:Cmd.RankLogCmd.date)
  return date_;
}
inline void RankLogCmd::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RankLogCmd.date)
}

// optional uint32 time = 10;
inline bool RankLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RankLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RankLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RankLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 RankLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.RankLogCmd.time)
  return time_;
}
inline void RankLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RankLogCmd.time)
}

// optional string logid = 11;
inline bool RankLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RankLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RankLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RankLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& RankLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.RankLogCmd.logid)
  return *logid_;
}
inline void RankLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RankLogCmd.logid)
}
inline void RankLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RankLogCmd.logid)
}
inline void RankLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RankLogCmd.logid)
}
inline ::std::string* RankLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RankLogCmd.logid)
  return logid_;
}
inline ::std::string* RankLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RankLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RankLogCmd.logid)
}

// -------------------------------------------------------------------

// ChatSearchCond

// optional uint64 who = 1;
inline bool ChatSearchCond::has_who() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatSearchCond::set_has_who() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatSearchCond::clear_has_who() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatSearchCond::clear_who() {
  who_ = GOOGLE_ULONGLONG(0);
  clear_has_who();
}
inline ::google::protobuf::uint64 ChatSearchCond::who() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatSearchCond.who)
  return who_;
}
inline void ChatSearchCond::set_who(::google::protobuf::uint64 value) {
  set_has_who();
  who_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatSearchCond.who)
}

// optional uint32 fromtime = 2;
inline bool ChatSearchCond::has_fromtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatSearchCond::set_has_fromtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatSearchCond::clear_has_fromtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatSearchCond::clear_fromtime() {
  fromtime_ = 0u;
  clear_has_fromtime();
}
inline ::google::protobuf::uint32 ChatSearchCond::fromtime() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatSearchCond.fromtime)
  return fromtime_;
}
inline void ChatSearchCond::set_fromtime(::google::protobuf::uint32 value) {
  set_has_fromtime();
  fromtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatSearchCond.fromtime)
}

// optional uint32 totime = 3;
inline bool ChatSearchCond::has_totime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatSearchCond::set_has_totime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatSearchCond::clear_has_totime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatSearchCond::clear_totime() {
  totime_ = 0u;
  clear_has_totime();
}
inline ::google::protobuf::uint32 ChatSearchCond::totime() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatSearchCond.totime)
  return totime_;
}
inline void ChatSearchCond::set_totime(::google::protobuf::uint32 value) {
  set_has_totime();
  totime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatSearchCond.totime)
}

// optional .Cmd.EChatType chattype = 4;
inline bool ChatSearchCond::has_chattype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatSearchCond::set_has_chattype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatSearchCond::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatSearchCond::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
inline ::Cmd::EChatType ChatSearchCond::chattype() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatSearchCond.chattype)
  return static_cast< ::Cmd::EChatType >(chattype_);
}
inline void ChatSearchCond::set_chattype(::Cmd::EChatType value) {
  assert(::Cmd::EChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatSearchCond.chattype)
}

// -------------------------------------------------------------------

// ChatLogRes

// optional uint64 sendid = 1;
inline bool ChatLogRes::has_sendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatLogRes::set_has_sendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatLogRes::clear_has_sendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatLogRes::clear_sendid() {
  sendid_ = GOOGLE_ULONGLONG(0);
  clear_has_sendid();
}
inline ::google::protobuf::uint64 ChatLogRes::sendid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogRes.sendid)
  return sendid_;
}
inline void ChatLogRes::set_sendid(::google::protobuf::uint64 value) {
  set_has_sendid();
  sendid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogRes.sendid)
}

// optional string sendname = 2;
inline bool ChatLogRes::has_sendname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatLogRes::set_has_sendname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatLogRes::clear_has_sendname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatLogRes::clear_sendname() {
  if (sendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendname_->clear();
  }
  clear_has_sendname();
}
inline const ::std::string& ChatLogRes::sendname() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogRes.sendname)
  return *sendname_;
}
inline void ChatLogRes::set_sendname(const ::std::string& value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatLogRes.sendname)
}
inline void ChatLogRes::set_sendname(const char* value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatLogRes.sendname)
}
inline void ChatLogRes::set_sendname(const char* value, size_t size) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatLogRes.sendname)
}
inline ::std::string* ChatLogRes::mutable_sendname() {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatLogRes.sendname)
  return sendname_;
}
inline ::std::string* ChatLogRes::release_sendname() {
  clear_has_sendname();
  if (sendname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sendname_;
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatLogRes::set_allocated_sendname(::std::string* sendname) {
  if (sendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendname_;
  }
  if (sendname) {
    set_has_sendname();
    sendname_ = sendname;
  } else {
    clear_has_sendname();
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatLogRes.sendname)
}

// optional uint64 recvid = 3;
inline bool ChatLogRes::has_recvid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatLogRes::set_has_recvid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatLogRes::clear_has_recvid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatLogRes::clear_recvid() {
  recvid_ = GOOGLE_ULONGLONG(0);
  clear_has_recvid();
}
inline ::google::protobuf::uint64 ChatLogRes::recvid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogRes.recvid)
  return recvid_;
}
inline void ChatLogRes::set_recvid(::google::protobuf::uint64 value) {
  set_has_recvid();
  recvid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogRes.recvid)
}

// optional string recvname = 4;
inline bool ChatLogRes::has_recvname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatLogRes::set_has_recvname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatLogRes::clear_has_recvname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatLogRes::clear_recvname() {
  if (recvname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvname_->clear();
  }
  clear_has_recvname();
}
inline const ::std::string& ChatLogRes::recvname() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogRes.recvname)
  return *recvname_;
}
inline void ChatLogRes::set_recvname(const ::std::string& value) {
  set_has_recvname();
  if (recvname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvname_ = new ::std::string;
  }
  recvname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatLogRes.recvname)
}
inline void ChatLogRes::set_recvname(const char* value) {
  set_has_recvname();
  if (recvname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvname_ = new ::std::string;
  }
  recvname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatLogRes.recvname)
}
inline void ChatLogRes::set_recvname(const char* value, size_t size) {
  set_has_recvname();
  if (recvname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvname_ = new ::std::string;
  }
  recvname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatLogRes.recvname)
}
inline ::std::string* ChatLogRes::mutable_recvname() {
  set_has_recvname();
  if (recvname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatLogRes.recvname)
  return recvname_;
}
inline ::std::string* ChatLogRes::release_recvname() {
  clear_has_recvname();
  if (recvname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = recvname_;
    recvname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatLogRes::set_allocated_recvname(::std::string* recvname) {
  if (recvname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recvname_;
  }
  if (recvname) {
    set_has_recvname();
    recvname_ = recvname;
  } else {
    clear_has_recvname();
    recvname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatLogRes.recvname)
}

// optional uint32 createtime = 5;
inline bool ChatLogRes::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatLogRes::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatLogRes::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatLogRes::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 ChatLogRes::createtime() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogRes.createtime)
  return createtime_;
}
inline void ChatLogRes::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogRes.createtime)
}

// optional string content = 6;
inline bool ChatLogRes::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatLogRes::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatLogRes::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatLogRes::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& ChatLogRes::content() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogRes.content)
  return *content_;
}
inline void ChatLogRes::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatLogRes.content)
}
inline void ChatLogRes::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatLogRes.content)
}
inline void ChatLogRes::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatLogRes.content)
}
inline ::std::string* ChatLogRes::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatLogRes.content)
  return content_;
}
inline ::std::string* ChatLogRes::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatLogRes::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatLogRes.content)
}

// optional uint32 voicelen = 7;
inline bool ChatLogRes::has_voicelen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatLogRes::set_has_voicelen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatLogRes::clear_has_voicelen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatLogRes::clear_voicelen() {
  voicelen_ = 0u;
  clear_has_voicelen();
}
inline ::google::protobuf::uint32 ChatLogRes::voicelen() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatLogRes.voicelen)
  return voicelen_;
}
inline void ChatLogRes::set_voicelen(::google::protobuf::uint32 value) {
  set_has_voicelen();
  voicelen_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatLogRes.voicelen)
}

// -------------------------------------------------------------------

// QueryChatLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool QueryChatLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryChatLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryChatLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryChatLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command QueryChatLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryChatLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryChatLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryChatLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = QUERY_CHAT_LOG_CMD];
inline bool QueryChatLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryChatLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryChatLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryChatLogCmd::clear_param() {
  param_ = 18;
  clear_has_param();
}
inline ::Cmd::LogParam QueryChatLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryChatLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void QueryChatLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryChatLogCmd.param)
}

// optional .Cmd.ChatSearchCond cond = 3;
inline bool QueryChatLogCmd::has_cond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryChatLogCmd::set_has_cond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryChatLogCmd::clear_has_cond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryChatLogCmd::clear_cond() {
  if (cond_ != NULL) cond_->::Cmd::ChatSearchCond::Clear();
  clear_has_cond();
}
inline const ::Cmd::ChatSearchCond& QueryChatLogCmd::cond() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryChatLogCmd.cond)
  return cond_ != NULL ? *cond_ : *default_instance_->cond_;
}
inline ::Cmd::ChatSearchCond* QueryChatLogCmd::mutable_cond() {
  set_has_cond();
  if (cond_ == NULL) cond_ = new ::Cmd::ChatSearchCond;
  // @@protoc_insertion_point(field_mutable:Cmd.QueryChatLogCmd.cond)
  return cond_;
}
inline ::Cmd::ChatSearchCond* QueryChatLogCmd::release_cond() {
  clear_has_cond();
  ::Cmd::ChatSearchCond* temp = cond_;
  cond_ = NULL;
  return temp;
}
inline void QueryChatLogCmd::set_allocated_cond(::Cmd::ChatSearchCond* cond) {
  delete cond_;
  cond_ = cond;
  if (cond) {
    set_has_cond();
  } else {
    clear_has_cond();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryChatLogCmd.cond)
}

// repeated .Cmd.ChatLogRes res = 4;
inline int QueryChatLogCmd::res_size() const {
  return res_.size();
}
inline void QueryChatLogCmd::clear_res() {
  res_.Clear();
}
inline const ::Cmd::ChatLogRes& QueryChatLogCmd::res(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryChatLogCmd.res)
  return res_.Get(index);
}
inline ::Cmd::ChatLogRes* QueryChatLogCmd::mutable_res(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryChatLogCmd.res)
  return res_.Mutable(index);
}
inline ::Cmd::ChatLogRes* QueryChatLogCmd::add_res() {
  // @@protoc_insertion_point(field_add:Cmd.QueryChatLogCmd.res)
  return res_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ChatLogRes >&
QueryChatLogCmd::res() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryChatLogCmd.res)
  return res_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ChatLogRes >*
QueryChatLogCmd::mutable_res() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryChatLogCmd.res)
  return &res_;
}

// -------------------------------------------------------------------

// ChangeLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool ChangeLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command ChangeLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ChangeLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = CHANGE_LOG_CMD];
inline bool ChangeLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeLogCmd::clear_param() {
  param_ = 39;
  clear_has_param();
}
inline ::Cmd::LogParam ChangeLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void ChangeLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.param)
}

// optional uint32 cid = 3;
inline bool ChangeLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 ChangeLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.cid)
  return cid_;
}
inline void ChangeLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool ChangeLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChangeLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChangeLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChangeLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 ChangeLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.sid)
  return sid_;
}
inline void ChangeLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool ChangeLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChangeLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChangeLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChangeLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 ChangeLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.hid)
  return hid_;
}
inline void ChangeLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.hid)
}

// optional string account = 6;
inline bool ChangeLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChangeLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChangeLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChangeLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& ChangeLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.account)
  return *account_;
}
inline void ChangeLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.account)
}
inline void ChangeLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChangeLogCmd.account)
}
inline void ChangeLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChangeLogCmd.account)
}
inline ::std::string* ChangeLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChangeLogCmd.account)
  return account_;
}
inline ::std::string* ChangeLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChangeLogCmd.account)
}

// optional uint64 pid = 7;
inline bool ChangeLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChangeLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChangeLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChangeLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 ChangeLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.pid)
  return pid_;
}
inline void ChangeLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool ChangeLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChangeLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChangeLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChangeLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 ChangeLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.ispay)
  return ispay_;
}
inline void ChangeLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool ChangeLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChangeLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChangeLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChangeLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ChangeLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.time)
  return time_;
}
inline void ChangeLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.time)
}

// optional uint64 eid = 10;
inline bool ChangeLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChangeLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChangeLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChangeLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 ChangeLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.eid)
  return eid_;
}
inline void ChangeLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool ChangeLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChangeLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChangeLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChangeLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 ChangeLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.etype)
  return etype_;
}
inline void ChangeLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.etype)
}

// optional uint32 flag = 12;
inline bool ChangeLogCmd::has_flag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChangeLogCmd::set_has_flag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChangeLogCmd::clear_has_flag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChangeLogCmd::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 ChangeLogCmd::flag() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.flag)
  return flag_;
}
inline void ChangeLogCmd::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.flag)
}

// optional string from = 13;
inline bool ChangeLogCmd::has_from() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChangeLogCmd::set_has_from() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChangeLogCmd::clear_has_from() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChangeLogCmd::clear_from() {
  if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& ChangeLogCmd::from() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.from)
  return *from_;
}
inline void ChangeLogCmd::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  from_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.from)
}
inline void ChangeLogCmd::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  from_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChangeLogCmd.from)
}
inline void ChangeLogCmd::set_from(const char* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChangeLogCmd.from)
}
inline ::std::string* ChangeLogCmd::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChangeLogCmd.from)
  return from_;
}
inline ::std::string* ChangeLogCmd::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeLogCmd::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChangeLogCmd.from)
}

// optional string to = 14;
inline bool ChangeLogCmd::has_to() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChangeLogCmd::set_has_to() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChangeLogCmd::clear_has_to() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChangeLogCmd::clear_to() {
  if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& ChangeLogCmd::to() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.to)
  return *to_;
}
inline void ChangeLogCmd::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  to_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.to)
}
inline void ChangeLogCmd::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  to_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChangeLogCmd.to)
}
inline void ChangeLogCmd::set_to(const char* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChangeLogCmd.to)
}
inline ::std::string* ChangeLogCmd::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChangeLogCmd.to)
  return to_;
}
inline ::std::string* ChangeLogCmd::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeLogCmd::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChangeLogCmd.to)
}

// optional uint64 param1 = 15;
inline bool ChangeLogCmd::has_param1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChangeLogCmd::set_has_param1() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChangeLogCmd::clear_has_param1() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChangeLogCmd::clear_param1() {
  param1_ = GOOGLE_ULONGLONG(0);
  clear_has_param1();
}
inline ::google::protobuf::uint64 ChangeLogCmd::param1() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.param1)
  return param1_;
}
inline void ChangeLogCmd::set_param1(::google::protobuf::uint64 value) {
  set_has_param1();
  param1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.param1)
}

// repeated uint32 mark = 16;
inline int ChangeLogCmd::mark_size() const {
  return mark_.size();
}
inline void ChangeLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 ChangeLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.mark)
  return mark_.Get(index);
}
inline void ChangeLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.mark)
}
inline void ChangeLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.ChangeLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChangeLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.ChangeLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChangeLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ChangeLogCmd.mark)
  return &mark_;
}

// optional string logid = 17;
inline bool ChangeLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChangeLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChangeLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChangeLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& ChangeLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeLogCmd.logid)
  return *logid_;
}
inline void ChangeLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChangeLogCmd.logid)
}
inline void ChangeLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChangeLogCmd.logid)
}
inline void ChangeLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChangeLogCmd.logid)
}
inline ::std::string* ChangeLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChangeLogCmd.logid)
  return logid_;
}
inline ::std::string* ChangeLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChangeLogCmd.logid)
}

// -------------------------------------------------------------------

// EquipLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool EquipLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command EquipLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EquipLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = EQUIP_LOG_CMD];
inline bool EquipLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipLogCmd::clear_param() {
  param_ = 31;
  clear_has_param();
}
inline ::Cmd::LogParam EquipLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void EquipLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.param)
}

// optional uint32 cid = 3;
inline bool EquipLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 EquipLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.cid)
  return cid_;
}
inline void EquipLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool EquipLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 EquipLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.sid)
  return sid_;
}
inline void EquipLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool EquipLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 EquipLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.hid)
  return hid_;
}
inline void EquipLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.hid)
}

// optional string account = 6;
inline bool EquipLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& EquipLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.account)
  return *account_;
}
inline void EquipLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.account)
}
inline void EquipLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipLogCmd.account)
}
inline void EquipLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipLogCmd.account)
}
inline ::std::string* EquipLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipLogCmd.account)
  return account_;
}
inline ::std::string* EquipLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipLogCmd.account)
}

// optional uint64 pid = 7;
inline bool EquipLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 EquipLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.pid)
  return pid_;
}
inline void EquipLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool EquipLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EquipLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EquipLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EquipLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 EquipLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.ispay)
  return ispay_;
}
inline void EquipLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool EquipLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 EquipLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.time)
  return time_;
}
inline void EquipLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.time)
}

// optional uint64 eid = 10;
inline bool EquipLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EquipLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EquipLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EquipLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 EquipLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.eid)
  return eid_;
}
inline void EquipLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool EquipLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EquipLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EquipLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EquipLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 EquipLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.etype)
  return etype_;
}
inline void EquipLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.etype)
}

// optional uint32 type = 12;
inline bool EquipLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EquipLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EquipLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EquipLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 EquipLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.type)
  return type_;
}
inline void EquipLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.type)
}

// optional uint32 old_equipid = 13;
inline bool EquipLogCmd::has_old_equipid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EquipLogCmd::set_has_old_equipid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EquipLogCmd::clear_has_old_equipid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EquipLogCmd::clear_old_equipid() {
  old_equipid_ = 0u;
  clear_has_old_equipid();
}
inline ::google::protobuf::uint32 EquipLogCmd::old_equipid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.old_equipid)
  return old_equipid_;
}
inline void EquipLogCmd::set_old_equipid(::google::protobuf::uint32 value) {
  set_has_old_equipid();
  old_equipid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.old_equipid)
}

// optional string old_equipgid = 14;
inline bool EquipLogCmd::has_old_equipgid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EquipLogCmd::set_has_old_equipgid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EquipLogCmd::clear_has_old_equipgid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EquipLogCmd::clear_old_equipgid() {
  if (old_equipgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_equipgid_->clear();
  }
  clear_has_old_equipgid();
}
inline const ::std::string& EquipLogCmd::old_equipgid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.old_equipgid)
  return *old_equipgid_;
}
inline void EquipLogCmd::set_old_equipgid(const ::std::string& value) {
  set_has_old_equipgid();
  if (old_equipgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_equipgid_ = new ::std::string;
  }
  old_equipgid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.old_equipgid)
}
inline void EquipLogCmd::set_old_equipgid(const char* value) {
  set_has_old_equipgid();
  if (old_equipgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_equipgid_ = new ::std::string;
  }
  old_equipgid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipLogCmd.old_equipgid)
}
inline void EquipLogCmd::set_old_equipgid(const char* value, size_t size) {
  set_has_old_equipgid();
  if (old_equipgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_equipgid_ = new ::std::string;
  }
  old_equipgid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipLogCmd.old_equipgid)
}
inline ::std::string* EquipLogCmd::mutable_old_equipgid() {
  set_has_old_equipgid();
  if (old_equipgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_equipgid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipLogCmd.old_equipgid)
  return old_equipgid_;
}
inline ::std::string* EquipLogCmd::release_old_equipgid() {
  clear_has_old_equipgid();
  if (old_equipgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = old_equipgid_;
    old_equipgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipLogCmd::set_allocated_old_equipgid(::std::string* old_equipgid) {
  if (old_equipgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete old_equipgid_;
  }
  if (old_equipgid) {
    set_has_old_equipgid();
    old_equipgid_ = old_equipgid;
  } else {
    clear_has_old_equipgid();
    old_equipgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipLogCmd.old_equipgid)
}

// optional uint32 old_strengthlv = 15;
inline bool EquipLogCmd::has_old_strengthlv() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EquipLogCmd::set_has_old_strengthlv() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EquipLogCmd::clear_has_old_strengthlv() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EquipLogCmd::clear_old_strengthlv() {
  old_strengthlv_ = 0u;
  clear_has_old_strengthlv();
}
inline ::google::protobuf::uint32 EquipLogCmd::old_strengthlv() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.old_strengthlv)
  return old_strengthlv_;
}
inline void EquipLogCmd::set_old_strengthlv(::google::protobuf::uint32 value) {
  set_has_old_strengthlv();
  old_strengthlv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.old_strengthlv)
}

// optional uint32 old_refinelv = 16;
inline bool EquipLogCmd::has_old_refinelv() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EquipLogCmd::set_has_old_refinelv() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EquipLogCmd::clear_has_old_refinelv() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EquipLogCmd::clear_old_refinelv() {
  old_refinelv_ = 0u;
  clear_has_old_refinelv();
}
inline ::google::protobuf::uint32 EquipLogCmd::old_refinelv() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.old_refinelv)
  return old_refinelv_;
}
inline void EquipLogCmd::set_old_refinelv(::google::protobuf::uint32 value) {
  set_has_old_refinelv();
  old_refinelv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.old_refinelv)
}

// optional int32 old_isdamage = 17;
inline bool EquipLogCmd::has_old_isdamage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void EquipLogCmd::set_has_old_isdamage() {
  _has_bits_[0] |= 0x00010000u;
}
inline void EquipLogCmd::clear_has_old_isdamage() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void EquipLogCmd::clear_old_isdamage() {
  old_isdamage_ = 0;
  clear_has_old_isdamage();
}
inline ::google::protobuf::int32 EquipLogCmd::old_isdamage() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.old_isdamage)
  return old_isdamage_;
}
inline void EquipLogCmd::set_old_isdamage(::google::protobuf::int32 value) {
  set_has_old_isdamage();
  old_isdamage_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.old_isdamage)
}

// optional uint32 new_equipid = 18;
inline bool EquipLogCmd::has_new_equipid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void EquipLogCmd::set_has_new_equipid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void EquipLogCmd::clear_has_new_equipid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void EquipLogCmd::clear_new_equipid() {
  new_equipid_ = 0u;
  clear_has_new_equipid();
}
inline ::google::protobuf::uint32 EquipLogCmd::new_equipid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.new_equipid)
  return new_equipid_;
}
inline void EquipLogCmd::set_new_equipid(::google::protobuf::uint32 value) {
  set_has_new_equipid();
  new_equipid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.new_equipid)
}

// optional string new_equipgid = 19;
inline bool EquipLogCmd::has_new_equipgid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void EquipLogCmd::set_has_new_equipgid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void EquipLogCmd::clear_has_new_equipgid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void EquipLogCmd::clear_new_equipgid() {
  if (new_equipgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_equipgid_->clear();
  }
  clear_has_new_equipgid();
}
inline const ::std::string& EquipLogCmd::new_equipgid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.new_equipgid)
  return *new_equipgid_;
}
inline void EquipLogCmd::set_new_equipgid(const ::std::string& value) {
  set_has_new_equipgid();
  if (new_equipgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_equipgid_ = new ::std::string;
  }
  new_equipgid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.new_equipgid)
}
inline void EquipLogCmd::set_new_equipgid(const char* value) {
  set_has_new_equipgid();
  if (new_equipgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_equipgid_ = new ::std::string;
  }
  new_equipgid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipLogCmd.new_equipgid)
}
inline void EquipLogCmd::set_new_equipgid(const char* value, size_t size) {
  set_has_new_equipgid();
  if (new_equipgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_equipgid_ = new ::std::string;
  }
  new_equipgid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipLogCmd.new_equipgid)
}
inline ::std::string* EquipLogCmd::mutable_new_equipgid() {
  set_has_new_equipgid();
  if (new_equipgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_equipgid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipLogCmd.new_equipgid)
  return new_equipgid_;
}
inline ::std::string* EquipLogCmd::release_new_equipgid() {
  clear_has_new_equipgid();
  if (new_equipgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = new_equipgid_;
    new_equipgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipLogCmd::set_allocated_new_equipgid(::std::string* new_equipgid) {
  if (new_equipgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_equipgid_;
  }
  if (new_equipgid) {
    set_has_new_equipgid();
    new_equipgid_ = new_equipgid;
  } else {
    clear_has_new_equipgid();
    new_equipgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipLogCmd.new_equipgid)
}

// optional uint32 new_strengthlv = 20;
inline bool EquipLogCmd::has_new_strengthlv() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void EquipLogCmd::set_has_new_strengthlv() {
  _has_bits_[0] |= 0x00080000u;
}
inline void EquipLogCmd::clear_has_new_strengthlv() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void EquipLogCmd::clear_new_strengthlv() {
  new_strengthlv_ = 0u;
  clear_has_new_strengthlv();
}
inline ::google::protobuf::uint32 EquipLogCmd::new_strengthlv() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.new_strengthlv)
  return new_strengthlv_;
}
inline void EquipLogCmd::set_new_strengthlv(::google::protobuf::uint32 value) {
  set_has_new_strengthlv();
  new_strengthlv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.new_strengthlv)
}

// optional uint32 new_refinelv = 21;
inline bool EquipLogCmd::has_new_refinelv() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void EquipLogCmd::set_has_new_refinelv() {
  _has_bits_[0] |= 0x00100000u;
}
inline void EquipLogCmd::clear_has_new_refinelv() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void EquipLogCmd::clear_new_refinelv() {
  new_refinelv_ = 0u;
  clear_has_new_refinelv();
}
inline ::google::protobuf::uint32 EquipLogCmd::new_refinelv() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.new_refinelv)
  return new_refinelv_;
}
inline void EquipLogCmd::set_new_refinelv(::google::protobuf::uint32 value) {
  set_has_new_refinelv();
  new_refinelv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.new_refinelv)
}

// optional int32 new_isdamage = 22;
inline bool EquipLogCmd::has_new_isdamage() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void EquipLogCmd::set_has_new_isdamage() {
  _has_bits_[0] |= 0x00200000u;
}
inline void EquipLogCmd::clear_has_new_isdamage() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void EquipLogCmd::clear_new_isdamage() {
  new_isdamage_ = 0;
  clear_has_new_isdamage();
}
inline ::google::protobuf::int32 EquipLogCmd::new_isdamage() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.new_isdamage)
  return new_isdamage_;
}
inline void EquipLogCmd::set_new_isdamage(::google::protobuf::int32 value) {
  set_has_new_isdamage();
  new_isdamage_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.new_isdamage)
}

// repeated uint32 mark = 23;
inline int EquipLogCmd::mark_size() const {
  return mark_.size();
}
inline void EquipLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 EquipLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.mark)
  return mark_.Get(index);
}
inline void EquipLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.mark)
}
inline void EquipLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.EquipLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
EquipLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.EquipLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
EquipLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EquipLogCmd.mark)
  return &mark_;
}

// optional string logid = 24;
inline bool EquipLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void EquipLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void EquipLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void EquipLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& EquipLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipLogCmd.logid)
  return *logid_;
}
inline void EquipLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipLogCmd.logid)
}
inline void EquipLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipLogCmd.logid)
}
inline void EquipLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipLogCmd.logid)
}
inline ::std::string* EquipLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipLogCmd.logid)
  return logid_;
}
inline ::std::string* EquipLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipLogCmd.logid)
}

// -------------------------------------------------------------------

// CardLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool CardLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command CardLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CardLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = CARD_LOG_CMD];
inline bool CardLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CardLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CardLogCmd::clear_param() {
  param_ = 30;
  clear_has_param();
}
inline ::Cmd::LogParam CardLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void CardLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.param)
}

// optional uint32 cid = 3;
inline bool CardLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CardLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CardLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CardLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 CardLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.cid)
  return cid_;
}
inline void CardLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool CardLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CardLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CardLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CardLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 CardLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.sid)
  return sid_;
}
inline void CardLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool CardLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CardLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CardLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CardLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 CardLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.hid)
  return hid_;
}
inline void CardLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.hid)
}

// optional string account = 6;
inline bool CardLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CardLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CardLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CardLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& CardLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.account)
  return *account_;
}
inline void CardLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.account)
}
inline void CardLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CardLogCmd.account)
}
inline void CardLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CardLogCmd.account)
}
inline ::std::string* CardLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CardLogCmd.account)
  return account_;
}
inline ::std::string* CardLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CardLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CardLogCmd.account)
}

// optional uint64 pid = 7;
inline bool CardLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CardLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CardLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CardLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 CardLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.pid)
  return pid_;
}
inline void CardLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool CardLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CardLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CardLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CardLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 CardLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.ispay)
  return ispay_;
}
inline void CardLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool CardLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CardLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CardLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CardLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CardLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.time)
  return time_;
}
inline void CardLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.time)
}

// optional uint64 eid = 10;
inline bool CardLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CardLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CardLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CardLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 CardLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.eid)
  return eid_;
}
inline void CardLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool CardLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CardLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CardLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CardLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 CardLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.etype)
  return etype_;
}
inline void CardLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.etype)
}

// optional uint32 equipid = 13;
inline bool CardLogCmd::has_equipid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CardLogCmd::set_has_equipid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CardLogCmd::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CardLogCmd::clear_equipid() {
  equipid_ = 0u;
  clear_has_equipid();
}
inline ::google::protobuf::uint32 CardLogCmd::equipid() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.equipid)
  return equipid_;
}
inline void CardLogCmd::set_equipid(::google::protobuf::uint32 value) {
  set_has_equipid();
  equipid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.equipid)
}

// optional string equipgid = 14;
inline bool CardLogCmd::has_equipgid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CardLogCmd::set_has_equipgid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CardLogCmd::clear_has_equipgid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CardLogCmd::clear_equipgid() {
  if (equipgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipgid_->clear();
  }
  clear_has_equipgid();
}
inline const ::std::string& CardLogCmd::equipgid() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.equipgid)
  return *equipgid_;
}
inline void CardLogCmd::set_equipgid(const ::std::string& value) {
  set_has_equipgid();
  if (equipgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipgid_ = new ::std::string;
  }
  equipgid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.equipgid)
}
inline void CardLogCmd::set_equipgid(const char* value) {
  set_has_equipgid();
  if (equipgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipgid_ = new ::std::string;
  }
  equipgid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CardLogCmd.equipgid)
}
inline void CardLogCmd::set_equipgid(const char* value, size_t size) {
  set_has_equipgid();
  if (equipgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipgid_ = new ::std::string;
  }
  equipgid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CardLogCmd.equipgid)
}
inline ::std::string* CardLogCmd::mutable_equipgid() {
  set_has_equipgid();
  if (equipgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipgid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CardLogCmd.equipgid)
  return equipgid_;
}
inline ::std::string* CardLogCmd::release_equipgid() {
  clear_has_equipgid();
  if (equipgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = equipgid_;
    equipgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CardLogCmd::set_allocated_equipgid(::std::string* equipgid) {
  if (equipgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete equipgid_;
  }
  if (equipgid) {
    set_has_equipgid();
    equipgid_ = equipgid;
  } else {
    clear_has_equipgid();
    equipgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CardLogCmd.equipgid)
}

// optional uint32 type = 15;
inline bool CardLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CardLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CardLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CardLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CardLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.type)
  return type_;
}
inline void CardLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.type)
}

// optional uint32 cardid = 16;
inline bool CardLogCmd::has_cardid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CardLogCmd::set_has_cardid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CardLogCmd::clear_has_cardid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CardLogCmd::clear_cardid() {
  cardid_ = 0u;
  clear_has_cardid();
}
inline ::google::protobuf::uint32 CardLogCmd::cardid() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.cardid)
  return cardid_;
}
inline void CardLogCmd::set_cardid(::google::protobuf::uint32 value) {
  set_has_cardid();
  cardid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.cardid)
}

// optional string cardgid = 17;
inline bool CardLogCmd::has_cardgid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CardLogCmd::set_has_cardgid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CardLogCmd::clear_has_cardgid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CardLogCmd::clear_cardgid() {
  if (cardgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cardgid_->clear();
  }
  clear_has_cardgid();
}
inline const ::std::string& CardLogCmd::cardgid() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.cardgid)
  return *cardgid_;
}
inline void CardLogCmd::set_cardgid(const ::std::string& value) {
  set_has_cardgid();
  if (cardgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cardgid_ = new ::std::string;
  }
  cardgid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.cardgid)
}
inline void CardLogCmd::set_cardgid(const char* value) {
  set_has_cardgid();
  if (cardgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cardgid_ = new ::std::string;
  }
  cardgid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CardLogCmd.cardgid)
}
inline void CardLogCmd::set_cardgid(const char* value, size_t size) {
  set_has_cardgid();
  if (cardgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cardgid_ = new ::std::string;
  }
  cardgid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CardLogCmd.cardgid)
}
inline ::std::string* CardLogCmd::mutable_cardgid() {
  set_has_cardgid();
  if (cardgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cardgid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CardLogCmd.cardgid)
  return cardgid_;
}
inline ::std::string* CardLogCmd::release_cardgid() {
  clear_has_cardgid();
  if (cardgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cardgid_;
    cardgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CardLogCmd::set_allocated_cardgid(::std::string* cardgid) {
  if (cardgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cardgid_;
  }
  if (cardgid) {
    set_has_cardgid();
    cardgid_ = cardgid;
  } else {
    clear_has_cardgid();
    cardgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CardLogCmd.cardgid)
}

// optional uint32 useslot = 18;
inline bool CardLogCmd::has_useslot() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CardLogCmd::set_has_useslot() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CardLogCmd::clear_has_useslot() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CardLogCmd::clear_useslot() {
  useslot_ = 0u;
  clear_has_useslot();
}
inline ::google::protobuf::uint32 CardLogCmd::useslot() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.useslot)
  return useslot_;
}
inline void CardLogCmd::set_useslot(::google::protobuf::uint32 value) {
  set_has_useslot();
  useslot_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.useslot)
}

// optional uint32 maxslot = 19;
inline bool CardLogCmd::has_maxslot() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CardLogCmd::set_has_maxslot() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CardLogCmd::clear_has_maxslot() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CardLogCmd::clear_maxslot() {
  maxslot_ = 0u;
  clear_has_maxslot();
}
inline ::google::protobuf::uint32 CardLogCmd::maxslot() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.maxslot)
  return maxslot_;
}
inline void CardLogCmd::set_maxslot(::google::protobuf::uint32 value) {
  set_has_maxslot();
  maxslot_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.maxslot)
}

// repeated uint32 mark = 20;
inline int CardLogCmd::mark_size() const {
  return mark_.size();
}
inline void CardLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 CardLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.mark)
  return mark_.Get(index);
}
inline void CardLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.mark)
}
inline void CardLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.CardLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CardLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.CardLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CardLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.CardLogCmd.mark)
  return &mark_;
}

// optional string logid = 21;
inline bool CardLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CardLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CardLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CardLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& CardLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.CardLogCmd.logid)
  return *logid_;
}
inline void CardLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CardLogCmd.logid)
}
inline void CardLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CardLogCmd.logid)
}
inline void CardLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CardLogCmd.logid)
}
inline ::std::string* CardLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CardLogCmd.logid)
  return logid_;
}
inline ::std::string* CardLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CardLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CardLogCmd.logid)
}

// -------------------------------------------------------------------

// EquipUpLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool EquipUpLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipUpLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipUpLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipUpLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command EquipUpLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EquipUpLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = EQUIPUP_LOG_CMD];
inline bool EquipUpLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipUpLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipUpLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipUpLogCmd::clear_param() {
  param_ = 41;
  clear_has_param();
}
inline ::Cmd::LogParam EquipUpLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void EquipUpLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.param)
}

// optional uint32 cid = 3;
inline bool EquipUpLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipUpLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipUpLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipUpLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 EquipUpLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.cid)
  return cid_;
}
inline void EquipUpLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool EquipUpLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipUpLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipUpLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipUpLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 EquipUpLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.sid)
  return sid_;
}
inline void EquipUpLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool EquipUpLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipUpLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipUpLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipUpLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 EquipUpLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.hid)
  return hid_;
}
inline void EquipUpLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.hid)
}

// optional string account = 6;
inline bool EquipUpLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipUpLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipUpLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipUpLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& EquipUpLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.account)
  return *account_;
}
inline void EquipUpLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.account)
}
inline void EquipUpLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipUpLogCmd.account)
}
inline void EquipUpLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipUpLogCmd.account)
}
inline ::std::string* EquipUpLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipUpLogCmd.account)
  return account_;
}
inline ::std::string* EquipUpLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipUpLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipUpLogCmd.account)
}

// optional uint64 pid = 7;
inline bool EquipUpLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipUpLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipUpLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipUpLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 EquipUpLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.pid)
  return pid_;
}
inline void EquipUpLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool EquipUpLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EquipUpLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EquipUpLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EquipUpLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 EquipUpLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.ispay)
  return ispay_;
}
inline void EquipUpLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool EquipUpLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipUpLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipUpLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipUpLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 EquipUpLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.time)
  return time_;
}
inline void EquipUpLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.time)
}

// optional uint64 eid = 10;
inline bool EquipUpLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EquipUpLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EquipUpLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EquipUpLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 EquipUpLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.eid)
  return eid_;
}
inline void EquipUpLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool EquipUpLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EquipUpLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EquipUpLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EquipUpLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 EquipUpLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.etype)
  return etype_;
}
inline void EquipUpLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.etype)
}

// optional uint32 type = 12;
inline bool EquipUpLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EquipUpLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EquipUpLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EquipUpLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 EquipUpLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.type)
  return type_;
}
inline void EquipUpLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.type)
}

// optional uint32 equipid = 13;
inline bool EquipUpLogCmd::has_equipid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EquipUpLogCmd::set_has_equipid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EquipUpLogCmd::clear_has_equipid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EquipUpLogCmd::clear_equipid() {
  equipid_ = 0u;
  clear_has_equipid();
}
inline ::google::protobuf::uint32 EquipUpLogCmd::equipid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.equipid)
  return equipid_;
}
inline void EquipUpLogCmd::set_equipid(::google::protobuf::uint32 value) {
  set_has_equipid();
  equipid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.equipid)
}

// optional string equipguid = 14;
inline bool EquipUpLogCmd::has_equipguid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EquipUpLogCmd::set_has_equipguid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EquipUpLogCmd::clear_has_equipguid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EquipUpLogCmd::clear_equipguid() {
  if (equipguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipguid_->clear();
  }
  clear_has_equipguid();
}
inline const ::std::string& EquipUpLogCmd::equipguid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.equipguid)
  return *equipguid_;
}
inline void EquipUpLogCmd::set_equipguid(const ::std::string& value) {
  set_has_equipguid();
  if (equipguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipguid_ = new ::std::string;
  }
  equipguid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.equipguid)
}
inline void EquipUpLogCmd::set_equipguid(const char* value) {
  set_has_equipguid();
  if (equipguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipguid_ = new ::std::string;
  }
  equipguid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipUpLogCmd.equipguid)
}
inline void EquipUpLogCmd::set_equipguid(const char* value, size_t size) {
  set_has_equipguid();
  if (equipguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipguid_ = new ::std::string;
  }
  equipguid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipUpLogCmd.equipguid)
}
inline ::std::string* EquipUpLogCmd::mutable_equipguid() {
  set_has_equipguid();
  if (equipguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipguid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipUpLogCmd.equipguid)
  return equipguid_;
}
inline ::std::string* EquipUpLogCmd::release_equipguid() {
  clear_has_equipguid();
  if (equipguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = equipguid_;
    equipguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipUpLogCmd::set_allocated_equipguid(::std::string* equipguid) {
  if (equipguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete equipguid_;
  }
  if (equipguid) {
    set_has_equipguid();
    equipguid_ = equipguid;
  } else {
    clear_has_equipguid();
    equipguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipUpLogCmd.equipguid)
}

// optional uint32 count = 15;
inline bool EquipUpLogCmd::has_count() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EquipUpLogCmd::set_has_count() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EquipUpLogCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EquipUpLogCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 EquipUpLogCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.count)
  return count_;
}
inline void EquipUpLogCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.count)
}

// optional uint32 old_lv = 16;
inline bool EquipUpLogCmd::has_old_lv() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EquipUpLogCmd::set_has_old_lv() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EquipUpLogCmd::clear_has_old_lv() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EquipUpLogCmd::clear_old_lv() {
  old_lv_ = 0u;
  clear_has_old_lv();
}
inline ::google::protobuf::uint32 EquipUpLogCmd::old_lv() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.old_lv)
  return old_lv_;
}
inline void EquipUpLogCmd::set_old_lv(::google::protobuf::uint32 value) {
  set_has_old_lv();
  old_lv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.old_lv)
}

// optional uint32 new_lv = 17;
inline bool EquipUpLogCmd::has_new_lv() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void EquipUpLogCmd::set_has_new_lv() {
  _has_bits_[0] |= 0x00010000u;
}
inline void EquipUpLogCmd::clear_has_new_lv() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void EquipUpLogCmd::clear_new_lv() {
  new_lv_ = 0u;
  clear_has_new_lv();
}
inline ::google::protobuf::uint32 EquipUpLogCmd::new_lv() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.new_lv)
  return new_lv_;
}
inline void EquipUpLogCmd::set_new_lv(::google::protobuf::uint32 value) {
  set_has_new_lv();
  new_lv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.new_lv)
}

// optional int32 isfail = 18;
inline bool EquipUpLogCmd::has_isfail() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void EquipUpLogCmd::set_has_isfail() {
  _has_bits_[0] |= 0x00020000u;
}
inline void EquipUpLogCmd::clear_has_isfail() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void EquipUpLogCmd::clear_isfail() {
  isfail_ = 0;
  clear_has_isfail();
}
inline ::google::protobuf::int32 EquipUpLogCmd::isfail() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.isfail)
  return isfail_;
}
inline void EquipUpLogCmd::set_isfail(::google::protobuf::int32 value) {
  set_has_isfail();
  isfail_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.isfail)
}

// optional string cost_money = 19;
inline bool EquipUpLogCmd::has_cost_money() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void EquipUpLogCmd::set_has_cost_money() {
  _has_bits_[0] |= 0x00040000u;
}
inline void EquipUpLogCmd::clear_has_cost_money() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void EquipUpLogCmd::clear_cost_money() {
  if (cost_money_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_money_->clear();
  }
  clear_has_cost_money();
}
inline const ::std::string& EquipUpLogCmd::cost_money() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.cost_money)
  return *cost_money_;
}
inline void EquipUpLogCmd::set_cost_money(const ::std::string& value) {
  set_has_cost_money();
  if (cost_money_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_money_ = new ::std::string;
  }
  cost_money_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.cost_money)
}
inline void EquipUpLogCmd::set_cost_money(const char* value) {
  set_has_cost_money();
  if (cost_money_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_money_ = new ::std::string;
  }
  cost_money_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipUpLogCmd.cost_money)
}
inline void EquipUpLogCmd::set_cost_money(const char* value, size_t size) {
  set_has_cost_money();
  if (cost_money_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_money_ = new ::std::string;
  }
  cost_money_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipUpLogCmd.cost_money)
}
inline ::std::string* EquipUpLogCmd::mutable_cost_money() {
  set_has_cost_money();
  if (cost_money_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_money_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipUpLogCmd.cost_money)
  return cost_money_;
}
inline ::std::string* EquipUpLogCmd::release_cost_money() {
  clear_has_cost_money();
  if (cost_money_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cost_money_;
    cost_money_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipUpLogCmd::set_allocated_cost_money(::std::string* cost_money) {
  if (cost_money_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cost_money_;
  }
  if (cost_money) {
    set_has_cost_money();
    cost_money_ = cost_money;
  } else {
    clear_has_cost_money();
    cost_money_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipUpLogCmd.cost_money)
}

// optional string cost_item = 20;
inline bool EquipUpLogCmd::has_cost_item() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void EquipUpLogCmd::set_has_cost_item() {
  _has_bits_[0] |= 0x00080000u;
}
inline void EquipUpLogCmd::clear_has_cost_item() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void EquipUpLogCmd::clear_cost_item() {
  if (cost_item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_item_->clear();
  }
  clear_has_cost_item();
}
inline const ::std::string& EquipUpLogCmd::cost_item() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.cost_item)
  return *cost_item_;
}
inline void EquipUpLogCmd::set_cost_item(const ::std::string& value) {
  set_has_cost_item();
  if (cost_item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_item_ = new ::std::string;
  }
  cost_item_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.cost_item)
}
inline void EquipUpLogCmd::set_cost_item(const char* value) {
  set_has_cost_item();
  if (cost_item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_item_ = new ::std::string;
  }
  cost_item_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipUpLogCmd.cost_item)
}
inline void EquipUpLogCmd::set_cost_item(const char* value, size_t size) {
  set_has_cost_item();
  if (cost_item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_item_ = new ::std::string;
  }
  cost_item_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipUpLogCmd.cost_item)
}
inline ::std::string* EquipUpLogCmd::mutable_cost_item() {
  set_has_cost_item();
  if (cost_item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_item_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipUpLogCmd.cost_item)
  return cost_item_;
}
inline ::std::string* EquipUpLogCmd::release_cost_item() {
  clear_has_cost_item();
  if (cost_item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cost_item_;
    cost_item_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipUpLogCmd::set_allocated_cost_item(::std::string* cost_item) {
  if (cost_item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cost_item_;
  }
  if (cost_item) {
    set_has_cost_item();
    cost_item_ = cost_item;
  } else {
    clear_has_cost_item();
    cost_item_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipUpLogCmd.cost_item)
}

// optional int32 isdamage = 21;
inline bool EquipUpLogCmd::has_isdamage() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void EquipUpLogCmd::set_has_isdamage() {
  _has_bits_[0] |= 0x00100000u;
}
inline void EquipUpLogCmd::clear_has_isdamage() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void EquipUpLogCmd::clear_isdamage() {
  isdamage_ = 0;
  clear_has_isdamage();
}
inline ::google::protobuf::int32 EquipUpLogCmd::isdamage() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.isdamage)
  return isdamage_;
}
inline void EquipUpLogCmd::set_isdamage(::google::protobuf::int32 value) {
  set_has_isdamage();
  isdamage_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.isdamage)
}

// repeated uint32 mark = 22;
inline int EquipUpLogCmd::mark_size() const {
  return mark_.size();
}
inline void EquipUpLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 EquipUpLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.mark)
  return mark_.Get(index);
}
inline void EquipUpLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.mark)
}
inline void EquipUpLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.EquipUpLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
EquipUpLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.EquipUpLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
EquipUpLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EquipUpLogCmd.mark)
  return &mark_;
}

// optional string logid = 23;
inline bool EquipUpLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void EquipUpLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void EquipUpLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void EquipUpLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& EquipUpLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipUpLogCmd.logid)
  return *logid_;
}
inline void EquipUpLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipUpLogCmd.logid)
}
inline void EquipUpLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipUpLogCmd.logid)
}
inline void EquipUpLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipUpLogCmd.logid)
}
inline ::std::string* EquipUpLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipUpLogCmd.logid)
  return logid_;
}
inline ::std::string* EquipUpLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipUpLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipUpLogCmd.logid)
}

// -------------------------------------------------------------------

// SocailLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool SocailLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SocailLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SocailLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SocailLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command SocailLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SocailLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = SOCIAL_LOG_CMD];
inline bool SocailLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SocailLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SocailLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SocailLogCmd::clear_param() {
  param_ = 33;
  clear_has_param();
}
inline ::Cmd::LogParam SocailLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void SocailLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.param)
}

// optional uint32 cid = 3;
inline bool SocailLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SocailLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SocailLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SocailLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 SocailLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.cid)
  return cid_;
}
inline void SocailLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool SocailLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SocailLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SocailLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SocailLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 SocailLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.sid)
  return sid_;
}
inline void SocailLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool SocailLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SocailLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SocailLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SocailLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 SocailLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.hid)
  return hid_;
}
inline void SocailLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.hid)
}

// optional string account = 6;
inline bool SocailLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SocailLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SocailLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SocailLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& SocailLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.account)
  return *account_;
}
inline void SocailLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.account)
}
inline void SocailLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SocailLogCmd.account)
}
inline void SocailLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SocailLogCmd.account)
}
inline ::std::string* SocailLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SocailLogCmd.account)
  return account_;
}
inline ::std::string* SocailLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SocailLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SocailLogCmd.account)
}

// optional uint64 pid = 7;
inline bool SocailLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SocailLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SocailLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SocailLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 SocailLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.pid)
  return pid_;
}
inline void SocailLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool SocailLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SocailLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SocailLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SocailLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 SocailLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.ispay)
  return ispay_;
}
inline void SocailLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool SocailLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SocailLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SocailLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SocailLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 SocailLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.time)
  return time_;
}
inline void SocailLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.time)
}

// optional uint64 eid = 10;
inline bool SocailLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SocailLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SocailLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SocailLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 SocailLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.eid)
  return eid_;
}
inline void SocailLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool SocailLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SocailLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SocailLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SocailLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 SocailLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.etype)
  return etype_;
}
inline void SocailLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.etype)
}

// optional uint32 type = 12;
inline bool SocailLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SocailLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SocailLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SocailLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 SocailLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.type)
  return type_;
}
inline void SocailLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.type)
}

// optional uint64 inid = 13;
inline bool SocailLogCmd::has_inid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SocailLogCmd::set_has_inid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SocailLogCmd::clear_has_inid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SocailLogCmd::clear_inid() {
  inid_ = GOOGLE_ULONGLONG(0);
  clear_has_inid();
}
inline ::google::protobuf::uint64 SocailLogCmd::inid() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.inid)
  return inid_;
}
inline void SocailLogCmd::set_inid(::google::protobuf::uint64 value) {
  set_has_inid();
  inid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.inid)
}

// optional uint64 otherid = 14;
inline bool SocailLogCmd::has_otherid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SocailLogCmd::set_has_otherid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SocailLogCmd::clear_has_otherid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SocailLogCmd::clear_otherid() {
  otherid_ = GOOGLE_ULONGLONG(0);
  clear_has_otherid();
}
inline ::google::protobuf::uint64 SocailLogCmd::otherid() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.otherid)
  return otherid_;
}
inline void SocailLogCmd::set_otherid(::google::protobuf::uint64 value) {
  set_has_otherid();
  otherid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.otherid)
}

// optional uint64 param1 = 15;
inline bool SocailLogCmd::has_param1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SocailLogCmd::set_has_param1() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SocailLogCmd::clear_has_param1() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SocailLogCmd::clear_param1() {
  param1_ = GOOGLE_ULONGLONG(0);
  clear_has_param1();
}
inline ::google::protobuf::uint64 SocailLogCmd::param1() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.param1)
  return param1_;
}
inline void SocailLogCmd::set_param1(::google::protobuf::uint64 value) {
  set_has_param1();
  param1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.param1)
}

// optional uint64 param2 = 16;
inline bool SocailLogCmd::has_param2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SocailLogCmd::set_has_param2() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SocailLogCmd::clear_has_param2() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SocailLogCmd::clear_param2() {
  param2_ = GOOGLE_ULONGLONG(0);
  clear_has_param2();
}
inline ::google::protobuf::uint64 SocailLogCmd::param2() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.param2)
  return param2_;
}
inline void SocailLogCmd::set_param2(::google::protobuf::uint64 value) {
  set_has_param2();
  param2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.param2)
}

// repeated uint32 mark = 18;
inline int SocailLogCmd::mark_size() const {
  return mark_.size();
}
inline void SocailLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 SocailLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.mark)
  return mark_.Get(index);
}
inline void SocailLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.mark)
}
inline void SocailLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.SocailLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SocailLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.SocailLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SocailLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SocailLogCmd.mark)
  return &mark_;
}

// optional string logid = 19;
inline bool SocailLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SocailLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SocailLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SocailLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& SocailLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.SocailLogCmd.logid)
  return *logid_;
}
inline void SocailLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SocailLogCmd.logid)
}
inline void SocailLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SocailLogCmd.logid)
}
inline void SocailLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SocailLogCmd.logid)
}
inline ::std::string* SocailLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SocailLogCmd.logid)
  return logid_;
}
inline ::std::string* SocailLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SocailLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SocailLogCmd.logid)
}

// -------------------------------------------------------------------

// QuestLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool QuestLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command QuestLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuestLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = QUEST_LOG_CMD];
inline bool QuestLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestLogCmd::clear_param() {
  param_ = 34;
  clear_has_param();
}
inline ::Cmd::LogParam QuestLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void QuestLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.param)
}

// optional uint32 cid = 3;
inline bool QuestLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 QuestLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.cid)
  return cid_;
}
inline void QuestLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool QuestLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 QuestLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.sid)
  return sid_;
}
inline void QuestLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool QuestLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuestLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuestLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuestLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 QuestLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.hid)
  return hid_;
}
inline void QuestLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.hid)
}

// optional string account = 6;
inline bool QuestLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QuestLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QuestLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QuestLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& QuestLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.account)
  return *account_;
}
inline void QuestLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.account)
}
inline void QuestLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuestLogCmd.account)
}
inline void QuestLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuestLogCmd.account)
}
inline ::std::string* QuestLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QuestLogCmd.account)
  return account_;
}
inline ::std::string* QuestLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuestLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestLogCmd.account)
}

// optional uint64 pid = 7;
inline bool QuestLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QuestLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QuestLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QuestLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 QuestLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.pid)
  return pid_;
}
inline void QuestLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool QuestLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QuestLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QuestLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QuestLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 QuestLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.ispay)
  return ispay_;
}
inline void QuestLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool QuestLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QuestLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QuestLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QuestLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 QuestLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.time)
  return time_;
}
inline void QuestLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.time)
}

// optional uint64 eid = 10;
inline bool QuestLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QuestLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QuestLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QuestLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 QuestLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.eid)
  return eid_;
}
inline void QuestLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool QuestLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void QuestLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void QuestLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void QuestLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 QuestLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.etype)
  return etype_;
}
inline void QuestLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.etype)
}

// optional uint64 questid = 12;
inline bool QuestLogCmd::has_questid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void QuestLogCmd::set_has_questid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void QuestLogCmd::clear_has_questid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void QuestLogCmd::clear_questid() {
  questid_ = GOOGLE_ULONGLONG(0);
  clear_has_questid();
}
inline ::google::protobuf::uint64 QuestLogCmd::questid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.questid)
  return questid_;
}
inline void QuestLogCmd::set_questid(::google::protobuf::uint64 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.questid)
}

// optional uint32 type = 13;
inline bool QuestLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void QuestLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void QuestLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void QuestLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 QuestLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.type)
  return type_;
}
inline void QuestLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.type)
}

// optional uint64 targetid = 14;
inline bool QuestLogCmd::has_targetid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void QuestLogCmd::set_has_targetid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void QuestLogCmd::clear_has_targetid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void QuestLogCmd::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 QuestLogCmd::targetid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.targetid)
  return targetid_;
}
inline void QuestLogCmd::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.targetid)
}

// optional uint32 baseexp = 15;
inline bool QuestLogCmd::has_baseexp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void QuestLogCmd::set_has_baseexp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void QuestLogCmd::clear_has_baseexp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void QuestLogCmd::clear_baseexp() {
  baseexp_ = 0u;
  clear_has_baseexp();
}
inline ::google::protobuf::uint32 QuestLogCmd::baseexp() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.baseexp)
  return baseexp_;
}
inline void QuestLogCmd::set_baseexp(::google::protobuf::uint32 value) {
  set_has_baseexp();
  baseexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.baseexp)
}

// optional uint32 jobexp = 16;
inline bool QuestLogCmd::has_jobexp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void QuestLogCmd::set_has_jobexp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void QuestLogCmd::clear_has_jobexp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void QuestLogCmd::clear_jobexp() {
  jobexp_ = 0u;
  clear_has_jobexp();
}
inline ::google::protobuf::uint32 QuestLogCmd::jobexp() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.jobexp)
  return jobexp_;
}
inline void QuestLogCmd::set_jobexp(::google::protobuf::uint32 value) {
  set_has_jobexp();
  jobexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.jobexp)
}

// optional string rewarditem = 17;
inline bool QuestLogCmd::has_rewarditem() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void QuestLogCmd::set_has_rewarditem() {
  _has_bits_[0] |= 0x00010000u;
}
inline void QuestLogCmd::clear_has_rewarditem() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void QuestLogCmd::clear_rewarditem() {
  if (rewarditem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarditem_->clear();
  }
  clear_has_rewarditem();
}
inline const ::std::string& QuestLogCmd::rewarditem() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.rewarditem)
  return *rewarditem_;
}
inline void QuestLogCmd::set_rewarditem(const ::std::string& value) {
  set_has_rewarditem();
  if (rewarditem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarditem_ = new ::std::string;
  }
  rewarditem_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.rewarditem)
}
inline void QuestLogCmd::set_rewarditem(const char* value) {
  set_has_rewarditem();
  if (rewarditem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarditem_ = new ::std::string;
  }
  rewarditem_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuestLogCmd.rewarditem)
}
inline void QuestLogCmd::set_rewarditem(const char* value, size_t size) {
  set_has_rewarditem();
  if (rewarditem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarditem_ = new ::std::string;
  }
  rewarditem_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuestLogCmd.rewarditem)
}
inline ::std::string* QuestLogCmd::mutable_rewarditem() {
  set_has_rewarditem();
  if (rewarditem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarditem_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QuestLogCmd.rewarditem)
  return rewarditem_;
}
inline ::std::string* QuestLogCmd::release_rewarditem() {
  clear_has_rewarditem();
  if (rewarditem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rewarditem_;
    rewarditem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuestLogCmd::set_allocated_rewarditem(::std::string* rewarditem) {
  if (rewarditem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewarditem_;
  }
  if (rewarditem) {
    set_has_rewarditem();
    rewarditem_ = rewarditem;
  } else {
    clear_has_rewarditem();
    rewarditem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestLogCmd.rewarditem)
}

// optional uint32 level = 18;
inline bool QuestLogCmd::has_level() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void QuestLogCmd::set_has_level() {
  _has_bits_[0] |= 0x00020000u;
}
inline void QuestLogCmd::clear_has_level() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void QuestLogCmd::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 QuestLogCmd::level() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.level)
  return level_;
}
inline void QuestLogCmd::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.level)
}

// repeated uint32 mark = 19;
inline int QuestLogCmd::mark_size() const {
  return mark_.size();
}
inline void QuestLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 QuestLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.mark)
  return mark_.Get(index);
}
inline void QuestLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.mark)
}
inline void QuestLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QuestLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QuestLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QuestLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestLogCmd.mark)
  return &mark_;
}

// optional string logid = 20;
inline bool QuestLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void QuestLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void QuestLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void QuestLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& QuestLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.logid)
  return *logid_;
}
inline void QuestLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.logid)
}
inline void QuestLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuestLogCmd.logid)
}
inline void QuestLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuestLogCmd.logid)
}
inline ::std::string* QuestLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QuestLogCmd.logid)
  return logid_;
}
inline ::std::string* QuestLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuestLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestLogCmd.logid)
}

// optional uint32 lineid = 21;
inline bool QuestLogCmd::has_lineid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void QuestLogCmd::set_has_lineid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void QuestLogCmd::clear_has_lineid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void QuestLogCmd::clear_lineid() {
  lineid_ = 0u;
  clear_has_lineid();
}
inline ::google::protobuf::uint32 QuestLogCmd::lineid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestLogCmd.lineid)
  return lineid_;
}
inline void QuestLogCmd::set_lineid(::google::protobuf::uint32 value) {
  set_has_lineid();
  lineid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestLogCmd.lineid)
}

// -------------------------------------------------------------------

// ManualLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool ManualLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManualLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ManualLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ManualLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command ManualLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ManualLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = MANUAL_LOG_CMD];
inline bool ManualLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ManualLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ManualLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ManualLogCmd::clear_param() {
  param_ = 37;
  clear_has_param();
}
inline ::Cmd::LogParam ManualLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void ManualLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.param)
}

// optional uint32 cid = 3;
inline bool ManualLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ManualLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ManualLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ManualLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 ManualLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.cid)
  return cid_;
}
inline void ManualLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool ManualLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ManualLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ManualLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ManualLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 ManualLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.sid)
  return sid_;
}
inline void ManualLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool ManualLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ManualLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ManualLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ManualLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 ManualLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.hid)
  return hid_;
}
inline void ManualLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.hid)
}

// optional string account = 6;
inline bool ManualLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ManualLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ManualLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ManualLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& ManualLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.account)
  return *account_;
}
inline void ManualLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.account)
}
inline void ManualLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ManualLogCmd.account)
}
inline void ManualLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ManualLogCmd.account)
}
inline ::std::string* ManualLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ManualLogCmd.account)
  return account_;
}
inline ::std::string* ManualLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ManualLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ManualLogCmd.account)
}

// optional uint64 pid = 7;
inline bool ManualLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ManualLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ManualLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ManualLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 ManualLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.pid)
  return pid_;
}
inline void ManualLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool ManualLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ManualLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ManualLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ManualLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 ManualLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.ispay)
  return ispay_;
}
inline void ManualLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool ManualLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ManualLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ManualLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ManualLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ManualLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.time)
  return time_;
}
inline void ManualLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.time)
}

// optional uint64 eid = 10;
inline bool ManualLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ManualLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ManualLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ManualLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 ManualLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.eid)
  return eid_;
}
inline void ManualLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool ManualLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ManualLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ManualLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ManualLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 ManualLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.etype)
  return etype_;
}
inline void ManualLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.etype)
}

// optional uint32 type = 12;
inline bool ManualLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ManualLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ManualLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ManualLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ManualLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.type)
  return type_;
}
inline void ManualLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.type)
}

// optional uint32 by = 13;
inline bool ManualLogCmd::has_by() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ManualLogCmd::set_has_by() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ManualLogCmd::clear_has_by() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ManualLogCmd::clear_by() {
  by_ = 0u;
  clear_has_by();
}
inline ::google::protobuf::uint32 ManualLogCmd::by() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.by)
  return by_;
}
inline void ManualLogCmd::set_by(::google::protobuf::uint32 value) {
  set_has_by();
  by_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.by)
}

// optional uint64 what = 14;
inline bool ManualLogCmd::has_what() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ManualLogCmd::set_has_what() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ManualLogCmd::clear_has_what() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ManualLogCmd::clear_what() {
  what_ = GOOGLE_ULONGLONG(0);
  clear_has_what();
}
inline ::google::protobuf::uint64 ManualLogCmd::what() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.what)
  return what_;
}
inline void ManualLogCmd::set_what(::google::protobuf::uint64 value) {
  set_has_what();
  what_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.what)
}

// optional uint64 param1 = 15;
inline bool ManualLogCmd::has_param1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ManualLogCmd::set_has_param1() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ManualLogCmd::clear_has_param1() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ManualLogCmd::clear_param1() {
  param1_ = GOOGLE_ULONGLONG(0);
  clear_has_param1();
}
inline ::google::protobuf::uint64 ManualLogCmd::param1() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.param1)
  return param1_;
}
inline void ManualLogCmd::set_param1(::google::protobuf::uint64 value) {
  set_has_param1();
  param1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.param1)
}

// repeated uint32 mark = 18;
inline int ManualLogCmd::mark_size() const {
  return mark_.size();
}
inline void ManualLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 ManualLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.mark)
  return mark_.Get(index);
}
inline void ManualLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.mark)
}
inline void ManualLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.ManualLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ManualLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.ManualLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ManualLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ManualLogCmd.mark)
  return &mark_;
}

// optional string logid = 19;
inline bool ManualLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ManualLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ManualLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ManualLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& ManualLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.ManualLogCmd.logid)
  return *logid_;
}
inline void ManualLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ManualLogCmd.logid)
}
inline void ManualLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ManualLogCmd.logid)
}
inline void ManualLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ManualLogCmd.logid)
}
inline ::std::string* ManualLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ManualLogCmd.logid)
  return logid_;
}
inline ::std::string* ManualLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ManualLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ManualLogCmd.logid)
}

// -------------------------------------------------------------------

// CompleteLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool CompleteLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompleteLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompleteLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompleteLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command CompleteLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CompleteLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = COMPLETE_LOG_CMD];
inline bool CompleteLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompleteLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompleteLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompleteLogCmd::clear_param() {
  param_ = 35;
  clear_has_param();
}
inline ::Cmd::LogParam CompleteLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void CompleteLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.param)
}

// optional uint32 cid = 3;
inline bool CompleteLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CompleteLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CompleteLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CompleteLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 CompleteLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.cid)
  return cid_;
}
inline void CompleteLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool CompleteLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CompleteLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CompleteLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CompleteLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 CompleteLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.sid)
  return sid_;
}
inline void CompleteLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool CompleteLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CompleteLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CompleteLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CompleteLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 CompleteLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.hid)
  return hid_;
}
inline void CompleteLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.hid)
}

// optional string account = 6;
inline bool CompleteLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CompleteLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CompleteLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CompleteLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& CompleteLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.account)
  return *account_;
}
inline void CompleteLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.account)
}
inline void CompleteLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CompleteLogCmd.account)
}
inline void CompleteLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CompleteLogCmd.account)
}
inline ::std::string* CompleteLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CompleteLogCmd.account)
  return account_;
}
inline ::std::string* CompleteLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CompleteLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CompleteLogCmd.account)
}

// optional uint64 pid = 7;
inline bool CompleteLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CompleteLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CompleteLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CompleteLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 CompleteLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.pid)
  return pid_;
}
inline void CompleteLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool CompleteLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CompleteLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CompleteLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CompleteLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 CompleteLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.ispay)
  return ispay_;
}
inline void CompleteLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool CompleteLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CompleteLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CompleteLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CompleteLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CompleteLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.time)
  return time_;
}
inline void CompleteLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.time)
}

// optional uint64 eid = 10;
inline bool CompleteLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CompleteLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CompleteLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CompleteLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 CompleteLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.eid)
  return eid_;
}
inline void CompleteLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool CompleteLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CompleteLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CompleteLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CompleteLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 CompleteLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.etype)
  return etype_;
}
inline void CompleteLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.etype)
}

// optional uint32 type = 12;
inline bool CompleteLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CompleteLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CompleteLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CompleteLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CompleteLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.type)
  return type_;
}
inline void CompleteLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.type)
}

// optional uint64 targetid = 13;
inline bool CompleteLogCmd::has_targetid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CompleteLogCmd::set_has_targetid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CompleteLogCmd::clear_has_targetid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CompleteLogCmd::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 CompleteLogCmd::targetid() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.targetid)
  return targetid_;
}
inline void CompleteLogCmd::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.targetid)
}

// optional uint32 today_count = 14;
inline bool CompleteLogCmd::has_today_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CompleteLogCmd::set_has_today_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CompleteLogCmd::clear_has_today_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CompleteLogCmd::clear_today_count() {
  today_count_ = 0u;
  clear_has_today_count();
}
inline ::google::protobuf::uint32 CompleteLogCmd::today_count() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.today_count)
  return today_count_;
}
inline void CompleteLogCmd::set_today_count(::google::protobuf::uint32 value) {
  set_has_today_count();
  today_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.today_count)
}

// optional uint32 reward_type = 15;
inline bool CompleteLogCmd::has_reward_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CompleteLogCmd::set_has_reward_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CompleteLogCmd::clear_has_reward_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CompleteLogCmd::clear_reward_type() {
  reward_type_ = 0u;
  clear_has_reward_type();
}
inline ::google::protobuf::uint32 CompleteLogCmd::reward_type() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.reward_type)
  return reward_type_;
}
inline void CompleteLogCmd::set_reward_type(::google::protobuf::uint32 value) {
  set_has_reward_type();
  reward_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.reward_type)
}

// optional uint32 reward_count = 16;
inline bool CompleteLogCmd::has_reward_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CompleteLogCmd::set_has_reward_count() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CompleteLogCmd::clear_has_reward_count() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CompleteLogCmd::clear_reward_count() {
  reward_count_ = 0u;
  clear_has_reward_count();
}
inline ::google::protobuf::uint32 CompleteLogCmd::reward_count() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.reward_count)
  return reward_count_;
}
inline void CompleteLogCmd::set_reward_count(::google::protobuf::uint32 value) {
  set_has_reward_count();
  reward_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.reward_count)
}

// optional uint32 level = 17;
inline bool CompleteLogCmd::has_level() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CompleteLogCmd::set_has_level() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CompleteLogCmd::clear_has_level() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CompleteLogCmd::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CompleteLogCmd::level() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.level)
  return level_;
}
inline void CompleteLogCmd::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.level)
}

// repeated uint32 mark = 18;
inline int CompleteLogCmd::mark_size() const {
  return mark_.size();
}
inline void CompleteLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 CompleteLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.mark)
  return mark_.Get(index);
}
inline void CompleteLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.mark)
}
inline void CompleteLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.CompleteLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CompleteLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.CompleteLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CompleteLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.CompleteLogCmd.mark)
  return &mark_;
}

// optional string logid = 19;
inline bool CompleteLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CompleteLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CompleteLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CompleteLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& CompleteLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.CompleteLogCmd.logid)
  return *logid_;
}
inline void CompleteLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CompleteLogCmd.logid)
}
inline void CompleteLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CompleteLogCmd.logid)
}
inline void CompleteLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CompleteLogCmd.logid)
}
inline ::std::string* CompleteLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CompleteLogCmd.logid)
  return logid_;
}
inline ::std::string* CompleteLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CompleteLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CompleteLogCmd.logid)
}

// -------------------------------------------------------------------

// TowerLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool TowerLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TowerLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TowerLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TowerLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command TowerLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TowerLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = TOWER_LOG_CMD];
inline bool TowerLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TowerLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TowerLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TowerLogCmd::clear_param() {
  param_ = 42;
  clear_has_param();
}
inline ::Cmd::LogParam TowerLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void TowerLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.param)
}

// optional uint32 cid = 3;
inline bool TowerLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TowerLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TowerLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TowerLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 TowerLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.cid)
  return cid_;
}
inline void TowerLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool TowerLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TowerLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TowerLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TowerLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 TowerLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.sid)
  return sid_;
}
inline void TowerLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool TowerLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TowerLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TowerLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TowerLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TowerLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.hid)
  return hid_;
}
inline void TowerLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.hid)
}

// optional string account = 6;
inline bool TowerLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TowerLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TowerLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TowerLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& TowerLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.account)
  return *account_;
}
inline void TowerLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.account)
}
inline void TowerLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TowerLogCmd.account)
}
inline void TowerLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TowerLogCmd.account)
}
inline ::std::string* TowerLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TowerLogCmd.account)
  return account_;
}
inline ::std::string* TowerLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TowerLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TowerLogCmd.account)
}

// optional uint64 pid = 7;
inline bool TowerLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TowerLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TowerLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TowerLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 TowerLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.pid)
  return pid_;
}
inline void TowerLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool TowerLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TowerLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TowerLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TowerLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 TowerLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.ispay)
  return ispay_;
}
inline void TowerLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool TowerLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TowerLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TowerLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TowerLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 TowerLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.time)
  return time_;
}
inline void TowerLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.time)
}

// optional uint64 eid = 10;
inline bool TowerLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TowerLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TowerLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TowerLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 TowerLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.eid)
  return eid_;
}
inline void TowerLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool TowerLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TowerLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TowerLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TowerLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 TowerLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.etype)
  return etype_;
}
inline void TowerLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.etype)
}

// optional uint32 type = 12;
inline bool TowerLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TowerLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TowerLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TowerLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TowerLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.type)
  return type_;
}
inline void TowerLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.type)
}

// optional uint32 curLayer = 13;
inline bool TowerLogCmd::has_curlayer() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TowerLogCmd::set_has_curlayer() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TowerLogCmd::clear_has_curlayer() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TowerLogCmd::clear_curlayer() {
  curlayer_ = 0u;
  clear_has_curlayer();
}
inline ::google::protobuf::uint32 TowerLogCmd::curlayer() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.curLayer)
  return curlayer_;
}
inline void TowerLogCmd::set_curlayer(::google::protobuf::uint32 value) {
  set_has_curlayer();
  curlayer_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.curLayer)
}

// optional uint32 maxLayer = 14;
inline bool TowerLogCmd::has_maxlayer() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TowerLogCmd::set_has_maxlayer() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TowerLogCmd::clear_has_maxlayer() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TowerLogCmd::clear_maxlayer() {
  maxlayer_ = 0u;
  clear_has_maxlayer();
}
inline ::google::protobuf::uint32 TowerLogCmd::maxlayer() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.maxLayer)
  return maxlayer_;
}
inline void TowerLogCmd::set_maxlayer(::google::protobuf::uint32 value) {
  set_has_maxlayer();
  maxlayer_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.maxLayer)
}

// optional uint64 teamId = 15;
inline bool TowerLogCmd::has_teamid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TowerLogCmd::set_has_teamid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TowerLogCmd::clear_has_teamid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TowerLogCmd::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TowerLogCmd::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.teamId)
  return teamid_;
}
inline void TowerLogCmd::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.teamId)
}

// optional uint32 level = 16;
inline bool TowerLogCmd::has_level() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TowerLogCmd::set_has_level() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TowerLogCmd::clear_has_level() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TowerLogCmd::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TowerLogCmd::level() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.level)
  return level_;
}
inline void TowerLogCmd::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.level)
}

// repeated uint32 mark = 18;
inline int TowerLogCmd::mark_size() const {
  return mark_.size();
}
inline void TowerLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 TowerLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.mark)
  return mark_.Get(index);
}
inline void TowerLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.mark)
}
inline void TowerLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.TowerLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TowerLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.TowerLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TowerLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.TowerLogCmd.mark)
  return &mark_;
}

// optional string logid = 19;
inline bool TowerLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TowerLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TowerLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TowerLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& TowerLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.TowerLogCmd.logid)
  return *logid_;
}
inline void TowerLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TowerLogCmd.logid)
}
inline void TowerLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TowerLogCmd.logid)
}
inline void TowerLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TowerLogCmd.logid)
}
inline ::std::string* TowerLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TowerLogCmd.logid)
  return logid_;
}
inline ::std::string* TowerLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TowerLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TowerLogCmd.logid)
}

// -------------------------------------------------------------------

// ItemOperLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool ItemOperLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemOperLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemOperLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemOperLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command ItemOperLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ItemOperLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = ITEMOPER_LOG_CMD];
inline bool ItemOperLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemOperLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemOperLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemOperLogCmd::clear_param() {
  param_ = 40;
  clear_has_param();
}
inline ::Cmd::LogParam ItemOperLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void ItemOperLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.param)
}

// optional uint32 cid = 3;
inline bool ItemOperLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemOperLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemOperLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemOperLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 ItemOperLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.cid)
  return cid_;
}
inline void ItemOperLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool ItemOperLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemOperLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemOperLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemOperLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 ItemOperLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.sid)
  return sid_;
}
inline void ItemOperLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool ItemOperLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemOperLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemOperLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemOperLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 ItemOperLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.hid)
  return hid_;
}
inline void ItemOperLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.hid)
}

// optional string account = 6;
inline bool ItemOperLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ItemOperLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ItemOperLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ItemOperLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& ItemOperLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.account)
  return *account_;
}
inline void ItemOperLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.account)
}
inline void ItemOperLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ItemOperLogCmd.account)
}
inline void ItemOperLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ItemOperLogCmd.account)
}
inline ::std::string* ItemOperLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ItemOperLogCmd.account)
  return account_;
}
inline ::std::string* ItemOperLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemOperLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemOperLogCmd.account)
}

// optional uint64 pid = 7;
inline bool ItemOperLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ItemOperLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ItemOperLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ItemOperLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 ItemOperLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.pid)
  return pid_;
}
inline void ItemOperLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool ItemOperLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ItemOperLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ItemOperLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ItemOperLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 ItemOperLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.ispay)
  return ispay_;
}
inline void ItemOperLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool ItemOperLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ItemOperLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ItemOperLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ItemOperLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ItemOperLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.time)
  return time_;
}
inline void ItemOperLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.time)
}

// optional uint64 eid = 10;
inline bool ItemOperLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ItemOperLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ItemOperLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ItemOperLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 ItemOperLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.eid)
  return eid_;
}
inline void ItemOperLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool ItemOperLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ItemOperLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ItemOperLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ItemOperLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 ItemOperLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.etype)
  return etype_;
}
inline void ItemOperLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.etype)
}

// optional uint32 type = 12;
inline bool ItemOperLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ItemOperLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ItemOperLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ItemOperLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ItemOperLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.type)
  return type_;
}
inline void ItemOperLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.type)
}

// optional uint32 itemid = 13;
inline bool ItemOperLogCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ItemOperLogCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ItemOperLogCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ItemOperLogCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 ItemOperLogCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.itemid)
  return itemid_;
}
inline void ItemOperLogCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.itemid)
}

// optional uint32 count = 14;
inline bool ItemOperLogCmd::has_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ItemOperLogCmd::set_has_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ItemOperLogCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ItemOperLogCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ItemOperLogCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.count)
  return count_;
}
inline void ItemOperLogCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.count)
}

// repeated uint32 mark = 15;
inline int ItemOperLogCmd::mark_size() const {
  return mark_.size();
}
inline void ItemOperLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 ItemOperLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.mark)
  return mark_.Get(index);
}
inline void ItemOperLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.mark)
}
inline void ItemOperLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.ItemOperLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ItemOperLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.ItemOperLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ItemOperLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ItemOperLogCmd.mark)
  return &mark_;
}

// optional string logid = 16;
inline bool ItemOperLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ItemOperLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ItemOperLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ItemOperLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& ItemOperLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemOperLogCmd.logid)
  return *logid_;
}
inline void ItemOperLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ItemOperLogCmd.logid)
}
inline void ItemOperLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ItemOperLogCmd.logid)
}
inline void ItemOperLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ItemOperLogCmd.logid)
}
inline ::std::string* ItemOperLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ItemOperLogCmd.logid)
  return logid_;
}
inline ::std::string* ItemOperLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemOperLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemOperLogCmd.logid)
}

// -------------------------------------------------------------------

// KillLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool KillLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KillLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KillLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KillLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command KillLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void KillLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = KILL_LOG_CMD];
inline bool KillLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KillLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KillLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KillLogCmd::clear_param() {
  param_ = 38;
  clear_has_param();
}
inline ::Cmd::LogParam KillLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void KillLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.param)
}

// optional uint32 cid = 3;
inline bool KillLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KillLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KillLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KillLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 KillLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.cid)
  return cid_;
}
inline void KillLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool KillLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KillLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KillLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KillLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 KillLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.sid)
  return sid_;
}
inline void KillLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool KillLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KillLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KillLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KillLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 KillLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.hid)
  return hid_;
}
inline void KillLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.hid)
}

// optional string account = 6;
inline bool KillLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KillLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KillLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KillLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& KillLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.account)
  return *account_;
}
inline void KillLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.account)
}
inline void KillLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.KillLogCmd.account)
}
inline void KillLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.KillLogCmd.account)
}
inline ::std::string* KillLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.KillLogCmd.account)
  return account_;
}
inline ::std::string* KillLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void KillLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.KillLogCmd.account)
}

// optional uint64 pid = 7;
inline bool KillLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void KillLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void KillLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void KillLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 KillLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.pid)
  return pid_;
}
inline void KillLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool KillLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void KillLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void KillLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void KillLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 KillLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.ispay)
  return ispay_;
}
inline void KillLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool KillLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void KillLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void KillLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void KillLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 KillLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.time)
  return time_;
}
inline void KillLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.time)
}

// optional uint64 eid = 10;
inline bool KillLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void KillLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void KillLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void KillLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 KillLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.eid)
  return eid_;
}
inline void KillLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool KillLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void KillLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void KillLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void KillLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 KillLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.etype)
  return etype_;
}
inline void KillLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.etype)
}

// optional uint32 monsterid = 12;
inline bool KillLogCmd::has_monsterid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void KillLogCmd::set_has_monsterid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void KillLogCmd::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void KillLogCmd::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 KillLogCmd::monsterid() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.monsterid)
  return monsterid_;
}
inline void KillLogCmd::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.monsterid)
}

// optional uint64 monstergid = 13;
inline bool KillLogCmd::has_monstergid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void KillLogCmd::set_has_monstergid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void KillLogCmd::clear_has_monstergid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void KillLogCmd::clear_monstergid() {
  monstergid_ = GOOGLE_ULONGLONG(0);
  clear_has_monstergid();
}
inline ::google::protobuf::uint64 KillLogCmd::monstergid() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.monstergid)
  return monstergid_;
}
inline void KillLogCmd::set_monstergid(::google::protobuf::uint64 value) {
  set_has_monstergid();
  monstergid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.monstergid)
}

// optional uint32 monstergroup = 14;
inline bool KillLogCmd::has_monstergroup() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void KillLogCmd::set_has_monstergroup() {
  _has_bits_[0] |= 0x00002000u;
}
inline void KillLogCmd::clear_has_monstergroup() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void KillLogCmd::clear_monstergroup() {
  monstergroup_ = 0u;
  clear_has_monstergroup();
}
inline ::google::protobuf::uint32 KillLogCmd::monstergroup() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.monstergroup)
  return monstergroup_;
}
inline void KillLogCmd::set_monstergroup(::google::protobuf::uint32 value) {
  set_has_monstergroup();
  monstergroup_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.monstergroup)
}

// optional uint32 baseexp = 15;
inline bool KillLogCmd::has_baseexp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void KillLogCmd::set_has_baseexp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void KillLogCmd::clear_has_baseexp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void KillLogCmd::clear_baseexp() {
  baseexp_ = 0u;
  clear_has_baseexp();
}
inline ::google::protobuf::uint32 KillLogCmd::baseexp() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.baseexp)
  return baseexp_;
}
inline void KillLogCmd::set_baseexp(::google::protobuf::uint32 value) {
  set_has_baseexp();
  baseexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.baseexp)
}

// optional uint32 jobexp = 16;
inline bool KillLogCmd::has_jobexp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void KillLogCmd::set_has_jobexp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void KillLogCmd::clear_has_jobexp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void KillLogCmd::clear_jobexp() {
  jobexp_ = 0u;
  clear_has_jobexp();
}
inline ::google::protobuf::uint32 KillLogCmd::jobexp() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.jobexp)
  return jobexp_;
}
inline void KillLogCmd::set_jobexp(::google::protobuf::uint32 value) {
  set_has_jobexp();
  jobexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.jobexp)
}

// optional int32 ismvp = 17;
inline bool KillLogCmd::has_ismvp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void KillLogCmd::set_has_ismvp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void KillLogCmd::clear_has_ismvp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void KillLogCmd::clear_ismvp() {
  ismvp_ = 0;
  clear_has_ismvp();
}
inline ::google::protobuf::int32 KillLogCmd::ismvp() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.ismvp)
  return ismvp_;
}
inline void KillLogCmd::set_ismvp(::google::protobuf::int32 value) {
  set_has_ismvp();
  ismvp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.ismvp)
}

// repeated uint32 mark = 18;
inline int KillLogCmd::mark_size() const {
  return mark_.size();
}
inline void KillLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 KillLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.mark)
  return mark_.Get(index);
}
inline void KillLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.mark)
}
inline void KillLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.KillLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
KillLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.KillLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
KillLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.KillLogCmd.mark)
  return &mark_;
}

// optional uint32 type = 19;
inline bool KillLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void KillLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void KillLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void KillLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 KillLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.type)
  return type_;
}
inline void KillLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.type)
}

// optional uint32 level = 20;
inline bool KillLogCmd::has_level() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void KillLogCmd::set_has_level() {
  _has_bits_[0] |= 0x00080000u;
}
inline void KillLogCmd::clear_has_level() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void KillLogCmd::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 KillLogCmd::level() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.level)
  return level_;
}
inline void KillLogCmd::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.level)
}

// optional uint32 killtype = 21;
inline bool KillLogCmd::has_killtype() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void KillLogCmd::set_has_killtype() {
  _has_bits_[0] |= 0x00100000u;
}
inline void KillLogCmd::clear_has_killtype() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void KillLogCmd::clear_killtype() {
  killtype_ = 0u;
  clear_has_killtype();
}
inline ::google::protobuf::uint32 KillLogCmd::killtype() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.killtype)
  return killtype_;
}
inline void KillLogCmd::set_killtype(::google::protobuf::uint32 value) {
  set_has_killtype();
  killtype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.killtype)
}

// optional string logid = 22;
inline bool KillLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void KillLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void KillLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void KillLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& KillLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.logid)
  return *logid_;
}
inline void KillLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.logid)
}
inline void KillLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.KillLogCmd.logid)
}
inline void KillLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.KillLogCmd.logid)
}
inline ::std::string* KillLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.KillLogCmd.logid)
  return logid_;
}
inline ::std::string* KillLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void KillLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.KillLogCmd.logid)
}

// optional uint32 lineid = 23;
inline bool KillLogCmd::has_lineid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void KillLogCmd::set_has_lineid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void KillLogCmd::clear_has_lineid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void KillLogCmd::clear_lineid() {
  lineid_ = 0u;
  clear_has_lineid();
}
inline ::google::protobuf::uint32 KillLogCmd::lineid() const {
  // @@protoc_insertion_point(field_get:Cmd.KillLogCmd.lineid)
  return lineid_;
}
inline void KillLogCmd::set_lineid(::google::protobuf::uint32 value) {
  set_has_lineid();
  lineid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillLogCmd.lineid)
}

// -------------------------------------------------------------------

// RewardLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool RewardLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command RewardLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RewardLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = REWARD_LOG_CMD];
inline bool RewardLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardLogCmd::clear_param() {
  param_ = 43;
  clear_has_param();
}
inline ::Cmd::LogParam RewardLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void RewardLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.param)
}

// optional uint32 cid = 3;
inline bool RewardLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RewardLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RewardLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RewardLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 RewardLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.cid)
  return cid_;
}
inline void RewardLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool RewardLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RewardLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RewardLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RewardLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 RewardLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.sid)
  return sid_;
}
inline void RewardLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool RewardLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RewardLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RewardLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RewardLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 RewardLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.hid)
  return hid_;
}
inline void RewardLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.hid)
}

// optional string account = 6;
inline bool RewardLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RewardLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RewardLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RewardLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& RewardLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.account)
  return *account_;
}
inline void RewardLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.account)
}
inline void RewardLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RewardLogCmd.account)
}
inline void RewardLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RewardLogCmd.account)
}
inline ::std::string* RewardLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RewardLogCmd.account)
  return account_;
}
inline ::std::string* RewardLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RewardLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RewardLogCmd.account)
}

// optional uint64 pid = 7;
inline bool RewardLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RewardLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RewardLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RewardLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 RewardLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.pid)
  return pid_;
}
inline void RewardLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool RewardLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RewardLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RewardLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RewardLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 RewardLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.ispay)
  return ispay_;
}
inline void RewardLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool RewardLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RewardLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RewardLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RewardLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 RewardLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.time)
  return time_;
}
inline void RewardLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.time)
}

// optional uint64 eid = 10;
inline bool RewardLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RewardLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RewardLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RewardLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 RewardLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.eid)
  return eid_;
}
inline void RewardLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool RewardLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RewardLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RewardLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RewardLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 RewardLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.etype)
  return etype_;
}
inline void RewardLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.etype)
}

// optional uint32 id = 12;
inline bool RewardLogCmd::has_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RewardLogCmd::set_has_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RewardLogCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RewardLogCmd::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RewardLogCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.id)
  return id_;
}
inline void RewardLogCmd::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.id)
}

// optional uint32 profession = 13;
inline bool RewardLogCmd::has_profession() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RewardLogCmd::set_has_profession() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RewardLogCmd::clear_has_profession() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RewardLogCmd::clear_profession() {
  profession_ = 0u;
  clear_has_profession();
}
inline ::google::protobuf::uint32 RewardLogCmd::profession() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.profession)
  return profession_;
}
inline void RewardLogCmd::set_profession(::google::protobuf::uint32 value) {
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.profession)
}

// optional string rewarditem = 14;
inline bool RewardLogCmd::has_rewarditem() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RewardLogCmd::set_has_rewarditem() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RewardLogCmd::clear_has_rewarditem() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RewardLogCmd::clear_rewarditem() {
  if (rewarditem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarditem_->clear();
  }
  clear_has_rewarditem();
}
inline const ::std::string& RewardLogCmd::rewarditem() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.rewarditem)
  return *rewarditem_;
}
inline void RewardLogCmd::set_rewarditem(const ::std::string& value) {
  set_has_rewarditem();
  if (rewarditem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarditem_ = new ::std::string;
  }
  rewarditem_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.rewarditem)
}
inline void RewardLogCmd::set_rewarditem(const char* value) {
  set_has_rewarditem();
  if (rewarditem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarditem_ = new ::std::string;
  }
  rewarditem_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RewardLogCmd.rewarditem)
}
inline void RewardLogCmd::set_rewarditem(const char* value, size_t size) {
  set_has_rewarditem();
  if (rewarditem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarditem_ = new ::std::string;
  }
  rewarditem_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RewardLogCmd.rewarditem)
}
inline ::std::string* RewardLogCmd::mutable_rewarditem() {
  set_has_rewarditem();
  if (rewarditem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarditem_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RewardLogCmd.rewarditem)
  return rewarditem_;
}
inline ::std::string* RewardLogCmd::release_rewarditem() {
  clear_has_rewarditem();
  if (rewarditem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rewarditem_;
    rewarditem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RewardLogCmd::set_allocated_rewarditem(::std::string* rewarditem) {
  if (rewarditem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewarditem_;
  }
  if (rewarditem) {
    set_has_rewarditem();
    rewarditem_ = rewarditem;
  } else {
    clear_has_rewarditem();
    rewarditem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RewardLogCmd.rewarditem)
}

// repeated uint32 mark = 15;
inline int RewardLogCmd::mark_size() const {
  return mark_.size();
}
inline void RewardLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 RewardLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.mark)
  return mark_.Get(index);
}
inline void RewardLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.mark)
}
inline void RewardLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.RewardLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RewardLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.RewardLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RewardLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.RewardLogCmd.mark)
  return &mark_;
}

// optional string logid = 16;
inline bool RewardLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RewardLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RewardLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RewardLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& RewardLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardLogCmd.logid)
  return *logid_;
}
inline void RewardLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RewardLogCmd.logid)
}
inline void RewardLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RewardLogCmd.logid)
}
inline void RewardLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RewardLogCmd.logid)
}
inline ::std::string* RewardLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RewardLogCmd.logid)
  return logid_;
}
inline ::std::string* RewardLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RewardLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RewardLogCmd.logid)
}

// -------------------------------------------------------------------

// MailLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool MailLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command MailLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void MailLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = MAIL_LOG_CMD];
inline bool MailLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailLogCmd::clear_param() {
  param_ = 44;
  clear_has_param();
}
inline ::Cmd::LogParam MailLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void MailLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.param)
}

// optional uint32 cid = 3;
inline bool MailLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MailLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MailLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MailLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 MailLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.cid)
  return cid_;
}
inline void MailLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool MailLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MailLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MailLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MailLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 MailLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.sid)
  return sid_;
}
inline void MailLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool MailLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MailLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MailLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MailLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 MailLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.hid)
  return hid_;
}
inline void MailLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.hid)
}

// optional string account = 6;
inline bool MailLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MailLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MailLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MailLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& MailLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.account)
  return *account_;
}
inline void MailLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.account)
}
inline void MailLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MailLogCmd.account)
}
inline void MailLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MailLogCmd.account)
}
inline ::std::string* MailLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MailLogCmd.account)
  return account_;
}
inline ::std::string* MailLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MailLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MailLogCmd.account)
}

// optional uint64 pid = 7;
inline bool MailLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MailLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MailLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MailLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 MailLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.pid)
  return pid_;
}
inline void MailLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool MailLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MailLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MailLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MailLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 MailLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.ispay)
  return ispay_;
}
inline void MailLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool MailLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MailLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MailLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MailLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 MailLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.time)
  return time_;
}
inline void MailLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.time)
}

// optional uint64 eid = 10;
inline bool MailLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MailLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MailLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MailLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 MailLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.eid)
  return eid_;
}
inline void MailLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool MailLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MailLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MailLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MailLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 MailLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.etype)
  return etype_;
}
inline void MailLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.etype)
}

// optional uint64 id = 12;
inline bool MailLogCmd::has_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MailLogCmd::set_has_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MailLogCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MailLogCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 MailLogCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.id)
  return id_;
}
inline void MailLogCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.id)
}

// optional uint64 sysid = 13;
inline bool MailLogCmd::has_sysid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MailLogCmd::set_has_sysid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MailLogCmd::clear_has_sysid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MailLogCmd::clear_sysid() {
  sysid_ = GOOGLE_ULONGLONG(0);
  clear_has_sysid();
}
inline ::google::protobuf::uint64 MailLogCmd::sysid() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.sysid)
  return sysid_;
}
inline void MailLogCmd::set_sysid(::google::protobuf::uint64 value) {
  set_has_sysid();
  sysid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.sysid)
}

// optional uint32 mailtype = 14;
inline bool MailLogCmd::has_mailtype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MailLogCmd::set_has_mailtype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MailLogCmd::clear_has_mailtype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MailLogCmd::clear_mailtype() {
  mailtype_ = 0u;
  clear_has_mailtype();
}
inline ::google::protobuf::uint32 MailLogCmd::mailtype() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.mailtype)
  return mailtype_;
}
inline void MailLogCmd::set_mailtype(::google::protobuf::uint32 value) {
  set_has_mailtype();
  mailtype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.mailtype)
}

// optional string title = 15;
inline bool MailLogCmd::has_title() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MailLogCmd::set_has_title() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MailLogCmd::clear_has_title() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MailLogCmd::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& MailLogCmd::title() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.title)
  return *title_;
}
inline void MailLogCmd::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.title)
}
inline void MailLogCmd::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MailLogCmd.title)
}
inline void MailLogCmd::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MailLogCmd.title)
}
inline ::std::string* MailLogCmd::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MailLogCmd.title)
  return title_;
}
inline ::std::string* MailLogCmd::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MailLogCmd::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MailLogCmd.title)
}

// optional string rewarditem = 16;
inline bool MailLogCmd::has_rewarditem() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MailLogCmd::set_has_rewarditem() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MailLogCmd::clear_has_rewarditem() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MailLogCmd::clear_rewarditem() {
  if (rewarditem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarditem_->clear();
  }
  clear_has_rewarditem();
}
inline const ::std::string& MailLogCmd::rewarditem() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.rewarditem)
  return *rewarditem_;
}
inline void MailLogCmd::set_rewarditem(const ::std::string& value) {
  set_has_rewarditem();
  if (rewarditem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarditem_ = new ::std::string;
  }
  rewarditem_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.rewarditem)
}
inline void MailLogCmd::set_rewarditem(const char* value) {
  set_has_rewarditem();
  if (rewarditem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarditem_ = new ::std::string;
  }
  rewarditem_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MailLogCmd.rewarditem)
}
inline void MailLogCmd::set_rewarditem(const char* value, size_t size) {
  set_has_rewarditem();
  if (rewarditem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarditem_ = new ::std::string;
  }
  rewarditem_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MailLogCmd.rewarditem)
}
inline ::std::string* MailLogCmd::mutable_rewarditem() {
  set_has_rewarditem();
  if (rewarditem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarditem_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MailLogCmd.rewarditem)
  return rewarditem_;
}
inline ::std::string* MailLogCmd::release_rewarditem() {
  clear_has_rewarditem();
  if (rewarditem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rewarditem_;
    rewarditem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MailLogCmd::set_allocated_rewarditem(::std::string* rewarditem) {
  if (rewarditem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewarditem_;
  }
  if (rewarditem) {
    set_has_rewarditem();
    rewarditem_ = rewarditem;
  } else {
    clear_has_rewarditem();
    rewarditem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MailLogCmd.rewarditem)
}

// repeated uint32 mark = 17;
inline int MailLogCmd::mark_size() const {
  return mark_.size();
}
inline void MailLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 MailLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.mark)
  return mark_.Get(index);
}
inline void MailLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.mark)
}
inline void MailLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.MailLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MailLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.MailLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MailLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MailLogCmd.mark)
  return &mark_;
}

// optional string logid = 18;
inline bool MailLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MailLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MailLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MailLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& MailLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.MailLogCmd.logid)
  return *logid_;
}
inline void MailLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MailLogCmd.logid)
}
inline void MailLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MailLogCmd.logid)
}
inline void MailLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MailLogCmd.logid)
}
inline ::std::string* MailLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MailLogCmd.logid)
  return logid_;
}
inline ::std::string* MailLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MailLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MailLogCmd.logid)
}

// -------------------------------------------------------------------

// DojoLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool DojoLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DojoLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DojoLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DojoLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command DojoLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DojoLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = DOJO_LOG_CMD];
inline bool DojoLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DojoLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DojoLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DojoLogCmd::clear_param() {
  param_ = 45;
  clear_has_param();
}
inline ::Cmd::LogParam DojoLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void DojoLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.param)
}

// optional uint32 cid = 3;
inline bool DojoLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DojoLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DojoLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DojoLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 DojoLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.cid)
  return cid_;
}
inline void DojoLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool DojoLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DojoLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DojoLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DojoLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 DojoLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.sid)
  return sid_;
}
inline void DojoLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool DojoLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DojoLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DojoLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DojoLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 DojoLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.hid)
  return hid_;
}
inline void DojoLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.hid)
}

// optional string account = 6;
inline bool DojoLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DojoLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DojoLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DojoLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& DojoLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.account)
  return *account_;
}
inline void DojoLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.account)
}
inline void DojoLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.DojoLogCmd.account)
}
inline void DojoLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.DojoLogCmd.account)
}
inline ::std::string* DojoLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.DojoLogCmd.account)
  return account_;
}
inline ::std::string* DojoLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DojoLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.DojoLogCmd.account)
}

// optional uint64 pid = 7;
inline bool DojoLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DojoLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DojoLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DojoLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 DojoLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.pid)
  return pid_;
}
inline void DojoLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool DojoLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DojoLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DojoLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DojoLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 DojoLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.ispay)
  return ispay_;
}
inline void DojoLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool DojoLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DojoLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DojoLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DojoLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 DojoLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.time)
  return time_;
}
inline void DojoLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.time)
}

// optional uint64 eid = 10;
inline bool DojoLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DojoLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DojoLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DojoLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 DojoLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.eid)
  return eid_;
}
inline void DojoLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool DojoLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DojoLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DojoLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DojoLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 DojoLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.etype)
  return etype_;
}
inline void DojoLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.etype)
}

// optional uint32 dojoid = 12;
inline bool DojoLogCmd::has_dojoid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DojoLogCmd::set_has_dojoid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DojoLogCmd::clear_has_dojoid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DojoLogCmd::clear_dojoid() {
  dojoid_ = 0u;
  clear_has_dojoid();
}
inline ::google::protobuf::uint32 DojoLogCmd::dojoid() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.dojoid)
  return dojoid_;
}
inline void DojoLogCmd::set_dojoid(::google::protobuf::uint32 value) {
  set_has_dojoid();
  dojoid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.dojoid)
}

// optional uint32 mapid = 13;
inline bool DojoLogCmd::has_mapid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DojoLogCmd::set_has_mapid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DojoLogCmd::clear_has_mapid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DojoLogCmd::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 DojoLogCmd::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.mapid)
  return mapid_;
}
inline void DojoLogCmd::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.mapid)
}

// optional uint32 passtype = 14;
inline bool DojoLogCmd::has_passtype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DojoLogCmd::set_has_passtype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DojoLogCmd::clear_has_passtype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DojoLogCmd::clear_passtype() {
  passtype_ = 0u;
  clear_has_passtype();
}
inline ::google::protobuf::uint32 DojoLogCmd::passtype() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.passtype)
  return passtype_;
}
inline void DojoLogCmd::set_passtype(::google::protobuf::uint32 value) {
  set_has_passtype();
  passtype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.passtype)
}

// optional uint32 level = 15;
inline bool DojoLogCmd::has_level() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DojoLogCmd::set_has_level() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DojoLogCmd::clear_has_level() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DojoLogCmd::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 DojoLogCmd::level() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.level)
  return level_;
}
inline void DojoLogCmd::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.level)
}

// repeated uint32 mark = 16;
inline int DojoLogCmd::mark_size() const {
  return mark_.size();
}
inline void DojoLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 DojoLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.mark)
  return mark_.Get(index);
}
inline void DojoLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.mark)
}
inline void DojoLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.DojoLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DojoLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.DojoLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DojoLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.DojoLogCmd.mark)
  return &mark_;
}

// optional string logid = 17;
inline bool DojoLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DojoLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DojoLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DojoLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& DojoLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.DojoLogCmd.logid)
  return *logid_;
}
inline void DojoLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.DojoLogCmd.logid)
}
inline void DojoLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.DojoLogCmd.logid)
}
inline void DojoLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.DojoLogCmd.logid)
}
inline ::std::string* DojoLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.DojoLogCmd.logid)
  return logid_;
}
inline ::std::string* DojoLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DojoLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.DojoLogCmd.logid)
}

// -------------------------------------------------------------------

// EnchantLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool EnchantLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnchantLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnchantLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnchantLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command EnchantLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EnchantLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = ENCHANT_LOG_CMD];
inline bool EnchantLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnchantLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnchantLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnchantLogCmd::clear_param() {
  param_ = 46;
  clear_has_param();
}
inline ::Cmd::LogParam EnchantLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void EnchantLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.param)
}

// optional uint32 cid = 3;
inline bool EnchantLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnchantLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnchantLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnchantLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 EnchantLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.cid)
  return cid_;
}
inline void EnchantLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool EnchantLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnchantLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnchantLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnchantLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 EnchantLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.sid)
  return sid_;
}
inline void EnchantLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool EnchantLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnchantLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EnchantLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EnchantLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 EnchantLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.hid)
  return hid_;
}
inline void EnchantLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.hid)
}

// optional string account = 6;
inline bool EnchantLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EnchantLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EnchantLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EnchantLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& EnchantLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.account)
  return *account_;
}
inline void EnchantLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.account)
}
inline void EnchantLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EnchantLogCmd.account)
}
inline void EnchantLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EnchantLogCmd.account)
}
inline ::std::string* EnchantLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EnchantLogCmd.account)
  return account_;
}
inline ::std::string* EnchantLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EnchantLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EnchantLogCmd.account)
}

// optional uint64 pid = 7;
inline bool EnchantLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EnchantLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EnchantLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EnchantLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 EnchantLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.pid)
  return pid_;
}
inline void EnchantLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool EnchantLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EnchantLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EnchantLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EnchantLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 EnchantLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.ispay)
  return ispay_;
}
inline void EnchantLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool EnchantLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EnchantLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EnchantLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EnchantLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 EnchantLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.time)
  return time_;
}
inline void EnchantLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.time)
}

// optional uint64 eid = 10;
inline bool EnchantLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EnchantLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EnchantLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EnchantLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 EnchantLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.eid)
  return eid_;
}
inline void EnchantLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool EnchantLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EnchantLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EnchantLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EnchantLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 EnchantLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.etype)
  return etype_;
}
inline void EnchantLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.etype)
}

// optional string equipguid = 12;
inline bool EnchantLogCmd::has_equipguid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EnchantLogCmd::set_has_equipguid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EnchantLogCmd::clear_has_equipguid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EnchantLogCmd::clear_equipguid() {
  if (equipguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipguid_->clear();
  }
  clear_has_equipguid();
}
inline const ::std::string& EnchantLogCmd::equipguid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.equipguid)
  return *equipguid_;
}
inline void EnchantLogCmd::set_equipguid(const ::std::string& value) {
  set_has_equipguid();
  if (equipguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipguid_ = new ::std::string;
  }
  equipguid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.equipguid)
}
inline void EnchantLogCmd::set_equipguid(const char* value) {
  set_has_equipguid();
  if (equipguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipguid_ = new ::std::string;
  }
  equipguid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EnchantLogCmd.equipguid)
}
inline void EnchantLogCmd::set_equipguid(const char* value, size_t size) {
  set_has_equipguid();
  if (equipguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipguid_ = new ::std::string;
  }
  equipguid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EnchantLogCmd.equipguid)
}
inline ::std::string* EnchantLogCmd::mutable_equipguid() {
  set_has_equipguid();
  if (equipguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipguid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EnchantLogCmd.equipguid)
  return equipguid_;
}
inline ::std::string* EnchantLogCmd::release_equipguid() {
  clear_has_equipguid();
  if (equipguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = equipguid_;
    equipguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EnchantLogCmd::set_allocated_equipguid(::std::string* equipguid) {
  if (equipguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete equipguid_;
  }
  if (equipguid) {
    set_has_equipguid();
    equipguid_ = equipguid;
  } else {
    clear_has_equipguid();
    equipguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EnchantLogCmd.equipguid)
}

// optional uint32 itemid = 23;
inline bool EnchantLogCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EnchantLogCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EnchantLogCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EnchantLogCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 EnchantLogCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.itemid)
  return itemid_;
}
inline void EnchantLogCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.itemid)
}

// optional uint32 enchanttype = 13;
inline bool EnchantLogCmd::has_enchanttype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EnchantLogCmd::set_has_enchanttype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EnchantLogCmd::clear_has_enchanttype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EnchantLogCmd::clear_enchanttype() {
  enchanttype_ = 0u;
  clear_has_enchanttype();
}
inline ::google::protobuf::uint32 EnchantLogCmd::enchanttype() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.enchanttype)
  return enchanttype_;
}
inline void EnchantLogCmd::set_enchanttype(::google::protobuf::uint32 value) {
  set_has_enchanttype();
  enchanttype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.enchanttype)
}

// optional string oldattr = 14;
inline bool EnchantLogCmd::has_oldattr() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EnchantLogCmd::set_has_oldattr() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EnchantLogCmd::clear_has_oldattr() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EnchantLogCmd::clear_oldattr() {
  if (oldattr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldattr_->clear();
  }
  clear_has_oldattr();
}
inline const ::std::string& EnchantLogCmd::oldattr() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.oldattr)
  return *oldattr_;
}
inline void EnchantLogCmd::set_oldattr(const ::std::string& value) {
  set_has_oldattr();
  if (oldattr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldattr_ = new ::std::string;
  }
  oldattr_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.oldattr)
}
inline void EnchantLogCmd::set_oldattr(const char* value) {
  set_has_oldattr();
  if (oldattr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldattr_ = new ::std::string;
  }
  oldattr_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EnchantLogCmd.oldattr)
}
inline void EnchantLogCmd::set_oldattr(const char* value, size_t size) {
  set_has_oldattr();
  if (oldattr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldattr_ = new ::std::string;
  }
  oldattr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EnchantLogCmd.oldattr)
}
inline ::std::string* EnchantLogCmd::mutable_oldattr() {
  set_has_oldattr();
  if (oldattr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldattr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EnchantLogCmd.oldattr)
  return oldattr_;
}
inline ::std::string* EnchantLogCmd::release_oldattr() {
  clear_has_oldattr();
  if (oldattr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = oldattr_;
    oldattr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EnchantLogCmd::set_allocated_oldattr(::std::string* oldattr) {
  if (oldattr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldattr_;
  }
  if (oldattr) {
    set_has_oldattr();
    oldattr_ = oldattr;
  } else {
    clear_has_oldattr();
    oldattr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EnchantLogCmd.oldattr)
}

// optional string newattr = 15;
inline bool EnchantLogCmd::has_newattr() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EnchantLogCmd::set_has_newattr() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EnchantLogCmd::clear_has_newattr() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EnchantLogCmd::clear_newattr() {
  if (newattr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newattr_->clear();
  }
  clear_has_newattr();
}
inline const ::std::string& EnchantLogCmd::newattr() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.newattr)
  return *newattr_;
}
inline void EnchantLogCmd::set_newattr(const ::std::string& value) {
  set_has_newattr();
  if (newattr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newattr_ = new ::std::string;
  }
  newattr_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.newattr)
}
inline void EnchantLogCmd::set_newattr(const char* value) {
  set_has_newattr();
  if (newattr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newattr_ = new ::std::string;
  }
  newattr_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EnchantLogCmd.newattr)
}
inline void EnchantLogCmd::set_newattr(const char* value, size_t size) {
  set_has_newattr();
  if (newattr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newattr_ = new ::std::string;
  }
  newattr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EnchantLogCmd.newattr)
}
inline ::std::string* EnchantLogCmd::mutable_newattr() {
  set_has_newattr();
  if (newattr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newattr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EnchantLogCmd.newattr)
  return newattr_;
}
inline ::std::string* EnchantLogCmd::release_newattr() {
  clear_has_newattr();
  if (newattr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = newattr_;
    newattr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EnchantLogCmd::set_allocated_newattr(::std::string* newattr) {
  if (newattr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newattr_;
  }
  if (newattr) {
    set_has_newattr();
    newattr_ = newattr;
  } else {
    clear_has_newattr();
    newattr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EnchantLogCmd.newattr)
}

// optional string oldbufid = 16;
inline bool EnchantLogCmd::has_oldbufid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void EnchantLogCmd::set_has_oldbufid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void EnchantLogCmd::clear_has_oldbufid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void EnchantLogCmd::clear_oldbufid() {
  if (oldbufid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldbufid_->clear();
  }
  clear_has_oldbufid();
}
inline const ::std::string& EnchantLogCmd::oldbufid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.oldbufid)
  return *oldbufid_;
}
inline void EnchantLogCmd::set_oldbufid(const ::std::string& value) {
  set_has_oldbufid();
  if (oldbufid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldbufid_ = new ::std::string;
  }
  oldbufid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.oldbufid)
}
inline void EnchantLogCmd::set_oldbufid(const char* value) {
  set_has_oldbufid();
  if (oldbufid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldbufid_ = new ::std::string;
  }
  oldbufid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EnchantLogCmd.oldbufid)
}
inline void EnchantLogCmd::set_oldbufid(const char* value, size_t size) {
  set_has_oldbufid();
  if (oldbufid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldbufid_ = new ::std::string;
  }
  oldbufid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EnchantLogCmd.oldbufid)
}
inline ::std::string* EnchantLogCmd::mutable_oldbufid() {
  set_has_oldbufid();
  if (oldbufid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldbufid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EnchantLogCmd.oldbufid)
  return oldbufid_;
}
inline ::std::string* EnchantLogCmd::release_oldbufid() {
  clear_has_oldbufid();
  if (oldbufid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = oldbufid_;
    oldbufid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EnchantLogCmd::set_allocated_oldbufid(::std::string* oldbufid) {
  if (oldbufid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldbufid_;
  }
  if (oldbufid) {
    set_has_oldbufid();
    oldbufid_ = oldbufid;
  } else {
    clear_has_oldbufid();
    oldbufid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EnchantLogCmd.oldbufid)
}

// optional string newbufid = 17;
inline bool EnchantLogCmd::has_newbufid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void EnchantLogCmd::set_has_newbufid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void EnchantLogCmd::clear_has_newbufid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void EnchantLogCmd::clear_newbufid() {
  if (newbufid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newbufid_->clear();
  }
  clear_has_newbufid();
}
inline const ::std::string& EnchantLogCmd::newbufid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.newbufid)
  return *newbufid_;
}
inline void EnchantLogCmd::set_newbufid(const ::std::string& value) {
  set_has_newbufid();
  if (newbufid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newbufid_ = new ::std::string;
  }
  newbufid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.newbufid)
}
inline void EnchantLogCmd::set_newbufid(const char* value) {
  set_has_newbufid();
  if (newbufid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newbufid_ = new ::std::string;
  }
  newbufid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EnchantLogCmd.newbufid)
}
inline void EnchantLogCmd::set_newbufid(const char* value, size_t size) {
  set_has_newbufid();
  if (newbufid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newbufid_ = new ::std::string;
  }
  newbufid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EnchantLogCmd.newbufid)
}
inline ::std::string* EnchantLogCmd::mutable_newbufid() {
  set_has_newbufid();
  if (newbufid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newbufid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EnchantLogCmd.newbufid)
  return newbufid_;
}
inline ::std::string* EnchantLogCmd::release_newbufid() {
  clear_has_newbufid();
  if (newbufid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = newbufid_;
    newbufid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EnchantLogCmd::set_allocated_newbufid(::std::string* newbufid) {
  if (newbufid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newbufid_;
  }
  if (newbufid) {
    set_has_newbufid();
    newbufid_ = newbufid;
  } else {
    clear_has_newbufid();
    newbufid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EnchantLogCmd.newbufid)
}

// optional uint32 costitemid = 18;
inline bool EnchantLogCmd::has_costitemid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void EnchantLogCmd::set_has_costitemid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void EnchantLogCmd::clear_has_costitemid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void EnchantLogCmd::clear_costitemid() {
  costitemid_ = 0u;
  clear_has_costitemid();
}
inline ::google::protobuf::uint32 EnchantLogCmd::costitemid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.costitemid)
  return costitemid_;
}
inline void EnchantLogCmd::set_costitemid(::google::protobuf::uint32 value) {
  set_has_costitemid();
  costitemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.costitemid)
}

// optional uint32 costitemcount = 19;
inline bool EnchantLogCmd::has_costitemcount() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void EnchantLogCmd::set_has_costitemcount() {
  _has_bits_[0] |= 0x00080000u;
}
inline void EnchantLogCmd::clear_has_costitemcount() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void EnchantLogCmd::clear_costitemcount() {
  costitemcount_ = 0u;
  clear_has_costitemcount();
}
inline ::google::protobuf::uint32 EnchantLogCmd::costitemcount() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.costitemcount)
  return costitemcount_;
}
inline void EnchantLogCmd::set_costitemcount(::google::protobuf::uint32 value) {
  set_has_costitemcount();
  costitemcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.costitemcount)
}

// optional uint32 costmoney = 20;
inline bool EnchantLogCmd::has_costmoney() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void EnchantLogCmd::set_has_costmoney() {
  _has_bits_[0] |= 0x00100000u;
}
inline void EnchantLogCmd::clear_has_costmoney() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void EnchantLogCmd::clear_costmoney() {
  costmoney_ = 0u;
  clear_has_costmoney();
}
inline ::google::protobuf::uint32 EnchantLogCmd::costmoney() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.costmoney)
  return costmoney_;
}
inline void EnchantLogCmd::set_costmoney(::google::protobuf::uint32 value) {
  set_has_costmoney();
  costmoney_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.costmoney)
}

// repeated uint32 mark = 21;
inline int EnchantLogCmd::mark_size() const {
  return mark_.size();
}
inline void EnchantLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 EnchantLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.mark)
  return mark_.Get(index);
}
inline void EnchantLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.mark)
}
inline void EnchantLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.EnchantLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
EnchantLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.EnchantLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
EnchantLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EnchantLogCmd.mark)
  return &mark_;
}

// optional string logid = 22;
inline bool EnchantLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void EnchantLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void EnchantLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void EnchantLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& EnchantLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantLogCmd.logid)
  return *logid_;
}
inline void EnchantLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EnchantLogCmd.logid)
}
inline void EnchantLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EnchantLogCmd.logid)
}
inline void EnchantLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EnchantLogCmd.logid)
}
inline ::std::string* EnchantLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EnchantLogCmd.logid)
  return logid_;
}
inline ::std::string* EnchantLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EnchantLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EnchantLogCmd.logid)
}

// -------------------------------------------------------------------

// GuildPrayLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool GuildPrayLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildPrayLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildPrayLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildPrayLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command GuildPrayLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GuildPrayLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = GUILDPRAY_LOG_CMD];
inline bool GuildPrayLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildPrayLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildPrayLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildPrayLogCmd::clear_param() {
  param_ = 47;
  clear_has_param();
}
inline ::Cmd::LogParam GuildPrayLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void GuildPrayLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.param)
}

// optional uint32 cid = 3;
inline bool GuildPrayLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildPrayLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildPrayLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildPrayLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 GuildPrayLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.cid)
  return cid_;
}
inline void GuildPrayLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool GuildPrayLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildPrayLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildPrayLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildPrayLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 GuildPrayLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.sid)
  return sid_;
}
inline void GuildPrayLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool GuildPrayLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildPrayLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildPrayLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildPrayLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 GuildPrayLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.hid)
  return hid_;
}
inline void GuildPrayLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.hid)
}

// optional string account = 6;
inline bool GuildPrayLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildPrayLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildPrayLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildPrayLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& GuildPrayLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.account)
  return *account_;
}
inline void GuildPrayLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.account)
}
inline void GuildPrayLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.GuildPrayLogCmd.account)
}
inline void GuildPrayLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.GuildPrayLogCmd.account)
}
inline ::std::string* GuildPrayLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.GuildPrayLogCmd.account)
  return account_;
}
inline ::std::string* GuildPrayLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GuildPrayLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GuildPrayLogCmd.account)
}

// optional uint64 pid = 7;
inline bool GuildPrayLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildPrayLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildPrayLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildPrayLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 GuildPrayLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.pid)
  return pid_;
}
inline void GuildPrayLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool GuildPrayLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildPrayLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildPrayLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildPrayLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 GuildPrayLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.ispay)
  return ispay_;
}
inline void GuildPrayLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool GuildPrayLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildPrayLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildPrayLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildPrayLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 GuildPrayLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.time)
  return time_;
}
inline void GuildPrayLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.time)
}

// optional uint64 eid = 10;
inline bool GuildPrayLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GuildPrayLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GuildPrayLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GuildPrayLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 GuildPrayLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.eid)
  return eid_;
}
inline void GuildPrayLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool GuildPrayLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GuildPrayLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GuildPrayLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GuildPrayLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 GuildPrayLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.etype)
  return etype_;
}
inline void GuildPrayLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.etype)
}

// optional uint32 prayid = 12;
inline bool GuildPrayLogCmd::has_prayid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GuildPrayLogCmd::set_has_prayid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GuildPrayLogCmd::clear_has_prayid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GuildPrayLogCmd::clear_prayid() {
  prayid_ = 0u;
  clear_has_prayid();
}
inline ::google::protobuf::uint32 GuildPrayLogCmd::prayid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.prayid)
  return prayid_;
}
inline void GuildPrayLogCmd::set_prayid(::google::protobuf::uint32 value) {
  set_has_prayid();
  prayid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.prayid)
}

// optional uint32 addattr = 13;
inline bool GuildPrayLogCmd::has_addattr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GuildPrayLogCmd::set_has_addattr() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GuildPrayLogCmd::clear_has_addattr() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GuildPrayLogCmd::clear_addattr() {
  addattr_ = 0u;
  clear_has_addattr();
}
inline ::google::protobuf::uint32 GuildPrayLogCmd::addattr() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.addattr)
  return addattr_;
}
inline void GuildPrayLogCmd::set_addattr(::google::protobuf::uint32 value) {
  set_has_addattr();
  addattr_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.addattr)
}

// optional uint32 costitem = 14;
inline bool GuildPrayLogCmd::has_costitem() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GuildPrayLogCmd::set_has_costitem() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GuildPrayLogCmd::clear_has_costitem() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GuildPrayLogCmd::clear_costitem() {
  costitem_ = 0u;
  clear_has_costitem();
}
inline ::google::protobuf::uint32 GuildPrayLogCmd::costitem() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.costitem)
  return costitem_;
}
inline void GuildPrayLogCmd::set_costitem(::google::protobuf::uint32 value) {
  set_has_costitem();
  costitem_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.costitem)
}

// optional uint32 costmoney = 15;
inline bool GuildPrayLogCmd::has_costmoney() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GuildPrayLogCmd::set_has_costmoney() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GuildPrayLogCmd::clear_has_costmoney() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GuildPrayLogCmd::clear_costmoney() {
  costmoney_ = 0u;
  clear_has_costmoney();
}
inline ::google::protobuf::uint32 GuildPrayLogCmd::costmoney() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.costmoney)
  return costmoney_;
}
inline void GuildPrayLogCmd::set_costmoney(::google::protobuf::uint32 value) {
  set_has_costmoney();
  costmoney_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.costmoney)
}

// optional uint32 costcon = 16;
inline bool GuildPrayLogCmd::has_costcon() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GuildPrayLogCmd::set_has_costcon() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GuildPrayLogCmd::clear_has_costcon() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GuildPrayLogCmd::clear_costcon() {
  costcon_ = 0u;
  clear_has_costcon();
}
inline ::google::protobuf::uint32 GuildPrayLogCmd::costcon() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.costcon)
  return costcon_;
}
inline void GuildPrayLogCmd::set_costcon(::google::protobuf::uint32 value) {
  set_has_costcon();
  costcon_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.costcon)
}

// repeated uint32 mark = 17;
inline int GuildPrayLogCmd::mark_size() const {
  return mark_.size();
}
inline void GuildPrayLogCmd::clear_mark() {
  mark_.Clear();
}
inline ::google::protobuf::uint32 GuildPrayLogCmd::mark(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.mark)
  return mark_.Get(index);
}
inline void GuildPrayLogCmd::set_mark(int index, ::google::protobuf::uint32 value) {
  mark_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.mark)
}
inline void GuildPrayLogCmd::add_mark(::google::protobuf::uint32 value) {
  mark_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.GuildPrayLogCmd.mark)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GuildPrayLogCmd::mark() const {
  // @@protoc_insertion_point(field_list:Cmd.GuildPrayLogCmd.mark)
  return mark_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GuildPrayLogCmd::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.GuildPrayLogCmd.mark)
  return &mark_;
}

// optional string logid = 18;
inline bool GuildPrayLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GuildPrayLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GuildPrayLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GuildPrayLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& GuildPrayLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildPrayLogCmd.logid)
  return *logid_;
}
inline void GuildPrayLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.GuildPrayLogCmd.logid)
}
inline void GuildPrayLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.GuildPrayLogCmd.logid)
}
inline void GuildPrayLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.GuildPrayLogCmd.logid)
}
inline ::std::string* GuildPrayLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.GuildPrayLogCmd.logid)
  return logid_;
}
inline ::std::string* GuildPrayLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GuildPrayLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GuildPrayLogCmd.logid)
}

// -------------------------------------------------------------------

// UseSkillLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool UseSkillLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseSkillLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseSkillLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseSkillLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command UseSkillLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UseSkillLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UseSkillLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseSkillLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = USESKILL_LOG_CMD];
inline bool UseSkillLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseSkillLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseSkillLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseSkillLogCmd::clear_param() {
  param_ = 48;
  clear_has_param();
}
inline ::Cmd::LogParam UseSkillLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UseSkillLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void UseSkillLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseSkillLogCmd.param)
}

// optional uint32 cid = 3;
inline bool UseSkillLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UseSkillLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UseSkillLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UseSkillLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 UseSkillLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.UseSkillLogCmd.cid)
  return cid_;
}
inline void UseSkillLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseSkillLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool UseSkillLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UseSkillLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UseSkillLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UseSkillLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 UseSkillLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.UseSkillLogCmd.sid)
  return sid_;
}
inline void UseSkillLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseSkillLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool UseSkillLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UseSkillLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UseSkillLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UseSkillLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 UseSkillLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.UseSkillLogCmd.hid)
  return hid_;
}
inline void UseSkillLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseSkillLogCmd.hid)
}

// optional string account = 6;
inline bool UseSkillLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UseSkillLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UseSkillLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UseSkillLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& UseSkillLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.UseSkillLogCmd.account)
  return *account_;
}
inline void UseSkillLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UseSkillLogCmd.account)
}
inline void UseSkillLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UseSkillLogCmd.account)
}
inline void UseSkillLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UseSkillLogCmd.account)
}
inline ::std::string* UseSkillLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UseSkillLogCmd.account)
  return account_;
}
inline ::std::string* UseSkillLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UseSkillLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UseSkillLogCmd.account)
}

// optional uint64 pid = 7;
inline bool UseSkillLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UseSkillLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UseSkillLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UseSkillLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 UseSkillLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.UseSkillLogCmd.pid)
  return pid_;
}
inline void UseSkillLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseSkillLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool UseSkillLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UseSkillLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UseSkillLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UseSkillLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 UseSkillLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.UseSkillLogCmd.ispay)
  return ispay_;
}
inline void UseSkillLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseSkillLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool UseSkillLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UseSkillLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UseSkillLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UseSkillLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 UseSkillLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.UseSkillLogCmd.time)
  return time_;
}
inline void UseSkillLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseSkillLogCmd.time)
}

// optional uint64 eid = 10;
inline bool UseSkillLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UseSkillLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UseSkillLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UseSkillLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 UseSkillLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.UseSkillLogCmd.eid)
  return eid_;
}
inline void UseSkillLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseSkillLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool UseSkillLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UseSkillLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UseSkillLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UseSkillLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 UseSkillLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.UseSkillLogCmd.etype)
  return etype_;
}
inline void UseSkillLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseSkillLogCmd.etype)
}

// optional uint32 skillid = 12;
inline bool UseSkillLogCmd::has_skillid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UseSkillLogCmd::set_has_skillid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UseSkillLogCmd::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UseSkillLogCmd::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 UseSkillLogCmd::skillid() const {
  // @@protoc_insertion_point(field_get:Cmd.UseSkillLogCmd.skillid)
  return skillid_;
}
inline void UseSkillLogCmd::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseSkillLogCmd.skillid)
}

// optional string logid = 13;
inline bool UseSkillLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UseSkillLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UseSkillLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UseSkillLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& UseSkillLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.UseSkillLogCmd.logid)
  return *logid_;
}
inline void UseSkillLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UseSkillLogCmd.logid)
}
inline void UseSkillLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UseSkillLogCmd.logid)
}
inline void UseSkillLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UseSkillLogCmd.logid)
}
inline ::std::string* UseSkillLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UseSkillLogCmd.logid)
  return logid_;
}
inline ::std::string* UseSkillLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UseSkillLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UseSkillLogCmd.logid)
}

// -------------------------------------------------------------------

// ActiveLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool ActiveLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActiveLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActiveLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActiveLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command ActiveLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ActiveLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ActiveLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActiveLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = ACTIVE_LOG_CMD];
inline bool ActiveLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActiveLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActiveLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActiveLogCmd::clear_param() {
  param_ = 49;
  clear_has_param();
}
inline ::Cmd::LogParam ActiveLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ActiveLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void ActiveLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActiveLogCmd.param)
}

// optional string channel = 3;
inline bool ActiveLogCmd::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActiveLogCmd::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActiveLogCmd::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActiveLogCmd::clear_channel() {
  if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& ActiveLogCmd::channel() const {
  // @@protoc_insertion_point(field_get:Cmd.ActiveLogCmd.channel)
  return *channel_;
}
inline void ActiveLogCmd::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ActiveLogCmd.channel)
}
inline void ActiveLogCmd::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ActiveLogCmd.channel)
}
inline void ActiveLogCmd::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ActiveLogCmd.channel)
}
inline ::std::string* ActiveLogCmd::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ActiveLogCmd.channel)
  return channel_;
}
inline ::std::string* ActiveLogCmd::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActiveLogCmd::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ActiveLogCmd.channel)
}

// optional string cdkey = 4;
inline bool ActiveLogCmd::has_cdkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActiveLogCmd::set_has_cdkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActiveLogCmd::clear_has_cdkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActiveLogCmd::clear_cdkey() {
  if (cdkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdkey_->clear();
  }
  clear_has_cdkey();
}
inline const ::std::string& ActiveLogCmd::cdkey() const {
  // @@protoc_insertion_point(field_get:Cmd.ActiveLogCmd.cdkey)
  return *cdkey_;
}
inline void ActiveLogCmd::set_cdkey(const ::std::string& value) {
  set_has_cdkey();
  if (cdkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdkey_ = new ::std::string;
  }
  cdkey_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ActiveLogCmd.cdkey)
}
inline void ActiveLogCmd::set_cdkey(const char* value) {
  set_has_cdkey();
  if (cdkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdkey_ = new ::std::string;
  }
  cdkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ActiveLogCmd.cdkey)
}
inline void ActiveLogCmd::set_cdkey(const char* value, size_t size) {
  set_has_cdkey();
  if (cdkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdkey_ = new ::std::string;
  }
  cdkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ActiveLogCmd.cdkey)
}
inline ::std::string* ActiveLogCmd::mutable_cdkey() {
  set_has_cdkey();
  if (cdkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ActiveLogCmd.cdkey)
  return cdkey_;
}
inline ::std::string* ActiveLogCmd::release_cdkey() {
  clear_has_cdkey();
  if (cdkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cdkey_;
    cdkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActiveLogCmd::set_allocated_cdkey(::std::string* cdkey) {
  if (cdkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cdkey_;
  }
  if (cdkey) {
    set_has_cdkey();
    cdkey_ = cdkey;
  } else {
    clear_has_cdkey();
    cdkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ActiveLogCmd.cdkey)
}

// optional string account = 5;
inline bool ActiveLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActiveLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ActiveLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ActiveLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& ActiveLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.ActiveLogCmd.account)
  return *account_;
}
inline void ActiveLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ActiveLogCmd.account)
}
inline void ActiveLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ActiveLogCmd.account)
}
inline void ActiveLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ActiveLogCmd.account)
}
inline ::std::string* ActiveLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ActiveLogCmd.account)
  return account_;
}
inline ::std::string* ActiveLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActiveLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ActiveLogCmd.account)
}

// optional uint32 time = 6;
inline bool ActiveLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ActiveLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ActiveLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ActiveLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ActiveLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ActiveLogCmd.time)
  return time_;
}
inline void ActiveLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActiveLogCmd.time)
}

// optional string logid = 7;
inline bool ActiveLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ActiveLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ActiveLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ActiveLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& ActiveLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.ActiveLogCmd.logid)
  return *logid_;
}
inline void ActiveLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ActiveLogCmd.logid)
}
inline void ActiveLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ActiveLogCmd.logid)
}
inline void ActiveLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ActiveLogCmd.logid)
}
inline ::std::string* ActiveLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ActiveLogCmd.logid)
  return logid_;
}
inline ::std::string* ActiveLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActiveLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ActiveLogCmd.logid)
}

// -------------------------------------------------------------------

// TradeLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool TradeLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command TradeLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TradeLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = TRADE_LOG_CMD];
inline bool TradeLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradeLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradeLogCmd::clear_param() {
  param_ = 50;
  clear_has_param();
}
inline ::Cmd::LogParam TradeLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void TradeLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.param)
}

// optional uint32 cid = 3;
inline bool TradeLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TradeLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TradeLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TradeLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 TradeLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.cid)
  return cid_;
}
inline void TradeLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool TradeLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TradeLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TradeLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TradeLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 TradeLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.sid)
  return sid_;
}
inline void TradeLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.sid)
}

// optional uint64 pid = 5;
inline bool TradeLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TradeLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TradeLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TradeLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 TradeLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.pid)
  return pid_;
}
inline void TradeLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.pid)
}

// optional uint32 time = 6;
inline bool TradeLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TradeLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TradeLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TradeLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 TradeLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.time)
  return time_;
}
inline void TradeLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.time)
}

// optional uint32 type = 7;
inline bool TradeLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TradeLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TradeLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TradeLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TradeLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.type)
  return type_;
}
inline void TradeLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.type)
}

// optional uint32 itemid = 8;
inline bool TradeLogCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TradeLogCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TradeLogCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TradeLogCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TradeLogCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.itemid)
  return itemid_;
}
inline void TradeLogCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.itemid)
}

// optional uint32 count = 9;
inline bool TradeLogCmd::has_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TradeLogCmd::set_has_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TradeLogCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TradeLogCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 TradeLogCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.count)
  return count_;
}
inline void TradeLogCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.count)
}

// optional uint32 price = 10;
inline bool TradeLogCmd::has_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TradeLogCmd::set_has_price() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TradeLogCmd::clear_has_price() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TradeLogCmd::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 TradeLogCmd::price() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.price)
  return price_;
}
inline void TradeLogCmd::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.price)
}

// optional uint32 tax = 11;
inline bool TradeLogCmd::has_tax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TradeLogCmd::set_has_tax() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TradeLogCmd::clear_has_tax() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TradeLogCmd::clear_tax() {
  tax_ = 0u;
  clear_has_tax();
}
inline ::google::protobuf::uint32 TradeLogCmd::tax() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.tax)
  return tax_;
}
inline void TradeLogCmd::set_tax(::google::protobuf::uint32 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.tax)
}

// optional uint32 moneycount = 12;
inline bool TradeLogCmd::has_moneycount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TradeLogCmd::set_has_moneycount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TradeLogCmd::clear_has_moneycount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TradeLogCmd::clear_moneycount() {
  moneycount_ = 0u;
  clear_has_moneycount();
}
inline ::google::protobuf::uint32 TradeLogCmd::moneycount() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.moneycount)
  return moneycount_;
}
inline void TradeLogCmd::set_moneycount(::google::protobuf::uint32 value) {
  set_has_moneycount();
  moneycount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.moneycount)
}

// optional string iteminfo = 13;
inline bool TradeLogCmd::has_iteminfo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TradeLogCmd::set_has_iteminfo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TradeLogCmd::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TradeLogCmd::clear_iteminfo() {
  if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_->clear();
  }
  clear_has_iteminfo();
}
inline const ::std::string& TradeLogCmd::iteminfo() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.iteminfo)
  return *iteminfo_;
}
inline void TradeLogCmd::set_iteminfo(const ::std::string& value) {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  iteminfo_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.iteminfo)
}
inline void TradeLogCmd::set_iteminfo(const char* value) {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  iteminfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradeLogCmd.iteminfo)
}
inline void TradeLogCmd::set_iteminfo(const char* value, size_t size) {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  iteminfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradeLogCmd.iteminfo)
}
inline ::std::string* TradeLogCmd::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradeLogCmd.iteminfo)
  return iteminfo_;
}
inline ::std::string* TradeLogCmd::release_iteminfo() {
  clear_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = iteminfo_;
    iteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradeLogCmd::set_allocated_iteminfo(::std::string* iteminfo) {
  if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iteminfo_;
  }
  if (iteminfo) {
    set_has_iteminfo();
    iteminfo_ = iteminfo;
  } else {
    clear_has_iteminfo();
    iteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeLogCmd.iteminfo)
}

// optional uint64 otherid = 14;
inline bool TradeLogCmd::has_otherid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TradeLogCmd::set_has_otherid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TradeLogCmd::clear_has_otherid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TradeLogCmd::clear_otherid() {
  otherid_ = GOOGLE_ULONGLONG(0);
  clear_has_otherid();
}
inline ::google::protobuf::uint64 TradeLogCmd::otherid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.otherid)
  return otherid_;
}
inline void TradeLogCmd::set_otherid(::google::protobuf::uint64 value) {
  set_has_otherid();
  otherid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.otherid)
}

// optional string logid = 15;
inline bool TradeLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TradeLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TradeLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TradeLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& TradeLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.logid)
  return *logid_;
}
inline void TradeLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.logid)
}
inline void TradeLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradeLogCmd.logid)
}
inline void TradeLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradeLogCmd.logid)
}
inline ::std::string* TradeLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradeLogCmd.logid)
  return logid_;
}
inline ::std::string* TradeLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradeLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeLogCmd.logid)
}

// optional string strotherid = 16;
inline bool TradeLogCmd::has_strotherid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TradeLogCmd::set_has_strotherid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TradeLogCmd::clear_has_strotherid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TradeLogCmd::clear_strotherid() {
  if (strotherid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strotherid_->clear();
  }
  clear_has_strotherid();
}
inline const ::std::string& TradeLogCmd::strotherid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.strotherid)
  return *strotherid_;
}
inline void TradeLogCmd::set_strotherid(const ::std::string& value) {
  set_has_strotherid();
  if (strotherid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strotherid_ = new ::std::string;
  }
  strotherid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.strotherid)
}
inline void TradeLogCmd::set_strotherid(const char* value) {
  set_has_strotherid();
  if (strotherid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strotherid_ = new ::std::string;
  }
  strotherid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradeLogCmd.strotherid)
}
inline void TradeLogCmd::set_strotherid(const char* value, size_t size) {
  set_has_strotherid();
  if (strotherid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strotherid_ = new ::std::string;
  }
  strotherid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradeLogCmd.strotherid)
}
inline ::std::string* TradeLogCmd::mutable_strotherid() {
  set_has_strotherid();
  if (strotherid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strotherid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradeLogCmd.strotherid)
  return strotherid_;
}
inline ::std::string* TradeLogCmd::release_strotherid() {
  clear_has_strotherid();
  if (strotherid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strotherid_;
    strotherid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradeLogCmd::set_allocated_strotherid(::std::string* strotherid) {
  if (strotherid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strotherid_;
  }
  if (strotherid) {
    set_has_strotherid();
    strotherid_ = strotherid;
  } else {
    clear_has_strotherid();
    strotherid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeLogCmd.strotherid)
}

// optional uint64 spend_quota = 17 [default = 0];
inline bool TradeLogCmd::has_spend_quota() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TradeLogCmd::set_has_spend_quota() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TradeLogCmd::clear_has_spend_quota() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TradeLogCmd::clear_spend_quota() {
  spend_quota_ = GOOGLE_ULONGLONG(0);
  clear_has_spend_quota();
}
inline ::google::protobuf::uint64 TradeLogCmd::spend_quota() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeLogCmd.spend_quota)
  return spend_quota_;
}
inline void TradeLogCmd::set_spend_quota(::google::protobuf::uint64 value) {
  set_has_spend_quota();
  spend_quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeLogCmd.spend_quota)
}

// -------------------------------------------------------------------

// DeleteCharLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool DeleteCharLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteCharLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteCharLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteCharLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command DeleteCharLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteCharLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DeleteCharLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeleteCharLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = DELETE_CHAR_LOG_CMD];
inline bool DeleteCharLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteCharLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteCharLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteCharLogCmd::clear_param() {
  param_ = 51;
  clear_has_param();
}
inline ::Cmd::LogParam DeleteCharLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteCharLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void DeleteCharLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeleteCharLogCmd.param)
}

// optional uint32 cid = 3;
inline bool DeleteCharLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeleteCharLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeleteCharLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeleteCharLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 DeleteCharLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteCharLogCmd.cid)
  return cid_;
}
inline void DeleteCharLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeleteCharLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool DeleteCharLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeleteCharLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeleteCharLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeleteCharLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 DeleteCharLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteCharLogCmd.sid)
  return sid_;
}
inline void DeleteCharLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeleteCharLogCmd.sid)
}

// optional string account = 5;
inline bool DeleteCharLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeleteCharLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeleteCharLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeleteCharLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& DeleteCharLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteCharLogCmd.account)
  return *account_;
}
inline void DeleteCharLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.DeleteCharLogCmd.account)
}
inline void DeleteCharLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.DeleteCharLogCmd.account)
}
inline void DeleteCharLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.DeleteCharLogCmd.account)
}
inline ::std::string* DeleteCharLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.DeleteCharLogCmd.account)
  return account_;
}
inline ::std::string* DeleteCharLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteCharLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.DeleteCharLogCmd.account)
}

// optional uint64 pid = 6;
inline bool DeleteCharLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeleteCharLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeleteCharLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeleteCharLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 DeleteCharLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteCharLogCmd.pid)
  return pid_;
}
inline void DeleteCharLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeleteCharLogCmd.pid)
}

// optional uint32 time = 7;
inline bool DeleteCharLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeleteCharLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DeleteCharLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DeleteCharLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 DeleteCharLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteCharLogCmd.time)
  return time_;
}
inline void DeleteCharLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeleteCharLogCmd.time)
}

// optional uint64 eid = 8;
inline bool DeleteCharLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeleteCharLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DeleteCharLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DeleteCharLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 DeleteCharLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteCharLogCmd.eid)
  return eid_;
}
inline void DeleteCharLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeleteCharLogCmd.eid)
}

// optional uint32 etype = 9;
inline bool DeleteCharLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DeleteCharLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DeleteCharLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DeleteCharLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 DeleteCharLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteCharLogCmd.etype)
  return etype_;
}
inline void DeleteCharLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeleteCharLogCmd.etype)
}

// optional string logid = 10;
inline bool DeleteCharLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DeleteCharLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DeleteCharLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DeleteCharLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& DeleteCharLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteCharLogCmd.logid)
  return *logid_;
}
inline void DeleteCharLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.DeleteCharLogCmd.logid)
}
inline void DeleteCharLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.DeleteCharLogCmd.logid)
}
inline void DeleteCharLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.DeleteCharLogCmd.logid)
}
inline ::std::string* DeleteCharLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.DeleteCharLogCmd.logid)
  return logid_;
}
inline ::std::string* DeleteCharLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteCharLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.DeleteCharLogCmd.logid)
}

// -------------------------------------------------------------------

// ComposeLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool ComposeLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComposeLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComposeLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComposeLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command ComposeLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ComposeLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ComposeLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ComposeLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = COMPOSE_LOG_CMD];
inline bool ComposeLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComposeLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComposeLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComposeLogCmd::clear_param() {
  param_ = 52;
  clear_has_param();
}
inline ::Cmd::LogParam ComposeLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ComposeLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void ComposeLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ComposeLogCmd.param)
}

// optional uint32 cid = 3;
inline bool ComposeLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ComposeLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ComposeLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ComposeLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 ComposeLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.ComposeLogCmd.cid)
  return cid_;
}
inline void ComposeLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ComposeLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool ComposeLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ComposeLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ComposeLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ComposeLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 ComposeLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.ComposeLogCmd.sid)
  return sid_;
}
inline void ComposeLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ComposeLogCmd.sid)
}

// optional string account = 5;
inline bool ComposeLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ComposeLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ComposeLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ComposeLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& ComposeLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.ComposeLogCmd.account)
  return *account_;
}
inline void ComposeLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ComposeLogCmd.account)
}
inline void ComposeLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ComposeLogCmd.account)
}
inline void ComposeLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ComposeLogCmd.account)
}
inline ::std::string* ComposeLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ComposeLogCmd.account)
  return account_;
}
inline ::std::string* ComposeLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComposeLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ComposeLogCmd.account)
}

// optional uint64 pid = 6;
inline bool ComposeLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ComposeLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ComposeLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ComposeLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 ComposeLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.ComposeLogCmd.pid)
  return pid_;
}
inline void ComposeLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ComposeLogCmd.pid)
}

// optional uint32 time = 7;
inline bool ComposeLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ComposeLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ComposeLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ComposeLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ComposeLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ComposeLogCmd.time)
  return time_;
}
inline void ComposeLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ComposeLogCmd.time)
}

// optional uint64 eid = 8;
inline bool ComposeLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ComposeLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ComposeLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ComposeLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 ComposeLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.ComposeLogCmd.eid)
  return eid_;
}
inline void ComposeLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ComposeLogCmd.eid)
}

// optional uint32 etype = 9;
inline bool ComposeLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ComposeLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ComposeLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ComposeLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 ComposeLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.ComposeLogCmd.etype)
  return etype_;
}
inline void ComposeLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ComposeLogCmd.etype)
}

// optional uint32 itemid = 10;
inline bool ComposeLogCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ComposeLogCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ComposeLogCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ComposeLogCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 ComposeLogCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.ComposeLogCmd.itemid)
  return itemid_;
}
inline void ComposeLogCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ComposeLogCmd.itemid)
}

// optional string itemguid = 11;
inline bool ComposeLogCmd::has_itemguid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ComposeLogCmd::set_has_itemguid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ComposeLogCmd::clear_has_itemguid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ComposeLogCmd::clear_itemguid() {
  if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_->clear();
  }
  clear_has_itemguid();
}
inline const ::std::string& ComposeLogCmd::itemguid() const {
  // @@protoc_insertion_point(field_get:Cmd.ComposeLogCmd.itemguid)
  return *itemguid_;
}
inline void ComposeLogCmd::set_itemguid(const ::std::string& value) {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  itemguid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ComposeLogCmd.itemguid)
}
inline void ComposeLogCmd::set_itemguid(const char* value) {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  itemguid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ComposeLogCmd.itemguid)
}
inline void ComposeLogCmd::set_itemguid(const char* value, size_t size) {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  itemguid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ComposeLogCmd.itemguid)
}
inline ::std::string* ComposeLogCmd::mutable_itemguid() {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ComposeLogCmd.itemguid)
  return itemguid_;
}
inline ::std::string* ComposeLogCmd::release_itemguid() {
  clear_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemguid_;
    itemguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComposeLogCmd::set_allocated_itemguid(::std::string* itemguid) {
  if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemguid_;
  }
  if (itemguid) {
    set_has_itemguid();
    itemguid_ = itemguid;
  } else {
    clear_has_itemguid();
    itemguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ComposeLogCmd.itemguid)
}

// optional string cost = 12;
inline bool ComposeLogCmd::has_cost() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ComposeLogCmd::set_has_cost() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ComposeLogCmd::clear_has_cost() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ComposeLogCmd::clear_cost() {
  if (cost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_->clear();
  }
  clear_has_cost();
}
inline const ::std::string& ComposeLogCmd::cost() const {
  // @@protoc_insertion_point(field_get:Cmd.ComposeLogCmd.cost)
  return *cost_;
}
inline void ComposeLogCmd::set_cost(const ::std::string& value) {
  set_has_cost();
  if (cost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_ = new ::std::string;
  }
  cost_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ComposeLogCmd.cost)
}
inline void ComposeLogCmd::set_cost(const char* value) {
  set_has_cost();
  if (cost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_ = new ::std::string;
  }
  cost_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ComposeLogCmd.cost)
}
inline void ComposeLogCmd::set_cost(const char* value, size_t size) {
  set_has_cost();
  if (cost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_ = new ::std::string;
  }
  cost_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ComposeLogCmd.cost)
}
inline ::std::string* ComposeLogCmd::mutable_cost() {
  set_has_cost();
  if (cost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ComposeLogCmd.cost)
  return cost_;
}
inline ::std::string* ComposeLogCmd::release_cost() {
  clear_has_cost();
  if (cost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cost_;
    cost_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComposeLogCmd::set_allocated_cost(::std::string* cost) {
  if (cost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cost_;
  }
  if (cost) {
    set_has_cost();
    cost_ = cost;
  } else {
    clear_has_cost();
    cost_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ComposeLogCmd.cost)
}

// optional string logid = 13;
inline bool ComposeLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ComposeLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ComposeLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ComposeLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& ComposeLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.ComposeLogCmd.logid)
  return *logid_;
}
inline void ComposeLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ComposeLogCmd.logid)
}
inline void ComposeLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ComposeLogCmd.logid)
}
inline void ComposeLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ComposeLogCmd.logid)
}
inline ::std::string* ComposeLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ComposeLogCmd.logid)
  return logid_;
}
inline ::std::string* ComposeLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComposeLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ComposeLogCmd.logid)
}

// -------------------------------------------------------------------

// JumpzoneLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool JumpzoneLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JumpzoneLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JumpzoneLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JumpzoneLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command JumpzoneLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpzoneLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void JumpzoneLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JumpzoneLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = JUMPZONE_LOG_CMD];
inline bool JumpzoneLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JumpzoneLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JumpzoneLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JumpzoneLogCmd::clear_param() {
  param_ = 53;
  clear_has_param();
}
inline ::Cmd::LogParam JumpzoneLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpzoneLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void JumpzoneLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JumpzoneLogCmd.param)
}

// optional uint32 cid = 3;
inline bool JumpzoneLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JumpzoneLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JumpzoneLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JumpzoneLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 JumpzoneLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpzoneLogCmd.cid)
  return cid_;
}
inline void JumpzoneLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JumpzoneLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool JumpzoneLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JumpzoneLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JumpzoneLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JumpzoneLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 JumpzoneLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpzoneLogCmd.sid)
  return sid_;
}
inline void JumpzoneLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JumpzoneLogCmd.sid)
}

// optional string account = 5;
inline bool JumpzoneLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JumpzoneLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JumpzoneLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JumpzoneLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& JumpzoneLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpzoneLogCmd.account)
  return *account_;
}
inline void JumpzoneLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.JumpzoneLogCmd.account)
}
inline void JumpzoneLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.JumpzoneLogCmd.account)
}
inline void JumpzoneLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.JumpzoneLogCmd.account)
}
inline ::std::string* JumpzoneLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.JumpzoneLogCmd.account)
  return account_;
}
inline ::std::string* JumpzoneLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void JumpzoneLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.JumpzoneLogCmd.account)
}

// optional uint64 pid = 6;
inline bool JumpzoneLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JumpzoneLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JumpzoneLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JumpzoneLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 JumpzoneLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpzoneLogCmd.pid)
  return pid_;
}
inline void JumpzoneLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JumpzoneLogCmd.pid)
}

// optional uint32 time = 7;
inline bool JumpzoneLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JumpzoneLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JumpzoneLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JumpzoneLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 JumpzoneLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpzoneLogCmd.time)
  return time_;
}
inline void JumpzoneLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JumpzoneLogCmd.time)
}

// optional uint64 eid = 8;
inline bool JumpzoneLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JumpzoneLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JumpzoneLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JumpzoneLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 JumpzoneLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpzoneLogCmd.eid)
  return eid_;
}
inline void JumpzoneLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JumpzoneLogCmd.eid)
}

// optional uint32 etype = 9;
inline bool JumpzoneLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JumpzoneLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JumpzoneLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JumpzoneLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 JumpzoneLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpzoneLogCmd.etype)
  return etype_;
}
inline void JumpzoneLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JumpzoneLogCmd.etype)
}

// optional uint32 oldzoneid = 10;
inline bool JumpzoneLogCmd::has_oldzoneid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JumpzoneLogCmd::set_has_oldzoneid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JumpzoneLogCmd::clear_has_oldzoneid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JumpzoneLogCmd::clear_oldzoneid() {
  oldzoneid_ = 0u;
  clear_has_oldzoneid();
}
inline ::google::protobuf::uint32 JumpzoneLogCmd::oldzoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpzoneLogCmd.oldzoneid)
  return oldzoneid_;
}
inline void JumpzoneLogCmd::set_oldzoneid(::google::protobuf::uint32 value) {
  set_has_oldzoneid();
  oldzoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JumpzoneLogCmd.oldzoneid)
}

// optional uint32 newzoneid = 11;
inline bool JumpzoneLogCmd::has_newzoneid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JumpzoneLogCmd::set_has_newzoneid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JumpzoneLogCmd::clear_has_newzoneid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JumpzoneLogCmd::clear_newzoneid() {
  newzoneid_ = 0u;
  clear_has_newzoneid();
}
inline ::google::protobuf::uint32 JumpzoneLogCmd::newzoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpzoneLogCmd.newzoneid)
  return newzoneid_;
}
inline void JumpzoneLogCmd::set_newzoneid(::google::protobuf::uint32 value) {
  set_has_newzoneid();
  newzoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JumpzoneLogCmd.newzoneid)
}

// optional uint32 isfirst = 12;
inline bool JumpzoneLogCmd::has_isfirst() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JumpzoneLogCmd::set_has_isfirst() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JumpzoneLogCmd::clear_has_isfirst() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JumpzoneLogCmd::clear_isfirst() {
  isfirst_ = 0u;
  clear_has_isfirst();
}
inline ::google::protobuf::uint32 JumpzoneLogCmd::isfirst() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpzoneLogCmd.isfirst)
  return isfirst_;
}
inline void JumpzoneLogCmd::set_isfirst(::google::protobuf::uint32 value) {
  set_has_isfirst();
  isfirst_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JumpzoneLogCmd.isfirst)
}

// optional string cost = 13;
inline bool JumpzoneLogCmd::has_cost() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JumpzoneLogCmd::set_has_cost() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JumpzoneLogCmd::clear_has_cost() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JumpzoneLogCmd::clear_cost() {
  if (cost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_->clear();
  }
  clear_has_cost();
}
inline const ::std::string& JumpzoneLogCmd::cost() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpzoneLogCmd.cost)
  return *cost_;
}
inline void JumpzoneLogCmd::set_cost(const ::std::string& value) {
  set_has_cost();
  if (cost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_ = new ::std::string;
  }
  cost_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.JumpzoneLogCmd.cost)
}
inline void JumpzoneLogCmd::set_cost(const char* value) {
  set_has_cost();
  if (cost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_ = new ::std::string;
  }
  cost_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.JumpzoneLogCmd.cost)
}
inline void JumpzoneLogCmd::set_cost(const char* value, size_t size) {
  set_has_cost();
  if (cost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_ = new ::std::string;
  }
  cost_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.JumpzoneLogCmd.cost)
}
inline ::std::string* JumpzoneLogCmd::mutable_cost() {
  set_has_cost();
  if (cost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cost_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.JumpzoneLogCmd.cost)
  return cost_;
}
inline ::std::string* JumpzoneLogCmd::release_cost() {
  clear_has_cost();
  if (cost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cost_;
    cost_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void JumpzoneLogCmd::set_allocated_cost(::std::string* cost) {
  if (cost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cost_;
  }
  if (cost) {
    set_has_cost();
    cost_ = cost;
  } else {
    clear_has_cost();
    cost_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.JumpzoneLogCmd.cost)
}

// optional string logid = 14;
inline bool JumpzoneLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JumpzoneLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JumpzoneLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JumpzoneLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& JumpzoneLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpzoneLogCmd.logid)
  return *logid_;
}
inline void JumpzoneLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.JumpzoneLogCmd.logid)
}
inline void JumpzoneLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.JumpzoneLogCmd.logid)
}
inline void JumpzoneLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.JumpzoneLogCmd.logid)
}
inline ::std::string* JumpzoneLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.JumpzoneLogCmd.logid)
  return logid_;
}
inline ::std::string* JumpzoneLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void JumpzoneLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.JumpzoneLogCmd.logid)
}

// -------------------------------------------------------------------

// TeamLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool TeamLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command TeamLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TeamLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = TEAM_LOG_CMD];
inline bool TeamLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamLogCmd::clear_param() {
  param_ = 54;
  clear_has_param();
}
inline ::Cmd::LogParam TeamLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void TeamLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamLogCmd.param)
}

// optional uint32 cid = 3;
inline bool TeamLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 TeamLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamLogCmd.cid)
  return cid_;
}
inline void TeamLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool TeamLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 TeamLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamLogCmd.sid)
  return sid_;
}
inline void TeamLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamLogCmd.sid)
}

// optional uint32 hid = 5;
inline bool TeamLogCmd::has_hid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamLogCmd::set_has_hid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamLogCmd::clear_has_hid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamLogCmd::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TeamLogCmd::hid() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamLogCmd.hid)
  return hid_;
}
inline void TeamLogCmd::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamLogCmd.hid)
}

// optional string account = 6;
inline bool TeamLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& TeamLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamLogCmd.account)
  return *account_;
}
inline void TeamLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TeamLogCmd.account)
}
inline void TeamLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TeamLogCmd.account)
}
inline void TeamLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TeamLogCmd.account)
}
inline ::std::string* TeamLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TeamLogCmd.account)
  return account_;
}
inline ::std::string* TeamLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TeamLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TeamLogCmd.account)
}

// optional uint64 pid = 7;
inline bool TeamLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeamLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeamLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeamLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 TeamLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamLogCmd.pid)
  return pid_;
}
inline void TeamLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamLogCmd.pid)
}

// optional uint32 ispay = 8;
inline bool TeamLogCmd::has_ispay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TeamLogCmd::set_has_ispay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TeamLogCmd::clear_has_ispay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TeamLogCmd::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 TeamLogCmd::ispay() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamLogCmd.ispay)
  return ispay_;
}
inline void TeamLogCmd::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamLogCmd.ispay)
}

// optional uint32 time = 9;
inline bool TeamLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TeamLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TeamLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TeamLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 TeamLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamLogCmd.time)
  return time_;
}
inline void TeamLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamLogCmd.time)
}

// optional uint64 eid = 10;
inline bool TeamLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TeamLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TeamLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TeamLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 TeamLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamLogCmd.eid)
  return eid_;
}
inline void TeamLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamLogCmd.eid)
}

// optional uint32 etype = 11;
inline bool TeamLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TeamLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TeamLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TeamLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 TeamLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamLogCmd.etype)
  return etype_;
}
inline void TeamLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamLogCmd.etype)
}

// optional uint64 inid = 12;
inline bool TeamLogCmd::has_inid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TeamLogCmd::set_has_inid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TeamLogCmd::clear_has_inid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TeamLogCmd::clear_inid() {
  inid_ = GOOGLE_ULONGLONG(0);
  clear_has_inid();
}
inline ::google::protobuf::uint64 TeamLogCmd::inid() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamLogCmd.inid)
  return inid_;
}
inline void TeamLogCmd::set_inid(::google::protobuf::uint64 value) {
  set_has_inid();
  inid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamLogCmd.inid)
}

// optional uint64 otherid = 13;
inline bool TeamLogCmd::has_otherid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TeamLogCmd::set_has_otherid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TeamLogCmd::clear_has_otherid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TeamLogCmd::clear_otherid() {
  otherid_ = GOOGLE_ULONGLONG(0);
  clear_has_otherid();
}
inline ::google::protobuf::uint64 TeamLogCmd::otherid() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamLogCmd.otherid)
  return otherid_;
}
inline void TeamLogCmd::set_otherid(::google::protobuf::uint64 value) {
  set_has_otherid();
  otherid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamLogCmd.otherid)
}

// optional string logid = 14;
inline bool TeamLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TeamLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TeamLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TeamLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& TeamLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamLogCmd.logid)
  return *logid_;
}
inline void TeamLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TeamLogCmd.logid)
}
inline void TeamLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TeamLogCmd.logid)
}
inline void TeamLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TeamLogCmd.logid)
}
inline ::std::string* TeamLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TeamLogCmd.logid)
  return logid_;
}
inline ::std::string* TeamLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TeamLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TeamLogCmd.logid)
}

// -------------------------------------------------------------------

// TradeAdjustPriceLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool TradeAdjustPriceLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeAdjustPriceLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeAdjustPriceLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command TradeAdjustPriceLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TradeAdjustPriceLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = TRADE_ADJUST_PRICE_LOG_CMD];
inline bool TradeAdjustPriceLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradeAdjustPriceLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradeAdjustPriceLogCmd::clear_param() {
  param_ = 55;
  clear_has_param();
}
inline ::Cmd::LogParam TradeAdjustPriceLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void TradeAdjustPriceLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.param)
}

// optional uint32 cid = 3;
inline bool TradeAdjustPriceLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TradeAdjustPriceLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TradeAdjustPriceLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 TradeAdjustPriceLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.cid)
  return cid_;
}
inline void TradeAdjustPriceLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool TradeAdjustPriceLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TradeAdjustPriceLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TradeAdjustPriceLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 TradeAdjustPriceLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.sid)
  return sid_;
}
inline void TradeAdjustPriceLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.sid)
}

// optional uint64 pid = 5;
inline bool TradeAdjustPriceLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TradeAdjustPriceLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TradeAdjustPriceLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 TradeAdjustPriceLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.pid)
  return pid_;
}
inline void TradeAdjustPriceLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.pid)
}

// optional uint32 time = 6;
inline bool TradeAdjustPriceLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TradeAdjustPriceLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TradeAdjustPriceLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 TradeAdjustPriceLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.time)
  return time_;
}
inline void TradeAdjustPriceLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.time)
}

// optional uint32 item_id = 7;
inline bool TradeAdjustPriceLogCmd::has_item_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_item_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TradeAdjustPriceLogCmd::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TradeAdjustPriceLogCmd::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 TradeAdjustPriceLogCmd::item_id() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.item_id)
  return item_id_;
}
inline void TradeAdjustPriceLogCmd::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.item_id)
}

// optional uint32 t = 8;
inline bool TradeAdjustPriceLogCmd::has_t() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_t() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TradeAdjustPriceLogCmd::clear_has_t() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TradeAdjustPriceLogCmd::clear_t() {
  t_ = 0u;
  clear_has_t();
}
inline ::google::protobuf::uint32 TradeAdjustPriceLogCmd::t() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.t)
  return t_;
}
inline void TradeAdjustPriceLogCmd::set_t(::google::protobuf::uint32 value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.t)
}

// optional uint32 k = 9;
inline bool TradeAdjustPriceLogCmd::has_k() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_k() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TradeAdjustPriceLogCmd::clear_has_k() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TradeAdjustPriceLogCmd::clear_k() {
  k_ = 0u;
  clear_has_k();
}
inline ::google::protobuf::uint32 TradeAdjustPriceLogCmd::k() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.k)
  return k_;
}
inline void TradeAdjustPriceLogCmd::set_k(::google::protobuf::uint32 value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.k)
}

// optional uint32 sold_count = 10;
inline bool TradeAdjustPriceLogCmd::has_sold_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_sold_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TradeAdjustPriceLogCmd::clear_has_sold_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TradeAdjustPriceLogCmd::clear_sold_count() {
  sold_count_ = 0u;
  clear_has_sold_count();
}
inline ::google::protobuf::uint32 TradeAdjustPriceLogCmd::sold_count() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.sold_count)
  return sold_count_;
}
inline void TradeAdjustPriceLogCmd::set_sold_count(::google::protobuf::uint32 value) {
  set_has_sold_count();
  sold_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.sold_count)
}

// optional uint32 kt = 11;
inline bool TradeAdjustPriceLogCmd::has_kt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_kt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TradeAdjustPriceLogCmd::clear_has_kt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TradeAdjustPriceLogCmd::clear_kt() {
  kt_ = 0u;
  clear_has_kt();
}
inline ::google::protobuf::uint32 TradeAdjustPriceLogCmd::kt() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.kt)
  return kt_;
}
inline void TradeAdjustPriceLogCmd::set_kt(::google::protobuf::uint32 value) {
  set_has_kt();
  kt_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.kt)
}

// optional uint32 qk = 12;
inline bool TradeAdjustPriceLogCmd::has_qk() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_qk() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TradeAdjustPriceLogCmd::clear_has_qk() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TradeAdjustPriceLogCmd::clear_qk() {
  qk_ = 0u;
  clear_has_qk();
}
inline ::google::protobuf::uint32 TradeAdjustPriceLogCmd::qk() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.qk)
  return qk_;
}
inline void TradeAdjustPriceLogCmd::set_qk(::google::protobuf::uint32 value) {
  set_has_qk();
  qk_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.qk)
}

// optional float r = 13;
inline bool TradeAdjustPriceLogCmd::has_r() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_r() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TradeAdjustPriceLogCmd::clear_has_r() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TradeAdjustPriceLogCmd::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline float TradeAdjustPriceLogCmd::r() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.r)
  return r_;
}
inline void TradeAdjustPriceLogCmd::set_r(float value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.r)
}

// optional float up_ratio = 14;
inline bool TradeAdjustPriceLogCmd::has_up_ratio() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_up_ratio() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TradeAdjustPriceLogCmd::clear_has_up_ratio() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TradeAdjustPriceLogCmd::clear_up_ratio() {
  up_ratio_ = 0;
  clear_has_up_ratio();
}
inline float TradeAdjustPriceLogCmd::up_ratio() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.up_ratio)
  return up_ratio_;
}
inline void TradeAdjustPriceLogCmd::set_up_ratio(float value) {
  set_has_up_ratio();
  up_ratio_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.up_ratio)
}

// optional float down_ratio = 15;
inline bool TradeAdjustPriceLogCmd::has_down_ratio() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_down_ratio() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TradeAdjustPriceLogCmd::clear_has_down_ratio() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TradeAdjustPriceLogCmd::clear_down_ratio() {
  down_ratio_ = 0;
  clear_has_down_ratio();
}
inline float TradeAdjustPriceLogCmd::down_ratio() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.down_ratio)
  return down_ratio_;
}
inline void TradeAdjustPriceLogCmd::set_down_ratio(float value) {
  set_has_down_ratio();
  down_ratio_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.down_ratio)
}

// optional float new_price = 16;
inline bool TradeAdjustPriceLogCmd::has_new_price() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_new_price() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TradeAdjustPriceLogCmd::clear_has_new_price() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TradeAdjustPriceLogCmd::clear_new_price() {
  new_price_ = 0;
  clear_has_new_price();
}
inline float TradeAdjustPriceLogCmd::new_price() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.new_price)
  return new_price_;
}
inline void TradeAdjustPriceLogCmd::set_new_price(float value) {
  set_has_new_price();
  new_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.new_price)
}

// optional float old_price = 17;
inline bool TradeAdjustPriceLogCmd::has_old_price() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_old_price() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TradeAdjustPriceLogCmd::clear_has_old_price() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TradeAdjustPriceLogCmd::clear_old_price() {
  old_price_ = 0;
  clear_has_old_price();
}
inline float TradeAdjustPriceLogCmd::old_price() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.old_price)
  return old_price_;
}
inline void TradeAdjustPriceLogCmd::set_old_price(float value) {
  set_has_old_price();
  old_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.old_price)
}

// optional uint32 last_time = 18;
inline bool TradeAdjustPriceLogCmd::has_last_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_last_time() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TradeAdjustPriceLogCmd::clear_has_last_time() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TradeAdjustPriceLogCmd::clear_last_time() {
  last_time_ = 0u;
  clear_has_last_time();
}
inline ::google::protobuf::uint32 TradeAdjustPriceLogCmd::last_time() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.last_time)
  return last_time_;
}
inline void TradeAdjustPriceLogCmd::set_last_time(::google::protobuf::uint32 value) {
  set_has_last_time();
  last_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.last_time)
}

// optional .Cmd.EPriceStatus status = 19;
inline bool TradeAdjustPriceLogCmd::has_status() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_status() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TradeAdjustPriceLogCmd::clear_has_status() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TradeAdjustPriceLogCmd::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Cmd::EPriceStatus TradeAdjustPriceLogCmd::status() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.status)
  return static_cast< ::Cmd::EPriceStatus >(status_);
}
inline void TradeAdjustPriceLogCmd::set_status(::Cmd::EPriceStatus value) {
  assert(::Cmd::EPriceStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.status)
}

// optional string logid = 20;
inline bool TradeAdjustPriceLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TradeAdjustPriceLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TradeAdjustPriceLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& TradeAdjustPriceLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.logid)
  return *logid_;
}
inline void TradeAdjustPriceLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.logid)
}
inline void TradeAdjustPriceLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradeAdjustPriceLogCmd.logid)
}
inline void TradeAdjustPriceLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradeAdjustPriceLogCmd.logid)
}
inline ::std::string* TradeAdjustPriceLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradeAdjustPriceLogCmd.logid)
  return logid_;
}
inline ::std::string* TradeAdjustPriceLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradeAdjustPriceLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeAdjustPriceLogCmd.logid)
}

// optional uint32 real_price = 21;
inline bool TradeAdjustPriceLogCmd::has_real_price() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TradeAdjustPriceLogCmd::set_has_real_price() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TradeAdjustPriceLogCmd::clear_has_real_price() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TradeAdjustPriceLogCmd::clear_real_price() {
  real_price_ = 0u;
  clear_has_real_price();
}
inline ::google::protobuf::uint32 TradeAdjustPriceLogCmd::real_price() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeAdjustPriceLogCmd.real_price)
  return real_price_;
}
inline void TradeAdjustPriceLogCmd::set_real_price(::google::protobuf::uint32 value) {
  set_has_real_price();
  real_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeAdjustPriceLogCmd.real_price)
}

// -------------------------------------------------------------------

// TradePriceLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool TradePriceLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradePriceLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradePriceLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradePriceLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command TradePriceLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TradePriceLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradePriceLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = TRADE_PRICE_LOG_CMD];
inline bool TradePriceLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradePriceLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradePriceLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradePriceLogCmd::clear_param() {
  param_ = 56;
  clear_has_param();
}
inline ::Cmd::LogParam TradePriceLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void TradePriceLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradePriceLogCmd.param)
}

// optional uint32 cid = 3;
inline bool TradePriceLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TradePriceLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TradePriceLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TradePriceLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 TradePriceLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceLogCmd.cid)
  return cid_;
}
inline void TradePriceLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradePriceLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool TradePriceLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TradePriceLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TradePriceLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TradePriceLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 TradePriceLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceLogCmd.sid)
  return sid_;
}
inline void TradePriceLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradePriceLogCmd.sid)
}

// optional uint64 pid = 5;
inline bool TradePriceLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TradePriceLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TradePriceLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TradePriceLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 TradePriceLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceLogCmd.pid)
  return pid_;
}
inline void TradePriceLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradePriceLogCmd.pid)
}

// optional uint32 time = 6;
inline bool TradePriceLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TradePriceLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TradePriceLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TradePriceLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 TradePriceLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceLogCmd.time)
  return time_;
}
inline void TradePriceLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradePriceLogCmd.time)
}

// optional uint32 item_id = 7;
inline bool TradePriceLogCmd::has_item_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TradePriceLogCmd::set_has_item_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TradePriceLogCmd::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TradePriceLogCmd::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 TradePriceLogCmd::item_id() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceLogCmd.item_id)
  return item_id_;
}
inline void TradePriceLogCmd::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradePriceLogCmd.item_id)
}

// optional uint32 k = 8;
inline bool TradePriceLogCmd::has_k() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TradePriceLogCmd::set_has_k() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TradePriceLogCmd::clear_has_k() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TradePriceLogCmd::clear_k() {
  k_ = 0u;
  clear_has_k();
}
inline ::google::protobuf::uint32 TradePriceLogCmd::k() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceLogCmd.k)
  return k_;
}
inline void TradePriceLogCmd::set_k(::google::protobuf::uint32 value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradePriceLogCmd.k)
}

// optional float price = 9;
inline bool TradePriceLogCmd::has_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TradePriceLogCmd::set_has_price() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TradePriceLogCmd::clear_has_price() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TradePriceLogCmd::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline float TradePriceLogCmd::price() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceLogCmd.price)
  return price_;
}
inline void TradePriceLogCmd::set_price(float value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradePriceLogCmd.price)
}

// optional string logid = 10;
inline bool TradePriceLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TradePriceLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TradePriceLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TradePriceLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& TradePriceLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceLogCmd.logid)
  return *logid_;
}
inline void TradePriceLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradePriceLogCmd.logid)
}
inline void TradePriceLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradePriceLogCmd.logid)
}
inline void TradePriceLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradePriceLogCmd.logid)
}
inline ::std::string* TradePriceLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradePriceLogCmd.logid)
  return logid_;
}
inline ::std::string* TradePriceLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradePriceLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradePriceLogCmd.logid)
}

// -------------------------------------------------------------------

// PetChangeLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool PetChangeLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetChangeLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetChangeLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetChangeLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command PetChangeLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PetChangeLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = PET_CHANGE_LOG_CMD];
inline bool PetChangeLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetChangeLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetChangeLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetChangeLogCmd::clear_param() {
  param_ = 57;
  clear_has_param();
}
inline ::Cmd::LogParam PetChangeLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void PetChangeLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.param)
}

// optional uint32 cid = 3;
inline bool PetChangeLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetChangeLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetChangeLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetChangeLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 PetChangeLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.cid)
  return cid_;
}
inline void PetChangeLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool PetChangeLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PetChangeLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PetChangeLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PetChangeLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 PetChangeLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.sid)
  return sid_;
}
inline void PetChangeLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.sid)
}

// optional string account = 16;
inline bool PetChangeLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PetChangeLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PetChangeLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PetChangeLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& PetChangeLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.account)
  return *account_;
}
inline void PetChangeLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.account)
}
inline void PetChangeLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PetChangeLogCmd.account)
}
inline void PetChangeLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PetChangeLogCmd.account)
}
inline ::std::string* PetChangeLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PetChangeLogCmd.account)
  return account_;
}
inline ::std::string* PetChangeLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PetChangeLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PetChangeLogCmd.account)
}

// optional uint64 pid = 5;
inline bool PetChangeLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PetChangeLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PetChangeLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PetChangeLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 PetChangeLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.pid)
  return pid_;
}
inline void PetChangeLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.pid)
}

// optional uint32 time = 6;
inline bool PetChangeLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PetChangeLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PetChangeLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PetChangeLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 PetChangeLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.time)
  return time_;
}
inline void PetChangeLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.time)
}

// optional uint64 eid = 7;
inline bool PetChangeLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PetChangeLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PetChangeLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PetChangeLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 PetChangeLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.eid)
  return eid_;
}
inline void PetChangeLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.eid)
}

// optional uint32 etype = 8;
inline bool PetChangeLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PetChangeLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PetChangeLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PetChangeLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 PetChangeLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.etype)
  return etype_;
}
inline void PetChangeLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.etype)
}

// optional .Cmd.EPetChangeType type = 9;
inline bool PetChangeLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PetChangeLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PetChangeLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PetChangeLogCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EPetChangeType PetChangeLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.type)
  return static_cast< ::Cmd::EPetChangeType >(type_);
}
inline void PetChangeLogCmd::set_type(::Cmd::EPetChangeType value) {
  assert(::Cmd::EPetChangeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.type)
}

// optional uint32 monsterid = 10;
inline bool PetChangeLogCmd::has_monsterid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PetChangeLogCmd::set_has_monsterid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PetChangeLogCmd::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PetChangeLogCmd::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 PetChangeLogCmd::monsterid() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.monsterid)
  return monsterid_;
}
inline void PetChangeLogCmd::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.monsterid)
}

// optional string name = 11;
inline bool PetChangeLogCmd::has_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PetChangeLogCmd::set_has_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PetChangeLogCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PetChangeLogCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PetChangeLogCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.name)
  return *name_;
}
inline void PetChangeLogCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.name)
}
inline void PetChangeLogCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PetChangeLogCmd.name)
}
inline void PetChangeLogCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PetChangeLogCmd.name)
}
inline ::std::string* PetChangeLogCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PetChangeLogCmd.name)
  return name_;
}
inline ::std::string* PetChangeLogCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PetChangeLogCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PetChangeLogCmd.name)
}

// optional uint32 before = 12;
inline bool PetChangeLogCmd::has_before() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PetChangeLogCmd::set_has_before() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PetChangeLogCmd::clear_has_before() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PetChangeLogCmd::clear_before() {
  before_ = 0u;
  clear_has_before();
}
inline ::google::protobuf::uint32 PetChangeLogCmd::before() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.before)
  return before_;
}
inline void PetChangeLogCmd::set_before(::google::protobuf::uint32 value) {
  set_has_before();
  before_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.before)
}

// optional uint32 after = 13;
inline bool PetChangeLogCmd::has_after() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PetChangeLogCmd::set_has_after() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PetChangeLogCmd::clear_has_after() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PetChangeLogCmd::clear_after() {
  after_ = 0u;
  clear_has_after();
}
inline ::google::protobuf::uint32 PetChangeLogCmd::after() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.after)
  return after_;
}
inline void PetChangeLogCmd::set_after(::google::protobuf::uint32 value) {
  set_has_after();
  after_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.after)
}

// optional string skill_before = 14;
inline bool PetChangeLogCmd::has_skill_before() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PetChangeLogCmd::set_has_skill_before() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PetChangeLogCmd::clear_has_skill_before() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PetChangeLogCmd::clear_skill_before() {
  if (skill_before_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill_before_->clear();
  }
  clear_has_skill_before();
}
inline const ::std::string& PetChangeLogCmd::skill_before() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.skill_before)
  return *skill_before_;
}
inline void PetChangeLogCmd::set_skill_before(const ::std::string& value) {
  set_has_skill_before();
  if (skill_before_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill_before_ = new ::std::string;
  }
  skill_before_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.skill_before)
}
inline void PetChangeLogCmd::set_skill_before(const char* value) {
  set_has_skill_before();
  if (skill_before_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill_before_ = new ::std::string;
  }
  skill_before_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PetChangeLogCmd.skill_before)
}
inline void PetChangeLogCmd::set_skill_before(const char* value, size_t size) {
  set_has_skill_before();
  if (skill_before_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill_before_ = new ::std::string;
  }
  skill_before_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PetChangeLogCmd.skill_before)
}
inline ::std::string* PetChangeLogCmd::mutable_skill_before() {
  set_has_skill_before();
  if (skill_before_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill_before_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PetChangeLogCmd.skill_before)
  return skill_before_;
}
inline ::std::string* PetChangeLogCmd::release_skill_before() {
  clear_has_skill_before();
  if (skill_before_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = skill_before_;
    skill_before_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PetChangeLogCmd::set_allocated_skill_before(::std::string* skill_before) {
  if (skill_before_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skill_before_;
  }
  if (skill_before) {
    set_has_skill_before();
    skill_before_ = skill_before;
  } else {
    clear_has_skill_before();
    skill_before_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PetChangeLogCmd.skill_before)
}

// optional string skill_after = 15;
inline bool PetChangeLogCmd::has_skill_after() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PetChangeLogCmd::set_has_skill_after() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PetChangeLogCmd::clear_has_skill_after() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PetChangeLogCmd::clear_skill_after() {
  if (skill_after_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill_after_->clear();
  }
  clear_has_skill_after();
}
inline const ::std::string& PetChangeLogCmd::skill_after() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.skill_after)
  return *skill_after_;
}
inline void PetChangeLogCmd::set_skill_after(const ::std::string& value) {
  set_has_skill_after();
  if (skill_after_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill_after_ = new ::std::string;
  }
  skill_after_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.skill_after)
}
inline void PetChangeLogCmd::set_skill_after(const char* value) {
  set_has_skill_after();
  if (skill_after_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill_after_ = new ::std::string;
  }
  skill_after_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PetChangeLogCmd.skill_after)
}
inline void PetChangeLogCmd::set_skill_after(const char* value, size_t size) {
  set_has_skill_after();
  if (skill_after_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill_after_ = new ::std::string;
  }
  skill_after_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PetChangeLogCmd.skill_after)
}
inline ::std::string* PetChangeLogCmd::mutable_skill_after() {
  set_has_skill_after();
  if (skill_after_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill_after_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PetChangeLogCmd.skill_after)
  return skill_after_;
}
inline ::std::string* PetChangeLogCmd::release_skill_after() {
  clear_has_skill_after();
  if (skill_after_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = skill_after_;
    skill_after_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PetChangeLogCmd::set_allocated_skill_after(::std::string* skill_after) {
  if (skill_after_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skill_after_;
  }
  if (skill_after) {
    set_has_skill_after();
    skill_after_ = skill_after;
  } else {
    clear_has_skill_after();
    skill_after_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PetChangeLogCmd.skill_after)
}

// optional string logid = 17;
inline bool PetChangeLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PetChangeLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PetChangeLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PetChangeLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& PetChangeLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.PetChangeLogCmd.logid)
  return *logid_;
}
inline void PetChangeLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PetChangeLogCmd.logid)
}
inline void PetChangeLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PetChangeLogCmd.logid)
}
inline void PetChangeLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PetChangeLogCmd.logid)
}
inline ::std::string* PetChangeLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PetChangeLogCmd.logid)
  return logid_;
}
inline ::std::string* PetChangeLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PetChangeLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PetChangeLogCmd.logid)
}

// -------------------------------------------------------------------

// PetAdventureLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool PetAdventureLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetAdventureLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetAdventureLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetAdventureLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command PetAdventureLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PetAdventureLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = PET_ADVENTURE_LOG_CMD];
inline bool PetAdventureLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetAdventureLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetAdventureLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetAdventureLogCmd::clear_param() {
  param_ = 58;
  clear_has_param();
}
inline ::Cmd::LogParam PetAdventureLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void PetAdventureLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureLogCmd.param)
}

// optional uint32 cid = 3;
inline bool PetAdventureLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetAdventureLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetAdventureLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetAdventureLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 PetAdventureLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureLogCmd.cid)
  return cid_;
}
inline void PetAdventureLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool PetAdventureLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PetAdventureLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PetAdventureLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PetAdventureLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 PetAdventureLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureLogCmd.sid)
  return sid_;
}
inline void PetAdventureLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureLogCmd.sid)
}

// optional string account = 13;
inline bool PetAdventureLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PetAdventureLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PetAdventureLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PetAdventureLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& PetAdventureLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureLogCmd.account)
  return *account_;
}
inline void PetAdventureLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureLogCmd.account)
}
inline void PetAdventureLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PetAdventureLogCmd.account)
}
inline void PetAdventureLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PetAdventureLogCmd.account)
}
inline ::std::string* PetAdventureLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PetAdventureLogCmd.account)
  return account_;
}
inline ::std::string* PetAdventureLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PetAdventureLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PetAdventureLogCmd.account)
}

// optional uint64 pid = 5;
inline bool PetAdventureLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PetAdventureLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PetAdventureLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PetAdventureLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 PetAdventureLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureLogCmd.pid)
  return pid_;
}
inline void PetAdventureLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureLogCmd.pid)
}

// optional uint32 time = 6;
inline bool PetAdventureLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PetAdventureLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PetAdventureLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PetAdventureLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 PetAdventureLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureLogCmd.time)
  return time_;
}
inline void PetAdventureLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureLogCmd.time)
}

// optional uint64 eid = 7;
inline bool PetAdventureLogCmd::has_eid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PetAdventureLogCmd::set_has_eid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PetAdventureLogCmd::clear_has_eid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PetAdventureLogCmd::clear_eid() {
  eid_ = GOOGLE_ULONGLONG(0);
  clear_has_eid();
}
inline ::google::protobuf::uint64 PetAdventureLogCmd::eid() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureLogCmd.eid)
  return eid_;
}
inline void PetAdventureLogCmd::set_eid(::google::protobuf::uint64 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureLogCmd.eid)
}

// optional uint32 etype = 8;
inline bool PetAdventureLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PetAdventureLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PetAdventureLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PetAdventureLogCmd::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 PetAdventureLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureLogCmd.etype)
  return etype_;
}
inline void PetAdventureLogCmd::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureLogCmd.etype)
}

// optional .Cmd.EPetAdventureLogType type = 9;
inline bool PetAdventureLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PetAdventureLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PetAdventureLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PetAdventureLogCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EPetAdventureLogType PetAdventureLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureLogCmd.type)
  return static_cast< ::Cmd::EPetAdventureLogType >(type_);
}
inline void PetAdventureLogCmd::set_type(::Cmd::EPetAdventureLogType value) {
  assert(::Cmd::EPetAdventureLogType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureLogCmd.type)
}

// optional uint32 id = 10;
inline bool PetAdventureLogCmd::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PetAdventureLogCmd::set_has_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PetAdventureLogCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PetAdventureLogCmd::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PetAdventureLogCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureLogCmd.id)
  return id_;
}
inline void PetAdventureLogCmd::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureLogCmd.id)
}

// optional string names = 11;
inline bool PetAdventureLogCmd::has_names() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PetAdventureLogCmd::set_has_names() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PetAdventureLogCmd::clear_has_names() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PetAdventureLogCmd::clear_names() {
  if (names_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    names_->clear();
  }
  clear_has_names();
}
inline const ::std::string& PetAdventureLogCmd::names() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureLogCmd.names)
  return *names_;
}
inline void PetAdventureLogCmd::set_names(const ::std::string& value) {
  set_has_names();
  if (names_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    names_ = new ::std::string;
  }
  names_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureLogCmd.names)
}
inline void PetAdventureLogCmd::set_names(const char* value) {
  set_has_names();
  if (names_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    names_ = new ::std::string;
  }
  names_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PetAdventureLogCmd.names)
}
inline void PetAdventureLogCmd::set_names(const char* value, size_t size) {
  set_has_names();
  if (names_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    names_ = new ::std::string;
  }
  names_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PetAdventureLogCmd.names)
}
inline ::std::string* PetAdventureLogCmd::mutable_names() {
  set_has_names();
  if (names_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    names_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PetAdventureLogCmd.names)
  return names_;
}
inline ::std::string* PetAdventureLogCmd::release_names() {
  clear_has_names();
  if (names_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = names_;
    names_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PetAdventureLogCmd::set_allocated_names(::std::string* names) {
  if (names_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete names_;
  }
  if (names) {
    set_has_names();
    names_ = names;
  } else {
    clear_has_names();
    names_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PetAdventureLogCmd.names)
}

// optional uint32 cond = 12;
inline bool PetAdventureLogCmd::has_cond() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PetAdventureLogCmd::set_has_cond() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PetAdventureLogCmd::clear_has_cond() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PetAdventureLogCmd::clear_cond() {
  cond_ = 0u;
  clear_has_cond();
}
inline ::google::protobuf::uint32 PetAdventureLogCmd::cond() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureLogCmd.cond)
  return cond_;
}
inline void PetAdventureLogCmd::set_cond(::google::protobuf::uint32 value) {
  set_has_cond();
  cond_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureLogCmd.cond)
}

// optional string logid = 14;
inline bool PetAdventureLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PetAdventureLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PetAdventureLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PetAdventureLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& PetAdventureLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureLogCmd.logid)
  return *logid_;
}
inline void PetAdventureLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureLogCmd.logid)
}
inline void PetAdventureLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PetAdventureLogCmd.logid)
}
inline void PetAdventureLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PetAdventureLogCmd.logid)
}
inline ::std::string* PetAdventureLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PetAdventureLogCmd.logid)
  return logid_;
}
inline ::std::string* PetAdventureLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PetAdventureLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PetAdventureLogCmd.logid)
}

// -------------------------------------------------------------------

// InactiveUserLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool InactiveUserLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InactiveUserLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InactiveUserLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InactiveUserLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command InactiveUserLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void InactiveUserLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = INACTIVE_USER_LOG_CMD];
inline bool InactiveUserLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InactiveUserLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InactiveUserLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InactiveUserLogCmd::clear_param() {
  param_ = 60;
  clear_has_param();
}
inline ::Cmd::LogParam InactiveUserLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void InactiveUserLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.param)
}

// optional uint32 cid = 3;
inline bool InactiveUserLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InactiveUserLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InactiveUserLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InactiveUserLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 InactiveUserLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.cid)
  return cid_;
}
inline void InactiveUserLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool InactiveUserLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InactiveUserLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InactiveUserLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InactiveUserLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 InactiveUserLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.sid)
  return sid_;
}
inline void InactiveUserLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.sid)
}

// optional string account = 5;
inline bool InactiveUserLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InactiveUserLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InactiveUserLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InactiveUserLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& InactiveUserLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.account)
  return *account_;
}
inline void InactiveUserLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.account)
}
inline void InactiveUserLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.InactiveUserLogCmd.account)
}
inline void InactiveUserLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.InactiveUserLogCmd.account)
}
inline ::std::string* InactiveUserLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.InactiveUserLogCmd.account)
  return account_;
}
inline ::std::string* InactiveUserLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InactiveUserLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.InactiveUserLogCmd.account)
}

// optional uint64 pid = 6;
inline bool InactiveUserLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InactiveUserLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InactiveUserLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InactiveUserLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 InactiveUserLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.pid)
  return pid_;
}
inline void InactiveUserLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.pid)
}

// optional uint32 time = 7;
inline bool InactiveUserLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InactiveUserLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InactiveUserLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InactiveUserLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 InactiveUserLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.time)
  return time_;
}
inline void InactiveUserLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.time)
}

// optional string name = 8;
inline bool InactiveUserLogCmd::has_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InactiveUserLogCmd::set_has_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InactiveUserLogCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InactiveUserLogCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& InactiveUserLogCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.name)
  return *name_;
}
inline void InactiveUserLogCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.name)
}
inline void InactiveUserLogCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.InactiveUserLogCmd.name)
}
inline void InactiveUserLogCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.InactiveUserLogCmd.name)
}
inline ::std::string* InactiveUserLogCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.InactiveUserLogCmd.name)
  return name_;
}
inline ::std::string* InactiveUserLogCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InactiveUserLogCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.InactiveUserLogCmd.name)
}

// optional uint32 job = 9;
inline bool InactiveUserLogCmd::has_job() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InactiveUserLogCmd::set_has_job() {
  _has_bits_[0] |= 0x00000100u;
}
inline void InactiveUserLogCmd::clear_has_job() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void InactiveUserLogCmd::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 InactiveUserLogCmd::job() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.job)
  return job_;
}
inline void InactiveUserLogCmd::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.job)
}

// optional uint32 level = 10;
inline bool InactiveUserLogCmd::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void InactiveUserLogCmd::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void InactiveUserLogCmd::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void InactiveUserLogCmd::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 InactiveUserLogCmd::level() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.level)
  return level_;
}
inline void InactiveUserLogCmd::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.level)
}

// optional uint64 left_zeny = 11;
inline bool InactiveUserLogCmd::has_left_zeny() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void InactiveUserLogCmd::set_has_left_zeny() {
  _has_bits_[0] |= 0x00000400u;
}
inline void InactiveUserLogCmd::clear_has_left_zeny() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void InactiveUserLogCmd::clear_left_zeny() {
  left_zeny_ = GOOGLE_ULONGLONG(0);
  clear_has_left_zeny();
}
inline ::google::protobuf::uint64 InactiveUserLogCmd::left_zeny() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.left_zeny)
  return left_zeny_;
}
inline void InactiveUserLogCmd::set_left_zeny(::google::protobuf::uint64 value) {
  set_has_left_zeny();
  left_zeny_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.left_zeny)
}

// optional uint32 mapid = 12;
inline bool InactiveUserLogCmd::has_mapid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void InactiveUserLogCmd::set_has_mapid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void InactiveUserLogCmd::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void InactiveUserLogCmd::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 InactiveUserLogCmd::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.mapid)
  return mapid_;
}
inline void InactiveUserLogCmd::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.mapid)
}

// optional uint32 create_time = 14;
inline bool InactiveUserLogCmd::has_create_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void InactiveUserLogCmd::set_has_create_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void InactiveUserLogCmd::clear_has_create_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void InactiveUserLogCmd::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 InactiveUserLogCmd::create_time() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.create_time)
  return create_time_;
}
inline void InactiveUserLogCmd::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.create_time)
}

// optional uint32 send_count = 15;
inline bool InactiveUserLogCmd::has_send_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void InactiveUserLogCmd::set_has_send_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void InactiveUserLogCmd::clear_has_send_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void InactiveUserLogCmd::clear_send_count() {
  send_count_ = 0u;
  clear_has_send_count();
}
inline ::google::protobuf::uint32 InactiveUserLogCmd::send_count() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.send_count)
  return send_count_;
}
inline void InactiveUserLogCmd::set_send_count(::google::protobuf::uint32 value) {
  set_has_send_count();
  send_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.send_count)
}

// optional string logid = 16;
inline bool InactiveUserLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void InactiveUserLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void InactiveUserLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void InactiveUserLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& InactiveUserLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.logid)
  return *logid_;
}
inline void InactiveUserLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.logid)
}
inline void InactiveUserLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.InactiveUserLogCmd.logid)
}
inline void InactiveUserLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.InactiveUserLogCmd.logid)
}
inline ::std::string* InactiveUserLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.InactiveUserLogCmd.logid)
  return logid_;
}
inline ::std::string* InactiveUserLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InactiveUserLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.InactiveUserLogCmd.logid)
}

// optional uint64 guildid = 17;
inline bool InactiveUserLogCmd::has_guildid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void InactiveUserLogCmd::set_has_guildid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void InactiveUserLogCmd::clear_has_guildid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void InactiveUserLogCmd::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 InactiveUserLogCmd::guildid() const {
  // @@protoc_insertion_point(field_get:Cmd.InactiveUserLogCmd.guildid)
  return guildid_;
}
inline void InactiveUserLogCmd::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InactiveUserLogCmd.guildid)
}

// -------------------------------------------------------------------

// TradeUntakeLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool TradeUntakeLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeUntakeLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeUntakeLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeUntakeLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command TradeUntakeLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeUntakeLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TradeUntakeLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeUntakeLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = TRADE_UNTAKE_LOG_CMD];
inline bool TradeUntakeLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeUntakeLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradeUntakeLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradeUntakeLogCmd::clear_param() {
  param_ = 59;
  clear_has_param();
}
inline ::Cmd::LogParam TradeUntakeLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeUntakeLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void TradeUntakeLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeUntakeLogCmd.param)
}

// optional uint32 cid = 3;
inline bool TradeUntakeLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TradeUntakeLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TradeUntakeLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TradeUntakeLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 TradeUntakeLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeUntakeLogCmd.cid)
  return cid_;
}
inline void TradeUntakeLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeUntakeLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool TradeUntakeLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TradeUntakeLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TradeUntakeLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TradeUntakeLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 TradeUntakeLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeUntakeLogCmd.sid)
  return sid_;
}
inline void TradeUntakeLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeUntakeLogCmd.sid)
}

// optional uint64 pid = 5;
inline bool TradeUntakeLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TradeUntakeLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TradeUntakeLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TradeUntakeLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 TradeUntakeLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeUntakeLogCmd.pid)
  return pid_;
}
inline void TradeUntakeLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeUntakeLogCmd.pid)
}

// optional uint32 time = 6;
inline bool TradeUntakeLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TradeUntakeLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TradeUntakeLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TradeUntakeLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 TradeUntakeLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeUntakeLogCmd.time)
  return time_;
}
inline void TradeUntakeLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeUntakeLogCmd.time)
}

// optional string name = 7;
inline bool TradeUntakeLogCmd::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TradeUntakeLogCmd::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TradeUntakeLogCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TradeUntakeLogCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TradeUntakeLogCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeUntakeLogCmd.name)
  return *name_;
}
inline void TradeUntakeLogCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradeUntakeLogCmd.name)
}
inline void TradeUntakeLogCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradeUntakeLogCmd.name)
}
inline void TradeUntakeLogCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradeUntakeLogCmd.name)
}
inline ::std::string* TradeUntakeLogCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradeUntakeLogCmd.name)
  return name_;
}
inline ::std::string* TradeUntakeLogCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradeUntakeLogCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeUntakeLogCmd.name)
}

// optional uint64 zeny = 8;
inline bool TradeUntakeLogCmd::has_zeny() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TradeUntakeLogCmd::set_has_zeny() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TradeUntakeLogCmd::clear_has_zeny() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TradeUntakeLogCmd::clear_zeny() {
  zeny_ = GOOGLE_ULONGLONG(0);
  clear_has_zeny();
}
inline ::google::protobuf::uint64 TradeUntakeLogCmd::zeny() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeUntakeLogCmd.zeny)
  return zeny_;
}
inline void TradeUntakeLogCmd::set_zeny(::google::protobuf::uint64 value) {
  set_has_zeny();
  zeny_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeUntakeLogCmd.zeny)
}

// optional string guildname = 9;
inline bool TradeUntakeLogCmd::has_guildname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TradeUntakeLogCmd::set_has_guildname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TradeUntakeLogCmd::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TradeUntakeLogCmd::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& TradeUntakeLogCmd::guildname() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeUntakeLogCmd.guildname)
  return *guildname_;
}
inline void TradeUntakeLogCmd::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradeUntakeLogCmd.guildname)
}
inline void TradeUntakeLogCmd::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradeUntakeLogCmd.guildname)
}
inline void TradeUntakeLogCmd::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradeUntakeLogCmd.guildname)
}
inline ::std::string* TradeUntakeLogCmd::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradeUntakeLogCmd.guildname)
  return guildname_;
}
inline ::std::string* TradeUntakeLogCmd::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradeUntakeLogCmd::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeUntakeLogCmd.guildname)
}

// optional string logid = 11;
inline bool TradeUntakeLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TradeUntakeLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TradeUntakeLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TradeUntakeLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& TradeUntakeLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeUntakeLogCmd.logid)
  return *logid_;
}
inline void TradeUntakeLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradeUntakeLogCmd.logid)
}
inline void TradeUntakeLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradeUntakeLogCmd.logid)
}
inline void TradeUntakeLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradeUntakeLogCmd.logid)
}
inline ::std::string* TradeUntakeLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradeUntakeLogCmd.logid)
  return logid_;
}
inline ::std::string* TradeUntakeLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradeUntakeLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeUntakeLogCmd.logid)
}

// -------------------------------------------------------------------

// CreditLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool CreditLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreditLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreditLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreditLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command CreditLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CreditLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CreditLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreditLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = CREDIT_LOG_CMD];
inline bool CreditLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreditLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreditLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreditLogCmd::clear_param() {
  param_ = 61;
  clear_has_param();
}
inline ::Cmd::LogParam CreditLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CreditLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void CreditLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreditLogCmd.param)
}

// optional uint32 cid = 3;
inline bool CreditLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreditLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreditLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreditLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 CreditLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.CreditLogCmd.cid)
  return cid_;
}
inline void CreditLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreditLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool CreditLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreditLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreditLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreditLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 CreditLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.CreditLogCmd.sid)
  return sid_;
}
inline void CreditLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreditLogCmd.sid)
}

// optional uint64 pid = 5;
inline bool CreditLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreditLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreditLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreditLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 CreditLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.CreditLogCmd.pid)
  return pid_;
}
inline void CreditLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreditLogCmd.pid)
}

// optional uint32 time = 6;
inline bool CreditLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreditLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreditLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreditLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CreditLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.CreditLogCmd.time)
  return time_;
}
inline void CreditLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreditLogCmd.time)
}

// optional string name = 7;
inline bool CreditLogCmd::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreditLogCmd::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreditLogCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreditLogCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CreditLogCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.CreditLogCmd.name)
  return *name_;
}
inline void CreditLogCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CreditLogCmd.name)
}
inline void CreditLogCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CreditLogCmd.name)
}
inline void CreditLogCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CreditLogCmd.name)
}
inline ::std::string* CreditLogCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CreditLogCmd.name)
  return name_;
}
inline ::std::string* CreditLogCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreditLogCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CreditLogCmd.name)
}

// optional .Cmd.ECreditType type = 8;
inline bool CreditLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreditLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreditLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreditLogCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ECreditType CreditLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.CreditLogCmd.type)
  return static_cast< ::Cmd::ECreditType >(type_);
}
inline void CreditLogCmd::set_type(::Cmd::ECreditType value) {
  assert(::Cmd::ECreditType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreditLogCmd.type)
}

// optional uint64 before = 9;
inline bool CreditLogCmd::has_before() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreditLogCmd::set_has_before() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CreditLogCmd::clear_has_before() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CreditLogCmd::clear_before() {
  before_ = GOOGLE_ULONGLONG(0);
  clear_has_before();
}
inline ::google::protobuf::uint64 CreditLogCmd::before() const {
  // @@protoc_insertion_point(field_get:Cmd.CreditLogCmd.before)
  return before_;
}
inline void CreditLogCmd::set_before(::google::protobuf::uint64 value) {
  set_has_before();
  before_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreditLogCmd.before)
}

// optional uint64 after = 10;
inline bool CreditLogCmd::has_after() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CreditLogCmd::set_has_after() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CreditLogCmd::clear_has_after() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CreditLogCmd::clear_after() {
  after_ = GOOGLE_ULONGLONG(0);
  clear_has_after();
}
inline ::google::protobuf::uint64 CreditLogCmd::after() const {
  // @@protoc_insertion_point(field_get:Cmd.CreditLogCmd.after)
  return after_;
}
inline void CreditLogCmd::set_after(::google::protobuf::uint64 value) {
  set_has_after();
  after_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreditLogCmd.after)
}

// optional string logid = 11;
inline bool CreditLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CreditLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CreditLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CreditLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& CreditLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.CreditLogCmd.logid)
  return *logid_;
}
inline void CreditLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CreditLogCmd.logid)
}
inline void CreditLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CreditLogCmd.logid)
}
inline void CreditLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CreditLogCmd.logid)
}
inline ::std::string* CreditLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CreditLogCmd.logid)
  return logid_;
}
inline ::std::string* CreditLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreditLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CreditLogCmd.logid)
}

// -------------------------------------------------------------------

// TradeGiveLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool TradeGiveLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeGiveLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeGiveLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeGiveLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command TradeGiveLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TradeGiveLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = TRADE_GIVE_LOG_CMD];
inline bool TradeGiveLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeGiveLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradeGiveLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradeGiveLogCmd::clear_param() {
  param_ = 62;
  clear_has_param();
}
inline ::Cmd::LogParam TradeGiveLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void TradeGiveLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.param)
}

// optional uint32 cid = 3;
inline bool TradeGiveLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TradeGiveLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TradeGiveLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TradeGiveLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 TradeGiveLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.cid)
  return cid_;
}
inline void TradeGiveLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool TradeGiveLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TradeGiveLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TradeGiveLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TradeGiveLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 TradeGiveLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.sid)
  return sid_;
}
inline void TradeGiveLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.sid)
}

// optional uint64 pid = 5;
inline bool TradeGiveLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TradeGiveLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TradeGiveLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TradeGiveLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 TradeGiveLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.pid)
  return pid_;
}
inline void TradeGiveLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.pid)
}

// optional uint32 time = 6;
inline bool TradeGiveLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TradeGiveLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TradeGiveLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TradeGiveLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 TradeGiveLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.time)
  return time_;
}
inline void TradeGiveLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.time)
}

// optional .Cmd.EGiveEvent event = 7;
inline bool TradeGiveLogCmd::has_event() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TradeGiveLogCmd::set_has_event() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TradeGiveLogCmd::clear_has_event() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TradeGiveLogCmd::clear_event() {
  event_ = 1;
  clear_has_event();
}
inline ::Cmd::EGiveEvent TradeGiveLogCmd::event() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.event)
  return static_cast< ::Cmd::EGiveEvent >(event_);
}
inline void TradeGiveLogCmd::set_event(::Cmd::EGiveEvent value) {
  assert(::Cmd::EGiveEvent_IsValid(value));
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.event)
}

// optional uint32 itemid = 8;
inline bool TradeGiveLogCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TradeGiveLogCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TradeGiveLogCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TradeGiveLogCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TradeGiveLogCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.itemid)
  return itemid_;
}
inline void TradeGiveLogCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.itemid)
}

// optional uint64 quota = 9;
inline bool TradeGiveLogCmd::has_quota() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TradeGiveLogCmd::set_has_quota() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TradeGiveLogCmd::clear_has_quota() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TradeGiveLogCmd::clear_quota() {
  quota_ = GOOGLE_ULONGLONG(0);
  clear_has_quota();
}
inline ::google::protobuf::uint64 TradeGiveLogCmd::quota() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.quota)
  return quota_;
}
inline void TradeGiveLogCmd::set_quota(::google::protobuf::uint64 value) {
  set_has_quota();
  quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.quota)
}

// optional string iteminfo = 10;
inline bool TradeGiveLogCmd::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TradeGiveLogCmd::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TradeGiveLogCmd::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TradeGiveLogCmd::clear_iteminfo() {
  if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_->clear();
  }
  clear_has_iteminfo();
}
inline const ::std::string& TradeGiveLogCmd::iteminfo() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.iteminfo)
  return *iteminfo_;
}
inline void TradeGiveLogCmd::set_iteminfo(const ::std::string& value) {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  iteminfo_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.iteminfo)
}
inline void TradeGiveLogCmd::set_iteminfo(const char* value) {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  iteminfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradeGiveLogCmd.iteminfo)
}
inline void TradeGiveLogCmd::set_iteminfo(const char* value, size_t size) {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  iteminfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradeGiveLogCmd.iteminfo)
}
inline ::std::string* TradeGiveLogCmd::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradeGiveLogCmd.iteminfo)
  return iteminfo_;
}
inline ::std::string* TradeGiveLogCmd::release_iteminfo() {
  clear_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = iteminfo_;
    iteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradeGiveLogCmd::set_allocated_iteminfo(::std::string* iteminfo) {
  if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iteminfo_;
  }
  if (iteminfo) {
    set_has_iteminfo();
    iteminfo_ = iteminfo;
  } else {
    clear_has_iteminfo();
    iteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeGiveLogCmd.iteminfo)
}

// optional uint64 otherid = 11;
inline bool TradeGiveLogCmd::has_otherid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TradeGiveLogCmd::set_has_otherid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TradeGiveLogCmd::clear_has_otherid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TradeGiveLogCmd::clear_otherid() {
  otherid_ = GOOGLE_ULONGLONG(0);
  clear_has_otherid();
}
inline ::google::protobuf::uint64 TradeGiveLogCmd::otherid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.otherid)
  return otherid_;
}
inline void TradeGiveLogCmd::set_otherid(::google::protobuf::uint64 value) {
  set_has_otherid();
  otherid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.otherid)
}

// optional string logid = 12;
inline bool TradeGiveLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TradeGiveLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TradeGiveLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TradeGiveLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& TradeGiveLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.logid)
  return *logid_;
}
inline void TradeGiveLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.logid)
}
inline void TradeGiveLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradeGiveLogCmd.logid)
}
inline void TradeGiveLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradeGiveLogCmd.logid)
}
inline ::std::string* TradeGiveLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradeGiveLogCmd.logid)
  return logid_;
}
inline ::std::string* TradeGiveLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradeGiveLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeGiveLogCmd.logid)
}

// optional string name = 13;
inline bool TradeGiveLogCmd::has_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TradeGiveLogCmd::set_has_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TradeGiveLogCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TradeGiveLogCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TradeGiveLogCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.name)
  return *name_;
}
inline void TradeGiveLogCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.name)
}
inline void TradeGiveLogCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradeGiveLogCmd.name)
}
inline void TradeGiveLogCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradeGiveLogCmd.name)
}
inline ::std::string* TradeGiveLogCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradeGiveLogCmd.name)
  return name_;
}
inline ::std::string* TradeGiveLogCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradeGiveLogCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeGiveLogCmd.name)
}

// optional string othername = 14;
inline bool TradeGiveLogCmd::has_othername() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TradeGiveLogCmd::set_has_othername() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TradeGiveLogCmd::clear_has_othername() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TradeGiveLogCmd::clear_othername() {
  if (othername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    othername_->clear();
  }
  clear_has_othername();
}
inline const ::std::string& TradeGiveLogCmd::othername() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.othername)
  return *othername_;
}
inline void TradeGiveLogCmd::set_othername(const ::std::string& value) {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    othername_ = new ::std::string;
  }
  othername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.othername)
}
inline void TradeGiveLogCmd::set_othername(const char* value) {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    othername_ = new ::std::string;
  }
  othername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradeGiveLogCmd.othername)
}
inline void TradeGiveLogCmd::set_othername(const char* value, size_t size) {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    othername_ = new ::std::string;
  }
  othername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradeGiveLogCmd.othername)
}
inline ::std::string* TradeGiveLogCmd::mutable_othername() {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    othername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradeGiveLogCmd.othername)
  return othername_;
}
inline ::std::string* TradeGiveLogCmd::release_othername() {
  clear_has_othername();
  if (othername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = othername_;
    othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradeGiveLogCmd::set_allocated_othername(::std::string* othername) {
  if (othername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete othername_;
  }
  if (othername) {
    set_has_othername();
    othername_ = othername;
  } else {
    clear_has_othername();
    othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeGiveLogCmd.othername)
}

// optional uint32 givetime = 15;
inline bool TradeGiveLogCmd::has_givetime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TradeGiveLogCmd::set_has_givetime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TradeGiveLogCmd::clear_has_givetime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TradeGiveLogCmd::clear_givetime() {
  givetime_ = 0u;
  clear_has_givetime();
}
inline ::google::protobuf::uint32 TradeGiveLogCmd::givetime() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.givetime)
  return givetime_;
}
inline void TradeGiveLogCmd::set_givetime(::google::protobuf::uint32 value) {
  set_has_givetime();
  givetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.givetime)
}

// optional .Cmd.ELogGiveType givetype = 16;
inline bool TradeGiveLogCmd::has_givetype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TradeGiveLogCmd::set_has_givetype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TradeGiveLogCmd::clear_has_givetype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TradeGiveLogCmd::clear_givetype() {
  givetype_ = 0;
  clear_has_givetype();
}
inline ::Cmd::ELogGiveType TradeGiveLogCmd::givetype() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.givetype)
  return static_cast< ::Cmd::ELogGiveType >(givetype_);
}
inline void TradeGiveLogCmd::set_givetype(::Cmd::ELogGiveType value) {
  assert(::Cmd::ELogGiveType_IsValid(value));
  set_has_givetype();
  givetype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.givetype)
}

// optional uint32 itemcount = 17;
inline bool TradeGiveLogCmd::has_itemcount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TradeGiveLogCmd::set_has_itemcount() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TradeGiveLogCmd::clear_has_itemcount() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TradeGiveLogCmd::clear_itemcount() {
  itemcount_ = 0u;
  clear_has_itemcount();
}
inline ::google::protobuf::uint32 TradeGiveLogCmd::itemcount() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeGiveLogCmd.itemcount)
  return itemcount_;
}
inline void TradeGiveLogCmd::set_itemcount(::google::protobuf::uint32 value) {
  set_has_itemcount();
  itemcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeGiveLogCmd.itemcount)
}

// -------------------------------------------------------------------

// QuotaLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool QuotaLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuotaLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuotaLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuotaLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command QuotaLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuotaLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = QUOTA_LOG_CMD];
inline bool QuotaLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuotaLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuotaLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuotaLogCmd::clear_param() {
  param_ = 63;
  clear_has_param();
}
inline ::Cmd::LogParam QuotaLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void QuotaLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaLogCmd.param)
}

// optional uint32 cid = 3;
inline bool QuotaLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuotaLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuotaLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuotaLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 QuotaLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLogCmd.cid)
  return cid_;
}
inline void QuotaLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool QuotaLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuotaLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuotaLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuotaLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 QuotaLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLogCmd.sid)
  return sid_;
}
inline void QuotaLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaLogCmd.sid)
}

// optional string account = 5;
inline bool QuotaLogCmd::has_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuotaLogCmd::set_has_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuotaLogCmd::clear_has_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuotaLogCmd::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& QuotaLogCmd::account() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLogCmd.account)
  return *account_;
}
inline void QuotaLogCmd::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QuotaLogCmd.account)
}
inline void QuotaLogCmd::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuotaLogCmd.account)
}
inline void QuotaLogCmd::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuotaLogCmd.account)
}
inline ::std::string* QuotaLogCmd::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QuotaLogCmd.account)
  return account_;
}
inline ::std::string* QuotaLogCmd::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuotaLogCmd::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuotaLogCmd.account)
}

// optional uint64 pid = 6;
inline bool QuotaLogCmd::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QuotaLogCmd::set_has_pid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QuotaLogCmd::clear_has_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QuotaLogCmd::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 QuotaLogCmd::pid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLogCmd.pid)
  return pid_;
}
inline void QuotaLogCmd::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaLogCmd.pid)
}

// optional uint32 time = 7;
inline bool QuotaLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QuotaLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QuotaLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QuotaLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 QuotaLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLogCmd.time)
  return time_;
}
inline void QuotaLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaLogCmd.time)
}

// optional string logid = 8;
inline bool QuotaLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QuotaLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QuotaLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QuotaLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& QuotaLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLogCmd.logid)
  return *logid_;
}
inline void QuotaLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QuotaLogCmd.logid)
}
inline void QuotaLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuotaLogCmd.logid)
}
inline void QuotaLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuotaLogCmd.logid)
}
inline ::std::string* QuotaLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QuotaLogCmd.logid)
  return logid_;
}
inline ::std::string* QuotaLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuotaLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuotaLogCmd.logid)
}

// optional .Cmd.EQuotaOptType opttype = 9;
inline bool QuotaLogCmd::has_opttype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QuotaLogCmd::set_has_opttype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QuotaLogCmd::clear_has_opttype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QuotaLogCmd::clear_opttype() {
  opttype_ = 1;
  clear_has_opttype();
}
inline ::Cmd::EQuotaOptType QuotaLogCmd::opttype() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLogCmd.opttype)
  return static_cast< ::Cmd::EQuotaOptType >(opttype_);
}
inline void QuotaLogCmd::set_opttype(::Cmd::EQuotaOptType value) {
  assert(::Cmd::EQuotaOptType_IsValid(value));
  set_has_opttype();
  opttype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaLogCmd.opttype)
}

// optional .Cmd.EQuotaType quotatype = 10;
inline bool QuotaLogCmd::has_quotatype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QuotaLogCmd::set_has_quotatype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QuotaLogCmd::clear_has_quotatype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QuotaLogCmd::clear_quotatype() {
  quotatype_ = 1;
  clear_has_quotatype();
}
inline ::Cmd::EQuotaType QuotaLogCmd::quotatype() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLogCmd.quotatype)
  return static_cast< ::Cmd::EQuotaType >(quotatype_);
}
inline void QuotaLogCmd::set_quotatype(::Cmd::EQuotaType value) {
  assert(::Cmd::EQuotaType_IsValid(value));
  set_has_quotatype();
  quotatype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaLogCmd.quotatype)
}

// optional uint64 changed = 11;
inline bool QuotaLogCmd::has_changed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void QuotaLogCmd::set_has_changed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void QuotaLogCmd::clear_has_changed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void QuotaLogCmd::clear_changed() {
  changed_ = GOOGLE_ULONGLONG(0);
  clear_has_changed();
}
inline ::google::protobuf::uint64 QuotaLogCmd::changed() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLogCmd.changed)
  return changed_;
}
inline void QuotaLogCmd::set_changed(::google::protobuf::uint64 value) {
  set_has_changed();
  changed_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaLogCmd.changed)
}

// optional uint64 quota = 12;
inline bool QuotaLogCmd::has_quota() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void QuotaLogCmd::set_has_quota() {
  _has_bits_[0] |= 0x00000800u;
}
inline void QuotaLogCmd::clear_has_quota() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void QuotaLogCmd::clear_quota() {
  quota_ = GOOGLE_ULONGLONG(0);
  clear_has_quota();
}
inline ::google::protobuf::uint64 QuotaLogCmd::quota() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLogCmd.quota)
  return quota_;
}
inline void QuotaLogCmd::set_quota(::google::protobuf::uint64 value) {
  set_has_quota();
  quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaLogCmd.quota)
}

// optional uint64 lock = 13;
inline bool QuotaLogCmd::has_lock() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void QuotaLogCmd::set_has_lock() {
  _has_bits_[0] |= 0x00001000u;
}
inline void QuotaLogCmd::clear_has_lock() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void QuotaLogCmd::clear_lock() {
  lock_ = GOOGLE_ULONGLONG(0);
  clear_has_lock();
}
inline ::google::protobuf::uint64 QuotaLogCmd::lock() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLogCmd.lock)
  return lock_;
}
inline void QuotaLogCmd::set_lock(::google::protobuf::uint64 value) {
  set_has_lock();
  lock_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaLogCmd.lock)
}

// -------------------------------------------------------------------

// GuildItemLogCmd

// optional .Cmd.Command cmd = 1 [default = LOG_PROTOCMD];
inline bool GuildItemLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildItemLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildItemLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildItemLogCmd::clear_cmd() {
  cmd_ = 204;
  clear_has_cmd();
}
inline ::Cmd::Command GuildItemLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildItemLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GuildItemLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildItemLogCmd.cmd)
}

// optional .Cmd.LogParam param = 2 [default = GUILD_ITEM_LOG_CMD];
inline bool GuildItemLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildItemLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildItemLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildItemLogCmd::clear_param() {
  param_ = 64;
  clear_has_param();
}
inline ::Cmd::LogParam GuildItemLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildItemLogCmd.param)
  return static_cast< ::Cmd::LogParam >(param_);
}
inline void GuildItemLogCmd::set_param(::Cmd::LogParam value) {
  assert(::Cmd::LogParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildItemLogCmd.param)
}

// optional uint32 cid = 3;
inline bool GuildItemLogCmd::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildItemLogCmd::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildItemLogCmd::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildItemLogCmd::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 GuildItemLogCmd::cid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildItemLogCmd.cid)
  return cid_;
}
inline void GuildItemLogCmd::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildItemLogCmd.cid)
}

// optional uint32 sid = 4;
inline bool GuildItemLogCmd::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildItemLogCmd::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildItemLogCmd::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildItemLogCmd::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 GuildItemLogCmd::sid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildItemLogCmd.sid)
  return sid_;
}
inline void GuildItemLogCmd::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildItemLogCmd.sid)
}

// optional uint64 gid = 5;
inline bool GuildItemLogCmd::has_gid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildItemLogCmd::set_has_gid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildItemLogCmd::clear_has_gid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildItemLogCmd::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 GuildItemLogCmd::gid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildItemLogCmd.gid)
  return gid_;
}
inline void GuildItemLogCmd::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildItemLogCmd.gid)
}

// optional uint32 time = 6;
inline bool GuildItemLogCmd::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildItemLogCmd::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildItemLogCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildItemLogCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 GuildItemLogCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildItemLogCmd.time)
  return time_;
}
inline void GuildItemLogCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildItemLogCmd.time)
}

// optional string logid = 7;
inline bool GuildItemLogCmd::has_logid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildItemLogCmd::set_has_logid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildItemLogCmd::clear_has_logid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildItemLogCmd::clear_logid() {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& GuildItemLogCmd::logid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildItemLogCmd.logid)
  return *logid_;
}
inline void GuildItemLogCmd::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.GuildItemLogCmd.logid)
}
inline void GuildItemLogCmd::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.GuildItemLogCmd.logid)
}
inline void GuildItemLogCmd::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.GuildItemLogCmd.logid)
}
inline ::std::string* GuildItemLogCmd::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.GuildItemLogCmd.logid)
  return logid_;
}
inline ::std::string* GuildItemLogCmd::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GuildItemLogCmd::set_allocated_logid(::std::string* logid) {
  if (logid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logid_;
  }
  if (logid) {
    set_has_logid();
    logid_ = logid;
  } else {
    clear_has_logid();
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GuildItemLogCmd.logid)
}

// optional uint32 itemid = 8;
inline bool GuildItemLogCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildItemLogCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildItemLogCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildItemLogCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 GuildItemLogCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildItemLogCmd.itemid)
  return itemid_;
}
inline void GuildItemLogCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildItemLogCmd.itemid)
}

// optional int64 changed = 9;
inline bool GuildItemLogCmd::has_changed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildItemLogCmd::set_has_changed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildItemLogCmd::clear_has_changed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildItemLogCmd::clear_changed() {
  changed_ = GOOGLE_LONGLONG(0);
  clear_has_changed();
}
inline ::google::protobuf::int64 GuildItemLogCmd::changed() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildItemLogCmd.changed)
  return changed_;
}
inline void GuildItemLogCmd::set_changed(::google::protobuf::int64 value) {
  set_has_changed();
  changed_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildItemLogCmd.changed)
}

// optional uint32 count = 10;
inline bool GuildItemLogCmd::has_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GuildItemLogCmd::set_has_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GuildItemLogCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GuildItemLogCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GuildItemLogCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildItemLogCmd.count)
  return count_;
}
inline void GuildItemLogCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildItemLogCmd.count)
}

// optional uint32 type = 11;
inline bool GuildItemLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GuildItemLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GuildItemLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GuildItemLogCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 GuildItemLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildItemLogCmd.type)
  return type_;
}
inline void GuildItemLogCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildItemLogCmd.type)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::LogParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::LogParam>() {
  return ::Cmd::LogParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EChatType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EChatType>() {
  return ::Cmd::EChatType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EPriceStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EPriceStatus>() {
  return ::Cmd::EPriceStatus_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EPetChangeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EPetChangeType>() {
  return ::Cmd::EPetChangeType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EPetAdventureLogType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EPetAdventureLogType>() {
  return ::Cmd::EPetAdventureLogType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ECreditType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ECreditType>() {
  return ::Cmd::ECreditType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EGiveEvent> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EGiveEvent>() {
  return ::Cmd::EGiveEvent_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ELogGiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ELogGiveType>() {
  return ::Cmd::ELogGiveType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EQuotaOptType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EQuotaOptType>() {
  return ::Cmd::EQuotaOptType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LogCmd_2eproto__INCLUDED
