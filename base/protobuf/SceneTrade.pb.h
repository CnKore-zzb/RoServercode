// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneTrade.proto

#ifndef PROTOBUF_SceneTrade_2eproto__INCLUDED
#define PROTOBUF_SceneTrade_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "ProtoCommon.pb.h"
#include "SceneItem.pb.h"
#include "RecordTrade.pb.h"
#include "SceneMap.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneTrade_2eproto();
void protobuf_AssignDesc_SceneTrade_2eproto();
void protobuf_ShutdownFile_SceneTrade_2eproto();

class FrostItemListSceneTradeCmd;
class ReduceMoneyRecordTradeCmd;
class AddItemRecordTradeCmd;
class AddMoneyRecordTradeCmd;
class ReduceItemRecordTrade;
class SessionToMeRecordTrade;
class SessionForwardUsercmdTrade;
class SessionForwardScenecmdTrade;
class ForwardUserCmdToRecordCmd;
class WorldMsgCmd;
class UpdateTradeLogCmd;
class GiveCheckMoneySceneTradeCmd;
class SyncGiveItemSceneTradeCmd;
class AddGiveSceneTradeCmd;
class DelGiveSceneTradeCmd;
class AddGiveItemSceneTradeCmd;
class ReceiveGiveSceneTradeCmd;
class NtfGiveStatusSceneTradeCmd;
class ReduceQuotaSceneTradeCmd;
class UnlockQuotaSceneTradeCmd;
class ExtraPermissionSceneTradeCmd;
class SecurityCmdSceneTradeCmd;
class TradePriceQueryTradeCmd;
class BoothOpenTradeCmd;

enum SceneTradeParam {
  FROST_ITEM_LIST_SCENE_TRADE_PARAM = 1
};
bool SceneTradeParam_IsValid(int value);
const SceneTradeParam SceneTradeParam_MIN = FROST_ITEM_LIST_SCENE_TRADE_PARAM;
const SceneTradeParam SceneTradeParam_MAX = FROST_ITEM_LIST_SCENE_TRADE_PARAM;
const int SceneTradeParam_ARRAYSIZE = SceneTradeParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* SceneTradeParam_descriptor();
inline const ::std::string& SceneTradeParam_Name(SceneTradeParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    SceneTradeParam_descriptor(), value);
}
inline bool SceneTradeParam_Parse(
    const ::std::string& name, SceneTradeParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SceneTradeParam>(
    SceneTradeParam_descriptor(), name, value);
}
enum RecordServerTradeParam {
  SESSION_TO_ME_RECORDTRADE = 1,
  REDUCE_MONEY_RECORDTRADE = 3,
  ADD_ITEM_RECORDTRADE = 4,
  ADD_MONEY_RECORDTRADE = 5,
  REDUCE_ITEM_RECORDTRADE = 6,
  SESSION_FORWARD_USERCMD_TRADE = 7,
  SESSION_FORWARD_SCENECMD_TRADE = 8,
  FORWARD_USERCMD_TO_RECORD = 9,
  WORLD_MSG = 10,
  UPDATE_TRADELOG_RECORDTRADE = 11,
  GIVE_CHECK_MONEY_RECORDTRADE = 12,
  SYNC_GIVE_ITEM_RECORDTRADE = 13,
  ADD_GIVE_RECORDTRADE = 14,
  DEL_GIVE_RECORDTRADE = 15,
  RECEIVE_GIVE_RECORDTRADE = 16,
  ADD_GIVE_ITEM_RECORDTRADE = 17,
  NTF_GIVE_STATUS_RECORDTRADE = 18,
  REDUCE_QUOTA_RECORDTRADE = 19,
  EXTRA_PERMISSION_RECORDTRADE = 20,
  SECURITY_CMD_RECORDTRADE = 21,
  TRADE_PRICE_QUERY_RECORDTRADE = 22,
  BOOTH_OPEN_RECORDTRADE = 23,
  UNLOCK_QUOTA_RECORDTRADE = 24
};
bool RecordServerTradeParam_IsValid(int value);
const RecordServerTradeParam RecordServerTradeParam_MIN = SESSION_TO_ME_RECORDTRADE;
const RecordServerTradeParam RecordServerTradeParam_MAX = UNLOCK_QUOTA_RECORDTRADE;
const int RecordServerTradeParam_ARRAYSIZE = RecordServerTradeParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecordServerTradeParam_descriptor();
inline const ::std::string& RecordServerTradeParam_Name(RecordServerTradeParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecordServerTradeParam_descriptor(), value);
}
inline bool RecordServerTradeParam_Parse(
    const ::std::string& name, RecordServerTradeParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecordServerTradeParam>(
    RecordServerTradeParam_descriptor(), name, value);
}
enum EAddItemType {
  EADDITEMTYP_BUY = 1,
  EADDITEMTYP_RETURN = 2
};
bool EAddItemType_IsValid(int value);
const EAddItemType EAddItemType_MIN = EADDITEMTYP_BUY;
const EAddItemType EAddItemType_MAX = EADDITEMTYP_RETURN;
const int EAddItemType_ARRAYSIZE = EAddItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAddItemType_descriptor();
inline const ::std::string& EAddItemType_Name(EAddItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAddItemType_descriptor(), value);
}
inline bool EAddItemType_Parse(
    const ::std::string& name, EAddItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAddItemType>(
    EAddItemType_descriptor(), name, value);
}
enum EGiveStatus {
  EGiveStatus_Accept = 1,
  EGiveStatus_Refuse = 2
};
bool EGiveStatus_IsValid(int value);
const EGiveStatus EGiveStatus_MIN = EGiveStatus_Accept;
const EGiveStatus EGiveStatus_MAX = EGiveStatus_Refuse;
const int EGiveStatus_ARRAYSIZE = EGiveStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGiveStatus_descriptor();
inline const ::std::string& EGiveStatus_Name(EGiveStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGiveStatus_descriptor(), value);
}
inline bool EGiveStatus_Parse(
    const ::std::string& name, EGiveStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGiveStatus>(
    EGiveStatus_descriptor(), name, value);
}
enum EPermission {
  EPERMISSION_MAX_PENDING_LIMIT = 1,
  EPERMISSION_RETURN_PERCENT = 2,
  EPERMISSION_QUOTA = 3,
  EPERMISSION_MAX_BOOTH_LIMIT = 4
};
bool EPermission_IsValid(int value);
const EPermission EPermission_MIN = EPERMISSION_MAX_PENDING_LIMIT;
const EPermission EPermission_MAX = EPERMISSION_MAX_BOOTH_LIMIT;
const int EPermission_ARRAYSIZE = EPermission_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPermission_descriptor();
inline const ::std::string& EPermission_Name(EPermission value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPermission_descriptor(), value);
}
inline bool EPermission_Parse(
    const ::std::string& name, EPermission* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPermission>(
    EPermission_descriptor(), name, value);
}
enum ESecurityType {
  ESECURITYTYPE_ALL = 0,
  ESECURITYTYPE_SELL = 1,
  ESECURITYTYPE_BUY = 2
};
bool ESecurityType_IsValid(int value);
const ESecurityType ESecurityType_MIN = ESECURITYTYPE_ALL;
const ESecurityType ESecurityType_MAX = ESECURITYTYPE_BUY;
const int ESecurityType_ARRAYSIZE = ESecurityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESecurityType_descriptor();
inline const ::std::string& ESecurityType_Name(ESecurityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESecurityType_descriptor(), value);
}
inline bool ESecurityType_Parse(
    const ::std::string& name, ESecurityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESecurityType>(
    ESecurityType_descriptor(), name, value);
}
// ===================================================================

class FrostItemListSceneTradeCmd : public ::google::protobuf::Message {
 public:
  FrostItemListSceneTradeCmd();
  virtual ~FrostItemListSceneTradeCmd();

  FrostItemListSceneTradeCmd(const FrostItemListSceneTradeCmd& from);

  inline FrostItemListSceneTradeCmd& operator=(const FrostItemListSceneTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrostItemListSceneTradeCmd& default_instance();

  void Swap(FrostItemListSceneTradeCmd* other);

  // implements Message ----------------------------------------------

  FrostItemListSceneTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrostItemListSceneTradeCmd& from);
  void MergeFrom(const FrostItemListSceneTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SceneTradeParam param = 2 [default = FROST_ITEM_LIST_SCENE_TRADE_PARAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SceneTradeParam param() const;
  inline void set_param(::Cmd::SceneTradeParam value);

  // repeated .Cmd.FrostItemInfo lists = 3;
  inline int lists_size() const;
  inline void clear_lists();
  static const int kListsFieldNumber = 3;
  inline const ::Cmd::FrostItemInfo& lists(int index) const;
  inline ::Cmd::FrostItemInfo* mutable_lists(int index);
  inline ::Cmd::FrostItemInfo* add_lists();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FrostItemInfo >&
      lists() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::FrostItemInfo >*
      mutable_lists();

  // @@protoc_insertion_point(class_scope:Cmd.FrostItemListSceneTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::FrostItemInfo > lists_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static FrostItemListSceneTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReduceMoneyRecordTradeCmd : public ::google::protobuf::Message {
 public:
  ReduceMoneyRecordTradeCmd();
  virtual ~ReduceMoneyRecordTradeCmd();

  ReduceMoneyRecordTradeCmd(const ReduceMoneyRecordTradeCmd& from);

  inline ReduceMoneyRecordTradeCmd& operator=(const ReduceMoneyRecordTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReduceMoneyRecordTradeCmd& default_instance();

  void Swap(ReduceMoneyRecordTradeCmd* other);

  // implements Message ----------------------------------------------

  ReduceMoneyRecordTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReduceMoneyRecordTradeCmd& from);
  void MergeFrom(const ReduceMoneyRecordTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_MONEY_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint32 money_type = 3;
  inline bool has_money_type() const;
  inline void clear_money_type();
  static const int kMoneyTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 money_type() const;
  inline void set_money_type(::google::protobuf::uint32 value);

  // optional uint32 total_money = 4;
  inline bool has_total_money() const;
  inline void clear_total_money();
  static const int kTotalMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 total_money() const;
  inline void set_total_money(::google::protobuf::uint32 value);

  // optional .Cmd.ETRADE_RET_CODE ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::Cmd::ETRADE_RET_CODE ret() const;
  inline void set_ret(::Cmd::ETRADE_RET_CODE value);

  // optional uint64 charid = 6;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 6;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.TradeItemBaseInfo item_info = 7;
  inline bool has_item_info() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 7;
  inline const ::Cmd::TradeItemBaseInfo& item_info() const;
  inline ::Cmd::TradeItemBaseInfo* mutable_item_info();
  inline ::Cmd::TradeItemBaseInfo* release_item_info();
  inline void set_allocated_item_info(::Cmd::TradeItemBaseInfo* item_info);

  // optional uint64 quota = 8 [default = 0];
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 8;
  inline ::google::protobuf::uint64 quota() const;
  inline void set_quota(::google::protobuf::uint64 value);

  // optional .Cmd.ETradeType type = 9 [default = ETRADETYPE_TRADE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline ::Cmd::ETradeType type() const;
  inline void set_type(::Cmd::ETradeType value);

  // optional uint64 record_id = 10 [default = 0];
  inline bool has_record_id() const;
  inline void clear_record_id();
  static const int kRecordIdFieldNumber = 10;
  inline ::google::protobuf::uint64 record_id() const;
  inline void set_record_id(::google::protobuf::uint64 value);

  // optional uint64 lock_quota = 11 [default = 0];
  inline bool has_lock_quota() const;
  inline void clear_lock_quota();
  static const int kLockQuotaFieldNumber = 11;
  inline ::google::protobuf::uint64 lock_quota() const;
  inline void set_lock_quota(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ReduceMoneyRecordTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_money_type();
  inline void clear_has_money_type();
  inline void set_has_total_money();
  inline void clear_has_total_money();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_item_info();
  inline void clear_has_item_info();
  inline void set_has_quota();
  inline void clear_has_quota();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_record_id();
  inline void clear_has_record_id();
  inline void set_has_lock_quota();
  inline void clear_has_lock_quota();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 money_type_;
  ::google::protobuf::uint32 total_money_;
  ::google::protobuf::uint64 charid_;
  ::Cmd::TradeItemBaseInfo* item_info_;
  int ret_;
  int type_;
  ::google::protobuf::uint64 quota_;
  ::google::protobuf::uint64 record_id_;
  ::google::protobuf::uint64 lock_quota_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static ReduceMoneyRecordTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class AddItemRecordTradeCmd : public ::google::protobuf::Message {
 public:
  AddItemRecordTradeCmd();
  virtual ~AddItemRecordTradeCmd();

  AddItemRecordTradeCmd(const AddItemRecordTradeCmd& from);

  inline AddItemRecordTradeCmd& operator=(const AddItemRecordTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddItemRecordTradeCmd& default_instance();

  void Swap(AddItemRecordTradeCmd* other);

  // implements Message ----------------------------------------------

  AddItemRecordTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddItemRecordTradeCmd& from);
  void MergeFrom(const AddItemRecordTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_ITEM_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional .Cmd.TradeItemBaseInfo item_info = 3;
  inline bool has_item_info() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 3;
  inline const ::Cmd::TradeItemBaseInfo& item_info() const;
  inline ::Cmd::TradeItemBaseInfo* mutable_item_info();
  inline ::Cmd::TradeItemBaseInfo* release_item_info();
  inline void set_allocated_item_info(::Cmd::TradeItemBaseInfo* item_info);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.EAddItemType addtype = 5;
  inline bool has_addtype() const;
  inline void clear_addtype();
  static const int kAddtypeFieldNumber = 5;
  inline ::Cmd::EAddItemType addtype() const;
  inline void set_addtype(::Cmd::EAddItemType value);

  // optional uint64 total_quota = 6;
  inline bool has_total_quota() const;
  inline void clear_total_quota();
  static const int kTotalQuotaFieldNumber = 6;
  inline ::google::protobuf::uint64 total_quota() const;
  inline void set_total_quota(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.AddItemRecordTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_item_info();
  inline void clear_has_item_info();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_addtype();
  inline void clear_has_addtype();
  inline void set_has_total_quota();
  inline void clear_has_total_quota();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::TradeItemBaseInfo* item_info_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 total_quota_;
  int addtype_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static AddItemRecordTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class AddMoneyRecordTradeCmd : public ::google::protobuf::Message {
 public:
  AddMoneyRecordTradeCmd();
  virtual ~AddMoneyRecordTradeCmd();

  AddMoneyRecordTradeCmd(const AddMoneyRecordTradeCmd& from);

  inline AddMoneyRecordTradeCmd& operator=(const AddMoneyRecordTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMoneyRecordTradeCmd& default_instance();

  void Swap(AddMoneyRecordTradeCmd* other);

  // implements Message ----------------------------------------------

  AddMoneyRecordTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMoneyRecordTradeCmd& from);
  void MergeFrom(const AddMoneyRecordTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_MONEY_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint32 money_type = 3;
  inline bool has_money_type() const;
  inline void clear_money_type();
  static const int kMoneyTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 money_type() const;
  inline void set_money_type(::google::protobuf::uint32 value);

  // optional uint32 total_money = 4;
  inline bool has_total_money() const;
  inline void clear_total_money();
  static const int kTotalMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 total_money() const;
  inline void set_total_money(::google::protobuf::uint32 value);

  // optional uint64 charid = 5;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 5;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 itemid = 6;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 6;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 count = 7;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 7;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 price = 8;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 8;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional .Cmd.EOperType type = 9;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline ::Cmd::EOperType type() const;
  inline void set_type(::Cmd::EOperType value);

  // optional uint32 money2 = 10;
  inline bool has_money2() const;
  inline void clear_money2();
  static const int kMoney2FieldNumber = 10;
  inline ::google::protobuf::uint32 money2() const;
  inline void set_money2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.AddMoneyRecordTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_money_type();
  inline void clear_has_money_type();
  inline void set_has_total_money();
  inline void clear_has_total_money();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_money2();
  inline void clear_has_money2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 money_type_;
  ::google::protobuf::uint32 total_money_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 price_;
  int type_;
  ::google::protobuf::uint32 money2_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static AddMoneyRecordTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReduceItemRecordTrade : public ::google::protobuf::Message {
 public:
  ReduceItemRecordTrade();
  virtual ~ReduceItemRecordTrade();

  ReduceItemRecordTrade(const ReduceItemRecordTrade& from);

  inline ReduceItemRecordTrade& operator=(const ReduceItemRecordTrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReduceItemRecordTrade& default_instance();

  void Swap(ReduceItemRecordTrade* other);

  // implements Message ----------------------------------------------

  ReduceItemRecordTrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReduceItemRecordTrade& from);
  void MergeFrom(const ReduceItemRecordTrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_ITEM_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional .Cmd.TradeItemBaseInfo item_info = 3;
  inline bool has_item_info() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 3;
  inline const ::Cmd::TradeItemBaseInfo& item_info() const;
  inline ::Cmd::TradeItemBaseInfo* mutable_item_info();
  inline ::Cmd::TradeItemBaseInfo* release_item_info();
  inline void set_allocated_item_info(::Cmd::TradeItemBaseInfo* item_info);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.ETRADE_RET_CODE ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::Cmd::ETRADE_RET_CODE ret() const;
  inline void set_ret(::Cmd::ETRADE_RET_CODE value);

  // optional uint32 boothfee = 6;
  inline bool has_boothfee() const;
  inline void clear_boothfee();
  static const int kBoothfeeFieldNumber = 6;
  inline ::google::protobuf::uint32 boothfee() const;
  inline void set_boothfee(::google::protobuf::uint32 value);

  // optional bool is_resell = 7;
  inline bool has_is_resell() const;
  inline void clear_is_resell();
  static const int kIsResellFieldNumber = 7;
  inline bool is_resell() const;
  inline void set_is_resell(bool value);

  // optional uint64 orderid = 8;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 8;
  inline ::google::protobuf::uint64 orderid() const;
  inline void set_orderid(::google::protobuf::uint64 value);

  // optional .Cmd.ETradeType type = 9 [default = ETRADETYPE_TRADE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline ::Cmd::ETradeType type() const;
  inline void set_type(::Cmd::ETradeType value);

  // optional uint64 quota_unlock = 10;
  inline bool has_quota_unlock() const;
  inline void clear_quota_unlock();
  static const int kQuotaUnlockFieldNumber = 10;
  inline ::google::protobuf::uint64 quota_unlock() const;
  inline void set_quota_unlock(::google::protobuf::uint64 value);

  // optional uint64 quota_lock = 11;
  inline bool has_quota_lock() const;
  inline void clear_quota_lock();
  static const int kQuotaLockFieldNumber = 11;
  inline ::google::protobuf::uint64 quota_lock() const;
  inline void set_quota_lock(::google::protobuf::uint64 value);

  // optional uint64 quota = 12;
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 12;
  inline ::google::protobuf::uint64 quota() const;
  inline void set_quota(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ReduceItemRecordTrade)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_item_info();
  inline void clear_has_item_info();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_boothfee();
  inline void clear_has_boothfee();
  inline void set_has_is_resell();
  inline void clear_has_is_resell();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_quota_unlock();
  inline void clear_has_quota_unlock();
  inline void set_has_quota_lock();
  inline void clear_has_quota_lock();
  inline void set_has_quota();
  inline void clear_has_quota();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::TradeItemBaseInfo* item_info_;
  ::google::protobuf::uint64 charid_;
  int ret_;
  ::google::protobuf::uint32 boothfee_;
  ::google::protobuf::uint64 orderid_;
  bool is_resell_;
  int type_;
  ::google::protobuf::uint64 quota_unlock_;
  ::google::protobuf::uint64 quota_lock_;
  ::google::protobuf::uint64 quota_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static ReduceItemRecordTrade* default_instance_;
};
// -------------------------------------------------------------------

class SessionToMeRecordTrade : public ::google::protobuf::Message {
 public:
  SessionToMeRecordTrade();
  virtual ~SessionToMeRecordTrade();

  SessionToMeRecordTrade(const SessionToMeRecordTrade& from);

  inline SessionToMeRecordTrade& operator=(const SessionToMeRecordTrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionToMeRecordTrade& default_instance();

  void Swap(SessionToMeRecordTrade* other);

  // implements Message ----------------------------------------------

  SessionToMeRecordTrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionToMeRecordTrade& from);
  void MergeFrom(const SessionToMeRecordTrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_TO_ME_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 5;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 5;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SessionToMeRecordTrade)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* data_;
  ::google::protobuf::uint32 len_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static SessionToMeRecordTrade* default_instance_;
};
// -------------------------------------------------------------------

class SessionForwardUsercmdTrade : public ::google::protobuf::Message {
 public:
  SessionForwardUsercmdTrade();
  virtual ~SessionForwardUsercmdTrade();

  SessionForwardUsercmdTrade(const SessionForwardUsercmdTrade& from);

  inline SessionForwardUsercmdTrade& operator=(const SessionForwardUsercmdTrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionForwardUsercmdTrade& default_instance();

  void Swap(SessionForwardUsercmdTrade* other);

  // implements Message ----------------------------------------------

  SessionForwardUsercmdTrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionForwardUsercmdTrade& from);
  void MergeFrom(const SessionForwardUsercmdTrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_FORWARD_USERCMD_TRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 6;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 6;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SessionForwardUsercmdTrade)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* data_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 len_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static SessionForwardUsercmdTrade* default_instance_;
};
// -------------------------------------------------------------------

class SessionForwardScenecmdTrade : public ::google::protobuf::Message {
 public:
  SessionForwardScenecmdTrade();
  virtual ~SessionForwardScenecmdTrade();

  SessionForwardScenecmdTrade(const SessionForwardScenecmdTrade& from);

  inline SessionForwardScenecmdTrade& operator=(const SessionForwardScenecmdTrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionForwardScenecmdTrade& default_instance();

  void Swap(SessionForwardScenecmdTrade* other);

  // implements Message ----------------------------------------------

  SessionForwardScenecmdTrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionForwardScenecmdTrade& from);
  void MergeFrom(const SessionForwardScenecmdTrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_FORWARD_SCENECMD_TRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 7;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 7;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SessionForwardScenecmdTrade)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 len_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static SessionForwardScenecmdTrade* default_instance_;
};
// -------------------------------------------------------------------

class ForwardUserCmdToRecordCmd : public ::google::protobuf::Message {
 public:
  ForwardUserCmdToRecordCmd();
  virtual ~ForwardUserCmdToRecordCmd();

  ForwardUserCmdToRecordCmd(const ForwardUserCmdToRecordCmd& from);

  inline ForwardUserCmdToRecordCmd& operator=(const ForwardUserCmdToRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardUserCmdToRecordCmd& default_instance();

  void Swap(ForwardUserCmdToRecordCmd* other);

  // implements Message ----------------------------------------------

  ForwardUserCmdToRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardUserCmdToRecordCmd& from);
  void MergeFrom(const ForwardUserCmdToRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = FORWARD_USERCMD_TO_RECORD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 5;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 5;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ForwardUserCmdToRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* data_;
  ::google::protobuf::uint32 len_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static ForwardUserCmdToRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class WorldMsgCmd : public ::google::protobuf::Message {
 public:
  WorldMsgCmd();
  virtual ~WorldMsgCmd();

  WorldMsgCmd(const WorldMsgCmd& from);

  inline WorldMsgCmd& operator=(const WorldMsgCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldMsgCmd& default_instance();

  void Swap(WorldMsgCmd* other);

  // implements Message ----------------------------------------------

  WorldMsgCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldMsgCmd& from);
  void MergeFrom(const WorldMsgCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = WORLD_MSG];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 4;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 4;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.WorldMsgCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* data_;
  ::google::protobuf::uint32 len_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static WorldMsgCmd* default_instance_;
};
// -------------------------------------------------------------------

class UpdateTradeLogCmd : public ::google::protobuf::Message {
 public:
  UpdateTradeLogCmd();
  virtual ~UpdateTradeLogCmd();

  UpdateTradeLogCmd(const UpdateTradeLogCmd& from);

  inline UpdateTradeLogCmd& operator=(const UpdateTradeLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateTradeLogCmd& default_instance();

  void Swap(UpdateTradeLogCmd* other);

  // implements Message ----------------------------------------------

  UpdateTradeLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateTradeLogCmd& from);
  void MergeFrom(const UpdateTradeLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = UPDATE_TRADELOG_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.EOperType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::EOperType type() const;
  inline void set_type(::Cmd::EOperType value);

  // optional uint64 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .Cmd.ETradeType trade_type = 6 [default = ETRADETYPE_TRADE];
  inline bool has_trade_type() const;
  inline void clear_trade_type();
  static const int kTradeTypeFieldNumber = 6;
  inline ::Cmd::ETradeType trade_type() const;
  inline void set_trade_type(::Cmd::ETradeType value);

  // @@protoc_insertion_point(class_scope:Cmd.UpdateTradeLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_trade_type();
  inline void clear_has_trade_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 id_;
  int type_;
  int trade_type_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static UpdateTradeLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class GiveCheckMoneySceneTradeCmd : public ::google::protobuf::Message {
 public:
  GiveCheckMoneySceneTradeCmd();
  virtual ~GiveCheckMoneySceneTradeCmd();

  GiveCheckMoneySceneTradeCmd(const GiveCheckMoneySceneTradeCmd& from);

  inline GiveCheckMoneySceneTradeCmd& operator=(const GiveCheckMoneySceneTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiveCheckMoneySceneTradeCmd& default_instance();

  void Swap(GiveCheckMoneySceneTradeCmd* other);

  // implements Message ----------------------------------------------

  GiveCheckMoneySceneTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GiveCheckMoneySceneTradeCmd& from);
  void MergeFrom(const GiveCheckMoneySceneTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = GIVE_CHECK_MONEY_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.EOperType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::EOperType type() const;
  inline void set_type(::Cmd::EOperType value);

  // optional uint64 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 friendid = 6;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendidFieldNumber = 6;
  inline ::google::protobuf::uint64 friendid() const;
  inline void set_friendid(::google::protobuf::uint64 value);

  // optional string content = 7;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 7;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional bool anonymous = 8;
  inline bool has_anonymous() const;
  inline void clear_anonymous();
  static const int kAnonymousFieldNumber = 8;
  inline bool anonymous() const;
  inline void set_anonymous(bool value);

  // optional uint64 quota = 9;
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 9;
  inline ::google::protobuf::uint64 quota() const;
  inline void set_quota(::google::protobuf::uint64 value);

  // optional uint64 fee = 10;
  inline bool has_fee() const;
  inline void clear_fee();
  static const int kFeeFieldNumber = 10;
  inline ::google::protobuf::uint64 fee() const;
  inline void set_fee(::google::protobuf::uint64 value);

  // optional uint32 background = 11;
  inline bool has_background() const;
  inline void clear_background();
  static const int kBackgroundFieldNumber = 11;
  inline ::google::protobuf::uint32 background() const;
  inline void set_background(::google::protobuf::uint32 value);

  // optional bool ret = 12;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 12;
  inline bool ret() const;
  inline void set_ret(bool value);

  // optional .Cmd.ItemData itemdata = 13;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemdataFieldNumber = 13;
  inline const ::Cmd::ItemData& itemdata() const;
  inline ::Cmd::ItemData* mutable_itemdata();
  inline ::Cmd::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::Cmd::ItemData* itemdata);

  // optional bool fromtrade = 14;
  inline bool has_fromtrade() const;
  inline void clear_fromtrade();
  static const int kFromtradeFieldNumber = 14;
  inline bool fromtrade() const;
  inline void set_fromtrade(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.GiveCheckMoneySceneTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_friendid();
  inline void clear_has_friendid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_anonymous();
  inline void clear_has_anonymous();
  inline void set_has_quota();
  inline void clear_has_quota();
  inline void set_has_fee();
  inline void clear_has_fee();
  inline void set_has_background();
  inline void clear_has_background();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();
  inline void set_has_fromtrade();
  inline void clear_has_fromtrade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 friendid_;
  ::std::string* content_;
  int type_;
  ::google::protobuf::uint32 background_;
  ::google::protobuf::uint64 quota_;
  ::google::protobuf::uint64 fee_;
  ::Cmd::ItemData* itemdata_;
  bool anonymous_;
  bool ret_;
  bool fromtrade_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static GiveCheckMoneySceneTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class SyncGiveItemSceneTradeCmd : public ::google::protobuf::Message {
 public:
  SyncGiveItemSceneTradeCmd();
  virtual ~SyncGiveItemSceneTradeCmd();

  SyncGiveItemSceneTradeCmd(const SyncGiveItemSceneTradeCmd& from);

  inline SyncGiveItemSceneTradeCmd& operator=(const SyncGiveItemSceneTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncGiveItemSceneTradeCmd& default_instance();

  void Swap(SyncGiveItemSceneTradeCmd* other);

  // implements Message ----------------------------------------------

  SyncGiveItemSceneTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncGiveItemSceneTradeCmd& from);
  void MergeFrom(const SyncGiveItemSceneTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = SYNC_GIVE_ITEM_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // repeated .Cmd.GiveItemInfo iteminfo = 4;
  inline int iteminfo_size() const;
  inline void clear_iteminfo();
  static const int kIteminfoFieldNumber = 4;
  inline const ::Cmd::GiveItemInfo& iteminfo(int index) const;
  inline ::Cmd::GiveItemInfo* mutable_iteminfo(int index);
  inline ::Cmd::GiveItemInfo* add_iteminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GiveItemInfo >&
      iteminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::GiveItemInfo >*
      mutable_iteminfo();

  // optional .Cmd.EGiveType type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::Cmd::EGiveType type() const;
  inline void set_type(::Cmd::EGiveType value);

  // @@protoc_insertion_point(class_scope:Cmd.SyncGiveItemSceneTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::GiveItemInfo > iteminfo_;
  int type_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static SyncGiveItemSceneTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class AddGiveSceneTradeCmd : public ::google::protobuf::Message {
 public:
  AddGiveSceneTradeCmd();
  virtual ~AddGiveSceneTradeCmd();

  AddGiveSceneTradeCmd(const AddGiveSceneTradeCmd& from);

  inline AddGiveSceneTradeCmd& operator=(const AddGiveSceneTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddGiveSceneTradeCmd& default_instance();

  void Swap(AddGiveSceneTradeCmd* other);

  // implements Message ----------------------------------------------

  AddGiveSceneTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddGiveSceneTradeCmd& from);
  void MergeFrom(const AddGiveSceneTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_GIVE_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.GiveItemInfo iteminfo = 4;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kIteminfoFieldNumber = 4;
  inline const ::Cmd::GiveItemInfo& iteminfo() const;
  inline ::Cmd::GiveItemInfo* mutable_iteminfo();
  inline ::Cmd::GiveItemInfo* release_iteminfo();
  inline void set_allocated_iteminfo(::Cmd::GiveItemInfo* iteminfo);

  // @@protoc_insertion_point(class_scope:Cmd.AddGiveSceneTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::Cmd::GiveItemInfo* iteminfo_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static AddGiveSceneTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class DelGiveSceneTradeCmd : public ::google::protobuf::Message {
 public:
  DelGiveSceneTradeCmd();
  virtual ~DelGiveSceneTradeCmd();

  DelGiveSceneTradeCmd(const DelGiveSceneTradeCmd& from);

  inline DelGiveSceneTradeCmd& operator=(const DelGiveSceneTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelGiveSceneTradeCmd& default_instance();

  void Swap(DelGiveSceneTradeCmd* other);

  // implements Message ----------------------------------------------

  DelGiveSceneTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelGiveSceneTradeCmd& from);
  void MergeFrom(const DelGiveSceneTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = DEL_GIVE_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.DelGiveSceneTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 id_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static DelGiveSceneTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class AddGiveItemSceneTradeCmd : public ::google::protobuf::Message {
 public:
  AddGiveItemSceneTradeCmd();
  virtual ~AddGiveItemSceneTradeCmd();

  AddGiveItemSceneTradeCmd(const AddGiveItemSceneTradeCmd& from);

  inline AddGiveItemSceneTradeCmd& operator=(const AddGiveItemSceneTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddGiveItemSceneTradeCmd& default_instance();

  void Swap(AddGiveItemSceneTradeCmd* other);

  // implements Message ----------------------------------------------

  AddGiveItemSceneTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddGiveItemSceneTradeCmd& from);
  void MergeFrom(const AddGiveItemSceneTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_GIVE_ITEM_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 itemid = 5;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 5;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 count = 6;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 6;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional .Cmd.ItemData itemData = 7;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemDataFieldNumber = 7;
  inline const ::Cmd::ItemData& itemdata() const;
  inline ::Cmd::ItemData* mutable_itemdata();
  inline ::Cmd::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::Cmd::ItemData* itemdata);

  // optional uint32 background = 8;
  inline bool has_background() const;
  inline void clear_background();
  static const int kBackgroundFieldNumber = 8;
  inline ::google::protobuf::uint32 background() const;
  inline void set_background(::google::protobuf::uint32 value);

  // optional bool ret = 9;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 9;
  inline bool ret() const;
  inline void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.AddGiveItemSceneTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();
  inline void set_has_background();
  inline void clear_has_background();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 count_;
  ::Cmd::ItemData* itemdata_;
  ::google::protobuf::uint32 background_;
  bool ret_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static AddGiveItemSceneTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReceiveGiveSceneTradeCmd : public ::google::protobuf::Message {
 public:
  ReceiveGiveSceneTradeCmd();
  virtual ~ReceiveGiveSceneTradeCmd();

  ReceiveGiveSceneTradeCmd(const ReceiveGiveSceneTradeCmd& from);

  inline ReceiveGiveSceneTradeCmd& operator=(const ReceiveGiveSceneTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceiveGiveSceneTradeCmd& default_instance();

  void Swap(ReceiveGiveSceneTradeCmd* other);

  // implements Message ----------------------------------------------

  ReceiveGiveSceneTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReceiveGiveSceneTradeCmd& from);
  void MergeFrom(const ReceiveGiveSceneTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = RECEIVE_GIVE_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ReceiveGiveSceneTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 id_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static ReceiveGiveSceneTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class NtfGiveStatusSceneTradeCmd : public ::google::protobuf::Message {
 public:
  NtfGiveStatusSceneTradeCmd();
  virtual ~NtfGiveStatusSceneTradeCmd();

  NtfGiveStatusSceneTradeCmd(const NtfGiveStatusSceneTradeCmd& from);

  inline NtfGiveStatusSceneTradeCmd& operator=(const NtfGiveStatusSceneTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfGiveStatusSceneTradeCmd& default_instance();

  void Swap(NtfGiveStatusSceneTradeCmd* other);

  // implements Message ----------------------------------------------

  NtfGiveStatusSceneTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfGiveStatusSceneTradeCmd& from);
  void MergeFrom(const NtfGiveStatusSceneTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = NTF_GIVE_STATUS_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .Cmd.EGiveStatus status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::Cmd::EGiveStatus status() const;
  inline void set_status(::Cmd::EGiveStatus value);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Cmd.NtfGiveStatusSceneTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  int status_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static NtfGiveStatusSceneTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReduceQuotaSceneTradeCmd : public ::google::protobuf::Message {
 public:
  ReduceQuotaSceneTradeCmd();
  virtual ~ReduceQuotaSceneTradeCmd();

  ReduceQuotaSceneTradeCmd(const ReduceQuotaSceneTradeCmd& from);

  inline ReduceQuotaSceneTradeCmd& operator=(const ReduceQuotaSceneTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReduceQuotaSceneTradeCmd& default_instance();

  void Swap(ReduceQuotaSceneTradeCmd* other);

  // implements Message ----------------------------------------------

  ReduceQuotaSceneTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReduceQuotaSceneTradeCmd& from);
  void MergeFrom(const ReduceQuotaSceneTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_QUOTA_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 quota = 5;
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 5;
  inline ::google::protobuf::uint64 quota() const;
  inline void set_quota(::google::protobuf::uint64 value);

  // optional string receivername = 6;
  inline bool has_receivername() const;
  inline void clear_receivername();
  static const int kReceivernameFieldNumber = 6;
  inline const ::std::string& receivername() const;
  inline void set_receivername(const ::std::string& value);
  inline void set_receivername(const char* value);
  inline void set_receivername(const char* value, size_t size);
  inline ::std::string* mutable_receivername();
  inline ::std::string* release_receivername();
  inline void set_allocated_receivername(::std::string* receivername);

  // @@protoc_insertion_point(class_scope:Cmd.ReduceQuotaSceneTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_quota();
  inline void clear_has_quota();
  inline void set_has_receivername();
  inline void clear_has_receivername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 quota_;
  ::std::string* receivername_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static ReduceQuotaSceneTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class UnlockQuotaSceneTradeCmd : public ::google::protobuf::Message {
 public:
  UnlockQuotaSceneTradeCmd();
  virtual ~UnlockQuotaSceneTradeCmd();

  UnlockQuotaSceneTradeCmd(const UnlockQuotaSceneTradeCmd& from);

  inline UnlockQuotaSceneTradeCmd& operator=(const UnlockQuotaSceneTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockQuotaSceneTradeCmd& default_instance();

  void Swap(UnlockQuotaSceneTradeCmd* other);

  // implements Message ----------------------------------------------

  UnlockQuotaSceneTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockQuotaSceneTradeCmd& from);
  void MergeFrom(const UnlockQuotaSceneTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = UNLOCK_QUOTA_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 quota = 5;
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 5;
  inline ::google::protobuf::uint64 quota() const;
  inline void set_quota(::google::protobuf::uint64 value);

  // optional string receivername = 6;
  inline bool has_receivername() const;
  inline void clear_receivername();
  static const int kReceivernameFieldNumber = 6;
  inline const ::std::string& receivername() const;
  inline void set_receivername(const ::std::string& value);
  inline void set_receivername(const char* value);
  inline void set_receivername(const char* value, size_t size);
  inline ::std::string* mutable_receivername();
  inline ::std::string* release_receivername();
  inline void set_allocated_receivername(::std::string* receivername);

  // @@protoc_insertion_point(class_scope:Cmd.UnlockQuotaSceneTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_quota();
  inline void clear_has_quota();
  inline void set_has_receivername();
  inline void clear_has_receivername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 quota_;
  ::std::string* receivername_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static UnlockQuotaSceneTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class ExtraPermissionSceneTradeCmd : public ::google::protobuf::Message {
 public:
  ExtraPermissionSceneTradeCmd();
  virtual ~ExtraPermissionSceneTradeCmd();

  ExtraPermissionSceneTradeCmd(const ExtraPermissionSceneTradeCmd& from);

  inline ExtraPermissionSceneTradeCmd& operator=(const ExtraPermissionSceneTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtraPermissionSceneTradeCmd& default_instance();

  void Swap(ExtraPermissionSceneTradeCmd* other);

  // implements Message ----------------------------------------------

  ExtraPermissionSceneTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtraPermissionSceneTradeCmd& from);
  void MergeFrom(const ExtraPermissionSceneTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = EXTRA_PERMISSION_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.EPermission permission = 4;
  inline bool has_permission() const;
  inline void clear_permission();
  static const int kPermissionFieldNumber = 4;
  inline ::Cmd::EPermission permission() const;
  inline void set_permission(::Cmd::EPermission value);

  // optional uint64 value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ExtraPermissionSceneTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_permission();
  inline void clear_has_permission();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 value_;
  int permission_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static ExtraPermissionSceneTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class SecurityCmdSceneTradeCmd : public ::google::protobuf::Message {
 public:
  SecurityCmdSceneTradeCmd();
  virtual ~SecurityCmdSceneTradeCmd();

  SecurityCmdSceneTradeCmd(const SecurityCmdSceneTradeCmd& from);

  inline SecurityCmdSceneTradeCmd& operator=(const SecurityCmdSceneTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecurityCmdSceneTradeCmd& default_instance();

  void Swap(SecurityCmdSceneTradeCmd* other);

  // implements Message ----------------------------------------------

  SecurityCmdSceneTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SecurityCmdSceneTradeCmd& from);
  void MergeFrom(const SecurityCmdSceneTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = SECURITY_CMD_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional bool valid = 3;
  inline bool has_valid() const;
  inline void clear_valid();
  static const int kValidFieldNumber = 3;
  inline bool valid() const;
  inline void set_valid(bool value);

  // optional .Cmd.ESecurityType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::ESecurityType type() const;
  inline void set_type(::Cmd::ESecurityType value);

  // optional uint64 charid = 5;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 5;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 itemid = 6;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 6;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional int32 refinelv = 7;
  inline bool has_refinelv() const;
  inline void clear_refinelv();
  static const int kRefinelvFieldNumber = 7;
  inline ::google::protobuf::int32 refinelv() const;
  inline void set_refinelv(::google::protobuf::int32 value);

  // optional uint64 key = 8;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 8;
  inline ::google::protobuf::uint64 key() const;
  inline void set_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.SecurityCmdSceneTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_valid();
  inline void clear_has_valid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_refinelv();
  inline void clear_has_refinelv();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  bool valid_;
  int type_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::int32 refinelv_;
  ::google::protobuf::uint64 key_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static SecurityCmdSceneTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class TradePriceQueryTradeCmd : public ::google::protobuf::Message {
 public:
  TradePriceQueryTradeCmd();
  virtual ~TradePriceQueryTradeCmd();

  TradePriceQueryTradeCmd(const TradePriceQueryTradeCmd& from);

  inline TradePriceQueryTradeCmd& operator=(const TradePriceQueryTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradePriceQueryTradeCmd& default_instance();

  void Swap(TradePriceQueryTradeCmd* other);

  // implements Message ----------------------------------------------

  TradePriceQueryTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradePriceQueryTradeCmd& from);
  void MergeFrom(const TradePriceQueryTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = TRADE_PRICE_QUERY_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 batchid = 3;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 3;
  inline ::google::protobuf::uint64 batchid() const;
  inline void set_batchid(::google::protobuf::uint64 value);

  // optional uint64 signup_id = 4;
  inline bool has_signup_id() const;
  inline void clear_signup_id();
  static const int kSignupIdFieldNumber = 4;
  inline ::google::protobuf::uint64 signup_id() const;
  inline void set_signup_id(::google::protobuf::uint64 value);

  // optional uint64 price = 5;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 5;
  inline ::google::protobuf::uint64 price() const;
  inline void set_price(::google::protobuf::uint64 value);

  // optional .Cmd.ItemData itemdata = 6;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemdataFieldNumber = 6;
  inline const ::Cmd::ItemData& itemdata() const;
  inline ::Cmd::ItemData* mutable_itemdata();
  inline ::Cmd::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::Cmd::ItemData* itemdata);

  // @@protoc_insertion_point(class_scope:Cmd.TradePriceQueryTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_batchid();
  inline void clear_has_batchid();
  inline void set_has_signup_id();
  inline void clear_has_signup_id();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 batchid_;
  ::google::protobuf::uint64 signup_id_;
  ::google::protobuf::uint64 price_;
  ::Cmd::ItemData* itemdata_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static TradePriceQueryTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class BoothOpenTradeCmd : public ::google::protobuf::Message {
 public:
  BoothOpenTradeCmd();
  virtual ~BoothOpenTradeCmd();

  BoothOpenTradeCmd(const BoothOpenTradeCmd& from);

  inline BoothOpenTradeCmd& operator=(const BoothOpenTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoothOpenTradeCmd& default_instance();

  void Swap(BoothOpenTradeCmd* other);

  // implements Message ----------------------------------------------

  BoothOpenTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoothOpenTradeCmd& from);
  void MergeFrom(const BoothOpenTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordServerTradeParam param = 2 [default = BOOTH_OPEN_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordServerTradeParam param() const;
  inline void set_param(::Cmd::RecordServerTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 open = 4 [default = 1];
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 4;
  inline ::google::protobuf::uint32 open() const;
  inline void set_open(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BoothOpenTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_open();
  inline void clear_has_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 open_;
  friend void  protobuf_AddDesc_SceneTrade_2eproto();
  friend void protobuf_AssignDesc_SceneTrade_2eproto();
  friend void protobuf_ShutdownFile_SceneTrade_2eproto();

  void InitAsDefaultInstance();
  static BoothOpenTradeCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// FrostItemListSceneTradeCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_TRADE_PROTOCMD];
inline bool FrostItemListSceneTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrostItemListSceneTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrostItemListSceneTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrostItemListSceneTradeCmd::clear_cmd() {
  cmd_ = 26;
  clear_has_cmd();
}
inline ::Cmd::Command FrostItemListSceneTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.FrostItemListSceneTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void FrostItemListSceneTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FrostItemListSceneTradeCmd.cmd)
}

// optional .Cmd.SceneTradeParam param = 2 [default = FROST_ITEM_LIST_SCENE_TRADE_PARAM];
inline bool FrostItemListSceneTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrostItemListSceneTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrostItemListSceneTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrostItemListSceneTradeCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::SceneTradeParam FrostItemListSceneTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.FrostItemListSceneTradeCmd.param)
  return static_cast< ::Cmd::SceneTradeParam >(param_);
}
inline void FrostItemListSceneTradeCmd::set_param(::Cmd::SceneTradeParam value) {
  assert(::Cmd::SceneTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FrostItemListSceneTradeCmd.param)
}

// repeated .Cmd.FrostItemInfo lists = 3;
inline int FrostItemListSceneTradeCmd::lists_size() const {
  return lists_.size();
}
inline void FrostItemListSceneTradeCmd::clear_lists() {
  lists_.Clear();
}
inline const ::Cmd::FrostItemInfo& FrostItemListSceneTradeCmd::lists(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.FrostItemListSceneTradeCmd.lists)
  return lists_.Get(index);
}
inline ::Cmd::FrostItemInfo* FrostItemListSceneTradeCmd::mutable_lists(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.FrostItemListSceneTradeCmd.lists)
  return lists_.Mutable(index);
}
inline ::Cmd::FrostItemInfo* FrostItemListSceneTradeCmd::add_lists() {
  // @@protoc_insertion_point(field_add:Cmd.FrostItemListSceneTradeCmd.lists)
  return lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FrostItemInfo >&
FrostItemListSceneTradeCmd::lists() const {
  // @@protoc_insertion_point(field_list:Cmd.FrostItemListSceneTradeCmd.lists)
  return lists_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::FrostItemInfo >*
FrostItemListSceneTradeCmd::mutable_lists() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.FrostItemListSceneTradeCmd.lists)
  return &lists_;
}

// -------------------------------------------------------------------

// ReduceMoneyRecordTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool ReduceMoneyRecordTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReduceMoneyRecordTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReduceMoneyRecordTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReduceMoneyRecordTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command ReduceMoneyRecordTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceMoneyRecordTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReduceMoneyRecordTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceMoneyRecordTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_MONEY_RECORDTRADE];
inline bool ReduceMoneyRecordTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReduceMoneyRecordTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReduceMoneyRecordTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReduceMoneyRecordTradeCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam ReduceMoneyRecordTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceMoneyRecordTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void ReduceMoneyRecordTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceMoneyRecordTradeCmd.param)
}

// optional uint32 money_type = 3;
inline bool ReduceMoneyRecordTradeCmd::has_money_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReduceMoneyRecordTradeCmd::set_has_money_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReduceMoneyRecordTradeCmd::clear_has_money_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReduceMoneyRecordTradeCmd::clear_money_type() {
  money_type_ = 0u;
  clear_has_money_type();
}
inline ::google::protobuf::uint32 ReduceMoneyRecordTradeCmd::money_type() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceMoneyRecordTradeCmd.money_type)
  return money_type_;
}
inline void ReduceMoneyRecordTradeCmd::set_money_type(::google::protobuf::uint32 value) {
  set_has_money_type();
  money_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceMoneyRecordTradeCmd.money_type)
}

// optional uint32 total_money = 4;
inline bool ReduceMoneyRecordTradeCmd::has_total_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReduceMoneyRecordTradeCmd::set_has_total_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReduceMoneyRecordTradeCmd::clear_has_total_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReduceMoneyRecordTradeCmd::clear_total_money() {
  total_money_ = 0u;
  clear_has_total_money();
}
inline ::google::protobuf::uint32 ReduceMoneyRecordTradeCmd::total_money() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceMoneyRecordTradeCmd.total_money)
  return total_money_;
}
inline void ReduceMoneyRecordTradeCmd::set_total_money(::google::protobuf::uint32 value) {
  set_has_total_money();
  total_money_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceMoneyRecordTradeCmd.total_money)
}

// optional .Cmd.ETRADE_RET_CODE ret = 5;
inline bool ReduceMoneyRecordTradeCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReduceMoneyRecordTradeCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReduceMoneyRecordTradeCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReduceMoneyRecordTradeCmd::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::Cmd::ETRADE_RET_CODE ReduceMoneyRecordTradeCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceMoneyRecordTradeCmd.ret)
  return static_cast< ::Cmd::ETRADE_RET_CODE >(ret_);
}
inline void ReduceMoneyRecordTradeCmd::set_ret(::Cmd::ETRADE_RET_CODE value) {
  assert(::Cmd::ETRADE_RET_CODE_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceMoneyRecordTradeCmd.ret)
}

// optional uint64 charid = 6;
inline bool ReduceMoneyRecordTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReduceMoneyRecordTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReduceMoneyRecordTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReduceMoneyRecordTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ReduceMoneyRecordTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceMoneyRecordTradeCmd.charid)
  return charid_;
}
inline void ReduceMoneyRecordTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceMoneyRecordTradeCmd.charid)
}

// optional .Cmd.TradeItemBaseInfo item_info = 7;
inline bool ReduceMoneyRecordTradeCmd::has_item_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReduceMoneyRecordTradeCmd::set_has_item_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReduceMoneyRecordTradeCmd::clear_has_item_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReduceMoneyRecordTradeCmd::clear_item_info() {
  if (item_info_ != NULL) item_info_->::Cmd::TradeItemBaseInfo::Clear();
  clear_has_item_info();
}
inline const ::Cmd::TradeItemBaseInfo& ReduceMoneyRecordTradeCmd::item_info() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceMoneyRecordTradeCmd.item_info)
  return item_info_ != NULL ? *item_info_ : *default_instance_->item_info_;
}
inline ::Cmd::TradeItemBaseInfo* ReduceMoneyRecordTradeCmd::mutable_item_info() {
  set_has_item_info();
  if (item_info_ == NULL) item_info_ = new ::Cmd::TradeItemBaseInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.ReduceMoneyRecordTradeCmd.item_info)
  return item_info_;
}
inline ::Cmd::TradeItemBaseInfo* ReduceMoneyRecordTradeCmd::release_item_info() {
  clear_has_item_info();
  ::Cmd::TradeItemBaseInfo* temp = item_info_;
  item_info_ = NULL;
  return temp;
}
inline void ReduceMoneyRecordTradeCmd::set_allocated_item_info(::Cmd::TradeItemBaseInfo* item_info) {
  delete item_info_;
  item_info_ = item_info;
  if (item_info) {
    set_has_item_info();
  } else {
    clear_has_item_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReduceMoneyRecordTradeCmd.item_info)
}

// optional uint64 quota = 8 [default = 0];
inline bool ReduceMoneyRecordTradeCmd::has_quota() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReduceMoneyRecordTradeCmd::set_has_quota() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReduceMoneyRecordTradeCmd::clear_has_quota() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReduceMoneyRecordTradeCmd::clear_quota() {
  quota_ = GOOGLE_ULONGLONG(0);
  clear_has_quota();
}
inline ::google::protobuf::uint64 ReduceMoneyRecordTradeCmd::quota() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceMoneyRecordTradeCmd.quota)
  return quota_;
}
inline void ReduceMoneyRecordTradeCmd::set_quota(::google::protobuf::uint64 value) {
  set_has_quota();
  quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceMoneyRecordTradeCmd.quota)
}

// optional .Cmd.ETradeType type = 9 [default = ETRADETYPE_TRADE];
inline bool ReduceMoneyRecordTradeCmd::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReduceMoneyRecordTradeCmd::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReduceMoneyRecordTradeCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReduceMoneyRecordTradeCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ETradeType ReduceMoneyRecordTradeCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceMoneyRecordTradeCmd.type)
  return static_cast< ::Cmd::ETradeType >(type_);
}
inline void ReduceMoneyRecordTradeCmd::set_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceMoneyRecordTradeCmd.type)
}

// optional uint64 record_id = 10 [default = 0];
inline bool ReduceMoneyRecordTradeCmd::has_record_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReduceMoneyRecordTradeCmd::set_has_record_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReduceMoneyRecordTradeCmd::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReduceMoneyRecordTradeCmd::clear_record_id() {
  record_id_ = GOOGLE_ULONGLONG(0);
  clear_has_record_id();
}
inline ::google::protobuf::uint64 ReduceMoneyRecordTradeCmd::record_id() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceMoneyRecordTradeCmd.record_id)
  return record_id_;
}
inline void ReduceMoneyRecordTradeCmd::set_record_id(::google::protobuf::uint64 value) {
  set_has_record_id();
  record_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceMoneyRecordTradeCmd.record_id)
}

// optional uint64 lock_quota = 11 [default = 0];
inline bool ReduceMoneyRecordTradeCmd::has_lock_quota() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReduceMoneyRecordTradeCmd::set_has_lock_quota() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReduceMoneyRecordTradeCmd::clear_has_lock_quota() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReduceMoneyRecordTradeCmd::clear_lock_quota() {
  lock_quota_ = GOOGLE_ULONGLONG(0);
  clear_has_lock_quota();
}
inline ::google::protobuf::uint64 ReduceMoneyRecordTradeCmd::lock_quota() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceMoneyRecordTradeCmd.lock_quota)
  return lock_quota_;
}
inline void ReduceMoneyRecordTradeCmd::set_lock_quota(::google::protobuf::uint64 value) {
  set_has_lock_quota();
  lock_quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceMoneyRecordTradeCmd.lock_quota)
}

// -------------------------------------------------------------------

// AddItemRecordTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool AddItemRecordTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddItemRecordTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddItemRecordTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddItemRecordTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command AddItemRecordTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AddItemRecordTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AddItemRecordTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddItemRecordTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_ITEM_RECORDTRADE];
inline bool AddItemRecordTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddItemRecordTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddItemRecordTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddItemRecordTradeCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam AddItemRecordTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AddItemRecordTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void AddItemRecordTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddItemRecordTradeCmd.param)
}

// optional .Cmd.TradeItemBaseInfo item_info = 3;
inline bool AddItemRecordTradeCmd::has_item_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddItemRecordTradeCmd::set_has_item_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddItemRecordTradeCmd::clear_has_item_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddItemRecordTradeCmd::clear_item_info() {
  if (item_info_ != NULL) item_info_->::Cmd::TradeItemBaseInfo::Clear();
  clear_has_item_info();
}
inline const ::Cmd::TradeItemBaseInfo& AddItemRecordTradeCmd::item_info() const {
  // @@protoc_insertion_point(field_get:Cmd.AddItemRecordTradeCmd.item_info)
  return item_info_ != NULL ? *item_info_ : *default_instance_->item_info_;
}
inline ::Cmd::TradeItemBaseInfo* AddItemRecordTradeCmd::mutable_item_info() {
  set_has_item_info();
  if (item_info_ == NULL) item_info_ = new ::Cmd::TradeItemBaseInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.AddItemRecordTradeCmd.item_info)
  return item_info_;
}
inline ::Cmd::TradeItemBaseInfo* AddItemRecordTradeCmd::release_item_info() {
  clear_has_item_info();
  ::Cmd::TradeItemBaseInfo* temp = item_info_;
  item_info_ = NULL;
  return temp;
}
inline void AddItemRecordTradeCmd::set_allocated_item_info(::Cmd::TradeItemBaseInfo* item_info) {
  delete item_info_;
  item_info_ = item_info;
  if (item_info) {
    set_has_item_info();
  } else {
    clear_has_item_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AddItemRecordTradeCmd.item_info)
}

// optional uint64 charid = 4;
inline bool AddItemRecordTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddItemRecordTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddItemRecordTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddItemRecordTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 AddItemRecordTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.AddItemRecordTradeCmd.charid)
  return charid_;
}
inline void AddItemRecordTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddItemRecordTradeCmd.charid)
}

// optional .Cmd.EAddItemType addtype = 5;
inline bool AddItemRecordTradeCmd::has_addtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddItemRecordTradeCmd::set_has_addtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddItemRecordTradeCmd::clear_has_addtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AddItemRecordTradeCmd::clear_addtype() {
  addtype_ = 1;
  clear_has_addtype();
}
inline ::Cmd::EAddItemType AddItemRecordTradeCmd::addtype() const {
  // @@protoc_insertion_point(field_get:Cmd.AddItemRecordTradeCmd.addtype)
  return static_cast< ::Cmd::EAddItemType >(addtype_);
}
inline void AddItemRecordTradeCmd::set_addtype(::Cmd::EAddItemType value) {
  assert(::Cmd::EAddItemType_IsValid(value));
  set_has_addtype();
  addtype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddItemRecordTradeCmd.addtype)
}

// optional uint64 total_quota = 6;
inline bool AddItemRecordTradeCmd::has_total_quota() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AddItemRecordTradeCmd::set_has_total_quota() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AddItemRecordTradeCmd::clear_has_total_quota() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AddItemRecordTradeCmd::clear_total_quota() {
  total_quota_ = GOOGLE_ULONGLONG(0);
  clear_has_total_quota();
}
inline ::google::protobuf::uint64 AddItemRecordTradeCmd::total_quota() const {
  // @@protoc_insertion_point(field_get:Cmd.AddItemRecordTradeCmd.total_quota)
  return total_quota_;
}
inline void AddItemRecordTradeCmd::set_total_quota(::google::protobuf::uint64 value) {
  set_has_total_quota();
  total_quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddItemRecordTradeCmd.total_quota)
}

// -------------------------------------------------------------------

// AddMoneyRecordTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool AddMoneyRecordTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddMoneyRecordTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddMoneyRecordTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddMoneyRecordTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command AddMoneyRecordTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMoneyRecordTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AddMoneyRecordTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMoneyRecordTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_MONEY_RECORDTRADE];
inline bool AddMoneyRecordTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddMoneyRecordTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddMoneyRecordTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddMoneyRecordTradeCmd::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam AddMoneyRecordTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMoneyRecordTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void AddMoneyRecordTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMoneyRecordTradeCmd.param)
}

// optional uint32 money_type = 3;
inline bool AddMoneyRecordTradeCmd::has_money_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddMoneyRecordTradeCmd::set_has_money_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddMoneyRecordTradeCmd::clear_has_money_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddMoneyRecordTradeCmd::clear_money_type() {
  money_type_ = 0u;
  clear_has_money_type();
}
inline ::google::protobuf::uint32 AddMoneyRecordTradeCmd::money_type() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMoneyRecordTradeCmd.money_type)
  return money_type_;
}
inline void AddMoneyRecordTradeCmd::set_money_type(::google::protobuf::uint32 value) {
  set_has_money_type();
  money_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMoneyRecordTradeCmd.money_type)
}

// optional uint32 total_money = 4;
inline bool AddMoneyRecordTradeCmd::has_total_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddMoneyRecordTradeCmd::set_has_total_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddMoneyRecordTradeCmd::clear_has_total_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddMoneyRecordTradeCmd::clear_total_money() {
  total_money_ = 0u;
  clear_has_total_money();
}
inline ::google::protobuf::uint32 AddMoneyRecordTradeCmd::total_money() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMoneyRecordTradeCmd.total_money)
  return total_money_;
}
inline void AddMoneyRecordTradeCmd::set_total_money(::google::protobuf::uint32 value) {
  set_has_total_money();
  total_money_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMoneyRecordTradeCmd.total_money)
}

// optional uint64 charid = 5;
inline bool AddMoneyRecordTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddMoneyRecordTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddMoneyRecordTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AddMoneyRecordTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 AddMoneyRecordTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMoneyRecordTradeCmd.charid)
  return charid_;
}
inline void AddMoneyRecordTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMoneyRecordTradeCmd.charid)
}

// optional uint32 itemid = 6;
inline bool AddMoneyRecordTradeCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AddMoneyRecordTradeCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AddMoneyRecordTradeCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AddMoneyRecordTradeCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 AddMoneyRecordTradeCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMoneyRecordTradeCmd.itemid)
  return itemid_;
}
inline void AddMoneyRecordTradeCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMoneyRecordTradeCmd.itemid)
}

// optional uint32 count = 7;
inline bool AddMoneyRecordTradeCmd::has_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AddMoneyRecordTradeCmd::set_has_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AddMoneyRecordTradeCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AddMoneyRecordTradeCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 AddMoneyRecordTradeCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMoneyRecordTradeCmd.count)
  return count_;
}
inline void AddMoneyRecordTradeCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMoneyRecordTradeCmd.count)
}

// optional uint32 price = 8;
inline bool AddMoneyRecordTradeCmd::has_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AddMoneyRecordTradeCmd::set_has_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AddMoneyRecordTradeCmd::clear_has_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AddMoneyRecordTradeCmd::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 AddMoneyRecordTradeCmd::price() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMoneyRecordTradeCmd.price)
  return price_;
}
inline void AddMoneyRecordTradeCmd::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMoneyRecordTradeCmd.price)
}

// optional .Cmd.EOperType type = 9;
inline bool AddMoneyRecordTradeCmd::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AddMoneyRecordTradeCmd::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AddMoneyRecordTradeCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AddMoneyRecordTradeCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EOperType AddMoneyRecordTradeCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMoneyRecordTradeCmd.type)
  return static_cast< ::Cmd::EOperType >(type_);
}
inline void AddMoneyRecordTradeCmd::set_type(::Cmd::EOperType value) {
  assert(::Cmd::EOperType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMoneyRecordTradeCmd.type)
}

// optional uint32 money2 = 10;
inline bool AddMoneyRecordTradeCmd::has_money2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AddMoneyRecordTradeCmd::set_has_money2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AddMoneyRecordTradeCmd::clear_has_money2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AddMoneyRecordTradeCmd::clear_money2() {
  money2_ = 0u;
  clear_has_money2();
}
inline ::google::protobuf::uint32 AddMoneyRecordTradeCmd::money2() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMoneyRecordTradeCmd.money2)
  return money2_;
}
inline void AddMoneyRecordTradeCmd::set_money2(::google::protobuf::uint32 value) {
  set_has_money2();
  money2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMoneyRecordTradeCmd.money2)
}

// -------------------------------------------------------------------

// ReduceItemRecordTrade

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool ReduceItemRecordTrade::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReduceItemRecordTrade::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReduceItemRecordTrade::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReduceItemRecordTrade::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command ReduceItemRecordTrade::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceItemRecordTrade.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReduceItemRecordTrade::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceItemRecordTrade.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_ITEM_RECORDTRADE];
inline bool ReduceItemRecordTrade::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReduceItemRecordTrade::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReduceItemRecordTrade::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReduceItemRecordTrade::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam ReduceItemRecordTrade::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceItemRecordTrade.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void ReduceItemRecordTrade::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceItemRecordTrade.param)
}

// optional .Cmd.TradeItemBaseInfo item_info = 3;
inline bool ReduceItemRecordTrade::has_item_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReduceItemRecordTrade::set_has_item_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReduceItemRecordTrade::clear_has_item_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReduceItemRecordTrade::clear_item_info() {
  if (item_info_ != NULL) item_info_->::Cmd::TradeItemBaseInfo::Clear();
  clear_has_item_info();
}
inline const ::Cmd::TradeItemBaseInfo& ReduceItemRecordTrade::item_info() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceItemRecordTrade.item_info)
  return item_info_ != NULL ? *item_info_ : *default_instance_->item_info_;
}
inline ::Cmd::TradeItemBaseInfo* ReduceItemRecordTrade::mutable_item_info() {
  set_has_item_info();
  if (item_info_ == NULL) item_info_ = new ::Cmd::TradeItemBaseInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.ReduceItemRecordTrade.item_info)
  return item_info_;
}
inline ::Cmd::TradeItemBaseInfo* ReduceItemRecordTrade::release_item_info() {
  clear_has_item_info();
  ::Cmd::TradeItemBaseInfo* temp = item_info_;
  item_info_ = NULL;
  return temp;
}
inline void ReduceItemRecordTrade::set_allocated_item_info(::Cmd::TradeItemBaseInfo* item_info) {
  delete item_info_;
  item_info_ = item_info;
  if (item_info) {
    set_has_item_info();
  } else {
    clear_has_item_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReduceItemRecordTrade.item_info)
}

// optional uint64 charid = 4;
inline bool ReduceItemRecordTrade::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReduceItemRecordTrade::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReduceItemRecordTrade::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReduceItemRecordTrade::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ReduceItemRecordTrade::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceItemRecordTrade.charid)
  return charid_;
}
inline void ReduceItemRecordTrade::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceItemRecordTrade.charid)
}

// optional .Cmd.ETRADE_RET_CODE ret = 5;
inline bool ReduceItemRecordTrade::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReduceItemRecordTrade::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReduceItemRecordTrade::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReduceItemRecordTrade::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::Cmd::ETRADE_RET_CODE ReduceItemRecordTrade::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceItemRecordTrade.ret)
  return static_cast< ::Cmd::ETRADE_RET_CODE >(ret_);
}
inline void ReduceItemRecordTrade::set_ret(::Cmd::ETRADE_RET_CODE value) {
  assert(::Cmd::ETRADE_RET_CODE_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceItemRecordTrade.ret)
}

// optional uint32 boothfee = 6;
inline bool ReduceItemRecordTrade::has_boothfee() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReduceItemRecordTrade::set_has_boothfee() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReduceItemRecordTrade::clear_has_boothfee() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReduceItemRecordTrade::clear_boothfee() {
  boothfee_ = 0u;
  clear_has_boothfee();
}
inline ::google::protobuf::uint32 ReduceItemRecordTrade::boothfee() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceItemRecordTrade.boothfee)
  return boothfee_;
}
inline void ReduceItemRecordTrade::set_boothfee(::google::protobuf::uint32 value) {
  set_has_boothfee();
  boothfee_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceItemRecordTrade.boothfee)
}

// optional bool is_resell = 7;
inline bool ReduceItemRecordTrade::has_is_resell() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReduceItemRecordTrade::set_has_is_resell() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReduceItemRecordTrade::clear_has_is_resell() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReduceItemRecordTrade::clear_is_resell() {
  is_resell_ = false;
  clear_has_is_resell();
}
inline bool ReduceItemRecordTrade::is_resell() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceItemRecordTrade.is_resell)
  return is_resell_;
}
inline void ReduceItemRecordTrade::set_is_resell(bool value) {
  set_has_is_resell();
  is_resell_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceItemRecordTrade.is_resell)
}

// optional uint64 orderid = 8;
inline bool ReduceItemRecordTrade::has_orderid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReduceItemRecordTrade::set_has_orderid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReduceItemRecordTrade::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReduceItemRecordTrade::clear_orderid() {
  orderid_ = GOOGLE_ULONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::uint64 ReduceItemRecordTrade::orderid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceItemRecordTrade.orderid)
  return orderid_;
}
inline void ReduceItemRecordTrade::set_orderid(::google::protobuf::uint64 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceItemRecordTrade.orderid)
}

// optional .Cmd.ETradeType type = 9 [default = ETRADETYPE_TRADE];
inline bool ReduceItemRecordTrade::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReduceItemRecordTrade::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReduceItemRecordTrade::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReduceItemRecordTrade::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ETradeType ReduceItemRecordTrade::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceItemRecordTrade.type)
  return static_cast< ::Cmd::ETradeType >(type_);
}
inline void ReduceItemRecordTrade::set_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceItemRecordTrade.type)
}

// optional uint64 quota_unlock = 10;
inline bool ReduceItemRecordTrade::has_quota_unlock() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReduceItemRecordTrade::set_has_quota_unlock() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReduceItemRecordTrade::clear_has_quota_unlock() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReduceItemRecordTrade::clear_quota_unlock() {
  quota_unlock_ = GOOGLE_ULONGLONG(0);
  clear_has_quota_unlock();
}
inline ::google::protobuf::uint64 ReduceItemRecordTrade::quota_unlock() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceItemRecordTrade.quota_unlock)
  return quota_unlock_;
}
inline void ReduceItemRecordTrade::set_quota_unlock(::google::protobuf::uint64 value) {
  set_has_quota_unlock();
  quota_unlock_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceItemRecordTrade.quota_unlock)
}

// optional uint64 quota_lock = 11;
inline bool ReduceItemRecordTrade::has_quota_lock() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReduceItemRecordTrade::set_has_quota_lock() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReduceItemRecordTrade::clear_has_quota_lock() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReduceItemRecordTrade::clear_quota_lock() {
  quota_lock_ = GOOGLE_ULONGLONG(0);
  clear_has_quota_lock();
}
inline ::google::protobuf::uint64 ReduceItemRecordTrade::quota_lock() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceItemRecordTrade.quota_lock)
  return quota_lock_;
}
inline void ReduceItemRecordTrade::set_quota_lock(::google::protobuf::uint64 value) {
  set_has_quota_lock();
  quota_lock_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceItemRecordTrade.quota_lock)
}

// optional uint64 quota = 12;
inline bool ReduceItemRecordTrade::has_quota() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ReduceItemRecordTrade::set_has_quota() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ReduceItemRecordTrade::clear_has_quota() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ReduceItemRecordTrade::clear_quota() {
  quota_ = GOOGLE_ULONGLONG(0);
  clear_has_quota();
}
inline ::google::protobuf::uint64 ReduceItemRecordTrade::quota() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceItemRecordTrade.quota)
  return quota_;
}
inline void ReduceItemRecordTrade::set_quota(::google::protobuf::uint64 value) {
  set_has_quota();
  quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceItemRecordTrade.quota)
}

// -------------------------------------------------------------------

// SessionToMeRecordTrade

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool SessionToMeRecordTrade::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionToMeRecordTrade::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionToMeRecordTrade::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionToMeRecordTrade::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command SessionToMeRecordTrade::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionToMeRecordTrade.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SessionToMeRecordTrade::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionToMeRecordTrade.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_TO_ME_RECORDTRADE];
inline bool SessionToMeRecordTrade::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionToMeRecordTrade::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionToMeRecordTrade::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionToMeRecordTrade::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam SessionToMeRecordTrade::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionToMeRecordTrade.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void SessionToMeRecordTrade::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionToMeRecordTrade.param)
}

// optional uint64 charid = 3;
inline bool SessionToMeRecordTrade::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionToMeRecordTrade::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionToMeRecordTrade::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionToMeRecordTrade::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SessionToMeRecordTrade::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionToMeRecordTrade.charid)
  return charid_;
}
inline void SessionToMeRecordTrade::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionToMeRecordTrade.charid)
}

// optional bytes data = 4;
inline bool SessionToMeRecordTrade::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionToMeRecordTrade::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionToMeRecordTrade::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionToMeRecordTrade::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& SessionToMeRecordTrade::data() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionToMeRecordTrade.data)
  return *data_;
}
inline void SessionToMeRecordTrade::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SessionToMeRecordTrade.data)
}
inline void SessionToMeRecordTrade::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SessionToMeRecordTrade.data)
}
inline void SessionToMeRecordTrade::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SessionToMeRecordTrade.data)
}
inline ::std::string* SessionToMeRecordTrade::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SessionToMeRecordTrade.data)
  return data_;
}
inline ::std::string* SessionToMeRecordTrade::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionToMeRecordTrade::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SessionToMeRecordTrade.data)
}

// optional uint32 len = 5;
inline bool SessionToMeRecordTrade::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SessionToMeRecordTrade::set_has_len() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SessionToMeRecordTrade::clear_has_len() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SessionToMeRecordTrade::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 SessionToMeRecordTrade::len() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionToMeRecordTrade.len)
  return len_;
}
inline void SessionToMeRecordTrade::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionToMeRecordTrade.len)
}

// -------------------------------------------------------------------

// SessionForwardUsercmdTrade

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool SessionForwardUsercmdTrade::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionForwardUsercmdTrade::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionForwardUsercmdTrade::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionForwardUsercmdTrade::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command SessionForwardUsercmdTrade::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardUsercmdTrade.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SessionForwardUsercmdTrade::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardUsercmdTrade.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_FORWARD_USERCMD_TRADE];
inline bool SessionForwardUsercmdTrade::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionForwardUsercmdTrade::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionForwardUsercmdTrade::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionForwardUsercmdTrade::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam SessionForwardUsercmdTrade::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardUsercmdTrade.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void SessionForwardUsercmdTrade::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardUsercmdTrade.param)
}

// optional uint64 charid = 3;
inline bool SessionForwardUsercmdTrade::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionForwardUsercmdTrade::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionForwardUsercmdTrade::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionForwardUsercmdTrade::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SessionForwardUsercmdTrade::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardUsercmdTrade.charid)
  return charid_;
}
inline void SessionForwardUsercmdTrade::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardUsercmdTrade.charid)
}

// optional uint32 zoneid = 4;
inline bool SessionForwardUsercmdTrade::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionForwardUsercmdTrade::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionForwardUsercmdTrade::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionForwardUsercmdTrade::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 SessionForwardUsercmdTrade::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardUsercmdTrade.zoneid)
  return zoneid_;
}
inline void SessionForwardUsercmdTrade::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardUsercmdTrade.zoneid)
}

// optional bytes data = 5;
inline bool SessionForwardUsercmdTrade::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SessionForwardUsercmdTrade::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SessionForwardUsercmdTrade::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SessionForwardUsercmdTrade::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& SessionForwardUsercmdTrade::data() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardUsercmdTrade.data)
  return *data_;
}
inline void SessionForwardUsercmdTrade::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardUsercmdTrade.data)
}
inline void SessionForwardUsercmdTrade::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SessionForwardUsercmdTrade.data)
}
inline void SessionForwardUsercmdTrade::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SessionForwardUsercmdTrade.data)
}
inline ::std::string* SessionForwardUsercmdTrade::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SessionForwardUsercmdTrade.data)
  return data_;
}
inline ::std::string* SessionForwardUsercmdTrade::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionForwardUsercmdTrade::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SessionForwardUsercmdTrade.data)
}

// optional uint32 len = 6;
inline bool SessionForwardUsercmdTrade::has_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SessionForwardUsercmdTrade::set_has_len() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SessionForwardUsercmdTrade::clear_has_len() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SessionForwardUsercmdTrade::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 SessionForwardUsercmdTrade::len() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardUsercmdTrade.len)
  return len_;
}
inline void SessionForwardUsercmdTrade::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardUsercmdTrade.len)
}

// -------------------------------------------------------------------

// SessionForwardScenecmdTrade

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool SessionForwardScenecmdTrade::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionForwardScenecmdTrade::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionForwardScenecmdTrade::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionForwardScenecmdTrade::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command SessionForwardScenecmdTrade::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardScenecmdTrade.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SessionForwardScenecmdTrade::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardScenecmdTrade.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_FORWARD_SCENECMD_TRADE];
inline bool SessionForwardScenecmdTrade::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionForwardScenecmdTrade::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionForwardScenecmdTrade::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionForwardScenecmdTrade::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam SessionForwardScenecmdTrade::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardScenecmdTrade.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void SessionForwardScenecmdTrade::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardScenecmdTrade.param)
}

// optional uint64 charid = 3;
inline bool SessionForwardScenecmdTrade::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionForwardScenecmdTrade::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionForwardScenecmdTrade::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionForwardScenecmdTrade::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SessionForwardScenecmdTrade::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardScenecmdTrade.charid)
  return charid_;
}
inline void SessionForwardScenecmdTrade::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardScenecmdTrade.charid)
}

// optional uint32 zoneid = 4;
inline bool SessionForwardScenecmdTrade::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionForwardScenecmdTrade::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionForwardScenecmdTrade::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionForwardScenecmdTrade::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 SessionForwardScenecmdTrade::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardScenecmdTrade.zoneid)
  return zoneid_;
}
inline void SessionForwardScenecmdTrade::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardScenecmdTrade.zoneid)
}

// optional string name = 5;
inline bool SessionForwardScenecmdTrade::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SessionForwardScenecmdTrade::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SessionForwardScenecmdTrade::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SessionForwardScenecmdTrade::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SessionForwardScenecmdTrade::name() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardScenecmdTrade.name)
  return *name_;
}
inline void SessionForwardScenecmdTrade::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardScenecmdTrade.name)
}
inline void SessionForwardScenecmdTrade::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SessionForwardScenecmdTrade.name)
}
inline void SessionForwardScenecmdTrade::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SessionForwardScenecmdTrade.name)
}
inline ::std::string* SessionForwardScenecmdTrade::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SessionForwardScenecmdTrade.name)
  return name_;
}
inline ::std::string* SessionForwardScenecmdTrade::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionForwardScenecmdTrade::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SessionForwardScenecmdTrade.name)
}

// optional bytes data = 6;
inline bool SessionForwardScenecmdTrade::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SessionForwardScenecmdTrade::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SessionForwardScenecmdTrade::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SessionForwardScenecmdTrade::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& SessionForwardScenecmdTrade::data() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardScenecmdTrade.data)
  return *data_;
}
inline void SessionForwardScenecmdTrade::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardScenecmdTrade.data)
}
inline void SessionForwardScenecmdTrade::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SessionForwardScenecmdTrade.data)
}
inline void SessionForwardScenecmdTrade::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SessionForwardScenecmdTrade.data)
}
inline ::std::string* SessionForwardScenecmdTrade::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SessionForwardScenecmdTrade.data)
  return data_;
}
inline ::std::string* SessionForwardScenecmdTrade::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionForwardScenecmdTrade::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SessionForwardScenecmdTrade.data)
}

// optional uint32 len = 7;
inline bool SessionForwardScenecmdTrade::has_len() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SessionForwardScenecmdTrade::set_has_len() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SessionForwardScenecmdTrade::clear_has_len() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SessionForwardScenecmdTrade::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 SessionForwardScenecmdTrade::len() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionForwardScenecmdTrade.len)
  return len_;
}
inline void SessionForwardScenecmdTrade::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionForwardScenecmdTrade.len)
}

// -------------------------------------------------------------------

// ForwardUserCmdToRecordCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool ForwardUserCmdToRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardUserCmdToRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardUserCmdToRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardUserCmdToRecordCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command ForwardUserCmdToRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardUserCmdToRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ForwardUserCmdToRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardUserCmdToRecordCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = FORWARD_USERCMD_TO_RECORD];
inline bool ForwardUserCmdToRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForwardUserCmdToRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForwardUserCmdToRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForwardUserCmdToRecordCmd::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam ForwardUserCmdToRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardUserCmdToRecordCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void ForwardUserCmdToRecordCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardUserCmdToRecordCmd.param)
}

// optional uint64 charid = 3;
inline bool ForwardUserCmdToRecordCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ForwardUserCmdToRecordCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ForwardUserCmdToRecordCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ForwardUserCmdToRecordCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ForwardUserCmdToRecordCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardUserCmdToRecordCmd.charid)
  return charid_;
}
inline void ForwardUserCmdToRecordCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardUserCmdToRecordCmd.charid)
}

// optional bytes data = 4;
inline bool ForwardUserCmdToRecordCmd::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ForwardUserCmdToRecordCmd::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ForwardUserCmdToRecordCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ForwardUserCmdToRecordCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ForwardUserCmdToRecordCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardUserCmdToRecordCmd.data)
  return *data_;
}
inline void ForwardUserCmdToRecordCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ForwardUserCmdToRecordCmd.data)
}
inline void ForwardUserCmdToRecordCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ForwardUserCmdToRecordCmd.data)
}
inline void ForwardUserCmdToRecordCmd::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ForwardUserCmdToRecordCmd.data)
}
inline ::std::string* ForwardUserCmdToRecordCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ForwardUserCmdToRecordCmd.data)
  return data_;
}
inline ::std::string* ForwardUserCmdToRecordCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardUserCmdToRecordCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ForwardUserCmdToRecordCmd.data)
}

// optional uint32 len = 5;
inline bool ForwardUserCmdToRecordCmd::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ForwardUserCmdToRecordCmd::set_has_len() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ForwardUserCmdToRecordCmd::clear_has_len() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ForwardUserCmdToRecordCmd::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 ForwardUserCmdToRecordCmd::len() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardUserCmdToRecordCmd.len)
  return len_;
}
inline void ForwardUserCmdToRecordCmd::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardUserCmdToRecordCmd.len)
}

// -------------------------------------------------------------------

// WorldMsgCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool WorldMsgCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldMsgCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldMsgCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldMsgCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command WorldMsgCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldMsgCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void WorldMsgCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldMsgCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = WORLD_MSG];
inline bool WorldMsgCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldMsgCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldMsgCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldMsgCmd::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam WorldMsgCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldMsgCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void WorldMsgCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldMsgCmd.param)
}

// optional bytes data = 3;
inline bool WorldMsgCmd::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldMsgCmd::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldMsgCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldMsgCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& WorldMsgCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldMsgCmd.data)
  return *data_;
}
inline void WorldMsgCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.WorldMsgCmd.data)
}
inline void WorldMsgCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.WorldMsgCmd.data)
}
inline void WorldMsgCmd::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.WorldMsgCmd.data)
}
inline ::std::string* WorldMsgCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.WorldMsgCmd.data)
  return data_;
}
inline ::std::string* WorldMsgCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WorldMsgCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.WorldMsgCmd.data)
}

// optional uint32 len = 4;
inline bool WorldMsgCmd::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorldMsgCmd::set_has_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorldMsgCmd::clear_has_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorldMsgCmd::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 WorldMsgCmd::len() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldMsgCmd.len)
  return len_;
}
inline void WorldMsgCmd::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldMsgCmd.len)
}

// -------------------------------------------------------------------

// UpdateTradeLogCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool UpdateTradeLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateTradeLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateTradeLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateTradeLogCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateTradeLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateTradeLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateTradeLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateTradeLogCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = UPDATE_TRADELOG_RECORDTRADE];
inline bool UpdateTradeLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateTradeLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateTradeLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateTradeLogCmd::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam UpdateTradeLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateTradeLogCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void UpdateTradeLogCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateTradeLogCmd.param)
}

// optional uint64 charid = 3;
inline bool UpdateTradeLogCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateTradeLogCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateTradeLogCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateTradeLogCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 UpdateTradeLogCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateTradeLogCmd.charid)
  return charid_;
}
inline void UpdateTradeLogCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateTradeLogCmd.charid)
}

// optional .Cmd.EOperType type = 4;
inline bool UpdateTradeLogCmd::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateTradeLogCmd::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateTradeLogCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateTradeLogCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EOperType UpdateTradeLogCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateTradeLogCmd.type)
  return static_cast< ::Cmd::EOperType >(type_);
}
inline void UpdateTradeLogCmd::set_type(::Cmd::EOperType value) {
  assert(::Cmd::EOperType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateTradeLogCmd.type)
}

// optional uint64 id = 5;
inline bool UpdateTradeLogCmd::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateTradeLogCmd::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateTradeLogCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateTradeLogCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 UpdateTradeLogCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateTradeLogCmd.id)
  return id_;
}
inline void UpdateTradeLogCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateTradeLogCmd.id)
}

// optional .Cmd.ETradeType trade_type = 6 [default = ETRADETYPE_TRADE];
inline bool UpdateTradeLogCmd::has_trade_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdateTradeLogCmd::set_has_trade_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpdateTradeLogCmd::clear_has_trade_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpdateTradeLogCmd::clear_trade_type() {
  trade_type_ = 1;
  clear_has_trade_type();
}
inline ::Cmd::ETradeType UpdateTradeLogCmd::trade_type() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateTradeLogCmd.trade_type)
  return static_cast< ::Cmd::ETradeType >(trade_type_);
}
inline void UpdateTradeLogCmd::set_trade_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_trade_type();
  trade_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateTradeLogCmd.trade_type)
}

// -------------------------------------------------------------------

// GiveCheckMoneySceneTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool GiveCheckMoneySceneTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiveCheckMoneySceneTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command GiveCheckMoneySceneTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveCheckMoneySceneTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GiveCheckMoneySceneTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveCheckMoneySceneTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = GIVE_CHECK_MONEY_RECORDTRADE];
inline bool GiveCheckMoneySceneTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GiveCheckMoneySceneTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_param() {
  param_ = 12;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam GiveCheckMoneySceneTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveCheckMoneySceneTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void GiveCheckMoneySceneTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveCheckMoneySceneTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool GiveCheckMoneySceneTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GiveCheckMoneySceneTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 GiveCheckMoneySceneTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveCheckMoneySceneTradeCmd.charid)
  return charid_;
}
inline void GiveCheckMoneySceneTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveCheckMoneySceneTradeCmd.charid)
}

// optional .Cmd.EOperType type = 4;
inline bool GiveCheckMoneySceneTradeCmd::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GiveCheckMoneySceneTradeCmd::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EOperType GiveCheckMoneySceneTradeCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveCheckMoneySceneTradeCmd.type)
  return static_cast< ::Cmd::EOperType >(type_);
}
inline void GiveCheckMoneySceneTradeCmd::set_type(::Cmd::EOperType value) {
  assert(::Cmd::EOperType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveCheckMoneySceneTradeCmd.type)
}

// optional uint64 id = 5;
inline bool GiveCheckMoneySceneTradeCmd::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GiveCheckMoneySceneTradeCmd::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 GiveCheckMoneySceneTradeCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveCheckMoneySceneTradeCmd.id)
  return id_;
}
inline void GiveCheckMoneySceneTradeCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveCheckMoneySceneTradeCmd.id)
}

// optional uint64 friendid = 6;
inline bool GiveCheckMoneySceneTradeCmd::has_friendid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GiveCheckMoneySceneTradeCmd::set_has_friendid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_friendid() {
  friendid_ = GOOGLE_ULONGLONG(0);
  clear_has_friendid();
}
inline ::google::protobuf::uint64 GiveCheckMoneySceneTradeCmd::friendid() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveCheckMoneySceneTradeCmd.friendid)
  return friendid_;
}
inline void GiveCheckMoneySceneTradeCmd::set_friendid(::google::protobuf::uint64 value) {
  set_has_friendid();
  friendid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveCheckMoneySceneTradeCmd.friendid)
}

// optional string content = 7;
inline bool GiveCheckMoneySceneTradeCmd::has_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GiveCheckMoneySceneTradeCmd::set_has_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_has_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& GiveCheckMoneySceneTradeCmd::content() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveCheckMoneySceneTradeCmd.content)
  return *content_;
}
inline void GiveCheckMoneySceneTradeCmd::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.GiveCheckMoneySceneTradeCmd.content)
}
inline void GiveCheckMoneySceneTradeCmd::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.GiveCheckMoneySceneTradeCmd.content)
}
inline void GiveCheckMoneySceneTradeCmd::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.GiveCheckMoneySceneTradeCmd.content)
}
inline ::std::string* GiveCheckMoneySceneTradeCmd::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.GiveCheckMoneySceneTradeCmd.content)
  return content_;
}
inline ::std::string* GiveCheckMoneySceneTradeCmd::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GiveCheckMoneySceneTradeCmd::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GiveCheckMoneySceneTradeCmd.content)
}

// optional bool anonymous = 8;
inline bool GiveCheckMoneySceneTradeCmd::has_anonymous() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GiveCheckMoneySceneTradeCmd::set_has_anonymous() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_has_anonymous() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_anonymous() {
  anonymous_ = false;
  clear_has_anonymous();
}
inline bool GiveCheckMoneySceneTradeCmd::anonymous() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveCheckMoneySceneTradeCmd.anonymous)
  return anonymous_;
}
inline void GiveCheckMoneySceneTradeCmd::set_anonymous(bool value) {
  set_has_anonymous();
  anonymous_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveCheckMoneySceneTradeCmd.anonymous)
}

// optional uint64 quota = 9;
inline bool GiveCheckMoneySceneTradeCmd::has_quota() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GiveCheckMoneySceneTradeCmd::set_has_quota() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_has_quota() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_quota() {
  quota_ = GOOGLE_ULONGLONG(0);
  clear_has_quota();
}
inline ::google::protobuf::uint64 GiveCheckMoneySceneTradeCmd::quota() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveCheckMoneySceneTradeCmd.quota)
  return quota_;
}
inline void GiveCheckMoneySceneTradeCmd::set_quota(::google::protobuf::uint64 value) {
  set_has_quota();
  quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveCheckMoneySceneTradeCmd.quota)
}

// optional uint64 fee = 10;
inline bool GiveCheckMoneySceneTradeCmd::has_fee() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GiveCheckMoneySceneTradeCmd::set_has_fee() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_has_fee() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_fee() {
  fee_ = GOOGLE_ULONGLONG(0);
  clear_has_fee();
}
inline ::google::protobuf::uint64 GiveCheckMoneySceneTradeCmd::fee() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveCheckMoneySceneTradeCmd.fee)
  return fee_;
}
inline void GiveCheckMoneySceneTradeCmd::set_fee(::google::protobuf::uint64 value) {
  set_has_fee();
  fee_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveCheckMoneySceneTradeCmd.fee)
}

// optional uint32 background = 11;
inline bool GiveCheckMoneySceneTradeCmd::has_background() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GiveCheckMoneySceneTradeCmd::set_has_background() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_has_background() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_background() {
  background_ = 0u;
  clear_has_background();
}
inline ::google::protobuf::uint32 GiveCheckMoneySceneTradeCmd::background() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveCheckMoneySceneTradeCmd.background)
  return background_;
}
inline void GiveCheckMoneySceneTradeCmd::set_background(::google::protobuf::uint32 value) {
  set_has_background();
  background_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveCheckMoneySceneTradeCmd.background)
}

// optional bool ret = 12;
inline bool GiveCheckMoneySceneTradeCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GiveCheckMoneySceneTradeCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool GiveCheckMoneySceneTradeCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveCheckMoneySceneTradeCmd.ret)
  return ret_;
}
inline void GiveCheckMoneySceneTradeCmd::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveCheckMoneySceneTradeCmd.ret)
}

// optional .Cmd.ItemData itemdata = 13;
inline bool GiveCheckMoneySceneTradeCmd::has_itemdata() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GiveCheckMoneySceneTradeCmd::set_has_itemdata() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::Cmd::ItemData& GiveCheckMoneySceneTradeCmd::itemdata() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveCheckMoneySceneTradeCmd.itemdata)
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::Cmd::ItemData* GiveCheckMoneySceneTradeCmd::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::Cmd::ItemData;
  // @@protoc_insertion_point(field_mutable:Cmd.GiveCheckMoneySceneTradeCmd.itemdata)
  return itemdata_;
}
inline ::Cmd::ItemData* GiveCheckMoneySceneTradeCmd::release_itemdata() {
  clear_has_itemdata();
  ::Cmd::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void GiveCheckMoneySceneTradeCmd::set_allocated_itemdata(::Cmd::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GiveCheckMoneySceneTradeCmd.itemdata)
}

// optional bool fromtrade = 14;
inline bool GiveCheckMoneySceneTradeCmd::has_fromtrade() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GiveCheckMoneySceneTradeCmd::set_has_fromtrade() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_has_fromtrade() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GiveCheckMoneySceneTradeCmd::clear_fromtrade() {
  fromtrade_ = false;
  clear_has_fromtrade();
}
inline bool GiveCheckMoneySceneTradeCmd::fromtrade() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveCheckMoneySceneTradeCmd.fromtrade)
  return fromtrade_;
}
inline void GiveCheckMoneySceneTradeCmd::set_fromtrade(bool value) {
  set_has_fromtrade();
  fromtrade_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveCheckMoneySceneTradeCmd.fromtrade)
}

// -------------------------------------------------------------------

// SyncGiveItemSceneTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool SyncGiveItemSceneTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncGiveItemSceneTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncGiveItemSceneTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncGiveItemSceneTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command SyncGiveItemSceneTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncGiveItemSceneTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SyncGiveItemSceneTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncGiveItemSceneTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = SYNC_GIVE_ITEM_RECORDTRADE];
inline bool SyncGiveItemSceneTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncGiveItemSceneTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncGiveItemSceneTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncGiveItemSceneTradeCmd::clear_param() {
  param_ = 13;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam SyncGiveItemSceneTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncGiveItemSceneTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void SyncGiveItemSceneTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncGiveItemSceneTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool SyncGiveItemSceneTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncGiveItemSceneTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncGiveItemSceneTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncGiveItemSceneTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SyncGiveItemSceneTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncGiveItemSceneTradeCmd.charid)
  return charid_;
}
inline void SyncGiveItemSceneTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncGiveItemSceneTradeCmd.charid)
}

// repeated .Cmd.GiveItemInfo iteminfo = 4;
inline int SyncGiveItemSceneTradeCmd::iteminfo_size() const {
  return iteminfo_.size();
}
inline void SyncGiveItemSceneTradeCmd::clear_iteminfo() {
  iteminfo_.Clear();
}
inline const ::Cmd::GiveItemInfo& SyncGiveItemSceneTradeCmd::iteminfo(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SyncGiveItemSceneTradeCmd.iteminfo)
  return iteminfo_.Get(index);
}
inline ::Cmd::GiveItemInfo* SyncGiveItemSceneTradeCmd::mutable_iteminfo(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.SyncGiveItemSceneTradeCmd.iteminfo)
  return iteminfo_.Mutable(index);
}
inline ::Cmd::GiveItemInfo* SyncGiveItemSceneTradeCmd::add_iteminfo() {
  // @@protoc_insertion_point(field_add:Cmd.SyncGiveItemSceneTradeCmd.iteminfo)
  return iteminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GiveItemInfo >&
SyncGiveItemSceneTradeCmd::iteminfo() const {
  // @@protoc_insertion_point(field_list:Cmd.SyncGiveItemSceneTradeCmd.iteminfo)
  return iteminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::GiveItemInfo >*
SyncGiveItemSceneTradeCmd::mutable_iteminfo() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SyncGiveItemSceneTradeCmd.iteminfo)
  return &iteminfo_;
}

// optional .Cmd.EGiveType type = 5;
inline bool SyncGiveItemSceneTradeCmd::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncGiveItemSceneTradeCmd::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SyncGiveItemSceneTradeCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SyncGiveItemSceneTradeCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EGiveType SyncGiveItemSceneTradeCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncGiveItemSceneTradeCmd.type)
  return static_cast< ::Cmd::EGiveType >(type_);
}
inline void SyncGiveItemSceneTradeCmd::set_type(::Cmd::EGiveType value) {
  assert(::Cmd::EGiveType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncGiveItemSceneTradeCmd.type)
}

// -------------------------------------------------------------------

// AddGiveSceneTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool AddGiveSceneTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddGiveSceneTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddGiveSceneTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddGiveSceneTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command AddGiveSceneTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AddGiveSceneTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AddGiveSceneTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddGiveSceneTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_GIVE_RECORDTRADE];
inline bool AddGiveSceneTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddGiveSceneTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddGiveSceneTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddGiveSceneTradeCmd::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam AddGiveSceneTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AddGiveSceneTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void AddGiveSceneTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddGiveSceneTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool AddGiveSceneTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddGiveSceneTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddGiveSceneTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddGiveSceneTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 AddGiveSceneTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.AddGiveSceneTradeCmd.charid)
  return charid_;
}
inline void AddGiveSceneTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddGiveSceneTradeCmd.charid)
}

// optional .Cmd.GiveItemInfo iteminfo = 4;
inline bool AddGiveSceneTradeCmd::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddGiveSceneTradeCmd::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddGiveSceneTradeCmd::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddGiveSceneTradeCmd::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::Cmd::GiveItemInfo::Clear();
  clear_has_iteminfo();
}
inline const ::Cmd::GiveItemInfo& AddGiveSceneTradeCmd::iteminfo() const {
  // @@protoc_insertion_point(field_get:Cmd.AddGiveSceneTradeCmd.iteminfo)
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
}
inline ::Cmd::GiveItemInfo* AddGiveSceneTradeCmd::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::Cmd::GiveItemInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.AddGiveSceneTradeCmd.iteminfo)
  return iteminfo_;
}
inline ::Cmd::GiveItemInfo* AddGiveSceneTradeCmd::release_iteminfo() {
  clear_has_iteminfo();
  ::Cmd::GiveItemInfo* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void AddGiveSceneTradeCmd::set_allocated_iteminfo(::Cmd::GiveItemInfo* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AddGiveSceneTradeCmd.iteminfo)
}

// -------------------------------------------------------------------

// DelGiveSceneTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool DelGiveSceneTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelGiveSceneTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelGiveSceneTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelGiveSceneTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command DelGiveSceneTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DelGiveSceneTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DelGiveSceneTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DelGiveSceneTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = DEL_GIVE_RECORDTRADE];
inline bool DelGiveSceneTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelGiveSceneTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelGiveSceneTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelGiveSceneTradeCmd::clear_param() {
  param_ = 15;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam DelGiveSceneTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DelGiveSceneTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void DelGiveSceneTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DelGiveSceneTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool DelGiveSceneTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DelGiveSceneTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DelGiveSceneTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DelGiveSceneTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 DelGiveSceneTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.DelGiveSceneTradeCmd.charid)
  return charid_;
}
inline void DelGiveSceneTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DelGiveSceneTradeCmd.charid)
}

// optional uint64 id = 4;
inline bool DelGiveSceneTradeCmd::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DelGiveSceneTradeCmd::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DelGiveSceneTradeCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DelGiveSceneTradeCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 DelGiveSceneTradeCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.DelGiveSceneTradeCmd.id)
  return id_;
}
inline void DelGiveSceneTradeCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DelGiveSceneTradeCmd.id)
}

// -------------------------------------------------------------------

// AddGiveItemSceneTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool AddGiveItemSceneTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddGiveItemSceneTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddGiveItemSceneTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddGiveItemSceneTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command AddGiveItemSceneTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AddGiveItemSceneTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AddGiveItemSceneTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddGiveItemSceneTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_GIVE_ITEM_RECORDTRADE];
inline bool AddGiveItemSceneTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddGiveItemSceneTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddGiveItemSceneTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddGiveItemSceneTradeCmd::clear_param() {
  param_ = 17;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam AddGiveItemSceneTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AddGiveItemSceneTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void AddGiveItemSceneTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddGiveItemSceneTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool AddGiveItemSceneTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddGiveItemSceneTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddGiveItemSceneTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddGiveItemSceneTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 AddGiveItemSceneTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.AddGiveItemSceneTradeCmd.charid)
  return charid_;
}
inline void AddGiveItemSceneTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddGiveItemSceneTradeCmd.charid)
}

// optional uint64 id = 4;
inline bool AddGiveItemSceneTradeCmd::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddGiveItemSceneTradeCmd::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddGiveItemSceneTradeCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddGiveItemSceneTradeCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 AddGiveItemSceneTradeCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.AddGiveItemSceneTradeCmd.id)
  return id_;
}
inline void AddGiveItemSceneTradeCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddGiveItemSceneTradeCmd.id)
}

// optional uint32 itemid = 5;
inline bool AddGiveItemSceneTradeCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddGiveItemSceneTradeCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddGiveItemSceneTradeCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AddGiveItemSceneTradeCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 AddGiveItemSceneTradeCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.AddGiveItemSceneTradeCmd.itemid)
  return itemid_;
}
inline void AddGiveItemSceneTradeCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddGiveItemSceneTradeCmd.itemid)
}

// optional uint32 count = 6;
inline bool AddGiveItemSceneTradeCmd::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AddGiveItemSceneTradeCmd::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AddGiveItemSceneTradeCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AddGiveItemSceneTradeCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 AddGiveItemSceneTradeCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.AddGiveItemSceneTradeCmd.count)
  return count_;
}
inline void AddGiveItemSceneTradeCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddGiveItemSceneTradeCmd.count)
}

// optional .Cmd.ItemData itemData = 7;
inline bool AddGiveItemSceneTradeCmd::has_itemdata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AddGiveItemSceneTradeCmd::set_has_itemdata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AddGiveItemSceneTradeCmd::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AddGiveItemSceneTradeCmd::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::Cmd::ItemData& AddGiveItemSceneTradeCmd::itemdata() const {
  // @@protoc_insertion_point(field_get:Cmd.AddGiveItemSceneTradeCmd.itemData)
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::Cmd::ItemData* AddGiveItemSceneTradeCmd::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::Cmd::ItemData;
  // @@protoc_insertion_point(field_mutable:Cmd.AddGiveItemSceneTradeCmd.itemData)
  return itemdata_;
}
inline ::Cmd::ItemData* AddGiveItemSceneTradeCmd::release_itemdata() {
  clear_has_itemdata();
  ::Cmd::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void AddGiveItemSceneTradeCmd::set_allocated_itemdata(::Cmd::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AddGiveItemSceneTradeCmd.itemData)
}

// optional uint32 background = 8;
inline bool AddGiveItemSceneTradeCmd::has_background() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AddGiveItemSceneTradeCmd::set_has_background() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AddGiveItemSceneTradeCmd::clear_has_background() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AddGiveItemSceneTradeCmd::clear_background() {
  background_ = 0u;
  clear_has_background();
}
inline ::google::protobuf::uint32 AddGiveItemSceneTradeCmd::background() const {
  // @@protoc_insertion_point(field_get:Cmd.AddGiveItemSceneTradeCmd.background)
  return background_;
}
inline void AddGiveItemSceneTradeCmd::set_background(::google::protobuf::uint32 value) {
  set_has_background();
  background_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddGiveItemSceneTradeCmd.background)
}

// optional bool ret = 9;
inline bool AddGiveItemSceneTradeCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AddGiveItemSceneTradeCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AddGiveItemSceneTradeCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AddGiveItemSceneTradeCmd::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool AddGiveItemSceneTradeCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.AddGiveItemSceneTradeCmd.ret)
  return ret_;
}
inline void AddGiveItemSceneTradeCmd::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddGiveItemSceneTradeCmd.ret)
}

// -------------------------------------------------------------------

// ReceiveGiveSceneTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool ReceiveGiveSceneTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReceiveGiveSceneTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReceiveGiveSceneTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReceiveGiveSceneTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command ReceiveGiveSceneTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReceiveGiveSceneTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReceiveGiveSceneTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReceiveGiveSceneTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = RECEIVE_GIVE_RECORDTRADE];
inline bool ReceiveGiveSceneTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReceiveGiveSceneTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReceiveGiveSceneTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReceiveGiveSceneTradeCmd::clear_param() {
  param_ = 16;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam ReceiveGiveSceneTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReceiveGiveSceneTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void ReceiveGiveSceneTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReceiveGiveSceneTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool ReceiveGiveSceneTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReceiveGiveSceneTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReceiveGiveSceneTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReceiveGiveSceneTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ReceiveGiveSceneTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReceiveGiveSceneTradeCmd.charid)
  return charid_;
}
inline void ReceiveGiveSceneTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReceiveGiveSceneTradeCmd.charid)
}

// optional uint64 id = 4;
inline bool ReceiveGiveSceneTradeCmd::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReceiveGiveSceneTradeCmd::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReceiveGiveSceneTradeCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReceiveGiveSceneTradeCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ReceiveGiveSceneTradeCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.ReceiveGiveSceneTradeCmd.id)
  return id_;
}
inline void ReceiveGiveSceneTradeCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReceiveGiveSceneTradeCmd.id)
}

// -------------------------------------------------------------------

// NtfGiveStatusSceneTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool NtfGiveStatusSceneTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfGiveStatusSceneTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfGiveStatusSceneTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfGiveStatusSceneTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command NtfGiveStatusSceneTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfGiveStatusSceneTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfGiveStatusSceneTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfGiveStatusSceneTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = NTF_GIVE_STATUS_RECORDTRADE];
inline bool NtfGiveStatusSceneTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfGiveStatusSceneTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfGiveStatusSceneTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfGiveStatusSceneTradeCmd::clear_param() {
  param_ = 18;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam NtfGiveStatusSceneTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfGiveStatusSceneTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void NtfGiveStatusSceneTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfGiveStatusSceneTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool NtfGiveStatusSceneTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfGiveStatusSceneTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfGiveStatusSceneTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfGiveStatusSceneTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 NtfGiveStatusSceneTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfGiveStatusSceneTradeCmd.charid)
  return charid_;
}
inline void NtfGiveStatusSceneTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfGiveStatusSceneTradeCmd.charid)
}

// optional uint64 id = 4;
inline bool NtfGiveStatusSceneTradeCmd::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtfGiveStatusSceneTradeCmd::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtfGiveStatusSceneTradeCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtfGiveStatusSceneTradeCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 NtfGiveStatusSceneTradeCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfGiveStatusSceneTradeCmd.id)
  return id_;
}
inline void NtfGiveStatusSceneTradeCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfGiveStatusSceneTradeCmd.id)
}

// optional .Cmd.EGiveStatus status = 5;
inline bool NtfGiveStatusSceneTradeCmd::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NtfGiveStatusSceneTradeCmd::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NtfGiveStatusSceneTradeCmd::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NtfGiveStatusSceneTradeCmd::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::Cmd::EGiveStatus NtfGiveStatusSceneTradeCmd::status() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfGiveStatusSceneTradeCmd.status)
  return static_cast< ::Cmd::EGiveStatus >(status_);
}
inline void NtfGiveStatusSceneTradeCmd::set_status(::Cmd::EGiveStatus value) {
  assert(::Cmd::EGiveStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfGiveStatusSceneTradeCmd.status)
}

// optional string name = 6;
inline bool NtfGiveStatusSceneTradeCmd::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NtfGiveStatusSceneTradeCmd::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NtfGiveStatusSceneTradeCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NtfGiveStatusSceneTradeCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NtfGiveStatusSceneTradeCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfGiveStatusSceneTradeCmd.name)
  return *name_;
}
inline void NtfGiveStatusSceneTradeCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.NtfGiveStatusSceneTradeCmd.name)
}
inline void NtfGiveStatusSceneTradeCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.NtfGiveStatusSceneTradeCmd.name)
}
inline void NtfGiveStatusSceneTradeCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.NtfGiveStatusSceneTradeCmd.name)
}
inline ::std::string* NtfGiveStatusSceneTradeCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.NtfGiveStatusSceneTradeCmd.name)
  return name_;
}
inline ::std::string* NtfGiveStatusSceneTradeCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NtfGiveStatusSceneTradeCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.NtfGiveStatusSceneTradeCmd.name)
}

// -------------------------------------------------------------------

// ReduceQuotaSceneTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool ReduceQuotaSceneTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReduceQuotaSceneTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReduceQuotaSceneTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReduceQuotaSceneTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command ReduceQuotaSceneTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceQuotaSceneTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReduceQuotaSceneTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceQuotaSceneTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_QUOTA_RECORDTRADE];
inline bool ReduceQuotaSceneTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReduceQuotaSceneTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReduceQuotaSceneTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReduceQuotaSceneTradeCmd::clear_param() {
  param_ = 19;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam ReduceQuotaSceneTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceQuotaSceneTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void ReduceQuotaSceneTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceQuotaSceneTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool ReduceQuotaSceneTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReduceQuotaSceneTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReduceQuotaSceneTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReduceQuotaSceneTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ReduceQuotaSceneTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceQuotaSceneTradeCmd.charid)
  return charid_;
}
inline void ReduceQuotaSceneTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceQuotaSceneTradeCmd.charid)
}

// optional uint64 id = 4;
inline bool ReduceQuotaSceneTradeCmd::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReduceQuotaSceneTradeCmd::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReduceQuotaSceneTradeCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReduceQuotaSceneTradeCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ReduceQuotaSceneTradeCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceQuotaSceneTradeCmd.id)
  return id_;
}
inline void ReduceQuotaSceneTradeCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceQuotaSceneTradeCmd.id)
}

// optional uint64 quota = 5;
inline bool ReduceQuotaSceneTradeCmd::has_quota() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReduceQuotaSceneTradeCmd::set_has_quota() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReduceQuotaSceneTradeCmd::clear_has_quota() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReduceQuotaSceneTradeCmd::clear_quota() {
  quota_ = GOOGLE_ULONGLONG(0);
  clear_has_quota();
}
inline ::google::protobuf::uint64 ReduceQuotaSceneTradeCmd::quota() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceQuotaSceneTradeCmd.quota)
  return quota_;
}
inline void ReduceQuotaSceneTradeCmd::set_quota(::google::protobuf::uint64 value) {
  set_has_quota();
  quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReduceQuotaSceneTradeCmd.quota)
}

// optional string receivername = 6;
inline bool ReduceQuotaSceneTradeCmd::has_receivername() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReduceQuotaSceneTradeCmd::set_has_receivername() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReduceQuotaSceneTradeCmd::clear_has_receivername() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReduceQuotaSceneTradeCmd::clear_receivername() {
  if (receivername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_->clear();
  }
  clear_has_receivername();
}
inline const ::std::string& ReduceQuotaSceneTradeCmd::receivername() const {
  // @@protoc_insertion_point(field_get:Cmd.ReduceQuotaSceneTradeCmd.receivername)
  return *receivername_;
}
inline void ReduceQuotaSceneTradeCmd::set_receivername(const ::std::string& value) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ReduceQuotaSceneTradeCmd.receivername)
}
inline void ReduceQuotaSceneTradeCmd::set_receivername(const char* value) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ReduceQuotaSceneTradeCmd.receivername)
}
inline void ReduceQuotaSceneTradeCmd::set_receivername(const char* value, size_t size) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReduceQuotaSceneTradeCmd.receivername)
}
inline ::std::string* ReduceQuotaSceneTradeCmd::mutable_receivername() {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ReduceQuotaSceneTradeCmd.receivername)
  return receivername_;
}
inline ::std::string* ReduceQuotaSceneTradeCmd::release_receivername() {
  clear_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = receivername_;
    receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReduceQuotaSceneTradeCmd::set_allocated_receivername(::std::string* receivername) {
  if (receivername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receivername_;
  }
  if (receivername) {
    set_has_receivername();
    receivername_ = receivername;
  } else {
    clear_has_receivername();
    receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReduceQuotaSceneTradeCmd.receivername)
}

// -------------------------------------------------------------------

// UnlockQuotaSceneTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool UnlockQuotaSceneTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnlockQuotaSceneTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnlockQuotaSceneTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnlockQuotaSceneTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command UnlockQuotaSceneTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UnlockQuotaSceneTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UnlockQuotaSceneTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UnlockQuotaSceneTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = UNLOCK_QUOTA_RECORDTRADE];
inline bool UnlockQuotaSceneTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnlockQuotaSceneTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnlockQuotaSceneTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnlockQuotaSceneTradeCmd::clear_param() {
  param_ = 24;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam UnlockQuotaSceneTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UnlockQuotaSceneTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void UnlockQuotaSceneTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UnlockQuotaSceneTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool UnlockQuotaSceneTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnlockQuotaSceneTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnlockQuotaSceneTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnlockQuotaSceneTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 UnlockQuotaSceneTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.UnlockQuotaSceneTradeCmd.charid)
  return charid_;
}
inline void UnlockQuotaSceneTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UnlockQuotaSceneTradeCmd.charid)
}

// optional uint64 id = 4;
inline bool UnlockQuotaSceneTradeCmd::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnlockQuotaSceneTradeCmd::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnlockQuotaSceneTradeCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnlockQuotaSceneTradeCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 UnlockQuotaSceneTradeCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.UnlockQuotaSceneTradeCmd.id)
  return id_;
}
inline void UnlockQuotaSceneTradeCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UnlockQuotaSceneTradeCmd.id)
}

// optional uint64 quota = 5;
inline bool UnlockQuotaSceneTradeCmd::has_quota() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnlockQuotaSceneTradeCmd::set_has_quota() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnlockQuotaSceneTradeCmd::clear_has_quota() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnlockQuotaSceneTradeCmd::clear_quota() {
  quota_ = GOOGLE_ULONGLONG(0);
  clear_has_quota();
}
inline ::google::protobuf::uint64 UnlockQuotaSceneTradeCmd::quota() const {
  // @@protoc_insertion_point(field_get:Cmd.UnlockQuotaSceneTradeCmd.quota)
  return quota_;
}
inline void UnlockQuotaSceneTradeCmd::set_quota(::google::protobuf::uint64 value) {
  set_has_quota();
  quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UnlockQuotaSceneTradeCmd.quota)
}

// optional string receivername = 6;
inline bool UnlockQuotaSceneTradeCmd::has_receivername() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UnlockQuotaSceneTradeCmd::set_has_receivername() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UnlockQuotaSceneTradeCmd::clear_has_receivername() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UnlockQuotaSceneTradeCmd::clear_receivername() {
  if (receivername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_->clear();
  }
  clear_has_receivername();
}
inline const ::std::string& UnlockQuotaSceneTradeCmd::receivername() const {
  // @@protoc_insertion_point(field_get:Cmd.UnlockQuotaSceneTradeCmd.receivername)
  return *receivername_;
}
inline void UnlockQuotaSceneTradeCmd::set_receivername(const ::std::string& value) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UnlockQuotaSceneTradeCmd.receivername)
}
inline void UnlockQuotaSceneTradeCmd::set_receivername(const char* value) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UnlockQuotaSceneTradeCmd.receivername)
}
inline void UnlockQuotaSceneTradeCmd::set_receivername(const char* value, size_t size) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UnlockQuotaSceneTradeCmd.receivername)
}
inline ::std::string* UnlockQuotaSceneTradeCmd::mutable_receivername() {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UnlockQuotaSceneTradeCmd.receivername)
  return receivername_;
}
inline ::std::string* UnlockQuotaSceneTradeCmd::release_receivername() {
  clear_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = receivername_;
    receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UnlockQuotaSceneTradeCmd::set_allocated_receivername(::std::string* receivername) {
  if (receivername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receivername_;
  }
  if (receivername) {
    set_has_receivername();
    receivername_ = receivername;
  } else {
    clear_has_receivername();
    receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UnlockQuotaSceneTradeCmd.receivername)
}

// -------------------------------------------------------------------

// ExtraPermissionSceneTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool ExtraPermissionSceneTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtraPermissionSceneTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtraPermissionSceneTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtraPermissionSceneTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command ExtraPermissionSceneTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ExtraPermissionSceneTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ExtraPermissionSceneTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExtraPermissionSceneTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = EXTRA_PERMISSION_RECORDTRADE];
inline bool ExtraPermissionSceneTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtraPermissionSceneTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtraPermissionSceneTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtraPermissionSceneTradeCmd::clear_param() {
  param_ = 20;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam ExtraPermissionSceneTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ExtraPermissionSceneTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void ExtraPermissionSceneTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExtraPermissionSceneTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool ExtraPermissionSceneTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExtraPermissionSceneTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExtraPermissionSceneTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExtraPermissionSceneTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ExtraPermissionSceneTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ExtraPermissionSceneTradeCmd.charid)
  return charid_;
}
inline void ExtraPermissionSceneTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExtraPermissionSceneTradeCmd.charid)
}

// optional .Cmd.EPermission permission = 4;
inline bool ExtraPermissionSceneTradeCmd::has_permission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExtraPermissionSceneTradeCmd::set_has_permission() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExtraPermissionSceneTradeCmd::clear_has_permission() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExtraPermissionSceneTradeCmd::clear_permission() {
  permission_ = 1;
  clear_has_permission();
}
inline ::Cmd::EPermission ExtraPermissionSceneTradeCmd::permission() const {
  // @@protoc_insertion_point(field_get:Cmd.ExtraPermissionSceneTradeCmd.permission)
  return static_cast< ::Cmd::EPermission >(permission_);
}
inline void ExtraPermissionSceneTradeCmd::set_permission(::Cmd::EPermission value) {
  assert(::Cmd::EPermission_IsValid(value));
  set_has_permission();
  permission_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExtraPermissionSceneTradeCmd.permission)
}

// optional uint64 value = 5;
inline bool ExtraPermissionSceneTradeCmd::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExtraPermissionSceneTradeCmd::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExtraPermissionSceneTradeCmd::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExtraPermissionSceneTradeCmd::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 ExtraPermissionSceneTradeCmd::value() const {
  // @@protoc_insertion_point(field_get:Cmd.ExtraPermissionSceneTradeCmd.value)
  return value_;
}
inline void ExtraPermissionSceneTradeCmd::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExtraPermissionSceneTradeCmd.value)
}

// -------------------------------------------------------------------

// SecurityCmdSceneTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool SecurityCmdSceneTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecurityCmdSceneTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecurityCmdSceneTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecurityCmdSceneTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command SecurityCmdSceneTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SecurityCmdSceneTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SecurityCmdSceneTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SecurityCmdSceneTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = SECURITY_CMD_RECORDTRADE];
inline bool SecurityCmdSceneTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SecurityCmdSceneTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SecurityCmdSceneTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SecurityCmdSceneTradeCmd::clear_param() {
  param_ = 21;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam SecurityCmdSceneTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SecurityCmdSceneTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void SecurityCmdSceneTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SecurityCmdSceneTradeCmd.param)
}

// optional bool valid = 3;
inline bool SecurityCmdSceneTradeCmd::has_valid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SecurityCmdSceneTradeCmd::set_has_valid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SecurityCmdSceneTradeCmd::clear_has_valid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SecurityCmdSceneTradeCmd::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool SecurityCmdSceneTradeCmd::valid() const {
  // @@protoc_insertion_point(field_get:Cmd.SecurityCmdSceneTradeCmd.valid)
  return valid_;
}
inline void SecurityCmdSceneTradeCmd::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SecurityCmdSceneTradeCmd.valid)
}

// optional .Cmd.ESecurityType type = 4;
inline bool SecurityCmdSceneTradeCmd::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SecurityCmdSceneTradeCmd::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SecurityCmdSceneTradeCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SecurityCmdSceneTradeCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::ESecurityType SecurityCmdSceneTradeCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.SecurityCmdSceneTradeCmd.type)
  return static_cast< ::Cmd::ESecurityType >(type_);
}
inline void SecurityCmdSceneTradeCmd::set_type(::Cmd::ESecurityType value) {
  assert(::Cmd::ESecurityType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SecurityCmdSceneTradeCmd.type)
}

// optional uint64 charid = 5;
inline bool SecurityCmdSceneTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SecurityCmdSceneTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SecurityCmdSceneTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SecurityCmdSceneTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SecurityCmdSceneTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.SecurityCmdSceneTradeCmd.charid)
  return charid_;
}
inline void SecurityCmdSceneTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SecurityCmdSceneTradeCmd.charid)
}

// optional uint32 itemid = 6;
inline bool SecurityCmdSceneTradeCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SecurityCmdSceneTradeCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SecurityCmdSceneTradeCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SecurityCmdSceneTradeCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 SecurityCmdSceneTradeCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.SecurityCmdSceneTradeCmd.itemid)
  return itemid_;
}
inline void SecurityCmdSceneTradeCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SecurityCmdSceneTradeCmd.itemid)
}

// optional int32 refinelv = 7;
inline bool SecurityCmdSceneTradeCmd::has_refinelv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SecurityCmdSceneTradeCmd::set_has_refinelv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SecurityCmdSceneTradeCmd::clear_has_refinelv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SecurityCmdSceneTradeCmd::clear_refinelv() {
  refinelv_ = 0;
  clear_has_refinelv();
}
inline ::google::protobuf::int32 SecurityCmdSceneTradeCmd::refinelv() const {
  // @@protoc_insertion_point(field_get:Cmd.SecurityCmdSceneTradeCmd.refinelv)
  return refinelv_;
}
inline void SecurityCmdSceneTradeCmd::set_refinelv(::google::protobuf::int32 value) {
  set_has_refinelv();
  refinelv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SecurityCmdSceneTradeCmd.refinelv)
}

// optional uint64 key = 8;
inline bool SecurityCmdSceneTradeCmd::has_key() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SecurityCmdSceneTradeCmd::set_has_key() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SecurityCmdSceneTradeCmd::clear_has_key() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SecurityCmdSceneTradeCmd::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::uint64 SecurityCmdSceneTradeCmd::key() const {
  // @@protoc_insertion_point(field_get:Cmd.SecurityCmdSceneTradeCmd.key)
  return key_;
}
inline void SecurityCmdSceneTradeCmd::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SecurityCmdSceneTradeCmd.key)
}

// -------------------------------------------------------------------

// TradePriceQueryTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool TradePriceQueryTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradePriceQueryTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradePriceQueryTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradePriceQueryTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command TradePriceQueryTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceQueryTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TradePriceQueryTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradePriceQueryTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = TRADE_PRICE_QUERY_RECORDTRADE];
inline bool TradePriceQueryTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradePriceQueryTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradePriceQueryTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradePriceQueryTradeCmd::clear_param() {
  param_ = 22;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam TradePriceQueryTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceQueryTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void TradePriceQueryTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradePriceQueryTradeCmd.param)
}

// optional uint64 batchid = 3;
inline bool TradePriceQueryTradeCmd::has_batchid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TradePriceQueryTradeCmd::set_has_batchid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TradePriceQueryTradeCmd::clear_has_batchid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TradePriceQueryTradeCmd::clear_batchid() {
  batchid_ = GOOGLE_ULONGLONG(0);
  clear_has_batchid();
}
inline ::google::protobuf::uint64 TradePriceQueryTradeCmd::batchid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceQueryTradeCmd.batchid)
  return batchid_;
}
inline void TradePriceQueryTradeCmd::set_batchid(::google::protobuf::uint64 value) {
  set_has_batchid();
  batchid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradePriceQueryTradeCmd.batchid)
}

// optional uint64 signup_id = 4;
inline bool TradePriceQueryTradeCmd::has_signup_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TradePriceQueryTradeCmd::set_has_signup_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TradePriceQueryTradeCmd::clear_has_signup_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TradePriceQueryTradeCmd::clear_signup_id() {
  signup_id_ = GOOGLE_ULONGLONG(0);
  clear_has_signup_id();
}
inline ::google::protobuf::uint64 TradePriceQueryTradeCmd::signup_id() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceQueryTradeCmd.signup_id)
  return signup_id_;
}
inline void TradePriceQueryTradeCmd::set_signup_id(::google::protobuf::uint64 value) {
  set_has_signup_id();
  signup_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradePriceQueryTradeCmd.signup_id)
}

// optional uint64 price = 5;
inline bool TradePriceQueryTradeCmd::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TradePriceQueryTradeCmd::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TradePriceQueryTradeCmd::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TradePriceQueryTradeCmd::clear_price() {
  price_ = GOOGLE_ULONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::uint64 TradePriceQueryTradeCmd::price() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceQueryTradeCmd.price)
  return price_;
}
inline void TradePriceQueryTradeCmd::set_price(::google::protobuf::uint64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradePriceQueryTradeCmd.price)
}

// optional .Cmd.ItemData itemdata = 6;
inline bool TradePriceQueryTradeCmd::has_itemdata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TradePriceQueryTradeCmd::set_has_itemdata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TradePriceQueryTradeCmd::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TradePriceQueryTradeCmd::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::Cmd::ItemData& TradePriceQueryTradeCmd::itemdata() const {
  // @@protoc_insertion_point(field_get:Cmd.TradePriceQueryTradeCmd.itemdata)
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::Cmd::ItemData* TradePriceQueryTradeCmd::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::Cmd::ItemData;
  // @@protoc_insertion_point(field_mutable:Cmd.TradePriceQueryTradeCmd.itemdata)
  return itemdata_;
}
inline ::Cmd::ItemData* TradePriceQueryTradeCmd::release_itemdata() {
  clear_has_itemdata();
  ::Cmd::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void TradePriceQueryTradeCmd::set_allocated_itemdata(::Cmd::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradePriceQueryTradeCmd.itemdata)
}

// -------------------------------------------------------------------

// BoothOpenTradeCmd

// optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
inline bool BoothOpenTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoothOpenTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoothOpenTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoothOpenTradeCmd::clear_cmd() {
  cmd_ = 201;
  clear_has_cmd();
}
inline ::Cmd::Command BoothOpenTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothOpenTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BoothOpenTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothOpenTradeCmd.cmd)
}

// optional .Cmd.RecordServerTradeParam param = 2 [default = BOOTH_OPEN_RECORDTRADE];
inline bool BoothOpenTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoothOpenTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoothOpenTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoothOpenTradeCmd::clear_param() {
  param_ = 23;
  clear_has_param();
}
inline ::Cmd::RecordServerTradeParam BoothOpenTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothOpenTradeCmd.param)
  return static_cast< ::Cmd::RecordServerTradeParam >(param_);
}
inline void BoothOpenTradeCmd::set_param(::Cmd::RecordServerTradeParam value) {
  assert(::Cmd::RecordServerTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothOpenTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool BoothOpenTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BoothOpenTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BoothOpenTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BoothOpenTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 BoothOpenTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothOpenTradeCmd.charid)
  return charid_;
}
inline void BoothOpenTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothOpenTradeCmd.charid)
}

// optional uint32 open = 4 [default = 1];
inline bool BoothOpenTradeCmd::has_open() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BoothOpenTradeCmd::set_has_open() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BoothOpenTradeCmd::clear_has_open() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BoothOpenTradeCmd::clear_open() {
  open_ = 1u;
  clear_has_open();
}
inline ::google::protobuf::uint32 BoothOpenTradeCmd::open() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothOpenTradeCmd.open)
  return open_;
}
inline void BoothOpenTradeCmd::set_open(::google::protobuf::uint32 value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothOpenTradeCmd.open)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::SceneTradeParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::SceneTradeParam>() {
  return ::Cmd::SceneTradeParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::RecordServerTradeParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::RecordServerTradeParam>() {
  return ::Cmd::RecordServerTradeParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EAddItemType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EAddItemType>() {
  return ::Cmd::EAddItemType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EGiveStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EGiveStatus>() {
  return ::Cmd::EGiveStatus_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EPermission> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EPermission>() {
  return ::Cmd::EPermission_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ESecurityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ESecurityType>() {
  return ::Cmd::ESecurityType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneTrade_2eproto__INCLUDED
