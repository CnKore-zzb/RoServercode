// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneQuest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneQuest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* QuestPConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestPConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestManualItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestManualItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestName_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestPuzzle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestPuzzle_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestPreview_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestPreview_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestManualMain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestManualMain_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestManualBranch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestManualBranch_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestManualStory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestManualStory_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestManual_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestManual_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestList_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestUpdateItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestUpdateItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestStepUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestStepUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunQuestStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunQuestStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestTrace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestTrace_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestDetailList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestDetailList_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestDetailUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestDetailUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRaidCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRaidCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestCanAcceptListChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestCanAcceptListChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisitNpcUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisitNpcUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtherData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryOtherData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryOtherData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryWantedInfoQuestCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryWantedInfoQuestCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteHelpAcceptQuestCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteHelpAcceptQuestCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteAcceptQuestCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteAcceptQuestCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyHelpAccelpQuestCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyHelpAccelpQuestCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryWorldQuestCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryWorldQuestCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestGroupTraceQuestCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestGroupTraceQuestCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelpQuickFinishBoardQuestCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelpQuickFinishBoardQuestCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryManualQuestCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryManualQuestCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenPuzzleQuestCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenPuzzleQuestCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EWantedType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuestStep_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuestList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuestAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EOtherData_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EJoyActivityType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneQuest_2eproto() {
  protobuf_AddDesc_SceneQuest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneQuest.proto");
  GOOGLE_CHECK(file != NULL);
  QuestPConfig_descriptor_ = file->message_type(0);
  static const int QuestPConfig_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, rewardgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, subgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, finishjump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, failjump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, whethertrace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, auto__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, firstclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, class__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, questname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, traceinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, prefixion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, allrewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, prequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, mustprequest_),
  };
  QuestPConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestPConfig_descriptor_,
      QuestPConfig::default_instance_,
      QuestPConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestPConfig));
  QuestStep_descriptor_ = file->message_type(1);
  static const int QuestStep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStep, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStep, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStep, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStep, config_),
  };
  QuestStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestStep_descriptor_,
      QuestStep::default_instance_,
      QuestStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestStep));
  QuestData_descriptor_ = file->message_type(2);
  static const int QuestData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, acceptlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, finishcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, names_),
  };
  QuestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestData_descriptor_,
      QuestData::default_instance_,
      QuestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestData));
  QuestManualItem_descriptor_ = file->message_type(3);
  static const int QuestManualItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualItem, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualItem, subs_),
  };
  QuestManualItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestManualItem_descriptor_,
      QuestManualItem::default_instance_,
      QuestManualItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestManualItem));
  QuestShop_descriptor_ = file->message_type(4);
  static const int QuestShop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestShop, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestShop, quests_),
  };
  QuestShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestShop_descriptor_,
      QuestShop::default_instance_,
      QuestShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestShop));
  QuestName_descriptor_ = file->message_type(5);
  static const int QuestName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestName, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestName, name_),
  };
  QuestName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestName_descriptor_,
      QuestName::default_instance_,
      QuestName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestName));
  QuestPuzzle_descriptor_ = file->message_type(6);
  static const int QuestPuzzle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPuzzle, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPuzzle, open_puzzles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPuzzle, unlock_puzzles_),
  };
  QuestPuzzle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestPuzzle_descriptor_,
      QuestPuzzle::default_instance_,
      QuestPuzzle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPuzzle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPuzzle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestPuzzle));
  QuestPreview_descriptor_ = file->message_type(7);
  static const int QuestPreview_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreview, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreview, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreview, complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreview, rewardgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreview, allrewardid_),
  };
  QuestPreview_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestPreview_descriptor_,
      QuestPreview::default_instance_,
      QuestPreview_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreview, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreview, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestPreview));
  QuestManualMain_descriptor_ = file->message_type(8);
  static const int QuestManualMain_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualMain, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualMain, puzzle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualMain, mainstoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualMain, previews_),
  };
  QuestManualMain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestManualMain_descriptor_,
      QuestManualMain::default_instance_,
      QuestManualMain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualMain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualMain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestManualMain));
  QuestManualBranch_descriptor_ = file->message_type(9);
  static const int QuestManualBranch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualBranch, shops_),
  };
  QuestManualBranch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestManualBranch_descriptor_,
      QuestManualBranch::default_instance_,
      QuestManualBranch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualBranch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualBranch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestManualBranch));
  QuestManualStory_descriptor_ = file->message_type(10);
  static const int QuestManualStory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualStory, previews_),
  };
  QuestManualStory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestManualStory_descriptor_,
      QuestManualStory::default_instance_,
      QuestManualStory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualStory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManualStory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestManualStory));
  QuestManual_descriptor_ = file->message_type(11);
  static const int QuestManual_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManual, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManual, main_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManual, branch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManual, story_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManual, prequest_),
  };
  QuestManual_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestManual_descriptor_,
      QuestManual::default_instance_,
      QuestManual_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManual, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestManual, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestManual));
  QuestList_descriptor_ = file->message_type(12);
  static const int QuestList_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestList, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestList, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestList, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestList, clear_),
  };
  QuestList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestList_descriptor_,
      QuestList::default_instance_,
      QuestList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestList));
  QuestUpdateItem_descriptor_ = file->message_type(13);
  static const int QuestUpdateItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdateItem, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdateItem, del_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdateItem, type_),
  };
  QuestUpdateItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestUpdateItem_descriptor_,
      QuestUpdateItem::default_instance_,
      QuestUpdateItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdateItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdateItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestUpdateItem));
  QuestUpdate_descriptor_ = file->message_type(14);
  static const int QuestUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdate, items_),
  };
  QuestUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestUpdate_descriptor_,
      QuestUpdate::default_instance_,
      QuestUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestUpdate));
  QuestStepUpdate_descriptor_ = file->message_type(15);
  static const int QuestStepUpdate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStepUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStepUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStepUpdate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStepUpdate, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStepUpdate, data_),
  };
  QuestStepUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestStepUpdate_descriptor_,
      QuestStepUpdate::default_instance_,
      QuestStepUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStepUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStepUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestStepUpdate));
  QuestAction_descriptor_ = file->message_type(16);
  static const int QuestAction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestAction, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestAction, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestAction, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestAction, questid_),
  };
  QuestAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestAction_descriptor_,
      QuestAction::default_instance_,
      QuestAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestAction));
  RunQuestStep_descriptor_ = file->message_type(17);
  static const int RunQuestStep_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQuestStep, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQuestStep, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQuestStep, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQuestStep, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQuestStep, subgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQuestStep, step_),
  };
  RunQuestStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunQuestStep_descriptor_,
      RunQuestStep::default_instance_,
      RunQuestStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQuestStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQuestStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunQuestStep));
  QuestTrace_descriptor_ = file->message_type(18);
  static const int QuestTrace_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestTrace, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestTrace, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestTrace, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestTrace, trace_),
  };
  QuestTrace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestTrace_descriptor_,
      QuestTrace::default_instance_,
      QuestTrace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestTrace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestTrace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestTrace));
  QuestDetail_descriptor_ = file->message_type(19);
  static const int QuestDetail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetail, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetail, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetail, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetail, complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetail, trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetail, details_),
  };
  QuestDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestDetail_descriptor_,
      QuestDetail::default_instance_,
      QuestDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestDetail));
  QuestDetailList_descriptor_ = file->message_type(20);
  static const int QuestDetailList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetailList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetailList, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetailList, details_),
  };
  QuestDetailList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestDetailList_descriptor_,
      QuestDetailList::default_instance_,
      QuestDetailList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetailList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetailList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestDetailList));
  QuestDetailUpdate_descriptor_ = file->message_type(21);
  static const int QuestDetailUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetailUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetailUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetailUpdate, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetailUpdate, del_),
  };
  QuestDetailUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestDetailUpdate_descriptor_,
      QuestDetailUpdate::default_instance_,
      QuestDetailUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetailUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDetailUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestDetailUpdate));
  QuestRaidCmd_descriptor_ = file->message_type(22);
  static const int QuestRaidCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRaidCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRaidCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRaidCmd, questid_),
  };
  QuestRaidCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRaidCmd_descriptor_,
      QuestRaidCmd::default_instance_,
      QuestRaidCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRaidCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRaidCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRaidCmd));
  QuestCanAcceptListChange_descriptor_ = file->message_type(23);
  static const int QuestCanAcceptListChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestCanAcceptListChange, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestCanAcceptListChange, param_),
  };
  QuestCanAcceptListChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestCanAcceptListChange_descriptor_,
      QuestCanAcceptListChange::default_instance_,
      QuestCanAcceptListChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestCanAcceptListChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestCanAcceptListChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestCanAcceptListChange));
  VisitNpcUserCmd_descriptor_ = file->message_type(24);
  static const int VisitNpcUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitNpcUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitNpcUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitNpcUserCmd, npctempid_),
  };
  VisitNpcUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisitNpcUserCmd_descriptor_,
      VisitNpcUserCmd::default_instance_,
      VisitNpcUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitNpcUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitNpcUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisitNpcUserCmd));
  OtherData_descriptor_ = file->message_type(25);
  static const int OtherData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherData, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherData, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherData, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherData, param4_),
  };
  OtherData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherData_descriptor_,
      OtherData::default_instance_,
      OtherData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherData));
  QueryOtherData_descriptor_ = file->message_type(26);
  static const int QueryOtherData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOtherData, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOtherData, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOtherData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOtherData, data_),
  };
  QueryOtherData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryOtherData_descriptor_,
      QueryOtherData::default_instance_,
      QueryOtherData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOtherData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOtherData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryOtherData));
  QueryWantedInfoQuestCmd_descriptor_ = file->message_type(27);
  static const int QueryWantedInfoQuestCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryWantedInfoQuestCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryWantedInfoQuestCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryWantedInfoQuestCmd, maxcount_),
  };
  QueryWantedInfoQuestCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryWantedInfoQuestCmd_descriptor_,
      QueryWantedInfoQuestCmd::default_instance_,
      QueryWantedInfoQuestCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryWantedInfoQuestCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryWantedInfoQuestCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryWantedInfoQuestCmd));
  InviteHelpAcceptQuestCmd_descriptor_ = file->message_type(28);
  static const int InviteHelpAcceptQuestCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteHelpAcceptQuestCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteHelpAcceptQuestCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteHelpAcceptQuestCmd, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteHelpAcceptQuestCmd, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteHelpAcceptQuestCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteHelpAcceptQuestCmd, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteHelpAcceptQuestCmd, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteHelpAcceptQuestCmd, issubmit_),
  };
  InviteHelpAcceptQuestCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteHelpAcceptQuestCmd_descriptor_,
      InviteHelpAcceptQuestCmd::default_instance_,
      InviteHelpAcceptQuestCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteHelpAcceptQuestCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteHelpAcceptQuestCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteHelpAcceptQuestCmd));
  InviteAcceptQuestCmd_descriptor_ = file->message_type(29);
  static const int InviteAcceptQuestCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteAcceptQuestCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteAcceptQuestCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteAcceptQuestCmd, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteAcceptQuestCmd, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteAcceptQuestCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteAcceptQuestCmd, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteAcceptQuestCmd, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteAcceptQuestCmd, issubmit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteAcceptQuestCmd, isquickfinish_),
  };
  InviteAcceptQuestCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteAcceptQuestCmd_descriptor_,
      InviteAcceptQuestCmd::default_instance_,
      InviteAcceptQuestCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteAcceptQuestCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteAcceptQuestCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteAcceptQuestCmd));
  ReplyHelpAccelpQuestCmd_descriptor_ = file->message_type(30);
  static const int ReplyHelpAccelpQuestCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHelpAccelpQuestCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHelpAccelpQuestCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHelpAccelpQuestCmd, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHelpAccelpQuestCmd, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHelpAccelpQuestCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHelpAccelpQuestCmd, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHelpAccelpQuestCmd, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHelpAccelpQuestCmd, issubmit_),
  };
  ReplyHelpAccelpQuestCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyHelpAccelpQuestCmd_descriptor_,
      ReplyHelpAccelpQuestCmd::default_instance_,
      ReplyHelpAccelpQuestCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHelpAccelpQuestCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHelpAccelpQuestCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyHelpAccelpQuestCmd));
  WorldQuest_descriptor_ = file->message_type(31);
  static const int WorldQuest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldQuest, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldQuest, type_main_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldQuest, type_branch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldQuest, type_daily_),
  };
  WorldQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldQuest_descriptor_,
      WorldQuest::default_instance_,
      WorldQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldQuest));
  QueryWorldQuestCmd_descriptor_ = file->message_type(32);
  static const int QueryWorldQuestCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryWorldQuestCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryWorldQuestCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryWorldQuestCmd, quests_),
  };
  QueryWorldQuestCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryWorldQuestCmd_descriptor_,
      QueryWorldQuestCmd::default_instance_,
      QueryWorldQuestCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryWorldQuestCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryWorldQuestCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryWorldQuestCmd));
  QuestGroupTraceQuestCmd_descriptor_ = file->message_type(33);
  static const int QuestGroupTraceQuestCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestGroupTraceQuestCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestGroupTraceQuestCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestGroupTraceQuestCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestGroupTraceQuestCmd, trace_),
  };
  QuestGroupTraceQuestCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestGroupTraceQuestCmd_descriptor_,
      QuestGroupTraceQuestCmd::default_instance_,
      QuestGroupTraceQuestCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestGroupTraceQuestCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestGroupTraceQuestCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestGroupTraceQuestCmd));
  HelpQuickFinishBoardQuestCmd_descriptor_ = file->message_type(34);
  static const int HelpQuickFinishBoardQuestCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpQuickFinishBoardQuestCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpQuickFinishBoardQuestCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpQuickFinishBoardQuestCmd, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpQuickFinishBoardQuestCmd, leadername_),
  };
  HelpQuickFinishBoardQuestCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelpQuickFinishBoardQuestCmd_descriptor_,
      HelpQuickFinishBoardQuestCmd::default_instance_,
      HelpQuickFinishBoardQuestCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpQuickFinishBoardQuestCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpQuickFinishBoardQuestCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelpQuickFinishBoardQuestCmd));
  QueryManualQuestCmd_descriptor_ = file->message_type(35);
  static const int QueryManualQuestCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryManualQuestCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryManualQuestCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryManualQuestCmd, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryManualQuestCmd, manual_),
  };
  QueryManualQuestCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryManualQuestCmd_descriptor_,
      QueryManualQuestCmd::default_instance_,
      QueryManualQuestCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryManualQuestCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryManualQuestCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryManualQuestCmd));
  OpenPuzzleQuestCmd_descriptor_ = file->message_type(36);
  static const int OpenPuzzleQuestCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPuzzleQuestCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPuzzleQuestCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPuzzleQuestCmd, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPuzzleQuestCmd, id_),
  };
  OpenPuzzleQuestCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenPuzzleQuestCmd_descriptor_,
      OpenPuzzleQuestCmd::default_instance_,
      OpenPuzzleQuestCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPuzzleQuestCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPuzzleQuestCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenPuzzleQuestCmd));
  QuestParam_descriptor_ = file->enum_type(0);
  EWantedType_descriptor_ = file->enum_type(1);
  EQuestType_descriptor_ = file->enum_type(2);
  EQuestStep_descriptor_ = file->enum_type(3);
  EQuestList_descriptor_ = file->enum_type(4);
  EQuestAction_descriptor_ = file->enum_type(5);
  EOtherData_descriptor_ = file->enum_type(6);
  EJoyActivityType_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneQuest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestPConfig_descriptor_, &QuestPConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestStep_descriptor_, &QuestStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestData_descriptor_, &QuestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestManualItem_descriptor_, &QuestManualItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestShop_descriptor_, &QuestShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestName_descriptor_, &QuestName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestPuzzle_descriptor_, &QuestPuzzle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestPreview_descriptor_, &QuestPreview::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestManualMain_descriptor_, &QuestManualMain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestManualBranch_descriptor_, &QuestManualBranch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestManualStory_descriptor_, &QuestManualStory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestManual_descriptor_, &QuestManual::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestList_descriptor_, &QuestList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestUpdateItem_descriptor_, &QuestUpdateItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestUpdate_descriptor_, &QuestUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestStepUpdate_descriptor_, &QuestStepUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestAction_descriptor_, &QuestAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunQuestStep_descriptor_, &RunQuestStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestTrace_descriptor_, &QuestTrace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestDetail_descriptor_, &QuestDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestDetailList_descriptor_, &QuestDetailList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestDetailUpdate_descriptor_, &QuestDetailUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRaidCmd_descriptor_, &QuestRaidCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestCanAcceptListChange_descriptor_, &QuestCanAcceptListChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisitNpcUserCmd_descriptor_, &VisitNpcUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherData_descriptor_, &OtherData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryOtherData_descriptor_, &QueryOtherData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryWantedInfoQuestCmd_descriptor_, &QueryWantedInfoQuestCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteHelpAcceptQuestCmd_descriptor_, &InviteHelpAcceptQuestCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteAcceptQuestCmd_descriptor_, &InviteAcceptQuestCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyHelpAccelpQuestCmd_descriptor_, &ReplyHelpAccelpQuestCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldQuest_descriptor_, &WorldQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryWorldQuestCmd_descriptor_, &QueryWorldQuestCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestGroupTraceQuestCmd_descriptor_, &QuestGroupTraceQuestCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelpQuickFinishBoardQuestCmd_descriptor_, &HelpQuickFinishBoardQuestCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryManualQuestCmd_descriptor_, &QueryManualQuestCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenPuzzleQuestCmd_descriptor_, &OpenPuzzleQuestCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneQuest_2eproto() {
  delete QuestPConfig::default_instance_;
  delete QuestPConfig_reflection_;
  delete QuestStep::default_instance_;
  delete QuestStep_reflection_;
  delete QuestData::default_instance_;
  delete QuestData_reflection_;
  delete QuestManualItem::default_instance_;
  delete QuestManualItem_reflection_;
  delete QuestShop::default_instance_;
  delete QuestShop_reflection_;
  delete QuestName::default_instance_;
  delete QuestName_reflection_;
  delete QuestPuzzle::default_instance_;
  delete QuestPuzzle_reflection_;
  delete QuestPreview::default_instance_;
  delete QuestPreview_reflection_;
  delete QuestManualMain::default_instance_;
  delete QuestManualMain_reflection_;
  delete QuestManualBranch::default_instance_;
  delete QuestManualBranch_reflection_;
  delete QuestManualStory::default_instance_;
  delete QuestManualStory_reflection_;
  delete QuestManual::default_instance_;
  delete QuestManual_reflection_;
  delete QuestList::default_instance_;
  delete QuestList_reflection_;
  delete QuestUpdateItem::default_instance_;
  delete QuestUpdateItem_reflection_;
  delete QuestUpdate::default_instance_;
  delete QuestUpdate_reflection_;
  delete QuestStepUpdate::default_instance_;
  delete QuestStepUpdate_reflection_;
  delete QuestAction::default_instance_;
  delete QuestAction_reflection_;
  delete RunQuestStep::default_instance_;
  delete RunQuestStep_reflection_;
  delete QuestTrace::default_instance_;
  delete QuestTrace_reflection_;
  delete QuestDetail::default_instance_;
  delete QuestDetail_reflection_;
  delete QuestDetailList::default_instance_;
  delete QuestDetailList_reflection_;
  delete QuestDetailUpdate::default_instance_;
  delete QuestDetailUpdate_reflection_;
  delete QuestRaidCmd::default_instance_;
  delete QuestRaidCmd_reflection_;
  delete QuestCanAcceptListChange::default_instance_;
  delete QuestCanAcceptListChange_reflection_;
  delete VisitNpcUserCmd::default_instance_;
  delete VisitNpcUserCmd_reflection_;
  delete OtherData::default_instance_;
  delete OtherData_reflection_;
  delete QueryOtherData::default_instance_;
  delete QueryOtherData_reflection_;
  delete QueryWantedInfoQuestCmd::default_instance_;
  delete QueryWantedInfoQuestCmd_reflection_;
  delete InviteHelpAcceptQuestCmd::default_instance_;
  delete InviteHelpAcceptQuestCmd_reflection_;
  delete InviteAcceptQuestCmd::default_instance_;
  delete InviteAcceptQuestCmd_reflection_;
  delete ReplyHelpAccelpQuestCmd::default_instance_;
  delete ReplyHelpAccelpQuestCmd_reflection_;
  delete WorldQuest::default_instance_;
  delete WorldQuest_reflection_;
  delete QueryWorldQuestCmd::default_instance_;
  delete QueryWorldQuestCmd_reflection_;
  delete QuestGroupTraceQuestCmd::default_instance_;
  delete QuestGroupTraceQuestCmd_reflection_;
  delete HelpQuickFinishBoardQuestCmd::default_instance_;
  delete HelpQuickFinishBoardQuestCmd_reflection_;
  delete QueryManualQuestCmd::default_instance_;
  delete QueryManualQuestCmd_reflection_;
  delete OpenPuzzleQuestCmd::default_instance_;
  delete OpenPuzzleQuestCmd_reflection_;
}

void protobuf_AddDesc_SceneQuest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020SceneQuest.proto\022\003Cmd\032\nxCmd.proto\032\017Sce"
    "neItem.proto\032\021ProtoCommon.proto\"\241\003\n\014Ques"
    "tPConfig\022\026\n\013RewardGroup\030\001 \001(\r:\0010\022\023\n\010SubG"
    "roup\030\002 \001(\r:\0010\022\025\n\nFinishJump\030\003 \001(\r:\0010\022\023\n\010"
    "FailJump\030\004 \001(\r:\0010\022\016\n\003Map\030\005 \001(\r:\0010\022\027\n\014Whe"
    "therTrace\030\006 \001(\r:\0010\022\017\n\004Auto\030\007 \001(\r:\0010\022\025\n\nF"
    "irstClass\030\010 \001(\r:\0010\022\020\n\005Class\030\t \001(\r:\0010\022\020\n\005"
    "Level\030\n \001(\r:\0010\022\021\n\tQuestName\030\013 \001(\t\022\014\n\004Nam"
    "e\030\014 \001(\t\022\014\n\004Type\030\r \001(\t\022\017\n\007Content\030\016 \001(\t\022\021"
    "\n\tTraceInfo\030\017 \001(\t\022\021\n\tPrefixion\030\024 \001(\t\022 \n\006"
    "params\030\020 \001(\0132\020.Cmd.ConfigParam\022\023\n\013allrew"
    "ardid\030\021 \003(\r\022\020\n\010PreQuest\030\022 \003(\r\022\024\n\014MustPre"
    "Quest\030\023 \003(\r\"a\n\tQuestStep\022\022\n\007process\030\001 \001("
    "\r:\0010\022\016\n\006params\030\002 \003(\004\022\r\n\005names\030\003 \003(\t\022!\n\006c"
    "onfig\030\004 \001(\0132\021.Cmd.QuestPConfig\"\211\002\n\tQuest"
    "Data\022\r\n\002id\030\001 \001(\r:\0010\022\017\n\004step\030\002 \001(\r:\0010\022\017\n\004"
    "time\030\003 \001(\r:\0010\022\027\n\010complete\030\004 \001(\010:\005false\022\023"
    "\n\005trace\030\014 \001(\010:\004true\022\035\n\005steps\030\005 \003(\0132\016.Cmd"
    ".QuestStep\022\036\n\007rewards\030\006 \003(\0132\r.Cmd.ItemIn"
    "fo\022\022\n\007version\030\007 \001(\r:\0010\022\023\n\010acceptlv\030\010 \001(\r"
    ":\0010\022\026\n\013finishcount\030\t \001(\r:\0010\022\016\n\006params\030\n "
    "\003(\004\022\r\n\005names\030\013 \003(\t\"\205\001\n\017QuestManualItem\0220"
    "\n\004type\030\001 \001(\0162\017.Cmd.EQuestList:\021EQUESTLIS"
    "T_ACCEPT\022\034\n\004data\030\002 \001(\0132\016.Cmd.QuestData\022\""
    "\n\004subs\030\003 \003(\0132\024.Cmd.QuestManualItem\"D\n\tQu"
    "estShop\022\021\n\006itemid\030\001 \001(\r:\0010\022$\n\006quests\030\002 \003"
    "(\0132\024.Cmd.QuestManualItem\"(\n\tQuestName\022\r\n"
    "\002id\030\001 \001(\r:\0010\022\014\n\004name\030\002 \001(\t\"L\n\013QuestPuzzl"
    "e\022\017\n\007version\030\001 \001(\t\022\024\n\014open_puzzles\030\002 \003(\r"
    "\022\026\n\016unlock_puzzles\030\003 \003(\r\"v\n\014QuestPreview"
    "\022\022\n\007questid\030\001 \001(\r:\0010\022\014\n\004name\030\002 \001(\t\022\027\n\010co"
    "mplete\030\003 \001(\010:\005false\022\026\n\013RewardGroup\030\004 \001(\r"
    ":\0010\022\023\n\013allrewardid\030\005 \003(\r\"\225\001\n\017QuestManual"
    "Main\022#\n\005items\030\001 \003(\0132\024.Cmd.QuestManualIte"
    "m\022 \n\006puzzle\030\002 \001(\0132\020.Cmd.QuestPuzzle\022\026\n\013m"
    "ainstoryid\030\003 \001(\r:\0010\022#\n\010previews\030\004 \003(\0132\021."
    "Cmd.QuestPreview\"2\n\021QuestManualBranch\022\035\n"
    "\005shops\030\001 \003(\0132\016.Cmd.QuestShop\"7\n\020QuestMan"
    "ualStory\022#\n\010previews\030\001 \003(\0132\021.Cmd.QuestPr"
    "eview\"\262\001\n\013QuestManual\022\017\n\007version\030\001 \001(\t\022\""
    "\n\004main\030\002 \001(\0132\024.Cmd.QuestManualMain\022&\n\006br"
    "anch\030\003 \001(\0132\026.Cmd.QuestManualBranch\022$\n\005st"
    "ory\030\004 \001(\0132\025.Cmd.QuestManualStory\022 \n\010preq"
    "uest\030\005 \003(\0132\016.Cmd.QuestName\"\354\001\n\tQuestList"
    "\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCENE_USER_"
    "QUEST_PROTOCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.Ques"
    "tParam:\024QUESTPARAM_QUESTLIST\0220\n\004type\030\003 \001"
    "(\0162\017.Cmd.EQuestList:\021EQUESTLIST_ACCEPT\022\r"
    "\n\002id\030\004 \001(\r:\0010\022\034\n\004list\030\005 \003(\0132\016.Cmd.QuestD"
    "ata\022\024\n\005clear\030\006 \001(\010:\005false\"p\n\017QuestUpdate"
    "Item\022\036\n\006update\030\001 \003(\0132\016.Cmd.QuestData\022\013\n\003"
    "del\030\002 \003(\r\0220\n\004type\030\003 \001(\0162\017.Cmd.EQuestList"
    ":\021EQUESTLIST_ACCEPT\"\240\001\n\013QuestUpdate\0224\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\031SCENE_USER_QUEST"
    "_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.QuestPara"
    "m:\026QUESTPARAM_QUESTUPDATE\022#\n\005items\030\003 \003(\013"
    "2\024.Cmd.QuestUpdateItem\"\301\001\n\017QuestStepUpda"
    "te\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCENE_USE"
    "R_QUEST_PROTOCMD\022:\n\005param\030\002 \001(\0162\017.Cmd.Qu"
    "estParam:\032QUESTPARAM_QUESTSTEPUPDATE\022\r\n\002"
    "id\030\003 \001(\r:\0010\022\017\n\004step\030\004 \001(\r:\0010\022\034\n\004data\030\005 \001"
    "(\0132\016.Cmd.QuestStep\"\304\001\n\013QuestAction\0224\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\031SCENE_USER_QUEST_"
    "PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.QuestParam"
    ":\026QUESTPARAM_QUESTACTION\0223\n\006action\030\003 \001(\016"
    "2\021.Cmd.EQuestAction:\020EQUESTACTION_MIN\022\022\n"
    "\007questid\030\004 \001(\r:\0010\"\312\001\n\014RunQuestStep\0224\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\031SCENE_USER_QUEST_"
    "PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.QuestParam"
    ":\027QUESTPARAM_RUNQUESTSTEP\022\022\n\007questid\030\003 \001"
    "(\r:\0010\022\021\n\006starid\030\004 \001(\r:\0010\022\023\n\010subgroup\030\005 \001"
    "(\r:\0010\022\017\n\004step\030\006 \001(\r:\0010\"\243\001\n\nQuestTrace\0224\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCENE_USER_QUE"
    "ST_PROTOCMD\0225\n\005param\030\002 \001(\0162\017.Cmd.QuestPa"
    "ram:\025QUESTPARAM_QUESTTRACE\022\022\n\007questid\030\003 "
    "\001(\r:\0010\022\024\n\005trace\030\004 \001(\010:\005false\"|\n\013QuestDet"
    "ail\022\r\n\002id\030\001 \001(\r:\0010\022\017\n\004time\030\002 \001(\r:\0010\022\016\n\003m"
    "ap\030\003 \001(\r:\0010\022\027\n\010complete\030\004 \001(\010:\005false\022\023\n\005"
    "trace\030\005 \001(\010:\004true\022\017\n\007details\030\006 \003(\r\"\246\001\n\017Q"
    "uestDetailList\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\031SCENE_USER_QUEST_PROTOCMD\022:\n\005param\030\002 "
    "\001(\0162\017.Cmd.QuestParam:\032QUESTPARAM_QUESTDE"
    "TAILLIST\022!\n\007details\030\003 \003(\0132\020.Cmd.QuestDet"
    "ail\"\310\001\n\021QuestDetailUpdate\0224\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\031SCENE_USER_QUEST_PROTOCMD\022"
    "<\n\005param\030\002 \001(\0162\017.Cmd.QuestParam:\034QUESTPA"
    "RAM_QUESTDETAILUPDATE\022 \n\006detail\030\003 \003(\0132\020."
    "Cmd.QuestDetail\022\035\n\003del\030\004 \003(\0132\020.Cmd.Quest"
    "Detail\"\216\001\n\014QuestRaidCmd\0224\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\031SCENE_USER_QUEST_PROTOCMD\0227\n"
    "\005param\030\002 \001(\0162\017.Cmd.QuestParam:\027QUESTPARA"
    "M_QUESTRAIDCMD\022\017\n\007questid\030\003 \001(\r\"\221\001\n\030Ques"
    "tCanAcceptListChange\0224\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\031SCENE_USER_QUEST_PROTOCMD\022\?\n\005pa"
    "ram\030\002 \001(\0162\017.Cmd.QuestParam:\037QUESTPARAM_C"
    "ANACCEPTLISTCHANGED\"\223\001\n\017VisitNpcUserCmd\022"
    "4\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCENE_USER_Q"
    "UEST_PROTOCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.Quest"
    "Param:\024QUESTPARAM_VISIT_NPC\022\024\n\tnpctempid"
    "\030\003 \001(\004:\0010\"\206\001\n\tOtherData\022-\n\004data\030\001 \001(\0162\017."
    "Cmd.EOtherData:\016EOTHERDATA_MIN\022\021\n\006param1"
    "\030\002 \001(\r:\0010\022\021\n\006param2\030\003 \001(\r:\0010\022\021\n\006param3\030\004"
    " \001(\r:\0010\022\021\n\006param4\030\005 \001(\r:\0010\"\316\001\n\016QueryOthe"
    "rData\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCENE_"
    "USER_QUEST_PROTOCMD\0229\n\005param\030\002 \001(\0162\017.Cmd"
    ".QuestParam:\031QUESTPARAM_QUERYOTHERDATA\022-"
    "\n\004type\030\003 \001(\0162\017.Cmd.EOtherData:\016EOTHERDAT"
    "A_MIN\022\034\n\004data\030\004 \001(\0132\016.Cmd.OtherData\"\240\001\n\027"
    "QueryWantedInfoQuestCmd\0224\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\031SCENE_USER_QUEST_PROTOCMD\022:\n"
    "\005param\030\002 \001(\0162\017.Cmd.QuestParam:\032QUESTPARA"
    "M_QUERYWANTEDINFO\022\023\n\010maxcount\030\003 \001(\r:\0010\"\204"
    "\002\n\030InviteHelpAcceptQuestCmd\0224\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\031SCENE_USER_QUEST_PROTOCM"
    "D\022=\n\005param\030\002 \001(\0162\017.Cmd.QuestParam:\035QUEST"
    "PARAM_HELP_ACCEPT_INVITE\022\023\n\010leaderid\030\003 \001"
    "(\004:\0010\022\022\n\007questid\030\004 \001(\r:\0010\022\017\n\004time\030\005 \001(\r:"
    "\0010\022\014\n\004sign\030\006 \001(\014\022\022\n\nleadername\030\007 \001(\t\022\027\n\010"
    "issubmit\030\010 \001(\010:\005false\"\237\002\n\024InviteAcceptQu"
    "estCmd\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCENE"
    "_USER_QUEST_PROTOCMD\022>\n\005param\030\002 \001(\0162\017.Cm"
    "d.QuestParam:\036QUESTPARAM_INVITE_ACCEPT_Q"
    "UEST\022\023\n\010leaderid\030\003 \001(\004:\0010\022\022\n\007questid\030\004 \001"
    "(\r:\0010\022\017\n\004time\030\005 \001(\r:\0010\022\014\n\004sign\030\006 \001(\014\022\022\n\n"
    "leadername\030\007 \001(\t\022\027\n\010issubmit\030\010 \001(\010:\005fals"
    "e\022\034\n\risquickfinish\030\t \001(\010:\005false\"\204\002\n\027Repl"
    "yHelpAccelpQuestCmd\0224\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\031SCENE_USER_QUEST_PROTOCMD\022<\n\005par"
    "am\030\002 \001(\0162\017.Cmd.QuestParam:\034QUESTPARAM_HE"
    "LP_ACCEPT_AGREE\022\023\n\010leaderid\030\003 \001(\004:\0010\022\022\n\007"
    "questid\030\004 \001(\r:\0010\022\017\n\004time\030\005 \001(\r:\0010\022\014\n\004sig"
    "n\030\006 \001(\014\022\024\n\005agree\030\007 \001(\010:\005false\022\027\n\010issubmi"
    "t\030\010 \001(\010:\005false\"o\n\nWorldQuest\022\020\n\005mapid\030\001 "
    "\001(\r:\0010\022\030\n\ttype_main\030\002 \001(\010:\005false\022\032\n\013type"
    "_branch\030\003 \001(\010:\005false\022\031\n\ntype_daily\030\004 \001(\010"
    ":\005false\"\251\001\n\022QueryWorldQuestCmd\0224\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\031SCENE_USER_QUEST_PROT"
    "OCMD\022<\n\005param\030\002 \001(\0162\017.Cmd.QuestParam:\034QU"
    "ESTPARAM_QUERY_WORLD_QUEST\022\037\n\006quests\030\003 \003"
    "(\0132\017.Cmd.WorldQuest\"\261\001\n\027QuestGroupTraceQ"
    "uestCmd\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCEN"
    "E_USER_QUEST_PROTOCMD\022;\n\005param\030\002 \001(\0162\017.C"
    "md.QuestParam:\033QUESTPARAM_QUESTGROUP_TRA"
    "CE\022\r\n\002id\030\003 \001(\r:\0010\022\024\n\005trace\030\004 \001(\010:\005false\""
    "\300\001\n\034HelpQuickFinishBoardQuestCmd\0224\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\031SCENE_USER_QUEST_PR"
    "OTOCMD\022B\n\005param\030\002 \001(\0162\017.Cmd.QuestParam:\""
    "QUESTPARAM_HELP_QUICK_FINISH_BOARD\022\022\n\007qu"
    "estid\030\003 \001(\r:\0010\022\022\n\nleadername\030\004 \001(\t\"\267\001\n\023Q"
    "ueryManualQuestCmd\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\031SCENE_USER_QUEST_PROTOCMD\0227\n\005para"
    "m\030\002 \001(\0162\017.Cmd.QuestParam:\027QUESTPARAM_QUE"
    "RY_MANUAL\022\017\n\007version\030\003 \001(\t\022 \n\006manual\030\004 \001"
    "(\0132\020.Cmd.QuestManual\"\242\001\n\022OpenPuzzleQuest"
    "Cmd\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCENE_US"
    "ER_QUEST_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.Q"
    "uestParam:\026QUESTPARAM_OPEN_PUZZLE\022\017\n\007ver"
    "sion\030\003 \001(\t\022\r\n\002id\030\004 \001(\r:\0010*\240\005\n\nQuestParam"
    "\022\030\n\024QUESTPARAM_QUESTLIST\020\001\022\032\n\026QUESTPARAM"
    "_QUESTUPDATE\020\002\022\032\n\026QUESTPARAM_QUESTACTION"
    "\020\003\022\033\n\027QUESTPARAM_RUNQUESTSTEP\020\004\022\036\n\032QUEST"
    "PARAM_QUESTSTEPUPDATE\020\005\022\031\n\025QUESTPARAM_QU"
    "ESTTRACE\020\006\022\036\n\032QUESTPARAM_QUESTDETAILLIST"
    "\020\007\022 \n\034QUESTPARAM_QUESTDETAILUPDATE\020\010\022\033\n\027"
    "QUESTPARAM_QUESTRAIDCMD\020\t\022#\n\037QUESTPARAM_"
    "CANACCEPTLISTCHANGED\020\n\022\030\n\024QUESTPARAM_VIS"
    "IT_NPC\020\013\022\035\n\031QUESTPARAM_QUERYOTHERDATA\020\014\022"
    "\036\n\032QUESTPARAM_QUERYWANTEDINFO\020\r\022!\n\035QUEST"
    "PARAM_HELP_ACCEPT_INVITE\020\016\022 \n\034QUESTPARAM"
    "_HELP_ACCEPT_AGREE\020\017\022\"\n\036QUESTPARAM_INVIT"
    "E_ACCEPT_QUEST\020\020\022 \n\034QUESTPARAM_QUERY_WOR"
    "LD_QUEST\020\021\022\037\n\033QUESTPARAM_QUESTGROUP_TRAC"
    "E\020\022\022&\n\"QUESTPARAM_HELP_QUICK_FINISH_BOAR"
    "D\020\023\022\033\n\027QUESTPARAM_QUERY_MANUAL\020\025\022\032\n\026QUES"
    "TPARAM_OPEN_PUZZLE\020\026*Q\n\013EWantedType\022\025\n\021E"
    "WANTEDTYPE_TOTAL\020\000\022\026\n\022EWANTEDTYPE_ACTIVE"
    "\020\001\022\023\n\017EWANTEDTYPE_MAX\020\002*\313\010\n\nEQuestType\022\022"
    "\n\016EQUESTTYPE_MIN\020\000\022\023\n\017EQUESTTYPE_MAIN\020\001\022"
    "\025\n\021EQUESTTYPE_BRANCH\020\002\022\023\n\017EQUESTTYPE_TAL"
    "K\020\003\022\026\n\022EQUESTTYPE_TRIGGER\020\004\022\025\n\021EQUESTTYP"
    "E_WANTED\020\005\022\024\n\020EQUESTTYPE_DAILY\020\006\022\026\n\022EQUE"
    "STTYPE_DAILY_1\020\007\022\026\n\022EQUESTTYPE_DAILY_3\020\010"
    "\022\026\n\022EQUESTTYPE_DAILY_7\020\t\022\024\n\020EQUESTTYPE_S"
    "TORY\020\n\022\030\n\024EQUESTTYPE_DAILY_MAP\020\013\022\024\n\020EQUE"
    "STTYPE_SCENE\020\014\022\023\n\017EQUESTTYPE_HEAD\020\r\022\027\n\023E"
    "QUESTTYPE_RAIDTALK\020\016\022\033\n\027EQUESTTYPE_SATIS"
    "FACTION\020\017\022\024\n\020EQUESTTYPE_ELITE\020\020\022\031\n\025EQUES"
    "TTYPE_CCRASTEHAM\020\021\022\037\n\033EQUESTTYPE_STORY_C"
    "CRASTEHAM\020\022\022\024\n\020EQUESTTYPE_GUILD\020\023\022\024\n\020EQU"
    "ESTTYPE_CHILD\020\024\022\032\n\026EQUESTTYPE_DAILY_RESE"
    "T\020\025\022\022\n\016EQUESTTYPE_ACC\020\026\022\031\n\025EQUESTTYPE_AC"
    "C_NORMAL\020\027\022\030\n\024EQUESTTYPE_ACC_DAILY\020\030\022\031\n\025"
    "EQUESTTYPE_ACC_CHOICE\020\031\022\034\n\030EQUESTTYPE_DA"
    "ILY_MAPRAND\020\032\022\027\n\023EQUESTTYPE_ACC_MAIN\020\033\022\031"
    "\n\025EQUESTTYPE_ACC_BRANCH\020\034\022\037\n\033EQUESTTYPE_"
    "ACC_SATISFACTION\020\035\022\032\n\026EQUESTTYPE_ACC_DAI"
    "LY_1\020\036\022\032\n\026EQUESTTYPE_ACC_DAILY_3\020\037\022\032\n\026EQ"
    "UESTTYPE_ACC_DAILY_7\020 \022\036\n\032EQUESTTYPE_ACC"
    "_DAILY_RESET\020!\022\030\n\024EQUESTTYPE_DAILY_BOX\020\""
    "\022\023\n\017EQUESTTYPE_SIGN\020#\022\022\n\016EQUESTTYPE_DAY\020"
    "$\022\024\n\020EQUESTTYPE_NIGHT\020%\022\027\n\023EQUESTTYPE_AR"
    "TIFACT\020&\022\026\n\022EQUESTTYPE_WEDDING\020\'\022\034\n\030EQUE"
    "STTYPE_WEDDING_DAILY\020(\022\024\n\020EQUESTTYPE_CAP"
    "RA\020)\022\023\n\017EQUESTTYPE_DEAD\020*\022\022\n\016EQUESTTYPE_"
    "MAX\020+*\333\020\n\nEQuestStep\022\022\n\016EQUESTSTEP_MIN\020\000"
    "\022\024\n\020EQUESTSTEP_VISIT\020\001\022\023\n\017EQUESTSTEP_KIL"
    "L\020\002\022\025\n\021EQUESTSTEP_REWARD\020\003\022\026\n\022EQUESTSTEP"
    "_COLLECT\020\004\022\025\n\021EQUESTSTEP_SUMMON\020\005\022\024\n\020EQU"
    "ESTSTEP_GUARD\020\006\022\024\n\020EQUESTSTEP_GMCMD\020\007\022\027\n"
    "\023EQUESTSTEP_TESTFAIL\020\010\022\022\n\016EQUESTSTEP_USE"
    "\020\t\022\025\n\021EQUESTSTEP_GATHER\020\n\022\025\n\021EQUESTSTEP_"
    "DELETE\020\013\022\023\n\017EQUESTSTEP_RAID\020\014\022\025\n\021EQUESTS"
    "TEP_CAMERA\020\r\022\024\n\020EQUESTSTEP_LEVEL\020\016\022\023\n\017EQ"
    "UESTSTEP_WAIT\020\017\022\023\n\017EQUESTSTEP_MOVE\020\020\022\025\n\021"
    "EQUESTSTEP_DIALOG\020\021\022\027\n\023EQUESTSTEP_PREQUE"
    "ST\020\022\022\027\n\023EQUESTSTEP_CLEARNPC\020\023\022\030\n\024EQUESTS"
    "TEP_MOUNTRIDE\020\024\022\025\n\021EQUESTSTEP_SELFIE\020\025\022\030"
    "\n\024EQUESTSTEP_CHECKTEAM\020\026\022\032\n\026EQUESTSTEP_R"
    "EMOVEMONEY\020\027\022\024\n\020EQUESTSTEP_CLASS\020\030\022\027\n\023EQ"
    "UESTSTEP_ORGCLASS\020\031\022\022\n\016EQUESTSTEP_EVO\020\032\022"
    "\031\n\025EQUESTSTEP_CHECKQUEST\020\033\022\030\n\024EQUESTSTEP"
    "_CHECKITEM\020\034\022\031\n\025EQUESTSTEP_REMOVEITEM\020\035\022"
    "\031\n\025EQUESTSTEP_RANDOMJUMP\020\036\022\031\n\025EQUESTSTEP"
    "_CHECKLEVEL\020\037\022\030\n\024EQUESTSTEP_CHECKGEAR\020 \022"
    "\025\n\021EQUESTSTEP_PURIFY\020!\022\025\n\021EQUESTSTEP_ACT"
    "ION\020\"\022\024\n\020EQUESTSTEP_SKILL\020#\022\034\n\030EQUESTSTE"
    "P_INTERLOCUTION\020$\022\024\n\020EQUESTSTEP_EMPTY\020%\022"
    "\033\n\027EQUESTSTEP_CHECKEQUIPLV\020&\022\031\n\025EQUESTST"
    "EP_CHECKMONEY\020\'\022\024\n\020EQUESTSTEP_GUIDE\020(\022\032\n"
    "\026EQUESTSTEP_GUIDE_CHECK\020)\022\036\n\032EQUESTSTEP_"
    "GUIDE_HIGHLIGHT\020*\022\032\n\026EQUESTSTEP_CHECKOPT"
    "ION\020+\022\023\n\017EQUESTSTEP_HINT\020,\022\031\n\025EQUESTSTEP"
    "_CHECKGROUP\020-\022\023\n\017EQUESTSTEP_SEAL\020.\022\026\n\022EQ"
    "UESTSTEP_EQUIPLV\020/\022\024\n\020EQUESTSTEP_VIDEO\0200"
    "\022\033\n\027EQUESTSTEP_ILLUSTRATION\0201\022\026\n\022EQUESTS"
    "TEP_NPCPLAY\0202\022\023\n\017EQUESTSTEP_ITEM\0203\022\024\n\020EQ"
    "UESTSTEP_DAILY\0204\022\033\n\027EQUESTSTEP_CHECK_MAN"
    "UAL\0205\022\025\n\021EQUESTSTEP_MANUAL\0206\022\031\n\025EQUESTST"
    "EP_PLAY_MUSIC\0207\022\031\n\025EQUESTSTEP_REWRADHELP"
    "\0208\022\037\n\033EQUESTSTEP_GUIDELOCKMONSTER\0209\022\024\n\020E"
    "QUESTSTEP_MONEY\020:\022\027\n\023EQUESTSTEP_ACTIVITY"
    "\020;\022\025\n\021EQUESTSTEP_OPTION\020<\022\024\n\020EQUESTSTEP_"
    "PHOTO\020=\022\026\n\022EQUESTSTEP_ITEMUSE\020>\022\023\n\017EQUES"
    "TSTEP_HAND\020\?\022\024\n\020EQUESTSTEP_MUSIC\020@\022\027\n\023EQ"
    "UESTSTEP_RANDITEM\020A\022\026\n\022EQUESTSTEP_CARRIE"
    "R\020B\022\025\n\021EQUESTSTEP_BATTLE\020C\022\027\n\023EQUESTSTEP"
    "_COOKFOOD\020D\022\022\n\016EQUESTSTEP_PET\020E\022\024\n\020EQUES"
    "TSTEP_SCENE\020F\022\023\n\017EQUESTSTEP_COOK\020G\022\023\n\017EQ"
    "UESTSTEP_BUFF\020H\022\024\n\020EQUESTSTEP_TUTOR\020I\022\030\n"
    "\024EQUESTSTEP_CHRISTMAS\020J\022\034\n\030EQUESTSTEP_CH"
    "RISTMAS_RUN\020K\022\024\n\020EQUESTSTEP_BEING\020L\022\030\n\024E"
    "QUESTSTEP_CHECK_JOY\020M\022\026\n\022EQUESTSTEP_ADD_"
    "JOY\020N\022\032\n\026EQUESTSTEP_RAND_DIALOG\020O\022\021\n\rEQU"
    "ESTSTEP_CG\020P\022\033\n\027EQUESTSTEP_CHECKSERVANT\020"
    "Q\022\031\n\025EQUESTSTEP_CLIENTPLOT\020T\022\023\n\017EQUESTST"
    "EP_CHAT\020U\022\027\n\023EQUESTSTEP_TRANSFER\020V\022\027\n\023EQ"
    "UESTSTEP_REDIALOG\020W\022\032\n\026EQUESTSTEP_CHAT_S"
    "YSTEM\020X\022\022\n\016EQUESTSTEP_MAX\020Y*m\n\nEQuestLis"
    "t\022\025\n\021EQUESTLIST_ACCEPT\020\001\022\025\n\021EQUESTLIST_S"
    "UBMIT\020\002\022\027\n\023EQUESTLIST_COMPLETE\020\003\022\030\n\024EQUE"
    "STLIST_CANACCEPT\020\004*\373\001\n\014EQuestAction\022\024\n\020E"
    "QUESTACTION_MIN\020\000\022\027\n\023EQUESTACTION_ACCEPT"
    "\020\001\022\027\n\023EQUESTACTION_SUBMIT\020\002\022\036\n\032EQUESTACT"
    "ION_ABANDON_GROUP\020\003\022\036\n\032EQUESTACTION_ABAN"
    "DON_QUEST\020\004\022#\n\037EQUESTACTION_QUICK_SUBMIT"
    "_BOARD\020\005\022(\n$EQUESTACTION_QUICK_SUBMIT_BO"
    "ARD_TEAM\020\006\022\024\n\020EQUESTACTION_MAX\020\007*^\n\nEOth"
    "erData\022\022\n\016EOTHERDATA_MIN\020\000\022\024\n\020EOTHERDATA"
    "_DAILY\020\001\022\022\n\016EOTHERDATA_CAT\020\002\022\022\n\016EOTHERDA"
    "TA_MAX\020\003*\351\001\n\020EJoyActivityType\022\024\n\020JOY_ACT"
    "IVITY_MIN\020\000\022\026\n\022JOY_ACTIVITY_GUESS\020\001\022\031\n\025J"
    "OY_ACTIVITY_MISCHIEF\020\002\022\031\n\025JOY_ACTIVITY_Q"
    "UESTION\020\003\022\025\n\021JOY_ACTIVITY_FOOD\020\004\022\025\n\021JOY_"
    "ACTIVITY_YOYO\020\005\022\024\n\020JOY_ACTIVITY_ATF\020\006\022\027\n"
    "\023JOY_ACTIVITY_AUGURY\020\007\022\024\n\020JOY_ACTIVITY_M"
    "AX\020\010", 11004);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneQuest.proto", &protobuf_RegisterTypes);
  QuestPConfig::default_instance_ = new QuestPConfig();
  QuestStep::default_instance_ = new QuestStep();
  QuestData::default_instance_ = new QuestData();
  QuestManualItem::default_instance_ = new QuestManualItem();
  QuestShop::default_instance_ = new QuestShop();
  QuestName::default_instance_ = new QuestName();
  QuestPuzzle::default_instance_ = new QuestPuzzle();
  QuestPreview::default_instance_ = new QuestPreview();
  QuestManualMain::default_instance_ = new QuestManualMain();
  QuestManualBranch::default_instance_ = new QuestManualBranch();
  QuestManualStory::default_instance_ = new QuestManualStory();
  QuestManual::default_instance_ = new QuestManual();
  QuestList::default_instance_ = new QuestList();
  QuestUpdateItem::default_instance_ = new QuestUpdateItem();
  QuestUpdate::default_instance_ = new QuestUpdate();
  QuestStepUpdate::default_instance_ = new QuestStepUpdate();
  QuestAction::default_instance_ = new QuestAction();
  RunQuestStep::default_instance_ = new RunQuestStep();
  QuestTrace::default_instance_ = new QuestTrace();
  QuestDetail::default_instance_ = new QuestDetail();
  QuestDetailList::default_instance_ = new QuestDetailList();
  QuestDetailUpdate::default_instance_ = new QuestDetailUpdate();
  QuestRaidCmd::default_instance_ = new QuestRaidCmd();
  QuestCanAcceptListChange::default_instance_ = new QuestCanAcceptListChange();
  VisitNpcUserCmd::default_instance_ = new VisitNpcUserCmd();
  OtherData::default_instance_ = new OtherData();
  QueryOtherData::default_instance_ = new QueryOtherData();
  QueryWantedInfoQuestCmd::default_instance_ = new QueryWantedInfoQuestCmd();
  InviteHelpAcceptQuestCmd::default_instance_ = new InviteHelpAcceptQuestCmd();
  InviteAcceptQuestCmd::default_instance_ = new InviteAcceptQuestCmd();
  ReplyHelpAccelpQuestCmd::default_instance_ = new ReplyHelpAccelpQuestCmd();
  WorldQuest::default_instance_ = new WorldQuest();
  QueryWorldQuestCmd::default_instance_ = new QueryWorldQuestCmd();
  QuestGroupTraceQuestCmd::default_instance_ = new QuestGroupTraceQuestCmd();
  HelpQuickFinishBoardQuestCmd::default_instance_ = new HelpQuickFinishBoardQuestCmd();
  QueryManualQuestCmd::default_instance_ = new QueryManualQuestCmd();
  OpenPuzzleQuestCmd::default_instance_ = new OpenPuzzleQuestCmd();
  QuestPConfig::default_instance_->InitAsDefaultInstance();
  QuestStep::default_instance_->InitAsDefaultInstance();
  QuestData::default_instance_->InitAsDefaultInstance();
  QuestManualItem::default_instance_->InitAsDefaultInstance();
  QuestShop::default_instance_->InitAsDefaultInstance();
  QuestName::default_instance_->InitAsDefaultInstance();
  QuestPuzzle::default_instance_->InitAsDefaultInstance();
  QuestPreview::default_instance_->InitAsDefaultInstance();
  QuestManualMain::default_instance_->InitAsDefaultInstance();
  QuestManualBranch::default_instance_->InitAsDefaultInstance();
  QuestManualStory::default_instance_->InitAsDefaultInstance();
  QuestManual::default_instance_->InitAsDefaultInstance();
  QuestList::default_instance_->InitAsDefaultInstance();
  QuestUpdateItem::default_instance_->InitAsDefaultInstance();
  QuestUpdate::default_instance_->InitAsDefaultInstance();
  QuestStepUpdate::default_instance_->InitAsDefaultInstance();
  QuestAction::default_instance_->InitAsDefaultInstance();
  RunQuestStep::default_instance_->InitAsDefaultInstance();
  QuestTrace::default_instance_->InitAsDefaultInstance();
  QuestDetail::default_instance_->InitAsDefaultInstance();
  QuestDetailList::default_instance_->InitAsDefaultInstance();
  QuestDetailUpdate::default_instance_->InitAsDefaultInstance();
  QuestRaidCmd::default_instance_->InitAsDefaultInstance();
  QuestCanAcceptListChange::default_instance_->InitAsDefaultInstance();
  VisitNpcUserCmd::default_instance_->InitAsDefaultInstance();
  OtherData::default_instance_->InitAsDefaultInstance();
  QueryOtherData::default_instance_->InitAsDefaultInstance();
  QueryWantedInfoQuestCmd::default_instance_->InitAsDefaultInstance();
  InviteHelpAcceptQuestCmd::default_instance_->InitAsDefaultInstance();
  InviteAcceptQuestCmd::default_instance_->InitAsDefaultInstance();
  ReplyHelpAccelpQuestCmd::default_instance_->InitAsDefaultInstance();
  WorldQuest::default_instance_->InitAsDefaultInstance();
  QueryWorldQuestCmd::default_instance_->InitAsDefaultInstance();
  QuestGroupTraceQuestCmd::default_instance_->InitAsDefaultInstance();
  HelpQuickFinishBoardQuestCmd::default_instance_->InitAsDefaultInstance();
  QueryManualQuestCmd::default_instance_->InitAsDefaultInstance();
  OpenPuzzleQuestCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneQuest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneQuest_2eproto {
  StaticDescriptorInitializer_SceneQuest_2eproto() {
    protobuf_AddDesc_SceneQuest_2eproto();
  }
} static_descriptor_initializer_SceneQuest_2eproto_;
const ::google::protobuf::EnumDescriptor* QuestParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestParam_descriptor_;
}
bool QuestParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EWantedType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWantedType_descriptor_;
}
bool EWantedType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQuestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuestType_descriptor_;
}
bool EQuestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQuestStep_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuestStep_descriptor_;
}
bool EQuestStep_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQuestList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuestList_descriptor_;
}
bool EQuestList_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQuestAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuestAction_descriptor_;
}
bool EQuestAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EOtherData_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EOtherData_descriptor_;
}
bool EOtherData_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EJoyActivityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EJoyActivityType_descriptor_;
}
bool EJoyActivityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int QuestPConfig::kRewardGroupFieldNumber;
const int QuestPConfig::kSubGroupFieldNumber;
const int QuestPConfig::kFinishJumpFieldNumber;
const int QuestPConfig::kFailJumpFieldNumber;
const int QuestPConfig::kMapFieldNumber;
const int QuestPConfig::kWhetherTraceFieldNumber;
const int QuestPConfig::kAutoFieldNumber;
const int QuestPConfig::kFirstClassFieldNumber;
const int QuestPConfig::kClassFieldNumber;
const int QuestPConfig::kLevelFieldNumber;
const int QuestPConfig::kQuestNameFieldNumber;
const int QuestPConfig::kNameFieldNumber;
const int QuestPConfig::kTypeFieldNumber;
const int QuestPConfig::kContentFieldNumber;
const int QuestPConfig::kTraceInfoFieldNumber;
const int QuestPConfig::kPrefixionFieldNumber;
const int QuestPConfig::kParamsFieldNumber;
const int QuestPConfig::kAllrewardidFieldNumber;
const int QuestPConfig::kPreQuestFieldNumber;
const int QuestPConfig::kMustPreQuestFieldNumber;
#endif  // !_MSC_VER

QuestPConfig::QuestPConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestPConfig)
}

void QuestPConfig::InitAsDefaultInstance() {
  params_ = const_cast< ::Cmd::ConfigParam*>(&::Cmd::ConfigParam::default_instance());
}

QuestPConfig::QuestPConfig(const QuestPConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestPConfig)
}

void QuestPConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rewardgroup_ = 0u;
  subgroup_ = 0u;
  finishjump_ = 0u;
  failjump_ = 0u;
  map_ = 0u;
  whethertrace_ = 0u;
  auto__ = 0u;
  firstclass_ = 0u;
  class__ = 0u;
  level_ = 0u;
  questname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefixion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestPConfig::~QuestPConfig() {
  // @@protoc_insertion_point(destructor:Cmd.QuestPConfig)
  SharedDtor();
}

void QuestPConfig::SharedDtor() {
  if (questname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete questname_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (traceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete traceinfo_;
  }
  if (prefixion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prefixion_;
  }
  if (this != default_instance_) {
    delete params_;
  }
}

void QuestPConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestPConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestPConfig_descriptor_;
}

const QuestPConfig& QuestPConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestPConfig* QuestPConfig::default_instance_ = NULL;

QuestPConfig* QuestPConfig::New() const {
  return new QuestPConfig;
}

void QuestPConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestPConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(rewardgroup_, firstclass_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(class__, level_);
    if (has_questname()) {
      if (questname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        questname_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_traceinfo()) {
      if (traceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        traceinfo_->clear();
      }
    }
    if (has_prefixion()) {
      if (prefixion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        prefixion_->clear();
      }
    }
  }
  if (has_params()) {
    if (params_ != NULL) params_->::Cmd::ConfigParam::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  allrewardid_.Clear();
  prequest_.Clear();
  mustprequest_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestPConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestPConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RewardGroup = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardgroup_)));
          set_has_rewardgroup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SubGroup;
        break;
      }

      // optional uint32 SubGroup = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_SubGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subgroup_)));
          set_has_subgroup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FinishJump;
        break;
      }

      // optional uint32 FinishJump = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_FinishJump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishjump_)));
          set_has_finishjump();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_FailJump;
        break;
      }

      // optional uint32 FailJump = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_FailJump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &failjump_)));
          set_has_failjump();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Map;
        break;
      }

      // optional uint32 Map = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_Map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_)));
          set_has_map();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_WhetherTrace;
        break;
      }

      // optional uint32 WhetherTrace = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_WhetherTrace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &whethertrace_)));
          set_has_whethertrace();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Auto;
        break;
      }

      // optional uint32 Auto = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_Auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto__)));
          set_has_auto_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_FirstClass;
        break;
      }

      // optional uint32 FirstClass = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_FirstClass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstclass_)));
          set_has_firstclass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Class;
        break;
      }

      // optional uint32 Class = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_Class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class__)));
          set_has_class_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_QuestName;
        break;
      }

      // optional string QuestName = 11;
      case 11: {
        if (tag == 90) {
         parse_QuestName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_questname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->questname().data(), this->questname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "questname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_Name;
        break;
      }

      // optional string Name = 12;
      case 12: {
        if (tag == 98) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Type;
        break;
      }

      // optional string Type = 13;
      case 13: {
        if (tag == 106) {
         parse_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_Content;
        break;
      }

      // optional string Content = 14;
      case 14: {
        if (tag == 114) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_TraceInfo;
        break;
      }

      // optional string TraceInfo = 15;
      case 15: {
        if (tag == 122) {
         parse_TraceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traceinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->traceinfo().data(), this->traceinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "traceinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_params;
        break;
      }

      // optional .Cmd.ConfigParam params = 16;
      case 16: {
        if (tag == 130) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_allrewardid;
        break;
      }

      // repeated uint32 allrewardid = 17;
      case 17: {
        if (tag == 136) {
         parse_allrewardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_allrewardid())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_allrewardid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_allrewardid;
        if (input->ExpectTag(144)) goto parse_PreQuest;
        break;
      }

      // repeated uint32 PreQuest = 18;
      case 18: {
        if (tag == 144) {
         parse_PreQuest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_prequest())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_prequest())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_PreQuest;
        if (input->ExpectTag(152)) goto parse_MustPreQuest;
        break;
      }

      // repeated uint32 MustPreQuest = 19;
      case 19: {
        if (tag == 152) {
         parse_MustPreQuest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152, input, this->mutable_mustprequest())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mustprequest())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_MustPreQuest;
        if (input->ExpectTag(162)) goto parse_Prefixion;
        break;
      }

      // optional string Prefixion = 20;
      case 20: {
        if (tag == 162) {
         parse_Prefixion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefixion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefixion().data(), this->prefixion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "prefixion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestPConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestPConfig)
  return false;
#undef DO_
}

void QuestPConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestPConfig)
  // optional uint32 RewardGroup = 1 [default = 0];
  if (has_rewardgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardgroup(), output);
  }

  // optional uint32 SubGroup = 2 [default = 0];
  if (has_subgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->subgroup(), output);
  }

  // optional uint32 FinishJump = 3 [default = 0];
  if (has_finishjump()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finishjump(), output);
  }

  // optional uint32 FailJump = 4 [default = 0];
  if (has_failjump()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->failjump(), output);
  }

  // optional uint32 Map = 5 [default = 0];
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->map(), output);
  }

  // optional uint32 WhetherTrace = 6 [default = 0];
  if (has_whethertrace()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->whethertrace(), output);
  }

  // optional uint32 Auto = 7 [default = 0];
  if (has_auto_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->auto_(), output);
  }

  // optional uint32 FirstClass = 8 [default = 0];
  if (has_firstclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->firstclass(), output);
  }

  // optional uint32 Class = 9 [default = 0];
  if (has_class_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->class_(), output);
  }

  // optional uint32 Level = 10 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->level(), output);
  }

  // optional string QuestName = 11;
  if (has_questname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->questname().data(), this->questname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "questname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->questname(), output);
  }

  // optional string Name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->name(), output);
  }

  // optional string Type = 13;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->type(), output);
  }

  // optional string Content = 14;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->content(), output);
  }

  // optional string TraceInfo = 15;
  if (has_traceinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->traceinfo().data(), this->traceinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "traceinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->traceinfo(), output);
  }

  // optional .Cmd.ConfigParam params = 16;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->params(), output);
  }

  // repeated uint32 allrewardid = 17;
  for (int i = 0; i < this->allrewardid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->allrewardid(i), output);
  }

  // repeated uint32 PreQuest = 18;
  for (int i = 0; i < this->prequest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->prequest(i), output);
  }

  // repeated uint32 MustPreQuest = 19;
  for (int i = 0; i < this->mustprequest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->mustprequest(i), output);
  }

  // optional string Prefixion = 20;
  if (has_prefixion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefixion().data(), this->prefixion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefixion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->prefixion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestPConfig)
}

::google::protobuf::uint8* QuestPConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestPConfig)
  // optional uint32 RewardGroup = 1 [default = 0];
  if (has_rewardgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardgroup(), target);
  }

  // optional uint32 SubGroup = 2 [default = 0];
  if (has_subgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->subgroup(), target);
  }

  // optional uint32 FinishJump = 3 [default = 0];
  if (has_finishjump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finishjump(), target);
  }

  // optional uint32 FailJump = 4 [default = 0];
  if (has_failjump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->failjump(), target);
  }

  // optional uint32 Map = 5 [default = 0];
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->map(), target);
  }

  // optional uint32 WhetherTrace = 6 [default = 0];
  if (has_whethertrace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->whethertrace(), target);
  }

  // optional uint32 Auto = 7 [default = 0];
  if (has_auto_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->auto_(), target);
  }

  // optional uint32 FirstClass = 8 [default = 0];
  if (has_firstclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->firstclass(), target);
  }

  // optional uint32 Class = 9 [default = 0];
  if (has_class_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->class_(), target);
  }

  // optional uint32 Level = 10 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->level(), target);
  }

  // optional string QuestName = 11;
  if (has_questname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->questname().data(), this->questname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "questname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->questname(), target);
  }

  // optional string Name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }

  // optional string Type = 13;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->type(), target);
  }

  // optional string Content = 14;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->content(), target);
  }

  // optional string TraceInfo = 15;
  if (has_traceinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->traceinfo().data(), this->traceinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "traceinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->traceinfo(), target);
  }

  // optional .Cmd.ConfigParam params = 16;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->params(), target);
  }

  // repeated uint32 allrewardid = 17;
  for (int i = 0; i < this->allrewardid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->allrewardid(i), target);
  }

  // repeated uint32 PreQuest = 18;
  for (int i = 0; i < this->prequest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->prequest(i), target);
  }

  // repeated uint32 MustPreQuest = 19;
  for (int i = 0; i < this->mustprequest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(19, this->mustprequest(i), target);
  }

  // optional string Prefixion = 20;
  if (has_prefixion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefixion().data(), this->prefixion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefixion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->prefixion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestPConfig)
  return target;
}

int QuestPConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RewardGroup = 1 [default = 0];
    if (has_rewardgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardgroup());
    }

    // optional uint32 SubGroup = 2 [default = 0];
    if (has_subgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subgroup());
    }

    // optional uint32 FinishJump = 3 [default = 0];
    if (has_finishjump()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishjump());
    }

    // optional uint32 FailJump = 4 [default = 0];
    if (has_failjump()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->failjump());
    }

    // optional uint32 Map = 5 [default = 0];
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map());
    }

    // optional uint32 WhetherTrace = 6 [default = 0];
    if (has_whethertrace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->whethertrace());
    }

    // optional uint32 Auto = 7 [default = 0];
    if (has_auto_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_());
    }

    // optional uint32 FirstClass = 8 [default = 0];
    if (has_firstclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstclass());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Class = 9 [default = 0];
    if (has_class_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_());
    }

    // optional uint32 Level = 10 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional string QuestName = 11;
    if (has_questname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->questname());
    }

    // optional string Name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Type = 13;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string Content = 14;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string TraceInfo = 15;
    if (has_traceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->traceinfo());
    }

    // optional string Prefixion = 20;
    if (has_prefixion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefixion());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Cmd.ConfigParam params = 16;
    if (has_params()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  // repeated uint32 allrewardid = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->allrewardid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->allrewardid(i));
    }
    total_size += 2 * this->allrewardid_size() + data_size;
  }

  // repeated uint32 PreQuest = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->prequest_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->prequest(i));
    }
    total_size += 2 * this->prequest_size() + data_size;
  }

  // repeated uint32 MustPreQuest = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->mustprequest_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mustprequest(i));
    }
    total_size += 2 * this->mustprequest_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestPConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestPConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestPConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestPConfig::MergeFrom(const QuestPConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  allrewardid_.MergeFrom(from.allrewardid_);
  prequest_.MergeFrom(from.prequest_);
  mustprequest_.MergeFrom(from.mustprequest_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardgroup()) {
      set_rewardgroup(from.rewardgroup());
    }
    if (from.has_subgroup()) {
      set_subgroup(from.subgroup());
    }
    if (from.has_finishjump()) {
      set_finishjump(from.finishjump());
    }
    if (from.has_failjump()) {
      set_failjump(from.failjump());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
    if (from.has_whethertrace()) {
      set_whethertrace(from.whethertrace());
    }
    if (from.has_auto_()) {
      set_auto_(from.auto_());
    }
    if (from.has_firstclass()) {
      set_firstclass(from.firstclass());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_class_()) {
      set_class_(from.class_());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_questname()) {
      set_questname(from.questname());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_traceinfo()) {
      set_traceinfo(from.traceinfo());
    }
    if (from.has_prefixion()) {
      set_prefixion(from.prefixion());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_params()) {
      mutable_params()->::Cmd::ConfigParam::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestPConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestPConfig::CopyFrom(const QuestPConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestPConfig::IsInitialized() const {

  return true;
}

void QuestPConfig::Swap(QuestPConfig* other) {
  if (other != this) {
    std::swap(rewardgroup_, other->rewardgroup_);
    std::swap(subgroup_, other->subgroup_);
    std::swap(finishjump_, other->finishjump_);
    std::swap(failjump_, other->failjump_);
    std::swap(map_, other->map_);
    std::swap(whethertrace_, other->whethertrace_);
    std::swap(auto__, other->auto__);
    std::swap(firstclass_, other->firstclass_);
    std::swap(class__, other->class__);
    std::swap(level_, other->level_);
    std::swap(questname_, other->questname_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(traceinfo_, other->traceinfo_);
    std::swap(prefixion_, other->prefixion_);
    std::swap(params_, other->params_);
    allrewardid_.Swap(&other->allrewardid_);
    prequest_.Swap(&other->prequest_);
    mustprequest_.Swap(&other->mustprequest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestPConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestPConfig_descriptor_;
  metadata.reflection = QuestPConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestStep::kProcessFieldNumber;
const int QuestStep::kParamsFieldNumber;
const int QuestStep::kNamesFieldNumber;
const int QuestStep::kConfigFieldNumber;
#endif  // !_MSC_VER

QuestStep::QuestStep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestStep)
}

void QuestStep::InitAsDefaultInstance() {
  config_ = const_cast< ::Cmd::QuestPConfig*>(&::Cmd::QuestPConfig::default_instance());
}

QuestStep::QuestStep(const QuestStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestStep)
}

void QuestStep::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  process_ = 0u;
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestStep::~QuestStep() {
  // @@protoc_insertion_point(destructor:Cmd.QuestStep)
  SharedDtor();
}

void QuestStep::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
  }
}

void QuestStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestStep_descriptor_;
}

const QuestStep& QuestStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestStep* QuestStep::default_instance_ = NULL;

QuestStep* QuestStep::New() const {
  return new QuestStep;
}

void QuestStep::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    process_ = 0u;
    if (has_config()) {
      if (config_ != NULL) config_->::Cmd::QuestPConfig::Clear();
    }
  }
  params_.Clear();
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 process = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_params;
        break;
      }

      // repeated uint64 params = 2;
      case 2: {
        if (tag == 16) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_params())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_params())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_params;
        if (input->ExpectTag(26)) goto parse_names;
        break;
      }

      // repeated string names = 3;
      case 3: {
        if (tag == 26) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_names;
        if (input->ExpectTag(34)) goto parse_config;
        break;
      }

      // optional .Cmd.QuestPConfig config = 4;
      case 4: {
        if (tag == 34) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestStep)
  return false;
#undef DO_
}

void QuestStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestStep)
  // optional uint32 process = 1 [default = 0];
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->process(), output);
  }

  // repeated uint64 params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->params(i), output);
  }

  // repeated string names = 3;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->names(i), output);
  }

  // optional .Cmd.QuestPConfig config = 4;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestStep)
}

::google::protobuf::uint8* QuestStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestStep)
  // optional uint32 process = 1 [default = 0];
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->process(), target);
  }

  // repeated uint64 params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->params(i), target);
  }

  // repeated string names = 3;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->names(i), target);
  }

  // optional .Cmd.QuestPConfig config = 4;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestStep)
  return target;
}

int QuestStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 process = 1 [default = 0];
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process());
    }

    // optional .Cmd.QuestPConfig config = 4;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

  }
  // repeated uint64 params = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }

  // repeated string names = 3;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestStep::MergeFrom(const QuestStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_process()) {
      set_process(from.process());
    }
    if (from.has_config()) {
      mutable_config()->::Cmd::QuestPConfig::MergeFrom(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestStep::CopyFrom(const QuestStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestStep::IsInitialized() const {

  return true;
}

void QuestStep::Swap(QuestStep* other) {
  if (other != this) {
    std::swap(process_, other->process_);
    params_.Swap(&other->params_);
    names_.Swap(&other->names_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestStep_descriptor_;
  metadata.reflection = QuestStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestData::kIdFieldNumber;
const int QuestData::kStepFieldNumber;
const int QuestData::kTimeFieldNumber;
const int QuestData::kCompleteFieldNumber;
const int QuestData::kTraceFieldNumber;
const int QuestData::kStepsFieldNumber;
const int QuestData::kRewardsFieldNumber;
const int QuestData::kVersionFieldNumber;
const int QuestData::kAcceptlvFieldNumber;
const int QuestData::kFinishcountFieldNumber;
const int QuestData::kParamsFieldNumber;
const int QuestData::kNamesFieldNumber;
#endif  // !_MSC_VER

QuestData::QuestData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestData)
}

void QuestData::InitAsDefaultInstance() {
}

QuestData::QuestData(const QuestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestData)
}

void QuestData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  step_ = 0u;
  time_ = 0u;
  complete_ = false;
  trace_ = true;
  version_ = 0u;
  acceptlv_ = 0u;
  finishcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestData::~QuestData() {
  // @@protoc_insertion_point(destructor:Cmd.QuestData)
  SharedDtor();
}

void QuestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestData_descriptor_;
}

const QuestData& QuestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestData* QuestData::default_instance_ = NULL;

QuestData* QuestData::New() const {
  return new QuestData;
}

void QuestData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 159) {
    ZR_(id_, complete_);
    trace_ = true;
    version_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768) {
    acceptlv_ = 0u;
    finishcount_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  steps_.Clear();
  rewards_.Clear();
  params_.Clear();
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }

      // optional uint32 step = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_complete;
        break;
      }

      // optional bool complete = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_complete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &complete_)));
          set_has_complete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_steps;
        break;
      }

      // repeated .Cmd.QuestStep steps = 5;
      case 5: {
        if (tag == 42) {
         parse_steps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_steps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_steps;
        if (input->ExpectTag(50)) goto parse_rewards;
        break;
      }

      // repeated .Cmd.ItemInfo rewards = 6;
      case 6: {
        if (tag == 50) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_rewards;
        if (input->ExpectTag(56)) goto parse_version;
        break;
      }

      // optional uint32 version = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_acceptlv;
        break;
      }

      // optional uint32 acceptlv = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_acceptlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acceptlv_)));
          set_has_acceptlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_finishcount;
        break;
      }

      // optional uint32 finishcount = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_finishcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishcount_)));
          set_has_finishcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_params;
        break;
      }

      // repeated uint64 params = 10;
      case 10: {
        if (tag == 80) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 80, input, this->mutable_params())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_params())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_params;
        if (input->ExpectTag(90)) goto parse_names;
        break;
      }

      // repeated string names = 11;
      case 11: {
        if (tag == 90) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_names;
        if (input->ExpectTag(96)) goto parse_trace;
        break;
      }

      // optional bool trace = 12 [default = true];
      case 12: {
        if (tag == 96) {
         parse_trace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trace_)));
          set_has_trace();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestData)
  return false;
#undef DO_
}

void QuestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestData)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 step = 2 [default = 0];
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->step(), output);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional bool complete = 4 [default = false];
  if (has_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->complete(), output);
  }

  // repeated .Cmd.QuestStep steps = 5;
  for (int i = 0; i < this->steps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->steps(i), output);
  }

  // repeated .Cmd.ItemInfo rewards = 6;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rewards(i), output);
  }

  // optional uint32 version = 7 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->version(), output);
  }

  // optional uint32 acceptlv = 8 [default = 0];
  if (has_acceptlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->acceptlv(), output);
  }

  // optional uint32 finishcount = 9 [default = 0];
  if (has_finishcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->finishcount(), output);
  }

  // repeated uint64 params = 10;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      10, this->params(i), output);
  }

  // repeated string names = 11;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->names(i), output);
  }

  // optional bool trace = 12 [default = true];
  if (has_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->trace(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestData)
}

::google::protobuf::uint8* QuestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestData)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 step = 2 [default = 0];
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->step(), target);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional bool complete = 4 [default = false];
  if (has_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->complete(), target);
  }

  // repeated .Cmd.QuestStep steps = 5;
  for (int i = 0; i < this->steps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->steps(i), target);
  }

  // repeated .Cmd.ItemInfo rewards = 6;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rewards(i), target);
  }

  // optional uint32 version = 7 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->version(), target);
  }

  // optional uint32 acceptlv = 8 [default = 0];
  if (has_acceptlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->acceptlv(), target);
  }

  // optional uint32 finishcount = 9 [default = 0];
  if (has_finishcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->finishcount(), target);
  }

  // repeated uint64 params = 10;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(10, this->params(i), target);
  }

  // repeated string names = 11;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->names(i), target);
  }

  // optional bool trace = 12 [default = true];
  if (has_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->trace(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestData)
  return target;
}

int QuestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 step = 2 [default = 0];
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

    // optional uint32 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bool complete = 4 [default = false];
    if (has_complete()) {
      total_size += 1 + 1;
    }

    // optional bool trace = 12 [default = true];
    if (has_trace()) {
      total_size += 1 + 1;
    }

    // optional uint32 version = 7 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 acceptlv = 8 [default = 0];
    if (has_acceptlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acceptlv());
    }

    // optional uint32 finishcount = 9 [default = 0];
    if (has_finishcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishcount());
    }

  }
  // repeated .Cmd.QuestStep steps = 5;
  total_size += 1 * this->steps_size();
  for (int i = 0; i < this->steps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->steps(i));
  }

  // repeated .Cmd.ItemInfo rewards = 6;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  // repeated uint64 params = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }

  // repeated string names = 11;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestData::MergeFrom(const QuestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  steps_.MergeFrom(from.steps_);
  rewards_.MergeFrom(from.rewards_);
  params_.MergeFrom(from.params_);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_complete()) {
      set_complete(from.complete());
    }
    if (from.has_trace()) {
      set_trace(from.trace());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_acceptlv()) {
      set_acceptlv(from.acceptlv());
    }
    if (from.has_finishcount()) {
      set_finishcount(from.finishcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestData::CopyFrom(const QuestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestData::IsInitialized() const {

  return true;
}

void QuestData::Swap(QuestData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(step_, other->step_);
    std::swap(time_, other->time_);
    std::swap(complete_, other->complete_);
    std::swap(trace_, other->trace_);
    steps_.Swap(&other->steps_);
    rewards_.Swap(&other->rewards_);
    std::swap(version_, other->version_);
    std::swap(acceptlv_, other->acceptlv_);
    std::swap(finishcount_, other->finishcount_);
    params_.Swap(&other->params_);
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestData_descriptor_;
  metadata.reflection = QuestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestManualItem::kTypeFieldNumber;
const int QuestManualItem::kDataFieldNumber;
const int QuestManualItem::kSubsFieldNumber;
#endif  // !_MSC_VER

QuestManualItem::QuestManualItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestManualItem)
}

void QuestManualItem::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::QuestData*>(&::Cmd::QuestData::default_instance());
}

QuestManualItem::QuestManualItem(const QuestManualItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestManualItem)
}

void QuestManualItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestManualItem::~QuestManualItem() {
  // @@protoc_insertion_point(destructor:Cmd.QuestManualItem)
  SharedDtor();
}

void QuestManualItem::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void QuestManualItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestManualItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestManualItem_descriptor_;
}

const QuestManualItem& QuestManualItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestManualItem* QuestManualItem::default_instance_ = NULL;

QuestManualItem* QuestManualItem::New() const {
  return new QuestManualItem;
}

void QuestManualItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::QuestData::Clear();
    }
  }
  subs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestManualItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestManualItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EQuestList type = 1 [default = EQUESTLIST_ACCEPT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQuestList_IsValid(value)) {
            set_type(static_cast< ::Cmd::EQuestList >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .Cmd.QuestData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_subs;
        break;
      }

      // repeated .Cmd.QuestManualItem subs = 3;
      case 3: {
        if (tag == 26) {
         parse_subs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_subs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestManualItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestManualItem)
  return false;
#undef DO_
}

void QuestManualItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestManualItem)
  // optional .Cmd.EQuestList type = 1 [default = EQUESTLIST_ACCEPT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Cmd.QuestData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // repeated .Cmd.QuestManualItem subs = 3;
  for (int i = 0; i < this->subs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestManualItem)
}

::google::protobuf::uint8* QuestManualItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestManualItem)
  // optional .Cmd.EQuestList type = 1 [default = EQUESTLIST_ACCEPT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Cmd.QuestData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // repeated .Cmd.QuestManualItem subs = 3;
  for (int i = 0; i < this->subs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->subs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestManualItem)
  return target;
}

int QuestManualItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EQuestList type = 1 [default = EQUESTLIST_ACCEPT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Cmd.QuestData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  // repeated .Cmd.QuestManualItem subs = 3;
  total_size += 1 * this->subs_size();
  for (int i = 0; i < this->subs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestManualItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestManualItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestManualItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestManualItem::MergeFrom(const QuestManualItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  subs_.MergeFrom(from.subs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::QuestData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestManualItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestManualItem::CopyFrom(const QuestManualItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestManualItem::IsInitialized() const {

  return true;
}

void QuestManualItem::Swap(QuestManualItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    subs_.Swap(&other->subs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestManualItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestManualItem_descriptor_;
  metadata.reflection = QuestManualItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestShop::kItemidFieldNumber;
const int QuestShop::kQuestsFieldNumber;
#endif  // !_MSC_VER

QuestShop::QuestShop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestShop)
}

void QuestShop::InitAsDefaultInstance() {
}

QuestShop::QuestShop(const QuestShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestShop)
}

void QuestShop::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestShop::~QuestShop() {
  // @@protoc_insertion_point(destructor:Cmd.QuestShop)
  SharedDtor();
}

void QuestShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestShop_descriptor_;
}

const QuestShop& QuestShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestShop* QuestShop::default_instance_ = NULL;

QuestShop* QuestShop::New() const {
  return new QuestShop;
}

void QuestShop::Clear() {
  itemid_ = 0u;
  quests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestShop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_quests;
        break;
      }

      // repeated .Cmd.QuestManualItem quests = 2;
      case 2: {
        if (tag == 18) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_quests;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestShop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestShop)
  return false;
#undef DO_
}

void QuestShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestShop)
  // optional uint32 itemid = 1 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // repeated .Cmd.QuestManualItem quests = 2;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quests(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestShop)
}

::google::protobuf::uint8* QuestShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestShop)
  // optional uint32 itemid = 1 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // repeated .Cmd.QuestManualItem quests = 2;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quests(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestShop)
  return target;
}

int QuestShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  // repeated .Cmd.QuestManualItem quests = 2;
  total_size += 1 * this->quests_size();
  for (int i = 0; i < this->quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestShop::MergeFrom(const QuestShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  quests_.MergeFrom(from.quests_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestShop::CopyFrom(const QuestShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestShop::IsInitialized() const {

  return true;
}

void QuestShop::Swap(QuestShop* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    quests_.Swap(&other->quests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestShop_descriptor_;
  metadata.reflection = QuestShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestName::kIdFieldNumber;
const int QuestName::kNameFieldNumber;
#endif  // !_MSC_VER

QuestName::QuestName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestName)
}

void QuestName::InitAsDefaultInstance() {
}

QuestName::QuestName(const QuestName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestName)
}

void QuestName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestName::~QuestName() {
  // @@protoc_insertion_point(destructor:Cmd.QuestName)
  SharedDtor();
}

void QuestName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void QuestName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestName_descriptor_;
}

const QuestName& QuestName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestName* QuestName::default_instance_ = NULL;

QuestName* QuestName::New() const {
  return new QuestName;
}

void QuestName::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestName)
  return false;
#undef DO_
}

void QuestName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestName)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestName)
}

::google::protobuf::uint8* QuestName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestName)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestName)
  return target;
}

int QuestName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestName::MergeFrom(const QuestName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestName::CopyFrom(const QuestName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestName::IsInitialized() const {

  return true;
}

void QuestName::Swap(QuestName* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestName_descriptor_;
  metadata.reflection = QuestName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestPuzzle::kVersionFieldNumber;
const int QuestPuzzle::kOpenPuzzlesFieldNumber;
const int QuestPuzzle::kUnlockPuzzlesFieldNumber;
#endif  // !_MSC_VER

QuestPuzzle::QuestPuzzle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestPuzzle)
}

void QuestPuzzle::InitAsDefaultInstance() {
}

QuestPuzzle::QuestPuzzle(const QuestPuzzle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestPuzzle)
}

void QuestPuzzle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestPuzzle::~QuestPuzzle() {
  // @@protoc_insertion_point(destructor:Cmd.QuestPuzzle)
  SharedDtor();
}

void QuestPuzzle::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void QuestPuzzle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestPuzzle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestPuzzle_descriptor_;
}

const QuestPuzzle& QuestPuzzle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestPuzzle* QuestPuzzle::default_instance_ = NULL;

QuestPuzzle* QuestPuzzle::New() const {
  return new QuestPuzzle;
}

void QuestPuzzle::Clear() {
  if (has_version()) {
    if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      version_->clear();
    }
  }
  open_puzzles_.Clear();
  unlock_puzzles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestPuzzle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestPuzzle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_open_puzzles;
        break;
      }

      // repeated uint32 open_puzzles = 2;
      case 2: {
        if (tag == 16) {
         parse_open_puzzles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_open_puzzles())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_open_puzzles())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_open_puzzles;
        if (input->ExpectTag(24)) goto parse_unlock_puzzles;
        break;
      }

      // repeated uint32 unlock_puzzles = 3;
      case 3: {
        if (tag == 24) {
         parse_unlock_puzzles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_unlock_puzzles())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlock_puzzles())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unlock_puzzles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestPuzzle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestPuzzle)
  return false;
#undef DO_
}

void QuestPuzzle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestPuzzle)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // repeated uint32 open_puzzles = 2;
  for (int i = 0; i < this->open_puzzles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->open_puzzles(i), output);
  }

  // repeated uint32 unlock_puzzles = 3;
  for (int i = 0; i < this->unlock_puzzles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->unlock_puzzles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestPuzzle)
}

::google::protobuf::uint8* QuestPuzzle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestPuzzle)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // repeated uint32 open_puzzles = 2;
  for (int i = 0; i < this->open_puzzles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->open_puzzles(i), target);
  }

  // repeated uint32 unlock_puzzles = 3;
  for (int i = 0; i < this->unlock_puzzles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->unlock_puzzles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestPuzzle)
  return target;
}

int QuestPuzzle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  // repeated uint32 open_puzzles = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_puzzles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->open_puzzles(i));
    }
    total_size += 1 * this->open_puzzles_size() + data_size;
  }

  // repeated uint32 unlock_puzzles = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlock_puzzles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlock_puzzles(i));
    }
    total_size += 1 * this->unlock_puzzles_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestPuzzle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestPuzzle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestPuzzle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestPuzzle::MergeFrom(const QuestPuzzle& from) {
  GOOGLE_CHECK_NE(&from, this);
  open_puzzles_.MergeFrom(from.open_puzzles_);
  unlock_puzzles_.MergeFrom(from.unlock_puzzles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestPuzzle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestPuzzle::CopyFrom(const QuestPuzzle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestPuzzle::IsInitialized() const {

  return true;
}

void QuestPuzzle::Swap(QuestPuzzle* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    open_puzzles_.Swap(&other->open_puzzles_);
    unlock_puzzles_.Swap(&other->unlock_puzzles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestPuzzle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestPuzzle_descriptor_;
  metadata.reflection = QuestPuzzle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestPreview::kQuestidFieldNumber;
const int QuestPreview::kNameFieldNumber;
const int QuestPreview::kCompleteFieldNumber;
const int QuestPreview::kRewardGroupFieldNumber;
const int QuestPreview::kAllrewardidFieldNumber;
#endif  // !_MSC_VER

QuestPreview::QuestPreview()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestPreview)
}

void QuestPreview::InitAsDefaultInstance() {
}

QuestPreview::QuestPreview(const QuestPreview& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestPreview)
}

void QuestPreview::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  questid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  complete_ = false;
  rewardgroup_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestPreview::~QuestPreview() {
  // @@protoc_insertion_point(destructor:Cmd.QuestPreview)
  SharedDtor();
}

void QuestPreview::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void QuestPreview::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestPreview::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestPreview_descriptor_;
}

const QuestPreview& QuestPreview::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestPreview* QuestPreview::default_instance_ = NULL;

QuestPreview* QuestPreview::New() const {
  return new QuestPreview;
}

void QuestPreview::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestPreview*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(questid_, complete_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    rewardgroup_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  allrewardid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestPreview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestPreview)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_complete;
        break;
      }

      // optional bool complete = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_complete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &complete_)));
          set_has_complete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RewardGroup;
        break;
      }

      // optional uint32 RewardGroup = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_RewardGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardgroup_)));
          set_has_rewardgroup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_allrewardid;
        break;
      }

      // repeated uint32 allrewardid = 5;
      case 5: {
        if (tag == 40) {
         parse_allrewardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_allrewardid())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_allrewardid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_allrewardid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestPreview)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestPreview)
  return false;
#undef DO_
}

void QuestPreview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestPreview)
  // optional uint32 questid = 1 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool complete = 3 [default = false];
  if (has_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->complete(), output);
  }

  // optional uint32 RewardGroup = 4 [default = 0];
  if (has_rewardgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rewardgroup(), output);
  }

  // repeated uint32 allrewardid = 5;
  for (int i = 0; i < this->allrewardid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->allrewardid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestPreview)
}

::google::protobuf::uint8* QuestPreview::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestPreview)
  // optional uint32 questid = 1 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool complete = 3 [default = false];
  if (has_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->complete(), target);
  }

  // optional uint32 RewardGroup = 4 [default = 0];
  if (has_rewardgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rewardgroup(), target);
  }

  // repeated uint32 allrewardid = 5;
  for (int i = 0; i < this->allrewardid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->allrewardid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestPreview)
  return target;
}

int QuestPreview::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool complete = 3 [default = false];
    if (has_complete()) {
      total_size += 1 + 1;
    }

    // optional uint32 RewardGroup = 4 [default = 0];
    if (has_rewardgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardgroup());
    }

  }
  // repeated uint32 allrewardid = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->allrewardid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->allrewardid(i));
    }
    total_size += 1 * this->allrewardid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestPreview::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestPreview* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestPreview*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestPreview::MergeFrom(const QuestPreview& from) {
  GOOGLE_CHECK_NE(&from, this);
  allrewardid_.MergeFrom(from.allrewardid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_complete()) {
      set_complete(from.complete());
    }
    if (from.has_rewardgroup()) {
      set_rewardgroup(from.rewardgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestPreview::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestPreview::CopyFrom(const QuestPreview& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestPreview::IsInitialized() const {

  return true;
}

void QuestPreview::Swap(QuestPreview* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(name_, other->name_);
    std::swap(complete_, other->complete_);
    std::swap(rewardgroup_, other->rewardgroup_);
    allrewardid_.Swap(&other->allrewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestPreview::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestPreview_descriptor_;
  metadata.reflection = QuestPreview_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestManualMain::kItemsFieldNumber;
const int QuestManualMain::kPuzzleFieldNumber;
const int QuestManualMain::kMainstoryidFieldNumber;
const int QuestManualMain::kPreviewsFieldNumber;
#endif  // !_MSC_VER

QuestManualMain::QuestManualMain()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestManualMain)
}

void QuestManualMain::InitAsDefaultInstance() {
  puzzle_ = const_cast< ::Cmd::QuestPuzzle*>(&::Cmd::QuestPuzzle::default_instance());
}

QuestManualMain::QuestManualMain(const QuestManualMain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestManualMain)
}

void QuestManualMain::SharedCtor() {
  _cached_size_ = 0;
  puzzle_ = NULL;
  mainstoryid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestManualMain::~QuestManualMain() {
  // @@protoc_insertion_point(destructor:Cmd.QuestManualMain)
  SharedDtor();
}

void QuestManualMain::SharedDtor() {
  if (this != default_instance_) {
    delete puzzle_;
  }
}

void QuestManualMain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestManualMain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestManualMain_descriptor_;
}

const QuestManualMain& QuestManualMain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestManualMain* QuestManualMain::default_instance_ = NULL;

QuestManualMain* QuestManualMain::New() const {
  return new QuestManualMain;
}

void QuestManualMain::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_puzzle()) {
      if (puzzle_ != NULL) puzzle_->::Cmd::QuestPuzzle::Clear();
    }
    mainstoryid_ = 0u;
  }
  items_.Clear();
  previews_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestManualMain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestManualMain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.QuestManualItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_puzzle;
        break;
      }

      // optional .Cmd.QuestPuzzle puzzle = 2;
      case 2: {
        if (tag == 18) {
         parse_puzzle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_puzzle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mainstoryid;
        break;
      }

      // optional uint32 mainstoryid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_mainstoryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mainstoryid_)));
          set_has_mainstoryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_previews;
        break;
      }

      // repeated .Cmd.QuestPreview previews = 4;
      case 4: {
        if (tag == 34) {
         parse_previews:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_previews()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_previews;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestManualMain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestManualMain)
  return false;
#undef DO_
}

void QuestManualMain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestManualMain)
  // repeated .Cmd.QuestManualItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // optional .Cmd.QuestPuzzle puzzle = 2;
  if (has_puzzle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->puzzle(), output);
  }

  // optional uint32 mainstoryid = 3 [default = 0];
  if (has_mainstoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mainstoryid(), output);
  }

  // repeated .Cmd.QuestPreview previews = 4;
  for (int i = 0; i < this->previews_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->previews(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestManualMain)
}

::google::protobuf::uint8* QuestManualMain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestManualMain)
  // repeated .Cmd.QuestManualItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // optional .Cmd.QuestPuzzle puzzle = 2;
  if (has_puzzle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->puzzle(), target);
  }

  // optional uint32 mainstoryid = 3 [default = 0];
  if (has_mainstoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mainstoryid(), target);
  }

  // repeated .Cmd.QuestPreview previews = 4;
  for (int i = 0; i < this->previews_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->previews(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestManualMain)
  return target;
}

int QuestManualMain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .Cmd.QuestPuzzle puzzle = 2;
    if (has_puzzle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->puzzle());
    }

    // optional uint32 mainstoryid = 3 [default = 0];
    if (has_mainstoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mainstoryid());
    }

  }
  // repeated .Cmd.QuestManualItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .Cmd.QuestPreview previews = 4;
  total_size += 1 * this->previews_size();
  for (int i = 0; i < this->previews_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->previews(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestManualMain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestManualMain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestManualMain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestManualMain::MergeFrom(const QuestManualMain& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  previews_.MergeFrom(from.previews_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_puzzle()) {
      mutable_puzzle()->::Cmd::QuestPuzzle::MergeFrom(from.puzzle());
    }
    if (from.has_mainstoryid()) {
      set_mainstoryid(from.mainstoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestManualMain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestManualMain::CopyFrom(const QuestManualMain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestManualMain::IsInitialized() const {

  return true;
}

void QuestManualMain::Swap(QuestManualMain* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(puzzle_, other->puzzle_);
    std::swap(mainstoryid_, other->mainstoryid_);
    previews_.Swap(&other->previews_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestManualMain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestManualMain_descriptor_;
  metadata.reflection = QuestManualMain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestManualBranch::kShopsFieldNumber;
#endif  // !_MSC_VER

QuestManualBranch::QuestManualBranch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestManualBranch)
}

void QuestManualBranch::InitAsDefaultInstance() {
}

QuestManualBranch::QuestManualBranch(const QuestManualBranch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestManualBranch)
}

void QuestManualBranch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestManualBranch::~QuestManualBranch() {
  // @@protoc_insertion_point(destructor:Cmd.QuestManualBranch)
  SharedDtor();
}

void QuestManualBranch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestManualBranch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestManualBranch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestManualBranch_descriptor_;
}

const QuestManualBranch& QuestManualBranch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestManualBranch* QuestManualBranch::default_instance_ = NULL;

QuestManualBranch* QuestManualBranch::New() const {
  return new QuestManualBranch;
}

void QuestManualBranch::Clear() {
  shops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestManualBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestManualBranch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.QuestShop shops = 1;
      case 1: {
        if (tag == 10) {
         parse_shops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_shops;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestManualBranch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestManualBranch)
  return false;
#undef DO_
}

void QuestManualBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestManualBranch)
  // repeated .Cmd.QuestShop shops = 1;
  for (int i = 0; i < this->shops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shops(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestManualBranch)
}

::google::protobuf::uint8* QuestManualBranch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestManualBranch)
  // repeated .Cmd.QuestShop shops = 1;
  for (int i = 0; i < this->shops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shops(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestManualBranch)
  return target;
}

int QuestManualBranch::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.QuestShop shops = 1;
  total_size += 1 * this->shops_size();
  for (int i = 0; i < this->shops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shops(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestManualBranch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestManualBranch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestManualBranch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestManualBranch::MergeFrom(const QuestManualBranch& from) {
  GOOGLE_CHECK_NE(&from, this);
  shops_.MergeFrom(from.shops_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestManualBranch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestManualBranch::CopyFrom(const QuestManualBranch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestManualBranch::IsInitialized() const {

  return true;
}

void QuestManualBranch::Swap(QuestManualBranch* other) {
  if (other != this) {
    shops_.Swap(&other->shops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestManualBranch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestManualBranch_descriptor_;
  metadata.reflection = QuestManualBranch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestManualStory::kPreviewsFieldNumber;
#endif  // !_MSC_VER

QuestManualStory::QuestManualStory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestManualStory)
}

void QuestManualStory::InitAsDefaultInstance() {
}

QuestManualStory::QuestManualStory(const QuestManualStory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestManualStory)
}

void QuestManualStory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestManualStory::~QuestManualStory() {
  // @@protoc_insertion_point(destructor:Cmd.QuestManualStory)
  SharedDtor();
}

void QuestManualStory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestManualStory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestManualStory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestManualStory_descriptor_;
}

const QuestManualStory& QuestManualStory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestManualStory* QuestManualStory::default_instance_ = NULL;

QuestManualStory* QuestManualStory::New() const {
  return new QuestManualStory;
}

void QuestManualStory::Clear() {
  previews_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestManualStory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestManualStory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.QuestPreview previews = 1;
      case 1: {
        if (tag == 10) {
         parse_previews:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_previews()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_previews;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestManualStory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestManualStory)
  return false;
#undef DO_
}

void QuestManualStory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestManualStory)
  // repeated .Cmd.QuestPreview previews = 1;
  for (int i = 0; i < this->previews_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->previews(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestManualStory)
}

::google::protobuf::uint8* QuestManualStory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestManualStory)
  // repeated .Cmd.QuestPreview previews = 1;
  for (int i = 0; i < this->previews_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->previews(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestManualStory)
  return target;
}

int QuestManualStory::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.QuestPreview previews = 1;
  total_size += 1 * this->previews_size();
  for (int i = 0; i < this->previews_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->previews(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestManualStory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestManualStory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestManualStory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestManualStory::MergeFrom(const QuestManualStory& from) {
  GOOGLE_CHECK_NE(&from, this);
  previews_.MergeFrom(from.previews_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestManualStory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestManualStory::CopyFrom(const QuestManualStory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestManualStory::IsInitialized() const {

  return true;
}

void QuestManualStory::Swap(QuestManualStory* other) {
  if (other != this) {
    previews_.Swap(&other->previews_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestManualStory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestManualStory_descriptor_;
  metadata.reflection = QuestManualStory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestManual::kVersionFieldNumber;
const int QuestManual::kMainFieldNumber;
const int QuestManual::kBranchFieldNumber;
const int QuestManual::kStoryFieldNumber;
const int QuestManual::kPrequestFieldNumber;
#endif  // !_MSC_VER

QuestManual::QuestManual()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestManual)
}

void QuestManual::InitAsDefaultInstance() {
  main_ = const_cast< ::Cmd::QuestManualMain*>(&::Cmd::QuestManualMain::default_instance());
  branch_ = const_cast< ::Cmd::QuestManualBranch*>(&::Cmd::QuestManualBranch::default_instance());
  story_ = const_cast< ::Cmd::QuestManualStory*>(&::Cmd::QuestManualStory::default_instance());
}

QuestManual::QuestManual(const QuestManual& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestManual)
}

void QuestManual::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  main_ = NULL;
  branch_ = NULL;
  story_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestManual::~QuestManual() {
  // @@protoc_insertion_point(destructor:Cmd.QuestManual)
  SharedDtor();
}

void QuestManual::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
    delete main_;
    delete branch_;
    delete story_;
  }
}

void QuestManual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestManual::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestManual_descriptor_;
}

const QuestManual& QuestManual::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestManual* QuestManual::default_instance_ = NULL;

QuestManual* QuestManual::New() const {
  return new QuestManual;
}

void QuestManual::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_main()) {
      if (main_ != NULL) main_->::Cmd::QuestManualMain::Clear();
    }
    if (has_branch()) {
      if (branch_ != NULL) branch_->::Cmd::QuestManualBranch::Clear();
    }
    if (has_story()) {
      if (story_ != NULL) story_->::Cmd::QuestManualStory::Clear();
    }
  }
  prequest_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestManual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestManual)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_main;
        break;
      }

      // optional .Cmd.QuestManualMain main = 2;
      case 2: {
        if (tag == 18) {
         parse_main:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_main()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_branch;
        break;
      }

      // optional .Cmd.QuestManualBranch branch = 3;
      case 3: {
        if (tag == 26) {
         parse_branch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_branch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_story;
        break;
      }

      // optional .Cmd.QuestManualStory story = 4;
      case 4: {
        if (tag == 34) {
         parse_story:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_story()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_prequest;
        break;
      }

      // repeated .Cmd.QuestName prequest = 5;
      case 5: {
        if (tag == 42) {
         parse_prequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_prequest;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestManual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestManual)
  return false;
#undef DO_
}

void QuestManual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestManual)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional .Cmd.QuestManualMain main = 2;
  if (has_main()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->main(), output);
  }

  // optional .Cmd.QuestManualBranch branch = 3;
  if (has_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->branch(), output);
  }

  // optional .Cmd.QuestManualStory story = 4;
  if (has_story()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->story(), output);
  }

  // repeated .Cmd.QuestName prequest = 5;
  for (int i = 0; i < this->prequest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->prequest(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestManual)
}

::google::protobuf::uint8* QuestManual::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestManual)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional .Cmd.QuestManualMain main = 2;
  if (has_main()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->main(), target);
  }

  // optional .Cmd.QuestManualBranch branch = 3;
  if (has_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->branch(), target);
  }

  // optional .Cmd.QuestManualStory story = 4;
  if (has_story()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->story(), target);
  }

  // repeated .Cmd.QuestName prequest = 5;
  for (int i = 0; i < this->prequest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->prequest(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestManual)
  return target;
}

int QuestManual::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .Cmd.QuestManualMain main = 2;
    if (has_main()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->main());
    }

    // optional .Cmd.QuestManualBranch branch = 3;
    if (has_branch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->branch());
    }

    // optional .Cmd.QuestManualStory story = 4;
    if (has_story()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->story());
    }

  }
  // repeated .Cmd.QuestName prequest = 5;
  total_size += 1 * this->prequest_size();
  for (int i = 0; i < this->prequest_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prequest(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestManual::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestManual* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestManual*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestManual::MergeFrom(const QuestManual& from) {
  GOOGLE_CHECK_NE(&from, this);
  prequest_.MergeFrom(from.prequest_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_main()) {
      mutable_main()->::Cmd::QuestManualMain::MergeFrom(from.main());
    }
    if (from.has_branch()) {
      mutable_branch()->::Cmd::QuestManualBranch::MergeFrom(from.branch());
    }
    if (from.has_story()) {
      mutable_story()->::Cmd::QuestManualStory::MergeFrom(from.story());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestManual::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestManual::CopyFrom(const QuestManual& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestManual::IsInitialized() const {

  return true;
}

void QuestManual::Swap(QuestManual* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(main_, other->main_);
    std::swap(branch_, other->branch_);
    std::swap(story_, other->story_);
    prequest_.Swap(&other->prequest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestManual::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestManual_descriptor_;
  metadata.reflection = QuestManual_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestList::kCmdFieldNumber;
const int QuestList::kParamFieldNumber;
const int QuestList::kTypeFieldNumber;
const int QuestList::kIdFieldNumber;
const int QuestList::kListFieldNumber;
const int QuestList::kClearFieldNumber;
#endif  // !_MSC_VER

QuestList::QuestList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestList)
}

void QuestList::InitAsDefaultInstance() {
}

QuestList::QuestList(const QuestList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestList)
}

void QuestList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 1;
  type_ = 1;
  id_ = 0u;
  clear_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestList::~QuestList() {
  // @@protoc_insertion_point(destructor:Cmd.QuestList)
  SharedDtor();
}

void QuestList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestList_descriptor_;
}

const QuestList& QuestList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestList* QuestList::default_instance_ = NULL;

QuestList* QuestList::New() const {
  return new QuestList;
}

void QuestList::Clear() {
  if (_has_bits_[0 / 32] & 47) {
    cmd_ = 8;
    param_ = 1;
    type_ = 1;
    id_ = 0u;
    clear_ = false;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTLIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EQuestList type = 3 [default = EQUESTLIST_ACCEPT];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQuestList_IsValid(value)) {
            set_type(static_cast< ::Cmd::EQuestList >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint32 id = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_list;
        break;
      }

      // repeated .Cmd.QuestData list = 5;
      case 5: {
        if (tag == 42) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_list;
        if (input->ExpectTag(48)) goto parse_clear;
        break;
      }

      // optional bool clear = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_clear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clear_)));
          set_has_clear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestList)
  return false;
#undef DO_
}

void QuestList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTLIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EQuestList type = 3 [default = EQUESTLIST_ACCEPT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  // repeated .Cmd.QuestData list = 5;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list(i), output);
  }

  // optional bool clear = 6 [default = false];
  if (has_clear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->clear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestList)
}

::google::protobuf::uint8* QuestList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTLIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EQuestList type = 3 [default = EQUESTLIST_ACCEPT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  // repeated .Cmd.QuestData list = 5;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list(i), target);
  }

  // optional bool clear = 6 [default = false];
  if (has_clear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->clear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestList)
  return target;
}

int QuestList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTLIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EQuestList type = 3 [default = EQUESTLIST_ACCEPT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 id = 4 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool clear = 6 [default = false];
    if (has_clear()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Cmd.QuestData list = 5;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestList::MergeFrom(const QuestList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_clear()) {
      set_clear(from.clear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestList::CopyFrom(const QuestList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestList::IsInitialized() const {

  return true;
}

void QuestList::Swap(QuestList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    list_.Swap(&other->list_);
    std::swap(clear_, other->clear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestList_descriptor_;
  metadata.reflection = QuestList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestUpdateItem::kUpdateFieldNumber;
const int QuestUpdateItem::kDelFieldNumber;
const int QuestUpdateItem::kTypeFieldNumber;
#endif  // !_MSC_VER

QuestUpdateItem::QuestUpdateItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestUpdateItem)
}

void QuestUpdateItem::InitAsDefaultInstance() {
}

QuestUpdateItem::QuestUpdateItem(const QuestUpdateItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestUpdateItem)
}

void QuestUpdateItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestUpdateItem::~QuestUpdateItem() {
  // @@protoc_insertion_point(destructor:Cmd.QuestUpdateItem)
  SharedDtor();
}

void QuestUpdateItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestUpdateItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestUpdateItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestUpdateItem_descriptor_;
}

const QuestUpdateItem& QuestUpdateItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestUpdateItem* QuestUpdateItem::default_instance_ = NULL;

QuestUpdateItem* QuestUpdateItem::New() const {
  return new QuestUpdateItem;
}

void QuestUpdateItem::Clear() {
  type_ = 1;
  update_.Clear();
  del_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestUpdateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestUpdateItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.QuestData update = 1;
      case 1: {
        if (tag == 10) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_update;
        if (input->ExpectTag(16)) goto parse_del;
        break;
      }

      // repeated uint32 del = 2;
      case 2: {
        if (tag == 16) {
         parse_del:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_del())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_del())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_del;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EQuestList type = 3 [default = EQUESTLIST_ACCEPT];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQuestList_IsValid(value)) {
            set_type(static_cast< ::Cmd::EQuestList >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestUpdateItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestUpdateItem)
  return false;
#undef DO_
}

void QuestUpdateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestUpdateItem)
  // repeated .Cmd.QuestData update = 1;
  for (int i = 0; i < this->update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->update(i), output);
  }

  // repeated uint32 del = 2;
  for (int i = 0; i < this->del_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->del(i), output);
  }

  // optional .Cmd.EQuestList type = 3 [default = EQUESTLIST_ACCEPT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestUpdateItem)
}

::google::protobuf::uint8* QuestUpdateItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestUpdateItem)
  // repeated .Cmd.QuestData update = 1;
  for (int i = 0; i < this->update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->update(i), target);
  }

  // repeated uint32 del = 2;
  for (int i = 0; i < this->del_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->del(i), target);
  }

  // optional .Cmd.EQuestList type = 3 [default = EQUESTLIST_ACCEPT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestUpdateItem)
  return target;
}

int QuestUpdateItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .Cmd.EQuestList type = 3 [default = EQUESTLIST_ACCEPT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.QuestData update = 1;
  total_size += 1 * this->update_size();
  for (int i = 0; i < this->update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->update(i));
  }

  // repeated uint32 del = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->del_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->del(i));
    }
    total_size += 1 * this->del_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestUpdateItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestUpdateItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestUpdateItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestUpdateItem::MergeFrom(const QuestUpdateItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  update_.MergeFrom(from.update_);
  del_.MergeFrom(from.del_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestUpdateItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestUpdateItem::CopyFrom(const QuestUpdateItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestUpdateItem::IsInitialized() const {

  return true;
}

void QuestUpdateItem::Swap(QuestUpdateItem* other) {
  if (other != this) {
    update_.Swap(&other->update_);
    del_.Swap(&other->del_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestUpdateItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestUpdateItem_descriptor_;
  metadata.reflection = QuestUpdateItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestUpdate::kCmdFieldNumber;
const int QuestUpdate::kParamFieldNumber;
const int QuestUpdate::kItemsFieldNumber;
#endif  // !_MSC_VER

QuestUpdate::QuestUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestUpdate)
}

void QuestUpdate::InitAsDefaultInstance() {
}

QuestUpdate::QuestUpdate(const QuestUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestUpdate)
}

void QuestUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestUpdate::~QuestUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.QuestUpdate)
  SharedDtor();
}

void QuestUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestUpdate_descriptor_;
}

const QuestUpdate& QuestUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestUpdate* QuestUpdate::default_instance_ = NULL;

QuestUpdate* QuestUpdate::New() const {
  return new QuestUpdate;
}

void QuestUpdate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 8;
    param_ = 2;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.QuestUpdateItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestUpdate)
  return false;
#undef DO_
}

void QuestUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.QuestUpdateItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestUpdate)
}

::google::protobuf::uint8* QuestUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.QuestUpdateItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestUpdate)
  return target;
}

int QuestUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.QuestUpdateItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestUpdate::MergeFrom(const QuestUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestUpdate::CopyFrom(const QuestUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestUpdate::IsInitialized() const {

  return true;
}

void QuestUpdate::Swap(QuestUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestUpdate_descriptor_;
  metadata.reflection = QuestUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestStepUpdate::kCmdFieldNumber;
const int QuestStepUpdate::kParamFieldNumber;
const int QuestStepUpdate::kIdFieldNumber;
const int QuestStepUpdate::kStepFieldNumber;
const int QuestStepUpdate::kDataFieldNumber;
#endif  // !_MSC_VER

QuestStepUpdate::QuestStepUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestStepUpdate)
}

void QuestStepUpdate::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::QuestStep*>(&::Cmd::QuestStep::default_instance());
}

QuestStepUpdate::QuestStepUpdate(const QuestStepUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestStepUpdate)
}

void QuestStepUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 5;
  id_ = 0u;
  step_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestStepUpdate::~QuestStepUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.QuestStepUpdate)
  SharedDtor();
}

void QuestStepUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void QuestStepUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestStepUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestStepUpdate_descriptor_;
}

const QuestStepUpdate& QuestStepUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestStepUpdate* QuestStepUpdate::default_instance_ = NULL;

QuestStepUpdate* QuestStepUpdate::New() const {
  return new QuestStepUpdate;
}

void QuestStepUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestStepUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, step_);
    cmd_ = 8;
    param_ = 5;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::QuestStep::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestStepUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestStepUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTSTEPUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_step;
        break;
      }

      // optional uint32 step = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional .Cmd.QuestStep data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestStepUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestStepUpdate)
  return false;
#undef DO_
}

void QuestStepUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestStepUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTSTEPUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint32 step = 4 [default = 0];
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->step(), output);
  }

  // optional .Cmd.QuestStep data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestStepUpdate)
}

::google::protobuf::uint8* QuestStepUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestStepUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTSTEPUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint32 step = 4 [default = 0];
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->step(), target);
  }

  // optional .Cmd.QuestStep data = 5;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestStepUpdate)
  return target;
}

int QuestStepUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTSTEPUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 step = 4 [default = 0];
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

    // optional .Cmd.QuestStep data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestStepUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestStepUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestStepUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestStepUpdate::MergeFrom(const QuestStepUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::QuestStep::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestStepUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestStepUpdate::CopyFrom(const QuestStepUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestStepUpdate::IsInitialized() const {

  return true;
}

void QuestStepUpdate::Swap(QuestStepUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(step_, other->step_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestStepUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestStepUpdate_descriptor_;
  metadata.reflection = QuestStepUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestAction::kCmdFieldNumber;
const int QuestAction::kParamFieldNumber;
const int QuestAction::kActionFieldNumber;
const int QuestAction::kQuestidFieldNumber;
#endif  // !_MSC_VER

QuestAction::QuestAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestAction)
}

void QuestAction::InitAsDefaultInstance() {
}

QuestAction::QuestAction(const QuestAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestAction)
}

void QuestAction::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 3;
  action_ = 0;
  questid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestAction::~QuestAction() {
  // @@protoc_insertion_point(destructor:Cmd.QuestAction)
  SharedDtor();
}

void QuestAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestAction_descriptor_;
}

const QuestAction& QuestAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestAction* QuestAction::default_instance_ = NULL;

QuestAction* QuestAction::New() const {
  return new QuestAction;
}

void QuestAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(action_, questid_);
    cmd_ = 8;
    param_ = 3;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTACTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional .Cmd.EQuestAction action = 3 [default = EQUESTACTION_MIN];
      case 3: {
        if (tag == 24) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQuestAction_IsValid(value)) {
            set_action(static_cast< ::Cmd::EQuestAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_questid;
        break;
      }

      // optional uint32 questid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestAction)
  return false;
#undef DO_
}

void QuestAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestAction)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTACTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EQuestAction action = 3 [default = EQUESTACTION_MIN];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // optional uint32 questid = 4 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->questid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestAction)
}

::google::protobuf::uint8* QuestAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestAction)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTACTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EQuestAction action = 3 [default = EQUESTACTION_MIN];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // optional uint32 questid = 4 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->questid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestAction)
  return target;
}

int QuestAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTACTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EQuestAction action = 3 [default = EQUESTACTION_MIN];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional uint32 questid = 4 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestAction::MergeFrom(const QuestAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestAction::CopyFrom(const QuestAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestAction::IsInitialized() const {

  return true;
}

void QuestAction::Swap(QuestAction* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(action_, other->action_);
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestAction_descriptor_;
  metadata.reflection = QuestAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunQuestStep::kCmdFieldNumber;
const int RunQuestStep::kParamFieldNumber;
const int RunQuestStep::kQuestidFieldNumber;
const int RunQuestStep::kStaridFieldNumber;
const int RunQuestStep::kSubgroupFieldNumber;
const int RunQuestStep::kStepFieldNumber;
#endif  // !_MSC_VER

RunQuestStep::RunQuestStep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RunQuestStep)
}

void RunQuestStep::InitAsDefaultInstance() {
}

RunQuestStep::RunQuestStep(const RunQuestStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RunQuestStep)
}

void RunQuestStep::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 4;
  questid_ = 0u;
  starid_ = 0u;
  subgroup_ = 0u;
  step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunQuestStep::~RunQuestStep() {
  // @@protoc_insertion_point(destructor:Cmd.RunQuestStep)
  SharedDtor();
}

void RunQuestStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RunQuestStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunQuestStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunQuestStep_descriptor_;
}

const RunQuestStep& RunQuestStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

RunQuestStep* RunQuestStep::default_instance_ = NULL;

RunQuestStep* RunQuestStep::New() const {
  return new RunQuestStep;
}

void RunQuestStep::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RunQuestStep*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(questid_, step_);
    cmd_ = 8;
    param_ = 4;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunQuestStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RunQuestStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_RUNQUESTSTEP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_questid;
        break;
      }

      // optional uint32 questid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_starid;
        break;
      }

      // optional uint32 starid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_starid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_subgroup;
        break;
      }

      // optional uint32 subgroup = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_subgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subgroup_)));
          set_has_subgroup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_step;
        break;
      }

      // optional uint32 step = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RunQuestStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RunQuestStep)
  return false;
#undef DO_
}

void RunQuestStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RunQuestStep)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_RUNQUESTSTEP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 questid = 3 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->questid(), output);
  }

  // optional uint32 starid = 4 [default = 0];
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starid(), output);
  }

  // optional uint32 subgroup = 5 [default = 0];
  if (has_subgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->subgroup(), output);
  }

  // optional uint32 step = 6 [default = 0];
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RunQuestStep)
}

::google::protobuf::uint8* RunQuestStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RunQuestStep)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_RUNQUESTSTEP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 questid = 3 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->questid(), target);
  }

  // optional uint32 starid = 4 [default = 0];
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starid(), target);
  }

  // optional uint32 subgroup = 5 [default = 0];
  if (has_subgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->subgroup(), target);
  }

  // optional uint32 step = 6 [default = 0];
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RunQuestStep)
  return target;
}

int RunQuestStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_RUNQUESTSTEP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 questid = 3 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional uint32 starid = 4 [default = 0];
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starid());
    }

    // optional uint32 subgroup = 5 [default = 0];
    if (has_subgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subgroup());
    }

    // optional uint32 step = 6 [default = 0];
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunQuestStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunQuestStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunQuestStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunQuestStep::MergeFrom(const RunQuestStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
    if (from.has_subgroup()) {
      set_subgroup(from.subgroup());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunQuestStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunQuestStep::CopyFrom(const RunQuestStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunQuestStep::IsInitialized() const {

  return true;
}

void RunQuestStep::Swap(RunQuestStep* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(questid_, other->questid_);
    std::swap(starid_, other->starid_);
    std::swap(subgroup_, other->subgroup_);
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunQuestStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunQuestStep_descriptor_;
  metadata.reflection = RunQuestStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestTrace::kCmdFieldNumber;
const int QuestTrace::kParamFieldNumber;
const int QuestTrace::kQuestidFieldNumber;
const int QuestTrace::kTraceFieldNumber;
#endif  // !_MSC_VER

QuestTrace::QuestTrace()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestTrace)
}

void QuestTrace::InitAsDefaultInstance() {
}

QuestTrace::QuestTrace(const QuestTrace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestTrace)
}

void QuestTrace::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 6;
  questid_ = 0u;
  trace_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestTrace::~QuestTrace() {
  // @@protoc_insertion_point(destructor:Cmd.QuestTrace)
  SharedDtor();
}

void QuestTrace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestTrace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestTrace_descriptor_;
}

const QuestTrace& QuestTrace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestTrace* QuestTrace::default_instance_ = NULL;

QuestTrace* QuestTrace::New() const {
  return new QuestTrace;
}

void QuestTrace::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestTrace*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(questid_, trace_);
    cmd_ = 8;
    param_ = 6;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestTrace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTTRACE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_questid;
        break;
      }

      // optional uint32 questid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_trace;
        break;
      }

      // optional bool trace = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_trace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trace_)));
          set_has_trace();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestTrace)
  return false;
#undef DO_
}

void QuestTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestTrace)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTTRACE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 questid = 3 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->questid(), output);
  }

  // optional bool trace = 4 [default = false];
  if (has_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->trace(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestTrace)
}

::google::protobuf::uint8* QuestTrace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestTrace)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTTRACE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 questid = 3 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->questid(), target);
  }

  // optional bool trace = 4 [default = false];
  if (has_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->trace(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestTrace)
  return target;
}

int QuestTrace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTTRACE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 questid = 3 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional bool trace = 4 [default = false];
    if (has_trace()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestTrace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestTrace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestTrace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestTrace::MergeFrom(const QuestTrace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_trace()) {
      set_trace(from.trace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestTrace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestTrace::CopyFrom(const QuestTrace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestTrace::IsInitialized() const {

  return true;
}

void QuestTrace::Swap(QuestTrace* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(questid_, other->questid_);
    std::swap(trace_, other->trace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestTrace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestTrace_descriptor_;
  metadata.reflection = QuestTrace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestDetail::kIdFieldNumber;
const int QuestDetail::kTimeFieldNumber;
const int QuestDetail::kMapFieldNumber;
const int QuestDetail::kCompleteFieldNumber;
const int QuestDetail::kTraceFieldNumber;
const int QuestDetail::kDetailsFieldNumber;
#endif  // !_MSC_VER

QuestDetail::QuestDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestDetail)
}

void QuestDetail::InitAsDefaultInstance() {
}

QuestDetail::QuestDetail(const QuestDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestDetail)
}

void QuestDetail::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  time_ = 0u;
  map_ = 0u;
  complete_ = false;
  trace_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestDetail::~QuestDetail() {
  // @@protoc_insertion_point(destructor:Cmd.QuestDetail)
  SharedDtor();
}

void QuestDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestDetail_descriptor_;
}

const QuestDetail& QuestDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestDetail* QuestDetail::default_instance_ = NULL;

QuestDetail* QuestDetail::New() const {
  return new QuestDetail;
}

void QuestDetail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestDetail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, complete_);
    trace_ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_map;
        break;
      }

      // optional uint32 map = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_)));
          set_has_map();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_complete;
        break;
      }

      // optional bool complete = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_complete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &complete_)));
          set_has_complete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_trace;
        break;
      }

      // optional bool trace = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_trace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trace_)));
          set_has_trace();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_details;
        break;
      }

      // repeated uint32 details = 6;
      case 6: {
        if (tag == 48) {
         parse_details:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_details())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_details())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_details;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestDetail)
  return false;
#undef DO_
}

void QuestDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestDetail)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 time = 2 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // optional uint32 map = 3 [default = 0];
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->map(), output);
  }

  // optional bool complete = 4 [default = false];
  if (has_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->complete(), output);
  }

  // optional bool trace = 5 [default = true];
  if (has_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->trace(), output);
  }

  // repeated uint32 details = 6;
  for (int i = 0; i < this->details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->details(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestDetail)
}

::google::protobuf::uint8* QuestDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestDetail)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 time = 2 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // optional uint32 map = 3 [default = 0];
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->map(), target);
  }

  // optional bool complete = 4 [default = false];
  if (has_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->complete(), target);
  }

  // optional bool trace = 5 [default = true];
  if (has_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->trace(), target);
  }

  // repeated uint32 details = 6;
  for (int i = 0; i < this->details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->details(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestDetail)
  return target;
}

int QuestDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 time = 2 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 map = 3 [default = 0];
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map());
    }

    // optional bool complete = 4 [default = false];
    if (has_complete()) {
      total_size += 1 + 1;
    }

    // optional bool trace = 5 [default = true];
    if (has_trace()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 details = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->details_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->details(i));
    }
    total_size += 1 * this->details_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestDetail::MergeFrom(const QuestDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  details_.MergeFrom(from.details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
    if (from.has_complete()) {
      set_complete(from.complete());
    }
    if (from.has_trace()) {
      set_trace(from.trace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestDetail::CopyFrom(const QuestDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestDetail::IsInitialized() const {

  return true;
}

void QuestDetail::Swap(QuestDetail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(map_, other->map_);
    std::swap(complete_, other->complete_);
    std::swap(trace_, other->trace_);
    details_.Swap(&other->details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestDetail_descriptor_;
  metadata.reflection = QuestDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestDetailList::kCmdFieldNumber;
const int QuestDetailList::kParamFieldNumber;
const int QuestDetailList::kDetailsFieldNumber;
#endif  // !_MSC_VER

QuestDetailList::QuestDetailList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestDetailList)
}

void QuestDetailList::InitAsDefaultInstance() {
}

QuestDetailList::QuestDetailList(const QuestDetailList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestDetailList)
}

void QuestDetailList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 7;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestDetailList::~QuestDetailList() {
  // @@protoc_insertion_point(destructor:Cmd.QuestDetailList)
  SharedDtor();
}

void QuestDetailList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestDetailList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestDetailList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestDetailList_descriptor_;
}

const QuestDetailList& QuestDetailList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestDetailList* QuestDetailList::default_instance_ = NULL;

QuestDetailList* QuestDetailList::New() const {
  return new QuestDetailList;
}

void QuestDetailList::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 8;
    param_ = 7;
  }
  details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestDetailList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestDetailList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTDETAILLIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_details;
        break;
      }

      // repeated .Cmd.QuestDetail details = 3;
      case 3: {
        if (tag == 26) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_details;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestDetailList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestDetailList)
  return false;
#undef DO_
}

void QuestDetailList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestDetailList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTDETAILLIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.QuestDetail details = 3;
  for (int i = 0; i < this->details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->details(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestDetailList)
}

::google::protobuf::uint8* QuestDetailList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestDetailList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTDETAILLIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.QuestDetail details = 3;
  for (int i = 0; i < this->details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->details(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestDetailList)
  return target;
}

int QuestDetailList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTDETAILLIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.QuestDetail details = 3;
  total_size += 1 * this->details_size();
  for (int i = 0; i < this->details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->details(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestDetailList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestDetailList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestDetailList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestDetailList::MergeFrom(const QuestDetailList& from) {
  GOOGLE_CHECK_NE(&from, this);
  details_.MergeFrom(from.details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestDetailList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestDetailList::CopyFrom(const QuestDetailList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestDetailList::IsInitialized() const {

  return true;
}

void QuestDetailList::Swap(QuestDetailList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    details_.Swap(&other->details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestDetailList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestDetailList_descriptor_;
  metadata.reflection = QuestDetailList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestDetailUpdate::kCmdFieldNumber;
const int QuestDetailUpdate::kParamFieldNumber;
const int QuestDetailUpdate::kDetailFieldNumber;
const int QuestDetailUpdate::kDelFieldNumber;
#endif  // !_MSC_VER

QuestDetailUpdate::QuestDetailUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestDetailUpdate)
}

void QuestDetailUpdate::InitAsDefaultInstance() {
}

QuestDetailUpdate::QuestDetailUpdate(const QuestDetailUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestDetailUpdate)
}

void QuestDetailUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 8;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestDetailUpdate::~QuestDetailUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.QuestDetailUpdate)
  SharedDtor();
}

void QuestDetailUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestDetailUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestDetailUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestDetailUpdate_descriptor_;
}

const QuestDetailUpdate& QuestDetailUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestDetailUpdate* QuestDetailUpdate::default_instance_ = NULL;

QuestDetailUpdate* QuestDetailUpdate::New() const {
  return new QuestDetailUpdate;
}

void QuestDetailUpdate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 8;
    param_ = 8;
  }
  detail_.Clear();
  del_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestDetailUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestDetailUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTDETAILUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_detail;
        break;
      }

      // repeated .Cmd.QuestDetail detail = 3;
      case 3: {
        if (tag == 26) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_detail;
        if (input->ExpectTag(34)) goto parse_del;
        break;
      }

      // repeated .Cmd.QuestDetail del = 4;
      case 4: {
        if (tag == 34) {
         parse_del:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_del()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_del;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestDetailUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestDetailUpdate)
  return false;
#undef DO_
}

void QuestDetailUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestDetailUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTDETAILUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.QuestDetail detail = 3;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detail(i), output);
  }

  // repeated .Cmd.QuestDetail del = 4;
  for (int i = 0; i < this->del_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->del(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestDetailUpdate)
}

::google::protobuf::uint8* QuestDetailUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestDetailUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTDETAILUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.QuestDetail detail = 3;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->detail(i), target);
  }

  // repeated .Cmd.QuestDetail del = 4;
  for (int i = 0; i < this->del_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->del(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestDetailUpdate)
  return target;
}

int QuestDetailUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTDETAILUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.QuestDetail detail = 3;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }

  // repeated .Cmd.QuestDetail del = 4;
  total_size += 1 * this->del_size();
  for (int i = 0; i < this->del_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->del(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestDetailUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestDetailUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestDetailUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestDetailUpdate::MergeFrom(const QuestDetailUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  detail_.MergeFrom(from.detail_);
  del_.MergeFrom(from.del_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestDetailUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestDetailUpdate::CopyFrom(const QuestDetailUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestDetailUpdate::IsInitialized() const {

  return true;
}

void QuestDetailUpdate::Swap(QuestDetailUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    detail_.Swap(&other->detail_);
    del_.Swap(&other->del_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestDetailUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestDetailUpdate_descriptor_;
  metadata.reflection = QuestDetailUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRaidCmd::kCmdFieldNumber;
const int QuestRaidCmd::kParamFieldNumber;
const int QuestRaidCmd::kQuestidFieldNumber;
#endif  // !_MSC_VER

QuestRaidCmd::QuestRaidCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestRaidCmd)
}

void QuestRaidCmd::InitAsDefaultInstance() {
}

QuestRaidCmd::QuestRaidCmd(const QuestRaidCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestRaidCmd)
}

void QuestRaidCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 9;
  questid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRaidCmd::~QuestRaidCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QuestRaidCmd)
  SharedDtor();
}

void QuestRaidCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRaidCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRaidCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRaidCmd_descriptor_;
}

const QuestRaidCmd& QuestRaidCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestRaidCmd* QuestRaidCmd::default_instance_ = NULL;

QuestRaidCmd* QuestRaidCmd::New() const {
  return new QuestRaidCmd;
}

void QuestRaidCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 8;
    param_ = 9;
    questid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRaidCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestRaidCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTRAIDCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_questid;
        break;
      }

      // optional uint32 questid = 3;
      case 3: {
        if (tag == 24) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestRaidCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestRaidCmd)
  return false;
#undef DO_
}

void QuestRaidCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestRaidCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTRAIDCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 questid = 3;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->questid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestRaidCmd)
}

::google::protobuf::uint8* QuestRaidCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestRaidCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTRAIDCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 questid = 3;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->questid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestRaidCmd)
  return target;
}

int QuestRaidCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTRAIDCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 questid = 3;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRaidCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRaidCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRaidCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRaidCmd::MergeFrom(const QuestRaidCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRaidCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRaidCmd::CopyFrom(const QuestRaidCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRaidCmd::IsInitialized() const {

  return true;
}

void QuestRaidCmd::Swap(QuestRaidCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRaidCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRaidCmd_descriptor_;
  metadata.reflection = QuestRaidCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestCanAcceptListChange::kCmdFieldNumber;
const int QuestCanAcceptListChange::kParamFieldNumber;
#endif  // !_MSC_VER

QuestCanAcceptListChange::QuestCanAcceptListChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestCanAcceptListChange)
}

void QuestCanAcceptListChange::InitAsDefaultInstance() {
}

QuestCanAcceptListChange::QuestCanAcceptListChange(const QuestCanAcceptListChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestCanAcceptListChange)
}

void QuestCanAcceptListChange::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestCanAcceptListChange::~QuestCanAcceptListChange() {
  // @@protoc_insertion_point(destructor:Cmd.QuestCanAcceptListChange)
  SharedDtor();
}

void QuestCanAcceptListChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestCanAcceptListChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestCanAcceptListChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestCanAcceptListChange_descriptor_;
}

const QuestCanAcceptListChange& QuestCanAcceptListChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestCanAcceptListChange* QuestCanAcceptListChange::default_instance_ = NULL;

QuestCanAcceptListChange* QuestCanAcceptListChange::New() const {
  return new QuestCanAcceptListChange;
}

void QuestCanAcceptListChange::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 8;
    param_ = 10;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestCanAcceptListChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestCanAcceptListChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_CANACCEPTLISTCHANGED];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestCanAcceptListChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestCanAcceptListChange)
  return false;
#undef DO_
}

void QuestCanAcceptListChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestCanAcceptListChange)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_CANACCEPTLISTCHANGED];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestCanAcceptListChange)
}

::google::protobuf::uint8* QuestCanAcceptListChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestCanAcceptListChange)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_CANACCEPTLISTCHANGED];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestCanAcceptListChange)
  return target;
}

int QuestCanAcceptListChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_CANACCEPTLISTCHANGED];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestCanAcceptListChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestCanAcceptListChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestCanAcceptListChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestCanAcceptListChange::MergeFrom(const QuestCanAcceptListChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestCanAcceptListChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestCanAcceptListChange::CopyFrom(const QuestCanAcceptListChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestCanAcceptListChange::IsInitialized() const {

  return true;
}

void QuestCanAcceptListChange::Swap(QuestCanAcceptListChange* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestCanAcceptListChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestCanAcceptListChange_descriptor_;
  metadata.reflection = QuestCanAcceptListChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisitNpcUserCmd::kCmdFieldNumber;
const int VisitNpcUserCmd::kParamFieldNumber;
const int VisitNpcUserCmd::kNpctempidFieldNumber;
#endif  // !_MSC_VER

VisitNpcUserCmd::VisitNpcUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.VisitNpcUserCmd)
}

void VisitNpcUserCmd::InitAsDefaultInstance() {
}

VisitNpcUserCmd::VisitNpcUserCmd(const VisitNpcUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.VisitNpcUserCmd)
}

void VisitNpcUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 11;
  npctempid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisitNpcUserCmd::~VisitNpcUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.VisitNpcUserCmd)
  SharedDtor();
}

void VisitNpcUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VisitNpcUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisitNpcUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisitNpcUserCmd_descriptor_;
}

const VisitNpcUserCmd& VisitNpcUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

VisitNpcUserCmd* VisitNpcUserCmd::default_instance_ = NULL;

VisitNpcUserCmd* VisitNpcUserCmd::New() const {
  return new VisitNpcUserCmd;
}

void VisitNpcUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 8;
    param_ = 11;
    npctempid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisitNpcUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.VisitNpcUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_VISIT_NPC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npctempid;
        break;
      }

      // optional uint64 npctempid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_npctempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npctempid_)));
          set_has_npctempid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.VisitNpcUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.VisitNpcUserCmd)
  return false;
#undef DO_
}

void VisitNpcUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.VisitNpcUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_VISIT_NPC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 npctempid = 3 [default = 0];
  if (has_npctempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npctempid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.VisitNpcUserCmd)
}

::google::protobuf::uint8* VisitNpcUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.VisitNpcUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_VISIT_NPC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 npctempid = 3 [default = 0];
  if (has_npctempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npctempid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.VisitNpcUserCmd)
  return target;
}

int VisitNpcUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_VISIT_NPC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 npctempid = 3 [default = 0];
    if (has_npctempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npctempid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisitNpcUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisitNpcUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisitNpcUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisitNpcUserCmd::MergeFrom(const VisitNpcUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npctempid()) {
      set_npctempid(from.npctempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisitNpcUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisitNpcUserCmd::CopyFrom(const VisitNpcUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisitNpcUserCmd::IsInitialized() const {

  return true;
}

void VisitNpcUserCmd::Swap(VisitNpcUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npctempid_, other->npctempid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisitNpcUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisitNpcUserCmd_descriptor_;
  metadata.reflection = VisitNpcUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtherData::kDataFieldNumber;
const int OtherData::kParam1FieldNumber;
const int OtherData::kParam2FieldNumber;
const int OtherData::kParam3FieldNumber;
const int OtherData::kParam4FieldNumber;
#endif  // !_MSC_VER

OtherData::OtherData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OtherData)
}

void OtherData::InitAsDefaultInstance() {
}

OtherData::OtherData(const OtherData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OtherData)
}

void OtherData::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0;
  param1_ = 0u;
  param2_ = 0u;
  param3_ = 0u;
  param4_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherData::~OtherData() {
  // @@protoc_insertion_point(destructor:Cmd.OtherData)
  SharedDtor();
}

void OtherData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OtherData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherData_descriptor_;
}

const OtherData& OtherData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

OtherData* OtherData::default_instance_ = NULL;

OtherData* OtherData::New() const {
  return new OtherData;
}

void OtherData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OtherData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(data_, param4_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OtherData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EOtherData data = 1 [default = EOTHERDATA_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EOtherData_IsValid(value)) {
            set_data(static_cast< ::Cmd::EOtherData >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param1;
        break;
      }

      // optional uint32 param1 = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_param2;
        break;
      }

      // optional uint32 param2 = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_param3;
        break;
      }

      // optional uint32 param3 = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_param4;
        break;
      }

      // optional uint32 param4 = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_param4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param4_)));
          set_has_param4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OtherData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OtherData)
  return false;
#undef DO_
}

void OtherData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OtherData)
  // optional .Cmd.EOtherData data = 1 [default = EOTHERDATA_MIN];
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->data(), output);
  }

  // optional uint32 param1 = 2 [default = 0];
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param1(), output);
  }

  // optional uint32 param2 = 3 [default = 0];
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->param2(), output);
  }

  // optional uint32 param3 = 4 [default = 0];
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->param3(), output);
  }

  // optional uint32 param4 = 5 [default = 0];
  if (has_param4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->param4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OtherData)
}

::google::protobuf::uint8* OtherData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OtherData)
  // optional .Cmd.EOtherData data = 1 [default = EOTHERDATA_MIN];
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->data(), target);
  }

  // optional uint32 param1 = 2 [default = 0];
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param1(), target);
  }

  // optional uint32 param2 = 3 [default = 0];
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->param2(), target);
  }

  // optional uint32 param3 = 4 [default = 0];
  if (has_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->param3(), target);
  }

  // optional uint32 param4 = 5 [default = 0];
  if (has_param4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->param4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OtherData)
  return target;
}

int OtherData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EOtherData data = 1 [default = EOTHERDATA_MIN];
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data());
    }

    // optional uint32 param1 = 2 [default = 0];
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param1());
    }

    // optional uint32 param2 = 3 [default = 0];
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param2());
    }

    // optional uint32 param3 = 4 [default = 0];
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param3());
    }

    // optional uint32 param4 = 5 [default = 0];
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherData::MergeFrom(const OtherData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherData::CopyFrom(const OtherData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherData::IsInitialized() const {

  return true;
}

void OtherData::Swap(OtherData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherData_descriptor_;
  metadata.reflection = OtherData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryOtherData::kCmdFieldNumber;
const int QueryOtherData::kParamFieldNumber;
const int QueryOtherData::kTypeFieldNumber;
const int QueryOtherData::kDataFieldNumber;
#endif  // !_MSC_VER

QueryOtherData::QueryOtherData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryOtherData)
}

void QueryOtherData::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::OtherData*>(&::Cmd::OtherData::default_instance());
}

QueryOtherData::QueryOtherData(const QueryOtherData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryOtherData)
}

void QueryOtherData::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 12;
  type_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryOtherData::~QueryOtherData() {
  // @@protoc_insertion_point(destructor:Cmd.QueryOtherData)
  SharedDtor();
}

void QueryOtherData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void QueryOtherData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryOtherData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryOtherData_descriptor_;
}

const QueryOtherData& QueryOtherData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QueryOtherData* QueryOtherData::default_instance_ = NULL;

QueryOtherData* QueryOtherData::New() const {
  return new QueryOtherData;
}

void QueryOtherData::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 8;
    param_ = 12;
    type_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::OtherData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryOtherData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryOtherData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERYOTHERDATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EOtherData type = 3 [default = EOTHERDATA_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EOtherData_IsValid(value)) {
            set_type(static_cast< ::Cmd::EOtherData >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .Cmd.OtherData data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryOtherData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryOtherData)
  return false;
#undef DO_
}

void QueryOtherData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryOtherData)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERYOTHERDATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EOtherData type = 3 [default = EOTHERDATA_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .Cmd.OtherData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryOtherData)
}

::google::protobuf::uint8* QueryOtherData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryOtherData)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERYOTHERDATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EOtherData type = 3 [default = EOTHERDATA_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .Cmd.OtherData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryOtherData)
  return target;
}

int QueryOtherData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERYOTHERDATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EOtherData type = 3 [default = EOTHERDATA_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Cmd.OtherData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryOtherData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryOtherData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryOtherData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryOtherData::MergeFrom(const QueryOtherData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::OtherData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryOtherData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryOtherData::CopyFrom(const QueryOtherData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOtherData::IsInitialized() const {

  return true;
}

void QueryOtherData::Swap(QueryOtherData* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryOtherData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryOtherData_descriptor_;
  metadata.reflection = QueryOtherData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryWantedInfoQuestCmd::kCmdFieldNumber;
const int QueryWantedInfoQuestCmd::kParamFieldNumber;
const int QueryWantedInfoQuestCmd::kMaxcountFieldNumber;
#endif  // !_MSC_VER

QueryWantedInfoQuestCmd::QueryWantedInfoQuestCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryWantedInfoQuestCmd)
}

void QueryWantedInfoQuestCmd::InitAsDefaultInstance() {
}

QueryWantedInfoQuestCmd::QueryWantedInfoQuestCmd(const QueryWantedInfoQuestCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryWantedInfoQuestCmd)
}

void QueryWantedInfoQuestCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 13;
  maxcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryWantedInfoQuestCmd::~QueryWantedInfoQuestCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryWantedInfoQuestCmd)
  SharedDtor();
}

void QueryWantedInfoQuestCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryWantedInfoQuestCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryWantedInfoQuestCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryWantedInfoQuestCmd_descriptor_;
}

const QueryWantedInfoQuestCmd& QueryWantedInfoQuestCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QueryWantedInfoQuestCmd* QueryWantedInfoQuestCmd::default_instance_ = NULL;

QueryWantedInfoQuestCmd* QueryWantedInfoQuestCmd::New() const {
  return new QueryWantedInfoQuestCmd;
}

void QueryWantedInfoQuestCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 8;
    param_ = 13;
    maxcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryWantedInfoQuestCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryWantedInfoQuestCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERYWANTEDINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxcount;
        break;
      }

      // optional uint32 maxcount = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_maxcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcount_)));
          set_has_maxcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryWantedInfoQuestCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryWantedInfoQuestCmd)
  return false;
#undef DO_
}

void QueryWantedInfoQuestCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryWantedInfoQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERYWANTEDINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 maxcount = 3 [default = 0];
  if (has_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryWantedInfoQuestCmd)
}

::google::protobuf::uint8* QueryWantedInfoQuestCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryWantedInfoQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERYWANTEDINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 maxcount = 3 [default = 0];
  if (has_maxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryWantedInfoQuestCmd)
  return target;
}

int QueryWantedInfoQuestCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERYWANTEDINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 maxcount = 3 [default = 0];
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryWantedInfoQuestCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryWantedInfoQuestCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryWantedInfoQuestCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryWantedInfoQuestCmd::MergeFrom(const QueryWantedInfoQuestCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_maxcount()) {
      set_maxcount(from.maxcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryWantedInfoQuestCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryWantedInfoQuestCmd::CopyFrom(const QueryWantedInfoQuestCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryWantedInfoQuestCmd::IsInitialized() const {

  return true;
}

void QueryWantedInfoQuestCmd::Swap(QueryWantedInfoQuestCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(maxcount_, other->maxcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryWantedInfoQuestCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryWantedInfoQuestCmd_descriptor_;
  metadata.reflection = QueryWantedInfoQuestCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteHelpAcceptQuestCmd::kCmdFieldNumber;
const int InviteHelpAcceptQuestCmd::kParamFieldNumber;
const int InviteHelpAcceptQuestCmd::kLeaderidFieldNumber;
const int InviteHelpAcceptQuestCmd::kQuestidFieldNumber;
const int InviteHelpAcceptQuestCmd::kTimeFieldNumber;
const int InviteHelpAcceptQuestCmd::kSignFieldNumber;
const int InviteHelpAcceptQuestCmd::kLeadernameFieldNumber;
const int InviteHelpAcceptQuestCmd::kIssubmitFieldNumber;
#endif  // !_MSC_VER

InviteHelpAcceptQuestCmd::InviteHelpAcceptQuestCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InviteHelpAcceptQuestCmd)
}

void InviteHelpAcceptQuestCmd::InitAsDefaultInstance() {
}

InviteHelpAcceptQuestCmd::InviteHelpAcceptQuestCmd(const InviteHelpAcceptQuestCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InviteHelpAcceptQuestCmd)
}

void InviteHelpAcceptQuestCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 14;
  leaderid_ = GOOGLE_ULONGLONG(0);
  questid_ = 0u;
  time_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issubmit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteHelpAcceptQuestCmd::~InviteHelpAcceptQuestCmd() {
  // @@protoc_insertion_point(destructor:Cmd.InviteHelpAcceptQuestCmd)
  SharedDtor();
}

void InviteHelpAcceptQuestCmd::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leadername_;
  }
  if (this != default_instance_) {
  }
}

void InviteHelpAcceptQuestCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteHelpAcceptQuestCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteHelpAcceptQuestCmd_descriptor_;
}

const InviteHelpAcceptQuestCmd& InviteHelpAcceptQuestCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

InviteHelpAcceptQuestCmd* InviteHelpAcceptQuestCmd::default_instance_ = NULL;

InviteHelpAcceptQuestCmd* InviteHelpAcceptQuestCmd::New() const {
  return new InviteHelpAcceptQuestCmd;
}

void InviteHelpAcceptQuestCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InviteHelpAcceptQuestCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(leaderid_, time_);
    cmd_ = 8;
    param_ = 14;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leadername_->clear();
      }
    }
    issubmit_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteHelpAcceptQuestCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InviteHelpAcceptQuestCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_ACCEPT_INVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_leaderid;
        break;
      }

      // optional uint64 leaderid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_leaderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_questid;
        break;
      }

      // optional uint32 questid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sign;
        break;
      }

      // optional bytes sign = 6;
      case 6: {
        if (tag == 50) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_leadername;
        break;
      }

      // optional string leadername = 7;
      case 7: {
        if (tag == 58) {
         parse_leadername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leadername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_issubmit;
        break;
      }

      // optional bool issubmit = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_issubmit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issubmit_)));
          set_has_issubmit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InviteHelpAcceptQuestCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InviteHelpAcceptQuestCmd)
  return false;
#undef DO_
}

void InviteHelpAcceptQuestCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InviteHelpAcceptQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_ACCEPT_INVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 leaderid = 3 [default = 0];
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->leaderid(), output);
  }

  // optional uint32 questid = 4 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->questid(), output);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional bytes sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->sign(), output);
  }

  // optional string leadername = 7;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->leadername(), output);
  }

  // optional bool issubmit = 8 [default = false];
  if (has_issubmit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->issubmit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InviteHelpAcceptQuestCmd)
}

::google::protobuf::uint8* InviteHelpAcceptQuestCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InviteHelpAcceptQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_ACCEPT_INVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 leaderid = 3 [default = 0];
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->leaderid(), target);
  }

  // optional uint32 questid = 4 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->questid(), target);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional bytes sign = 6;
  if (has_sign()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->sign(), target);
  }

  // optional string leadername = 7;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->leadername(), target);
  }

  // optional bool issubmit = 8 [default = false];
  if (has_issubmit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->issubmit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InviteHelpAcceptQuestCmd)
  return target;
}

int InviteHelpAcceptQuestCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_ACCEPT_INVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 leaderid = 3 [default = 0];
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderid());
    }

    // optional uint32 questid = 4 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional uint32 time = 5 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bytes sign = 6;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign());
    }

    // optional string leadername = 7;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }

    // optional bool issubmit = 8 [default = false];
    if (has_issubmit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteHelpAcceptQuestCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteHelpAcceptQuestCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteHelpAcceptQuestCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteHelpAcceptQuestCmd::MergeFrom(const InviteHelpAcceptQuestCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
    if (from.has_issubmit()) {
      set_issubmit(from.issubmit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteHelpAcceptQuestCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteHelpAcceptQuestCmd::CopyFrom(const InviteHelpAcceptQuestCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteHelpAcceptQuestCmd::IsInitialized() const {

  return true;
}

void InviteHelpAcceptQuestCmd::Swap(InviteHelpAcceptQuestCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(questid_, other->questid_);
    std::swap(time_, other->time_);
    std::swap(sign_, other->sign_);
    std::swap(leadername_, other->leadername_);
    std::swap(issubmit_, other->issubmit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteHelpAcceptQuestCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteHelpAcceptQuestCmd_descriptor_;
  metadata.reflection = InviteHelpAcceptQuestCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteAcceptQuestCmd::kCmdFieldNumber;
const int InviteAcceptQuestCmd::kParamFieldNumber;
const int InviteAcceptQuestCmd::kLeaderidFieldNumber;
const int InviteAcceptQuestCmd::kQuestidFieldNumber;
const int InviteAcceptQuestCmd::kTimeFieldNumber;
const int InviteAcceptQuestCmd::kSignFieldNumber;
const int InviteAcceptQuestCmd::kLeadernameFieldNumber;
const int InviteAcceptQuestCmd::kIssubmitFieldNumber;
const int InviteAcceptQuestCmd::kIsquickfinishFieldNumber;
#endif  // !_MSC_VER

InviteAcceptQuestCmd::InviteAcceptQuestCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InviteAcceptQuestCmd)
}

void InviteAcceptQuestCmd::InitAsDefaultInstance() {
}

InviteAcceptQuestCmd::InviteAcceptQuestCmd(const InviteAcceptQuestCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InviteAcceptQuestCmd)
}

void InviteAcceptQuestCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 16;
  leaderid_ = GOOGLE_ULONGLONG(0);
  questid_ = 0u;
  time_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issubmit_ = false;
  isquickfinish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteAcceptQuestCmd::~InviteAcceptQuestCmd() {
  // @@protoc_insertion_point(destructor:Cmd.InviteAcceptQuestCmd)
  SharedDtor();
}

void InviteAcceptQuestCmd::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leadername_;
  }
  if (this != default_instance_) {
  }
}

void InviteAcceptQuestCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteAcceptQuestCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteAcceptQuestCmd_descriptor_;
}

const InviteAcceptQuestCmd& InviteAcceptQuestCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

InviteAcceptQuestCmd* InviteAcceptQuestCmd::default_instance_ = NULL;

InviteAcceptQuestCmd* InviteAcceptQuestCmd::New() const {
  return new InviteAcceptQuestCmd;
}

void InviteAcceptQuestCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InviteAcceptQuestCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(leaderid_, time_);
    cmd_ = 8;
    param_ = 16;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leadername_->clear();
      }
    }
    issubmit_ = false;
  }
  isquickfinish_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteAcceptQuestCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InviteAcceptQuestCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_INVITE_ACCEPT_QUEST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_leaderid;
        break;
      }

      // optional uint64 leaderid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_leaderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_questid;
        break;
      }

      // optional uint32 questid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sign;
        break;
      }

      // optional bytes sign = 6;
      case 6: {
        if (tag == 50) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_leadername;
        break;
      }

      // optional string leadername = 7;
      case 7: {
        if (tag == 58) {
         parse_leadername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leadername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_issubmit;
        break;
      }

      // optional bool issubmit = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_issubmit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issubmit_)));
          set_has_issubmit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_isquickfinish;
        break;
      }

      // optional bool isquickfinish = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_isquickfinish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isquickfinish_)));
          set_has_isquickfinish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InviteAcceptQuestCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InviteAcceptQuestCmd)
  return false;
#undef DO_
}

void InviteAcceptQuestCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InviteAcceptQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_INVITE_ACCEPT_QUEST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 leaderid = 3 [default = 0];
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->leaderid(), output);
  }

  // optional uint32 questid = 4 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->questid(), output);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional bytes sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->sign(), output);
  }

  // optional string leadername = 7;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->leadername(), output);
  }

  // optional bool issubmit = 8 [default = false];
  if (has_issubmit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->issubmit(), output);
  }

  // optional bool isquickfinish = 9 [default = false];
  if (has_isquickfinish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isquickfinish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InviteAcceptQuestCmd)
}

::google::protobuf::uint8* InviteAcceptQuestCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InviteAcceptQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_INVITE_ACCEPT_QUEST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 leaderid = 3 [default = 0];
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->leaderid(), target);
  }

  // optional uint32 questid = 4 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->questid(), target);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional bytes sign = 6;
  if (has_sign()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->sign(), target);
  }

  // optional string leadername = 7;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->leadername(), target);
  }

  // optional bool issubmit = 8 [default = false];
  if (has_issubmit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->issubmit(), target);
  }

  // optional bool isquickfinish = 9 [default = false];
  if (has_isquickfinish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isquickfinish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InviteAcceptQuestCmd)
  return target;
}

int InviteAcceptQuestCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_INVITE_ACCEPT_QUEST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 leaderid = 3 [default = 0];
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderid());
    }

    // optional uint32 questid = 4 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional uint32 time = 5 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bytes sign = 6;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign());
    }

    // optional string leadername = 7;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }

    // optional bool issubmit = 8 [default = false];
    if (has_issubmit()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isquickfinish = 9 [default = false];
    if (has_isquickfinish()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteAcceptQuestCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteAcceptQuestCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteAcceptQuestCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteAcceptQuestCmd::MergeFrom(const InviteAcceptQuestCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
    if (from.has_issubmit()) {
      set_issubmit(from.issubmit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isquickfinish()) {
      set_isquickfinish(from.isquickfinish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteAcceptQuestCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteAcceptQuestCmd::CopyFrom(const InviteAcceptQuestCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteAcceptQuestCmd::IsInitialized() const {

  return true;
}

void InviteAcceptQuestCmd::Swap(InviteAcceptQuestCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(questid_, other->questid_);
    std::swap(time_, other->time_);
    std::swap(sign_, other->sign_);
    std::swap(leadername_, other->leadername_);
    std::swap(issubmit_, other->issubmit_);
    std::swap(isquickfinish_, other->isquickfinish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteAcceptQuestCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteAcceptQuestCmd_descriptor_;
  metadata.reflection = InviteAcceptQuestCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyHelpAccelpQuestCmd::kCmdFieldNumber;
const int ReplyHelpAccelpQuestCmd::kParamFieldNumber;
const int ReplyHelpAccelpQuestCmd::kLeaderidFieldNumber;
const int ReplyHelpAccelpQuestCmd::kQuestidFieldNumber;
const int ReplyHelpAccelpQuestCmd::kTimeFieldNumber;
const int ReplyHelpAccelpQuestCmd::kSignFieldNumber;
const int ReplyHelpAccelpQuestCmd::kAgreeFieldNumber;
const int ReplyHelpAccelpQuestCmd::kIssubmitFieldNumber;
#endif  // !_MSC_VER

ReplyHelpAccelpQuestCmd::ReplyHelpAccelpQuestCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReplyHelpAccelpQuestCmd)
}

void ReplyHelpAccelpQuestCmd::InitAsDefaultInstance() {
}

ReplyHelpAccelpQuestCmd::ReplyHelpAccelpQuestCmd(const ReplyHelpAccelpQuestCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReplyHelpAccelpQuestCmd)
}

void ReplyHelpAccelpQuestCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 15;
  leaderid_ = GOOGLE_ULONGLONG(0);
  questid_ = 0u;
  time_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agree_ = false;
  issubmit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyHelpAccelpQuestCmd::~ReplyHelpAccelpQuestCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReplyHelpAccelpQuestCmd)
  SharedDtor();
}

void ReplyHelpAccelpQuestCmd::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void ReplyHelpAccelpQuestCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyHelpAccelpQuestCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyHelpAccelpQuestCmd_descriptor_;
}

const ReplyHelpAccelpQuestCmd& ReplyHelpAccelpQuestCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

ReplyHelpAccelpQuestCmd* ReplyHelpAccelpQuestCmd::default_instance_ = NULL;

ReplyHelpAccelpQuestCmd* ReplyHelpAccelpQuestCmd::New() const {
  return new ReplyHelpAccelpQuestCmd;
}

void ReplyHelpAccelpQuestCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyHelpAccelpQuestCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(leaderid_, time_);
    ZR_(agree_, issubmit_);
    cmd_ = 8;
    param_ = 15;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyHelpAccelpQuestCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReplyHelpAccelpQuestCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_ACCEPT_AGREE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_leaderid;
        break;
      }

      // optional uint64 leaderid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_leaderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_questid;
        break;
      }

      // optional uint32 questid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sign;
        break;
      }

      // optional bytes sign = 6;
      case 6: {
        if (tag == 50) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_agree;
        break;
      }

      // optional bool agree = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_issubmit;
        break;
      }

      // optional bool issubmit = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_issubmit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issubmit_)));
          set_has_issubmit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReplyHelpAccelpQuestCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReplyHelpAccelpQuestCmd)
  return false;
#undef DO_
}

void ReplyHelpAccelpQuestCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReplyHelpAccelpQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_ACCEPT_AGREE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 leaderid = 3 [default = 0];
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->leaderid(), output);
  }

  // optional uint32 questid = 4 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->questid(), output);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional bytes sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->sign(), output);
  }

  // optional bool agree = 7 [default = false];
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->agree(), output);
  }

  // optional bool issubmit = 8 [default = false];
  if (has_issubmit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->issubmit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReplyHelpAccelpQuestCmd)
}

::google::protobuf::uint8* ReplyHelpAccelpQuestCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReplyHelpAccelpQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_ACCEPT_AGREE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 leaderid = 3 [default = 0];
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->leaderid(), target);
  }

  // optional uint32 questid = 4 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->questid(), target);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional bytes sign = 6;
  if (has_sign()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->sign(), target);
  }

  // optional bool agree = 7 [default = false];
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->agree(), target);
  }

  // optional bool issubmit = 8 [default = false];
  if (has_issubmit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->issubmit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReplyHelpAccelpQuestCmd)
  return target;
}

int ReplyHelpAccelpQuestCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_ACCEPT_AGREE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 leaderid = 3 [default = 0];
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderid());
    }

    // optional uint32 questid = 4 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional uint32 time = 5 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bytes sign = 6;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign());
    }

    // optional bool agree = 7 [default = false];
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // optional bool issubmit = 8 [default = false];
    if (has_issubmit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyHelpAccelpQuestCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyHelpAccelpQuestCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyHelpAccelpQuestCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyHelpAccelpQuestCmd::MergeFrom(const ReplyHelpAccelpQuestCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_issubmit()) {
      set_issubmit(from.issubmit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyHelpAccelpQuestCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyHelpAccelpQuestCmd::CopyFrom(const ReplyHelpAccelpQuestCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyHelpAccelpQuestCmd::IsInitialized() const {

  return true;
}

void ReplyHelpAccelpQuestCmd::Swap(ReplyHelpAccelpQuestCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(questid_, other->questid_);
    std::swap(time_, other->time_);
    std::swap(sign_, other->sign_);
    std::swap(agree_, other->agree_);
    std::swap(issubmit_, other->issubmit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyHelpAccelpQuestCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyHelpAccelpQuestCmd_descriptor_;
  metadata.reflection = ReplyHelpAccelpQuestCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldQuest::kMapidFieldNumber;
const int WorldQuest::kTypeMainFieldNumber;
const int WorldQuest::kTypeBranchFieldNumber;
const int WorldQuest::kTypeDailyFieldNumber;
#endif  // !_MSC_VER

WorldQuest::WorldQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WorldQuest)
}

void WorldQuest::InitAsDefaultInstance() {
}

WorldQuest::WorldQuest(const WorldQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WorldQuest)
}

void WorldQuest::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  type_main_ = false;
  type_branch_ = false;
  type_daily_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldQuest::~WorldQuest() {
  // @@protoc_insertion_point(destructor:Cmd.WorldQuest)
  SharedDtor();
}

void WorldQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldQuest_descriptor_;
}

const WorldQuest& WorldQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

WorldQuest* WorldQuest::default_instance_ = NULL;

WorldQuest* WorldQuest::New() const {
  return new WorldQuest;
}

void WorldQuest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldQuest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mapid_, type_daily_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WorldQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type_main;
        break;
      }

      // optional bool type_main = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_type_main:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &type_main_)));
          set_has_type_main();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type_branch;
        break;
      }

      // optional bool type_branch = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_type_branch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &type_branch_)));
          set_has_type_branch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type_daily;
        break;
      }

      // optional bool type_daily = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_type_daily:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &type_daily_)));
          set_has_type_daily();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WorldQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WorldQuest)
  return false;
#undef DO_
}

void WorldQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WorldQuest)
  // optional uint32 mapid = 1 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional bool type_main = 2 [default = false];
  if (has_type_main()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->type_main(), output);
  }

  // optional bool type_branch = 3 [default = false];
  if (has_type_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->type_branch(), output);
  }

  // optional bool type_daily = 4 [default = false];
  if (has_type_daily()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->type_daily(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WorldQuest)
}

::google::protobuf::uint8* WorldQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WorldQuest)
  // optional uint32 mapid = 1 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional bool type_main = 2 [default = false];
  if (has_type_main()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->type_main(), target);
  }

  // optional bool type_branch = 3 [default = false];
  if (has_type_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->type_branch(), target);
  }

  // optional bool type_daily = 4 [default = false];
  if (has_type_daily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->type_daily(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WorldQuest)
  return target;
}

int WorldQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapid = 1 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional bool type_main = 2 [default = false];
    if (has_type_main()) {
      total_size += 1 + 1;
    }

    // optional bool type_branch = 3 [default = false];
    if (has_type_branch()) {
      total_size += 1 + 1;
    }

    // optional bool type_daily = 4 [default = false];
    if (has_type_daily()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldQuest::MergeFrom(const WorldQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_type_main()) {
      set_type_main(from.type_main());
    }
    if (from.has_type_branch()) {
      set_type_branch(from.type_branch());
    }
    if (from.has_type_daily()) {
      set_type_daily(from.type_daily());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldQuest::CopyFrom(const WorldQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldQuest::IsInitialized() const {

  return true;
}

void WorldQuest::Swap(WorldQuest* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(type_main_, other->type_main_);
    std::swap(type_branch_, other->type_branch_);
    std::swap(type_daily_, other->type_daily_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldQuest_descriptor_;
  metadata.reflection = WorldQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryWorldQuestCmd::kCmdFieldNumber;
const int QueryWorldQuestCmd::kParamFieldNumber;
const int QueryWorldQuestCmd::kQuestsFieldNumber;
#endif  // !_MSC_VER

QueryWorldQuestCmd::QueryWorldQuestCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryWorldQuestCmd)
}

void QueryWorldQuestCmd::InitAsDefaultInstance() {
}

QueryWorldQuestCmd::QueryWorldQuestCmd(const QueryWorldQuestCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryWorldQuestCmd)
}

void QueryWorldQuestCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 17;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryWorldQuestCmd::~QueryWorldQuestCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryWorldQuestCmd)
  SharedDtor();
}

void QueryWorldQuestCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryWorldQuestCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryWorldQuestCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryWorldQuestCmd_descriptor_;
}

const QueryWorldQuestCmd& QueryWorldQuestCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QueryWorldQuestCmd* QueryWorldQuestCmd::default_instance_ = NULL;

QueryWorldQuestCmd* QueryWorldQuestCmd::New() const {
  return new QueryWorldQuestCmd;
}

void QueryWorldQuestCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 8;
    param_ = 17;
  }
  quests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryWorldQuestCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryWorldQuestCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERY_WORLD_QUEST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_quests;
        break;
      }

      // repeated .Cmd.WorldQuest quests = 3;
      case 3: {
        if (tag == 26) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_quests;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryWorldQuestCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryWorldQuestCmd)
  return false;
#undef DO_
}

void QueryWorldQuestCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryWorldQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERY_WORLD_QUEST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.WorldQuest quests = 3;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->quests(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryWorldQuestCmd)
}

::google::protobuf::uint8* QueryWorldQuestCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryWorldQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERY_WORLD_QUEST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.WorldQuest quests = 3;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->quests(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryWorldQuestCmd)
  return target;
}

int QueryWorldQuestCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERY_WORLD_QUEST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.WorldQuest quests = 3;
  total_size += 1 * this->quests_size();
  for (int i = 0; i < this->quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryWorldQuestCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryWorldQuestCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryWorldQuestCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryWorldQuestCmd::MergeFrom(const QueryWorldQuestCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  quests_.MergeFrom(from.quests_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryWorldQuestCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryWorldQuestCmd::CopyFrom(const QueryWorldQuestCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryWorldQuestCmd::IsInitialized() const {

  return true;
}

void QueryWorldQuestCmd::Swap(QueryWorldQuestCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    quests_.Swap(&other->quests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryWorldQuestCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryWorldQuestCmd_descriptor_;
  metadata.reflection = QueryWorldQuestCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestGroupTraceQuestCmd::kCmdFieldNumber;
const int QuestGroupTraceQuestCmd::kParamFieldNumber;
const int QuestGroupTraceQuestCmd::kIdFieldNumber;
const int QuestGroupTraceQuestCmd::kTraceFieldNumber;
#endif  // !_MSC_VER

QuestGroupTraceQuestCmd::QuestGroupTraceQuestCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestGroupTraceQuestCmd)
}

void QuestGroupTraceQuestCmd::InitAsDefaultInstance() {
}

QuestGroupTraceQuestCmd::QuestGroupTraceQuestCmd(const QuestGroupTraceQuestCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestGroupTraceQuestCmd)
}

void QuestGroupTraceQuestCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 18;
  id_ = 0u;
  trace_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestGroupTraceQuestCmd::~QuestGroupTraceQuestCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QuestGroupTraceQuestCmd)
  SharedDtor();
}

void QuestGroupTraceQuestCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestGroupTraceQuestCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestGroupTraceQuestCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestGroupTraceQuestCmd_descriptor_;
}

const QuestGroupTraceQuestCmd& QuestGroupTraceQuestCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QuestGroupTraceQuestCmd* QuestGroupTraceQuestCmd::default_instance_ = NULL;

QuestGroupTraceQuestCmd* QuestGroupTraceQuestCmd::New() const {
  return new QuestGroupTraceQuestCmd;
}

void QuestGroupTraceQuestCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestGroupTraceQuestCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, trace_);
    cmd_ = 8;
    param_ = 18;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestGroupTraceQuestCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestGroupTraceQuestCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTGROUP_TRACE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_trace;
        break;
      }

      // optional bool trace = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_trace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trace_)));
          set_has_trace();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestGroupTraceQuestCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestGroupTraceQuestCmd)
  return false;
#undef DO_
}

void QuestGroupTraceQuestCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestGroupTraceQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTGROUP_TRACE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional bool trace = 4 [default = false];
  if (has_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->trace(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestGroupTraceQuestCmd)
}

::google::protobuf::uint8* QuestGroupTraceQuestCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestGroupTraceQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTGROUP_TRACE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional bool trace = 4 [default = false];
  if (has_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->trace(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestGroupTraceQuestCmd)
  return target;
}

int QuestGroupTraceQuestCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTGROUP_TRACE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool trace = 4 [default = false];
    if (has_trace()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestGroupTraceQuestCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestGroupTraceQuestCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestGroupTraceQuestCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestGroupTraceQuestCmd::MergeFrom(const QuestGroupTraceQuestCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_trace()) {
      set_trace(from.trace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestGroupTraceQuestCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestGroupTraceQuestCmd::CopyFrom(const QuestGroupTraceQuestCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestGroupTraceQuestCmd::IsInitialized() const {

  return true;
}

void QuestGroupTraceQuestCmd::Swap(QuestGroupTraceQuestCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(trace_, other->trace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestGroupTraceQuestCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestGroupTraceQuestCmd_descriptor_;
  metadata.reflection = QuestGroupTraceQuestCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelpQuickFinishBoardQuestCmd::kCmdFieldNumber;
const int HelpQuickFinishBoardQuestCmd::kParamFieldNumber;
const int HelpQuickFinishBoardQuestCmd::kQuestidFieldNumber;
const int HelpQuickFinishBoardQuestCmd::kLeadernameFieldNumber;
#endif  // !_MSC_VER

HelpQuickFinishBoardQuestCmd::HelpQuickFinishBoardQuestCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.HelpQuickFinishBoardQuestCmd)
}

void HelpQuickFinishBoardQuestCmd::InitAsDefaultInstance() {
}

HelpQuickFinishBoardQuestCmd::HelpQuickFinishBoardQuestCmd(const HelpQuickFinishBoardQuestCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.HelpQuickFinishBoardQuestCmd)
}

void HelpQuickFinishBoardQuestCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 19;
  questid_ = 0u;
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelpQuickFinishBoardQuestCmd::~HelpQuickFinishBoardQuestCmd() {
  // @@protoc_insertion_point(destructor:Cmd.HelpQuickFinishBoardQuestCmd)
  SharedDtor();
}

void HelpQuickFinishBoardQuestCmd::SharedDtor() {
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leadername_;
  }
  if (this != default_instance_) {
  }
}

void HelpQuickFinishBoardQuestCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelpQuickFinishBoardQuestCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelpQuickFinishBoardQuestCmd_descriptor_;
}

const HelpQuickFinishBoardQuestCmd& HelpQuickFinishBoardQuestCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

HelpQuickFinishBoardQuestCmd* HelpQuickFinishBoardQuestCmd::default_instance_ = NULL;

HelpQuickFinishBoardQuestCmd* HelpQuickFinishBoardQuestCmd::New() const {
  return new HelpQuickFinishBoardQuestCmd;
}

void HelpQuickFinishBoardQuestCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 8;
    param_ = 19;
    questid_ = 0u;
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leadername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelpQuickFinishBoardQuestCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.HelpQuickFinishBoardQuestCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_QUICK_FINISH_BOARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_questid;
        break;
      }

      // optional uint32 questid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_leadername;
        break;
      }

      // optional string leadername = 4;
      case 4: {
        if (tag == 34) {
         parse_leadername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leadername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.HelpQuickFinishBoardQuestCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.HelpQuickFinishBoardQuestCmd)
  return false;
#undef DO_
}

void HelpQuickFinishBoardQuestCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.HelpQuickFinishBoardQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_QUICK_FINISH_BOARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 questid = 3 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->questid(), output);
  }

  // optional string leadername = 4;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->leadername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.HelpQuickFinishBoardQuestCmd)
}

::google::protobuf::uint8* HelpQuickFinishBoardQuestCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.HelpQuickFinishBoardQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_QUICK_FINISH_BOARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 questid = 3 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->questid(), target);
  }

  // optional string leadername = 4;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->leadername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.HelpQuickFinishBoardQuestCmd)
  return target;
}

int HelpQuickFinishBoardQuestCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_QUICK_FINISH_BOARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 questid = 3 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional string leadername = 4;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelpQuickFinishBoardQuestCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelpQuickFinishBoardQuestCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelpQuickFinishBoardQuestCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelpQuickFinishBoardQuestCmd::MergeFrom(const HelpQuickFinishBoardQuestCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelpQuickFinishBoardQuestCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelpQuickFinishBoardQuestCmd::CopyFrom(const HelpQuickFinishBoardQuestCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelpQuickFinishBoardQuestCmd::IsInitialized() const {

  return true;
}

void HelpQuickFinishBoardQuestCmd::Swap(HelpQuickFinishBoardQuestCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(questid_, other->questid_);
    std::swap(leadername_, other->leadername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelpQuickFinishBoardQuestCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelpQuickFinishBoardQuestCmd_descriptor_;
  metadata.reflection = HelpQuickFinishBoardQuestCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryManualQuestCmd::kCmdFieldNumber;
const int QueryManualQuestCmd::kParamFieldNumber;
const int QueryManualQuestCmd::kVersionFieldNumber;
const int QueryManualQuestCmd::kManualFieldNumber;
#endif  // !_MSC_VER

QueryManualQuestCmd::QueryManualQuestCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryManualQuestCmd)
}

void QueryManualQuestCmd::InitAsDefaultInstance() {
  manual_ = const_cast< ::Cmd::QuestManual*>(&::Cmd::QuestManual::default_instance());
}

QueryManualQuestCmd::QueryManualQuestCmd(const QueryManualQuestCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryManualQuestCmd)
}

void QueryManualQuestCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 21;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manual_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryManualQuestCmd::~QueryManualQuestCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryManualQuestCmd)
  SharedDtor();
}

void QueryManualQuestCmd::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
    delete manual_;
  }
}

void QueryManualQuestCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryManualQuestCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryManualQuestCmd_descriptor_;
}

const QueryManualQuestCmd& QueryManualQuestCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

QueryManualQuestCmd* QueryManualQuestCmd::default_instance_ = NULL;

QueryManualQuestCmd* QueryManualQuestCmd::New() const {
  return new QueryManualQuestCmd;
}

void QueryManualQuestCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 8;
    param_ = 21;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_manual()) {
      if (manual_ != NULL) manual_->::Cmd::QuestManual::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryManualQuestCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryManualQuestCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERY_MANUAL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (tag == 26) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_manual;
        break;
      }

      // optional .Cmd.QuestManual manual = 4;
      case 4: {
        if (tag == 34) {
         parse_manual:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manual()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryManualQuestCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryManualQuestCmd)
  return false;
#undef DO_
}

void QueryManualQuestCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryManualQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERY_MANUAL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // optional .Cmd.QuestManual manual = 4;
  if (has_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->manual(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryManualQuestCmd)
}

::google::protobuf::uint8* QueryManualQuestCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryManualQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERY_MANUAL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // optional .Cmd.QuestManual manual = 4;
  if (has_manual()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->manual(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryManualQuestCmd)
  return target;
}

int QueryManualQuestCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERY_MANUAL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .Cmd.QuestManual manual = 4;
    if (has_manual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manual());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryManualQuestCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryManualQuestCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryManualQuestCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryManualQuestCmd::MergeFrom(const QueryManualQuestCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_manual()) {
      mutable_manual()->::Cmd::QuestManual::MergeFrom(from.manual());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryManualQuestCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryManualQuestCmd::CopyFrom(const QueryManualQuestCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryManualQuestCmd::IsInitialized() const {

  return true;
}

void QueryManualQuestCmd::Swap(QueryManualQuestCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(version_, other->version_);
    std::swap(manual_, other->manual_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryManualQuestCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryManualQuestCmd_descriptor_;
  metadata.reflection = QueryManualQuestCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenPuzzleQuestCmd::kCmdFieldNumber;
const int OpenPuzzleQuestCmd::kParamFieldNumber;
const int OpenPuzzleQuestCmd::kVersionFieldNumber;
const int OpenPuzzleQuestCmd::kIdFieldNumber;
#endif  // !_MSC_VER

OpenPuzzleQuestCmd::OpenPuzzleQuestCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OpenPuzzleQuestCmd)
}

void OpenPuzzleQuestCmd::InitAsDefaultInstance() {
}

OpenPuzzleQuestCmd::OpenPuzzleQuestCmd(const OpenPuzzleQuestCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OpenPuzzleQuestCmd)
}

void OpenPuzzleQuestCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 8;
  param_ = 22;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenPuzzleQuestCmd::~OpenPuzzleQuestCmd() {
  // @@protoc_insertion_point(destructor:Cmd.OpenPuzzleQuestCmd)
  SharedDtor();
}

void OpenPuzzleQuestCmd::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void OpenPuzzleQuestCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenPuzzleQuestCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenPuzzleQuestCmd_descriptor_;
}

const OpenPuzzleQuestCmd& OpenPuzzleQuestCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneQuest_2eproto();
  return *default_instance_;
}

OpenPuzzleQuestCmd* OpenPuzzleQuestCmd::default_instance_ = NULL;

OpenPuzzleQuestCmd* OpenPuzzleQuestCmd::New() const {
  return new OpenPuzzleQuestCmd;
}

void OpenPuzzleQuestCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 8;
    param_ = 22;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenPuzzleQuestCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OpenPuzzleQuestCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_OPEN_PUZZLE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::QuestParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::QuestParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (tag == 26) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint32 id = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OpenPuzzleQuestCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OpenPuzzleQuestCmd)
  return false;
#undef DO_
}

void OpenPuzzleQuestCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OpenPuzzleQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_OPEN_PUZZLE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OpenPuzzleQuestCmd)
}

::google::protobuf::uint8* OpenPuzzleQuestCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OpenPuzzleQuestCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_OPEN_PUZZLE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OpenPuzzleQuestCmd)
  return target;
}

int OpenPuzzleQuestCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_OPEN_PUZZLE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional uint32 id = 4 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenPuzzleQuestCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenPuzzleQuestCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenPuzzleQuestCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenPuzzleQuestCmd::MergeFrom(const OpenPuzzleQuestCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenPuzzleQuestCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenPuzzleQuestCmd::CopyFrom(const OpenPuzzleQuestCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenPuzzleQuestCmd::IsInitialized() const {

  return true;
}

void OpenPuzzleQuestCmd::Swap(OpenPuzzleQuestCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(version_, other->version_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenPuzzleQuestCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenPuzzleQuestCmd_descriptor_;
  metadata.reflection = OpenPuzzleQuestCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
