// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuctionCCmd.proto

#ifndef PROTOBUF_AuctionCCmd_2eproto__INCLUDED
#define PROTOBUF_AuctionCCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "SceneItem.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AuctionCCmd_2eproto();
void protobuf_AssignDesc_AuctionCCmd_2eproto();
void protobuf_ShutdownFile_AuctionCCmd_2eproto();

class NtfAuctionStateCCmd;
class OpenAuctionPanelCCmd;
class SignUpItemInfo;
class NtfSignUpInfoCCmd;
class NtfMySignUpInfoCCmd;
class SignUpItemCCmd;
class AuctionItemInfo;
class NtfAuctionInfoCCmd;
class UpdateAuctionInfoCCmd;
class FlowingWaterInfo;
class ReqAuctionFlowingWaterCCmd;
class UpdateAuctionFlowingWaterCCmd;
class ReqLastAuctionInfoCCmd;
class OfferPriceCCmd;
class AuctionRecord;
class ReqAuctionRecordCCmd;
class TakeAuctionRecordCCmd;
class NtfCanTakeCntCCmd;
class NtfMyOfferPriceCCmd;
class NtfNextAuctionInfoCCmd;
class ReqAuctionInfoCCmd;
class NtfCurAuctionInfoCCmd;
class NtfOverTakePriceCCmd;
class ReqMyTradedPriceCCmd;
class NtfMaskPriceCCmd;
class AuctionDialogCCmd;

enum AuctionCParam {
  AUCTIONCPARAM_NTF_AUCTION_STATE = 1,
  AUCTIONCPARAM_OPEN_AUCTION_PANEL = 2,
  AUCTIONCPARAM_NTF_SIGNUP_INFO = 3,
  AUCTIONCPARAM_NTF_AUCTION_INFO = 4,
  AUCTIONCPARAM_UPDATE_AUCTION_INFO = 5,
  AUCTIONCPARAM_REQ_AUCTION_FLOWINGWATER = 6,
  AUCTIONCPARAM_UPDATE_AUCTION_FLOWINGWATER = 7,
  AUCTIONCPARAM_REQ_LAST_AUCTION_INFO = 8,
  AUCTIONCPARAM_OFFER_PRICE = 9,
  AUCTIONCPARAM_REQ_AUCTION_RECORD = 10,
  AUCTIONCPARAM_TAKE_AUCTION_RECORD = 11,
  AUCTIONCPARAM_SIGNUP_ITEM = 12,
  AUCTIONCPARAM_NTF_CANTAKE_CNT = 13,
  AUCTIONCPARAM_NTF_MY_SIGNUP_INFO = 14,
  AUCTIONCPARAM_NTF_MY_OFFERPRICE = 15,
  AUCTIONCPARAM_NTF_NEXT_AUCTION_INFO = 16,
  AUCTIONCPARAM_REQ_ACUTION_INFO = 17,
  AUCTIONCPARAM_NTF_CUR_AUCTION_INFO = 18,
  AUCTIONCPARAM_NTF_OVERTAKE_PRICE = 19,
  AUCTIONCPARAM_REQ_MY_TRADED_PRICE = 20,
  AUCTIONCPARAM_NTF_MASK_PRICE = 21,
  AUTIONCPARAM_AUCTION_DIALOG = 22
};
bool AuctionCParam_IsValid(int value);
const AuctionCParam AuctionCParam_MIN = AUCTIONCPARAM_NTF_AUCTION_STATE;
const AuctionCParam AuctionCParam_MAX = AUTIONCPARAM_AUCTION_DIALOG;
const int AuctionCParam_ARRAYSIZE = AuctionCParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* AuctionCParam_descriptor();
inline const ::std::string& AuctionCParam_Name(AuctionCParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    AuctionCParam_descriptor(), value);
}
inline bool AuctionCParam_Parse(
    const ::std::string& name, AuctionCParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuctionCParam>(
    AuctionCParam_descriptor(), name, value);
}
enum EAuctionState {
  EAuctionState_Close = 1,
  EAuctionState_SignUp = 2,
  EAuctionState_SignUpVerify = 3,
  EAuctionState_AuctionPublicity = 6,
  EAuctionState_Auction = 4,
  EAuctionState_AuctionEnd = 5
};
bool EAuctionState_IsValid(int value);
const EAuctionState EAuctionState_MIN = EAuctionState_Close;
const EAuctionState EAuctionState_MAX = EAuctionState_AuctionPublicity;
const int EAuctionState_ARRAYSIZE = EAuctionState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAuctionState_descriptor();
inline const ::std::string& EAuctionState_Name(EAuctionState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAuctionState_descriptor(), value);
}
inline bool EAuctionState_Parse(
    const ::std::string& name, EAuctionState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAuctionState>(
    EAuctionState_descriptor(), name, value);
}
enum EAuctionResult {
  EAuctionResult_None = 0,
  EAuctionResult_Fail = 1,
  EAuctionResult_Sucess = 2,
  EAuctionResult_AtAuction = 3
};
bool EAuctionResult_IsValid(int value);
const EAuctionResult EAuctionResult_MIN = EAuctionResult_None;
const EAuctionResult EAuctionResult_MAX = EAuctionResult_AtAuction;
const int EAuctionResult_ARRAYSIZE = EAuctionResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAuctionResult_descriptor();
inline const ::std::string& EAuctionResult_Name(EAuctionResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAuctionResult_descriptor(), value);
}
inline bool EAuctionResult_Parse(
    const ::std::string& name, EAuctionResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAuctionResult>(
    EAuctionResult_descriptor(), name, value);
}
enum AuctionEvent {
  AuctionEvent_None = 0,
  AuctionEvent_Start = 1,
  AuctionEvent_OfferPrice = 2,
  AuctionEvent_Result1 = 3,
  AuctionEvent_Result2 = 4,
  AuctionEvent_Result3 = 5,
  AuctionEvent_ResultSuccess = 6,
  AuctionEvent_ResultFail = 7
};
bool AuctionEvent_IsValid(int value);
const AuctionEvent AuctionEvent_MIN = AuctionEvent_None;
const AuctionEvent AuctionEvent_MAX = AuctionEvent_ResultFail;
const int AuctionEvent_ARRAYSIZE = AuctionEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* AuctionEvent_descriptor();
inline const ::std::string& AuctionEvent_Name(AuctionEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    AuctionEvent_descriptor(), value);
}
inline bool AuctionEvent_Parse(
    const ::std::string& name, AuctionEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuctionEvent>(
    AuctionEvent_descriptor(), name, value);
}
enum ERecordType {
  ERecordType_SignUp = 1,
  ERecordType_SignUpSuccess = 2,
  ERecordType_SignUpFail = 3,
  ERecordType_SellSucess = 4,
  ERecordType_SellFail = 5,
  ERecordType_SellSucessPass = 6,
  ERecordType_SellSucessNoPass = 7,
  ERecordType_MaxOfferPrice = 8,
  ERecordType_OverTakePrice = 9,
  ERecordType_BuySuccess = 10,
  ERecordType_BuySuccessPass = 11,
  ERecordType_BuySuccessNoPass = 12
};
bool ERecordType_IsValid(int value);
const ERecordType ERecordType_MIN = ERecordType_SignUp;
const ERecordType ERecordType_MAX = ERecordType_BuySuccessNoPass;
const int ERecordType_ARRAYSIZE = ERecordType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERecordType_descriptor();
inline const ::std::string& ERecordType_Name(ERecordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERecordType_descriptor(), value);
}
inline bool ERecordType_Parse(
    const ::std::string& name, ERecordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERecordType>(
    ERecordType_descriptor(), name, value);
}
enum EAuctionTakeStatus {
  EAuctionTakeStatus_None = 0,
  EAuctionTakeStatus_CanTake = 1,
  EAuctionTakeStatus_Took = 2
};
bool EAuctionTakeStatus_IsValid(int value);
const EAuctionTakeStatus EAuctionTakeStatus_MIN = EAuctionTakeStatus_None;
const EAuctionTakeStatus EAuctionTakeStatus_MAX = EAuctionTakeStatus_Took;
const int EAuctionTakeStatus_ARRAYSIZE = EAuctionTakeStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAuctionTakeStatus_descriptor();
inline const ::std::string& EAuctionTakeStatus_Name(EAuctionTakeStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAuctionTakeStatus_descriptor(), value);
}
inline bool EAuctionTakeStatus_Parse(
    const ::std::string& name, EAuctionTakeStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAuctionTakeStatus>(
    EAuctionTakeStatus_descriptor(), name, value);
}
enum EDialogType {
  EDialogType_None = 0,
  EDialogType_AuctionStart = 1,
  EDialogType_AuctionSuccess = 2,
  EDialogType_AuctionFail = 3,
  EDialogType_AuctionPubicity = 4
};
bool EDialogType_IsValid(int value);
const EDialogType EDialogType_MIN = EDialogType_None;
const EDialogType EDialogType_MAX = EDialogType_AuctionPubicity;
const int EDialogType_ARRAYSIZE = EDialogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDialogType_descriptor();
inline const ::std::string& EDialogType_Name(EDialogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDialogType_descriptor(), value);
}
inline bool EDialogType_Parse(
    const ::std::string& name, EDialogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDialogType>(
    EDialogType_descriptor(), name, value);
}
// ===================================================================

class NtfAuctionStateCCmd : public ::google::protobuf::Message {
 public:
  NtfAuctionStateCCmd();
  virtual ~NtfAuctionStateCCmd();

  NtfAuctionStateCCmd(const NtfAuctionStateCCmd& from);

  inline NtfAuctionStateCCmd& operator=(const NtfAuctionStateCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfAuctionStateCCmd& default_instance();

  void Swap(NtfAuctionStateCCmd* other);

  // implements Message ----------------------------------------------

  NtfAuctionStateCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfAuctionStateCCmd& from);
  void MergeFrom(const NtfAuctionStateCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_AUCTION_STATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional .Cmd.EAuctionState state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::Cmd::EAuctionState state() const;
  inline void set_state(::Cmd::EAuctionState value);

  // optional uint64 batchid = 4;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 4;
  inline ::google::protobuf::uint64 batchid() const;
  inline void set_batchid(::google::protobuf::uint64 value);

  // optional uint32 auctiontime = 5;
  inline bool has_auctiontime() const;
  inline void clear_auctiontime();
  static const int kAuctiontimeFieldNumber = 5;
  inline ::google::protobuf::uint32 auctiontime() const;
  inline void set_auctiontime(::google::protobuf::uint32 value);

  // optional bool delay = 6;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 6;
  inline bool delay() const;
  inline void set_delay(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfAuctionStateCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_batchid();
  inline void clear_has_batchid();
  inline void set_has_auctiontime();
  inline void clear_has_auctiontime();
  inline void set_has_delay();
  inline void clear_has_delay();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 batchid_;
  int state_;
  ::google::protobuf::uint32 auctiontime_;
  bool delay_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfAuctionStateCCmd* default_instance_;
};
// -------------------------------------------------------------------

class OpenAuctionPanelCCmd : public ::google::protobuf::Message {
 public:
  OpenAuctionPanelCCmd();
  virtual ~OpenAuctionPanelCCmd();

  OpenAuctionPanelCCmd(const OpenAuctionPanelCCmd& from);

  inline OpenAuctionPanelCCmd& operator=(const OpenAuctionPanelCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenAuctionPanelCCmd& default_instance();

  void Swap(OpenAuctionPanelCCmd* other);

  // implements Message ----------------------------------------------

  OpenAuctionPanelCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenAuctionPanelCCmd& from);
  void MergeFrom(const OpenAuctionPanelCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_OPEN_AUCTION_PANEL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional bool open = 3;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 3;
  inline bool open() const;
  inline void set_open(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.OpenAuctionPanelCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_open();
  inline void clear_has_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  bool open_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static OpenAuctionPanelCCmd* default_instance_;
};
// -------------------------------------------------------------------

class SignUpItemInfo : public ::google::protobuf::Message {
 public:
  SignUpItemInfo();
  virtual ~SignUpItemInfo();

  SignUpItemInfo(const SignUpItemInfo& from);

  inline SignUpItemInfo& operator=(const SignUpItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignUpItemInfo& default_instance();

  void Swap(SignUpItemInfo* other);

  // implements Message ----------------------------------------------

  SignUpItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignUpItemInfo& from);
  void MergeFrom(const SignUpItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 price = 2;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional uint32 auction = 3 [default = 0];
  inline bool has_auction() const;
  inline void clear_auction();
  static const int kAuctionFieldNumber = 3;
  inline ::google::protobuf::uint32 auction() const;
  inline void set_auction(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SignUpItemInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_auction();
  inline void clear_has_auction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 price_;
  ::google::protobuf::uint32 auction_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static SignUpItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class NtfSignUpInfoCCmd : public ::google::protobuf::Message {
 public:
  NtfSignUpInfoCCmd();
  virtual ~NtfSignUpInfoCCmd();

  NtfSignUpInfoCCmd(const NtfSignUpInfoCCmd& from);

  inline NtfSignUpInfoCCmd& operator=(const NtfSignUpInfoCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfSignUpInfoCCmd& default_instance();

  void Swap(NtfSignUpInfoCCmd* other);

  // implements Message ----------------------------------------------

  NtfSignUpInfoCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfSignUpInfoCCmd& from);
  void MergeFrom(const NtfSignUpInfoCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_SIGNUP_INFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // repeated .Cmd.SignUpItemInfo iteminfos = 3;
  inline int iteminfos_size() const;
  inline void clear_iteminfos();
  static const int kIteminfosFieldNumber = 3;
  inline const ::Cmd::SignUpItemInfo& iteminfos(int index) const;
  inline ::Cmd::SignUpItemInfo* mutable_iteminfos(int index);
  inline ::Cmd::SignUpItemInfo* add_iteminfos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SignUpItemInfo >&
      iteminfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SignUpItemInfo >*
      mutable_iteminfos();

  // @@protoc_insertion_point(class_scope:Cmd.NtfSignUpInfoCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SignUpItemInfo > iteminfos_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfSignUpInfoCCmd* default_instance_;
};
// -------------------------------------------------------------------

class NtfMySignUpInfoCCmd : public ::google::protobuf::Message {
 public:
  NtfMySignUpInfoCCmd();
  virtual ~NtfMySignUpInfoCCmd();

  NtfMySignUpInfoCCmd(const NtfMySignUpInfoCCmd& from);

  inline NtfMySignUpInfoCCmd& operator=(const NtfMySignUpInfoCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfMySignUpInfoCCmd& default_instance();

  void Swap(NtfMySignUpInfoCCmd* other);

  // implements Message ----------------------------------------------

  NtfMySignUpInfoCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfMySignUpInfoCCmd& from);
  void MergeFrom(const NtfMySignUpInfoCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MY_SIGNUP_INFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // repeated uint32 signuped = 4;
  inline int signuped_size() const;
  inline void clear_signuped();
  static const int kSignupedFieldNumber = 4;
  inline ::google::protobuf::uint32 signuped(int index) const;
  inline void set_signuped(int index, ::google::protobuf::uint32 value);
  inline void add_signuped(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      signuped() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_signuped();

  // @@protoc_insertion_point(class_scope:Cmd.NtfMySignUpInfoCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > signuped_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfMySignUpInfoCCmd* default_instance_;
};
// -------------------------------------------------------------------

class SignUpItemCCmd : public ::google::protobuf::Message {
 public:
  SignUpItemCCmd();
  virtual ~SignUpItemCCmd();

  SignUpItemCCmd(const SignUpItemCCmd& from);

  inline SignUpItemCCmd& operator=(const SignUpItemCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignUpItemCCmd& default_instance();

  void Swap(SignUpItemCCmd* other);

  // implements Message ----------------------------------------------

  SignUpItemCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignUpItemCCmd& from);
  void MergeFrom(const SignUpItemCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_SIGNUP_ITEM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional .Cmd.SignUpItemInfo iteminfo = 3;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kIteminfoFieldNumber = 3;
  inline const ::Cmd::SignUpItemInfo& iteminfo() const;
  inline ::Cmd::SignUpItemInfo* mutable_iteminfo();
  inline ::Cmd::SignUpItemInfo* release_iteminfo();
  inline void set_allocated_iteminfo(::Cmd::SignUpItemInfo* iteminfo);

  // optional bool ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline bool ret() const;
  inline void set_ret(bool value);

  // optional string guid = 5;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 5;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // @@protoc_insertion_point(class_scope:Cmd.SignUpItemCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::SignUpItemInfo* iteminfo_;
  ::std::string* guid_;
  bool ret_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static SignUpItemCCmd* default_instance_;
};
// -------------------------------------------------------------------

class AuctionItemInfo : public ::google::protobuf::Message {
 public:
  AuctionItemInfo();
  virtual ~AuctionItemInfo();

  AuctionItemInfo(const AuctionItemInfo& from);

  inline AuctionItemInfo& operator=(const AuctionItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionItemInfo& default_instance();

  void Swap(AuctionItemInfo* other);

  // implements Message ----------------------------------------------

  AuctionItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionItemInfo& from);
  void MergeFrom(const AuctionItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 price = 2;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional string seller = 3;
  inline bool has_seller() const;
  inline void clear_seller();
  static const int kSellerFieldNumber = 3;
  inline const ::std::string& seller() const;
  inline void set_seller(const ::std::string& value);
  inline void set_seller(const char* value);
  inline void set_seller(const char* value, size_t size);
  inline ::std::string* mutable_seller();
  inline ::std::string* release_seller();
  inline void set_allocated_seller(::std::string* seller);

  // optional uint64 sellerid = 4;
  inline bool has_sellerid() const;
  inline void clear_sellerid();
  static const int kSelleridFieldNumber = 4;
  inline ::google::protobuf::uint64 sellerid() const;
  inline void set_sellerid(::google::protobuf::uint64 value);

  // optional .Cmd.EAuctionResult result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::Cmd::EAuctionResult result() const;
  inline void set_result(::Cmd::EAuctionResult value);

  // optional uint32 people_cnt = 6;
  inline bool has_people_cnt() const;
  inline void clear_people_cnt();
  static const int kPeopleCntFieldNumber = 6;
  inline ::google::protobuf::uint32 people_cnt() const;
  inline void set_people_cnt(::google::protobuf::uint32 value);

  // optional uint64 trade_price = 7;
  inline bool has_trade_price() const;
  inline void clear_trade_price();
  static const int kTradePriceFieldNumber = 7;
  inline ::google::protobuf::uint64 trade_price() const;
  inline void set_trade_price(::google::protobuf::uint64 value);

  // optional uint32 auction_time = 8;
  inline bool has_auction_time() const;
  inline void clear_auction_time();
  static const int kAuctionTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 auction_time() const;
  inline void set_auction_time(::google::protobuf::uint32 value);

  // optional uint64 cur_price = 10;
  inline bool has_cur_price() const;
  inline void clear_cur_price();
  static const int kCurPriceFieldNumber = 10;
  inline ::google::protobuf::uint64 cur_price() const;
  inline void set_cur_price(::google::protobuf::uint64 value);

  // optional uint32 mask_price = 11;
  inline bool has_mask_price() const;
  inline void clear_mask_price();
  static const int kMaskPriceFieldNumber = 11;
  inline ::google::protobuf::uint32 mask_price() const;
  inline void set_mask_price(::google::protobuf::uint32 value);

  // optional uint64 signup_id = 12;
  inline bool has_signup_id() const;
  inline void clear_signup_id();
  static const int kSignupIdFieldNumber = 12;
  inline ::google::protobuf::uint64 signup_id() const;
  inline void set_signup_id(::google::protobuf::uint64 value);

  // optional .Cmd.ItemData itemdata = 13;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemdataFieldNumber = 13;
  inline const ::Cmd::ItemData& itemdata() const;
  inline ::Cmd::ItemData* mutable_itemdata();
  inline ::Cmd::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::Cmd::ItemData* itemdata);

  // @@protoc_insertion_point(class_scope:Cmd.AuctionItemInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_seller();
  inline void clear_has_seller();
  inline void set_has_sellerid();
  inline void clear_has_sellerid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_people_cnt();
  inline void clear_has_people_cnt();
  inline void set_has_trade_price();
  inline void clear_has_trade_price();
  inline void set_has_auction_time();
  inline void clear_has_auction_time();
  inline void set_has_cur_price();
  inline void clear_has_cur_price();
  inline void set_has_mask_price();
  inline void clear_has_mask_price();
  inline void set_has_signup_id();
  inline void clear_has_signup_id();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 price_;
  ::std::string* seller_;
  ::google::protobuf::uint64 sellerid_;
  int result_;
  ::google::protobuf::uint32 people_cnt_;
  ::google::protobuf::uint64 trade_price_;
  ::google::protobuf::uint64 cur_price_;
  ::google::protobuf::uint32 auction_time_;
  ::google::protobuf::uint32 mask_price_;
  ::google::protobuf::uint64 signup_id_;
  ::Cmd::ItemData* itemdata_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static AuctionItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class NtfAuctionInfoCCmd : public ::google::protobuf::Message {
 public:
  NtfAuctionInfoCCmd();
  virtual ~NtfAuctionInfoCCmd();

  NtfAuctionInfoCCmd(const NtfAuctionInfoCCmd& from);

  inline NtfAuctionInfoCCmd& operator=(const NtfAuctionInfoCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfAuctionInfoCCmd& default_instance();

  void Swap(NtfAuctionInfoCCmd* other);

  // implements Message ----------------------------------------------

  NtfAuctionInfoCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfAuctionInfoCCmd& from);
  void MergeFrom(const NtfAuctionInfoCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_AUCTION_INFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // repeated .Cmd.AuctionItemInfo iteminfos = 3;
  inline int iteminfos_size() const;
  inline void clear_iteminfos();
  static const int kIteminfosFieldNumber = 3;
  inline const ::Cmd::AuctionItemInfo& iteminfos(int index) const;
  inline ::Cmd::AuctionItemInfo* mutable_iteminfos(int index);
  inline ::Cmd::AuctionItemInfo* add_iteminfos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AuctionItemInfo >&
      iteminfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AuctionItemInfo >*
      mutable_iteminfos();

  // optional uint64 batchid = 4;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 4;
  inline ::google::protobuf::uint64 batchid() const;
  inline void set_batchid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfAuctionInfoCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_batchid();
  inline void clear_has_batchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AuctionItemInfo > iteminfos_;
  ::google::protobuf::uint64 batchid_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfAuctionInfoCCmd* default_instance_;
};
// -------------------------------------------------------------------

class UpdateAuctionInfoCCmd : public ::google::protobuf::Message {
 public:
  UpdateAuctionInfoCCmd();
  virtual ~UpdateAuctionInfoCCmd();

  UpdateAuctionInfoCCmd(const UpdateAuctionInfoCCmd& from);

  inline UpdateAuctionInfoCCmd& operator=(const UpdateAuctionInfoCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateAuctionInfoCCmd& default_instance();

  void Swap(UpdateAuctionInfoCCmd* other);

  // implements Message ----------------------------------------------

  UpdateAuctionInfoCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateAuctionInfoCCmd& from);
  void MergeFrom(const UpdateAuctionInfoCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_UPDATE_AUCTION_INFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional .Cmd.AuctionItemInfo iteminfo = 3;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kIteminfoFieldNumber = 3;
  inline const ::Cmd::AuctionItemInfo& iteminfo() const;
  inline ::Cmd::AuctionItemInfo* mutable_iteminfo();
  inline ::Cmd::AuctionItemInfo* release_iteminfo();
  inline void set_allocated_iteminfo(::Cmd::AuctionItemInfo* iteminfo);

  // optional uint64 batchid = 4;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 4;
  inline ::google::protobuf::uint64 batchid() const;
  inline void set_batchid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.UpdateAuctionInfoCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();
  inline void set_has_batchid();
  inline void clear_has_batchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::AuctionItemInfo* iteminfo_;
  ::google::protobuf::uint64 batchid_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static UpdateAuctionInfoCCmd* default_instance_;
};
// -------------------------------------------------------------------

class FlowingWaterInfo : public ::google::protobuf::Message {
 public:
  FlowingWaterInfo();
  virtual ~FlowingWaterInfo();

  FlowingWaterInfo(const FlowingWaterInfo& from);

  inline FlowingWaterInfo& operator=(const FlowingWaterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlowingWaterInfo& default_instance();

  void Swap(FlowingWaterInfo* other);

  // implements Message ----------------------------------------------

  FlowingWaterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlowingWaterInfo& from);
  void MergeFrom(const FlowingWaterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional .Cmd.AuctionEvent event = 2;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 2;
  inline ::Cmd::AuctionEvent event() const;
  inline void set_event(::Cmd::AuctionEvent value);

  // optional uint64 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::uint64 price() const;
  inline void set_price(::google::protobuf::uint64 value);

  // optional string player_name = 4;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 4;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional uint32 zoneid = 5;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 5;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional bool max_price = 6;
  inline bool has_max_price() const;
  inline void clear_max_price();
  static const int kMaxPriceFieldNumber = 6;
  inline bool max_price() const;
  inline void set_max_price(bool value);

  // optional uint64 player_id = 7;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 7;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.FlowingWaterInfo)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_max_price();
  inline void clear_has_max_price();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 time_;
  int event_;
  ::google::protobuf::uint64 price_;
  ::std::string* player_name_;
  ::google::protobuf::uint32 zoneid_;
  bool max_price_;
  ::google::protobuf::uint64 player_id_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static FlowingWaterInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqAuctionFlowingWaterCCmd : public ::google::protobuf::Message {
 public:
  ReqAuctionFlowingWaterCCmd();
  virtual ~ReqAuctionFlowingWaterCCmd();

  ReqAuctionFlowingWaterCCmd(const ReqAuctionFlowingWaterCCmd& from);

  inline ReqAuctionFlowingWaterCCmd& operator=(const ReqAuctionFlowingWaterCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAuctionFlowingWaterCCmd& default_instance();

  void Swap(ReqAuctionFlowingWaterCCmd* other);

  // implements Message ----------------------------------------------

  ReqAuctionFlowingWaterCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAuctionFlowingWaterCCmd& from);
  void MergeFrom(const ReqAuctionFlowingWaterCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_AUCTION_FLOWINGWATER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional uint64 batchid = 3;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 3;
  inline ::google::protobuf::uint64 batchid() const;
  inline void set_batchid(::google::protobuf::uint64 value);

  // optional uint32 itemid = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 page_index = 5;
  inline bool has_page_index() const;
  inline void clear_page_index();
  static const int kPageIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 page_index() const;
  inline void set_page_index(::google::protobuf::uint32 value);

  // repeated .Cmd.FlowingWaterInfo flowingwater = 6;
  inline int flowingwater_size() const;
  inline void clear_flowingwater();
  static const int kFlowingwaterFieldNumber = 6;
  inline const ::Cmd::FlowingWaterInfo& flowingwater(int index) const;
  inline ::Cmd::FlowingWaterInfo* mutable_flowingwater(int index);
  inline ::Cmd::FlowingWaterInfo* add_flowingwater();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FlowingWaterInfo >&
      flowingwater() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::FlowingWaterInfo >*
      mutable_flowingwater();

  // optional uint64 signup_id = 7;
  inline bool has_signup_id() const;
  inline void clear_signup_id();
  static const int kSignupIdFieldNumber = 7;
  inline ::google::protobuf::uint64 signup_id() const;
  inline void set_signup_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ReqAuctionFlowingWaterCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_batchid();
  inline void clear_has_batchid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_page_index();
  inline void clear_has_page_index();
  inline void set_has_signup_id();
  inline void clear_has_signup_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 batchid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 page_index_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::FlowingWaterInfo > flowingwater_;
  ::google::protobuf::uint64 signup_id_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqAuctionFlowingWaterCCmd* default_instance_;
};
// -------------------------------------------------------------------

class UpdateAuctionFlowingWaterCCmd : public ::google::protobuf::Message {
 public:
  UpdateAuctionFlowingWaterCCmd();
  virtual ~UpdateAuctionFlowingWaterCCmd();

  UpdateAuctionFlowingWaterCCmd(const UpdateAuctionFlowingWaterCCmd& from);

  inline UpdateAuctionFlowingWaterCCmd& operator=(const UpdateAuctionFlowingWaterCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateAuctionFlowingWaterCCmd& default_instance();

  void Swap(UpdateAuctionFlowingWaterCCmd* other);

  // implements Message ----------------------------------------------

  UpdateAuctionFlowingWaterCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateAuctionFlowingWaterCCmd& from);
  void MergeFrom(const UpdateAuctionFlowingWaterCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_UPDATE_AUCTION_FLOWINGWATER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional uint64 batchid = 3;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 3;
  inline ::google::protobuf::uint64 batchid() const;
  inline void set_batchid(::google::protobuf::uint64 value);

  // optional uint32 itemid = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional .Cmd.FlowingWaterInfo flowingwater = 5;
  inline bool has_flowingwater() const;
  inline void clear_flowingwater();
  static const int kFlowingwaterFieldNumber = 5;
  inline const ::Cmd::FlowingWaterInfo& flowingwater() const;
  inline ::Cmd::FlowingWaterInfo* mutable_flowingwater();
  inline ::Cmd::FlowingWaterInfo* release_flowingwater();
  inline void set_allocated_flowingwater(::Cmd::FlowingWaterInfo* flowingwater);

  // optional uint64 signup_id = 6;
  inline bool has_signup_id() const;
  inline void clear_signup_id();
  static const int kSignupIdFieldNumber = 6;
  inline ::google::protobuf::uint64 signup_id() const;
  inline void set_signup_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.UpdateAuctionFlowingWaterCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_batchid();
  inline void clear_has_batchid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_flowingwater();
  inline void clear_has_flowingwater();
  inline void set_has_signup_id();
  inline void clear_has_signup_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 batchid_;
  ::Cmd::FlowingWaterInfo* flowingwater_;
  ::google::protobuf::uint64 signup_id_;
  ::google::protobuf::uint32 itemid_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static UpdateAuctionFlowingWaterCCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReqLastAuctionInfoCCmd : public ::google::protobuf::Message {
 public:
  ReqLastAuctionInfoCCmd();
  virtual ~ReqLastAuctionInfoCCmd();

  ReqLastAuctionInfoCCmd(const ReqLastAuctionInfoCCmd& from);

  inline ReqLastAuctionInfoCCmd& operator=(const ReqLastAuctionInfoCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLastAuctionInfoCCmd& default_instance();

  void Swap(ReqLastAuctionInfoCCmd* other);

  // implements Message ----------------------------------------------

  ReqLastAuctionInfoCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLastAuctionInfoCCmd& from);
  void MergeFrom(const ReqLastAuctionInfoCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_LAST_AUCTION_INFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // @@protoc_insertion_point(class_scope:Cmd.ReqLastAuctionInfoCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqLastAuctionInfoCCmd* default_instance_;
};
// -------------------------------------------------------------------

class OfferPriceCCmd : public ::google::protobuf::Message {
 public:
  OfferPriceCCmd();
  virtual ~OfferPriceCCmd();

  OfferPriceCCmd(const OfferPriceCCmd& from);

  inline OfferPriceCCmd& operator=(const OfferPriceCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfferPriceCCmd& default_instance();

  void Swap(OfferPriceCCmd* other);

  // implements Message ----------------------------------------------

  OfferPriceCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfferPriceCCmd& from);
  void MergeFrom(const OfferPriceCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_OFFER_PRICE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional uint32 itemid = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint64 max_price = 4;
  inline bool has_max_price() const;
  inline void clear_max_price();
  static const int kMaxPriceFieldNumber = 4;
  inline ::google::protobuf::uint64 max_price() const;
  inline void set_max_price(::google::protobuf::uint64 value);

  // optional uint64 add_price = 5;
  inline bool has_add_price() const;
  inline void clear_add_price();
  static const int kAddPriceFieldNumber = 5;
  inline ::google::protobuf::uint64 add_price() const;
  inline void set_add_price(::google::protobuf::uint64 value);

  // optional uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint64 signup_id = 7;
  inline bool has_signup_id() const;
  inline void clear_signup_id();
  static const int kSignupIdFieldNumber = 7;
  inline ::google::protobuf::uint64 signup_id() const;
  inline void set_signup_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.OfferPriceCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_max_price();
  inline void clear_has_max_price();
  inline void set_has_add_price();
  inline void clear_has_add_price();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_signup_id();
  inline void clear_has_signup_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 max_price_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint64 add_price_;
  ::google::protobuf::uint64 signup_id_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static OfferPriceCCmd* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRecord : public ::google::protobuf::Message {
 public:
  AuctionRecord();
  virtual ~AuctionRecord();

  AuctionRecord(const AuctionRecord& from);

  inline AuctionRecord& operator=(const AuctionRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRecord& default_instance();

  void Swap(AuctionRecord* other);

  // implements Message ----------------------------------------------

  AuctionRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRecord& from);
  void MergeFrom(const AuctionRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .Cmd.ERecordType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Cmd::ERecordType type() const;
  inline void set_type(::Cmd::ERecordType value);

  // optional .Cmd.EAuctionTakeStatus take_status = 3;
  inline bool has_take_status() const;
  inline void clear_take_status();
  static const int kTakeStatusFieldNumber = 3;
  inline ::Cmd::EAuctionTakeStatus take_status() const;
  inline void set_take_status(::Cmd::EAuctionTakeStatus value);

  // optional uint32 itemid = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint64 price = 5;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 5;
  inline ::google::protobuf::uint64 price() const;
  inline void set_price(::google::protobuf::uint64 value);

  // optional string seller = 6;
  inline bool has_seller() const;
  inline void clear_seller();
  static const int kSellerFieldNumber = 6;
  inline const ::std::string& seller() const;
  inline void set_seller(const ::std::string& value);
  inline void set_seller(const char* value);
  inline void set_seller(const char* value, size_t size);
  inline ::std::string* mutable_seller();
  inline ::std::string* release_seller();
  inline void set_allocated_seller(::std::string* seller);

  // optional string buyer = 7;
  inline bool has_buyer() const;
  inline void clear_buyer();
  static const int kBuyerFieldNumber = 7;
  inline const ::std::string& buyer() const;
  inline void set_buyer(const ::std::string& value);
  inline void set_buyer(const char* value);
  inline void set_buyer(const char* value, size_t size);
  inline ::std::string* mutable_buyer();
  inline ::std::string* release_buyer();
  inline void set_allocated_buyer(::std::string* buyer);

  // optional uint32 zoneid = 8;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 8;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint64 cost_money = 9;
  inline bool has_cost_money() const;
  inline void clear_cost_money();
  static const int kCostMoneyFieldNumber = 9;
  inline ::google::protobuf::uint64 cost_money() const;
  inline void set_cost_money(::google::protobuf::uint64 value);

  // optional uint64 get_money = 10;
  inline bool has_get_money() const;
  inline void clear_get_money();
  static const int kGetMoneyFieldNumber = 10;
  inline ::google::protobuf::uint64 get_money() const;
  inline void set_get_money(::google::protobuf::uint64 value);

  // optional uint64 tax = 11;
  inline bool has_tax() const;
  inline void clear_tax();
  static const int kTaxFieldNumber = 11;
  inline ::google::protobuf::uint64 tax() const;
  inline void set_tax(::google::protobuf::uint64 value);

  // optional uint64 batchid = 12;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 12;
  inline ::google::protobuf::uint64 batchid() const;
  inline void set_batchid(::google::protobuf::uint64 value);

  // optional uint32 time = 13;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 13;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 signup_id = 14;
  inline bool has_signup_id() const;
  inline void clear_signup_id();
  static const int kSignupIdFieldNumber = 14;
  inline ::google::protobuf::uint64 signup_id() const;
  inline void set_signup_id(::google::protobuf::uint64 value);

  // optional .Cmd.ItemData itemdata = 15;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemdataFieldNumber = 15;
  inline const ::Cmd::ItemData& itemdata() const;
  inline ::Cmd::ItemData* mutable_itemdata();
  inline ::Cmd::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::Cmd::ItemData* itemdata);

  // @@protoc_insertion_point(class_scope:Cmd.AuctionRecord)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_take_status();
  inline void clear_has_take_status();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_seller();
  inline void clear_has_seller();
  inline void set_has_buyer();
  inline void clear_has_buyer();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_cost_money();
  inline void clear_has_cost_money();
  inline void set_has_get_money();
  inline void clear_has_get_money();
  inline void set_has_tax();
  inline void clear_has_tax();
  inline void set_has_batchid();
  inline void clear_has_batchid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_signup_id();
  inline void clear_has_signup_id();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  int type_;
  int take_status_;
  ::google::protobuf::uint64 price_;
  ::std::string* seller_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 zoneid_;
  ::std::string* buyer_;
  ::google::protobuf::uint64 cost_money_;
  ::google::protobuf::uint64 get_money_;
  ::google::protobuf::uint64 tax_;
  ::google::protobuf::uint64 batchid_;
  ::google::protobuf::uint64 signup_id_;
  ::Cmd::ItemData* itemdata_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static AuctionRecord* default_instance_;
};
// -------------------------------------------------------------------

class ReqAuctionRecordCCmd : public ::google::protobuf::Message {
 public:
  ReqAuctionRecordCCmd();
  virtual ~ReqAuctionRecordCCmd();

  ReqAuctionRecordCCmd(const ReqAuctionRecordCCmd& from);

  inline ReqAuctionRecordCCmd& operator=(const ReqAuctionRecordCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAuctionRecordCCmd& default_instance();

  void Swap(ReqAuctionRecordCCmd* other);

  // implements Message ----------------------------------------------

  ReqAuctionRecordCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAuctionRecordCCmd& from);
  void MergeFrom(const ReqAuctionRecordCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_AUCTION_RECORD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint64 total_page_cnt = 4;
  inline bool has_total_page_cnt() const;
  inline void clear_total_page_cnt();
  static const int kTotalPageCntFieldNumber = 4;
  inline ::google::protobuf::uint64 total_page_cnt() const;
  inline void set_total_page_cnt(::google::protobuf::uint64 value);

  // repeated .Cmd.AuctionRecord records = 5;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 5;
  inline const ::Cmd::AuctionRecord& records(int index) const;
  inline ::Cmd::AuctionRecord* mutable_records(int index);
  inline ::Cmd::AuctionRecord* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AuctionRecord >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AuctionRecord >*
      mutable_records();

  // @@protoc_insertion_point(class_scope:Cmd.ReqAuctionRecordCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_total_page_cnt();
  inline void clear_has_total_page_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 total_page_cnt_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AuctionRecord > records_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqAuctionRecordCCmd* default_instance_;
};
// -------------------------------------------------------------------

class TakeAuctionRecordCCmd : public ::google::protobuf::Message {
 public:
  TakeAuctionRecordCCmd();
  virtual ~TakeAuctionRecordCCmd();

  TakeAuctionRecordCCmd(const TakeAuctionRecordCCmd& from);

  inline TakeAuctionRecordCCmd& operator=(const TakeAuctionRecordCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeAuctionRecordCCmd& default_instance();

  void Swap(TakeAuctionRecordCCmd* other);

  // implements Message ----------------------------------------------

  TakeAuctionRecordCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TakeAuctionRecordCCmd& from);
  void MergeFrom(const TakeAuctionRecordCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_TAKE_AUCTION_RECORD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .Cmd.ERecordType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::ERecordType type() const;
  inline void set_type(::Cmd::ERecordType value);

  // optional bool ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline bool ret() const;
  inline void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.TakeAuctionRecordCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  int type_;
  bool ret_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static TakeAuctionRecordCCmd* default_instance_;
};
// -------------------------------------------------------------------

class NtfCanTakeCntCCmd : public ::google::protobuf::Message {
 public:
  NtfCanTakeCntCCmd();
  virtual ~NtfCanTakeCntCCmd();

  NtfCanTakeCntCCmd(const NtfCanTakeCntCCmd& from);

  inline NtfCanTakeCntCCmd& operator=(const NtfCanTakeCntCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfCanTakeCntCCmd& default_instance();

  void Swap(NtfCanTakeCntCCmd* other);

  // implements Message ----------------------------------------------

  NtfCanTakeCntCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfCanTakeCntCCmd& from);
  void MergeFrom(const NtfCanTakeCntCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_CANTAKE_CNT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfCanTakeCntCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfCanTakeCntCCmd* default_instance_;
};
// -------------------------------------------------------------------

class NtfMyOfferPriceCCmd : public ::google::protobuf::Message {
 public:
  NtfMyOfferPriceCCmd();
  virtual ~NtfMyOfferPriceCCmd();

  NtfMyOfferPriceCCmd(const NtfMyOfferPriceCCmd& from);

  inline NtfMyOfferPriceCCmd& operator=(const NtfMyOfferPriceCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfMyOfferPriceCCmd& default_instance();

  void Swap(NtfMyOfferPriceCCmd* other);

  // implements Message ----------------------------------------------

  NtfMyOfferPriceCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfMyOfferPriceCCmd& from);
  void MergeFrom(const NtfMyOfferPriceCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MY_OFFERPRICE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional uint64 batchid = 3;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 3;
  inline ::google::protobuf::uint64 batchid() const;
  inline void set_batchid(::google::protobuf::uint64 value);

  // optional uint32 itemid = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint64 my_price = 5;
  inline bool has_my_price() const;
  inline void clear_my_price();
  static const int kMyPriceFieldNumber = 5;
  inline ::google::protobuf::uint64 my_price() const;
  inline void set_my_price(::google::protobuf::uint64 value);

  // optional uint64 signup_id = 6;
  inline bool has_signup_id() const;
  inline void clear_signup_id();
  static const int kSignupIdFieldNumber = 6;
  inline ::google::protobuf::uint64 signup_id() const;
  inline void set_signup_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfMyOfferPriceCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_batchid();
  inline void clear_has_batchid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_my_price();
  inline void clear_has_my_price();
  inline void set_has_signup_id();
  inline void clear_has_signup_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 batchid_;
  ::google::protobuf::uint64 my_price_;
  ::google::protobuf::uint64 signup_id_;
  ::google::protobuf::uint32 itemid_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfMyOfferPriceCCmd* default_instance_;
};
// -------------------------------------------------------------------

class NtfNextAuctionInfoCCmd : public ::google::protobuf::Message {
 public:
  NtfNextAuctionInfoCCmd();
  virtual ~NtfNextAuctionInfoCCmd();

  NtfNextAuctionInfoCCmd(const NtfNextAuctionInfoCCmd& from);

  inline NtfNextAuctionInfoCCmd& operator=(const NtfNextAuctionInfoCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfNextAuctionInfoCCmd& default_instance();

  void Swap(NtfNextAuctionInfoCCmd* other);

  // implements Message ----------------------------------------------

  NtfNextAuctionInfoCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfNextAuctionInfoCCmd& from);
  void MergeFrom(const NtfNextAuctionInfoCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_NEXT_AUCTION_INFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional uint64 batchid = 3;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 3;
  inline ::google::protobuf::uint64 batchid() const;
  inline void set_batchid(::google::protobuf::uint64 value);

  // optional uint32 itemid = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 last_itemid = 5;
  inline bool has_last_itemid() const;
  inline void clear_last_itemid();
  static const int kLastItemidFieldNumber = 5;
  inline ::google::protobuf::uint32 last_itemid() const;
  inline void set_last_itemid(::google::protobuf::uint32 value);

  // optional uint64 base_price = 6;
  inline bool has_base_price() const;
  inline void clear_base_price();
  static const int kBasePriceFieldNumber = 6;
  inline ::google::protobuf::uint64 base_price() const;
  inline void set_base_price(::google::protobuf::uint64 value);

  // optional uint32 start_time = 7;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // optional uint64 signup_id = 8;
  inline bool has_signup_id() const;
  inline void clear_signup_id();
  static const int kSignupIdFieldNumber = 8;
  inline ::google::protobuf::uint64 signup_id() const;
  inline void set_signup_id(::google::protobuf::uint64 value);

  // optional uint64 last_signup_id = 9;
  inline bool has_last_signup_id() const;
  inline void clear_last_signup_id();
  static const int kLastSignupIdFieldNumber = 9;
  inline ::google::protobuf::uint64 last_signup_id() const;
  inline void set_last_signup_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfNextAuctionInfoCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_batchid();
  inline void clear_has_batchid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_last_itemid();
  inline void clear_has_last_itemid();
  inline void set_has_base_price();
  inline void clear_has_base_price();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_signup_id();
  inline void clear_has_signup_id();
  inline void set_has_last_signup_id();
  inline void clear_has_last_signup_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 batchid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 last_itemid_;
  ::google::protobuf::uint64 base_price_;
  ::google::protobuf::uint64 signup_id_;
  ::google::protobuf::uint64 last_signup_id_;
  ::google::protobuf::uint32 start_time_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfNextAuctionInfoCCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReqAuctionInfoCCmd : public ::google::protobuf::Message {
 public:
  ReqAuctionInfoCCmd();
  virtual ~ReqAuctionInfoCCmd();

  ReqAuctionInfoCCmd(const ReqAuctionInfoCCmd& from);

  inline ReqAuctionInfoCCmd& operator=(const ReqAuctionInfoCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAuctionInfoCCmd& default_instance();

  void Swap(ReqAuctionInfoCCmd* other);

  // implements Message ----------------------------------------------

  ReqAuctionInfoCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAuctionInfoCCmd& from);
  void MergeFrom(const ReqAuctionInfoCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_ACUTION_INFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // @@protoc_insertion_point(class_scope:Cmd.ReqAuctionInfoCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqAuctionInfoCCmd* default_instance_;
};
// -------------------------------------------------------------------

class NtfCurAuctionInfoCCmd : public ::google::protobuf::Message {
 public:
  NtfCurAuctionInfoCCmd();
  virtual ~NtfCurAuctionInfoCCmd();

  NtfCurAuctionInfoCCmd(const NtfCurAuctionInfoCCmd& from);

  inline NtfCurAuctionInfoCCmd& operator=(const NtfCurAuctionInfoCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfCurAuctionInfoCCmd& default_instance();

  void Swap(NtfCurAuctionInfoCCmd* other);

  // implements Message ----------------------------------------------

  NtfCurAuctionInfoCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfCurAuctionInfoCCmd& from);
  void MergeFrom(const NtfCurAuctionInfoCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_CUR_AUCTION_INFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional uint32 itemid = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfCurAuctionInfoCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 itemid_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfCurAuctionInfoCCmd* default_instance_;
};
// -------------------------------------------------------------------

class NtfOverTakePriceCCmd : public ::google::protobuf::Message {
 public:
  NtfOverTakePriceCCmd();
  virtual ~NtfOverTakePriceCCmd();

  NtfOverTakePriceCCmd(const NtfOverTakePriceCCmd& from);

  inline NtfOverTakePriceCCmd& operator=(const NtfOverTakePriceCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfOverTakePriceCCmd& default_instance();

  void Swap(NtfOverTakePriceCCmd* other);

  // implements Message ----------------------------------------------

  NtfOverTakePriceCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfOverTakePriceCCmd& from);
  void MergeFrom(const NtfOverTakePriceCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_OVERTAKE_PRICE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfOverTakePriceCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfOverTakePriceCCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReqMyTradedPriceCCmd : public ::google::protobuf::Message {
 public:
  ReqMyTradedPriceCCmd();
  virtual ~ReqMyTradedPriceCCmd();

  ReqMyTradedPriceCCmd(const ReqMyTradedPriceCCmd& from);

  inline ReqMyTradedPriceCCmd& operator=(const ReqMyTradedPriceCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqMyTradedPriceCCmd& default_instance();

  void Swap(ReqMyTradedPriceCCmd* other);

  // implements Message ----------------------------------------------

  ReqMyTradedPriceCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqMyTradedPriceCCmd& from);
  void MergeFrom(const ReqMyTradedPriceCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_MY_TRADED_PRICE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional uint64 batchid = 3;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 3;
  inline ::google::protobuf::uint64 batchid() const;
  inline void set_batchid(::google::protobuf::uint64 value);

  // optional uint32 itemid = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint64 my_price = 5;
  inline bool has_my_price() const;
  inline void clear_my_price();
  static const int kMyPriceFieldNumber = 5;
  inline ::google::protobuf::uint64 my_price() const;
  inline void set_my_price(::google::protobuf::uint64 value);

  // optional uint64 signup_id = 6;
  inline bool has_signup_id() const;
  inline void clear_signup_id();
  static const int kSignupIdFieldNumber = 6;
  inline ::google::protobuf::uint64 signup_id() const;
  inline void set_signup_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ReqMyTradedPriceCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_batchid();
  inline void clear_has_batchid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_my_price();
  inline void clear_has_my_price();
  inline void set_has_signup_id();
  inline void clear_has_signup_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 batchid_;
  ::google::protobuf::uint64 my_price_;
  ::google::protobuf::uint64 signup_id_;
  ::google::protobuf::uint32 itemid_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqMyTradedPriceCCmd* default_instance_;
};
// -------------------------------------------------------------------

class NtfMaskPriceCCmd : public ::google::protobuf::Message {
 public:
  NtfMaskPriceCCmd();
  virtual ~NtfMaskPriceCCmd();

  NtfMaskPriceCCmd(const NtfMaskPriceCCmd& from);

  inline NtfMaskPriceCCmd& operator=(const NtfMaskPriceCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfMaskPriceCCmd& default_instance();

  void Swap(NtfMaskPriceCCmd* other);

  // implements Message ----------------------------------------------

  NtfMaskPriceCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfMaskPriceCCmd& from);
  void MergeFrom(const NtfMaskPriceCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MASK_PRICE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional uint64 batchid = 3;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 3;
  inline ::google::protobuf::uint64 batchid() const;
  inline void set_batchid(::google::protobuf::uint64 value);

  // optional uint32 itemid = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 mask_price = 5;
  inline bool has_mask_price() const;
  inline void clear_mask_price();
  static const int kMaskPriceFieldNumber = 5;
  inline ::google::protobuf::uint32 mask_price() const;
  inline void set_mask_price(::google::protobuf::uint32 value);

  // optional uint64 signup_id = 6;
  inline bool has_signup_id() const;
  inline void clear_signup_id();
  static const int kSignupIdFieldNumber = 6;
  inline ::google::protobuf::uint64 signup_id() const;
  inline void set_signup_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfMaskPriceCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_batchid();
  inline void clear_has_batchid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_mask_price();
  inline void clear_has_mask_price();
  inline void set_has_signup_id();
  inline void clear_has_signup_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 batchid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 mask_price_;
  ::google::protobuf::uint64 signup_id_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfMaskPriceCCmd* default_instance_;
};
// -------------------------------------------------------------------

class AuctionDialogCCmd : public ::google::protobuf::Message {
 public:
  AuctionDialogCCmd();
  virtual ~AuctionDialogCCmd();

  AuctionDialogCCmd(const AuctionDialogCCmd& from);

  inline AuctionDialogCCmd& operator=(const AuctionDialogCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionDialogCCmd& default_instance();

  void Swap(AuctionDialogCCmd* other);

  // implements Message ----------------------------------------------

  AuctionDialogCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionDialogCCmd& from);
  void MergeFrom(const AuctionDialogCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionCParam param = 2 [default = AUTIONCPARAM_AUCTION_DIALOG];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionCParam param() const;
  inline void set_param(::Cmd::AuctionCParam value);

  // optional .Cmd.EDialogType type = 3 [default = EDialogType_None];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EDialogType type() const;
  inline void set_type(::Cmd::EDialogType value);

  // optional uint64 msg_id = 4;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 4;
  inline ::google::protobuf::uint64 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint64 value);

  // repeated string params = 5;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 5;
  inline const ::std::string& params(int index) const;
  inline ::std::string* mutable_params(int index);
  inline void set_params(int index, const ::std::string& value);
  inline void set_params(int index, const char* value);
  inline void set_params(int index, const char* value, size_t size);
  inline ::std::string* add_params();
  inline void add_params(const ::std::string& value);
  inline void add_params(const char* value);
  inline void add_params(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& params() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_params();

  // @@protoc_insertion_point(class_scope:Cmd.AuctionDialogCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 msg_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> params_;
  int type_;
  friend void  protobuf_AddDesc_AuctionCCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionCCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionCCmd_2eproto();

  void InitAsDefaultInstance();
  static AuctionDialogCCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// NtfAuctionStateCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool NtfAuctionStateCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfAuctionStateCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfAuctionStateCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfAuctionStateCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command NtfAuctionStateCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfAuctionStateCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfAuctionStateCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfAuctionStateCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_AUCTION_STATE];
inline bool NtfAuctionStateCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfAuctionStateCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfAuctionStateCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfAuctionStateCCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::AuctionCParam NtfAuctionStateCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfAuctionStateCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void NtfAuctionStateCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfAuctionStateCCmd.param)
}

// optional .Cmd.EAuctionState state = 3;
inline bool NtfAuctionStateCCmd::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfAuctionStateCCmd::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfAuctionStateCCmd::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfAuctionStateCCmd::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::Cmd::EAuctionState NtfAuctionStateCCmd::state() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfAuctionStateCCmd.state)
  return static_cast< ::Cmd::EAuctionState >(state_);
}
inline void NtfAuctionStateCCmd::set_state(::Cmd::EAuctionState value) {
  assert(::Cmd::EAuctionState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfAuctionStateCCmd.state)
}

// optional uint64 batchid = 4;
inline bool NtfAuctionStateCCmd::has_batchid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtfAuctionStateCCmd::set_has_batchid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtfAuctionStateCCmd::clear_has_batchid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtfAuctionStateCCmd::clear_batchid() {
  batchid_ = GOOGLE_ULONGLONG(0);
  clear_has_batchid();
}
inline ::google::protobuf::uint64 NtfAuctionStateCCmd::batchid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfAuctionStateCCmd.batchid)
  return batchid_;
}
inline void NtfAuctionStateCCmd::set_batchid(::google::protobuf::uint64 value) {
  set_has_batchid();
  batchid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfAuctionStateCCmd.batchid)
}

// optional uint32 auctiontime = 5;
inline bool NtfAuctionStateCCmd::has_auctiontime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NtfAuctionStateCCmd::set_has_auctiontime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NtfAuctionStateCCmd::clear_has_auctiontime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NtfAuctionStateCCmd::clear_auctiontime() {
  auctiontime_ = 0u;
  clear_has_auctiontime();
}
inline ::google::protobuf::uint32 NtfAuctionStateCCmd::auctiontime() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfAuctionStateCCmd.auctiontime)
  return auctiontime_;
}
inline void NtfAuctionStateCCmd::set_auctiontime(::google::protobuf::uint32 value) {
  set_has_auctiontime();
  auctiontime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfAuctionStateCCmd.auctiontime)
}

// optional bool delay = 6;
inline bool NtfAuctionStateCCmd::has_delay() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NtfAuctionStateCCmd::set_has_delay() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NtfAuctionStateCCmd::clear_has_delay() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NtfAuctionStateCCmd::clear_delay() {
  delay_ = false;
  clear_has_delay();
}
inline bool NtfAuctionStateCCmd::delay() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfAuctionStateCCmd.delay)
  return delay_;
}
inline void NtfAuctionStateCCmd::set_delay(bool value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfAuctionStateCCmd.delay)
}

// -------------------------------------------------------------------

// OpenAuctionPanelCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool OpenAuctionPanelCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenAuctionPanelCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenAuctionPanelCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenAuctionPanelCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command OpenAuctionPanelCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.OpenAuctionPanelCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void OpenAuctionPanelCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OpenAuctionPanelCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_OPEN_AUCTION_PANEL];
inline bool OpenAuctionPanelCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenAuctionPanelCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenAuctionPanelCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenAuctionPanelCCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::AuctionCParam OpenAuctionPanelCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.OpenAuctionPanelCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void OpenAuctionPanelCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OpenAuctionPanelCCmd.param)
}

// optional bool open = 3;
inline bool OpenAuctionPanelCCmd::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenAuctionPanelCCmd::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenAuctionPanelCCmd::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenAuctionPanelCCmd::clear_open() {
  open_ = false;
  clear_has_open();
}
inline bool OpenAuctionPanelCCmd::open() const {
  // @@protoc_insertion_point(field_get:Cmd.OpenAuctionPanelCCmd.open)
  return open_;
}
inline void OpenAuctionPanelCCmd::set_open(bool value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OpenAuctionPanelCCmd.open)
}

// -------------------------------------------------------------------

// SignUpItemInfo

// optional uint32 itemid = 1;
inline bool SignUpItemInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignUpItemInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignUpItemInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignUpItemInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 SignUpItemInfo::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemInfo.itemid)
  return itemid_;
}
inline void SignUpItemInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemInfo.itemid)
}

// optional uint32 price = 2;
inline bool SignUpItemInfo::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignUpItemInfo::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignUpItemInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignUpItemInfo::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 SignUpItemInfo::price() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemInfo.price)
  return price_;
}
inline void SignUpItemInfo::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemInfo.price)
}

// optional uint32 auction = 3 [default = 0];
inline bool SignUpItemInfo::has_auction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignUpItemInfo::set_has_auction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignUpItemInfo::clear_has_auction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignUpItemInfo::clear_auction() {
  auction_ = 0u;
  clear_has_auction();
}
inline ::google::protobuf::uint32 SignUpItemInfo::auction() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemInfo.auction)
  return auction_;
}
inline void SignUpItemInfo::set_auction(::google::protobuf::uint32 value) {
  set_has_auction();
  auction_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemInfo.auction)
}

// -------------------------------------------------------------------

// NtfSignUpInfoCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool NtfSignUpInfoCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfSignUpInfoCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfSignUpInfoCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfSignUpInfoCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command NtfSignUpInfoCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfSignUpInfoCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfSignUpInfoCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfSignUpInfoCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_SIGNUP_INFO];
inline bool NtfSignUpInfoCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfSignUpInfoCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfSignUpInfoCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfSignUpInfoCCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::AuctionCParam NtfSignUpInfoCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfSignUpInfoCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void NtfSignUpInfoCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfSignUpInfoCCmd.param)
}

// repeated .Cmd.SignUpItemInfo iteminfos = 3;
inline int NtfSignUpInfoCCmd::iteminfos_size() const {
  return iteminfos_.size();
}
inline void NtfSignUpInfoCCmd::clear_iteminfos() {
  iteminfos_.Clear();
}
inline const ::Cmd::SignUpItemInfo& NtfSignUpInfoCCmd::iteminfos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NtfSignUpInfoCCmd.iteminfos)
  return iteminfos_.Get(index);
}
inline ::Cmd::SignUpItemInfo* NtfSignUpInfoCCmd::mutable_iteminfos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.NtfSignUpInfoCCmd.iteminfos)
  return iteminfos_.Mutable(index);
}
inline ::Cmd::SignUpItemInfo* NtfSignUpInfoCCmd::add_iteminfos() {
  // @@protoc_insertion_point(field_add:Cmd.NtfSignUpInfoCCmd.iteminfos)
  return iteminfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SignUpItemInfo >&
NtfSignUpInfoCCmd::iteminfos() const {
  // @@protoc_insertion_point(field_list:Cmd.NtfSignUpInfoCCmd.iteminfos)
  return iteminfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SignUpItemInfo >*
NtfSignUpInfoCCmd::mutable_iteminfos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NtfSignUpInfoCCmd.iteminfos)
  return &iteminfos_;
}

// -------------------------------------------------------------------

// NtfMySignUpInfoCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool NtfMySignUpInfoCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfMySignUpInfoCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfMySignUpInfoCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfMySignUpInfoCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command NtfMySignUpInfoCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMySignUpInfoCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfMySignUpInfoCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMySignUpInfoCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MY_SIGNUP_INFO];
inline bool NtfMySignUpInfoCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfMySignUpInfoCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfMySignUpInfoCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfMySignUpInfoCCmd::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::AuctionCParam NtfMySignUpInfoCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMySignUpInfoCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void NtfMySignUpInfoCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMySignUpInfoCCmd.param)
}

// repeated uint32 signuped = 4;
inline int NtfMySignUpInfoCCmd::signuped_size() const {
  return signuped_.size();
}
inline void NtfMySignUpInfoCCmd::clear_signuped() {
  signuped_.Clear();
}
inline ::google::protobuf::uint32 NtfMySignUpInfoCCmd::signuped(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMySignUpInfoCCmd.signuped)
  return signuped_.Get(index);
}
inline void NtfMySignUpInfoCCmd::set_signuped(int index, ::google::protobuf::uint32 value) {
  signuped_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.NtfMySignUpInfoCCmd.signuped)
}
inline void NtfMySignUpInfoCCmd::add_signuped(::google::protobuf::uint32 value) {
  signuped_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.NtfMySignUpInfoCCmd.signuped)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NtfMySignUpInfoCCmd::signuped() const {
  // @@protoc_insertion_point(field_list:Cmd.NtfMySignUpInfoCCmd.signuped)
  return signuped_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NtfMySignUpInfoCCmd::mutable_signuped() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NtfMySignUpInfoCCmd.signuped)
  return &signuped_;
}

// -------------------------------------------------------------------

// SignUpItemCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool SignUpItemCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignUpItemCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignUpItemCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignUpItemCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command SignUpItemCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SignUpItemCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_SIGNUP_ITEM];
inline bool SignUpItemCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignUpItemCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignUpItemCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignUpItemCCmd::clear_param() {
  param_ = 12;
  clear_has_param();
}
inline ::Cmd::AuctionCParam SignUpItemCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void SignUpItemCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemCCmd.param)
}

// optional .Cmd.SignUpItemInfo iteminfo = 3;
inline bool SignUpItemCCmd::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignUpItemCCmd::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignUpItemCCmd::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignUpItemCCmd::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::Cmd::SignUpItemInfo::Clear();
  clear_has_iteminfo();
}
inline const ::Cmd::SignUpItemInfo& SignUpItemCCmd::iteminfo() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemCCmd.iteminfo)
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
}
inline ::Cmd::SignUpItemInfo* SignUpItemCCmd::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::Cmd::SignUpItemInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.SignUpItemCCmd.iteminfo)
  return iteminfo_;
}
inline ::Cmd::SignUpItemInfo* SignUpItemCCmd::release_iteminfo() {
  clear_has_iteminfo();
  ::Cmd::SignUpItemInfo* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void SignUpItemCCmd::set_allocated_iteminfo(::Cmd::SignUpItemInfo* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SignUpItemCCmd.iteminfo)
}

// optional bool ret = 4;
inline bool SignUpItemCCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignUpItemCCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignUpItemCCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignUpItemCCmd::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool SignUpItemCCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemCCmd.ret)
  return ret_;
}
inline void SignUpItemCCmd::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemCCmd.ret)
}

// optional string guid = 5;
inline bool SignUpItemCCmd::has_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SignUpItemCCmd::set_has_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SignUpItemCCmd::clear_has_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SignUpItemCCmd::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& SignUpItemCCmd::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemCCmd.guid)
  return *guid_;
}
inline void SignUpItemCCmd::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemCCmd.guid)
}
inline void SignUpItemCCmd::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SignUpItemCCmd.guid)
}
inline void SignUpItemCCmd::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SignUpItemCCmd.guid)
}
inline ::std::string* SignUpItemCCmd::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SignUpItemCCmd.guid)
  return guid_;
}
inline ::std::string* SignUpItemCCmd::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignUpItemCCmd::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SignUpItemCCmd.guid)
}

// -------------------------------------------------------------------

// AuctionItemInfo

// optional uint32 itemid = 1;
inline bool AuctionItemInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionItemInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionItemInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionItemInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 AuctionItemInfo::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionItemInfo.itemid)
  return itemid_;
}
inline void AuctionItemInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionItemInfo.itemid)
}

// optional uint32 price = 2;
inline bool AuctionItemInfo::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuctionItemInfo::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuctionItemInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuctionItemInfo::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 AuctionItemInfo::price() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionItemInfo.price)
  return price_;
}
inline void AuctionItemInfo::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionItemInfo.price)
}

// optional string seller = 3;
inline bool AuctionItemInfo::has_seller() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuctionItemInfo::set_has_seller() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuctionItemInfo::clear_has_seller() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuctionItemInfo::clear_seller() {
  if (seller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seller_->clear();
  }
  clear_has_seller();
}
inline const ::std::string& AuctionItemInfo::seller() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionItemInfo.seller)
  return *seller_;
}
inline void AuctionItemInfo::set_seller(const ::std::string& value) {
  set_has_seller();
  if (seller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seller_ = new ::std::string;
  }
  seller_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AuctionItemInfo.seller)
}
inline void AuctionItemInfo::set_seller(const char* value) {
  set_has_seller();
  if (seller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seller_ = new ::std::string;
  }
  seller_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AuctionItemInfo.seller)
}
inline void AuctionItemInfo::set_seller(const char* value, size_t size) {
  set_has_seller();
  if (seller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seller_ = new ::std::string;
  }
  seller_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AuctionItemInfo.seller)
}
inline ::std::string* AuctionItemInfo::mutable_seller() {
  set_has_seller();
  if (seller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seller_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AuctionItemInfo.seller)
  return seller_;
}
inline ::std::string* AuctionItemInfo::release_seller() {
  clear_has_seller();
  if (seller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = seller_;
    seller_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuctionItemInfo::set_allocated_seller(::std::string* seller) {
  if (seller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seller_;
  }
  if (seller) {
    set_has_seller();
    seller_ = seller;
  } else {
    clear_has_seller();
    seller_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AuctionItemInfo.seller)
}

// optional uint64 sellerid = 4;
inline bool AuctionItemInfo::has_sellerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuctionItemInfo::set_has_sellerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuctionItemInfo::clear_has_sellerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuctionItemInfo::clear_sellerid() {
  sellerid_ = GOOGLE_ULONGLONG(0);
  clear_has_sellerid();
}
inline ::google::protobuf::uint64 AuctionItemInfo::sellerid() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionItemInfo.sellerid)
  return sellerid_;
}
inline void AuctionItemInfo::set_sellerid(::google::protobuf::uint64 value) {
  set_has_sellerid();
  sellerid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionItemInfo.sellerid)
}

// optional .Cmd.EAuctionResult result = 5;
inline bool AuctionItemInfo::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuctionItemInfo::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuctionItemInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuctionItemInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::Cmd::EAuctionResult AuctionItemInfo::result() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionItemInfo.result)
  return static_cast< ::Cmd::EAuctionResult >(result_);
}
inline void AuctionItemInfo::set_result(::Cmd::EAuctionResult value) {
  assert(::Cmd::EAuctionResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionItemInfo.result)
}

// optional uint32 people_cnt = 6;
inline bool AuctionItemInfo::has_people_cnt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AuctionItemInfo::set_has_people_cnt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AuctionItemInfo::clear_has_people_cnt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AuctionItemInfo::clear_people_cnt() {
  people_cnt_ = 0u;
  clear_has_people_cnt();
}
inline ::google::protobuf::uint32 AuctionItemInfo::people_cnt() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionItemInfo.people_cnt)
  return people_cnt_;
}
inline void AuctionItemInfo::set_people_cnt(::google::protobuf::uint32 value) {
  set_has_people_cnt();
  people_cnt_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionItemInfo.people_cnt)
}

// optional uint64 trade_price = 7;
inline bool AuctionItemInfo::has_trade_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AuctionItemInfo::set_has_trade_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AuctionItemInfo::clear_has_trade_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AuctionItemInfo::clear_trade_price() {
  trade_price_ = GOOGLE_ULONGLONG(0);
  clear_has_trade_price();
}
inline ::google::protobuf::uint64 AuctionItemInfo::trade_price() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionItemInfo.trade_price)
  return trade_price_;
}
inline void AuctionItemInfo::set_trade_price(::google::protobuf::uint64 value) {
  set_has_trade_price();
  trade_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionItemInfo.trade_price)
}

// optional uint32 auction_time = 8;
inline bool AuctionItemInfo::has_auction_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AuctionItemInfo::set_has_auction_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AuctionItemInfo::clear_has_auction_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AuctionItemInfo::clear_auction_time() {
  auction_time_ = 0u;
  clear_has_auction_time();
}
inline ::google::protobuf::uint32 AuctionItemInfo::auction_time() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionItemInfo.auction_time)
  return auction_time_;
}
inline void AuctionItemInfo::set_auction_time(::google::protobuf::uint32 value) {
  set_has_auction_time();
  auction_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionItemInfo.auction_time)
}

// optional uint64 cur_price = 10;
inline bool AuctionItemInfo::has_cur_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AuctionItemInfo::set_has_cur_price() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AuctionItemInfo::clear_has_cur_price() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AuctionItemInfo::clear_cur_price() {
  cur_price_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_price();
}
inline ::google::protobuf::uint64 AuctionItemInfo::cur_price() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionItemInfo.cur_price)
  return cur_price_;
}
inline void AuctionItemInfo::set_cur_price(::google::protobuf::uint64 value) {
  set_has_cur_price();
  cur_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionItemInfo.cur_price)
}

// optional uint32 mask_price = 11;
inline bool AuctionItemInfo::has_mask_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AuctionItemInfo::set_has_mask_price() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AuctionItemInfo::clear_has_mask_price() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AuctionItemInfo::clear_mask_price() {
  mask_price_ = 0u;
  clear_has_mask_price();
}
inline ::google::protobuf::uint32 AuctionItemInfo::mask_price() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionItemInfo.mask_price)
  return mask_price_;
}
inline void AuctionItemInfo::set_mask_price(::google::protobuf::uint32 value) {
  set_has_mask_price();
  mask_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionItemInfo.mask_price)
}

// optional uint64 signup_id = 12;
inline bool AuctionItemInfo::has_signup_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AuctionItemInfo::set_has_signup_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AuctionItemInfo::clear_has_signup_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AuctionItemInfo::clear_signup_id() {
  signup_id_ = GOOGLE_ULONGLONG(0);
  clear_has_signup_id();
}
inline ::google::protobuf::uint64 AuctionItemInfo::signup_id() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionItemInfo.signup_id)
  return signup_id_;
}
inline void AuctionItemInfo::set_signup_id(::google::protobuf::uint64 value) {
  set_has_signup_id();
  signup_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionItemInfo.signup_id)
}

// optional .Cmd.ItemData itemdata = 13;
inline bool AuctionItemInfo::has_itemdata() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AuctionItemInfo::set_has_itemdata() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AuctionItemInfo::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AuctionItemInfo::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::Cmd::ItemData& AuctionItemInfo::itemdata() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionItemInfo.itemdata)
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::Cmd::ItemData* AuctionItemInfo::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::Cmd::ItemData;
  // @@protoc_insertion_point(field_mutable:Cmd.AuctionItemInfo.itemdata)
  return itemdata_;
}
inline ::Cmd::ItemData* AuctionItemInfo::release_itemdata() {
  clear_has_itemdata();
  ::Cmd::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void AuctionItemInfo::set_allocated_itemdata(::Cmd::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AuctionItemInfo.itemdata)
}

// -------------------------------------------------------------------

// NtfAuctionInfoCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool NtfAuctionInfoCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfAuctionInfoCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfAuctionInfoCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfAuctionInfoCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command NtfAuctionInfoCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfAuctionInfoCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfAuctionInfoCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfAuctionInfoCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_AUCTION_INFO];
inline bool NtfAuctionInfoCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfAuctionInfoCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfAuctionInfoCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfAuctionInfoCCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::AuctionCParam NtfAuctionInfoCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfAuctionInfoCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void NtfAuctionInfoCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfAuctionInfoCCmd.param)
}

// repeated .Cmd.AuctionItemInfo iteminfos = 3;
inline int NtfAuctionInfoCCmd::iteminfos_size() const {
  return iteminfos_.size();
}
inline void NtfAuctionInfoCCmd::clear_iteminfos() {
  iteminfos_.Clear();
}
inline const ::Cmd::AuctionItemInfo& NtfAuctionInfoCCmd::iteminfos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NtfAuctionInfoCCmd.iteminfos)
  return iteminfos_.Get(index);
}
inline ::Cmd::AuctionItemInfo* NtfAuctionInfoCCmd::mutable_iteminfos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.NtfAuctionInfoCCmd.iteminfos)
  return iteminfos_.Mutable(index);
}
inline ::Cmd::AuctionItemInfo* NtfAuctionInfoCCmd::add_iteminfos() {
  // @@protoc_insertion_point(field_add:Cmd.NtfAuctionInfoCCmd.iteminfos)
  return iteminfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AuctionItemInfo >&
NtfAuctionInfoCCmd::iteminfos() const {
  // @@protoc_insertion_point(field_list:Cmd.NtfAuctionInfoCCmd.iteminfos)
  return iteminfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AuctionItemInfo >*
NtfAuctionInfoCCmd::mutable_iteminfos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NtfAuctionInfoCCmd.iteminfos)
  return &iteminfos_;
}

// optional uint64 batchid = 4;
inline bool NtfAuctionInfoCCmd::has_batchid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtfAuctionInfoCCmd::set_has_batchid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtfAuctionInfoCCmd::clear_has_batchid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtfAuctionInfoCCmd::clear_batchid() {
  batchid_ = GOOGLE_ULONGLONG(0);
  clear_has_batchid();
}
inline ::google::protobuf::uint64 NtfAuctionInfoCCmd::batchid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfAuctionInfoCCmd.batchid)
  return batchid_;
}
inline void NtfAuctionInfoCCmd::set_batchid(::google::protobuf::uint64 value) {
  set_has_batchid();
  batchid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfAuctionInfoCCmd.batchid)
}

// -------------------------------------------------------------------

// UpdateAuctionInfoCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool UpdateAuctionInfoCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateAuctionInfoCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateAuctionInfoCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateAuctionInfoCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateAuctionInfoCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateAuctionInfoCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateAuctionInfoCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateAuctionInfoCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_UPDATE_AUCTION_INFO];
inline bool UpdateAuctionInfoCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateAuctionInfoCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateAuctionInfoCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateAuctionInfoCCmd::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::AuctionCParam UpdateAuctionInfoCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateAuctionInfoCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void UpdateAuctionInfoCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateAuctionInfoCCmd.param)
}

// optional .Cmd.AuctionItemInfo iteminfo = 3;
inline bool UpdateAuctionInfoCCmd::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateAuctionInfoCCmd::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateAuctionInfoCCmd::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateAuctionInfoCCmd::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::Cmd::AuctionItemInfo::Clear();
  clear_has_iteminfo();
}
inline const ::Cmd::AuctionItemInfo& UpdateAuctionInfoCCmd::iteminfo() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateAuctionInfoCCmd.iteminfo)
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
}
inline ::Cmd::AuctionItemInfo* UpdateAuctionInfoCCmd::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::Cmd::AuctionItemInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateAuctionInfoCCmd.iteminfo)
  return iteminfo_;
}
inline ::Cmd::AuctionItemInfo* UpdateAuctionInfoCCmd::release_iteminfo() {
  clear_has_iteminfo();
  ::Cmd::AuctionItemInfo* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void UpdateAuctionInfoCCmd::set_allocated_iteminfo(::Cmd::AuctionItemInfo* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpdateAuctionInfoCCmd.iteminfo)
}

// optional uint64 batchid = 4;
inline bool UpdateAuctionInfoCCmd::has_batchid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateAuctionInfoCCmd::set_has_batchid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateAuctionInfoCCmd::clear_has_batchid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateAuctionInfoCCmd::clear_batchid() {
  batchid_ = GOOGLE_ULONGLONG(0);
  clear_has_batchid();
}
inline ::google::protobuf::uint64 UpdateAuctionInfoCCmd::batchid() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateAuctionInfoCCmd.batchid)
  return batchid_;
}
inline void UpdateAuctionInfoCCmd::set_batchid(::google::protobuf::uint64 value) {
  set_has_batchid();
  batchid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateAuctionInfoCCmd.batchid)
}

// -------------------------------------------------------------------

// FlowingWaterInfo

// optional uint32 time = 1;
inline bool FlowingWaterInfo::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlowingWaterInfo::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlowingWaterInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlowingWaterInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 FlowingWaterInfo::time() const {
  // @@protoc_insertion_point(field_get:Cmd.FlowingWaterInfo.time)
  return time_;
}
inline void FlowingWaterInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FlowingWaterInfo.time)
}

// optional .Cmd.AuctionEvent event = 2;
inline bool FlowingWaterInfo::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlowingWaterInfo::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlowingWaterInfo::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlowingWaterInfo::clear_event() {
  event_ = 0;
  clear_has_event();
}
inline ::Cmd::AuctionEvent FlowingWaterInfo::event() const {
  // @@protoc_insertion_point(field_get:Cmd.FlowingWaterInfo.event)
  return static_cast< ::Cmd::AuctionEvent >(event_);
}
inline void FlowingWaterInfo::set_event(::Cmd::AuctionEvent value) {
  assert(::Cmd::AuctionEvent_IsValid(value));
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FlowingWaterInfo.event)
}

// optional uint64 price = 3;
inline bool FlowingWaterInfo::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlowingWaterInfo::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlowingWaterInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlowingWaterInfo::clear_price() {
  price_ = GOOGLE_ULONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::uint64 FlowingWaterInfo::price() const {
  // @@protoc_insertion_point(field_get:Cmd.FlowingWaterInfo.price)
  return price_;
}
inline void FlowingWaterInfo::set_price(::google::protobuf::uint64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FlowingWaterInfo.price)
}

// optional string player_name = 4;
inline bool FlowingWaterInfo::has_player_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FlowingWaterInfo::set_has_player_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FlowingWaterInfo::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FlowingWaterInfo::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& FlowingWaterInfo::player_name() const {
  // @@protoc_insertion_point(field_get:Cmd.FlowingWaterInfo.player_name)
  return *player_name_;
}
inline void FlowingWaterInfo::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.FlowingWaterInfo.player_name)
}
inline void FlowingWaterInfo::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.FlowingWaterInfo.player_name)
}
inline void FlowingWaterInfo::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.FlowingWaterInfo.player_name)
}
inline ::std::string* FlowingWaterInfo::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.FlowingWaterInfo.player_name)
  return player_name_;
}
inline ::std::string* FlowingWaterInfo::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FlowingWaterInfo::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.FlowingWaterInfo.player_name)
}

// optional uint32 zoneid = 5;
inline bool FlowingWaterInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FlowingWaterInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FlowingWaterInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FlowingWaterInfo::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 FlowingWaterInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.FlowingWaterInfo.zoneid)
  return zoneid_;
}
inline void FlowingWaterInfo::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FlowingWaterInfo.zoneid)
}

// optional bool max_price = 6;
inline bool FlowingWaterInfo::has_max_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FlowingWaterInfo::set_has_max_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FlowingWaterInfo::clear_has_max_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FlowingWaterInfo::clear_max_price() {
  max_price_ = false;
  clear_has_max_price();
}
inline bool FlowingWaterInfo::max_price() const {
  // @@protoc_insertion_point(field_get:Cmd.FlowingWaterInfo.max_price)
  return max_price_;
}
inline void FlowingWaterInfo::set_max_price(bool value) {
  set_has_max_price();
  max_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FlowingWaterInfo.max_price)
}

// optional uint64 player_id = 7;
inline bool FlowingWaterInfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FlowingWaterInfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FlowingWaterInfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FlowingWaterInfo::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 FlowingWaterInfo::player_id() const {
  // @@protoc_insertion_point(field_get:Cmd.FlowingWaterInfo.player_id)
  return player_id_;
}
inline void FlowingWaterInfo::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FlowingWaterInfo.player_id)
}

// -------------------------------------------------------------------

// ReqAuctionFlowingWaterCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool ReqAuctionFlowingWaterCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAuctionFlowingWaterCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAuctionFlowingWaterCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAuctionFlowingWaterCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command ReqAuctionFlowingWaterCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAuctionFlowingWaterCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqAuctionFlowingWaterCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqAuctionFlowingWaterCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_AUCTION_FLOWINGWATER];
inline bool ReqAuctionFlowingWaterCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAuctionFlowingWaterCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAuctionFlowingWaterCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAuctionFlowingWaterCCmd::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::AuctionCParam ReqAuctionFlowingWaterCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAuctionFlowingWaterCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void ReqAuctionFlowingWaterCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqAuctionFlowingWaterCCmd.param)
}

// optional uint64 batchid = 3;
inline bool ReqAuctionFlowingWaterCCmd::has_batchid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAuctionFlowingWaterCCmd::set_has_batchid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAuctionFlowingWaterCCmd::clear_has_batchid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAuctionFlowingWaterCCmd::clear_batchid() {
  batchid_ = GOOGLE_ULONGLONG(0);
  clear_has_batchid();
}
inline ::google::protobuf::uint64 ReqAuctionFlowingWaterCCmd::batchid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAuctionFlowingWaterCCmd.batchid)
  return batchid_;
}
inline void ReqAuctionFlowingWaterCCmd::set_batchid(::google::protobuf::uint64 value) {
  set_has_batchid();
  batchid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqAuctionFlowingWaterCCmd.batchid)
}

// optional uint32 itemid = 4;
inline bool ReqAuctionFlowingWaterCCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqAuctionFlowingWaterCCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqAuctionFlowingWaterCCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqAuctionFlowingWaterCCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 ReqAuctionFlowingWaterCCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAuctionFlowingWaterCCmd.itemid)
  return itemid_;
}
inline void ReqAuctionFlowingWaterCCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqAuctionFlowingWaterCCmd.itemid)
}

// optional uint32 page_index = 5;
inline bool ReqAuctionFlowingWaterCCmd::has_page_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqAuctionFlowingWaterCCmd::set_has_page_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqAuctionFlowingWaterCCmd::clear_has_page_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqAuctionFlowingWaterCCmd::clear_page_index() {
  page_index_ = 0u;
  clear_has_page_index();
}
inline ::google::protobuf::uint32 ReqAuctionFlowingWaterCCmd::page_index() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAuctionFlowingWaterCCmd.page_index)
  return page_index_;
}
inline void ReqAuctionFlowingWaterCCmd::set_page_index(::google::protobuf::uint32 value) {
  set_has_page_index();
  page_index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqAuctionFlowingWaterCCmd.page_index)
}

// repeated .Cmd.FlowingWaterInfo flowingwater = 6;
inline int ReqAuctionFlowingWaterCCmd::flowingwater_size() const {
  return flowingwater_.size();
}
inline void ReqAuctionFlowingWaterCCmd::clear_flowingwater() {
  flowingwater_.Clear();
}
inline const ::Cmd::FlowingWaterInfo& ReqAuctionFlowingWaterCCmd::flowingwater(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAuctionFlowingWaterCCmd.flowingwater)
  return flowingwater_.Get(index);
}
inline ::Cmd::FlowingWaterInfo* ReqAuctionFlowingWaterCCmd::mutable_flowingwater(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ReqAuctionFlowingWaterCCmd.flowingwater)
  return flowingwater_.Mutable(index);
}
inline ::Cmd::FlowingWaterInfo* ReqAuctionFlowingWaterCCmd::add_flowingwater() {
  // @@protoc_insertion_point(field_add:Cmd.ReqAuctionFlowingWaterCCmd.flowingwater)
  return flowingwater_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FlowingWaterInfo >&
ReqAuctionFlowingWaterCCmd::flowingwater() const {
  // @@protoc_insertion_point(field_list:Cmd.ReqAuctionFlowingWaterCCmd.flowingwater)
  return flowingwater_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::FlowingWaterInfo >*
ReqAuctionFlowingWaterCCmd::mutable_flowingwater() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ReqAuctionFlowingWaterCCmd.flowingwater)
  return &flowingwater_;
}

// optional uint64 signup_id = 7;
inline bool ReqAuctionFlowingWaterCCmd::has_signup_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqAuctionFlowingWaterCCmd::set_has_signup_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqAuctionFlowingWaterCCmd::clear_has_signup_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqAuctionFlowingWaterCCmd::clear_signup_id() {
  signup_id_ = GOOGLE_ULONGLONG(0);
  clear_has_signup_id();
}
inline ::google::protobuf::uint64 ReqAuctionFlowingWaterCCmd::signup_id() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAuctionFlowingWaterCCmd.signup_id)
  return signup_id_;
}
inline void ReqAuctionFlowingWaterCCmd::set_signup_id(::google::protobuf::uint64 value) {
  set_has_signup_id();
  signup_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqAuctionFlowingWaterCCmd.signup_id)
}

// -------------------------------------------------------------------

// UpdateAuctionFlowingWaterCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool UpdateAuctionFlowingWaterCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateAuctionFlowingWaterCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateAuctionFlowingWaterCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateAuctionFlowingWaterCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateAuctionFlowingWaterCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateAuctionFlowingWaterCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateAuctionFlowingWaterCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateAuctionFlowingWaterCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_UPDATE_AUCTION_FLOWINGWATER];
inline bool UpdateAuctionFlowingWaterCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateAuctionFlowingWaterCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateAuctionFlowingWaterCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateAuctionFlowingWaterCCmd::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::AuctionCParam UpdateAuctionFlowingWaterCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateAuctionFlowingWaterCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void UpdateAuctionFlowingWaterCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateAuctionFlowingWaterCCmd.param)
}

// optional uint64 batchid = 3;
inline bool UpdateAuctionFlowingWaterCCmd::has_batchid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateAuctionFlowingWaterCCmd::set_has_batchid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateAuctionFlowingWaterCCmd::clear_has_batchid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateAuctionFlowingWaterCCmd::clear_batchid() {
  batchid_ = GOOGLE_ULONGLONG(0);
  clear_has_batchid();
}
inline ::google::protobuf::uint64 UpdateAuctionFlowingWaterCCmd::batchid() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateAuctionFlowingWaterCCmd.batchid)
  return batchid_;
}
inline void UpdateAuctionFlowingWaterCCmd::set_batchid(::google::protobuf::uint64 value) {
  set_has_batchid();
  batchid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateAuctionFlowingWaterCCmd.batchid)
}

// optional uint32 itemid = 4;
inline bool UpdateAuctionFlowingWaterCCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateAuctionFlowingWaterCCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateAuctionFlowingWaterCCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateAuctionFlowingWaterCCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 UpdateAuctionFlowingWaterCCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateAuctionFlowingWaterCCmd.itemid)
  return itemid_;
}
inline void UpdateAuctionFlowingWaterCCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateAuctionFlowingWaterCCmd.itemid)
}

// optional .Cmd.FlowingWaterInfo flowingwater = 5;
inline bool UpdateAuctionFlowingWaterCCmd::has_flowingwater() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateAuctionFlowingWaterCCmd::set_has_flowingwater() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateAuctionFlowingWaterCCmd::clear_has_flowingwater() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateAuctionFlowingWaterCCmd::clear_flowingwater() {
  if (flowingwater_ != NULL) flowingwater_->::Cmd::FlowingWaterInfo::Clear();
  clear_has_flowingwater();
}
inline const ::Cmd::FlowingWaterInfo& UpdateAuctionFlowingWaterCCmd::flowingwater() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateAuctionFlowingWaterCCmd.flowingwater)
  return flowingwater_ != NULL ? *flowingwater_ : *default_instance_->flowingwater_;
}
inline ::Cmd::FlowingWaterInfo* UpdateAuctionFlowingWaterCCmd::mutable_flowingwater() {
  set_has_flowingwater();
  if (flowingwater_ == NULL) flowingwater_ = new ::Cmd::FlowingWaterInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateAuctionFlowingWaterCCmd.flowingwater)
  return flowingwater_;
}
inline ::Cmd::FlowingWaterInfo* UpdateAuctionFlowingWaterCCmd::release_flowingwater() {
  clear_has_flowingwater();
  ::Cmd::FlowingWaterInfo* temp = flowingwater_;
  flowingwater_ = NULL;
  return temp;
}
inline void UpdateAuctionFlowingWaterCCmd::set_allocated_flowingwater(::Cmd::FlowingWaterInfo* flowingwater) {
  delete flowingwater_;
  flowingwater_ = flowingwater;
  if (flowingwater) {
    set_has_flowingwater();
  } else {
    clear_has_flowingwater();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpdateAuctionFlowingWaterCCmd.flowingwater)
}

// optional uint64 signup_id = 6;
inline bool UpdateAuctionFlowingWaterCCmd::has_signup_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdateAuctionFlowingWaterCCmd::set_has_signup_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpdateAuctionFlowingWaterCCmd::clear_has_signup_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpdateAuctionFlowingWaterCCmd::clear_signup_id() {
  signup_id_ = GOOGLE_ULONGLONG(0);
  clear_has_signup_id();
}
inline ::google::protobuf::uint64 UpdateAuctionFlowingWaterCCmd::signup_id() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateAuctionFlowingWaterCCmd.signup_id)
  return signup_id_;
}
inline void UpdateAuctionFlowingWaterCCmd::set_signup_id(::google::protobuf::uint64 value) {
  set_has_signup_id();
  signup_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateAuctionFlowingWaterCCmd.signup_id)
}

// -------------------------------------------------------------------

// ReqLastAuctionInfoCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool ReqLastAuctionInfoCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqLastAuctionInfoCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqLastAuctionInfoCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqLastAuctionInfoCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command ReqLastAuctionInfoCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLastAuctionInfoCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqLastAuctionInfoCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqLastAuctionInfoCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_LAST_AUCTION_INFO];
inline bool ReqLastAuctionInfoCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqLastAuctionInfoCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqLastAuctionInfoCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqLastAuctionInfoCCmd::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::AuctionCParam ReqLastAuctionInfoCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLastAuctionInfoCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void ReqLastAuctionInfoCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqLastAuctionInfoCCmd.param)
}

// -------------------------------------------------------------------

// OfferPriceCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool OfferPriceCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfferPriceCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfferPriceCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfferPriceCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command OfferPriceCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void OfferPriceCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_OFFER_PRICE];
inline bool OfferPriceCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfferPriceCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfferPriceCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfferPriceCCmd::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::AuctionCParam OfferPriceCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void OfferPriceCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceCCmd.param)
}

// optional uint32 itemid = 3;
inline bool OfferPriceCCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OfferPriceCCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OfferPriceCCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OfferPriceCCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 OfferPriceCCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceCCmd.itemid)
  return itemid_;
}
inline void OfferPriceCCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceCCmd.itemid)
}

// optional uint64 max_price = 4;
inline bool OfferPriceCCmd::has_max_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OfferPriceCCmd::set_has_max_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OfferPriceCCmd::clear_has_max_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OfferPriceCCmd::clear_max_price() {
  max_price_ = GOOGLE_ULONGLONG(0);
  clear_has_max_price();
}
inline ::google::protobuf::uint64 OfferPriceCCmd::max_price() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceCCmd.max_price)
  return max_price_;
}
inline void OfferPriceCCmd::set_max_price(::google::protobuf::uint64 value) {
  set_has_max_price();
  max_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceCCmd.max_price)
}

// optional uint64 add_price = 5;
inline bool OfferPriceCCmd::has_add_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OfferPriceCCmd::set_has_add_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OfferPriceCCmd::clear_has_add_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OfferPriceCCmd::clear_add_price() {
  add_price_ = GOOGLE_ULONGLONG(0);
  clear_has_add_price();
}
inline ::google::protobuf::uint64 OfferPriceCCmd::add_price() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceCCmd.add_price)
  return add_price_;
}
inline void OfferPriceCCmd::set_add_price(::google::protobuf::uint64 value) {
  set_has_add_price();
  add_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceCCmd.add_price)
}

// optional uint32 level = 6;
inline bool OfferPriceCCmd::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OfferPriceCCmd::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OfferPriceCCmd::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OfferPriceCCmd::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 OfferPriceCCmd::level() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceCCmd.level)
  return level_;
}
inline void OfferPriceCCmd::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceCCmd.level)
}

// optional uint64 signup_id = 7;
inline bool OfferPriceCCmd::has_signup_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OfferPriceCCmd::set_has_signup_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OfferPriceCCmd::clear_has_signup_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OfferPriceCCmd::clear_signup_id() {
  signup_id_ = GOOGLE_ULONGLONG(0);
  clear_has_signup_id();
}
inline ::google::protobuf::uint64 OfferPriceCCmd::signup_id() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceCCmd.signup_id)
  return signup_id_;
}
inline void OfferPriceCCmd::set_signup_id(::google::protobuf::uint64 value) {
  set_has_signup_id();
  signup_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceCCmd.signup_id)
}

// -------------------------------------------------------------------

// AuctionRecord

// optional uint64 id = 1;
inline bool AuctionRecord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRecord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRecord::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 AuctionRecord::id() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionRecord.id)
  return id_;
}
inline void AuctionRecord::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionRecord.id)
}

// optional .Cmd.ERecordType type = 2;
inline bool AuctionRecord::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuctionRecord::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuctionRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuctionRecord::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ERecordType AuctionRecord::type() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionRecord.type)
  return static_cast< ::Cmd::ERecordType >(type_);
}
inline void AuctionRecord::set_type(::Cmd::ERecordType value) {
  assert(::Cmd::ERecordType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionRecord.type)
}

// optional .Cmd.EAuctionTakeStatus take_status = 3;
inline bool AuctionRecord::has_take_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuctionRecord::set_has_take_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuctionRecord::clear_has_take_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuctionRecord::clear_take_status() {
  take_status_ = 0;
  clear_has_take_status();
}
inline ::Cmd::EAuctionTakeStatus AuctionRecord::take_status() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionRecord.take_status)
  return static_cast< ::Cmd::EAuctionTakeStatus >(take_status_);
}
inline void AuctionRecord::set_take_status(::Cmd::EAuctionTakeStatus value) {
  assert(::Cmd::EAuctionTakeStatus_IsValid(value));
  set_has_take_status();
  take_status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionRecord.take_status)
}

// optional uint32 itemid = 4;
inline bool AuctionRecord::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuctionRecord::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuctionRecord::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuctionRecord::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 AuctionRecord::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionRecord.itemid)
  return itemid_;
}
inline void AuctionRecord::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionRecord.itemid)
}

// optional uint64 price = 5;
inline bool AuctionRecord::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuctionRecord::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuctionRecord::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuctionRecord::clear_price() {
  price_ = GOOGLE_ULONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::uint64 AuctionRecord::price() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionRecord.price)
  return price_;
}
inline void AuctionRecord::set_price(::google::protobuf::uint64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionRecord.price)
}

// optional string seller = 6;
inline bool AuctionRecord::has_seller() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AuctionRecord::set_has_seller() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AuctionRecord::clear_has_seller() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AuctionRecord::clear_seller() {
  if (seller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seller_->clear();
  }
  clear_has_seller();
}
inline const ::std::string& AuctionRecord::seller() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionRecord.seller)
  return *seller_;
}
inline void AuctionRecord::set_seller(const ::std::string& value) {
  set_has_seller();
  if (seller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seller_ = new ::std::string;
  }
  seller_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AuctionRecord.seller)
}
inline void AuctionRecord::set_seller(const char* value) {
  set_has_seller();
  if (seller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seller_ = new ::std::string;
  }
  seller_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AuctionRecord.seller)
}
inline void AuctionRecord::set_seller(const char* value, size_t size) {
  set_has_seller();
  if (seller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seller_ = new ::std::string;
  }
  seller_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AuctionRecord.seller)
}
inline ::std::string* AuctionRecord::mutable_seller() {
  set_has_seller();
  if (seller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seller_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AuctionRecord.seller)
  return seller_;
}
inline ::std::string* AuctionRecord::release_seller() {
  clear_has_seller();
  if (seller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = seller_;
    seller_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuctionRecord::set_allocated_seller(::std::string* seller) {
  if (seller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seller_;
  }
  if (seller) {
    set_has_seller();
    seller_ = seller;
  } else {
    clear_has_seller();
    seller_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AuctionRecord.seller)
}

// optional string buyer = 7;
inline bool AuctionRecord::has_buyer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AuctionRecord::set_has_buyer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AuctionRecord::clear_has_buyer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AuctionRecord::clear_buyer() {
  if (buyer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_->clear();
  }
  clear_has_buyer();
}
inline const ::std::string& AuctionRecord::buyer() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionRecord.buyer)
  return *buyer_;
}
inline void AuctionRecord::set_buyer(const ::std::string& value) {
  set_has_buyer();
  if (buyer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_ = new ::std::string;
  }
  buyer_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AuctionRecord.buyer)
}
inline void AuctionRecord::set_buyer(const char* value) {
  set_has_buyer();
  if (buyer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_ = new ::std::string;
  }
  buyer_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AuctionRecord.buyer)
}
inline void AuctionRecord::set_buyer(const char* value, size_t size) {
  set_has_buyer();
  if (buyer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_ = new ::std::string;
  }
  buyer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AuctionRecord.buyer)
}
inline ::std::string* AuctionRecord::mutable_buyer() {
  set_has_buyer();
  if (buyer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AuctionRecord.buyer)
  return buyer_;
}
inline ::std::string* AuctionRecord::release_buyer() {
  clear_has_buyer();
  if (buyer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = buyer_;
    buyer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuctionRecord::set_allocated_buyer(::std::string* buyer) {
  if (buyer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyer_;
  }
  if (buyer) {
    set_has_buyer();
    buyer_ = buyer;
  } else {
    clear_has_buyer();
    buyer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AuctionRecord.buyer)
}

// optional uint32 zoneid = 8;
inline bool AuctionRecord::has_zoneid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AuctionRecord::set_has_zoneid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AuctionRecord::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AuctionRecord::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 AuctionRecord::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionRecord.zoneid)
  return zoneid_;
}
inline void AuctionRecord::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionRecord.zoneid)
}

// optional uint64 cost_money = 9;
inline bool AuctionRecord::has_cost_money() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AuctionRecord::set_has_cost_money() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AuctionRecord::clear_has_cost_money() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AuctionRecord::clear_cost_money() {
  cost_money_ = GOOGLE_ULONGLONG(0);
  clear_has_cost_money();
}
inline ::google::protobuf::uint64 AuctionRecord::cost_money() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionRecord.cost_money)
  return cost_money_;
}
inline void AuctionRecord::set_cost_money(::google::protobuf::uint64 value) {
  set_has_cost_money();
  cost_money_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionRecord.cost_money)
}

// optional uint64 get_money = 10;
inline bool AuctionRecord::has_get_money() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AuctionRecord::set_has_get_money() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AuctionRecord::clear_has_get_money() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AuctionRecord::clear_get_money() {
  get_money_ = GOOGLE_ULONGLONG(0);
  clear_has_get_money();
}
inline ::google::protobuf::uint64 AuctionRecord::get_money() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionRecord.get_money)
  return get_money_;
}
inline void AuctionRecord::set_get_money(::google::protobuf::uint64 value) {
  set_has_get_money();
  get_money_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionRecord.get_money)
}

// optional uint64 tax = 11;
inline bool AuctionRecord::has_tax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AuctionRecord::set_has_tax() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AuctionRecord::clear_has_tax() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AuctionRecord::clear_tax() {
  tax_ = GOOGLE_ULONGLONG(0);
  clear_has_tax();
}
inline ::google::protobuf::uint64 AuctionRecord::tax() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionRecord.tax)
  return tax_;
}
inline void AuctionRecord::set_tax(::google::protobuf::uint64 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionRecord.tax)
}

// optional uint64 batchid = 12;
inline bool AuctionRecord::has_batchid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AuctionRecord::set_has_batchid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AuctionRecord::clear_has_batchid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AuctionRecord::clear_batchid() {
  batchid_ = GOOGLE_ULONGLONG(0);
  clear_has_batchid();
}
inline ::google::protobuf::uint64 AuctionRecord::batchid() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionRecord.batchid)
  return batchid_;
}
inline void AuctionRecord::set_batchid(::google::protobuf::uint64 value) {
  set_has_batchid();
  batchid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionRecord.batchid)
}

// optional uint32 time = 13;
inline bool AuctionRecord::has_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AuctionRecord::set_has_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AuctionRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AuctionRecord::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 AuctionRecord::time() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionRecord.time)
  return time_;
}
inline void AuctionRecord::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionRecord.time)
}

// optional uint64 signup_id = 14;
inline bool AuctionRecord::has_signup_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AuctionRecord::set_has_signup_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AuctionRecord::clear_has_signup_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AuctionRecord::clear_signup_id() {
  signup_id_ = GOOGLE_ULONGLONG(0);
  clear_has_signup_id();
}
inline ::google::protobuf::uint64 AuctionRecord::signup_id() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionRecord.signup_id)
  return signup_id_;
}
inline void AuctionRecord::set_signup_id(::google::protobuf::uint64 value) {
  set_has_signup_id();
  signup_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionRecord.signup_id)
}

// optional .Cmd.ItemData itemdata = 15;
inline bool AuctionRecord::has_itemdata() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AuctionRecord::set_has_itemdata() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AuctionRecord::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AuctionRecord::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::Cmd::ItemData& AuctionRecord::itemdata() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionRecord.itemdata)
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::Cmd::ItemData* AuctionRecord::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::Cmd::ItemData;
  // @@protoc_insertion_point(field_mutable:Cmd.AuctionRecord.itemdata)
  return itemdata_;
}
inline ::Cmd::ItemData* AuctionRecord::release_itemdata() {
  clear_has_itemdata();
  ::Cmd::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void AuctionRecord::set_allocated_itemdata(::Cmd::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AuctionRecord.itemdata)
}

// -------------------------------------------------------------------

// ReqAuctionRecordCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool ReqAuctionRecordCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAuctionRecordCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAuctionRecordCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAuctionRecordCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command ReqAuctionRecordCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAuctionRecordCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqAuctionRecordCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqAuctionRecordCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_AUCTION_RECORD];
inline bool ReqAuctionRecordCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAuctionRecordCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAuctionRecordCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAuctionRecordCCmd::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::AuctionCParam ReqAuctionRecordCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAuctionRecordCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void ReqAuctionRecordCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqAuctionRecordCCmd.param)
}

// optional uint32 index = 3;
inline bool ReqAuctionRecordCCmd::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAuctionRecordCCmd::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAuctionRecordCCmd::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAuctionRecordCCmd::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 ReqAuctionRecordCCmd::index() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAuctionRecordCCmd.index)
  return index_;
}
inline void ReqAuctionRecordCCmd::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqAuctionRecordCCmd.index)
}

// optional uint64 total_page_cnt = 4;
inline bool ReqAuctionRecordCCmd::has_total_page_cnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqAuctionRecordCCmd::set_has_total_page_cnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqAuctionRecordCCmd::clear_has_total_page_cnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqAuctionRecordCCmd::clear_total_page_cnt() {
  total_page_cnt_ = GOOGLE_ULONGLONG(0);
  clear_has_total_page_cnt();
}
inline ::google::protobuf::uint64 ReqAuctionRecordCCmd::total_page_cnt() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAuctionRecordCCmd.total_page_cnt)
  return total_page_cnt_;
}
inline void ReqAuctionRecordCCmd::set_total_page_cnt(::google::protobuf::uint64 value) {
  set_has_total_page_cnt();
  total_page_cnt_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqAuctionRecordCCmd.total_page_cnt)
}

// repeated .Cmd.AuctionRecord records = 5;
inline int ReqAuctionRecordCCmd::records_size() const {
  return records_.size();
}
inline void ReqAuctionRecordCCmd::clear_records() {
  records_.Clear();
}
inline const ::Cmd::AuctionRecord& ReqAuctionRecordCCmd::records(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAuctionRecordCCmd.records)
  return records_.Get(index);
}
inline ::Cmd::AuctionRecord* ReqAuctionRecordCCmd::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ReqAuctionRecordCCmd.records)
  return records_.Mutable(index);
}
inline ::Cmd::AuctionRecord* ReqAuctionRecordCCmd::add_records() {
  // @@protoc_insertion_point(field_add:Cmd.ReqAuctionRecordCCmd.records)
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AuctionRecord >&
ReqAuctionRecordCCmd::records() const {
  // @@protoc_insertion_point(field_list:Cmd.ReqAuctionRecordCCmd.records)
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AuctionRecord >*
ReqAuctionRecordCCmd::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ReqAuctionRecordCCmd.records)
  return &records_;
}

// -------------------------------------------------------------------

// TakeAuctionRecordCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool TakeAuctionRecordCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TakeAuctionRecordCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TakeAuctionRecordCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TakeAuctionRecordCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command TakeAuctionRecordCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeAuctionRecordCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TakeAuctionRecordCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeAuctionRecordCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_TAKE_AUCTION_RECORD];
inline bool TakeAuctionRecordCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TakeAuctionRecordCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TakeAuctionRecordCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TakeAuctionRecordCCmd::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::AuctionCParam TakeAuctionRecordCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeAuctionRecordCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void TakeAuctionRecordCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeAuctionRecordCCmd.param)
}

// optional uint64 id = 3;
inline bool TakeAuctionRecordCCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TakeAuctionRecordCCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TakeAuctionRecordCCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TakeAuctionRecordCCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 TakeAuctionRecordCCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeAuctionRecordCCmd.id)
  return id_;
}
inline void TakeAuctionRecordCCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeAuctionRecordCCmd.id)
}

// optional .Cmd.ERecordType type = 4;
inline bool TakeAuctionRecordCCmd::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TakeAuctionRecordCCmd::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TakeAuctionRecordCCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TakeAuctionRecordCCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ERecordType TakeAuctionRecordCCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeAuctionRecordCCmd.type)
  return static_cast< ::Cmd::ERecordType >(type_);
}
inline void TakeAuctionRecordCCmd::set_type(::Cmd::ERecordType value) {
  assert(::Cmd::ERecordType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeAuctionRecordCCmd.type)
}

// optional bool ret = 5;
inline bool TakeAuctionRecordCCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TakeAuctionRecordCCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TakeAuctionRecordCCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TakeAuctionRecordCCmd::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool TakeAuctionRecordCCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeAuctionRecordCCmd.ret)
  return ret_;
}
inline void TakeAuctionRecordCCmd::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeAuctionRecordCCmd.ret)
}

// -------------------------------------------------------------------

// NtfCanTakeCntCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool NtfCanTakeCntCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfCanTakeCntCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfCanTakeCntCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfCanTakeCntCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command NtfCanTakeCntCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfCanTakeCntCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfCanTakeCntCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfCanTakeCntCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_CANTAKE_CNT];
inline bool NtfCanTakeCntCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfCanTakeCntCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfCanTakeCntCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfCanTakeCntCCmd::clear_param() {
  param_ = 13;
  clear_has_param();
}
inline ::Cmd::AuctionCParam NtfCanTakeCntCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfCanTakeCntCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void NtfCanTakeCntCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfCanTakeCntCCmd.param)
}

// optional uint32 count = 3;
inline bool NtfCanTakeCntCCmd::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfCanTakeCntCCmd::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfCanTakeCntCCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfCanTakeCntCCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 NtfCanTakeCntCCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfCanTakeCntCCmd.count)
  return count_;
}
inline void NtfCanTakeCntCCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfCanTakeCntCCmd.count)
}

// -------------------------------------------------------------------

// NtfMyOfferPriceCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool NtfMyOfferPriceCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfMyOfferPriceCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfMyOfferPriceCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfMyOfferPriceCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command NtfMyOfferPriceCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMyOfferPriceCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfMyOfferPriceCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMyOfferPriceCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MY_OFFERPRICE];
inline bool NtfMyOfferPriceCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfMyOfferPriceCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfMyOfferPriceCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfMyOfferPriceCCmd::clear_param() {
  param_ = 15;
  clear_has_param();
}
inline ::Cmd::AuctionCParam NtfMyOfferPriceCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMyOfferPriceCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void NtfMyOfferPriceCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMyOfferPriceCCmd.param)
}

// optional uint64 batchid = 3;
inline bool NtfMyOfferPriceCCmd::has_batchid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfMyOfferPriceCCmd::set_has_batchid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfMyOfferPriceCCmd::clear_has_batchid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfMyOfferPriceCCmd::clear_batchid() {
  batchid_ = GOOGLE_ULONGLONG(0);
  clear_has_batchid();
}
inline ::google::protobuf::uint64 NtfMyOfferPriceCCmd::batchid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMyOfferPriceCCmd.batchid)
  return batchid_;
}
inline void NtfMyOfferPriceCCmd::set_batchid(::google::protobuf::uint64 value) {
  set_has_batchid();
  batchid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMyOfferPriceCCmd.batchid)
}

// optional uint32 itemid = 4;
inline bool NtfMyOfferPriceCCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtfMyOfferPriceCCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtfMyOfferPriceCCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtfMyOfferPriceCCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 NtfMyOfferPriceCCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMyOfferPriceCCmd.itemid)
  return itemid_;
}
inline void NtfMyOfferPriceCCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMyOfferPriceCCmd.itemid)
}

// optional uint64 my_price = 5;
inline bool NtfMyOfferPriceCCmd::has_my_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NtfMyOfferPriceCCmd::set_has_my_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NtfMyOfferPriceCCmd::clear_has_my_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NtfMyOfferPriceCCmd::clear_my_price() {
  my_price_ = GOOGLE_ULONGLONG(0);
  clear_has_my_price();
}
inline ::google::protobuf::uint64 NtfMyOfferPriceCCmd::my_price() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMyOfferPriceCCmd.my_price)
  return my_price_;
}
inline void NtfMyOfferPriceCCmd::set_my_price(::google::protobuf::uint64 value) {
  set_has_my_price();
  my_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMyOfferPriceCCmd.my_price)
}

// optional uint64 signup_id = 6;
inline bool NtfMyOfferPriceCCmd::has_signup_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NtfMyOfferPriceCCmd::set_has_signup_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NtfMyOfferPriceCCmd::clear_has_signup_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NtfMyOfferPriceCCmd::clear_signup_id() {
  signup_id_ = GOOGLE_ULONGLONG(0);
  clear_has_signup_id();
}
inline ::google::protobuf::uint64 NtfMyOfferPriceCCmd::signup_id() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMyOfferPriceCCmd.signup_id)
  return signup_id_;
}
inline void NtfMyOfferPriceCCmd::set_signup_id(::google::protobuf::uint64 value) {
  set_has_signup_id();
  signup_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMyOfferPriceCCmd.signup_id)
}

// -------------------------------------------------------------------

// NtfNextAuctionInfoCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool NtfNextAuctionInfoCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfNextAuctionInfoCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfNextAuctionInfoCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfNextAuctionInfoCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command NtfNextAuctionInfoCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfNextAuctionInfoCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfNextAuctionInfoCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfNextAuctionInfoCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_NEXT_AUCTION_INFO];
inline bool NtfNextAuctionInfoCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfNextAuctionInfoCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfNextAuctionInfoCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfNextAuctionInfoCCmd::clear_param() {
  param_ = 16;
  clear_has_param();
}
inline ::Cmd::AuctionCParam NtfNextAuctionInfoCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfNextAuctionInfoCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void NtfNextAuctionInfoCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfNextAuctionInfoCCmd.param)
}

// optional uint64 batchid = 3;
inline bool NtfNextAuctionInfoCCmd::has_batchid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfNextAuctionInfoCCmd::set_has_batchid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfNextAuctionInfoCCmd::clear_has_batchid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfNextAuctionInfoCCmd::clear_batchid() {
  batchid_ = GOOGLE_ULONGLONG(0);
  clear_has_batchid();
}
inline ::google::protobuf::uint64 NtfNextAuctionInfoCCmd::batchid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfNextAuctionInfoCCmd.batchid)
  return batchid_;
}
inline void NtfNextAuctionInfoCCmd::set_batchid(::google::protobuf::uint64 value) {
  set_has_batchid();
  batchid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfNextAuctionInfoCCmd.batchid)
}

// optional uint32 itemid = 4;
inline bool NtfNextAuctionInfoCCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtfNextAuctionInfoCCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtfNextAuctionInfoCCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtfNextAuctionInfoCCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 NtfNextAuctionInfoCCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfNextAuctionInfoCCmd.itemid)
  return itemid_;
}
inline void NtfNextAuctionInfoCCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfNextAuctionInfoCCmd.itemid)
}

// optional uint32 last_itemid = 5;
inline bool NtfNextAuctionInfoCCmd::has_last_itemid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NtfNextAuctionInfoCCmd::set_has_last_itemid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NtfNextAuctionInfoCCmd::clear_has_last_itemid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NtfNextAuctionInfoCCmd::clear_last_itemid() {
  last_itemid_ = 0u;
  clear_has_last_itemid();
}
inline ::google::protobuf::uint32 NtfNextAuctionInfoCCmd::last_itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfNextAuctionInfoCCmd.last_itemid)
  return last_itemid_;
}
inline void NtfNextAuctionInfoCCmd::set_last_itemid(::google::protobuf::uint32 value) {
  set_has_last_itemid();
  last_itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfNextAuctionInfoCCmd.last_itemid)
}

// optional uint64 base_price = 6;
inline bool NtfNextAuctionInfoCCmd::has_base_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NtfNextAuctionInfoCCmd::set_has_base_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NtfNextAuctionInfoCCmd::clear_has_base_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NtfNextAuctionInfoCCmd::clear_base_price() {
  base_price_ = GOOGLE_ULONGLONG(0);
  clear_has_base_price();
}
inline ::google::protobuf::uint64 NtfNextAuctionInfoCCmd::base_price() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfNextAuctionInfoCCmd.base_price)
  return base_price_;
}
inline void NtfNextAuctionInfoCCmd::set_base_price(::google::protobuf::uint64 value) {
  set_has_base_price();
  base_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfNextAuctionInfoCCmd.base_price)
}

// optional uint32 start_time = 7;
inline bool NtfNextAuctionInfoCCmd::has_start_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NtfNextAuctionInfoCCmd::set_has_start_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NtfNextAuctionInfoCCmd::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NtfNextAuctionInfoCCmd::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 NtfNextAuctionInfoCCmd::start_time() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfNextAuctionInfoCCmd.start_time)
  return start_time_;
}
inline void NtfNextAuctionInfoCCmd::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfNextAuctionInfoCCmd.start_time)
}

// optional uint64 signup_id = 8;
inline bool NtfNextAuctionInfoCCmd::has_signup_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NtfNextAuctionInfoCCmd::set_has_signup_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NtfNextAuctionInfoCCmd::clear_has_signup_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NtfNextAuctionInfoCCmd::clear_signup_id() {
  signup_id_ = GOOGLE_ULONGLONG(0);
  clear_has_signup_id();
}
inline ::google::protobuf::uint64 NtfNextAuctionInfoCCmd::signup_id() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfNextAuctionInfoCCmd.signup_id)
  return signup_id_;
}
inline void NtfNextAuctionInfoCCmd::set_signup_id(::google::protobuf::uint64 value) {
  set_has_signup_id();
  signup_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfNextAuctionInfoCCmd.signup_id)
}

// optional uint64 last_signup_id = 9;
inline bool NtfNextAuctionInfoCCmd::has_last_signup_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NtfNextAuctionInfoCCmd::set_has_last_signup_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NtfNextAuctionInfoCCmd::clear_has_last_signup_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NtfNextAuctionInfoCCmd::clear_last_signup_id() {
  last_signup_id_ = GOOGLE_ULONGLONG(0);
  clear_has_last_signup_id();
}
inline ::google::protobuf::uint64 NtfNextAuctionInfoCCmd::last_signup_id() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfNextAuctionInfoCCmd.last_signup_id)
  return last_signup_id_;
}
inline void NtfNextAuctionInfoCCmd::set_last_signup_id(::google::protobuf::uint64 value) {
  set_has_last_signup_id();
  last_signup_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfNextAuctionInfoCCmd.last_signup_id)
}

// -------------------------------------------------------------------

// ReqAuctionInfoCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool ReqAuctionInfoCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAuctionInfoCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAuctionInfoCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAuctionInfoCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command ReqAuctionInfoCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAuctionInfoCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqAuctionInfoCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqAuctionInfoCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_ACUTION_INFO];
inline bool ReqAuctionInfoCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAuctionInfoCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAuctionInfoCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAuctionInfoCCmd::clear_param() {
  param_ = 17;
  clear_has_param();
}
inline ::Cmd::AuctionCParam ReqAuctionInfoCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAuctionInfoCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void ReqAuctionInfoCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqAuctionInfoCCmd.param)
}

// -------------------------------------------------------------------

// NtfCurAuctionInfoCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool NtfCurAuctionInfoCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfCurAuctionInfoCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfCurAuctionInfoCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfCurAuctionInfoCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command NtfCurAuctionInfoCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfCurAuctionInfoCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfCurAuctionInfoCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfCurAuctionInfoCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_CUR_AUCTION_INFO];
inline bool NtfCurAuctionInfoCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfCurAuctionInfoCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfCurAuctionInfoCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfCurAuctionInfoCCmd::clear_param() {
  param_ = 18;
  clear_has_param();
}
inline ::Cmd::AuctionCParam NtfCurAuctionInfoCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfCurAuctionInfoCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void NtfCurAuctionInfoCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfCurAuctionInfoCCmd.param)
}

// optional uint32 itemid = 3;
inline bool NtfCurAuctionInfoCCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfCurAuctionInfoCCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfCurAuctionInfoCCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfCurAuctionInfoCCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 NtfCurAuctionInfoCCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfCurAuctionInfoCCmd.itemid)
  return itemid_;
}
inline void NtfCurAuctionInfoCCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfCurAuctionInfoCCmd.itemid)
}

// -------------------------------------------------------------------

// NtfOverTakePriceCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool NtfOverTakePriceCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfOverTakePriceCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfOverTakePriceCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfOverTakePriceCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command NtfOverTakePriceCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfOverTakePriceCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfOverTakePriceCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfOverTakePriceCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_OVERTAKE_PRICE];
inline bool NtfOverTakePriceCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfOverTakePriceCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfOverTakePriceCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfOverTakePriceCCmd::clear_param() {
  param_ = 19;
  clear_has_param();
}
inline ::Cmd::AuctionCParam NtfOverTakePriceCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfOverTakePriceCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void NtfOverTakePriceCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfOverTakePriceCCmd.param)
}

// -------------------------------------------------------------------

// ReqMyTradedPriceCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool ReqMyTradedPriceCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqMyTradedPriceCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqMyTradedPriceCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqMyTradedPriceCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command ReqMyTradedPriceCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqMyTradedPriceCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqMyTradedPriceCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqMyTradedPriceCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_REQ_MY_TRADED_PRICE];
inline bool ReqMyTradedPriceCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqMyTradedPriceCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqMyTradedPriceCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqMyTradedPriceCCmd::clear_param() {
  param_ = 20;
  clear_has_param();
}
inline ::Cmd::AuctionCParam ReqMyTradedPriceCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqMyTradedPriceCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void ReqMyTradedPriceCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqMyTradedPriceCCmd.param)
}

// optional uint64 batchid = 3;
inline bool ReqMyTradedPriceCCmd::has_batchid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqMyTradedPriceCCmd::set_has_batchid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqMyTradedPriceCCmd::clear_has_batchid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqMyTradedPriceCCmd::clear_batchid() {
  batchid_ = GOOGLE_ULONGLONG(0);
  clear_has_batchid();
}
inline ::google::protobuf::uint64 ReqMyTradedPriceCCmd::batchid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqMyTradedPriceCCmd.batchid)
  return batchid_;
}
inline void ReqMyTradedPriceCCmd::set_batchid(::google::protobuf::uint64 value) {
  set_has_batchid();
  batchid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqMyTradedPriceCCmd.batchid)
}

// optional uint32 itemid = 4;
inline bool ReqMyTradedPriceCCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqMyTradedPriceCCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqMyTradedPriceCCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqMyTradedPriceCCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 ReqMyTradedPriceCCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqMyTradedPriceCCmd.itemid)
  return itemid_;
}
inline void ReqMyTradedPriceCCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqMyTradedPriceCCmd.itemid)
}

// optional uint64 my_price = 5;
inline bool ReqMyTradedPriceCCmd::has_my_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqMyTradedPriceCCmd::set_has_my_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqMyTradedPriceCCmd::clear_has_my_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqMyTradedPriceCCmd::clear_my_price() {
  my_price_ = GOOGLE_ULONGLONG(0);
  clear_has_my_price();
}
inline ::google::protobuf::uint64 ReqMyTradedPriceCCmd::my_price() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqMyTradedPriceCCmd.my_price)
  return my_price_;
}
inline void ReqMyTradedPriceCCmd::set_my_price(::google::protobuf::uint64 value) {
  set_has_my_price();
  my_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqMyTradedPriceCCmd.my_price)
}

// optional uint64 signup_id = 6;
inline bool ReqMyTradedPriceCCmd::has_signup_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqMyTradedPriceCCmd::set_has_signup_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqMyTradedPriceCCmd::clear_has_signup_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqMyTradedPriceCCmd::clear_signup_id() {
  signup_id_ = GOOGLE_ULONGLONG(0);
  clear_has_signup_id();
}
inline ::google::protobuf::uint64 ReqMyTradedPriceCCmd::signup_id() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqMyTradedPriceCCmd.signup_id)
  return signup_id_;
}
inline void ReqMyTradedPriceCCmd::set_signup_id(::google::protobuf::uint64 value) {
  set_has_signup_id();
  signup_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqMyTradedPriceCCmd.signup_id)
}

// -------------------------------------------------------------------

// NtfMaskPriceCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool NtfMaskPriceCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfMaskPriceCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfMaskPriceCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfMaskPriceCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command NtfMaskPriceCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMaskPriceCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfMaskPriceCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMaskPriceCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUCTIONCPARAM_NTF_MASK_PRICE];
inline bool NtfMaskPriceCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfMaskPriceCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfMaskPriceCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfMaskPriceCCmd::clear_param() {
  param_ = 21;
  clear_has_param();
}
inline ::Cmd::AuctionCParam NtfMaskPriceCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMaskPriceCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void NtfMaskPriceCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMaskPriceCCmd.param)
}

// optional uint64 batchid = 3;
inline bool NtfMaskPriceCCmd::has_batchid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfMaskPriceCCmd::set_has_batchid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfMaskPriceCCmd::clear_has_batchid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfMaskPriceCCmd::clear_batchid() {
  batchid_ = GOOGLE_ULONGLONG(0);
  clear_has_batchid();
}
inline ::google::protobuf::uint64 NtfMaskPriceCCmd::batchid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMaskPriceCCmd.batchid)
  return batchid_;
}
inline void NtfMaskPriceCCmd::set_batchid(::google::protobuf::uint64 value) {
  set_has_batchid();
  batchid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMaskPriceCCmd.batchid)
}

// optional uint32 itemid = 4;
inline bool NtfMaskPriceCCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtfMaskPriceCCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtfMaskPriceCCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtfMaskPriceCCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 NtfMaskPriceCCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMaskPriceCCmd.itemid)
  return itemid_;
}
inline void NtfMaskPriceCCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMaskPriceCCmd.itemid)
}

// optional uint32 mask_price = 5;
inline bool NtfMaskPriceCCmd::has_mask_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NtfMaskPriceCCmd::set_has_mask_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NtfMaskPriceCCmd::clear_has_mask_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NtfMaskPriceCCmd::clear_mask_price() {
  mask_price_ = 0u;
  clear_has_mask_price();
}
inline ::google::protobuf::uint32 NtfMaskPriceCCmd::mask_price() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMaskPriceCCmd.mask_price)
  return mask_price_;
}
inline void NtfMaskPriceCCmd::set_mask_price(::google::protobuf::uint32 value) {
  set_has_mask_price();
  mask_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMaskPriceCCmd.mask_price)
}

// optional uint64 signup_id = 6;
inline bool NtfMaskPriceCCmd::has_signup_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NtfMaskPriceCCmd::set_has_signup_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NtfMaskPriceCCmd::clear_has_signup_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NtfMaskPriceCCmd::clear_signup_id() {
  signup_id_ = GOOGLE_ULONGLONG(0);
  clear_has_signup_id();
}
inline ::google::protobuf::uint64 NtfMaskPriceCCmd::signup_id() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMaskPriceCCmd.signup_id)
  return signup_id_;
}
inline void NtfMaskPriceCCmd::set_signup_id(::google::protobuf::uint64 value) {
  set_has_signup_id();
  signup_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMaskPriceCCmd.signup_id)
}

// -------------------------------------------------------------------

// AuctionDialogCCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONC_PROTOCMD];
inline bool AuctionDialogCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionDialogCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionDialogCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionDialogCCmd::clear_cmd() {
  cmd_ = 63;
  clear_has_cmd();
}
inline ::Cmd::Command AuctionDialogCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionDialogCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AuctionDialogCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionDialogCCmd.cmd)
}

// optional .Cmd.AuctionCParam param = 2 [default = AUTIONCPARAM_AUCTION_DIALOG];
inline bool AuctionDialogCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuctionDialogCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuctionDialogCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuctionDialogCCmd::clear_param() {
  param_ = 22;
  clear_has_param();
}
inline ::Cmd::AuctionCParam AuctionDialogCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionDialogCCmd.param)
  return static_cast< ::Cmd::AuctionCParam >(param_);
}
inline void AuctionDialogCCmd::set_param(::Cmd::AuctionCParam value) {
  assert(::Cmd::AuctionCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionDialogCCmd.param)
}

// optional .Cmd.EDialogType type = 3 [default = EDialogType_None];
inline bool AuctionDialogCCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuctionDialogCCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuctionDialogCCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuctionDialogCCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EDialogType AuctionDialogCCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionDialogCCmd.type)
  return static_cast< ::Cmd::EDialogType >(type_);
}
inline void AuctionDialogCCmd::set_type(::Cmd::EDialogType value) {
  assert(::Cmd::EDialogType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionDialogCCmd.type)
}

// optional uint64 msg_id = 4;
inline bool AuctionDialogCCmd::has_msg_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuctionDialogCCmd::set_has_msg_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuctionDialogCCmd::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuctionDialogCCmd::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
inline ::google::protobuf::uint64 AuctionDialogCCmd::msg_id() const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionDialogCCmd.msg_id)
  return msg_id_;
}
inline void AuctionDialogCCmd::set_msg_id(::google::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuctionDialogCCmd.msg_id)
}

// repeated string params = 5;
inline int AuctionDialogCCmd::params_size() const {
  return params_.size();
}
inline void AuctionDialogCCmd::clear_params() {
  params_.Clear();
}
inline const ::std::string& AuctionDialogCCmd::params(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AuctionDialogCCmd.params)
  return params_.Get(index);
}
inline ::std::string* AuctionDialogCCmd::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AuctionDialogCCmd.params)
  return params_.Mutable(index);
}
inline void AuctionDialogCCmd::set_params(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.AuctionDialogCCmd.params)
  params_.Mutable(index)->assign(value);
}
inline void AuctionDialogCCmd::set_params(int index, const char* value) {
  params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AuctionDialogCCmd.params)
}
inline void AuctionDialogCCmd::set_params(int index, const char* value, size_t size) {
  params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AuctionDialogCCmd.params)
}
inline ::std::string* AuctionDialogCCmd::add_params() {
  return params_.Add();
}
inline void AuctionDialogCCmd::add_params(const ::std::string& value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.AuctionDialogCCmd.params)
}
inline void AuctionDialogCCmd::add_params(const char* value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.AuctionDialogCCmd.params)
}
inline void AuctionDialogCCmd::add_params(const char* value, size_t size) {
  params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.AuctionDialogCCmd.params)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AuctionDialogCCmd::params() const {
  // @@protoc_insertion_point(field_list:Cmd.AuctionDialogCCmd.params)
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AuctionDialogCCmd::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AuctionDialogCCmd.params)
  return &params_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::AuctionCParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::AuctionCParam>() {
  return ::Cmd::AuctionCParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EAuctionState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EAuctionState>() {
  return ::Cmd::EAuctionState_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EAuctionResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EAuctionResult>() {
  return ::Cmd::EAuctionResult_descriptor();
}
template <> struct is_proto_enum< ::Cmd::AuctionEvent> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::AuctionEvent>() {
  return ::Cmd::AuctionEvent_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ERecordType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ERecordType>() {
  return ::Cmd::ERecordType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EAuctionTakeStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EAuctionTakeStatus>() {
  return ::Cmd::EAuctionTakeStatus_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EDialogType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EDialogType>() {
  return ::Cmd::EDialogType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AuctionCCmd_2eproto__INCLUDED
