// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuctionSCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AuctionSCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* ForwardCCmd2Auction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardCCmd2Auction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardSCmd2Auction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardSCmd2Auction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardAuction2SCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardAuction2SCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignUpItemSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignUpItemSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferPriceSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferPriceSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferPriceDelOrderSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferPriceDelOrderSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeRecordSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeRecordSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldCmdSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldCmdSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GmModifyAuctionTimeSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GmModifyAuctionTimeSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GmStopAuctionSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GmStopAuctionSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastMsgBySessionAuctionSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastMsgBySessionAuctionSCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AuctionSParam_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AuctionSCmd_2eproto() {
  protobuf_AddDesc_AuctionSCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AuctionSCmd.proto");
  GOOGLE_CHECK(file != NULL);
  ForwardCCmd2Auction_descriptor_ = file->message_type(0);
  static const int ForwardCCmd2Auction_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardCCmd2Auction, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardCCmd2Auction, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardCCmd2Auction, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardCCmd2Auction, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardCCmd2Auction, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardCCmd2Auction, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardCCmd2Auction, len_),
  };
  ForwardCCmd2Auction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardCCmd2Auction_descriptor_,
      ForwardCCmd2Auction::default_instance_,
      ForwardCCmd2Auction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardCCmd2Auction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardCCmd2Auction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardCCmd2Auction));
  ForwardSCmd2Auction_descriptor_ = file->message_type(1);
  static const int ForwardSCmd2Auction_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardSCmd2Auction, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardSCmd2Auction, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardSCmd2Auction, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardSCmd2Auction, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardSCmd2Auction, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardSCmd2Auction, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardSCmd2Auction, len_),
  };
  ForwardSCmd2Auction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardSCmd2Auction_descriptor_,
      ForwardSCmd2Auction::default_instance_,
      ForwardSCmd2Auction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardSCmd2Auction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardSCmd2Auction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardSCmd2Auction));
  ForwardAuction2SCmd_descriptor_ = file->message_type(2);
  static const int ForwardAuction2SCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAuction2SCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAuction2SCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAuction2SCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAuction2SCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAuction2SCmd, len_),
  };
  ForwardAuction2SCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardAuction2SCmd_descriptor_,
      ForwardAuction2SCmd::default_instance_,
      ForwardAuction2SCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAuction2SCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAuction2SCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardAuction2SCmd));
  SignUpItemSCmd_descriptor_ = file->message_type(3);
  static const int SignUpItemSCmd_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemSCmd, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemSCmd, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemSCmd, batchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemSCmd, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemSCmd, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemSCmd, fm_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemSCmd, fm_buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemSCmd, itemdata_),
  };
  SignUpItemSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignUpItemSCmd_descriptor_,
      SignUpItemSCmd::default_instance_,
      SignUpItemSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUpItemSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignUpItemSCmd));
  OfferPriceSCmd_descriptor_ = file->message_type(4);
  static const int OfferPriceSCmd_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceSCmd, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceSCmd, batchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceSCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceSCmd, reduce_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceSCmd, total_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceSCmd, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceSCmd, signupid_),
  };
  OfferPriceSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferPriceSCmd_descriptor_,
      OfferPriceSCmd::default_instance_,
      OfferPriceSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferPriceSCmd));
  OfferPriceDelOrderSCmd_descriptor_ = file->message_type(5);
  static const int OfferPriceDelOrderSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceDelOrderSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceDelOrderSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceDelOrderSCmd, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceDelOrderSCmd, charid_),
  };
  OfferPriceDelOrderSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferPriceDelOrderSCmd_descriptor_,
      OfferPriceDelOrderSCmd::default_instance_,
      OfferPriceDelOrderSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceDelOrderSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferPriceDelOrderSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferPriceDelOrderSCmd));
  TakeRecordSCmd_descriptor_ = file->message_type(6);
  static const int TakeRecordSCmd_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRecordSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRecordSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRecordSCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRecordSCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRecordSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRecordSCmd, batchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRecordSCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRecordSCmd, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRecordSCmd, zeny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRecordSCmd, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRecordSCmd, bcat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRecordSCmd, signup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRecordSCmd, itemdata_),
  };
  TakeRecordSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeRecordSCmd_descriptor_,
      TakeRecordSCmd::default_instance_,
      TakeRecordSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRecordSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRecordSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeRecordSCmd));
  WorldCmdSCmd_descriptor_ = file->message_type(7);
  static const int WorldCmdSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldCmdSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldCmdSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldCmdSCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldCmdSCmd, len_),
  };
  WorldCmdSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldCmdSCmd_descriptor_,
      WorldCmdSCmd::default_instance_,
      WorldCmdSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldCmdSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldCmdSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldCmdSCmd));
  GmModifyAuctionTimeSCmd_descriptor_ = file->message_type(8);
  static const int GmModifyAuctionTimeSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmModifyAuctionTimeSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmModifyAuctionTimeSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmModifyAuctionTimeSCmd, auction_time_),
  };
  GmModifyAuctionTimeSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GmModifyAuctionTimeSCmd_descriptor_,
      GmModifyAuctionTimeSCmd::default_instance_,
      GmModifyAuctionTimeSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmModifyAuctionTimeSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmModifyAuctionTimeSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GmModifyAuctionTimeSCmd));
  GmStopAuctionSCmd_descriptor_ = file->message_type(9);
  static const int GmStopAuctionSCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmStopAuctionSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmStopAuctionSCmd, param_),
  };
  GmStopAuctionSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GmStopAuctionSCmd_descriptor_,
      GmStopAuctionSCmd::default_instance_,
      GmStopAuctionSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmStopAuctionSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmStopAuctionSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GmStopAuctionSCmd));
  BroadcastMsgBySessionAuctionSCmd_descriptor_ = file->message_type(10);
  static const int BroadcastMsgBySessionAuctionSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMsgBySessionAuctionSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMsgBySessionAuctionSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMsgBySessionAuctionSCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMsgBySessionAuctionSCmd, len_),
  };
  BroadcastMsgBySessionAuctionSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastMsgBySessionAuctionSCmd_descriptor_,
      BroadcastMsgBySessionAuctionSCmd::default_instance_,
      BroadcastMsgBySessionAuctionSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMsgBySessionAuctionSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMsgBySessionAuctionSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastMsgBySessionAuctionSCmd));
  AuctionSParam_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AuctionSCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardCCmd2Auction_descriptor_, &ForwardCCmd2Auction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardSCmd2Auction_descriptor_, &ForwardSCmd2Auction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardAuction2SCmd_descriptor_, &ForwardAuction2SCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignUpItemSCmd_descriptor_, &SignUpItemSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferPriceSCmd_descriptor_, &OfferPriceSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferPriceDelOrderSCmd_descriptor_, &OfferPriceDelOrderSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeRecordSCmd_descriptor_, &TakeRecordSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldCmdSCmd_descriptor_, &WorldCmdSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GmModifyAuctionTimeSCmd_descriptor_, &GmModifyAuctionTimeSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GmStopAuctionSCmd_descriptor_, &GmStopAuctionSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastMsgBySessionAuctionSCmd_descriptor_, &BroadcastMsgBySessionAuctionSCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AuctionSCmd_2eproto() {
  delete ForwardCCmd2Auction::default_instance_;
  delete ForwardCCmd2Auction_reflection_;
  delete ForwardSCmd2Auction::default_instance_;
  delete ForwardSCmd2Auction_reflection_;
  delete ForwardAuction2SCmd::default_instance_;
  delete ForwardAuction2SCmd_reflection_;
  delete SignUpItemSCmd::default_instance_;
  delete SignUpItemSCmd_reflection_;
  delete OfferPriceSCmd::default_instance_;
  delete OfferPriceSCmd_reflection_;
  delete OfferPriceDelOrderSCmd::default_instance_;
  delete OfferPriceDelOrderSCmd_reflection_;
  delete TakeRecordSCmd::default_instance_;
  delete TakeRecordSCmd_reflection_;
  delete WorldCmdSCmd::default_instance_;
  delete WorldCmdSCmd_reflection_;
  delete GmModifyAuctionTimeSCmd::default_instance_;
  delete GmModifyAuctionTimeSCmd_reflection_;
  delete GmStopAuctionSCmd::default_instance_;
  delete GmStopAuctionSCmd_reflection_;
  delete BroadcastMsgBySessionAuctionSCmd::default_instance_;
  delete BroadcastMsgBySessionAuctionSCmd_reflection_;
}

void protobuf_AddDesc_AuctionSCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_AuctionCCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021AuctionSCmd.proto\022\003Cmd\032\nxCmd.proto\032\021Au"
    "ctionCCmd.proto\032\017SceneItem.proto\"\323\001\n\023For"
    "wardCCmd2Auction\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\021AUCTIONS_PROTOCMD\022E\n\005param\030\002 \001(\0162\022."
    "Cmd.AuctionSParam:\"AUCTIONSPARAM_FORWARD"
    "_CCMD2AUCTION\022\016\n\006charid\030\003 \001(\004\022\016\n\006zoneid\030"
    "\004 \001(\r\022\014\n\004name\030\005 \001(\t\022\014\n\004data\030\006 \001(\014\022\013\n\003len"
    "\030\007 \001(\r\"\323\001\n\023ForwardSCmd2Auction\022,\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\021AUCTIONS_PROTOCMD\022E\n\005"
    "param\030\002 \001(\0162\022.Cmd.AuctionSParam:\"AUCTION"
    "SPARAM_FORWARD_SCMD2AUCTION\022\016\n\006charid\030\003 "
    "\001(\004\022\016\n\006zoneid\030\004 \001(\r\022\014\n\004name\030\005 \001(\t\022\014\n\004dat"
    "a\030\006 \001(\014\022\013\n\003len\030\007 \001(\r\"\265\001\n\023ForwardAuction2"
    "SCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021AUCTION"
    "S_PROTOCMD\022E\n\005param\030\002 \001(\0162\022.Cmd.AuctionS"
    "Param:\"AUCTIONSPARAM_FORWARD_AUCTION2SCM"
    "D\022\016\n\006charid\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\022\013\n\003len\030\005"
    " \001(\r\"\264\002\n\016SignUpItemSCmd\022,\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\021AUCTIONS_PROTOCMD\022<\n\005param\030\002"
    " \001(\0162\022.Cmd.AuctionSParam:\031AUCTIONSPARAM_"
    "SIGNUP_ITEM\022%\n\010iteminfo\030\003 \001(\0132\023.Cmd.Sign"
    "UpItemInfo\022\013\n\003ret\030\004 \001(\010\022\016\n\006charid\030\005 \001(\004\022"
    "\017\n\007batchid\030\006 \001(\004\022\017\n\007orderid\030\007 \001(\004\022\014\n\004gui"
    "d\030\010 \001(\t\022\020\n\010fm_point\030\t \001(\r\022\017\n\007fm_buff\030\n \001"
    "(\r\022\037\n\010itemdata\030\013 \001(\0132\r.Cmd.ItemData\"\210\002\n\016"
    "OfferPriceSCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\021AUCTIONS_PROTOCMD\022<\n\005param\030\002 \001(\0162\022.Cm"
    "d.AuctionSParam:\031AUCTIONSPARAM_OFFER_PRI"
    "CE\022\017\n\007orderid\030\003 \001(\004\022\017\n\007batchid\030\004 \001(\004\022\016\n\006"
    "itemid\030\005 \001(\r\022\024\n\014reduce_money\030\006 \001(\004\022\023\n\013to"
    "tal_price\030\007 \001(\004\022\013\n\003ret\030\010 \001(\010\022\016\n\006charid\030\t"
    " \001(\004\022\020\n\010signupid\030\n \001(\004\"\257\001\n\026OfferPriceDel"
    "OrderSCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021AU"
    "CTIONS_PROTOCMD\022F\n\005param\030\002 \001(\0162\022.Cmd.Auc"
    "tionSParam:#AUCTIONSPARAM_OFFER_PRICE_DE"
    "L_ORDER\022\017\n\007orderid\030\003 \001(\004\022\016\n\006charid\030\004 \001(\004"
    "\"\323\002\n\016TakeRecordSCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\021AUCTIONS_PROTOCMD\022<\n\005param\030\002 \001(\016"
    "2\022.Cmd.AuctionSParam:\031AUCTIONSPARAM_TAKE"
    "_RECORD\022\n\n\002id\030\003 \001(\004\022\036\n\004type\030\004 \001(\0162\020.Cmd."
    "ERecordType\022\016\n\006charid\030\005 \001(\004\022\017\n\007batchid\030\006"
    " \001(\004\022\016\n\006itemid\030\007 \001(\r\022\033\n\004item\030\010 \001(\0132\r.Cmd"
    ".ItemInfo\022\014\n\004zeny\030\t \001(\004\022\013\n\003ret\030\n \001(\010\022\014\n\004"
    "bcat\030\013 \001(\004\022\021\n\tsignup_id\030\014 \001(\004\022\037\n\010itemdat"
    "a\030\r \001(\0132\r.Cmd.ItemData\"\223\001\n\014WorldCmdSCmd\022"
    ",\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021AUCTIONS_PRO"
    "TOCMD\022:\n\005param\030\002 \001(\0162\022.Cmd.AuctionSParam"
    ":\027AUCTIONSPARAM_WORLD_CMD\022\014\n\004data\030\003 \001(\014\022"
    "\013\n\003len\030\004 \001(\r\"\246\001\n\027GmModifyAuctionTimeSCmd"
    "\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021AUCTIONS_PR"
    "OTOCMD\022G\n\005param\030\002 \001(\0162\022.Cmd.AuctionSPara"
    "m:$AUCTIONSPARAM_GM_MODIFY_AUCTION_TIME\022"
    "\024\n\014auction_time\030\003 \001(\r\"\203\001\n\021GmStopAuctionS"
    "Cmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021AUCTIONS"
    "_PROTOCMD\022@\n\005param\030\002 \001(\0162\022.Cmd.AuctionSP"
    "aram:\035AUCTIONSPARAM_GM_STOP_AUCTION\"\265\001\n "
    "BroadcastMsgBySessionAuctionSCmd\022,\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\021AUCTIONS_PROTOCMD\022H"
    "\n\005param\030\002 \001(\0162\022.Cmd.AuctionSParam:%AUCTI"
    "ONSPARAM_BROADCASE_MSG_BYSESSION\022\014\n\004data"
    "\030\003 \001(\014\022\013\n\003len\030\004 \001(\r*\242\003\n\rAuctionSParam\022&\n"
    "\"AUCTIONSPARAM_FORWARD_CCMD2AUCTION\020\001\022&\n"
    "\"AUCTIONSPARAM_FORWARD_SCMD2AUCTION\020\002\022&\n"
    "\"AUCTIONSPARAM_FORWARD_AUCTION2SCMD\020\003\022\035\n"
    "\031AUCTIONSPARAM_SIGNUP_ITEM\020\004\022\035\n\031AUCTIONS"
    "PARAM_OFFER_PRICE\020\005\022\'\n#AUCTIONSPARAM_OFF"
    "ER_PRICE_DEL_ORDER\020\006\022\035\n\031AUCTIONSPARAM_TA"
    "KE_RECORD\020\007\022\033\n\027AUCTIONSPARAM_WORLD_CMD\020\010"
    "\022(\n$AUCTIONSPARAM_GM_MODIFY_AUCTION_TIME"
    "\020\t\022!\n\035AUCTIONSPARAM_GM_STOP_AUCTION\020\n\022)\n"
    "%AUCTIONSPARAM_BROADCASE_MSG_BYSESSION\020\013", 2840);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AuctionSCmd.proto", &protobuf_RegisterTypes);
  ForwardCCmd2Auction::default_instance_ = new ForwardCCmd2Auction();
  ForwardSCmd2Auction::default_instance_ = new ForwardSCmd2Auction();
  ForwardAuction2SCmd::default_instance_ = new ForwardAuction2SCmd();
  SignUpItemSCmd::default_instance_ = new SignUpItemSCmd();
  OfferPriceSCmd::default_instance_ = new OfferPriceSCmd();
  OfferPriceDelOrderSCmd::default_instance_ = new OfferPriceDelOrderSCmd();
  TakeRecordSCmd::default_instance_ = new TakeRecordSCmd();
  WorldCmdSCmd::default_instance_ = new WorldCmdSCmd();
  GmModifyAuctionTimeSCmd::default_instance_ = new GmModifyAuctionTimeSCmd();
  GmStopAuctionSCmd::default_instance_ = new GmStopAuctionSCmd();
  BroadcastMsgBySessionAuctionSCmd::default_instance_ = new BroadcastMsgBySessionAuctionSCmd();
  ForwardCCmd2Auction::default_instance_->InitAsDefaultInstance();
  ForwardSCmd2Auction::default_instance_->InitAsDefaultInstance();
  ForwardAuction2SCmd::default_instance_->InitAsDefaultInstance();
  SignUpItemSCmd::default_instance_->InitAsDefaultInstance();
  OfferPriceSCmd::default_instance_->InitAsDefaultInstance();
  OfferPriceDelOrderSCmd::default_instance_->InitAsDefaultInstance();
  TakeRecordSCmd::default_instance_->InitAsDefaultInstance();
  WorldCmdSCmd::default_instance_->InitAsDefaultInstance();
  GmModifyAuctionTimeSCmd::default_instance_->InitAsDefaultInstance();
  GmStopAuctionSCmd::default_instance_->InitAsDefaultInstance();
  BroadcastMsgBySessionAuctionSCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AuctionSCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AuctionSCmd_2eproto {
  StaticDescriptorInitializer_AuctionSCmd_2eproto() {
    protobuf_AddDesc_AuctionSCmd_2eproto();
  }
} static_descriptor_initializer_AuctionSCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* AuctionSParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionSParam_descriptor_;
}
bool AuctionSParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardCCmd2Auction::kCmdFieldNumber;
const int ForwardCCmd2Auction::kParamFieldNumber;
const int ForwardCCmd2Auction::kCharidFieldNumber;
const int ForwardCCmd2Auction::kZoneidFieldNumber;
const int ForwardCCmd2Auction::kNameFieldNumber;
const int ForwardCCmd2Auction::kDataFieldNumber;
const int ForwardCCmd2Auction::kLenFieldNumber;
#endif  // !_MSC_VER

ForwardCCmd2Auction::ForwardCCmd2Auction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardCCmd2Auction)
}

void ForwardCCmd2Auction::InitAsDefaultInstance() {
}

ForwardCCmd2Auction::ForwardCCmd2Auction(const ForwardCCmd2Auction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardCCmd2Auction)
}

void ForwardCCmd2Auction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 213;
  param_ = 1;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardCCmd2Auction::~ForwardCCmd2Auction() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardCCmd2Auction)
  SharedDtor();
}

void ForwardCCmd2Auction::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardCCmd2Auction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardCCmd2Auction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardCCmd2Auction_descriptor_;
}

const ForwardCCmd2Auction& ForwardCCmd2Auction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionSCmd_2eproto();
  return *default_instance_;
}

ForwardCCmd2Auction* ForwardCCmd2Auction::default_instance_ = NULL;

ForwardCCmd2Auction* ForwardCCmd2Auction::New() const {
  return new ForwardCCmd2Auction;
}

void ForwardCCmd2Auction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ForwardCCmd2Auction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(zoneid_, len_);
    cmd_ = 213;
    param_ = 1;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardCCmd2Auction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardCCmd2Auction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_CCMD2AUCTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_len;
        break;
      }

      // optional uint32 len = 7;
      case 7: {
        if (tag == 56) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardCCmd2Auction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardCCmd2Auction)
  return false;
#undef DO_
}

void ForwardCCmd2Auction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardCCmd2Auction)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_CCMD2AUCTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // optional uint32 len = 7;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardCCmd2Auction)
}

::google::protobuf::uint8* ForwardCCmd2Auction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardCCmd2Auction)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_CCMD2AUCTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // optional uint32 len = 7;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardCCmd2Auction)
  return target;
}

int ForwardCCmd2Auction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_CCMD2AUCTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 7;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardCCmd2Auction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardCCmd2Auction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardCCmd2Auction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardCCmd2Auction::MergeFrom(const ForwardCCmd2Auction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardCCmd2Auction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardCCmd2Auction::CopyFrom(const ForwardCCmd2Auction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardCCmd2Auction::IsInitialized() const {

  return true;
}

void ForwardCCmd2Auction::Swap(ForwardCCmd2Auction* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(name_, other->name_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardCCmd2Auction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardCCmd2Auction_descriptor_;
  metadata.reflection = ForwardCCmd2Auction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardSCmd2Auction::kCmdFieldNumber;
const int ForwardSCmd2Auction::kParamFieldNumber;
const int ForwardSCmd2Auction::kCharidFieldNumber;
const int ForwardSCmd2Auction::kZoneidFieldNumber;
const int ForwardSCmd2Auction::kNameFieldNumber;
const int ForwardSCmd2Auction::kDataFieldNumber;
const int ForwardSCmd2Auction::kLenFieldNumber;
#endif  // !_MSC_VER

ForwardSCmd2Auction::ForwardSCmd2Auction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardSCmd2Auction)
}

void ForwardSCmd2Auction::InitAsDefaultInstance() {
}

ForwardSCmd2Auction::ForwardSCmd2Auction(const ForwardSCmd2Auction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardSCmd2Auction)
}

void ForwardSCmd2Auction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 213;
  param_ = 2;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardSCmd2Auction::~ForwardSCmd2Auction() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardSCmd2Auction)
  SharedDtor();
}

void ForwardSCmd2Auction::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardSCmd2Auction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardSCmd2Auction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardSCmd2Auction_descriptor_;
}

const ForwardSCmd2Auction& ForwardSCmd2Auction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionSCmd_2eproto();
  return *default_instance_;
}

ForwardSCmd2Auction* ForwardSCmd2Auction::default_instance_ = NULL;

ForwardSCmd2Auction* ForwardSCmd2Auction::New() const {
  return new ForwardSCmd2Auction;
}

void ForwardSCmd2Auction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ForwardSCmd2Auction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(zoneid_, len_);
    cmd_ = 213;
    param_ = 2;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardSCmd2Auction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardSCmd2Auction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_SCMD2AUCTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_len;
        break;
      }

      // optional uint32 len = 7;
      case 7: {
        if (tag == 56) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardSCmd2Auction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardSCmd2Auction)
  return false;
#undef DO_
}

void ForwardSCmd2Auction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardSCmd2Auction)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_SCMD2AUCTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // optional uint32 len = 7;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardSCmd2Auction)
}

::google::protobuf::uint8* ForwardSCmd2Auction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardSCmd2Auction)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_SCMD2AUCTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // optional uint32 len = 7;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardSCmd2Auction)
  return target;
}

int ForwardSCmd2Auction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_SCMD2AUCTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 7;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardSCmd2Auction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardSCmd2Auction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardSCmd2Auction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardSCmd2Auction::MergeFrom(const ForwardSCmd2Auction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardSCmd2Auction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardSCmd2Auction::CopyFrom(const ForwardSCmd2Auction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardSCmd2Auction::IsInitialized() const {

  return true;
}

void ForwardSCmd2Auction::Swap(ForwardSCmd2Auction* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(name_, other->name_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardSCmd2Auction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardSCmd2Auction_descriptor_;
  metadata.reflection = ForwardSCmd2Auction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardAuction2SCmd::kCmdFieldNumber;
const int ForwardAuction2SCmd::kParamFieldNumber;
const int ForwardAuction2SCmd::kCharidFieldNumber;
const int ForwardAuction2SCmd::kDataFieldNumber;
const int ForwardAuction2SCmd::kLenFieldNumber;
#endif  // !_MSC_VER

ForwardAuction2SCmd::ForwardAuction2SCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardAuction2SCmd)
}

void ForwardAuction2SCmd::InitAsDefaultInstance() {
}

ForwardAuction2SCmd::ForwardAuction2SCmd(const ForwardAuction2SCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardAuction2SCmd)
}

void ForwardAuction2SCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 213;
  param_ = 3;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardAuction2SCmd::~ForwardAuction2SCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardAuction2SCmd)
  SharedDtor();
}

void ForwardAuction2SCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardAuction2SCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardAuction2SCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardAuction2SCmd_descriptor_;
}

const ForwardAuction2SCmd& ForwardAuction2SCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionSCmd_2eproto();
  return *default_instance_;
}

ForwardAuction2SCmd* ForwardAuction2SCmd::default_instance_ = NULL;

ForwardAuction2SCmd* ForwardAuction2SCmd::New() const {
  return new ForwardAuction2SCmd;
}

void ForwardAuction2SCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 213;
    param_ = 3;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardAuction2SCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardAuction2SCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_AUCTION2SCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5;
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardAuction2SCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardAuction2SCmd)
  return false;
#undef DO_
}

void ForwardAuction2SCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardAuction2SCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_AUCTION2SCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardAuction2SCmd)
}

::google::protobuf::uint8* ForwardAuction2SCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardAuction2SCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_AUCTION2SCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardAuction2SCmd)
  return target;
}

int ForwardAuction2SCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_AUCTION2SCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardAuction2SCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardAuction2SCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardAuction2SCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardAuction2SCmd::MergeFrom(const ForwardAuction2SCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardAuction2SCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardAuction2SCmd::CopyFrom(const ForwardAuction2SCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardAuction2SCmd::IsInitialized() const {

  return true;
}

void ForwardAuction2SCmd::Swap(ForwardAuction2SCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardAuction2SCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardAuction2SCmd_descriptor_;
  metadata.reflection = ForwardAuction2SCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignUpItemSCmd::kCmdFieldNumber;
const int SignUpItemSCmd::kParamFieldNumber;
const int SignUpItemSCmd::kIteminfoFieldNumber;
const int SignUpItemSCmd::kRetFieldNumber;
const int SignUpItemSCmd::kCharidFieldNumber;
const int SignUpItemSCmd::kBatchidFieldNumber;
const int SignUpItemSCmd::kOrderidFieldNumber;
const int SignUpItemSCmd::kGuidFieldNumber;
const int SignUpItemSCmd::kFmPointFieldNumber;
const int SignUpItemSCmd::kFmBuffFieldNumber;
const int SignUpItemSCmd::kItemdataFieldNumber;
#endif  // !_MSC_VER

SignUpItemSCmd::SignUpItemSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SignUpItemSCmd)
}

void SignUpItemSCmd::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::Cmd::SignUpItemInfo*>(&::Cmd::SignUpItemInfo::default_instance());
  itemdata_ = const_cast< ::Cmd::ItemData*>(&::Cmd::ItemData::default_instance());
}

SignUpItemSCmd::SignUpItemSCmd(const SignUpItemSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SignUpItemSCmd)
}

void SignUpItemSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 213;
  param_ = 4;
  iteminfo_ = NULL;
  ret_ = false;
  charid_ = GOOGLE_ULONGLONG(0);
  batchid_ = GOOGLE_ULONGLONG(0);
  orderid_ = GOOGLE_ULONGLONG(0);
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fm_point_ = 0u;
  fm_buff_ = 0u;
  itemdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignUpItemSCmd::~SignUpItemSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SignUpItemSCmd)
  SharedDtor();
}

void SignUpItemSCmd::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
    delete iteminfo_;
    delete itemdata_;
  }
}

void SignUpItemSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignUpItemSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignUpItemSCmd_descriptor_;
}

const SignUpItemSCmd& SignUpItemSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionSCmd_2eproto();
  return *default_instance_;
}

SignUpItemSCmd* SignUpItemSCmd::default_instance_ = NULL;

SignUpItemSCmd* SignUpItemSCmd::New() const {
  return new SignUpItemSCmd;
}

void SignUpItemSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SignUpItemSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, ret_);
    cmd_ = 213;
    param_ = 4;
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::Cmd::SignUpItemInfo::Clear();
    }
    orderid_ = GOOGLE_ULONGLONG(0);
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    fm_point_ = 0u;
    fm_buff_ = 0u;
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignUpItemSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SignUpItemSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_SIGNUP_ITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_iteminfo;
        break;
      }

      // optional .Cmd.SignUpItemInfo iteminfo = 3;
      case 3: {
        if (tag == 26) {
         parse_iteminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional bool ret = 4;
      case 4: {
        if (tag == 32) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 5;
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_batchid;
        break;
      }

      // optional uint64 batchid = 6;
      case 6: {
        if (tag == 48) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_orderid;
        break;
      }

      // optional uint64 orderid = 7;
      case 7: {
        if (tag == 56) {
         parse_orderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_guid;
        break;
      }

      // optional string guid = 8;
      case 8: {
        if (tag == 66) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fm_point;
        break;
      }

      // optional uint32 fm_point = 9;
      case 9: {
        if (tag == 72) {
         parse_fm_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fm_point_)));
          set_has_fm_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_fm_buff;
        break;
      }

      // optional uint32 fm_buff = 10;
      case 10: {
        if (tag == 80) {
         parse_fm_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fm_buff_)));
          set_has_fm_buff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_itemdata;
        break;
      }

      // optional .Cmd.ItemData itemdata = 11;
      case 11: {
        if (tag == 90) {
         parse_itemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SignUpItemSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SignUpItemSCmd)
  return false;
#undef DO_
}

void SignUpItemSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SignUpItemSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_SIGNUP_ITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SignUpItemInfo iteminfo = 3;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->iteminfo(), output);
  }

  // optional bool ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ret(), output);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid(), output);
  }

  // optional uint64 batchid = 6;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->batchid(), output);
  }

  // optional uint64 orderid = 7;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->orderid(), output);
  }

  // optional string guid = 8;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->guid(), output);
  }

  // optional uint32 fm_point = 9;
  if (has_fm_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fm_point(), output);
  }

  // optional uint32 fm_buff = 10;
  if (has_fm_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->fm_buff(), output);
  }

  // optional .Cmd.ItemData itemdata = 11;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->itemdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SignUpItemSCmd)
}

::google::protobuf::uint8* SignUpItemSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SignUpItemSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_SIGNUP_ITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SignUpItemInfo iteminfo = 3;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->iteminfo(), target);
  }

  // optional bool ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ret(), target);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid(), target);
  }

  // optional uint64 batchid = 6;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->batchid(), target);
  }

  // optional uint64 orderid = 7;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->orderid(), target);
  }

  // optional string guid = 8;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->guid(), target);
  }

  // optional uint32 fm_point = 9;
  if (has_fm_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fm_point(), target);
  }

  // optional uint32 fm_buff = 10;
  if (has_fm_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->fm_buff(), target);
  }

  // optional .Cmd.ItemData itemdata = 11;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->itemdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SignUpItemSCmd)
  return target;
}

int SignUpItemSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_SIGNUP_ITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SignUpItemInfo iteminfo = 3;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

    // optional bool ret = 4;
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // optional uint64 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 batchid = 6;
    if (has_batchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batchid());
    }

    // optional uint64 orderid = 7;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->orderid());
    }

    // optional string guid = 8;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 fm_point = 9;
    if (has_fm_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fm_point());
    }

    // optional uint32 fm_buff = 10;
    if (has_fm_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fm_buff());
    }

    // optional .Cmd.ItemData itemdata = 11;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignUpItemSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignUpItemSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignUpItemSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignUpItemSCmd::MergeFrom(const SignUpItemSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::Cmd::SignUpItemInfo::MergeFrom(from.iteminfo());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fm_point()) {
      set_fm_point(from.fm_point());
    }
    if (from.has_fm_buff()) {
      set_fm_buff(from.fm_buff());
    }
    if (from.has_itemdata()) {
      mutable_itemdata()->::Cmd::ItemData::MergeFrom(from.itemdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignUpItemSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignUpItemSCmd::CopyFrom(const SignUpItemSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignUpItemSCmd::IsInitialized() const {

  return true;
}

void SignUpItemSCmd::Swap(SignUpItemSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(batchid_, other->batchid_);
    std::swap(orderid_, other->orderid_);
    std::swap(guid_, other->guid_);
    std::swap(fm_point_, other->fm_point_);
    std::swap(fm_buff_, other->fm_buff_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignUpItemSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignUpItemSCmd_descriptor_;
  metadata.reflection = SignUpItemSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferPriceSCmd::kCmdFieldNumber;
const int OfferPriceSCmd::kParamFieldNumber;
const int OfferPriceSCmd::kOrderidFieldNumber;
const int OfferPriceSCmd::kBatchidFieldNumber;
const int OfferPriceSCmd::kItemidFieldNumber;
const int OfferPriceSCmd::kReduceMoneyFieldNumber;
const int OfferPriceSCmd::kTotalPriceFieldNumber;
const int OfferPriceSCmd::kRetFieldNumber;
const int OfferPriceSCmd::kCharidFieldNumber;
const int OfferPriceSCmd::kSignupidFieldNumber;
#endif  // !_MSC_VER

OfferPriceSCmd::OfferPriceSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OfferPriceSCmd)
}

void OfferPriceSCmd::InitAsDefaultInstance() {
}

OfferPriceSCmd::OfferPriceSCmd(const OfferPriceSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OfferPriceSCmd)
}

void OfferPriceSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 213;
  param_ = 5;
  orderid_ = GOOGLE_ULONGLONG(0);
  batchid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  reduce_money_ = GOOGLE_ULONGLONG(0);
  total_price_ = GOOGLE_ULONGLONG(0);
  ret_ = false;
  charid_ = GOOGLE_ULONGLONG(0);
  signupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferPriceSCmd::~OfferPriceSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.OfferPriceSCmd)
  SharedDtor();
}

void OfferPriceSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfferPriceSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferPriceSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferPriceSCmd_descriptor_;
}

const OfferPriceSCmd& OfferPriceSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionSCmd_2eproto();
  return *default_instance_;
}

OfferPriceSCmd* OfferPriceSCmd::default_instance_ = NULL;

OfferPriceSCmd* OfferPriceSCmd::New() const {
  return new OfferPriceSCmd;
}

void OfferPriceSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OfferPriceSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(orderid_, total_price_);
    cmd_ = 213;
    param_ = 5;
  }
  ZR_(charid_, signupid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferPriceSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OfferPriceSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_OFFER_PRICE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_orderid;
        break;
      }

      // optional uint64 orderid = 3;
      case 3: {
        if (tag == 24) {
         parse_orderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_batchid;
        break;
      }

      // optional uint64 batchid = 4;
      case 4: {
        if (tag == 32) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 5;
      case 5: {
        if (tag == 40) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reduce_money;
        break;
      }

      // optional uint64 reduce_money = 6;
      case 6: {
        if (tag == 48) {
         parse_reduce_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reduce_money_)));
          set_has_reduce_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_total_price;
        break;
      }

      // optional uint64 total_price = 7;
      case 7: {
        if (tag == 56) {
         parse_total_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_price_)));
          set_has_total_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ret;
        break;
      }

      // optional bool ret = 8;
      case 8: {
        if (tag == 64) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 9;
      case 9: {
        if (tag == 72) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_signupid;
        break;
      }

      // optional uint64 signupid = 10;
      case 10: {
        if (tag == 80) {
         parse_signupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signupid_)));
          set_has_signupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OfferPriceSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OfferPriceSCmd)
  return false;
#undef DO_
}

void OfferPriceSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OfferPriceSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_OFFER_PRICE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 orderid = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->orderid(), output);
  }

  // optional uint64 batchid = 4;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->batchid(), output);
  }

  // optional uint32 itemid = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->itemid(), output);
  }

  // optional uint64 reduce_money = 6;
  if (has_reduce_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->reduce_money(), output);
  }

  // optional uint64 total_price = 7;
  if (has_total_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->total_price(), output);
  }

  // optional bool ret = 8;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ret(), output);
  }

  // optional uint64 charid = 9;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->charid(), output);
  }

  // optional uint64 signupid = 10;
  if (has_signupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->signupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OfferPriceSCmd)
}

::google::protobuf::uint8* OfferPriceSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OfferPriceSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_OFFER_PRICE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 orderid = 3;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->orderid(), target);
  }

  // optional uint64 batchid = 4;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->batchid(), target);
  }

  // optional uint32 itemid = 5;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->itemid(), target);
  }

  // optional uint64 reduce_money = 6;
  if (has_reduce_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->reduce_money(), target);
  }

  // optional uint64 total_price = 7;
  if (has_total_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->total_price(), target);
  }

  // optional bool ret = 8;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ret(), target);
  }

  // optional uint64 charid = 9;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->charid(), target);
  }

  // optional uint64 signupid = 10;
  if (has_signupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->signupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OfferPriceSCmd)
  return target;
}

int OfferPriceSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_OFFER_PRICE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 orderid = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->orderid());
    }

    // optional uint64 batchid = 4;
    if (has_batchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batchid());
    }

    // optional uint32 itemid = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint64 reduce_money = 6;
    if (has_reduce_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reduce_money());
    }

    // optional uint64 total_price = 7;
    if (has_total_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_price());
    }

    // optional bool ret = 8;
    if (has_ret()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 charid = 9;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 signupid = 10;
    if (has_signupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferPriceSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferPriceSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferPriceSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferPriceSCmd::MergeFrom(const OfferPriceSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_reduce_money()) {
      set_reduce_money(from.reduce_money());
    }
    if (from.has_total_price()) {
      set_total_price(from.total_price());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_signupid()) {
      set_signupid(from.signupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferPriceSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferPriceSCmd::CopyFrom(const OfferPriceSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferPriceSCmd::IsInitialized() const {

  return true;
}

void OfferPriceSCmd::Swap(OfferPriceSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(orderid_, other->orderid_);
    std::swap(batchid_, other->batchid_);
    std::swap(itemid_, other->itemid_);
    std::swap(reduce_money_, other->reduce_money_);
    std::swap(total_price_, other->total_price_);
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(signupid_, other->signupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferPriceSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferPriceSCmd_descriptor_;
  metadata.reflection = OfferPriceSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferPriceDelOrderSCmd::kCmdFieldNumber;
const int OfferPriceDelOrderSCmd::kParamFieldNumber;
const int OfferPriceDelOrderSCmd::kOrderidFieldNumber;
const int OfferPriceDelOrderSCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

OfferPriceDelOrderSCmd::OfferPriceDelOrderSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OfferPriceDelOrderSCmd)
}

void OfferPriceDelOrderSCmd::InitAsDefaultInstance() {
}

OfferPriceDelOrderSCmd::OfferPriceDelOrderSCmd(const OfferPriceDelOrderSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OfferPriceDelOrderSCmd)
}

void OfferPriceDelOrderSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 213;
  param_ = 6;
  orderid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferPriceDelOrderSCmd::~OfferPriceDelOrderSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.OfferPriceDelOrderSCmd)
  SharedDtor();
}

void OfferPriceDelOrderSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfferPriceDelOrderSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferPriceDelOrderSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferPriceDelOrderSCmd_descriptor_;
}

const OfferPriceDelOrderSCmd& OfferPriceDelOrderSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionSCmd_2eproto();
  return *default_instance_;
}

OfferPriceDelOrderSCmd* OfferPriceDelOrderSCmd::default_instance_ = NULL;

OfferPriceDelOrderSCmd* OfferPriceDelOrderSCmd::New() const {
  return new OfferPriceDelOrderSCmd;
}

void OfferPriceDelOrderSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OfferPriceDelOrderSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(orderid_, charid_);
    cmd_ = 213;
    param_ = 6;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferPriceDelOrderSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OfferPriceDelOrderSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_OFFER_PRICE_DEL_ORDER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_orderid;
        break;
      }

      // optional uint64 orderid = 3;
      case 3: {
        if (tag == 24) {
         parse_orderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OfferPriceDelOrderSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OfferPriceDelOrderSCmd)
  return false;
#undef DO_
}

void OfferPriceDelOrderSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OfferPriceDelOrderSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_OFFER_PRICE_DEL_ORDER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 orderid = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->orderid(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OfferPriceDelOrderSCmd)
}

::google::protobuf::uint8* OfferPriceDelOrderSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OfferPriceDelOrderSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_OFFER_PRICE_DEL_ORDER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 orderid = 3;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->orderid(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OfferPriceDelOrderSCmd)
  return target;
}

int OfferPriceDelOrderSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_OFFER_PRICE_DEL_ORDER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 orderid = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->orderid());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferPriceDelOrderSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferPriceDelOrderSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferPriceDelOrderSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferPriceDelOrderSCmd::MergeFrom(const OfferPriceDelOrderSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferPriceDelOrderSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferPriceDelOrderSCmd::CopyFrom(const OfferPriceDelOrderSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferPriceDelOrderSCmd::IsInitialized() const {

  return true;
}

void OfferPriceDelOrderSCmd::Swap(OfferPriceDelOrderSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(orderid_, other->orderid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferPriceDelOrderSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferPriceDelOrderSCmd_descriptor_;
  metadata.reflection = OfferPriceDelOrderSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeRecordSCmd::kCmdFieldNumber;
const int TakeRecordSCmd::kParamFieldNumber;
const int TakeRecordSCmd::kIdFieldNumber;
const int TakeRecordSCmd::kTypeFieldNumber;
const int TakeRecordSCmd::kCharidFieldNumber;
const int TakeRecordSCmd::kBatchidFieldNumber;
const int TakeRecordSCmd::kItemidFieldNumber;
const int TakeRecordSCmd::kItemFieldNumber;
const int TakeRecordSCmd::kZenyFieldNumber;
const int TakeRecordSCmd::kRetFieldNumber;
const int TakeRecordSCmd::kBcatFieldNumber;
const int TakeRecordSCmd::kSignupIdFieldNumber;
const int TakeRecordSCmd::kItemdataFieldNumber;
#endif  // !_MSC_VER

TakeRecordSCmd::TakeRecordSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TakeRecordSCmd)
}

void TakeRecordSCmd::InitAsDefaultInstance() {
  item_ = const_cast< ::Cmd::ItemInfo*>(&::Cmd::ItemInfo::default_instance());
  itemdata_ = const_cast< ::Cmd::ItemData*>(&::Cmd::ItemData::default_instance());
}

TakeRecordSCmd::TakeRecordSCmd(const TakeRecordSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TakeRecordSCmd)
}

void TakeRecordSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 213;
  param_ = 7;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  charid_ = GOOGLE_ULONGLONG(0);
  batchid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  item_ = NULL;
  zeny_ = GOOGLE_ULONGLONG(0);
  ret_ = false;
  bcat_ = GOOGLE_ULONGLONG(0);
  signup_id_ = GOOGLE_ULONGLONG(0);
  itemdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeRecordSCmd::~TakeRecordSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TakeRecordSCmd)
  SharedDtor();
}

void TakeRecordSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
    delete itemdata_;
  }
}

void TakeRecordSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeRecordSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeRecordSCmd_descriptor_;
}

const TakeRecordSCmd& TakeRecordSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionSCmd_2eproto();
  return *default_instance_;
}

TakeRecordSCmd* TakeRecordSCmd::default_instance_ = NULL;

TakeRecordSCmd* TakeRecordSCmd::New() const {
  return new TakeRecordSCmd;
}

void TakeRecordSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TakeRecordSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, charid_);
    ZR_(itemid_, batchid_);
    cmd_ = 213;
    param_ = 7;
    type_ = 1;
    if (has_item()) {
      if (item_ != NULL) item_->::Cmd::ItemInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(zeny_, signup_id_);
    ret_ = false;
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeRecordSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TakeRecordSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_TAKE_RECORD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.ERecordType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERecordType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ERecordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 5;
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_batchid;
        break;
      }

      // optional uint64 batchid = 6;
      case 6: {
        if (tag == 48) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 7;
      case 7: {
        if (tag == 56) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_item;
        break;
      }

      // optional .Cmd.ItemInfo item = 8;
      case 8: {
        if (tag == 66) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_zeny;
        break;
      }

      // optional uint64 zeny = 9;
      case 9: {
        if (tag == 72) {
         parse_zeny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zeny_)));
          set_has_zeny();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ret;
        break;
      }

      // optional bool ret = 10;
      case 10: {
        if (tag == 80) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_bcat;
        break;
      }

      // optional uint64 bcat = 11;
      case 11: {
        if (tag == 88) {
         parse_bcat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bcat_)));
          set_has_bcat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_signup_id;
        break;
      }

      // optional uint64 signup_id = 12;
      case 12: {
        if (tag == 96) {
         parse_signup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signup_id_)));
          set_has_signup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_itemdata;
        break;
      }

      // optional .Cmd.ItemData itemdata = 13;
      case 13: {
        if (tag == 106) {
         parse_itemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TakeRecordSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TakeRecordSCmd)
  return false;
#undef DO_
}

void TakeRecordSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TakeRecordSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_TAKE_RECORD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional .Cmd.ERecordType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid(), output);
  }

  // optional uint64 batchid = 6;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->batchid(), output);
  }

  // optional uint32 itemid = 7;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->itemid(), output);
  }

  // optional .Cmd.ItemInfo item = 8;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->item(), output);
  }

  // optional uint64 zeny = 9;
  if (has_zeny()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->zeny(), output);
  }

  // optional bool ret = 10;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ret(), output);
  }

  // optional uint64 bcat = 11;
  if (has_bcat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->bcat(), output);
  }

  // optional uint64 signup_id = 12;
  if (has_signup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->signup_id(), output);
  }

  // optional .Cmd.ItemData itemdata = 13;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->itemdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TakeRecordSCmd)
}

::google::protobuf::uint8* TakeRecordSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TakeRecordSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_TAKE_RECORD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional .Cmd.ERecordType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid(), target);
  }

  // optional uint64 batchid = 6;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->batchid(), target);
  }

  // optional uint32 itemid = 7;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->itemid(), target);
  }

  // optional .Cmd.ItemInfo item = 8;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->item(), target);
  }

  // optional uint64 zeny = 9;
  if (has_zeny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->zeny(), target);
  }

  // optional bool ret = 10;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ret(), target);
  }

  // optional uint64 bcat = 11;
  if (has_bcat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->bcat(), target);
  }

  // optional uint64 signup_id = 12;
  if (has_signup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->signup_id(), target);
  }

  // optional .Cmd.ItemData itemdata = 13;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->itemdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TakeRecordSCmd)
  return target;
}

int TakeRecordSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_TAKE_RECORD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .Cmd.ERecordType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 batchid = 6;
    if (has_batchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batchid());
    }

    // optional uint32 itemid = 7;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional .Cmd.ItemInfo item = 8;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 zeny = 9;
    if (has_zeny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->zeny());
    }

    // optional bool ret = 10;
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // optional uint64 bcat = 11;
    if (has_bcat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bcat());
    }

    // optional uint64 signup_id = 12;
    if (has_signup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signup_id());
    }

    // optional .Cmd.ItemData itemdata = 13;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeRecordSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeRecordSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeRecordSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeRecordSCmd::MergeFrom(const TakeRecordSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_item()) {
      mutable_item()->::Cmd::ItemInfo::MergeFrom(from.item());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zeny()) {
      set_zeny(from.zeny());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_bcat()) {
      set_bcat(from.bcat());
    }
    if (from.has_signup_id()) {
      set_signup_id(from.signup_id());
    }
    if (from.has_itemdata()) {
      mutable_itemdata()->::Cmd::ItemData::MergeFrom(from.itemdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeRecordSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeRecordSCmd::CopyFrom(const TakeRecordSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeRecordSCmd::IsInitialized() const {

  return true;
}

void TakeRecordSCmd::Swap(TakeRecordSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(batchid_, other->batchid_);
    std::swap(itemid_, other->itemid_);
    std::swap(item_, other->item_);
    std::swap(zeny_, other->zeny_);
    std::swap(ret_, other->ret_);
    std::swap(bcat_, other->bcat_);
    std::swap(signup_id_, other->signup_id_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeRecordSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeRecordSCmd_descriptor_;
  metadata.reflection = TakeRecordSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldCmdSCmd::kCmdFieldNumber;
const int WorldCmdSCmd::kParamFieldNumber;
const int WorldCmdSCmd::kDataFieldNumber;
const int WorldCmdSCmd::kLenFieldNumber;
#endif  // !_MSC_VER

WorldCmdSCmd::WorldCmdSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WorldCmdSCmd)
}

void WorldCmdSCmd::InitAsDefaultInstance() {
}

WorldCmdSCmd::WorldCmdSCmd(const WorldCmdSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WorldCmdSCmd)
}

void WorldCmdSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 213;
  param_ = 8;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldCmdSCmd::~WorldCmdSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.WorldCmdSCmd)
  SharedDtor();
}

void WorldCmdSCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void WorldCmdSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldCmdSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldCmdSCmd_descriptor_;
}

const WorldCmdSCmd& WorldCmdSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionSCmd_2eproto();
  return *default_instance_;
}

WorldCmdSCmd* WorldCmdSCmd::default_instance_ = NULL;

WorldCmdSCmd* WorldCmdSCmd::New() const {
  return new WorldCmdSCmd;
}

void WorldCmdSCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 213;
    param_ = 8;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldCmdSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WorldCmdSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_WORLD_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_len;
        break;
      }

      // optional uint32 len = 4;
      case 4: {
        if (tag == 32) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WorldCmdSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WorldCmdSCmd)
  return false;
#undef DO_
}

void WorldCmdSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WorldCmdSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_WORLD_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional uint32 len = 4;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WorldCmdSCmd)
}

::google::protobuf::uint8* WorldCmdSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WorldCmdSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_WORLD_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional uint32 len = 4;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WorldCmdSCmd)
  return target;
}

int WorldCmdSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_WORLD_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 4;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldCmdSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldCmdSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldCmdSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldCmdSCmd::MergeFrom(const WorldCmdSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldCmdSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldCmdSCmd::CopyFrom(const WorldCmdSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldCmdSCmd::IsInitialized() const {

  return true;
}

void WorldCmdSCmd::Swap(WorldCmdSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldCmdSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldCmdSCmd_descriptor_;
  metadata.reflection = WorldCmdSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GmModifyAuctionTimeSCmd::kCmdFieldNumber;
const int GmModifyAuctionTimeSCmd::kParamFieldNumber;
const int GmModifyAuctionTimeSCmd::kAuctionTimeFieldNumber;
#endif  // !_MSC_VER

GmModifyAuctionTimeSCmd::GmModifyAuctionTimeSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GmModifyAuctionTimeSCmd)
}

void GmModifyAuctionTimeSCmd::InitAsDefaultInstance() {
}

GmModifyAuctionTimeSCmd::GmModifyAuctionTimeSCmd(const GmModifyAuctionTimeSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GmModifyAuctionTimeSCmd)
}

void GmModifyAuctionTimeSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 213;
  param_ = 9;
  auction_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GmModifyAuctionTimeSCmd::~GmModifyAuctionTimeSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GmModifyAuctionTimeSCmd)
  SharedDtor();
}

void GmModifyAuctionTimeSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GmModifyAuctionTimeSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GmModifyAuctionTimeSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GmModifyAuctionTimeSCmd_descriptor_;
}

const GmModifyAuctionTimeSCmd& GmModifyAuctionTimeSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionSCmd_2eproto();
  return *default_instance_;
}

GmModifyAuctionTimeSCmd* GmModifyAuctionTimeSCmd::default_instance_ = NULL;

GmModifyAuctionTimeSCmd* GmModifyAuctionTimeSCmd::New() const {
  return new GmModifyAuctionTimeSCmd;
}

void GmModifyAuctionTimeSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 213;
    param_ = 9;
    auction_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GmModifyAuctionTimeSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GmModifyAuctionTimeSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_GM_MODIFY_AUCTION_TIME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_auction_time;
        break;
      }

      // optional uint32 auction_time = 3;
      case 3: {
        if (tag == 24) {
         parse_auction_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auction_time_)));
          set_has_auction_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GmModifyAuctionTimeSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GmModifyAuctionTimeSCmd)
  return false;
#undef DO_
}

void GmModifyAuctionTimeSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GmModifyAuctionTimeSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_GM_MODIFY_AUCTION_TIME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 auction_time = 3;
  if (has_auction_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->auction_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GmModifyAuctionTimeSCmd)
}

::google::protobuf::uint8* GmModifyAuctionTimeSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GmModifyAuctionTimeSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_GM_MODIFY_AUCTION_TIME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 auction_time = 3;
  if (has_auction_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->auction_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GmModifyAuctionTimeSCmd)
  return target;
}

int GmModifyAuctionTimeSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_GM_MODIFY_AUCTION_TIME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 auction_time = 3;
    if (has_auction_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auction_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GmModifyAuctionTimeSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GmModifyAuctionTimeSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GmModifyAuctionTimeSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GmModifyAuctionTimeSCmd::MergeFrom(const GmModifyAuctionTimeSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_auction_time()) {
      set_auction_time(from.auction_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GmModifyAuctionTimeSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GmModifyAuctionTimeSCmd::CopyFrom(const GmModifyAuctionTimeSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmModifyAuctionTimeSCmd::IsInitialized() const {

  return true;
}

void GmModifyAuctionTimeSCmd::Swap(GmModifyAuctionTimeSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(auction_time_, other->auction_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GmModifyAuctionTimeSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GmModifyAuctionTimeSCmd_descriptor_;
  metadata.reflection = GmModifyAuctionTimeSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GmStopAuctionSCmd::kCmdFieldNumber;
const int GmStopAuctionSCmd::kParamFieldNumber;
#endif  // !_MSC_VER

GmStopAuctionSCmd::GmStopAuctionSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GmStopAuctionSCmd)
}

void GmStopAuctionSCmd::InitAsDefaultInstance() {
}

GmStopAuctionSCmd::GmStopAuctionSCmd(const GmStopAuctionSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GmStopAuctionSCmd)
}

void GmStopAuctionSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 213;
  param_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GmStopAuctionSCmd::~GmStopAuctionSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GmStopAuctionSCmd)
  SharedDtor();
}

void GmStopAuctionSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GmStopAuctionSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GmStopAuctionSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GmStopAuctionSCmd_descriptor_;
}

const GmStopAuctionSCmd& GmStopAuctionSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionSCmd_2eproto();
  return *default_instance_;
}

GmStopAuctionSCmd* GmStopAuctionSCmd::default_instance_ = NULL;

GmStopAuctionSCmd* GmStopAuctionSCmd::New() const {
  return new GmStopAuctionSCmd;
}

void GmStopAuctionSCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 213;
    param_ = 10;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GmStopAuctionSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GmStopAuctionSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_GM_STOP_AUCTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GmStopAuctionSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GmStopAuctionSCmd)
  return false;
#undef DO_
}

void GmStopAuctionSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GmStopAuctionSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_GM_STOP_AUCTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GmStopAuctionSCmd)
}

::google::protobuf::uint8* GmStopAuctionSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GmStopAuctionSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_GM_STOP_AUCTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GmStopAuctionSCmd)
  return target;
}

int GmStopAuctionSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_GM_STOP_AUCTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GmStopAuctionSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GmStopAuctionSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GmStopAuctionSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GmStopAuctionSCmd::MergeFrom(const GmStopAuctionSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GmStopAuctionSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GmStopAuctionSCmd::CopyFrom(const GmStopAuctionSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmStopAuctionSCmd::IsInitialized() const {

  return true;
}

void GmStopAuctionSCmd::Swap(GmStopAuctionSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GmStopAuctionSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GmStopAuctionSCmd_descriptor_;
  metadata.reflection = GmStopAuctionSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastMsgBySessionAuctionSCmd::kCmdFieldNumber;
const int BroadcastMsgBySessionAuctionSCmd::kParamFieldNumber;
const int BroadcastMsgBySessionAuctionSCmd::kDataFieldNumber;
const int BroadcastMsgBySessionAuctionSCmd::kLenFieldNumber;
#endif  // !_MSC_VER

BroadcastMsgBySessionAuctionSCmd::BroadcastMsgBySessionAuctionSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BroadcastMsgBySessionAuctionSCmd)
}

void BroadcastMsgBySessionAuctionSCmd::InitAsDefaultInstance() {
}

BroadcastMsgBySessionAuctionSCmd::BroadcastMsgBySessionAuctionSCmd(const BroadcastMsgBySessionAuctionSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BroadcastMsgBySessionAuctionSCmd)
}

void BroadcastMsgBySessionAuctionSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 213;
  param_ = 11;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastMsgBySessionAuctionSCmd::~BroadcastMsgBySessionAuctionSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BroadcastMsgBySessionAuctionSCmd)
  SharedDtor();
}

void BroadcastMsgBySessionAuctionSCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void BroadcastMsgBySessionAuctionSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastMsgBySessionAuctionSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastMsgBySessionAuctionSCmd_descriptor_;
}

const BroadcastMsgBySessionAuctionSCmd& BroadcastMsgBySessionAuctionSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionSCmd_2eproto();
  return *default_instance_;
}

BroadcastMsgBySessionAuctionSCmd* BroadcastMsgBySessionAuctionSCmd::default_instance_ = NULL;

BroadcastMsgBySessionAuctionSCmd* BroadcastMsgBySessionAuctionSCmd::New() const {
  return new BroadcastMsgBySessionAuctionSCmd;
}

void BroadcastMsgBySessionAuctionSCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 213;
    param_ = 11;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastMsgBySessionAuctionSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BroadcastMsgBySessionAuctionSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_BROADCASE_MSG_BYSESSION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuctionSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuctionSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_len;
        break;
      }

      // optional uint32 len = 4;
      case 4: {
        if (tag == 32) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BroadcastMsgBySessionAuctionSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BroadcastMsgBySessionAuctionSCmd)
  return false;
#undef DO_
}

void BroadcastMsgBySessionAuctionSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BroadcastMsgBySessionAuctionSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_BROADCASE_MSG_BYSESSION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional uint32 len = 4;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BroadcastMsgBySessionAuctionSCmd)
}

::google::protobuf::uint8* BroadcastMsgBySessionAuctionSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BroadcastMsgBySessionAuctionSCmd)
  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_BROADCASE_MSG_BYSESSION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional uint32 len = 4;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BroadcastMsgBySessionAuctionSCmd)
  return target;
}

int BroadcastMsgBySessionAuctionSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_BROADCASE_MSG_BYSESSION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 4;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastMsgBySessionAuctionSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastMsgBySessionAuctionSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastMsgBySessionAuctionSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastMsgBySessionAuctionSCmd::MergeFrom(const BroadcastMsgBySessionAuctionSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastMsgBySessionAuctionSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastMsgBySessionAuctionSCmd::CopyFrom(const BroadcastMsgBySessionAuctionSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastMsgBySessionAuctionSCmd::IsInitialized() const {

  return true;
}

void BroadcastMsgBySessionAuctionSCmd::Swap(BroadcastMsgBySessionAuctionSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastMsgBySessionAuctionSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastMsgBySessionAuctionSCmd_descriptor_;
  metadata.reflection = BroadcastMsgBySessionAuctionSCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
